
401_nrf_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003b80  08003b80  00013b80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000158  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200001c8  200001c8  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011ab1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000024d1  00000000  00000000  00031b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007e10  00000000  00000000  00034022  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  0003c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000060b9  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003f0c  00000000  00000000  00043899  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000477a5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002614  00000000  00000000  00047824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b68 	.word	0x08003b68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b68 	.word	0x08003b68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b97a 	b.w	8000d70 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	468c      	mov	ip, r1
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	9e08      	ldr	r6, [sp, #32]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d151      	bne.n	8000b48 <__udivmoddi4+0xb4>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d96d      	bls.n	8000b86 <__udivmoddi4+0xf2>
 8000aaa:	fab2 fe82 	clz	lr, r2
 8000aae:	f1be 0f00 	cmp.w	lr, #0
 8000ab2:	d00b      	beq.n	8000acc <__udivmoddi4+0x38>
 8000ab4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000abc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ac0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000acc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ad0:	0c25      	lsrs	r5, r4, #16
 8000ad2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad6:	fa1f f987 	uxth.w	r9, r7
 8000ada:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ade:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ae2:	fb08 f309 	mul.w	r3, r8, r9
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x6c>
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	f108 32ff 	add.w	r2, r8, #4294967295
 8000af0:	f080 8123 	bcs.w	8000d3a <__udivmoddi4+0x2a6>
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	f240 8120 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	443d      	add	r5, r7
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b08:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b10:	fb00 f909 	mul.w	r9, r0, r9
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x98>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	f080 810a 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000b22:	45a1      	cmp	r9, r4
 8000b24:	f240 8107 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	eba4 0409 	sub.w	r4, r4, r9
 8000b30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d061      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b3a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6034      	str	r4, [r6, #0]
 8000b42:	6073      	str	r3, [r6, #4]
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0xc8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d054      	beq.n	8000bfa <__udivmoddi4+0x166>
 8000b50:	2100      	movs	r1, #0
 8000b52:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b56:	4608      	mov	r0, r1
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	fab3 f183 	clz	r1, r3
 8000b60:	2900      	cmp	r1, #0
 8000b62:	f040 808e 	bne.w	8000c82 <__udivmoddi4+0x1ee>
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xdc>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80fa 	bhi.w	8000d64 <__udivmoddi4+0x2d0>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb65 0503 	sbc.w	r5, r5, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	46ac      	mov	ip, r5
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d03f      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b7e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	b912      	cbnz	r2, 8000b8e <__udivmoddi4+0xfa>
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8e:	fab7 fe87 	clz	lr, r7
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d134      	bne.n	8000c02 <__udivmoddi4+0x16e>
 8000b98:	1beb      	subs	r3, r5, r7
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba6:	0c25      	lsrs	r5, r4, #16
 8000ba8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bb0:	fb0c f308 	mul.w	r3, ip, r8
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x134>
 8000bb8:	19ed      	adds	r5, r5, r7
 8000bba:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x132>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f200 80d1 	bhi.w	8000d68 <__udivmoddi4+0x2d4>
 8000bc6:	4680      	mov	r8, r0
 8000bc8:	1aed      	subs	r5, r5, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bd0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x15c>
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x15a>
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	f200 80b8 	bhi.w	8000d5e <__udivmoddi4+0x2ca>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf8:	e79d      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1ce 0420 	rsb	r4, lr, #32
 8000c06:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c0a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa25 f404 	lsr.w	r4, r5, r4
 8000c18:	ea48 0803 	orr.w	r8, r8, r3
 8000c1c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c20:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c24:	fb02 4411 	mls	r4, r2, r1, r4
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c30:	fb01 f30c 	mul.w	r3, r1, ip
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x1bc>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c42:	f080 808a 	bcs.w	8000d5a <__udivmoddi4+0x2c6>
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	f240 8087 	bls.w	8000d5a <__udivmoddi4+0x2c6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aeb      	subs	r3, r5, r3
 8000c52:	fa1f f588 	uxth.w	r5, r8
 8000c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c62:	fb00 f30c 	mul.w	r3, r0, ip
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x1e6>
 8000c6a:	19ed      	adds	r5, r5, r7
 8000c6c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c70:	d26f      	bcs.n	8000d52 <__udivmoddi4+0x2be>
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0x2be>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443d      	add	r5, r7
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	e78f      	b.n	8000ba2 <__udivmoddi4+0x10e>
 8000c82:	f1c1 0720 	rsb	r7, r1, #32
 8000c86:	fa22 f807 	lsr.w	r8, r2, r7
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c90:	ea48 0303 	orr.w	r3, r8, r3
 8000c94:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ca2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000caa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cae:	fa1f f883 	uxth.w	r8, r3
 8000cb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb6:	fb09 f408 	mul.w	r4, r9, r8
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x244>
 8000cc6:	18ed      	adds	r5, r5, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	d243      	bcs.n	8000d56 <__udivmoddi4+0x2c2>
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	d941      	bls.n	8000d56 <__udivmoddi4+0x2c2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	441d      	add	r5, r3
 8000cd8:	1b2d      	subs	r5, r5, r4
 8000cda:	fa1f fe8e 	uxth.w	lr, lr
 8000cde:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ce2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cea:	fb00 f808 	mul.w	r8, r0, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cf2:	18e4      	adds	r4, r4, r3
 8000cf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf8:	d229      	bcs.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfa:	45a0      	cmp	r8, r4
 8000cfc:	d927      	bls.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	441c      	add	r4, r3
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	eba4 0408 	sub.w	r4, r4, r8
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c6      	mov	lr, r8
 8000d12:	464d      	mov	r5, r9
 8000d14:	d315      	bcc.n	8000d42 <__udivmoddi4+0x2ae>
 8000d16:	d012      	beq.n	8000d3e <__udivmoddi4+0x2aa>
 8000d18:	b156      	cbz	r6, 8000d30 <__udivmoddi4+0x29c>
 8000d1a:	ebba 030e 	subs.w	r3, sl, lr
 8000d1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d22:	fa04 f707 	lsl.w	r7, r4, r7
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	6037      	str	r7, [r6, #0]
 8000d2e:	6074      	str	r4, [r6, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	4618      	mov	r0, r3
 8000d38:	e6f8      	b.n	8000b2c <__udivmoddi4+0x98>
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	e6e0      	b.n	8000b00 <__udivmoddi4+0x6c>
 8000d3e:	45c2      	cmp	sl, r8
 8000d40:	d2ea      	bcs.n	8000d18 <__udivmoddi4+0x284>
 8000d42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d46:	eb69 0503 	sbc.w	r5, r9, r3
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7e4      	b.n	8000d18 <__udivmoddi4+0x284>
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e7d7      	b.n	8000d02 <__udivmoddi4+0x26e>
 8000d52:	4640      	mov	r0, r8
 8000d54:	e791      	b.n	8000c7a <__udivmoddi4+0x1e6>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e7be      	b.n	8000cd8 <__udivmoddi4+0x244>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0x1bc>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	e745      	b.n	8000bf0 <__udivmoddi4+0x15c>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e708      	b.n	8000b7a <__udivmoddi4+0xe6>
 8000d68:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6c:	443d      	add	r5, r7
 8000d6e:	e72b      	b.n	8000bc8 <__udivmoddi4+0x134>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_InitTick+0x3c>)
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_InitTick+0x40>)
{
 8000d7a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	7818      	ldrb	r0, [r3, #0]
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d86:	6810      	ldr	r0, [r2, #0]
 8000d88:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d8c:	f000 f8aa 	bl	8000ee4 <HAL_SYSTICK_Config>
 8000d90:	4604      	mov	r4, r0
 8000d92:	b958      	cbnz	r0, 8000dac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	2d0f      	cmp	r5, #15
 8000d96:	d809      	bhi.n	8000dac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f85e 	bl	8000e60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_InitTick+0x44>)
 8000da6:	4620      	mov	r0, r4
 8000da8:	601d      	str	r5, [r3, #0]
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_Init>:
{
 8000dbc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x30>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dd6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f82f 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ffc8 	bl	8000d74 <HAL_InitTick>
  HAL_MspInit();
 8000de4:	f002 f912 	bl	800300c <HAL_MspInit>
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd08      	pop	{r3, pc}
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x10>)
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_IncTick+0x14>)
 8000df4:	6811      	ldr	r1, [r2, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	440b      	add	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000098 	.word	0x20000098
 8000e04:	20000000 	.word	0x20000000

08000e08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e08:	4b01      	ldr	r3, [pc, #4]	; (8000e10 <HAL_GetTick+0x8>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000098 	.word	0x20000098

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff6 	bl	8000e08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	bf1c      	itt	ne
 8000e20:	4b05      	ldrne	r3, [pc, #20]	; (8000e38 <HAL_Delay+0x24>)
 8000e22:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e26:	bf18      	it	ne
 8000e28:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	f7ff ffed 	bl	8000e08 <HAL_GetTick>
 8000e2e:	1b40      	subs	r0, r0, r5
 8000e30:	4284      	cmp	r4, r0
 8000e32:	d8fa      	bhi.n	8000e2a <HAL_Delay+0x16>
  {
  }
}
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e3e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e44:	041b      	lsls	r3, r3, #16
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	0200      	lsls	r0, r0, #8
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e56:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e58:	60d3      	str	r3, [r2, #12]
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b530      	push	{r4, r5, lr}
 8000e64:	68dc      	ldr	r4, [r3, #12]
 8000e66:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	bf28      	it	cs
 8000e74:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 0501 	mov.w	r5, #1
 8000e7c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e80:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e84:	bf8c      	ite	hi
 8000e86:	3c03      	subhi	r4, #3
 8000e88:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e92:	3c01      	subs	r4, #1
 8000e94:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	ea42 0201 	orr.w	r2, r2, r1
 8000e9c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	bfad      	iteet	ge
 8000ea2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	f000 000f 	andlt.w	r0, r0, #15
 8000eaa:	4b06      	ldrlt	r3, [pc, #24]	; (8000ec4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	bfb5      	itete	lt
 8000eb2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ebc:	bd30      	pop	{r4, r5, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	e000ed14 	.word	0xe000ed14

08000ec8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	db08      	blt.n	8000ede <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	0942      	lsrs	r2, r0, #5
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f000 001f 	and.w	r0, r0, #31
 8000ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <HAL_NVIC_EnableIRQ+0x18>)
 8000eda:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eea:	d20a      	bcs.n	8000f02 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	21f0      	movs	r1, #240	; 0xf0
 8000ef4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f14:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80010a8 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1c:	4a60      	ldr	r2, [pc, #384]	; (80010a0 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000f20:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f24:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000f28:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000f2e:	42ac      	cmp	r4, r5
 8000f30:	f040 80a6 	bne.w	8001080 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	684c      	ldr	r4, [r1, #4]
 8000f36:	f024 0c10 	bic.w	ip, r4, #16
 8000f3a:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000f3e:	2e01      	cmp	r6, #1
 8000f40:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f44:	d812      	bhi.n	8000f6c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000f46:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	2603      	movs	r6, #3
 8000f4a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f4e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	68ce      	ldr	r6, [r1, #12]
 8000f54:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f58:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000f5a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f5c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f5e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f62:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f66:	409e      	lsls	r6, r3
 8000f68:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000f6a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000f6e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f70:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f74:	43f6      	mvns	r6, r6
 8000f76:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7a:	688f      	ldr	r7, [r1, #8]
 8000f7c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f80:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000f88:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	d116      	bne.n	8000fba <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f90:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f94:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fa0:	f04f 0c0f 	mov.w	ip, #15
 8000fa4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fa8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	690f      	ldr	r7, [r1, #16]
 8000fae:	fa07 f70b 	lsl.w	r7, r7, fp
 8000fb2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000fb6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000fba:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	f004 0703 	and.w	r7, r4, #3
 8000fc2:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000fc6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000fca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fcc:	00e6      	lsls	r6, r4, #3
 8000fce:	d557      	bpl.n	8001080 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd0:	f04f 0b00 	mov.w	fp, #0
 8000fd4:	f8cd b00c 	str.w	fp, [sp, #12]
 8000fd8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fdc:	4e31      	ldr	r6, [pc, #196]	; (80010a4 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000fe2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000fe6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000fea:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000fee:	9703      	str	r7, [sp, #12]
 8000ff0:	9f03      	ldr	r7, [sp, #12]
 8000ff2:	f023 0703 	bic.w	r7, r3, #3
 8000ff6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ffa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffe:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001006:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800100a:	f04f 0e0f 	mov.w	lr, #15
 800100e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001018:	d039      	beq.n	800108e <HAL_GPIO_Init+0x17e>
 800101a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800101e:	42b0      	cmp	r0, r6
 8001020:	d037      	beq.n	8001092 <HAL_GPIO_Init+0x182>
 8001022:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001026:	42b0      	cmp	r0, r6
 8001028:	d035      	beq.n	8001096 <HAL_GPIO_Init+0x186>
 800102a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800102e:	42b0      	cmp	r0, r6
 8001030:	d033      	beq.n	800109a <HAL_GPIO_Init+0x18a>
 8001032:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001036:	42b0      	cmp	r0, r6
 8001038:	bf14      	ite	ne
 800103a:	2607      	movne	r6, #7
 800103c:	2604      	moveq	r6, #4
 800103e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001042:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001046:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001048:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800104a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001050:	bf0c      	ite	eq
 8001052:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001054:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001056:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001058:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800105e:	bf0c      	ite	eq
 8001060:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001062:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001064:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800106c:	bf0c      	ite	eq
 800106e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001070:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001072:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001076:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001078:	bf54      	ite	pl
 800107a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800107c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800107e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001080:	3301      	adds	r3, #1
 8001082:	2b10      	cmp	r3, #16
 8001084:	f47f af4f 	bne.w	8000f26 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001088:	b005      	add	sp, #20
 800108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	465e      	mov	r6, fp
 8001090:	e7d5      	b.n	800103e <HAL_GPIO_Init+0x12e>
 8001092:	2601      	movs	r6, #1
 8001094:	e7d3      	b.n	800103e <HAL_GPIO_Init+0x12e>
 8001096:	2602      	movs	r6, #2
 8001098:	e7d1      	b.n	800103e <HAL_GPIO_Init+0x12e>
 800109a:	2603      	movs	r6, #3
 800109c:	e7cf      	b.n	800103e <HAL_GPIO_Init+0x12e>
 800109e:	bf00      	nop
 80010a0:	40013c00 	.word	0x40013c00
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	b10a      	cbz	r2, 80010b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	6181      	str	r1, [r0, #24]
 80010b0:	4770      	bx	lr
 80010b2:	0409      	lsls	r1, r1, #16
 80010b4:	e7fb      	b.n	80010ae <HAL_GPIO_WritePin+0x2>

080010b6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010b6:	6943      	ldr	r3, [r0, #20]
 80010b8:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010bc:	bf08      	it	eq
 80010be:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c0:	6181      	str	r1, [r0, #24]
 80010c2:	4770      	bx	lr

080010c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010c8:	6959      	ldr	r1, [r3, #20]
 80010ca:	4201      	tst	r1, r0
 80010cc:	d002      	beq.n	80010d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d0:	f001 fb66 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop
 80010d8:	40013c00 	.word	0x40013c00

080010dc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010dc:	6801      	ldr	r1, [r0, #0]
 80010de:	694b      	ldr	r3, [r1, #20]
 80010e0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	d010      	beq.n	800110c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ea:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80010ee:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80010f0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010f2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010f8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010fc:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	4770      	bx	lr
  }
  return HAL_OK;
 800110c:	4618      	mov	r0, r3
}
 800110e:	4770      	bx	lr

08001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001114:	4604      	mov	r4, r0
 8001116:	4617      	mov	r7, r2
 8001118:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800111a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800111e:	b28e      	uxth	r6, r1
 8001120:	6825      	ldr	r5, [r4, #0]
 8001122:	f1b8 0f01 	cmp.w	r8, #1
 8001126:	bf0c      	ite	eq
 8001128:	696b      	ldreq	r3, [r5, #20]
 800112a:	69ab      	ldrne	r3, [r5, #24]
 800112c:	ea36 0303 	bics.w	r3, r6, r3
 8001130:	bf14      	ite	ne
 8001132:	2001      	movne	r0, #1
 8001134:	2000      	moveq	r0, #0
 8001136:	b908      	cbnz	r0, 800113c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800113c:	696b      	ldr	r3, [r5, #20]
 800113e:	055a      	lsls	r2, r3, #21
 8001140:	d516      	bpl.n	8001170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001148:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800114a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800114e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001150:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001156:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800115a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800115e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001160:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001164:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001166:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800116a:	2001      	movs	r0, #1
 800116c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001170:	1c7b      	adds	r3, r7, #1
 8001172:	d0d5      	beq.n	8001120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001174:	f7ff fe48 	bl	8000e08 <HAL_GetTick>
 8001178:	eba0 0009 	sub.w	r0, r0, r9
 800117c:	4287      	cmp	r7, r0
 800117e:	d301      	bcc.n	8001184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001180:	2f00      	cmp	r7, #0
 8001182:	d1cd      	bne.n	8001120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001184:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001186:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001188:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800118a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800118e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001192:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	e7e4      	b.n	8001164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800119a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800119a:	b570      	push	{r4, r5, r6, lr}
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	075b      	lsls	r3, r3, #29
 80011a8:	d501      	bpl.n	80011ae <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80011aa:	2000      	movs	r0, #0
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff ff94 	bl	80010dc <I2C_IsAcknowledgeFailed>
 80011b4:	b9a8      	cbnz	r0, 80011e2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80011b6:	1c6a      	adds	r2, r5, #1
 80011b8:	d0f3      	beq.n	80011a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ba:	f7ff fe25 	bl	8000e08 <HAL_GetTick>
 80011be:	1b80      	subs	r0, r0, r6
 80011c0:	4285      	cmp	r5, r0
 80011c2:	d301      	bcc.n	80011c8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d1ec      	bne.n	80011a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80011c8:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80011ca:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80011cc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80011ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80011d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011dc:	f042 0220 	orr.w	r2, r2, #32
 80011e0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
}
 80011e4:	bd70      	pop	{r4, r5, r6, pc}

080011e6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80011e6:	b570      	push	{r4, r5, r6, lr}
 80011e8:	4604      	mov	r4, r0
 80011ea:	460d      	mov	r5, r1
 80011ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	6943      	ldr	r3, [r0, #20]
 80011f2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80011f6:	d001      	beq.n	80011fc <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80011f8:	2000      	movs	r0, #0
}
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80011fc:	6942      	ldr	r2, [r0, #20]
 80011fe:	06d2      	lsls	r2, r2, #27
 8001200:	d50e      	bpl.n	8001220 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001202:	f06f 0210 	mvn.w	r2, #16
 8001206:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001208:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800120a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800120c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001210:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001214:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001216:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800121c:	2001      	movs	r0, #1
 800121e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001220:	f7ff fdf2 	bl	8000e08 <HAL_GetTick>
 8001224:	1b80      	subs	r0, r0, r6
 8001226:	42a8      	cmp	r0, r5
 8001228:	d801      	bhi.n	800122e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800122a:	2d00      	cmp	r5, #0
 800122c:	d1df      	bne.n	80011ee <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800122e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001230:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001232:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001234:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001238:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800123c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	e7e8      	b.n	8001216 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001244 <I2C_WaitOnFlagUntilTimeout>:
{
 8001244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001248:	9e08      	ldr	r6, [sp, #32]
 800124a:	4604      	mov	r4, r0
 800124c:	4690      	mov	r8, r2
 800124e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001250:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001254:	b28d      	uxth	r5, r1
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	f1b9 0f01 	cmp.w	r9, #1
 800125c:	bf0c      	ite	eq
 800125e:	695b      	ldreq	r3, [r3, #20]
 8001260:	699b      	ldrne	r3, [r3, #24]
 8001262:	ea35 0303 	bics.w	r3, r5, r3
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	4543      	cmp	r3, r8
 800126e:	d002      	beq.n	8001276 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001270:	2000      	movs	r0, #0
}
 8001272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	d0ed      	beq.n	8001256 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127a:	f7ff fdc5 	bl	8000e08 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	4287      	cmp	r7, r0
 8001282:	d301      	bcc.n	8001288 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001284:	2f00      	cmp	r7, #0
 8001286:	d1e6      	bne.n	8001256 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001288:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800128a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800128c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800128e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001292:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001296:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80012a2:	2001      	movs	r0, #1
 80012a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080012a8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	d501      	bpl.n	80012bc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80012b8:	2000      	movs	r0, #0
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff ff0d 	bl	80010dc <I2C_IsAcknowledgeFailed>
 80012c2:	b9a8      	cbnz	r0, 80012f0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80012c4:	1c6a      	adds	r2, r5, #1
 80012c6:	d0f3      	beq.n	80012b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c8:	f7ff fd9e 	bl	8000e08 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	4285      	cmp	r5, r0
 80012d0:	d301      	bcc.n	80012d6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80012d2:	2d00      	cmp	r5, #0
 80012d4:	d1ec      	bne.n	80012b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012d6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012da:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80012e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
}
 80012f2:	bd70      	pop	{r4, r5, r6, pc}

080012f4 <HAL_I2C_Init>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80012f6:	4604      	mov	r4, r0
 80012f8:	b908      	cbnz	r0, 80012fe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80012fa:	2001      	movs	r0, #1
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001302:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001306:	b91b      	cbnz	r3, 8001310 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001308:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800130c:	f001 fe9e 	bl	800304c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	2324      	movs	r3, #36	; 0x24
 8001312:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001330:	f000 fd44 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001334:	6865      	ldr	r5, [r4, #4]
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_I2C_Init+0x148>)
 8001338:	429d      	cmp	r5, r3
 800133a:	d84d      	bhi.n	80013d8 <HAL_I2C_Init+0xe4>
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <HAL_I2C_Init+0x14c>)
 800133e:	4298      	cmp	r0, r3
 8001340:	d9db      	bls.n	80012fa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001342:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001344:	493f      	ldr	r1, [pc, #252]	; (8001444 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001346:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001348:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800134c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001350:	430b      	orrs	r3, r1
 8001352:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001354:	6a13      	ldr	r3, [r2, #32]
 8001356:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800135a:	3101      	adds	r1, #1
 800135c:	4319      	orrs	r1, r3
 800135e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001360:	69d1      	ldr	r1, [r2, #28]
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_I2C_Init+0x148>)
 8001364:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001368:	429d      	cmp	r5, r3
 800136a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800136e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001372:	d848      	bhi.n	8001406 <HAL_I2C_Init+0x112>
 8001374:	006d      	lsls	r5, r5, #1
 8001376:	fbb0 f0f5 	udiv	r0, r0, r5
 800137a:	3001      	adds	r0, #1
 800137c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	bf38      	it	cc
 8001384:	2304      	movcc	r3, #4
 8001386:	430b      	orrs	r3, r1
 8001388:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	6a20      	ldr	r0, [r4, #32]
 800138e:	69e3      	ldr	r3, [r4, #28]
 8001390:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001394:	4303      	orrs	r3, r0
 8001396:	430b      	orrs	r3, r1
 8001398:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800139a:	6891      	ldr	r1, [r2, #8]
 800139c:	68e0      	ldr	r0, [r4, #12]
 800139e:	6923      	ldr	r3, [r4, #16]
 80013a0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80013a4:	4303      	orrs	r3, r0
 80013a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013ae:	68d1      	ldr	r1, [r2, #12]
 80013b0:	69a0      	ldr	r0, [r4, #24]
 80013b2:	6963      	ldr	r3, [r4, #20]
 80013b4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80013b8:	4303      	orrs	r3, r0
 80013ba:	430b      	orrs	r3, r1
 80013bc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ca:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_I2C_Init+0x154>)
 80013da:	4298      	cmp	r0, r3
 80013dc:	d98d      	bls.n	80012fa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013de:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013e0:	4e18      	ldr	r6, [pc, #96]	; (8001444 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013e2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80013e4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ec:	4333      	orrs	r3, r6
 80013ee:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013f0:	6a13      	ldr	r3, [r2, #32]
 80013f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013f6:	4371      	muls	r1, r6
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001400:	fbb1 f1f6 	udiv	r1, r1, r6
 8001404:	e7a9      	b.n	800135a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001406:	68a3      	ldr	r3, [r4, #8]
 8001408:	b953      	cbnz	r3, 8001420 <HAL_I2C_Init+0x12c>
 800140a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800140e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001412:	1c43      	adds	r3, r0, #1
 8001414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001418:	b16b      	cbz	r3, 8001436 <HAL_I2C_Init+0x142>
 800141a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141e:	e7b2      	b.n	8001386 <HAL_I2C_Init+0x92>
 8001420:	2319      	movs	r3, #25
 8001422:	436b      	muls	r3, r5
 8001424:	fbb0 f0f3 	udiv	r0, r0, r3
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142e:	b113      	cbz	r3, 8001436 <HAL_I2C_Init+0x142>
 8001430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001434:	e7a7      	b.n	8001386 <HAL_I2C_Init+0x92>
 8001436:	2301      	movs	r3, #1
 8001438:	e7a5      	b.n	8001386 <HAL_I2C_Init+0x92>
 800143a:	bf00      	nop
 800143c:	000186a0 	.word	0x000186a0
 8001440:	001e847f 	.word	0x001e847f
 8001444:	000f4240 	.word	0x000f4240
 8001448:	003d08ff 	.word	0x003d08ff

0800144c <HAL_I2C_Master_Transmit>:
{
 800144c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001450:	4604      	mov	r4, r0
 8001452:	461f      	mov	r7, r3
 8001454:	460d      	mov	r5, r1
 8001456:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fcd6 	bl	8000e08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800145c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001460:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001462:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	d004      	beq.n	8001470 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001466:	2502      	movs	r5, #2
}
 8001468:	4628      	mov	r0, r5
 800146a:	b004      	add	sp, #16
 800146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001470:	9000      	str	r0, [sp, #0]
 8001472:	2319      	movs	r3, #25
 8001474:	2201      	movs	r2, #1
 8001476:	495b      	ldr	r1, [pc, #364]	; (80015e4 <HAL_I2C_Master_Transmit+0x198>)
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fee3 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 800147e:	2800      	cmp	r0, #0
 8001480:	d1f1      	bne.n	8001466 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001482:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001486:	2b01      	cmp	r3, #1
 8001488:	d0ed      	beq.n	8001466 <HAL_I2C_Master_Transmit+0x1a>
 800148a:	2301      	movs	r3, #1
 800148c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001496:	bf5e      	ittt	pl
 8001498:	681a      	ldrpl	r2, [r3, #0]
 800149a:	f042 0201 	orrpl.w	r2, r2, #1
 800149e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014a8:	2221      	movs	r2, #33	; 0x21
 80014aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014ae:	2210      	movs	r2, #16
 80014b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014b4:	2200      	movs	r2, #0
 80014b6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80014b8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014bc:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014be:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <HAL_I2C_Master_Transmit+0x19c>)
 80014c0:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80014c4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014c8:	2a08      	cmp	r2, #8
 80014ca:	d004      	beq.n	80014d6 <HAL_I2C_Master_Transmit+0x8a>
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d002      	beq.n	80014d6 <HAL_I2C_Master_Transmit+0x8a>
 80014d0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80014d4:	d104      	bne.n	80014e0 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e002      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014e2:	2a12      	cmp	r2, #18
 80014e4:	d0f7      	beq.n	80014d6 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014e6:	2200      	movs	r2, #0
 80014e8:	9600      	str	r6, [sp, #0]
 80014ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fea7 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	b138      	cbz	r0, 800150a <HAL_I2C_Master_Transmit+0xbe>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014fe:	bf44      	itt	mi
 8001500:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8001504:	6423      	strmi	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001506:	2501      	movs	r5, #1
 8001508:	e7ae      	b.n	8001468 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150a:	6923      	ldr	r3, [r4, #16]
 800150c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001510:	d113      	bne.n	800153a <HAL_I2C_Master_Transmit+0xee>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001512:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001516:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001518:	4633      	mov	r3, r6
 800151a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800151c:	4933      	ldr	r1, [pc, #204]	; (80015ec <HAL_I2C_Master_Transmit+0x1a0>)
 800151e:	4620      	mov	r0, r4
 8001520:	f7ff fdf6 	bl	8001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001524:	4605      	mov	r5, r0
 8001526:	2800      	cmp	r0, #0
 8001528:	d1ed      	bne.n	8001506 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	9003      	str	r0, [sp, #12]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	9203      	str	r2, [sp, #12]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001538:	e044      	b.n	80015c4 <HAL_I2C_Master_Transmit+0x178>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800153a:	11eb      	asrs	r3, r5, #7
 800153c:	f003 0306 	and.w	r3, r3, #6
 8001540:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001544:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001546:	492a      	ldr	r1, [pc, #168]	; (80015f0 <HAL_I2C_Master_Transmit+0x1a4>)
 8001548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800154a:	4633      	mov	r3, r6
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff fddf 	bl	8001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001552:	2800      	cmp	r0, #0
 8001554:	d1d7      	bne.n	8001506 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	b2ed      	uxtb	r5, r5
 800155a:	611d      	str	r5, [r3, #16]
 800155c:	e7dc      	b.n	8001518 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155e:	4632      	mov	r2, r6
 8001560:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff fea0 	bl	80012a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001568:	b140      	cbz	r0, 800157c <HAL_I2C_Master_Transmit+0x130>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800156a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800156c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156e:	bf01      	itttt	eq
 8001570:	6822      	ldreq	r2, [r4, #0]
 8001572:	6813      	ldreq	r3, [r2, #0]
 8001574:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001578:	6013      	streq	r3, [r2, #0]
 800157a:	e7c4      	b.n	8001506 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800157c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001586:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001588:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800158a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800158c:	3a01      	subs	r2, #1
 800158e:	b292      	uxth	r2, r2
 8001590:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001592:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001594:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001596:	1e51      	subs	r1, r2, #1
 8001598:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800159a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800159c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800159e:	d50a      	bpl.n	80015b6 <HAL_I2C_Master_Transmit+0x16a>
 80015a0:	b149      	cbz	r1, 80015b6 <HAL_I2C_Master_Transmit+0x16a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015a2:	7859      	ldrb	r1, [r3, #1]
 80015a4:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80015a6:	3302      	adds	r3, #2
 80015a8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80015aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80015b0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80015b2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80015b4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b6:	4632      	mov	r2, r6
 80015b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fded 	bl	800119a <I2C_WaitOnBTFFlagUntilTimeout>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d1d2      	bne.n	800156a <HAL_I2C_Master_Transmit+0x11e>
    while (hi2c->XferSize > 0U)
 80015c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1c9      	bne.n	800155e <HAL_I2C_Master_Transmit+0x112>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ca:	6821      	ldr	r1, [r4, #0]
 80015cc:	680a      	ldr	r2, [r1, #0]
 80015ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	2220      	movs	r2, #32
 80015d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80015da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80015e2:	e741      	b.n	8001468 <HAL_I2C_Master_Transmit+0x1c>
 80015e4:	00100002 	.word	0x00100002
 80015e8:	ffff0000 	.word	0xffff0000
 80015ec:	00010002 	.word	0x00010002
 80015f0:	00010008 	.word	0x00010008

080015f4 <HAL_I2C_Master_Receive>:
{
 80015f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015f8:	4604      	mov	r4, r0
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	4698      	mov	r8, r3
 80015fe:	460e      	mov	r6, r1
 8001600:	4691      	mov	r9, r2
 8001602:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fc00 	bl	8000e08 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001608:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800160c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800160e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001610:	d004      	beq.n	800161c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001612:	2602      	movs	r6, #2
}
 8001614:	4630      	mov	r0, r6
 8001616:	b009      	add	sp, #36	; 0x24
 8001618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800161c:	9000      	str	r0, [sp, #0]
 800161e:	2319      	movs	r3, #25
 8001620:	2201      	movs	r2, #1
 8001622:	499b      	ldr	r1, [pc, #620]	; (8001890 <HAL_I2C_Master_Receive+0x29c>)
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe0d 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 800162a:	2800      	cmp	r0, #0
 800162c:	d1f1      	bne.n	8001612 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800162e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001632:	2b01      	cmp	r3, #1
 8001634:	d0ed      	beq.n	8001612 <HAL_I2C_Master_Receive+0x1e>
 8001636:	2301      	movs	r3, #1
 8001638:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001642:	bf5e      	ittt	pl
 8001644:	681a      	ldrpl	r2, [r3, #0]
 8001646:	f042 0201 	orrpl.w	r2, r2, #1
 800164a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001652:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001654:	2222      	movs	r2, #34	; 0x22
 8001656:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800165a:	2210      	movs	r2, #16
 800165c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001660:	2200      	movs	r2, #0
 8001662:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001664:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001668:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800166a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800166c:	4a89      	ldr	r2, [pc, #548]	; (8001894 <HAL_I2C_Master_Receive+0x2a0>)
 800166e:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001670:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001672:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001674:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001678:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800167c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800167e:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001680:	d004      	beq.n	800168c <HAL_I2C_Master_Receive+0x98>
 8001682:	2a01      	cmp	r2, #1
 8001684:	d002      	beq.n	800168c <HAL_I2C_Master_Receive+0x98>
 8001686:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800168a:	d104      	bne.n	8001696 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e002      	b.n	800169c <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001696:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001698:	2a11      	cmp	r2, #17
 800169a:	d0f7      	beq.n	800168c <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	9500      	str	r5, [sp, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fdcc 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	b138      	cbz	r0, 80016c0 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80016b0:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80016b2:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016b4:	bf44      	itt	mi
 80016b6:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80016ba:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80016bc:	2601      	movs	r6, #1
 80016be:	e7a9      	b.n	8001614 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c0:	6922      	ldr	r2, [r4, #16]
 80016c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80016c6:	d140      	bne.n	800174a <HAL_I2C_Master_Receive+0x156>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016c8:	f046 0601 	orr.w	r6, r6, #1
 80016cc:	b2f6      	uxtb	r6, r6
 80016ce:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d0:	462b      	mov	r3, r5
 80016d2:	463a      	mov	r2, r7
 80016d4:	4970      	ldr	r1, [pc, #448]	; (8001898 <HAL_I2C_Master_Receive+0x2a4>)
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff fd1a 	bl	8001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016dc:	4606      	mov	r6, r0
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1ec      	bne.n	80016bc <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 80016e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d064      	beq.n	80017b4 <HAL_I2C_Master_Receive+0x1c0>
    else if (hi2c->XferSize == 1U)
 80016ea:	2a01      	cmp	r2, #1
 80016ec:	d175      	bne.n	80017da <HAL_I2C_Master_Receive+0x1e6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f6:	9604      	str	r6, [sp, #16]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	9204      	str	r2, [sp, #16]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	9204      	str	r2, [sp, #16]
 8001700:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001708:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170a:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80018a0 <HAL_I2C_Master_Receive+0x2ac>
    while (hi2c->XferSize > 0U)
 800170e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d059      	beq.n	80017c8 <HAL_I2C_Master_Receive+0x1d4>
      if (hi2c->XferSize <= 3U)
 8001714:	2b03      	cmp	r3, #3
 8001716:	f200 80c5 	bhi.w	80018a4 <HAL_I2C_Master_Receive+0x2b0>
        if (hi2c->XferSize == 1U)
 800171a:	2b01      	cmp	r3, #1
 800171c:	d178      	bne.n	8001810 <HAL_I2C_Master_Receive+0x21c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171e:	462a      	mov	r2, r5
 8001720:	4639      	mov	r1, r7
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fd5f 	bl	80011e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001728:	2800      	cmp	r0, #0
 800172a:	d1c7      	bne.n	80016bc <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001730:	6912      	ldr	r2, [r2, #16]
 8001732:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800173a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001740:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001742:	3b01      	subs	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001748:	e7e1      	b.n	800170e <HAL_I2C_Master_Receive+0x11a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800174a:	ea4f 18e6 	mov.w	r8, r6, asr #7
 800174e:	f008 0806 	and.w	r8, r8, #6
 8001752:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001756:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001758:	4950      	ldr	r1, [pc, #320]	; (800189c <HAL_I2C_Master_Receive+0x2a8>)
 800175a:	462b      	mov	r3, r5
 800175c:	463a      	mov	r2, r7
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fcd6 	bl	8001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001764:	2800      	cmp	r0, #0
 8001766:	d1a9      	bne.n	80016bc <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001768:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800176a:	494b      	ldr	r1, [pc, #300]	; (8001898 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800176c:	b2f6      	uxtb	r6, r6
 800176e:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001770:	463a      	mov	r2, r7
 8001772:	462b      	mov	r3, r5
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff fccb 	bl	8001110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800177a:	4602      	mov	r2, r0
 800177c:	2800      	cmp	r0, #0
 800177e:	d19d      	bne.n	80016bc <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	9007      	str	r0, [sp, #28]
 8001784:	6959      	ldr	r1, [r3, #20]
 8001786:	9107      	str	r1, [sp, #28]
 8001788:	6999      	ldr	r1, [r3, #24]
 800178a:	9107      	str	r1, [sp, #28]
 800178c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001794:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001796:	4620      	mov	r0, r4
 8001798:	9500      	str	r5, [sp, #0]
 800179a:	463b      	mov	r3, r7
 800179c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017a0:	f7ff fd50 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	b108      	cbz	r0, 80017ac <HAL_I2C_Master_Receive+0x1b8>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	e782      	b.n	80016b2 <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80017ac:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80017b0:	6113      	str	r3, [r2, #16]
 80017b2:	e78d      	b.n	80016d0 <HAL_I2C_Master_Receive+0xdc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b4:	9603      	str	r6, [sp, #12]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	9203      	str	r2, [sp, #12]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	9203      	str	r2, [sp, #12]
 80017be:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	2320      	movs	r3, #32
 80017ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80017d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80017d8:	e71c      	b.n	8001614 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 80017da:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017dc:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80017de:	d10d      	bne.n	80017fc <HAL_I2C_Master_Receive+0x208>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ec:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ee:	9605      	str	r6, [sp, #20]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	9205      	str	r2, [sp, #20]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	9305      	str	r3, [sp, #20]
 80017f8:	9b05      	ldr	r3, [sp, #20]
 80017fa:	e786      	b.n	800170a <HAL_I2C_Master_Receive+0x116>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001800:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001802:	9606      	str	r6, [sp, #24]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	9206      	str	r2, [sp, #24]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	9306      	str	r3, [sp, #24]
 800180c:	9b06      	ldr	r3, [sp, #24]
 800180e:	e77c      	b.n	800170a <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 8001810:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001812:	9500      	str	r5, [sp, #0]
 8001814:	463b      	mov	r3, r7
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4641      	mov	r1, r8
 800181c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800181e:	d11a      	bne.n	8001856 <HAL_I2C_Master_Receive+0x262>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001820:	f7ff fd10 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 8001824:	2800      	cmp	r0, #0
 8001826:	f47f af49 	bne.w	80016bc <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001832:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001834:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800183a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800183c:	1c53      	adds	r3, r2, #1
 800183e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001840:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001848:	3b01      	subs	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184e:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	7053      	strb	r3, [r2, #1]
 8001854:	e76e      	b.n	8001734 <HAL_I2C_Master_Receive+0x140>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001856:	f7ff fcf5 	bl	8001244 <I2C_WaitOnFlagUntilTimeout>
 800185a:	4602      	mov	r2, r0
 800185c:	2800      	cmp	r0, #0
 800185e:	f47f af2d 	bne.w	80016bc <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800186a:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001872:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001874:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001876:	3301      	adds	r3, #1
 8001878:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800187a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800187c:	3b01      	subs	r3, #1
 800187e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001882:	3b01      	subs	r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001888:	4641      	mov	r1, r8
 800188a:	463b      	mov	r3, r7
 800188c:	4620      	mov	r0, r4
 800188e:	e7c7      	b.n	8001820 <HAL_I2C_Master_Receive+0x22c>
 8001890:	00100002 	.word	0x00100002
 8001894:	ffff0000 	.word	0xffff0000
 8001898:	00010002 	.word	0x00010002
 800189c:	00010008 	.word	0x00010008
 80018a0:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	462a      	mov	r2, r5
 80018a6:	4639      	mov	r1, r7
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff fc9c 	bl	80011e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	f47f af04 	bne.w	80016bc <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018b8:	6912      	ldr	r2, [r2, #16]
 80018ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80018bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018be:	1c53      	adds	r3, r2, #1
 80018c0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80018c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	6959      	ldr	r1, [r3, #20]
 80018d4:	0749      	lsls	r1, r1, #29
 80018d6:	f57f af1a 	bpl.w	800170e <HAL_I2C_Master_Receive+0x11a>
 80018da:	e7b9      	b.n	8001850 <HAL_I2C_Master_Receive+0x25c>

080018dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	4604      	mov	r4, r0
 80018e2:	b908      	cbnz	r0, 80018e8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80018e4:	2001      	movs	r0, #1
 80018e6:	e03f      	b.n	8001968 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e8:	6803      	ldr	r3, [r0, #0]
 80018ea:	07dd      	lsls	r5, r3, #31
 80018ec:	d410      	bmi.n	8001910 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	0798      	lsls	r0, r3, #30
 80018f2:	d45a      	bmi.n	80019aa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	071a      	lsls	r2, r3, #28
 80018f8:	f100 809c 	bmi.w	8001a34 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	075b      	lsls	r3, r3, #29
 8001900:	f100 80ba 	bmi.w	8001a78 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	69a0      	ldr	r0, [r4, #24]
 8001906:	2800      	cmp	r0, #0
 8001908:	f040 811b 	bne.w	8001b42 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2000      	movs	r0, #0
 800190e:	e02b      	b.n	8001968 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001910:	4ba4      	ldr	r3, [pc, #656]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	f002 020c 	and.w	r2, r2, #12
 8001918:	2a04      	cmp	r2, #4
 800191a:	d007      	beq.n	800192c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001922:	2a08      	cmp	r2, #8
 8001924:	d10a      	bne.n	800193c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0259      	lsls	r1, r3, #9
 800192a:	d507      	bpl.n	800193c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4b9d      	ldr	r3, [pc, #628]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	039a      	lsls	r2, r3, #14
 8001932:	d5dc      	bpl.n	80018ee <HAL_RCC_OscConfig+0x12>
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1d9      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
 800193a:	e7d3      	b.n	80018e4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	4d99      	ldr	r5, [pc, #612]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d113      	bne.n	800196e <HAL_RCC_OscConfig+0x92>
 8001946:	682b      	ldr	r3, [r5, #0]
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800194e:	f7ff fa5b 	bl	8000e08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4d94      	ldr	r5, [pc, #592]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001954:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	d4c8      	bmi.n	80018ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fa54 	bl	8000e08 <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	2864      	cmp	r0, #100	; 0x64
 8001964:	d9f7      	bls.n	8001956 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001966:	2003      	movs	r0, #3
}
 8001968:	b002      	add	sp, #8
 800196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001972:	d104      	bne.n	800197e <HAL_RCC_OscConfig+0xa2>
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197a:	602b      	str	r3, [r5, #0]
 800197c:	e7e3      	b.n	8001946 <HAL_RCC_OscConfig+0x6a>
 800197e:	682a      	ldr	r2, [r5, #0]
 8001980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001984:	602a      	str	r2, [r5, #0]
 8001986:	682a      	ldr	r2, [r5, #0]
 8001988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800198c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001992:	f7ff fa39 	bl	8000e08 <HAL_GetTick>
 8001996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	039f      	lsls	r7, r3, #14
 800199c:	d5a7      	bpl.n	80018ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff fa33 	bl	8000e08 <HAL_GetTick>
 80019a2:	1b80      	subs	r0, r0, r6
 80019a4:	2864      	cmp	r0, #100	; 0x64
 80019a6:	d9f7      	bls.n	8001998 <HAL_RCC_OscConfig+0xbc>
 80019a8:	e7dd      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	f012 0f0c 	tst.w	r2, #12
 80019b2:	d007      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2a08      	cmp	r2, #8
 80019bc:	d111      	bne.n	80019e2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	025e      	lsls	r6, r3, #9
 80019c2:	d40e      	bmi.n	80019e2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c4:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	0795      	lsls	r5, r2, #30
 80019ca:	d502      	bpl.n	80019d2 <HAL_RCC_OscConfig+0xf6>
 80019cc:	68e2      	ldr	r2, [r4, #12]
 80019ce:	2a01      	cmp	r2, #1
 80019d0:	d188      	bne.n	80018e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6921      	ldr	r1, [r4, #16]
 80019d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80019da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80019de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e0:	e788      	b.n	80018f4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e2:	68e2      	ldr	r2, [r4, #12]
 80019e4:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x2cc>)
 80019e6:	b1b2      	cbz	r2, 8001a16 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa0c 	bl	8000e08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4d6c      	ldr	r5, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80019f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	0798      	lsls	r0, r3, #30
 80019f8:	d507      	bpl.n	8001a0a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	6922      	ldr	r2, [r4, #16]
 80019fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a06:	602b      	str	r3, [r5, #0]
 8001a08:	e774      	b.n	80018f4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f9fd 	bl	8000e08 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9ef      	bls.n	80019f4 <HAL_RCC_OscConfig+0x118>
 8001a14:	e7a7      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001a16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a18:	f7ff f9f6 	bl	8000e08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1c:	4d61      	ldr	r5, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	0799      	lsls	r1, r3, #30
 8001a24:	f57f af66 	bpl.w	80018f4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff f9ee 	bl	8000e08 <HAL_GetTick>
 8001a2c:	1b80      	subs	r0, r0, r6
 8001a2e:	2802      	cmp	r0, #2
 8001a30:	d9f6      	bls.n	8001a20 <HAL_RCC_OscConfig+0x144>
 8001a32:	e798      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a34:	6962      	ldr	r2, [r4, #20]
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x2d0>)
 8001a38:	b17a      	cbz	r2, 8001a5a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f9e3 	bl	8000e08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4d58      	ldr	r5, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001a44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a48:	079f      	lsls	r7, r3, #30
 8001a4a:	f53f af57 	bmi.w	80018fc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f9db 	bl	8000e08 <HAL_GetTick>
 8001a52:	1b80      	subs	r0, r0, r6
 8001a54:	2802      	cmp	r0, #2
 8001a56:	d9f6      	bls.n	8001a46 <HAL_RCC_OscConfig+0x16a>
 8001a58:	e785      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9d4 	bl	8000e08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4d50      	ldr	r5, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001a62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a66:	0798      	lsls	r0, r3, #30
 8001a68:	f57f af48 	bpl.w	80018fc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f9cc 	bl	8000e08 <HAL_GetTick>
 8001a70:	1b80      	subs	r0, r0, r6
 8001a72:	2802      	cmp	r0, #2
 8001a74:	d9f6      	bls.n	8001a64 <HAL_RCC_OscConfig+0x188>
 8001a76:	e776      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001a80:	d128      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	9201      	str	r2, [sp, #4]
 8001a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a96:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4d45      	ldr	r5, [pc, #276]	; (8001bb0 <HAL_RCC_OscConfig+0x2d4>)
 8001a9a:	682b      	ldr	r3, [r5, #0]
 8001a9c:	05d9      	lsls	r1, r3, #23
 8001a9e:	d51b      	bpl.n	8001ad8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	4d40      	ldr	r5, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d127      	bne.n	8001af8 <HAL_RCC_OscConfig+0x21c>
 8001aa8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f9aa 	bl	8000e08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4d3b      	ldr	r5, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001ab6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001abe:	079b      	lsls	r3, r3, #30
 8001ac0:	d539      	bpl.n	8001b36 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001ac2:	2e00      	cmp	r6, #0
 8001ac4:	f43f af1e 	beq.w	8001904 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001aca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	e717      	b.n	8001904 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2600      	movs	r6, #0
 8001ad6:	e7df      	b.n	8001a98 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f992 	bl	8000e08 <HAL_GetTick>
 8001ae4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	05da      	lsls	r2, r3, #23
 8001aea:	d4d9      	bmi.n	8001aa0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7ff f98c 	bl	8000e08 <HAL_GetTick>
 8001af0:	1bc0      	subs	r0, r0, r7
 8001af2:	2802      	cmp	r0, #2
 8001af4:	d9f7      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x20a>
 8001af6:	e736      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d104      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22a>
 8001afc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	672b      	str	r3, [r5, #112]	; 0x70
 8001b04:	e7d0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1cc>
 8001b06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	672a      	str	r2, [r5, #112]	; 0x70
 8001b0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b10:	f022 0204 	bic.w	r2, r2, #4
 8001b14:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ca      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f975 	bl	8000e08 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b22:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b26:	0798      	lsls	r0, r3, #30
 8001b28:	d5cb      	bpl.n	8001ac2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f96d 	bl	8000e08 <HAL_GetTick>
 8001b2e:	1bc0      	subs	r0, r0, r7
 8001b30:	4540      	cmp	r0, r8
 8001b32:	d9f7      	bls.n	8001b24 <HAL_RCC_OscConfig+0x248>
 8001b34:	e717      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff f967 	bl	8000e08 <HAL_GetTick>
 8001b3a:	1bc0      	subs	r0, r0, r7
 8001b3c:	4540      	cmp	r0, r8
 8001b3e:	d9bd      	bls.n	8001abc <HAL_RCC_OscConfig+0x1e0>
 8001b40:	e711      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b42:	4d18      	ldr	r5, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
 8001b44:	68ab      	ldr	r3, [r5, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d047      	beq.n	8001bde <HAL_RCC_OscConfig+0x302>
 8001b4e:	4e19      	ldr	r6, [pc, #100]	; (8001bb4 <HAL_RCC_OscConfig+0x2d8>)
 8001b50:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001b54:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	d135      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001b58:	f7ff f956 	bl	8000e08 <HAL_GetTick>
 8001b5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	0199      	lsls	r1, r3, #6
 8001b62:	d429      	bmi.n	8001bb8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b64:	6a22      	ldr	r2, [r4, #32]
 8001b66:	69e3      	ldr	r3, [r4, #28]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b7a:	0852      	lsrs	r2, r2, #1
 8001b7c:	3a01      	subs	r2, #1
 8001b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b82:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b84:	2301      	movs	r3, #1
 8001b86:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b88:	f7ff f93e 	bl	8000e08 <HAL_GetTick>
 8001b8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	019a      	lsls	r2, r3, #6
 8001b92:	f53f aebb 	bmi.w	800190c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff f937 	bl	8000e08 <HAL_GetTick>
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9f6      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2b2>
 8001ba0:	e6e1      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470000 	.word	0x42470000
 8001bac:	42470e80 	.word	0x42470e80
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f926 	bl	8000e08 <HAL_GetTick>
 8001bbc:	1bc0      	subs	r0, r0, r7
 8001bbe:	2802      	cmp	r0, #2
 8001bc0:	d9cd      	bls.n	8001b5e <HAL_RCC_OscConfig+0x282>
 8001bc2:	e6d0      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f920 	bl	8000e08 <HAL_GetTick>
 8001bc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	f57f ae9d 	bpl.w	800190c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f919 	bl	8000e08 <HAL_GetTick>
 8001bd6:	1b00      	subs	r0, r0, r4
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9f6      	bls.n	8001bca <HAL_RCC_OscConfig+0x2ee>
 8001bdc:	e6c3      	b.n	8001966 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bde:	2801      	cmp	r0, #1
 8001be0:	f43f aec2 	beq.w	8001968 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001be4:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	69e3      	ldr	r3, [r4, #28]
 8001be8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f47f ae79 	bne.w	80018e4 <HAL_RCC_OscConfig+0x8>
 8001bf2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f47f ae73 	bne.w	80018e4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c04:	4003      	ands	r3, r0
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f47f ae6c 	bne.w	80018e4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c0e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f47f ae66 	bne.w	80018e4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c1a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001c1e:	1ac0      	subs	r0, r0, r3
 8001c20:	bf18      	it	ne
 8001c22:	2001      	movne	r0, #1
 8001c24:	e6a0      	b.n	8001968 <HAL_RCC_OscConfig+0x8c>
 8001c26:	bf00      	nop

08001c28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c28:	4913      	ldr	r1, [pc, #76]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2c:	688b      	ldr	r3, [r1, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x16>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3a:	4810      	ldr	r0, [pc, #64]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c3e:	4810      	ldr	r0, [pc, #64]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c40:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c42:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c44:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c46:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	bf14      	ite	ne
 8001c4e:	480c      	ldrne	r0, [pc, #48]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c50:	480a      	ldreq	r0, [pc, #40]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c56:	bf18      	it	ne
 8001c58:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c62:	f7fe feff 	bl	8000a64 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c76:	bd08      	pop	{r3, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_ClockConfig>:
{
 8001c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	b910      	cbnz	r0, 8001c94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <HAL_RCC_ClockConfig+0x124>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f002 020f 	and.w	r2, r2, #15
 8001c9c:	428a      	cmp	r2, r1
 8001c9e:	d329      	bcc.n	8001cf4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	6821      	ldr	r1, [r4, #0]
 8001ca2:	078f      	lsls	r7, r1, #30
 8001ca4:	d42e      	bmi.n	8001d04 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	07c8      	lsls	r0, r1, #31
 8001ca8:	d441      	bmi.n	8001d2e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_ClockConfig+0x124>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f002 020f 	and.w	r2, r2, #15
 8001cb2:	4295      	cmp	r5, r2
 8001cb4:	d367      	bcc.n	8001d86 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	0751      	lsls	r1, r2, #29
 8001cba:	d46d      	bmi.n	8001d98 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbc:	0713      	lsls	r3, r2, #28
 8001cbe:	d507      	bpl.n	8001cd0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
 8001cc2:	6921      	ldr	r1, [r4, #16]
 8001cc4:	6893      	ldr	r3, [r2, #8]
 8001cc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd0:	f7ff ffaa 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <HAL_RCC_ClockConfig+0x12c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	40d8      	lsrs	r0, r3
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x130>)
 8001ce4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_ClockConfig+0x134>)
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	f7ff f843 	bl	8000d74 <HAL_InitTick>
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
 8001cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	d1c5      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xa>
 8001d02:	e7cd      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1c>
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0a:	bf1e      	ittt	ne
 8001d0c:	689a      	ldrne	r2, [r3, #8]
 8001d0e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d12:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d16:	bf42      	ittt	mi
 8001d18:	689a      	ldrmi	r2, [r3, #8]
 8001d1a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d1e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	68a0      	ldr	r0, [r4, #8]
 8001d24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d28:	4302      	orrs	r2, r0
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e7bb      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	6862      	ldr	r2, [r4, #4]
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
 8001d32:	2a01      	cmp	r2, #1
 8001d34:	d11d      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	d0a7      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4e1b      	ldr	r6, [pc, #108]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
 8001d40:	68b3      	ldr	r3, [r6, #8]
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d4a:	f7ff f85d 	bl	8000e08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d52:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d54:	68b3      	ldr	r3, [r6, #8]
 8001d56:	6862      	ldr	r2, [r4, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d60:	d0a3      	beq.n	8001caa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f7ff f851 	bl	8000e08 <HAL_GetTick>
 8001d66:	1bc0      	subs	r0, r0, r7
 8001d68:	4540      	cmp	r0, r8
 8001d6a:	d9f3      	bls.n	8001d54 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001d6c:	2003      	movs	r0, #3
}
 8001d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	1e91      	subs	r1, r2, #2
 8001d74:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d78:	d802      	bhi.n	8001d80 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d7e:	e7dd      	b.n	8001d3c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	f013 0f02 	tst.w	r3, #2
 8001d84:	e7da      	b.n	8001d3c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	b2ea      	uxtb	r2, r5
 8001d88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	429d      	cmp	r5, r3
 8001d92:	f47f af7c 	bne.w	8001c8e <HAL_RCC_ClockConfig+0xa>
 8001d96:	e78e      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4904      	ldr	r1, [pc, #16]	; (8001dac <HAL_RCC_ClockConfig+0x128>)
 8001d9a:	68e0      	ldr	r0, [r4, #12]
 8001d9c:	688b      	ldr	r3, [r1, #8]
 8001d9e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001da2:	4303      	orrs	r3, r0
 8001da4:	608b      	str	r3, [r1, #8]
 8001da6:	e789      	b.n	8001cbc <HAL_RCC_ClockConfig+0x38>
 8001da8:	40023c00 	.word	0x40023c00
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08003bdb 	.word	0x08003bdb
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dca:	6810      	ldr	r0, [r2, #0]
}
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	4770      	bx	lr
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003beb 	.word	0x08003beb
 8001dd8:	20000008 	.word	0x20000008

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dea:	6810      	ldr	r0, [r2, #0]
}
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	4770      	bx	lr
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08003beb 	.word	0x08003beb
 8001df8:	20000008 	.word	0x20000008

08001dfc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	4604      	mov	r4, r0
 8001e00:	460e      	mov	r6, r1
 8001e02:	4615      	mov	r5, r2
 8001e04:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e06:	6821      	ldr	r1, [r4, #0]
 8001e08:	688a      	ldr	r2, [r1, #8]
 8001e0a:	ea36 0302 	bics.w	r3, r6, r2
 8001e0e:	d001      	beq.n	8001e14 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001e10:	2000      	movs	r0, #0
}
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e14:	1c6b      	adds	r3, r5, #1
 8001e16:	d0f7      	beq.n	8001e08 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e18:	f7fe fff6 	bl	8000e08 <HAL_GetTick>
 8001e1c:	1bc0      	subs	r0, r0, r7
 8001e1e:	4285      	cmp	r5, r0
 8001e20:	d8f1      	bhi.n	8001e06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e2a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001e32:	d10a      	bne.n	8001e4a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001e34:	68a2      	ldr	r2, [r4, #8]
 8001e36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e3a:	d002      	beq.n	8001e42 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001e40:	d103      	bne.n	8001e4a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e48:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e50:	d107      	bne.n	8001e62 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e60:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001e6e:	2003      	movs	r0, #3
 8001e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e76:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e78:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <SPI_EndRxTxTransaction+0x54>)
 8001e7a:	4e14      	ldr	r6, [pc, #80]	; (8001ecc <SPI_EndRxTxTransaction+0x58>)
 8001e7c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e7e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e80:	fbb5 f6f6 	udiv	r6, r5, r6
 8001e84:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001e88:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e8a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001e8e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e90:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e92:	d10d      	bne.n	8001eb0 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e94:	460a      	mov	r2, r1
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	f7ff ffb0 	bl	8001dfc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001e9c:	b910      	cbnz	r0, 8001ea4 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001e9e:	2000      	movs	r0, #0
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ea6:	f043 0320 	orr.w	r3, r3, #32
 8001eaa:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e7f7      	b.n	8001ea0 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f3      	beq.n	8001e9e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001eb6:	9b01      	ldr	r3, [sp, #4]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	d4f5      	bmi.n	8001eb0 <SPI_EndRxTxTransaction+0x3c>
 8001ec4:	e7eb      	b.n	8001e9e <SPI_EndRxTxTransaction+0x2a>
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	016e3600 	.word	0x016e3600

08001ed0 <HAL_SPI_Init>:
{
 8001ed0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d036      	beq.n	8001f46 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001edc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ee0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ee4:	b91b      	cbnz	r3, 8001eee <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001ee6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001eea:	f001 f8e7 	bl	80030bc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001eee:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ef0:	68a0      	ldr	r0, [r4, #8]
 8001ef2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001efa:	680b      	ldr	r3, [r1, #0]
 8001efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f00:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f02:	6863      	ldr	r3, [r4, #4]
 8001f04:	4303      	orrs	r3, r0
 8001f06:	68e0      	ldr	r0, [r4, #12]
 8001f08:	4303      	orrs	r3, r0
 8001f0a:	6920      	ldr	r0, [r4, #16]
 8001f0c:	4303      	orrs	r3, r0
 8001f0e:	6960      	ldr	r0, [r4, #20]
 8001f10:	4303      	orrs	r3, r0
 8001f12:	69e0      	ldr	r0, [r4, #28]
 8001f14:	4303      	orrs	r3, r0
 8001f16:	6a20      	ldr	r0, [r4, #32]
 8001f18:	4303      	orrs	r3, r0
 8001f1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f1c:	4303      	orrs	r3, r0
 8001f1e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f22:	4303      	orrs	r3, r0
 8001f24:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f2a:	f002 0204 	and.w	r2, r2, #4
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f32:	69cb      	ldr	r3, [r1, #28]
 8001f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f38:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f3c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001f44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
}
 8001f48:	bd10      	pop	{r4, pc}

08001f4a <HAL_SPI_TransmitReceive>:
{
 8001f4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f4e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001f50:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001f54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001f56:	2b01      	cmp	r3, #1
{
 8001f58:	4604      	mov	r4, r0
 8001f5a:	460d      	mov	r5, r1
 8001f5c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001f5e:	f000 80e2 	beq.w	8002126 <HAL_SPI_TransmitReceive+0x1dc>
 8001f62:	2301      	movs	r3, #1
 8001f64:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001f68:	f7fe ff4e 	bl	8000e08 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001f6c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001f70:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001f72:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f74:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001f76:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f78:	d00a      	beq.n	8001f90 <HAL_SPI_TransmitReceive+0x46>
 8001f7a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001f7e:	f040 80d0 	bne.w	8002122 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f82:	68a0      	ldr	r0, [r4, #8]
 8001f84:	2800      	cmp	r0, #0
 8001f86:	f040 80cc 	bne.w	8002122 <HAL_SPI_TransmitReceive+0x1d8>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	f040 80c9 	bne.w	8002122 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	f000 80c4 	beq.w	800211e <HAL_SPI_TransmitReceive+0x1d4>
 8001f96:	f1b9 0f00 	cmp.w	r9, #0
 8001f9a:	f000 80c0 	beq.w	800211e <HAL_SPI_TransmitReceive+0x1d4>
 8001f9e:	2e00      	cmp	r6, #0
 8001fa0:	f000 80bd 	beq.w	800211e <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fa4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fa8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fac:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fae:	bf1c      	itt	ne
 8001fb0:	2305      	movne	r3, #5
 8001fb2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001fba:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fbc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fbe:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001fc0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001fc2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc4:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001fc6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001fca:	bf58      	it	pl
 8001fcc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fce:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001fd0:	bf58      	it	pl
 8001fd2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001fd6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001fd8:	bf58      	it	pl
 8001fda:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fdc:	68e2      	ldr	r2, [r4, #12]
 8001fde:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001fe2:	d158      	bne.n	8002096 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe4:	b109      	cbz	r1, 8001fea <HAL_SPI_TransmitReceive+0xa0>
 8001fe6:	2e01      	cmp	r6, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fea:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001fee:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001ff0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001ffa:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ffc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b9ab      	cbnz	r3, 800202e <HAL_SPI_TransmitReceive+0xe4>
 8002002:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002004:	b29b      	uxth	r3, r3
 8002006:	b993      	cbnz	r3, 800202e <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002008:	4642      	mov	r2, r8
 800200a:	4639      	mov	r1, r7
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff ff31 	bl	8001e74 <SPI_EndRxTxTransaction>
 8002012:	2800      	cmp	r0, #0
 8002014:	f040 8081 	bne.w	800211a <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002018:	68a3      	ldr	r3, [r4, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d132      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	9001      	str	r0, [sp, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	9201      	str	r2, [sp, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	9b01      	ldr	r3, [sp, #4]
 800202c:	e02a      	b.n	8002084 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	6893      	ldr	r3, [r2, #8]
 8002032:	0799      	lsls	r1, r3, #30
 8002034:	d50d      	bpl.n	8002052 <HAL_SPI_TransmitReceive+0x108>
 8002036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002038:	b29b      	uxth	r3, r3
 800203a:	b153      	cbz	r3, 8002052 <HAL_SPI_TransmitReceive+0x108>
 800203c:	b14d      	cbz	r5, 8002052 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800203e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002040:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002044:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002046:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002048:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800204a:	3b01      	subs	r3, #1
 800204c:	b29b      	uxth	r3, r3
 800204e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002050:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	07db      	lsls	r3, r3, #31
 8002056:	d50c      	bpl.n	8002072 <HAL_SPI_TransmitReceive+0x128>
 8002058:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	b14b      	cbz	r3, 8002072 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800205e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002060:	68d2      	ldr	r2, [r2, #12]
 8002062:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002066:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002068:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800206a:	3b01      	subs	r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002070:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002072:	f7fe fec9 	bl	8000e08 <HAL_GetTick>
 8002076:	eba0 0008 	sub.w	r0, r0, r8
 800207a:	4287      	cmp	r7, r0
 800207c:	d8be      	bhi.n	8001ffc <HAL_SPI_TransmitReceive+0xb2>
 800207e:	1c7e      	adds	r6, r7, #1
 8002080:	d0bc      	beq.n	8001ffc <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002082:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002084:	2301      	movs	r3, #1
 8002086:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800208a:	2300      	movs	r3, #0
 800208c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002090:	b003      	add	sp, #12
 8002092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002096:	b109      	cbz	r1, 800209c <HAL_SPI_TransmitReceive+0x152>
 8002098:	2e01      	cmp	r6, #1
 800209a:	d108      	bne.n	80020ae <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800209c:	782a      	ldrb	r2, [r5, #0]
 800209e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020a2:	3301      	adds	r3, #1
 80020a4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80020a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80020ae:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b91b      	cbnz	r3, 80020be <HAL_SPI_TransmitReceive+0x174>
 80020b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0a4      	beq.n	8002008 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	6893      	ldr	r3, [r2, #8]
 80020c2:	0798      	lsls	r0, r3, #30
 80020c4:	d50e      	bpl.n	80020e4 <HAL_SPI_TransmitReceive+0x19a>
 80020c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b15b      	cbz	r3, 80020e4 <HAL_SPI_TransmitReceive+0x19a>
 80020cc:	b155      	cbz	r5, 80020e4 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80020d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020d6:	3301      	adds	r3, #1
 80020d8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80020da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80020e2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	6893      	ldr	r3, [r2, #8]
 80020e8:	07d9      	lsls	r1, r3, #31
 80020ea:	d50d      	bpl.n	8002108 <HAL_SPI_TransmitReceive+0x1be>
 80020ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b153      	cbz	r3, 8002108 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020f4:	68d2      	ldr	r2, [r2, #12]
 80020f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020fa:	3301      	adds	r3, #1
 80020fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80020fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002106:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002108:	f7fe fe7e 	bl	8000e08 <HAL_GetTick>
 800210c:	eba0 0008 	sub.w	r0, r0, r8
 8002110:	4287      	cmp	r7, r0
 8002112:	d8cd      	bhi.n	80020b0 <HAL_SPI_TransmitReceive+0x166>
 8002114:	1c7b      	adds	r3, r7, #1
 8002116:	d0cb      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0x166>
 8002118:	e7b3      	b.n	8002082 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800211a:	2320      	movs	r3, #32
 800211c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800211e:	2001      	movs	r0, #1
 8002120:	e7b0      	b.n	8002084 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002122:	2002      	movs	r0, #2
 8002124:	e7ae      	b.n	8002084 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002126:	2002      	movs	r0, #2
 8002128:	e7b2      	b.n	8002090 <HAL_SPI_TransmitReceive+0x146>
	...

0800212c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800212c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212e:	6803      	ldr	r3, [r0, #0]
 8002130:	68c1      	ldr	r1, [r0, #12]
 8002132:	691a      	ldr	r2, [r3, #16]
{
 8002134:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002136:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800213e:	6925      	ldr	r5, [r4, #16]
 8002140:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002142:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002144:	69c0      	ldr	r0, [r0, #28]
 8002146:	432a      	orrs	r2, r5
 8002148:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800214a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800214e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002150:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002154:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002156:	430a      	orrs	r2, r1
 8002158:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	69a1      	ldr	r1, [r4, #24]
 800215e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002162:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002164:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	4a25      	ldr	r2, [pc, #148]	; (8002200 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800216c:	d129      	bne.n	80021c2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <UART_SetConfig+0x4e>
 8002172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002176:	4293      	cmp	r3, r2
 8002178:	d120      	bne.n	80021bc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800217a:	f7ff fe2f 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	6825      	ldr	r5, [r4, #0]
 8002182:	1892      	adds	r2, r2, r2
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f04f 0119 	mov.w	r1, #25
 800218c:	415b      	adcs	r3, r3
 800218e:	fba0 0101 	umull	r0, r1, r0, r1
 8002192:	f7fe fc67 	bl	8000a64 <__aeabi_uldivmod>
 8002196:	2164      	movs	r1, #100	; 0x64
 8002198:	fbb0 f4f1 	udiv	r4, r0, r1
 800219c:	fb01 0314 	mls	r3, r1, r4, r0
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	3332      	adds	r3, #50	; 0x32
 80021a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a8:	f003 0207 	and.w	r2, r3, #7
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80021b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021b6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021b8:	60ab      	str	r3, [r5, #8]
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fdfe 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80021c0:	e7dd      	b.n	800217e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d002      	beq.n	80021cc <UART_SetConfig+0xa0>
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <UART_SetConfig+0xd8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d116      	bne.n	80021fa <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021cc:	f7ff fe06 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	6825      	ldr	r5, [r4, #0]
 80021d4:	2119      	movs	r1, #25
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	fba0 0101 	umull	r0, r1, r0, r1
 80021dc:	0f9b      	lsrs	r3, r3, #30
 80021de:	f7fe fc41 	bl	8000a64 <__aeabi_uldivmod>
 80021e2:	2264      	movs	r2, #100	; 0x64
 80021e4:	fbb0 f1f2 	udiv	r1, r0, r2
 80021e8:	fb02 0311 	mls	r3, r2, r1, r0
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	3332      	adds	r3, #50	; 0x32
 80021f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80021f8:	e7de      	b.n	80021b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021fa:	f7ff fddf 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80021fe:	e7e7      	b.n	80021d0 <UART_SetConfig+0xa4>
 8002200:	40011000 	.word	0x40011000
 8002204:	40011400 	.word	0x40011400

08002208 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	4604      	mov	r4, r0
 800220c:	460e      	mov	r6, r1
 800220e:	4617      	mov	r7, r2
 8002210:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002212:	6821      	ldr	r1, [r4, #0]
 8002214:	680b      	ldr	r3, [r1, #0]
 8002216:	ea36 0303 	bics.w	r3, r6, r3
 800221a:	d101      	bne.n	8002220 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800221c:	2000      	movs	r0, #0
}
 800221e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002220:	1c6b      	adds	r3, r5, #1
 8002222:	d0f7      	beq.n	8002214 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002224:	b995      	cbnz	r5, 800224c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800222e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002238:	2320      	movs	r3, #32
 800223a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800223e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002242:	2300      	movs	r3, #0
 8002244:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002248:	2003      	movs	r0, #3
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800224c:	f7fe fddc 	bl	8000e08 <HAL_GetTick>
 8002250:	1bc0      	subs	r0, r0, r7
 8002252:	4285      	cmp	r5, r0
 8002254:	d2dd      	bcs.n	8002212 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002256:	e7e6      	b.n	8002226 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002258 <HAL_UART_Init>:
{
 8002258:	b510      	push	{r4, lr}
  if (huart == NULL)
 800225a:	4604      	mov	r4, r0
 800225c:	b340      	cbz	r0, 80022b0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800225e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002262:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002266:	b91b      	cbnz	r3, 8002270 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002268:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800226c:	f000 ff74 	bl	8003158 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002270:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002272:	2324      	movs	r3, #36	; 0x24
 8002274:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002278:	68d3      	ldr	r3, [r2, #12]
 800227a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800227e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff ff53 	bl	800212c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800228e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002296:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800229e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80022a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80022ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
}
 80022b2:	bd10      	pop	{r4, pc}

080022b4 <HAL_UART_Transmit>:
{
 80022b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022be:	2b20      	cmp	r3, #32
{
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
 80022c4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80022c6:	d151      	bne.n	800236c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d04c      	beq.n	8002366 <HAL_UART_Transmit+0xb2>
 80022cc:	2a00      	cmp	r2, #0
 80022ce:	d04a      	beq.n	8002366 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80022d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d049      	beq.n	800236c <HAL_UART_Transmit+0xb8>
 80022d8:	2301      	movs	r3, #1
 80022da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022ec:	f7fe fd8c 	bl	8000e08 <HAL_GetTick>
    huart->TxXferSize = Size;
 80022f0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80022f4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80022f6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80022fa:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80022fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	b95b      	cbnz	r3, 800231c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4632      	mov	r2, r6
 8002308:	2140      	movs	r1, #64	; 0x40
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff ff7c 	bl	8002208 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002310:	b9a0      	cbnz	r0, 800233c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002312:	2320      	movs	r3, #32
 8002314:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800231c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800231e:	3b01      	subs	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002324:	68a3      	ldr	r3, [r4, #8]
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232a:	4632      	mov	r2, r6
 800232c:	463b      	mov	r3, r7
 800232e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002332:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002334:	d10e      	bne.n	8002354 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002336:	f7ff ff67 	bl	8002208 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800233a:	b110      	cbz	r0, 8002342 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800233c:	2003      	movs	r0, #3
 800233e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002342:	882b      	ldrh	r3, [r5, #0]
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800234c:	6923      	ldr	r3, [r4, #16]
 800234e:	b943      	cbnz	r3, 8002362 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8002350:	3502      	adds	r5, #2
 8002352:	e7d4      	b.n	80022fe <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002354:	f7ff ff58 	bl	8002208 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002358:	2800      	cmp	r0, #0
 800235a:	d1ef      	bne.n	800233c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	782a      	ldrb	r2, [r5, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	3501      	adds	r5, #1
 8002364:	e7cb      	b.n	80022fe <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002366:	2001      	movs	r0, #1
 8002368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800236c:	2002      	movs	r0, #2
}
 800236e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002374 <BH1750_init_i2c>:
  {
  }
}

HAL_StatusTypeDef BH1750_init_i2c(I2C_HandleTypeDef* i2c_handle)
{
 8002374:	b513      	push	{r0, r1, r4, lr}
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2200      	movs	r2, #0
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <BH1750_init_i2c+0x40>)
 800237a:	9201      	str	r2, [sp, #4]
 800237c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800237e:	f044 0402 	orr.w	r4, r4, #2
 8002382:	630c      	str	r4, [r1, #48]	; 0x30
 8002384:	6b09      	ldr	r1, [r1, #48]	; 0x30

	i2c_handle->Instance = I2C1;
	i2c_handle->Init.ClockSpeed = 100000;
 8002386:	4c0c      	ldr	r4, [pc, #48]	; (80023b8 <BH1750_init_i2c+0x44>)
	i2c_handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002388:	6082      	str	r2, [r0, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	f001 0102 	and.w	r1, r1, #2
 800238e:	9101      	str	r1, [sp, #4]
 8002390:	9901      	ldr	r1, [sp, #4]
	i2c_handle->Init.ClockSpeed = 100000;
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <BH1750_init_i2c+0x48>)
	i2c_handle->Init.OwnAddress1 = 0;
 8002394:	60c2      	str	r2, [r0, #12]
	i2c_handle->Init.ClockSpeed = 100000;
 8002396:	e880 0012 	stmia.w	r0, {r1, r4}
	i2c_handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800239a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239e:	6101      	str	r1, [r0, #16]
	i2c_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a0:	6142      	str	r2, [r0, #20]
	i2c_handle->Init.OwnAddress2 = 0;
 80023a2:	6182      	str	r2, [r0, #24]
	i2c_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a4:	61c2      	str	r2, [r0, #28]
	i2c_handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a6:	6202      	str	r2, [r0, #32]
	if (HAL_I2C_Init(i2c_handle) != HAL_OK)
 80023a8:	f7fe ffa4 	bl	80012f4 <HAL_I2C_Init>
 80023ac:	b100      	cbz	r0, 80023b0 <BH1750_init_i2c+0x3c>
 80023ae:	e7fe      	b.n	80023ae <BH1750_init_i2c+0x3a>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	return HAL_OK;
}
 80023b0:	b002      	add	sp, #8
 80023b2:	bd10      	pop	{r4, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	000186a0 	.word	0x000186a0
 80023bc:	40005400 	.word	0x40005400

080023c0 <BH1750_send_command>:

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 80023c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023c2:	aa04      	add	r2, sp, #16
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 80023c4:	230a      	movs	r3, #10
{
 80023c6:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if(HAL_I2C_Master_Transmit(
 80023ca:	7a41      	ldrb	r1, [r0, #9]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	6840      	ldr	r0, [r0, #4]
 80023d0:	2301      	movs	r3, #1
 80023d2:	f7ff f83b 	bl	800144c <HAL_I2C_Master_Transmit>
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;

	return HAL_OK;
}
 80023d6:	3000      	adds	r0, #0
 80023d8:	bf18      	it	ne
 80023da:	2001      	movne	r0, #1
 80023dc:	b005      	add	sp, #20
 80023de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023e4 <BH1750_init_dev_struct>:
	BH1750_get_lumen(self);
}

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	4606      	mov	r6, r0
 80023e8:	460d      	mov	r5, r1
	BH1750_device_t* init =
 80023ea:	2001      	movs	r0, #1
 80023ec:	2114      	movs	r1, #20
{
 80023ee:	4617      	mov	r7, r2
	BH1750_device_t* init =
 80023f0:	f000 ff46 	bl	8003280 <calloc>
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));

	if(init == NULL) return NULL;
 80023f4:	4604      	mov	r4, r0
 80023f6:	b910      	cbnz	r0, 80023fe <BH1750_init_dev_struct+0x1a>
 80023f8:	2400      	movs	r4, #0
	strcpy(init->name, name);

	init->poll = &BH1750_poll_self;

	return init;
}
 80023fa:	4620      	mov	r0, r4
 80023fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(addr_grounded){
 80023fe:	b197      	cbz	r7, 8002426 <BH1750_init_dev_struct+0x42>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8002400:	2347      	movs	r3, #71	; 0x47
 8002402:	7203      	strb	r3, [r0, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8002404:	2346      	movs	r3, #70	; 0x46
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8002406:	7263      	strb	r3, [r4, #9]
	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8002408:	4628      	mov	r0, r5
 800240a:	f7fd fee9 	bl	80001e0 <strlen>
 800240e:	f000 ff69 	bl	80032e4 <malloc>
 8002412:	6020      	str	r0, [r4, #0]
	if(init->name == NULL) return NULL;
 8002414:	2800      	cmp	r0, #0
 8002416:	d0ef      	beq.n	80023f8 <BH1750_init_dev_struct+0x14>
	init->i2c_handle = i2c_handle;
 8002418:	6066      	str	r6, [r4, #4]
	strcpy(init->name, name);
 800241a:	4629      	mov	r1, r5
 800241c:	f001 f860 	bl	80034e0 <strcpy>
	init->poll = &BH1750_poll_self;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <BH1750_init_dev_struct+0x4c>)
 8002422:	6123      	str	r3, [r4, #16]
	return init;
 8002424:	e7e9      	b.n	80023fa <BH1750_init_dev_struct+0x16>
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8002426:	23ba      	movs	r3, #186	; 0xba
 8002428:	7203      	strb	r3, [r0, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 800242a:	23b9      	movs	r3, #185	; 0xb9
 800242c:	e7eb      	b.n	8002406 <BH1750_init_dev_struct+0x22>
 800242e:	bf00      	nop
 8002430:	080024af 	.word	0x080024af

08002434 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8002434:	b510      	push	{r4, lr}
	BH1750_send_command(dev, CMD_POWER_ON);
 8002436:	2101      	movs	r1, #1
{
 8002438:	4604      	mov	r4, r0
	BH1750_send_command(dev, CMD_POWER_ON);
 800243a:	f7ff ffc1 	bl	80023c0 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 800243e:	2103      	movs	r1, #3
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff ffbd 	bl	80023c0 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8002446:	2110      	movs	r1, #16
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ffb9 	bl	80023c0 <BH1750_send_command>

	return HAL_OK;
}
 800244e:	2000      	movs	r0, #0
 8002450:	bd10      	pop	{r4, pc}

08002452 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8002452:	b507      	push	{r0, r1, r2, lr}
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8002454:	230a      	movs	r3, #10
 8002456:	7a01      	ldrb	r1, [r0, #8]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f100 020c 	add.w	r2, r0, #12
 800245e:	2302      	movs	r3, #2
 8002460:	6840      	ldr	r0, [r0, #4]
 8002462:	f7ff f8c7 	bl	80015f4 <HAL_I2C_Master_Receive>
			2,
			10
	) != HAL_OK) return HAL_ERROR;

	return HAL_OK;
}
 8002466:	3000      	adds	r0, #0
 8002468:	bf18      	it	ne
 800246a:	2001      	movne	r0, #1
 800246c:	b003      	add	sp, #12
 800246e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002474 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8002474:	b510      	push	{r4, lr}
 8002476:	4604      	mov	r4, r0
	char buffer2[1000];
	dev->value = dev->buffer[0];
	dev->value = (dev->value << 8) | dev->buffer[1];
 8002478:	7b00      	ldrb	r0, [r0, #12]
 800247a:	7b63      	ldrb	r3, [r4, #13]

	//TODO check float stuff
	dev->value/=1.2;
 800247c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002480:	f7fe f858 	bl	8000534 <__aeabi_i2d>
 8002484:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <BH1750_convert+0x24>)
 800248a:	f7fe f9e3 	bl	8000854 <__aeabi_ddiv>
 800248e:	f7fe fac9 	bl	8000a24 <__aeabi_d2uiz>
 8002492:	8160      	strh	r0, [r4, #10]

	return HAL_OK;
}
 8002494:	2000      	movs	r0, #0
 8002496:	bd10      	pop	{r4, pc}
 8002498:	3ff33333 	.word	0x3ff33333

0800249c <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 800249c:	b510      	push	{r4, lr}
 800249e:	4604      	mov	r4, r0
	BH1750_read_dev(dev);
 80024a0:	f7ff ffd7 	bl	8002452 <BH1750_read_dev>
	BH1750_convert(dev);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffe5 	bl	8002474 <BH1750_convert>
	return HAL_OK;
}
 80024aa:	2000      	movs	r0, #0
 80024ac:	bd10      	pop	{r4, pc}

080024ae <BH1750_poll_self>:
	BH1750_get_lumen(self);
 80024ae:	f7ff bff5 	b.w	800249c <BH1750_get_lumen>
	...

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b8:	2230      	movs	r2, #48	; 0x30
 80024ba:	2100      	movs	r1, #0
 80024bc:	a808      	add	r0, sp, #32
 80024be:	f000 ff19 	bl	80032f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c2:	2100      	movs	r1, #0
 80024c4:	2214      	movs	r2, #20
 80024c6:	a803      	add	r0, sp, #12
 80024c8:	f000 ff14 	bl	80032f4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	2400      	movs	r4, #0
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <SystemClock_Config+0x8c>)
 80024d0:	9401      	str	r4, [sp, #4]
 80024d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e6:	9402      	str	r4, [sp, #8]
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002500:	2301      	movs	r3, #1
 8002502:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002504:	2310      	movs	r3, #16
 8002506:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002508:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800250a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800250e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002510:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002512:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002514:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002516:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002518:	2307      	movs	r3, #7
 800251a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800251e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002520:	f7ff f9dc 	bl	80018dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002524:	230f      	movs	r3, #15
 8002526:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002528:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800252e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002530:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002532:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002534:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002536:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002538:	f7ff fba4 	bl	8001c84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800253c:	b015      	add	sp, #84	; 0x54
 800253e:	bd30      	pop	{r4, r5, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000

08002548 <main>:
{
 8002548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800254c:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
  HAL_Init();
 8002550:	f7fe fc34 	bl	8000dbc <HAL_Init>
  SystemClock_Config();
 8002554:	f7ff ffae 	bl	80024b4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	2214      	movs	r2, #20
 800255a:	2100      	movs	r1, #0
 800255c:	a808      	add	r0, sp, #32
 800255e:	f000 fec9 	bl	80032f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	2400      	movs	r4, #0
 8002564:	4b7d      	ldr	r3, [pc, #500]	; (800275c <main+0x214>)
 8002566:	9404      	str	r4, [sp, #16]
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 800256a:	4f7d      	ldr	r7, [pc, #500]	; (8002760 <main+0x218>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800256c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 800279c <main+0x254>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002570:	4d7c      	ldr	r5, [pc, #496]	; (8002764 <main+0x21c>)
  huart2.Instance = USART2;
 8002572:	4e7d      	ldr	r6, [pc, #500]	; (8002768 <main+0x220>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002574:	f042 0204 	orr.w	r2, r2, #4
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	f002 0204 	and.w	r2, r2, #4
 8002580:	9204      	str	r2, [sp, #16]
 8002582:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002584:	9405      	str	r4, [sp, #20]
 8002586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002594:	9205      	str	r2, [sp, #20]
 8002596:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	9406      	str	r4, [sp, #24]
 800259a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	f002 0201 	and.w	r2, r2, #1
 80025a8:	9206      	str	r2, [sp, #24]
 80025aa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	9407      	str	r4, [sp, #28]
 80025ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b0:	f042 0202 	orr.w	r2, r2, #2
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80025bc:	4638      	mov	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80025c0:	4622      	mov	r2, r4
 80025c2:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin, GPIO_PIN_RESET);
 80025c6:	f7fe fd71 	bl	80010ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025ca:	4622      	mov	r2, r4
 80025cc:	2120      	movs	r1, #32
 80025ce:	4648      	mov	r0, r9
 80025d0:	f7fe fd6c 	bl	80010ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025d8:	4638      	mov	r0, r7
 80025da:	a908      	add	r1, sp, #32

  /*Configure GPIO pins : CS_Pin CE_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80025e0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 80025e2:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025e6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f7fe fc91 	bl	8000f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ee:	4638      	mov	r0, r7
 80025f0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin;
 80025f2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fe:	f7fe fc87 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002602:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	a908      	add	r1, sp, #32
 8002606:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002608:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800260a:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f7fe fc7f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002612:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002614:	eb0d 0103 	add.w	r1, sp, r3
 8002618:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD2_Pin;
 800261a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002624:	f7fe fc74 	bl	8000f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8002628:	4621      	mov	r1, r4
 800262a:	4642      	mov	r2, r8
 800262c:	200a      	movs	r0, #10
 800262e:	f7fe fc17 	bl	8000e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002632:	200a      	movs	r0, #10
 8002634:	f7fe fc48 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 8002638:	4a4c      	ldr	r2, [pc, #304]	; (800276c <main+0x224>)
  hspi2.Instance = SPI2;
 800263a:	4d4d      	ldr	r5, [pc, #308]	; (8002770 <main+0x228>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800263c:	60b4      	str	r4, [r6, #8]
  huart2.Init.BaudRate = 115200;
 800263e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002642:	e886 000c 	stmia.w	r6, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002646:	4630      	mov	r0, r6
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	230c      	movs	r3, #12
 800264a:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800264c:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800264e:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002650:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002652:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002654:	f7ff fe00 	bl	8002258 <HAL_UART_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002658:	4946      	ldr	r1, [pc, #280]	; (8002774 <main+0x22c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800265a:	60ac      	str	r4, [r5, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800265c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002660:	e885 000a 	stmia.w	r5, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002668:	61ab      	str	r3, [r5, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800266a:	2318      	movs	r3, #24
 800266c:	61eb      	str	r3, [r5, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800266e:	4628      	mov	r0, r5
  hspi2.Init.CRCPolynomial = 10;
 8002670:	230a      	movs	r3, #10
 8002672:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002674:	9301      	str	r3, [sp, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002676:	60ec      	str	r4, [r5, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002678:	612c      	str	r4, [r5, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800267a:	616c      	str	r4, [r5, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800267c:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800267e:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002680:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002682:	f7ff fc25 	bl	8001ed0 <HAL_SPI_Init>
  BH1750_init_i2c(&hi2c1);
 8002686:	483c      	ldr	r0, [pc, #240]	; (8002778 <main+0x230>)
 8002688:	f7ff fe74 	bl	8002374 <BH1750_init_i2c>
  BH1750_device_t* test_dev = BH1750_init_dev_struct(&hi2c1, "test device", true);
 800268c:	4642      	mov	r2, r8
 800268e:	493b      	ldr	r1, [pc, #236]	; (800277c <main+0x234>)
 8002690:	4839      	ldr	r0, [pc, #228]	; (8002778 <main+0x230>)
 8002692:	f7ff fea7 	bl	80023e4 <BH1750_init_dev_struct>
 8002696:	4682      	mov	sl, r0
  BH1750_init_dev(test_dev);
 8002698:	f7ff fecc 	bl	8002434 <BH1750_init_dev>
      config.payload_length   = 4;    // maximum is 32 bytes
 800269c:	2204      	movs	r2, #4
 800269e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
      config.retransmit_count = 15;   // maximum is 15 times
 80026a2:	220f      	movs	r2, #15
 80026a4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 80026a8:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      config.rf_channel       = 11;
 80026ac:	220b      	movs	r2, #11
      config.spi_timeout = 10; // milliseconds
 80026ae:	9b01      	ldr	r3, [sp, #4]
      config.rf_channel       = 11;
 80026b0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      config.rx_address       = rx_address;
 80026b4:	4a32      	ldr	r2, [pc, #200]	; (8002780 <main+0x238>)
 80026b6:	920a      	str	r2, [sp, #40]	; 0x28
      config.spi_timeout = 10; // milliseconds
 80026b8:	930e      	str	r3, [sp, #56]	; 0x38
      config.tx_address       = tx_address;
 80026ba:	4a32      	ldr	r2, [pc, #200]	; (8002784 <main+0x23c>)
 80026bc:	920b      	str	r2, [sp, #44]	; 0x2c
      config.ce_pin      = CE_Pin;
 80026be:	2302      	movs	r3, #2
      config.rx_buffer        = (uint8_t*)&rx_data;
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <main+0x240>)
      config.ce_pin      = CE_Pin;
 80026c2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      nrf_init(&nrf, &config);
 80026c6:	a908      	add	r1, sp, #32
      config.irq_pin     = NRF_IRQ_Pin;
 80026c8:	f04f 0310 	mov.w	r3, #16
      nrf_init(&nrf, &config);
 80026cc:	482f      	ldr	r0, [pc, #188]	; (800278c <main+0x244>)
      config.rx_buffer        = (uint8_t*)&rx_data;
 80026ce:	920c      	str	r2, [sp, #48]	; 0x30
      config.ce_port     = CE_GPIO_Port;
 80026d0:	9711      	str	r7, [sp, #68]	; 0x44
      config.csn_port    = CS_GPIO_Port;
 80026d2:	970f      	str	r7, [sp, #60]	; 0x3c
      config.irq_pin     = NRF_IRQ_Pin;
 80026d4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
      config.data_rate        = NRF_DATA_RATE_1MBPS;
 80026d8:	f88d 4020 	strb.w	r4, [sp, #32]
      config.tx_power         = NRF_TX_PWR_0dBm;
 80026dc:	f88d b021 	strb.w	fp, [sp, #33]	; 0x21
      config.crc_width        = NRF_CRC_WIDTH_1B;
 80026e0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
      config.addr_width       = NRF_ADDR_WIDTH_5;
 80026e4:	f88d b023 	strb.w	fp, [sp, #35]	; 0x23
      config.spi         = &hspi2;
 80026e8:	950d      	str	r5, [sp, #52]	; 0x34
      config.csn_pin     = CS_Pin;
 80026ea:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
      config.irq_port    = NRF_IRQ_GPIO_Port;
 80026ee:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
      nrf_init(&nrf, &config);
 80026f2:	f000 fbf7 	bl	8002ee4 <nrf_init>
  sprintf(ffer,"hello world Mohamed from nucleo stm32f401!\n\r");
 80026f6:	4926      	ldr	r1, [pc, #152]	; (8002790 <main+0x248>)
  memset(ffer, 0, sizeof(ffer));
 80026f8:	9403      	str	r4, [sp, #12]
  sprintf(ffer,"hello world Mohamed from nucleo stm32f401!\n\r");
 80026fa:	a803      	add	r0, sp, #12
 80026fc:	f000 fef0 	bl	80034e0 <strcpy>
       sprintf(buffer2,"illumination =%d  \n\r",u);
 8002700:	4f24      	ldr	r7, [pc, #144]	; (8002794 <main+0x24c>)
	   test_dev->poll(test_dev);
 8002702:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002706:	4650      	mov	r0, sl
 8002708:	4798      	blx	r3
	   u=test_dev->value;
 800270a:	f8ba 500a 	ldrh.w	r5, [sl, #10]
       sprintf(buffer2,"illumination =%d  \n\r",u);
 800270e:	4639      	mov	r1, r7
 8002710:	462a      	mov	r2, r5
 8002712:	a808      	add	r0, sp, #32
 8002714:	f000 fec0 	bl	8003498 <siprintf>
       HAL_UART_Transmit(&huart2,buffer2,strlen(buffer2),1000);
 8002718:	a808      	add	r0, sp, #32
 800271a:	f7fd fd61 	bl	80001e0 <strlen>
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	b282      	uxth	r2, r0
 8002724:	a908      	add	r1, sp, #32
 8002726:	4630      	mov	r0, r6
 8002728:	f7ff fdc4 	bl	80022b4 <HAL_UART_Transmit>
  if(u!=pre){
 800272c:	42ac      	cmp	r4, r5
 800272e:	d008      	beq.n	8002742 <main+0x1fa>
  sprintf(ffer,"%d",u);
 8002730:	4919      	ldr	r1, [pc, #100]	; (8002798 <main+0x250>)
 8002732:	462a      	mov	r2, r5
 8002734:	a803      	add	r0, sp, #12
 8002736:	f000 feaf 	bl	8003498 <siprintf>
 nrf_send_packet(&nrf, ffer);
 800273a:	a903      	add	r1, sp, #12
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <main+0x244>)
 800273e:	f000 fc4b 	bl	8002fd8 <nrf_send_packet>
 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002742:	2120      	movs	r1, #32
 8002744:	4815      	ldr	r0, [pc, #84]	; (800279c <main+0x254>)
 8002746:	f7fe fcb6 	bl	80010b6 <HAL_GPIO_TogglePin>
  memset(ffer, 0, sizeof(ffer));
 800274a:	2300      	movs	r3, #0
 HAL_Delay(1000);
 800274c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  memset(ffer, 0, sizeof(ffer));
 8002750:	9303      	str	r3, [sp, #12]
	   u=test_dev->value;
 8002752:	462c      	mov	r4, r5
 HAL_Delay(1000);
 8002754:	f7fe fb5e 	bl	8000e14 <HAL_Delay>
	   test_dev->poll(test_dev);
 8002758:	e7d3      	b.n	8002702 <main+0x1ba>
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020800 	.word	0x40020800
 8002764:	10210000 	.word	0x10210000
 8002768:	20000184 	.word	0x20000184
 800276c:	40004400 	.word	0x40004400
 8002770:	2000009c 	.word	0x2000009c
 8002774:	40003800 	.word	0x40003800
 8002778:	200000f4 	.word	0x200000f4
 800277c:	08003b80 	.word	0x08003b80
 8002780:	08003bd1 	.word	0x08003bd1
 8002784:	08003bd6 	.word	0x08003bd6
 8002788:	20000180 	.word	0x20000180
 800278c:	20000148 	.word	0x20000148
 8002790:	08003b8c 	.word	0x08003b8c
 8002794:	08003bb9 	.word	0x08003bb9
 8002798:	08003bce 	.word	0x08003bce
 800279c:	40020000 	.word	0x40020000

080027a0 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==NRF_IRQ_Pin){
 80027a0:	2810      	cmp	r0, #16
 80027a2:	d102      	bne.n	80027aa <HAL_GPIO_EXTI_Callback+0xa>
    nrf_irq_handler(&nrf);
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <HAL_GPIO_EXTI_Callback+0xc>)
 80027a6:	f000 ba59 	b.w	8002c5c <nrf_irq_handler>
 80027aa:	4770      	bx	lr
 80027ac:	20000148 	.word	0x20000148

080027b0 <ce_reset>:
static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 80027b0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80027b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80027b4:	2200      	movs	r2, #0
 80027b6:	f7fe bc79 	b.w	80010ac <HAL_GPIO_WritePin>

080027ba <ce_set>:
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 80027ba:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80027bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80027be:	2201      	movs	r2, #1
 80027c0:	f7fe bc74 	b.w	80010ac <HAL_GPIO_WritePin>

080027c4 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 80027c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	461e      	mov	r6, r3
 80027ce:	f897 a020 	ldrb.w	sl, [r7, #32]
    uint8_t myTX[len + 1];
 80027d2:	f10a 0308 	add.w	r3, sl, #8
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	ebad 0d03 	sub.w	sp, sp, r3
 80027de:	f10d 0908 	add.w	r9, sp, #8
    uint8_t myRX[len + 1];
 80027e2:	ebad 0d03 	sub.w	sp, sp, r3
    myTX[0] = cmd;
 80027e6:	464b      	mov	r3, r9
 80027e8:	f10a 38ff 	add.w	r8, sl, #4294967295
                            uint8_t* rx, uint8_t len) {
 80027ec:	4604      	mov	r4, r0
    myTX[0] = cmd;
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
    uint8_t myRX[len + 1];
 80027f2:	ad02      	add	r5, sp, #8
 80027f4:	1e51      	subs	r1, r2, #1
 80027f6:	f10d 0007 	add.w	r0, sp, #7
 80027fa:	4442      	add	r2, r8

    int i = 0;
    for (i = 0; i < len; i++) {
        myTX[1 + i] = tx[i];
        myRX[i]     = 0;
 80027fc:	f04f 0e00 	mov.w	lr, #0
    for (i = 0; i < len; i++) {
 8002800:	4291      	cmp	r1, r2
 8002802:	d11c      	bne.n	800283e <nrf_send_command+0x7a>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8002804:	2200      	movs	r2, #0
 8002806:	8c21      	ldrh	r1, [r4, #32]
 8002808:	69e0      	ldr	r0, [r4, #28]
 800280a:	f7fe fc4f 	bl	80010ac <HAL_GPIO_WritePin>
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 800280e:	69a3      	ldr	r3, [r4, #24]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	462a      	mov	r2, r5
 8002814:	f10a 0301 	add.w	r3, sl, #1
 8002818:	4649      	mov	r1, r9
 800281a:	6960      	ldr	r0, [r4, #20]
 800281c:	f7ff fb95 	bl	8001f4a <HAL_SPI_TransmitReceive>
 8002820:	b9c8      	cbnz	r0, 8002856 <nrf_send_command+0x92>
 8002822:	1e73      	subs	r3, r6, #1
 8002824:	3501      	adds	r5, #1
 8002826:	4446      	add	r6, r8
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8002828:	42b3      	cmp	r3, r6
 800282a:	d10f      	bne.n	800284c <nrf_send_command+0x88>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 800282c:	69e0      	ldr	r0, [r4, #28]
 800282e:	8c21      	ldrh	r1, [r4, #32]
 8002830:	2201      	movs	r2, #1
 8002832:	f7fe fc3b 	bl	80010ac <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 8002836:	2000      	movs	r0, #0
}
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        myTX[1 + i] = tx[i];
 800283e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8002842:	f803 cb01 	strb.w	ip, [r3], #1
        myRX[i]     = 0;
 8002846:	f800 ef01 	strb.w	lr, [r0, #1]!
 800284a:	e7d9      	b.n	8002800 <nrf_send_command+0x3c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 800284c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002850:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002854:	e7e8      	b.n	8002828 <nrf_send_command+0x64>
        return NRF_ERROR;
 8002856:	2001      	movs	r0, #1
 8002858:	e7ee      	b.n	8002838 <nrf_send_command+0x74>
	...

0800285c <nrf_packet_received_callback>:
        dev->tx_result = NRF_ERROR;
        dev->tx_busy   = 0;
    }
}

void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4605      	mov	r5, r0
	  HAL_UART_Transmit(&huart2,data,strlen(data),1000);
 8002860:	4608      	mov	r0, r1
void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 8002862:	460c      	mov	r4, r1
	  HAL_UART_Transmit(&huart2,data,strlen(data),1000);
 8002864:	f7fd fcbc 	bl	80001e0 <strlen>
 8002868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286c:	b282      	uxth	r2, r0
 800286e:	4621      	mov	r1, r4
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <nrf_packet_received_callback+0x24>)
 8002872:	f7ff fd1f 	bl	80022b4 <HAL_UART_Transmit>
	dev->rx_busy = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800287c:	bd38      	pop	{r3, r4, r5, pc}
 800287e:	bf00      	nop
 8002880:	20000184 	.word	0x20000184

08002884 <nrf_read_register>:
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8002884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx = 0;
 8002886:	ac04      	add	r4, sp, #16
 8002888:	2300      	movs	r3, #0
 800288a:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 800288e:	2301      	movs	r3, #1
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	4622      	mov	r2, r4
 8002896:	f7ff ff95 	bl	80027c4 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800289a:	3000      	adds	r0, #0
 800289c:	bf18      	it	ne
 800289e:	2001      	movne	r0, #1
 80028a0:	b004      	add	sp, #16
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 80028a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 80028a6:	ab04      	add	r3, sp, #16
 80028a8:	2400      	movs	r4, #0
 80028aa:	f803 4d01 	strb.w	r4, [r3, #-1]!
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 80028ae:	2401      	movs	r4, #1
 80028b0:	9400      	str	r4, [sp, #0]
 80028b2:	f041 0120 	orr.w	r1, r1, #32
 80028b6:	f7ff ff85 	bl	80027c4 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80028ba:	3000      	adds	r0, #0
 80028bc:	bf18      	it	ne
 80028be:	2001      	movne	r0, #1
 80028c0:	b004      	add	sp, #16
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
    uint8_t tx[dev->config.payload_length];
 80028c8:	7902      	ldrb	r2, [r0, #4]
 80028ca:	1dd3      	adds	r3, r2, #7
 80028cc:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 80028d0:	af02      	add	r7, sp, #8
    uint8_t tx[dev->config.payload_length];
 80028d2:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 80028d6:	460b      	mov	r3, r1
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	2161      	movs	r1, #97	; 0x61
 80028dc:	aa02      	add	r2, sp, #8
 80028de:	f7ff ff71 	bl	80027c4 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80028e2:	3000      	adds	r0, #0
 80028e4:	bf18      	it	ne
 80028e6:	2001      	movne	r0, #1
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <nrf_write_tx_payload>:

NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
    uint8_t rx[dev->config.payload_length];
 80028f0:	7902      	ldrb	r2, [r0, #4]
 80028f2:	1dd3      	adds	r3, r2, #7
 80028f4:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 80028f8:	af02      	add	r7, sp, #8
    uint8_t rx[dev->config.payload_length];
 80028fa:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 80028fe:	ab02      	add	r3, sp, #8
 8002900:	9200      	str	r2, [sp, #0]
 8002902:	460a      	mov	r2, r1
 8002904:	21a0      	movs	r1, #160	; 0xa0
 8002906:	f7ff ff5d 	bl	80027c4 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800290a:	3000      	adds	r0, #0
 800290c:	bf18      	it	ne
 800290e:	2001      	movne	r0, #1
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <nrf_flush_tx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 8002914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 800291c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f10d 020f 	add.w	r2, sp, #15
 8002926:	f10d 030e 	add.w	r3, sp, #14
 800292a:	21e1      	movs	r1, #225	; 0xe1
 800292c:	f7ff ff4a 	bl	80027c4 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002930:	3000      	adds	r0, #0
 8002932:	bf18      	it	ne
 8002934:	2001      	movne	r0, #1
 8002936:	b005      	add	sp, #20
 8002938:	f85d fb04 	ldr.w	pc, [sp], #4

0800293c <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 800293c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8002944:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f10d 020f 	add.w	r2, sp, #15
 800294e:	f10d 030e 	add.w	r3, sp, #14
 8002952:	21e2      	movs	r1, #226	; 0xe2
 8002954:	f7ff ff36 	bl	80027c4 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002958:	3000      	adds	r0, #0
 800295a:	bf18      	it	ne
 800295c:	2001      	movne	r0, #1
 800295e:	b005      	add	sp, #20
 8002960:	f85d fb04 	ldr.w	pc, [sp], #4

08002964 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8002964:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002966:	ac02      	add	r4, sp, #8
 8002968:	2300      	movs	r3, #0
 800296a:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 800296e:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002970:	4622      	mov	r2, r4
 8002972:	2106      	movs	r1, #6
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8002974:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002976:	f7ff ff85 	bl	8002884 <nrf_read_register>
 800297a:	b110      	cbz	r0, 8002982 <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 800297c:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 800297e:	b002      	add	sp, #8
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 1) { // low bit set
 8002986:	f016 0f01 	tst.w	r6, #1
        reg |= 1 << 5;
 800298a:	bf14      	ite	ne
 800298c:	f043 0320 	orrne.w	r3, r3, #32
        reg &= ~(1 << 5);
 8002990:	f023 0320 	biceq.w	r3, r3, #32
 8002994:	f88d 3007 	strb.w	r3, [sp, #7]
 8002998:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 2) { // high bit set
 800299c:	f016 0f02 	tst.w	r6, #2
        reg |= 1 << 3;
 80029a0:	bf14      	ite	ne
 80029a2:	f043 0308 	orrne.w	r3, r3, #8
        reg &= ~(1 << 3);
 80029a6:	f023 0308 	biceq.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 80029aa:	4622      	mov	r2, r4
 80029ac:	2106      	movs	r1, #6
 80029ae:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 80029b0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 80029b4:	f7ff ff76 	bl	80028a4 <nrf_write_register>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d1df      	bne.n	800297c <nrf_set_data_rate+0x18>
    dev->config.data_rate = rate;
 80029bc:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 80029be:	e7de      	b.n	800297e <nrf_set_data_rate+0x1a>

080029c0 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 80029c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 80029c2:	ac02      	add	r4, sp, #8
 80029c4:	2300      	movs	r3, #0
 80029c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80029ca:	2107      	movs	r1, #7
 80029cc:	4622      	mov	r2, r4
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 80029ce:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80029d0:	f7ff ff58 	bl	8002884 <nrf_read_register>
 80029d4:	b978      	cbnz	r0, 80029f6 <nrf_clear_interrupts+0x36>
        return NRF_ERROR;
    }

    reg |= 7 << 4; // setting bits 4,5,6
 80029d6:	f89d 3007 	ldrb.w	r3, [sp, #7]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80029da:	4622      	mov	r2, r4
    reg |= 7 << 4; // setting bits 4,5,6
 80029dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80029e0:	2107      	movs	r1, #7
 80029e2:	4628      	mov	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 80029e4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 80029e8:	f7ff ff5c 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 80029ec:	3000      	adds	r0, #0
 80029ee:	bf18      	it	ne
 80029f0:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80029f2:	b003      	add	sp, #12
 80029f4:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 80029f6:	2001      	movs	r0, #1
 80029f8:	e7fb      	b.n	80029f2 <nrf_clear_interrupts+0x32>

080029fa <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 80029fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 80029fc:	ad02      	add	r5, sp, #8
 80029fe:	2300      	movs	r3, #0
 8002a00:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8002a04:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8002a06:	462a      	mov	r2, r5
 8002a08:	2105      	movs	r1, #5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8002a0a:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8002a0c:	f7ff ff3a 	bl	8002884 <nrf_read_register>
 8002a10:	b110      	cbz	r0, 8002a18 <nrf_set_rf_channel+0x1e>
 8002a12:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
    reg |= ch; // setting channel
 8002a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ch &= 0x7F;
 8002a1c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    reg |= ch; // setting channel
 8002a20:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8002a22:	462a      	mov	r2, r5
 8002a24:	2105      	movs	r1, #5
 8002a26:	4630      	mov	r0, r6
    reg |= ch; // setting channel
 8002a28:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8002a2c:	f7ff ff3a 	bl	80028a4 <nrf_write_register>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1ee      	bne.n	8002a12 <nrf_set_rf_channel+0x18>
    dev->config.rf_channel = ch;
 8002a34:	71f4      	strb	r4, [r6, #7]
    return NRF_OK;
 8002a36:	e7ed      	b.n	8002a14 <nrf_set_rf_channel+0x1a>

08002a38 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 8002a3a:	ad02      	add	r5, sp, #8
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002a42:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a44:	462a      	mov	r2, r5
 8002a46:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002a48:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a4a:	f7ff ff1b 	bl	8002884 <nrf_read_register>
 8002a4e:	b110      	cbz	r0, 8002a56 <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 8002a50:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 8002a52:	b002      	add	sp, #8
 8002a54:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8002a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    count &= 0x0F;
 8002a5a:	f004 040f 	and.w	r4, r4, #15
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8002a5e:	f023 030f 	bic.w	r3, r3, #15
    reg |= count; // setting count
 8002a62:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a64:	462a      	mov	r2, r5
 8002a66:	2104      	movs	r1, #4
 8002a68:	4630      	mov	r0, r6
    reg |= count; // setting count
 8002a6a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a6e:	f7ff ff19 	bl	80028a4 <nrf_write_register>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d1ec      	bne.n	8002a50 <nrf_set_retransmittion_count+0x18>
    dev->config.retransmit_count = count;
 8002a76:	7174      	strb	r4, [r6, #5]
    return NRF_OK;
 8002a78:	e7eb      	b.n	8002a52 <nrf_set_retransmittion_count+0x1a>

08002a7a <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 8002a7c:	ad02      	add	r5, sp, #8
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002a84:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a86:	462a      	mov	r2, r5
 8002a88:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002a8a:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002a8c:	f7ff fefa 	bl	8002884 <nrf_read_register>
 8002a90:	b110      	cbz	r0, 8002a98 <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 8002a92:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 8002a94:	b002      	add	sp, #8
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8002a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    delay &= 0x0F;
 8002a9c:	f004 040f 	and.w	r4, r4, #15
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8002aa0:	f003 030f 	and.w	r3, r3, #15
    reg |= delay << 4; // setting delay
 8002aa4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	2104      	movs	r1, #4
 8002aac:	4630      	mov	r0, r6
    reg |= delay << 4; // setting delay
 8002aae:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002ab2:	f7ff fef7 	bl	80028a4 <nrf_write_register>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1eb      	bne.n	8002a92 <nrf_set_retransmittion_delay+0x18>
    dev->config.retransmit_delay = delay;
 8002aba:	71b4      	strb	r4, [r6, #6]
    return NRF_OK;
 8002abc:	e7ea      	b.n	8002a94 <nrf_set_retransmittion_delay+0x1a>

08002abe <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002ac0:	ac02      	add	r4, sp, #8
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002ac8:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002aca:	4622      	mov	r2, r4
 8002acc:	2103      	movs	r1, #3
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002ace:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002ad0:	f7ff fed8 	bl	8002884 <nrf_read_register>
 8002ad4:	b110      	cbz	r0, 8002adc <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 8002ad6:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 8002adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
    reg |= width; // setting delay
 8002ae4:	4333      	orrs	r3, r6
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	2103      	movs	r1, #3
 8002aea:	4628      	mov	r0, r5
    reg |= width; // setting delay
 8002aec:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002af0:	f7ff fed8 	bl	80028a4 <nrf_write_register>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d1ee      	bne.n	8002ad6 <nrf_set_address_width+0x18>
    dev->config.addr_width = width;
 8002af8:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 8002afa:	e7ed      	b.n	8002ad8 <nrf_set_address_width+0x1a>

08002afc <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 8002afc:	b507      	push	{r0, r1, r2, lr}
 8002afe:	aa02      	add	r2, sp, #8
 8002b00:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8002b04:	2102      	movs	r1, #2
 8002b06:	f7ff fecd 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002b0a:	3000      	adds	r0, #0
 8002b0c:	bf18      	it	ne
 8002b0e:	2001      	movne	r0, #1
 8002b10:	b003      	add	sp, #12
 8002b12:	f85d fb04 	ldr.w	pc, [sp], #4

08002b16 <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002b18:	ad02      	add	r5, sp, #8
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002b20:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002b22:	462a      	mov	r2, r5
 8002b24:	2101      	movs	r1, #1
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002b26:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002b28:	f7ff feac 	bl	8002884 <nrf_read_register>
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	b978      	cbnz	r0, 8002b50 <nrf_enable_auto_ack+0x3a>

    reg |= 1 << pipe;
 8002b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b34:	fa01 f404 	lsl.w	r4, r1, r4
 8002b38:	431c      	orrs	r4, r3

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8002b3a:	462a      	mov	r2, r5
 8002b3c:	4630      	mov	r0, r6
    reg |= 1 << pipe;
 8002b3e:	f88d 4007 	strb.w	r4, [sp, #7]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8002b42:	f7ff feaf 	bl	80028a4 <nrf_write_register>
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002b46:	3000      	adds	r0, #0
 8002b48:	bf18      	it	ne
 8002b4a:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002b50:	4608      	mov	r0, r1
 8002b52:	e7fb      	b.n	8002b4c <nrf_enable_auto_ack+0x36>

08002b54 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8002b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002b56:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8002b58:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002b60:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8002b62:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002b64:	f7ff fe8e 	bl	8002884 <nrf_read_register>
 8002b68:	b998      	cbnz	r0, 8002b92 <nrf_enable_crc+0x3e>
 8002b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (activate) {
 8002b6e:	b16e      	cbz	r6, 8002b8c <nrf_enable_crc+0x38>
        reg |= 1 << 3;
 8002b70:	f043 0308 	orr.w	r3, r3, #8
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002b74:	4622      	mov	r2, r4
 8002b76:	2100      	movs	r1, #0
 8002b78:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8002b7a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002b7e:	f7ff fe91 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002b82:	3000      	adds	r0, #0
 8002b84:	bf18      	it	ne
 8002b86:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 3);
 8002b8c:	f023 0308 	bic.w	r3, r3, #8
 8002b90:	e7f0      	b.n	8002b74 <nrf_enable_crc+0x20>
        return NRF_ERROR;
 8002b92:	2001      	movs	r0, #1
 8002b94:	e7f8      	b.n	8002b88 <nrf_enable_crc+0x34>

08002b96 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002b98:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002b9a:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002ba2:	4622      	mov	r2, r4
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002ba4:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002ba6:	f7ff fe6d 	bl	8002884 <nrf_read_register>
 8002baa:	b110      	cbz	r0, 8002bb2 <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 8002bac:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8002bae:	b002      	add	sp, #8
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (width == NRF_CRC_WIDTH_2B) {
 8002bb6:	2e01      	cmp	r6, #1
        reg |= 1 << 2;
 8002bb8:	bf0c      	ite	eq
 8002bba:	f043 0304 	orreq.w	r3, r3, #4
        reg &= ~(1 << 3);
 8002bbe:	f023 0308 	bicne.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8002bc8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002bcc:	f7ff fe6a 	bl	80028a4 <nrf_write_register>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d1eb      	bne.n	8002bac <nrf_set_crc_width+0x16>
    dev->config.crc_width = width;
 8002bd4:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 8002bd6:	e7ea      	b.n	8002bae <nrf_set_crc_width+0x18>

08002bd8 <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002bda:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002bdc:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002bde:	2100      	movs	r1, #0
 8002be0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002be4:	4622      	mov	r2, r4
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002be6:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002be8:	f7ff fe4c 	bl	8002884 <nrf_read_register>
 8002bec:	b998      	cbnz	r0, 8002c16 <nrf_power_up+0x3e>
 8002bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (power_up) {
 8002bf2:	b16e      	cbz	r6, 8002c10 <nrf_power_up+0x38>
        reg |= 1 << 1;
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4628      	mov	r0, r5
        reg &= ~(1 << 1);
 8002bfe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c02:	f7ff fe4f 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002c06:	3000      	adds	r0, #0
 8002c08:	bf18      	it	ne
 8002c0a:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 1);
 8002c10:	f023 0302 	bic.w	r3, r3, #2
 8002c14:	e7f0      	b.n	8002bf8 <nrf_power_up+0x20>
        return NRF_ERROR;
 8002c16:	2001      	movs	r0, #1
 8002c18:	e7f8      	b.n	8002c0c <nrf_power_up+0x34>

08002c1a <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002c1c:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002c1e:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002c20:	2100      	movs	r1, #0
 8002c22:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c26:	4622      	mov	r2, r4
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002c28:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c2a:	f7ff fe2b 	bl	8002884 <nrf_read_register>
 8002c2e:	b998      	cbnz	r0, 8002c58 <nrf_rx_tx_control+0x3e>
 8002c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (rx) {
 8002c34:	b16e      	cbz	r6, 8002c52 <nrf_rx_tx_control+0x38>
        reg |= 1;
 8002c36:	f043 0301 	orr.w	r3, r3, #1
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4628      	mov	r0, r5
        reg &= ~(1);
 8002c40:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c44:	f7ff fe2e 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002c48:	3000      	adds	r0, #0
 8002c4a:	bf18      	it	ne
 8002c4c:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1);
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	e7f0      	b.n	8002c3a <nrf_rx_tx_control+0x20>
        return NRF_ERROR;
 8002c58:	2001      	movs	r0, #1
 8002c5a:	e7f8      	b.n	8002c4e <nrf_rx_tx_control+0x34>

08002c5c <nrf_irq_handler>:
void nrf_irq_handler(nrf24l01* dev) {
 8002c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0;
 8002c5e:	ad02      	add	r5, sp, #8
 8002c60:	2300      	movs	r3, #0
 8002c62:	f805 3d02 	strb.w	r3, [r5, #-2]!
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8002c66:	2107      	movs	r1, #7
 8002c68:	462a      	mov	r2, r5
void nrf_irq_handler(nrf24l01* dev) {
 8002c6a:	4604      	mov	r4, r0
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8002c6c:	f7ff fe0a 	bl	8002884 <nrf_read_register>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d177      	bne.n	8002d64 <nrf_irq_handler+0x108>
    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8002c74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c78:	065e      	lsls	r6, r3, #25
 8002c7a:	d52a      	bpl.n	8002cd2 <nrf_irq_handler+0x76>
        uint8_t fifo_status = 0;
 8002c7c:	ae02      	add	r6, sp, #8
 8002c7e:	f806 0d01 	strb.w	r0, [r6, #-1]!
        ce_reset(dev);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff fd94 	bl	80027b0 <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002c88:	462a      	mov	r2, r5
 8002c8a:	2107      	movs	r1, #7
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f7ff fe09 	bl	80028a4 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8002c92:	4632      	mov	r2, r6
 8002c94:	2117      	movs	r1, #23
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fdf4 	bl	8002884 <nrf_read_register>
        if ((fifo_status & 1) == 0) {
 8002c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ca0:	07d8      	lsls	r0, r3, #31
 8002ca2:	d413      	bmi.n	8002ccc <nrf_irq_handler+0x70>
            uint8_t* rx_buffer = dev->config.rx_buffer;
 8002ca4:	6926      	ldr	r6, [r4, #16]
            nrf_read_rx_payload(dev, rx_buffer);
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4631      	mov	r1, r6
 8002caa:	f7ff fe0b 	bl	80028c4 <nrf_read_rx_payload>
            status |= 1 << 6;
 8002cae:	f89d 3006 	ldrb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002cb2:	2107      	movs	r1, #7
            status |= 1 << 6;
 8002cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            nrf_write_register(dev, NRF_STATUS, &status);
 8002cb8:	462a      	mov	r2, r5
 8002cba:	4620      	mov	r0, r4
            status |= 1 << 6;
 8002cbc:	f88d 3006 	strb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002cc0:	f7ff fdf0 	bl	80028a4 <nrf_write_register>
            nrf_packet_received_callback(dev, rx_buffer);
 8002cc4:	4631      	mov	r1, r6
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff fdc8 	bl	800285c <nrf_packet_received_callback>
        ce_set(dev);
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fd74 	bl	80027ba <ce_set>
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8002cd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002cd6:	0699      	lsls	r1, r3, #26
 8002cd8:	d51a      	bpl.n	8002d10 <nrf_irq_handler+0xb4>
        status |= 1 << 5;      // clear the interrupt flag
 8002cda:	f043 0320 	orr.w	r3, r3, #32
        ce_reset(dev);
 8002cde:	4620      	mov	r0, r4
        status |= 1 << 5;      // clear the interrupt flag
 8002ce0:	f88d 3006 	strb.w	r3, [sp, #6]
        ce_reset(dev);
 8002ce4:	f7ff fd64 	bl	80027b0 <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff ff95 	bl	8002c1a <nrf_rx_tx_control>
        dev->state = NRF_STATE_RX;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ce_set(dev);
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff fd5f 	bl	80027ba <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	2107      	movs	r1, #7
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7ff fdcf 	bl	80028a4 <nrf_write_register>
        dev->tx_result = NRF_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8002d0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((status & (1 << 4))) { // MaxRetransmits reached
 8002d10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d14:	06da      	lsls	r2, r3, #27
 8002d16:	d525      	bpl.n	8002d64 <nrf_irq_handler+0x108>
        status |= 1 << 4;
 8002d18:	f043 0310 	orr.w	r3, r3, #16
        nrf_flush_tx(dev);
 8002d1c:	4620      	mov	r0, r4
        status |= 1 << 4;
 8002d1e:	f88d 3006 	strb.w	r3, [sp, #6]
        nrf_flush_tx(dev);
 8002d22:	f7ff fdf7 	bl	8002914 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 8002d26:	2100      	movs	r1, #0
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff ff55 	bl	8002bd8 <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff ff51 	bl	8002bd8 <nrf_power_up>
        ce_reset(dev);
 8002d36:	4620      	mov	r0, r4
 8002d38:	f7ff fd3a 	bl	80027b0 <ce_reset>
        dev->state = NRF_STATE_RX;
 8002d3c:	2601      	movs	r6, #1
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff6a 	bl	8002c1a <nrf_rx_tx_control>
        ce_set(dev);
 8002d46:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8002d48:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
        ce_set(dev);
 8002d4c:	f7ff fd35 	bl	80027ba <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002d50:	462a      	mov	r2, r5
 8002d52:	2107      	movs	r1, #7
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff fda5 	bl	80028a4 <nrf_write_register>
        dev->tx_busy   = 0;
 8002d5a:	2300      	movs	r3, #0
        dev->tx_result = NRF_ERROR;
 8002d5c:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8002d60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002d64:	b002      	add	sp, #8
 8002d66:	bd70      	pop	{r4, r5, r6, pc}

08002d68 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002d6a:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002d6c:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002d74:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002d76:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002d78:	f7ff fd84 	bl	8002884 <nrf_read_register>
 8002d7c:	b998      	cbnz	r0, 8002da6 <nrf_enable_rx_data_ready_irq+0x3e>
 8002d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (!activate) {
 8002d82:	b96e      	cbnz	r6, 8002da0 <nrf_enable_rx_data_ready_irq+0x38>
        reg |= 1 << 6;
 8002d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002d88:	4622      	mov	r2, r4
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4628      	mov	r0, r5
        reg &= ~(1 << 6);
 8002d8e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002d92:	f7ff fd87 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002d96:	3000      	adds	r0, #0
 8002d98:	bf18      	it	ne
 8002d9a:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8002da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da4:	e7f0      	b.n	8002d88 <nrf_enable_rx_data_ready_irq+0x20>
        return NRF_ERROR;
 8002da6:	2001      	movs	r0, #1
 8002da8:	e7f8      	b.n	8002d9c <nrf_enable_rx_data_ready_irq+0x34>

08002daa <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002dac:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002dae:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002db0:	2100      	movs	r1, #0
 8002db2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002db6:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002db8:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002dba:	f7ff fd63 	bl	8002884 <nrf_read_register>
 8002dbe:	b998      	cbnz	r0, 8002de8 <nrf_enable_tx_data_sent_irq+0x3e>
 8002dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002dc4:	b96e      	cbnz	r6, 8002de2 <nrf_enable_tx_data_sent_irq+0x38>
        reg |= 1 << 5;
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002dca:	4622      	mov	r2, r4
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8002dd0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002dd4:	f7ff fd66 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002dd8:	3000      	adds	r0, #0
 8002dda:	bf18      	it	ne
 8002ddc:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002dde:	b002      	add	sp, #8
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8002de2:	f023 0320 	bic.w	r3, r3, #32
 8002de6:	e7f0      	b.n	8002dca <nrf_enable_tx_data_sent_irq+0x20>
        return NRF_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e7f8      	b.n	8002dde <nrf_enable_tx_data_sent_irq+0x34>

08002dec <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002dee:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002df0:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002df2:	2100      	movs	r1, #0
 8002df4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002df8:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002dfa:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002dfc:	f7ff fd42 	bl	8002884 <nrf_read_register>
 8002e00:	b998      	cbnz	r0, 8002e2a <nrf_enable_max_retransmit_irq+0x3e>
 8002e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002e06:	b96e      	cbnz	r6, 8002e24 <nrf_enable_max_retransmit_irq+0x38>
        reg |= 1 << 4;
 8002e08:	f043 0310 	orr.w	r3, r3, #16
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4628      	mov	r0, r5
        reg &= ~(1 << 4);
 8002e12:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e16:	f7ff fd45 	bl	80028a4 <nrf_write_register>
        return NRF_ERROR;
 8002e1a:	3000      	adds	r0, #0
 8002e1c:	bf18      	it	ne
 8002e1e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002e20:	b002      	add	sp, #8
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 4);
 8002e24:	f023 0310 	bic.w	r3, r3, #16
 8002e28:	e7f0      	b.n	8002e0c <nrf_enable_max_retransmit_irq+0x20>
        return NRF_ERROR;
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	e7f8      	b.n	8002e20 <nrf_enable_max_retransmit_irq+0x34>

08002e2e <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002e2e:	b530      	push	{r4, r5, lr}
 8002e30:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002e32:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002e34:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	460a      	mov	r2, r1
 8002e3a:	ab02      	add	r3, sp, #8
 8002e3c:	212a      	movs	r1, #42	; 0x2a
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002e3e:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002e40:	f7ff fcc0 	bl	80027c4 <nrf_send_command>
 8002e44:	b910      	cbnz	r0, 8002e4c <nrf_set_rx_address_p0+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8002e46:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8002e48:	b005      	add	sp, #20
 8002e4a:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e7fb      	b.n	8002e48 <nrf_set_rx_address_p0+0x1a>

08002e50 <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002e50:	b530      	push	{r4, r5, lr}
 8002e52:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002e54:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002e56:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	460a      	mov	r2, r1
 8002e5c:	ab02      	add	r3, sp, #8
 8002e5e:	212b      	movs	r1, #43	; 0x2b
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002e60:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002e62:	f7ff fcaf 	bl	80027c4 <nrf_send_command>
 8002e66:	b910      	cbnz	r0, 8002e6e <nrf_set_rx_address_p1+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8002e68:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8002e6a:	b005      	add	sp, #20
 8002e6c:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002e6e:	2001      	movs	r0, #1
 8002e70:	e7fb      	b.n	8002e6a <nrf_set_rx_address_p1+0x1a>

08002e72 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002e72:	b530      	push	{r4, r5, lr}
 8002e74:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002e76:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002e78:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	ab02      	add	r3, sp, #8
 8002e80:	2130      	movs	r1, #48	; 0x30
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002e82:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002e84:	f7ff fc9e 	bl	80027c4 <nrf_send_command>
 8002e88:	b910      	cbnz	r0, 8002e90 <nrf_set_tx_address+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 8002e8a:	60ec      	str	r4, [r5, #12]
    return NRF_OK;
}
 8002e8c:	b005      	add	sp, #20
 8002e8e:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002e90:	2001      	movs	r0, #1
 8002e92:	e7fb      	b.n	8002e8c <nrf_set_tx_address+0x1a>

08002e94 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002e94:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002e96:	aa02      	add	r2, sp, #8
 8002e98:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e9c:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002ea0:	2111      	movs	r1, #17
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002ea2:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002ea4:	f7ff fcfe 	bl	80028a4 <nrf_write_register>
 8002ea8:	b120      	cbz	r0, 8002eb4 <nrf_set_rx_payload_width_p0+0x20>
        dev->config.payload_length = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8002eae:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002eb8:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002eba:	e7f9      	b.n	8002eb0 <nrf_set_rx_payload_width_p0+0x1c>

08002ebc <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002ebc:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002ebe:	aa02      	add	r2, sp, #8
 8002ec0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ec4:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8002ec8:	2112      	movs	r1, #18
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002eca:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8002ecc:	f7ff fcea 	bl	80028a4 <nrf_write_register>
 8002ed0:	b120      	cbz	r0, 8002edc <nrf_set_rx_payload_width_p1+0x20>
        dev->config.payload_length = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8002ed6:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ee0:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002ee2:	e7f9      	b.n	8002ed8 <nrf_set_rx_payload_width_p1+0x1c>

08002ee4 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002ee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dev->config = *config;
 8002ee6:	460e      	mov	r6, r1
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002ee8:	4604      	mov	r4, r0
    dev->config = *config;
 8002eea:	4605      	mov	r5, r0
 8002eec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	602b      	str	r3, [r5, #0]
    ce_reset(dev);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff fc57 	bl	80027b0 <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8002f02:	2200      	movs	r2, #0
 8002f04:	8c21      	ldrh	r1, [r4, #32]
 8002f06:	69e0      	ldr	r0, [r4, #28]
 8002f08:	f7fe f8d0 	bl	80010ac <HAL_GPIO_WritePin>
    uint8_t config_reg = 0;
 8002f0c:	ad02      	add	r5, sp, #8
    nrf_power_up(dev, true);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff fe61 	bl	8002bd8 <nrf_power_up>
    uint8_t config_reg = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while ((config_reg & 2) == 0) { // wait for powerup
 8002f1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002f20:	f011 0102 	ands.w	r1, r1, #2
 8002f24:	d053      	beq.n	8002fce <nrf_init+0xea>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 8002f26:	7921      	ldrb	r1, [r4, #4]
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ffb3 	bl	8002e94 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 8002f2e:	7921      	ldrb	r1, [r4, #4]
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff ffc3 	bl	8002ebc <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 8002f36:	68a1      	ldr	r1, [r4, #8]
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ff89 	bl	8002e50 <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 8002f3e:	68e1      	ldr	r1, [r4, #12]
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ff74 	bl	8002e2e <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 8002f46:	68e1      	ldr	r1, [r4, #12]
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7ff ff92 	bl	8002e72 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff ff09 	bl	8002d68 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 8002f56:	2101      	movs	r1, #1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff26 	bl	8002daa <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff ff43 	bl	8002dec <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 8002f66:	2101      	movs	r1, #1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff fdf3 	bl	8002b54 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8002f6e:	78a1      	ldrb	r1, [r4, #2]
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff fe10 	bl	8002b96 <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 8002f76:	78e1      	ldrb	r1, [r4, #3]
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff fda0 	bl	8002abe <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 8002f7e:	79e1      	ldrb	r1, [r4, #7]
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff fd3a 	bl	80029fa <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 8002f86:	7821      	ldrb	r1, [r4, #0]
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fceb 	bl	8002964 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8002f8e:	7961      	ldrb	r1, [r4, #5]
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff fd51 	bl	8002a38 <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 8002f96:	79a1      	ldrb	r1, [r4, #6]
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff fd6e 	bl	8002a7a <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff fdab 	bl	8002afc <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff fdb4 	bl	8002b16 <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fd06 	bl	80029c0 <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff fe2f 	bl	8002c1a <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fcbd 	bl	800293c <nrf_flush_rx>
    ce_set(dev);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff fbf9 	bl	80027ba <ce_set>
}
 8002fc8:	2000      	movs	r0, #0
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 8002fce:	462a      	mov	r2, r5
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff fc57 	bl	8002884 <nrf_read_register>
 8002fd6:	e7a1      	b.n	8002f1c <nrf_init+0x38>

08002fd8 <nrf_send_packet>:

NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8002fd8:	b538      	push	{r3, r4, r5, lr}

	dev->tx_busy = 1;
 8002fda:	2301      	movs	r3, #1
NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8002fdc:	4604      	mov	r4, r0
	dev->tx_busy = 1;
 8002fde:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8002fe2:	460d      	mov	r5, r1

    ce_reset(dev);
 8002fe4:	f7ff fbe4 	bl	80027b0 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7ff fe15 	bl	8002c1a <nrf_rx_tx_control>
     nrf_write_tx_payload(dev, data);
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fc7a 	bl	80028ec <nrf_write_tx_payload>
    ce_set(dev);
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fbde 	bl	80027ba <ce_set>
    while (dev->tx_busy == 1) {
 8002ffe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003002:	2b01      	cmp	r3, #1
 8003004:	d0fb      	beq.n	8002ffe <nrf_send_packet+0x26>

    } // wait for end of transmittion

    return dev->tx_result;
 8003006:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 800300a:	bd38      	pop	{r3, r4, r5, pc}

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_MspInit+0x3c>)
 8003010:	2100      	movs	r1, #0
 8003012:	9100      	str	r1, [sp, #0]
 8003014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800301a:	645a      	str	r2, [r3, #68]	; 0x44
 800301c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003022:	9200      	str	r2, [sp, #0]
 8003024:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	9101      	str	r1, [sp, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003038:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800303c:	f7fd fefe 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003040:	b003      	add	sp, #12
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800304c:	b530      	push	{r4, r5, lr}
 800304e:	4604      	mov	r4, r0
 8003050:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003052:	2214      	movs	r2, #20
 8003054:	2100      	movs	r1, #0
 8003056:	a803      	add	r0, sp, #12
 8003058:	f000 f94c 	bl	80032f4 <memset>
  if(hi2c->Instance==I2C1)
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_I2C_MspInit+0x64>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d123      	bne.n	80030ac <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003064:	4c13      	ldr	r4, [pc, #76]	; (80030b4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	2500      	movs	r5, #0
 800306a:	9501      	str	r5, [sp, #4]
 800306c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	6323      	str	r3, [r4, #48]	; 0x30
 8003074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800307e:	23c0      	movs	r3, #192	; 0xc0
 8003080:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003082:	2312      	movs	r3, #18
 8003084:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	2301      	movs	r3, #1
 8003088:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003090:	2304      	movs	r3, #4
 8003092:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f7fd ff3c 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003098:	9502      	str	r5, [sp, #8]
 800309a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800309c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a0:	6423      	str	r3, [r4, #64]	; 0x40
 80030a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030ac:	b009      	add	sp, #36	; 0x24
 80030ae:	bd30      	pop	{r4, r5, pc}
 80030b0:	40005400 	.word	0x40005400
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400

080030bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	2214      	movs	r2, #20
 80030c4:	2100      	movs	r1, #0
 80030c6:	a803      	add	r0, sp, #12
 80030c8:	f000 f914 	bl	80032f4 <memset>
  if(hspi->Instance==SPI2)
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_SPI_MspInit+0x90>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d138      	bne.n	8003146 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80030d8:	2400      	movs	r4, #0
 80030da:	9400      	str	r4, [sp, #0]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030de:	481c      	ldr	r0, [pc, #112]	; (8003150 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
 80030e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030ec:	9200      	str	r2, [sp, #0]
 80030ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f0:	9401      	str	r4, [sp, #4]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	f042 0204 	orr.w	r2, r2, #4
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
 80030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fc:	f002 0204 	and.w	r2, r2, #4
 8003100:	9201      	str	r2, [sp, #4]
 8003102:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003104:	9402      	str	r4, [sp, #8]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	f042 0202 	orr.w	r2, r2, #2
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	9302      	str	r3, [sp, #8]
 8003116:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003118:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003122:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003124:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800312a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312c:	f7fd fef0 	bl	8000f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	a903      	add	r1, sp, #12
 8003136:	4807      	ldr	r0, [pc, #28]	; (8003154 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003138:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003140:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	f7fd fee5 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003146:	b009      	add	sp, #36	; 0x24
 8003148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314a:	bf00      	nop
 800314c:	40003800 	.word	0x40003800
 8003150:	40020800 	.word	0x40020800
 8003154:	40020400 	.word	0x40020400

08003158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003158:	b510      	push	{r4, lr}
 800315a:	4604      	mov	r4, r0
 800315c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315e:	2214      	movs	r2, #20
 8003160:	2100      	movs	r1, #0
 8003162:	a803      	add	r0, sp, #12
 8003164:	f000 f8c6 	bl	80032f4 <memset>
  if(huart->Instance==USART2)
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_UART_MspInit+0x60>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d120      	bne.n	80031b2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003170:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003174:	2100      	movs	r1, #0
 8003176:	9101      	str	r1, [sp, #4]
 8003178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	4810      	ldr	r0, [pc, #64]	; (80031bc <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800317c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
 8003182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003184:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003188:	9201      	str	r2, [sp, #4]
 800318a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	9102      	str	r1, [sp, #8]
 800318e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031a0:	230c      	movs	r3, #12
 80031a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031aa:	2307      	movs	r3, #7
 80031ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f7fd feaf 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031b2:	b008      	add	sp, #32
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	bf00      	nop
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40020000 	.word	0x40020000

080031c0 <NMI_Handler>:
 80031c0:	4770      	bx	lr

080031c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c2:	e7fe      	b.n	80031c2 <HardFault_Handler>

080031c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c4:	e7fe      	b.n	80031c4 <MemManage_Handler>

080031c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c6:	e7fe      	b.n	80031c6 <BusFault_Handler>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	e7fe      	b.n	80031c8 <UsageFault_Handler>

080031ca <SVC_Handler>:
 80031ca:	4770      	bx	lr

080031cc <DebugMon_Handler>:
 80031cc:	4770      	bx	lr

080031ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ce:	4770      	bx	lr

080031d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d0:	f7fd be0e 	b.w	8000df0 <HAL_IncTick>

080031d4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80031d4:	2010      	movs	r0, #16
 80031d6:	f7fd bf75 	b.w	80010c4 <HAL_GPIO_EXTI_IRQHandler>
	...

080031dc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80031dc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <_sbrk+0x2c>)
 80031e0:	6819      	ldr	r1, [r3, #0]
{
 80031e2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80031e4:	b909      	cbnz	r1, 80031ea <_sbrk+0xe>
		heap_end = &end;
 80031e6:	4909      	ldr	r1, [pc, #36]	; (800320c <_sbrk+0x30>)
 80031e8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80031ea:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80031ec:	4669      	mov	r1, sp
 80031ee:	4402      	add	r2, r0
 80031f0:	428a      	cmp	r2, r1
 80031f2:	d906      	bls.n	8003202 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80031f4:	f000 f84c 	bl	8003290 <__errno>
 80031f8:	230c      	movs	r3, #12
 80031fa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003202:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003204:	bd08      	pop	{r3, pc}
 8003206:	bf00      	nop
 8003208:	2000008c 	.word	0x2000008c
 800320c:	200001c8 	.word	0x200001c8

08003210 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SystemInit+0x18>)
 8003212:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003216:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800321a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800321e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800322c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003264 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003232:	e003      	b.n	800323c <LoopCopyDataInit>

08003234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800323a:	3104      	adds	r1, #4

0800323c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800323c:	480b      	ldr	r0, [pc, #44]	; (800326c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003244:	d3f6      	bcc.n	8003234 <CopyDataInit>
  ldr  r2, =_sbss
 8003246:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003248:	e002      	b.n	8003250 <LoopFillZerobss>

0800324a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800324a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800324c:	f842 3b04 	str.w	r3, [r2], #4

08003250 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003254:	d3f9      	bcc.n	800324a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003256:	f7ff ffdb 	bl	8003210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325a:	f000 f81f 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325e:	f7ff f973 	bl	8002548 <main>
  bx  lr    
 8003262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003264:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003268:	08003c38 	.word	0x08003c38
  ldr  r0, =_sdata
 800326c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003270:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003274:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003278:	200001c8 	.word	0x200001c8

0800327c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC_IRQHandler>
	...

08003280 <calloc>:
 8003280:	4b02      	ldr	r3, [pc, #8]	; (800328c <calloc+0xc>)
 8003282:	460a      	mov	r2, r1
 8003284:	4601      	mov	r1, r0
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f000 b83c 	b.w	8003304 <_calloc_r>
 800328c:	2000000c 	.word	0x2000000c

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2000000c 	.word	0x2000000c

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4e0d      	ldr	r6, [pc, #52]	; (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1ba4      	subs	r4, r4, r6
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2500      	movs	r5, #0
 80032a8:	42a5      	cmp	r5, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4e0b      	ldr	r6, [pc, #44]	; (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	; (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 fc5a 	bl	8003b68 <_init>
 80032b4:	1ba4      	subs	r4, r4, r6
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2500      	movs	r5, #0
 80032ba:	42a5      	cmp	r5, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c4:	4798      	blx	r3
 80032c6:	3501      	adds	r5, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ce:	4798      	blx	r3
 80032d0:	3501      	adds	r5, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003c30 	.word	0x08003c30
 80032d8:	08003c30 	.word	0x08003c30
 80032dc:	08003c30 	.word	0x08003c30
 80032e0:	08003c34 	.word	0x08003c34

080032e4 <malloc>:
 80032e4:	4b02      	ldr	r3, [pc, #8]	; (80032f0 <malloc+0xc>)
 80032e6:	4601      	mov	r1, r0
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	f000 b867 	b.w	80033bc <_malloc_r>
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <memset>:
 80032f4:	4402      	add	r2, r0
 80032f6:	4603      	mov	r3, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <memset+0xa>
 80032fc:	4770      	bx	lr
 80032fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003302:	e7f9      	b.n	80032f8 <memset+0x4>

08003304 <_calloc_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	fb02 f401 	mul.w	r4, r2, r1
 800330a:	4621      	mov	r1, r4
 800330c:	f000 f856 	bl	80033bc <_malloc_r>
 8003310:	4605      	mov	r5, r0
 8003312:	b118      	cbz	r0, 800331c <_calloc_r+0x18>
 8003314:	4622      	mov	r2, r4
 8003316:	2100      	movs	r1, #0
 8003318:	f7ff ffec 	bl	80032f4 <memset>
 800331c:	4628      	mov	r0, r5
 800331e:	bd38      	pop	{r3, r4, r5, pc}

08003320 <_free_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	2900      	cmp	r1, #0
 8003326:	d045      	beq.n	80033b4 <_free_r+0x94>
 8003328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332c:	1f0c      	subs	r4, r1, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfb8      	it	lt
 8003332:	18e4      	addlt	r4, r4, r3
 8003334:	f000 f8dc 	bl	80034f0 <__malloc_lock>
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <_free_r+0x98>)
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	4610      	mov	r0, r2
 800333e:	b933      	cbnz	r3, 800334e <_free_r+0x2e>
 8003340:	6063      	str	r3, [r4, #4]
 8003342:	6014      	str	r4, [r2, #0]
 8003344:	4628      	mov	r0, r5
 8003346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800334a:	f000 b8d2 	b.w	80034f2 <__malloc_unlock>
 800334e:	42a3      	cmp	r3, r4
 8003350:	d90c      	bls.n	800336c <_free_r+0x4c>
 8003352:	6821      	ldr	r1, [r4, #0]
 8003354:	1862      	adds	r2, r4, r1
 8003356:	4293      	cmp	r3, r2
 8003358:	bf04      	itt	eq
 800335a:	681a      	ldreq	r2, [r3, #0]
 800335c:	685b      	ldreq	r3, [r3, #4]
 800335e:	6063      	str	r3, [r4, #4]
 8003360:	bf04      	itt	eq
 8003362:	1852      	addeq	r2, r2, r1
 8003364:	6022      	streq	r2, [r4, #0]
 8003366:	6004      	str	r4, [r0, #0]
 8003368:	e7ec      	b.n	8003344 <_free_r+0x24>
 800336a:	4613      	mov	r3, r2
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	b10a      	cbz	r2, 8003374 <_free_r+0x54>
 8003370:	42a2      	cmp	r2, r4
 8003372:	d9fa      	bls.n	800336a <_free_r+0x4a>
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	1858      	adds	r0, r3, r1
 8003378:	42a0      	cmp	r0, r4
 800337a:	d10b      	bne.n	8003394 <_free_r+0x74>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	4401      	add	r1, r0
 8003380:	1858      	adds	r0, r3, r1
 8003382:	4282      	cmp	r2, r0
 8003384:	6019      	str	r1, [r3, #0]
 8003386:	d1dd      	bne.n	8003344 <_free_r+0x24>
 8003388:	6810      	ldr	r0, [r2, #0]
 800338a:	6852      	ldr	r2, [r2, #4]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	4401      	add	r1, r0
 8003390:	6019      	str	r1, [r3, #0]
 8003392:	e7d7      	b.n	8003344 <_free_r+0x24>
 8003394:	d902      	bls.n	800339c <_free_r+0x7c>
 8003396:	230c      	movs	r3, #12
 8003398:	602b      	str	r3, [r5, #0]
 800339a:	e7d3      	b.n	8003344 <_free_r+0x24>
 800339c:	6820      	ldr	r0, [r4, #0]
 800339e:	1821      	adds	r1, r4, r0
 80033a0:	428a      	cmp	r2, r1
 80033a2:	bf04      	itt	eq
 80033a4:	6811      	ldreq	r1, [r2, #0]
 80033a6:	6852      	ldreq	r2, [r2, #4]
 80033a8:	6062      	str	r2, [r4, #4]
 80033aa:	bf04      	itt	eq
 80033ac:	1809      	addeq	r1, r1, r0
 80033ae:	6021      	streq	r1, [r4, #0]
 80033b0:	605c      	str	r4, [r3, #4]
 80033b2:	e7c7      	b.n	8003344 <_free_r+0x24>
 80033b4:	bd38      	pop	{r3, r4, r5, pc}
 80033b6:	bf00      	nop
 80033b8:	20000090 	.word	0x20000090

080033bc <_malloc_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	1ccd      	adds	r5, r1, #3
 80033c0:	f025 0503 	bic.w	r5, r5, #3
 80033c4:	3508      	adds	r5, #8
 80033c6:	2d0c      	cmp	r5, #12
 80033c8:	bf38      	it	cc
 80033ca:	250c      	movcc	r5, #12
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	4606      	mov	r6, r0
 80033d0:	db01      	blt.n	80033d6 <_malloc_r+0x1a>
 80033d2:	42a9      	cmp	r1, r5
 80033d4:	d903      	bls.n	80033de <_malloc_r+0x22>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	2000      	movs	r0, #0
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	f000 f887 	bl	80034f0 <__malloc_lock>
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <_malloc_r+0xb4>)
 80033e4:	6814      	ldr	r4, [r2, #0]
 80033e6:	4621      	mov	r1, r4
 80033e8:	b991      	cbnz	r1, 8003410 <_malloc_r+0x54>
 80033ea:	4c22      	ldr	r4, [pc, #136]	; (8003474 <_malloc_r+0xb8>)
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	b91b      	cbnz	r3, 80033f8 <_malloc_r+0x3c>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 f841 	bl	8003478 <_sbrk_r>
 80033f6:	6020      	str	r0, [r4, #0]
 80033f8:	4629      	mov	r1, r5
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 f83c 	bl	8003478 <_sbrk_r>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d126      	bne.n	8003452 <_malloc_r+0x96>
 8003404:	230c      	movs	r3, #12
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f872 	bl	80034f2 <__malloc_unlock>
 800340e:	e7e4      	b.n	80033da <_malloc_r+0x1e>
 8003410:	680b      	ldr	r3, [r1, #0]
 8003412:	1b5b      	subs	r3, r3, r5
 8003414:	d41a      	bmi.n	800344c <_malloc_r+0x90>
 8003416:	2b0b      	cmp	r3, #11
 8003418:	d90f      	bls.n	800343a <_malloc_r+0x7e>
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	50cd      	str	r5, [r1, r3]
 800341e:	18cc      	adds	r4, r1, r3
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f866 	bl	80034f2 <__malloc_unlock>
 8003426:	f104 000b 	add.w	r0, r4, #11
 800342a:	1d23      	adds	r3, r4, #4
 800342c:	f020 0007 	bic.w	r0, r0, #7
 8003430:	1ac3      	subs	r3, r0, r3
 8003432:	d01b      	beq.n	800346c <_malloc_r+0xb0>
 8003434:	425a      	negs	r2, r3
 8003436:	50e2      	str	r2, [r4, r3]
 8003438:	bd70      	pop	{r4, r5, r6, pc}
 800343a:	428c      	cmp	r4, r1
 800343c:	bf0d      	iteet	eq
 800343e:	6863      	ldreq	r3, [r4, #4]
 8003440:	684b      	ldrne	r3, [r1, #4]
 8003442:	6063      	strne	r3, [r4, #4]
 8003444:	6013      	streq	r3, [r2, #0]
 8003446:	bf18      	it	ne
 8003448:	460c      	movne	r4, r1
 800344a:	e7e9      	b.n	8003420 <_malloc_r+0x64>
 800344c:	460c      	mov	r4, r1
 800344e:	6849      	ldr	r1, [r1, #4]
 8003450:	e7ca      	b.n	80033e8 <_malloc_r+0x2c>
 8003452:	1cc4      	adds	r4, r0, #3
 8003454:	f024 0403 	bic.w	r4, r4, #3
 8003458:	42a0      	cmp	r0, r4
 800345a:	d005      	beq.n	8003468 <_malloc_r+0xac>
 800345c:	1a21      	subs	r1, r4, r0
 800345e:	4630      	mov	r0, r6
 8003460:	f000 f80a 	bl	8003478 <_sbrk_r>
 8003464:	3001      	adds	r0, #1
 8003466:	d0cd      	beq.n	8003404 <_malloc_r+0x48>
 8003468:	6025      	str	r5, [r4, #0]
 800346a:	e7d9      	b.n	8003420 <_malloc_r+0x64>
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	bf00      	nop
 8003470:	20000090 	.word	0x20000090
 8003474:	20000094 	.word	0x20000094

08003478 <_sbrk_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4c06      	ldr	r4, [pc, #24]	; (8003494 <_sbrk_r+0x1c>)
 800347c:	2300      	movs	r3, #0
 800347e:	4605      	mov	r5, r0
 8003480:	4608      	mov	r0, r1
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	f7ff feaa 	bl	80031dc <_sbrk>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d102      	bne.n	8003492 <_sbrk_r+0x1a>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	b103      	cbz	r3, 8003492 <_sbrk_r+0x1a>
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	bd38      	pop	{r3, r4, r5, pc}
 8003494:	200001c4 	.word	0x200001c4

08003498 <siprintf>:
 8003498:	b40e      	push	{r1, r2, r3}
 800349a:	b500      	push	{lr}
 800349c:	b09c      	sub	sp, #112	; 0x70
 800349e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80034a2:	ab1d      	add	r3, sp, #116	; 0x74
 80034a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80034a8:	9002      	str	r0, [sp, #8]
 80034aa:	9006      	str	r0, [sp, #24]
 80034ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034b0:	480a      	ldr	r0, [pc, #40]	; (80034dc <siprintf+0x44>)
 80034b2:	9104      	str	r1, [sp, #16]
 80034b4:	9107      	str	r1, [sp, #28]
 80034b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80034be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	a902      	add	r1, sp, #8
 80034c8:	f000 f870 	bl	80035ac <_svfiprintf_r>
 80034cc:	9b02      	ldr	r3, [sp, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	b01c      	add	sp, #112	; 0x70
 80034d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d8:	b003      	add	sp, #12
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c

080034e0 <strcpy>:
 80034e0:	4603      	mov	r3, r0
 80034e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034e6:	f803 2b01 	strb.w	r2, [r3], #1
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d1f9      	bne.n	80034e2 <strcpy+0x2>
 80034ee:	4770      	bx	lr

080034f0 <__malloc_lock>:
 80034f0:	4770      	bx	lr

080034f2 <__malloc_unlock>:
 80034f2:	4770      	bx	lr

080034f4 <__ssputs_r>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	688e      	ldr	r6, [r1, #8]
 80034fa:	429e      	cmp	r6, r3
 80034fc:	4682      	mov	sl, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	4691      	mov	r9, r2
 8003502:	4698      	mov	r8, r3
 8003504:	d835      	bhi.n	8003572 <__ssputs_r+0x7e>
 8003506:	898a      	ldrh	r2, [r1, #12]
 8003508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800350c:	d031      	beq.n	8003572 <__ssputs_r+0x7e>
 800350e:	6825      	ldr	r5, [r4, #0]
 8003510:	6909      	ldr	r1, [r1, #16]
 8003512:	1a6f      	subs	r7, r5, r1
 8003514:	6965      	ldr	r5, [r4, #20]
 8003516:	2302      	movs	r3, #2
 8003518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800351c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003520:	f108 0301 	add.w	r3, r8, #1
 8003524:	443b      	add	r3, r7
 8003526:	429d      	cmp	r5, r3
 8003528:	bf38      	it	cc
 800352a:	461d      	movcc	r5, r3
 800352c:	0553      	lsls	r3, r2, #21
 800352e:	d531      	bpl.n	8003594 <__ssputs_r+0xa0>
 8003530:	4629      	mov	r1, r5
 8003532:	f7ff ff43 	bl	80033bc <_malloc_r>
 8003536:	4606      	mov	r6, r0
 8003538:	b950      	cbnz	r0, 8003550 <__ssputs_r+0x5c>
 800353a:	230c      	movs	r3, #12
 800353c:	f8ca 3000 	str.w	r3, [sl]
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003546:	81a3      	strh	r3, [r4, #12]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003550:	463a      	mov	r2, r7
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	f000 fab4 	bl	8003ac0 <memcpy>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	81a3      	strh	r3, [r4, #12]
 8003564:	6126      	str	r6, [r4, #16]
 8003566:	6165      	str	r5, [r4, #20]
 8003568:	443e      	add	r6, r7
 800356a:	1bed      	subs	r5, r5, r7
 800356c:	6026      	str	r6, [r4, #0]
 800356e:	60a5      	str	r5, [r4, #8]
 8003570:	4646      	mov	r6, r8
 8003572:	4546      	cmp	r6, r8
 8003574:	bf28      	it	cs
 8003576:	4646      	movcs	r6, r8
 8003578:	4632      	mov	r2, r6
 800357a:	4649      	mov	r1, r9
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	f000 faaa 	bl	8003ad6 <memmove>
 8003582:	68a3      	ldr	r3, [r4, #8]
 8003584:	1b9b      	subs	r3, r3, r6
 8003586:	60a3      	str	r3, [r4, #8]
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	441e      	add	r6, r3
 800358c:	6026      	str	r6, [r4, #0]
 800358e:	2000      	movs	r0, #0
 8003590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003594:	462a      	mov	r2, r5
 8003596:	f000 fab8 	bl	8003b0a <_realloc_r>
 800359a:	4606      	mov	r6, r0
 800359c:	2800      	cmp	r0, #0
 800359e:	d1e1      	bne.n	8003564 <__ssputs_r+0x70>
 80035a0:	6921      	ldr	r1, [r4, #16]
 80035a2:	4650      	mov	r0, sl
 80035a4:	f7ff febc 	bl	8003320 <_free_r>
 80035a8:	e7c7      	b.n	800353a <__ssputs_r+0x46>
	...

080035ac <_svfiprintf_r>:
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	b09d      	sub	sp, #116	; 0x74
 80035b2:	4680      	mov	r8, r0
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	898b      	ldrh	r3, [r1, #12]
 80035b8:	061c      	lsls	r4, r3, #24
 80035ba:	460d      	mov	r5, r1
 80035bc:	4616      	mov	r6, r2
 80035be:	d50f      	bpl.n	80035e0 <_svfiprintf_r+0x34>
 80035c0:	690b      	ldr	r3, [r1, #16]
 80035c2:	b96b      	cbnz	r3, 80035e0 <_svfiprintf_r+0x34>
 80035c4:	2140      	movs	r1, #64	; 0x40
 80035c6:	f7ff fef9 	bl	80033bc <_malloc_r>
 80035ca:	6028      	str	r0, [r5, #0]
 80035cc:	6128      	str	r0, [r5, #16]
 80035ce:	b928      	cbnz	r0, 80035dc <_svfiprintf_r+0x30>
 80035d0:	230c      	movs	r3, #12
 80035d2:	f8c8 3000 	str.w	r3, [r8]
 80035d6:	f04f 30ff 	mov.w	r0, #4294967295
 80035da:	e0c5      	b.n	8003768 <_svfiprintf_r+0x1bc>
 80035dc:	2340      	movs	r3, #64	; 0x40
 80035de:	616b      	str	r3, [r5, #20]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
 80035e4:	2320      	movs	r3, #32
 80035e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ea:	2330      	movs	r3, #48	; 0x30
 80035ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035f0:	f04f 0b01 	mov.w	fp, #1
 80035f4:	4637      	mov	r7, r6
 80035f6:	463c      	mov	r4, r7
 80035f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13c      	bne.n	800367a <_svfiprintf_r+0xce>
 8003600:	ebb7 0a06 	subs.w	sl, r7, r6
 8003604:	d00b      	beq.n	800361e <_svfiprintf_r+0x72>
 8003606:	4653      	mov	r3, sl
 8003608:	4632      	mov	r2, r6
 800360a:	4629      	mov	r1, r5
 800360c:	4640      	mov	r0, r8
 800360e:	f7ff ff71 	bl	80034f4 <__ssputs_r>
 8003612:	3001      	adds	r0, #1
 8003614:	f000 80a3 	beq.w	800375e <_svfiprintf_r+0x1b2>
 8003618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361a:	4453      	add	r3, sl
 800361c:	9309      	str	r3, [sp, #36]	; 0x24
 800361e:	783b      	ldrb	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 809c 	beq.w	800375e <_svfiprintf_r+0x1b2>
 8003626:	2300      	movs	r3, #0
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	9304      	str	r3, [sp, #16]
 800362e:	9307      	str	r3, [sp, #28]
 8003630:	9205      	str	r2, [sp, #20]
 8003632:	9306      	str	r3, [sp, #24]
 8003634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003638:	931a      	str	r3, [sp, #104]	; 0x68
 800363a:	2205      	movs	r2, #5
 800363c:	7821      	ldrb	r1, [r4, #0]
 800363e:	4850      	ldr	r0, [pc, #320]	; (8003780 <_svfiprintf_r+0x1d4>)
 8003640:	f7fc fdd6 	bl	80001f0 <memchr>
 8003644:	1c67      	adds	r7, r4, #1
 8003646:	9b04      	ldr	r3, [sp, #16]
 8003648:	b9d8      	cbnz	r0, 8003682 <_svfiprintf_r+0xd6>
 800364a:	06d9      	lsls	r1, r3, #27
 800364c:	bf44      	itt	mi
 800364e:	2220      	movmi	r2, #32
 8003650:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003654:	071a      	lsls	r2, r3, #28
 8003656:	bf44      	itt	mi
 8003658:	222b      	movmi	r2, #43	; 0x2b
 800365a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800365e:	7822      	ldrb	r2, [r4, #0]
 8003660:	2a2a      	cmp	r2, #42	; 0x2a
 8003662:	d016      	beq.n	8003692 <_svfiprintf_r+0xe6>
 8003664:	9a07      	ldr	r2, [sp, #28]
 8003666:	2100      	movs	r1, #0
 8003668:	200a      	movs	r0, #10
 800366a:	4627      	mov	r7, r4
 800366c:	3401      	adds	r4, #1
 800366e:	783b      	ldrb	r3, [r7, #0]
 8003670:	3b30      	subs	r3, #48	; 0x30
 8003672:	2b09      	cmp	r3, #9
 8003674:	d951      	bls.n	800371a <_svfiprintf_r+0x16e>
 8003676:	b1c9      	cbz	r1, 80036ac <_svfiprintf_r+0x100>
 8003678:	e011      	b.n	800369e <_svfiprintf_r+0xf2>
 800367a:	2b25      	cmp	r3, #37	; 0x25
 800367c:	d0c0      	beq.n	8003600 <_svfiprintf_r+0x54>
 800367e:	4627      	mov	r7, r4
 8003680:	e7b9      	b.n	80035f6 <_svfiprintf_r+0x4a>
 8003682:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <_svfiprintf_r+0x1d4>)
 8003684:	1a80      	subs	r0, r0, r2
 8003686:	fa0b f000 	lsl.w	r0, fp, r0
 800368a:	4318      	orrs	r0, r3
 800368c:	9004      	str	r0, [sp, #16]
 800368e:	463c      	mov	r4, r7
 8003690:	e7d3      	b.n	800363a <_svfiprintf_r+0x8e>
 8003692:	9a03      	ldr	r2, [sp, #12]
 8003694:	1d11      	adds	r1, r2, #4
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	9103      	str	r1, [sp, #12]
 800369a:	2a00      	cmp	r2, #0
 800369c:	db01      	blt.n	80036a2 <_svfiprintf_r+0xf6>
 800369e:	9207      	str	r2, [sp, #28]
 80036a0:	e004      	b.n	80036ac <_svfiprintf_r+0x100>
 80036a2:	4252      	negs	r2, r2
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	9207      	str	r2, [sp, #28]
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	783b      	ldrb	r3, [r7, #0]
 80036ae:	2b2e      	cmp	r3, #46	; 0x2e
 80036b0:	d10e      	bne.n	80036d0 <_svfiprintf_r+0x124>
 80036b2:	787b      	ldrb	r3, [r7, #1]
 80036b4:	2b2a      	cmp	r3, #42	; 0x2a
 80036b6:	f107 0101 	add.w	r1, r7, #1
 80036ba:	d132      	bne.n	8003722 <_svfiprintf_r+0x176>
 80036bc:	9b03      	ldr	r3, [sp, #12]
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	9203      	str	r2, [sp, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bfb8      	it	lt
 80036c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036cc:	3702      	adds	r7, #2
 80036ce:	9305      	str	r3, [sp, #20]
 80036d0:	4c2c      	ldr	r4, [pc, #176]	; (8003784 <_svfiprintf_r+0x1d8>)
 80036d2:	7839      	ldrb	r1, [r7, #0]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7fc fd8a 	bl	80001f0 <memchr>
 80036dc:	b138      	cbz	r0, 80036ee <_svfiprintf_r+0x142>
 80036de:	2340      	movs	r3, #64	; 0x40
 80036e0:	1b00      	subs	r0, r0, r4
 80036e2:	fa03 f000 	lsl.w	r0, r3, r0
 80036e6:	9b04      	ldr	r3, [sp, #16]
 80036e8:	4303      	orrs	r3, r0
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	3701      	adds	r7, #1
 80036ee:	7839      	ldrb	r1, [r7, #0]
 80036f0:	4825      	ldr	r0, [pc, #148]	; (8003788 <_svfiprintf_r+0x1dc>)
 80036f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f6:	2206      	movs	r2, #6
 80036f8:	1c7e      	adds	r6, r7, #1
 80036fa:	f7fc fd79 	bl	80001f0 <memchr>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d035      	beq.n	800376e <_svfiprintf_r+0x1c2>
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <_svfiprintf_r+0x1e0>)
 8003704:	b9fb      	cbnz	r3, 8003746 <_svfiprintf_r+0x19a>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	3307      	adds	r3, #7
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	3308      	adds	r3, #8
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003714:	444b      	add	r3, r9
 8003716:	9309      	str	r3, [sp, #36]	; 0x24
 8003718:	e76c      	b.n	80035f4 <_svfiprintf_r+0x48>
 800371a:	fb00 3202 	mla	r2, r0, r2, r3
 800371e:	2101      	movs	r1, #1
 8003720:	e7a3      	b.n	800366a <_svfiprintf_r+0xbe>
 8003722:	2300      	movs	r3, #0
 8003724:	9305      	str	r3, [sp, #20]
 8003726:	4618      	mov	r0, r3
 8003728:	240a      	movs	r4, #10
 800372a:	460f      	mov	r7, r1
 800372c:	3101      	adds	r1, #1
 800372e:	783a      	ldrb	r2, [r7, #0]
 8003730:	3a30      	subs	r2, #48	; 0x30
 8003732:	2a09      	cmp	r2, #9
 8003734:	d903      	bls.n	800373e <_svfiprintf_r+0x192>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ca      	beq.n	80036d0 <_svfiprintf_r+0x124>
 800373a:	9005      	str	r0, [sp, #20]
 800373c:	e7c8      	b.n	80036d0 <_svfiprintf_r+0x124>
 800373e:	fb04 2000 	mla	r0, r4, r0, r2
 8003742:	2301      	movs	r3, #1
 8003744:	e7f1      	b.n	800372a <_svfiprintf_r+0x17e>
 8003746:	ab03      	add	r3, sp, #12
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	462a      	mov	r2, r5
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <_svfiprintf_r+0x1e4>)
 800374e:	a904      	add	r1, sp, #16
 8003750:	4640      	mov	r0, r8
 8003752:	f3af 8000 	nop.w
 8003756:	f1b0 3fff 	cmp.w	r0, #4294967295
 800375a:	4681      	mov	r9, r0
 800375c:	d1d9      	bne.n	8003712 <_svfiprintf_r+0x166>
 800375e:	89ab      	ldrh	r3, [r5, #12]
 8003760:	065b      	lsls	r3, r3, #25
 8003762:	f53f af38 	bmi.w	80035d6 <_svfiprintf_r+0x2a>
 8003766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003768:	b01d      	add	sp, #116	; 0x74
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	ab03      	add	r3, sp, #12
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	462a      	mov	r2, r5
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <_svfiprintf_r+0x1e4>)
 8003776:	a904      	add	r1, sp, #16
 8003778:	4640      	mov	r0, r8
 800377a:	f000 f881 	bl	8003880 <_printf_i>
 800377e:	e7ea      	b.n	8003756 <_svfiprintf_r+0x1aa>
 8003780:	08003bf3 	.word	0x08003bf3
 8003784:	08003bf9 	.word	0x08003bf9
 8003788:	08003bfd 	.word	0x08003bfd
 800378c:	00000000 	.word	0x00000000
 8003790:	080034f5 	.word	0x080034f5

08003794 <_printf_common>:
 8003794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	4691      	mov	r9, r2
 800379a:	461f      	mov	r7, r3
 800379c:	688a      	ldr	r2, [r1, #8]
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bfb8      	it	lt
 80037a8:	4613      	movlt	r3, r2
 80037aa:	f8c9 3000 	str.w	r3, [r9]
 80037ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	b112      	cbz	r2, 80037be <_printf_common+0x2a>
 80037b8:	3301      	adds	r3, #1
 80037ba:	f8c9 3000 	str.w	r3, [r9]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037c8:	3302      	addmi	r3, #2
 80037ca:	f8c9 3000 	strmi.w	r3, [r9]
 80037ce:	6825      	ldr	r5, [r4, #0]
 80037d0:	f015 0506 	ands.w	r5, r5, #6
 80037d4:	d107      	bne.n	80037e6 <_printf_common+0x52>
 80037d6:	f104 0a19 	add.w	sl, r4, #25
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	f8d9 2000 	ldr.w	r2, [r9]
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	429d      	cmp	r5, r3
 80037e4:	db29      	blt.n	800383a <_printf_common+0xa6>
 80037e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	3300      	adds	r3, #0
 80037ee:	bf18      	it	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	0692      	lsls	r2, r2, #26
 80037f4:	d42e      	bmi.n	8003854 <_printf_common+0xc0>
 80037f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037fa:	4639      	mov	r1, r7
 80037fc:	4630      	mov	r0, r6
 80037fe:	47c0      	blx	r8
 8003800:	3001      	adds	r0, #1
 8003802:	d021      	beq.n	8003848 <_printf_common+0xb4>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	68e5      	ldr	r5, [r4, #12]
 8003808:	f8d9 2000 	ldr.w	r2, [r9]
 800380c:	f003 0306 	and.w	r3, r3, #6
 8003810:	2b04      	cmp	r3, #4
 8003812:	bf08      	it	eq
 8003814:	1aad      	subeq	r5, r5, r2
 8003816:	68a3      	ldr	r3, [r4, #8]
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	bf0c      	ite	eq
 800381c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003820:	2500      	movne	r5, #0
 8003822:	4293      	cmp	r3, r2
 8003824:	bfc4      	itt	gt
 8003826:	1a9b      	subgt	r3, r3, r2
 8003828:	18ed      	addgt	r5, r5, r3
 800382a:	f04f 0900 	mov.w	r9, #0
 800382e:	341a      	adds	r4, #26
 8003830:	454d      	cmp	r5, r9
 8003832:	d11b      	bne.n	800386c <_printf_common+0xd8>
 8003834:	2000      	movs	r0, #0
 8003836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383a:	2301      	movs	r3, #1
 800383c:	4652      	mov	r2, sl
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	47c0      	blx	r8
 8003844:	3001      	adds	r0, #1
 8003846:	d103      	bne.n	8003850 <_printf_common+0xbc>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	3501      	adds	r5, #1
 8003852:	e7c2      	b.n	80037da <_printf_common+0x46>
 8003854:	18e1      	adds	r1, r4, r3
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	2030      	movs	r0, #48	; 0x30
 800385a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800385e:	4422      	add	r2, r4
 8003860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003868:	3302      	adds	r3, #2
 800386a:	e7c4      	b.n	80037f6 <_printf_common+0x62>
 800386c:	2301      	movs	r3, #1
 800386e:	4622      	mov	r2, r4
 8003870:	4639      	mov	r1, r7
 8003872:	4630      	mov	r0, r6
 8003874:	47c0      	blx	r8
 8003876:	3001      	adds	r0, #1
 8003878:	d0e6      	beq.n	8003848 <_printf_common+0xb4>
 800387a:	f109 0901 	add.w	r9, r9, #1
 800387e:	e7d7      	b.n	8003830 <_printf_common+0x9c>

08003880 <_printf_i>:
 8003880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003884:	4617      	mov	r7, r2
 8003886:	7e0a      	ldrb	r2, [r1, #24]
 8003888:	b085      	sub	sp, #20
 800388a:	2a6e      	cmp	r2, #110	; 0x6e
 800388c:	4698      	mov	r8, r3
 800388e:	4606      	mov	r6, r0
 8003890:	460c      	mov	r4, r1
 8003892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003894:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003898:	f000 80bc 	beq.w	8003a14 <_printf_i+0x194>
 800389c:	d81a      	bhi.n	80038d4 <_printf_i+0x54>
 800389e:	2a63      	cmp	r2, #99	; 0x63
 80038a0:	d02e      	beq.n	8003900 <_printf_i+0x80>
 80038a2:	d80a      	bhi.n	80038ba <_printf_i+0x3a>
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	f000 80c8 	beq.w	8003a3a <_printf_i+0x1ba>
 80038aa:	2a58      	cmp	r2, #88	; 0x58
 80038ac:	f000 808a 	beq.w	80039c4 <_printf_i+0x144>
 80038b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80038b8:	e02a      	b.n	8003910 <_printf_i+0x90>
 80038ba:	2a64      	cmp	r2, #100	; 0x64
 80038bc:	d001      	beq.n	80038c2 <_printf_i+0x42>
 80038be:	2a69      	cmp	r2, #105	; 0x69
 80038c0:	d1f6      	bne.n	80038b0 <_printf_i+0x30>
 80038c2:	6821      	ldr	r1, [r4, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038ca:	d023      	beq.n	8003914 <_printf_i+0x94>
 80038cc:	1d11      	adds	r1, r2, #4
 80038ce:	6019      	str	r1, [r3, #0]
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	e027      	b.n	8003924 <_printf_i+0xa4>
 80038d4:	2a73      	cmp	r2, #115	; 0x73
 80038d6:	f000 80b4 	beq.w	8003a42 <_printf_i+0x1c2>
 80038da:	d808      	bhi.n	80038ee <_printf_i+0x6e>
 80038dc:	2a6f      	cmp	r2, #111	; 0x6f
 80038de:	d02a      	beq.n	8003936 <_printf_i+0xb6>
 80038e0:	2a70      	cmp	r2, #112	; 0x70
 80038e2:	d1e5      	bne.n	80038b0 <_printf_i+0x30>
 80038e4:	680a      	ldr	r2, [r1, #0]
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	600a      	str	r2, [r1, #0]
 80038ec:	e003      	b.n	80038f6 <_printf_i+0x76>
 80038ee:	2a75      	cmp	r2, #117	; 0x75
 80038f0:	d021      	beq.n	8003936 <_printf_i+0xb6>
 80038f2:	2a78      	cmp	r2, #120	; 0x78
 80038f4:	d1dc      	bne.n	80038b0 <_printf_i+0x30>
 80038f6:	2278      	movs	r2, #120	; 0x78
 80038f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038fc:	496e      	ldr	r1, [pc, #440]	; (8003ab8 <_printf_i+0x238>)
 80038fe:	e064      	b.n	80039ca <_printf_i+0x14a>
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003906:	1d11      	adds	r1, r2, #4
 8003908:	6019      	str	r1, [r3, #0]
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003910:	2301      	movs	r3, #1
 8003912:	e0a3      	b.n	8003a5c <_printf_i+0x1dc>
 8003914:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003918:	f102 0104 	add.w	r1, r2, #4
 800391c:	6019      	str	r1, [r3, #0]
 800391e:	d0d7      	beq.n	80038d0 <_printf_i+0x50>
 8003920:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003924:	2b00      	cmp	r3, #0
 8003926:	da03      	bge.n	8003930 <_printf_i+0xb0>
 8003928:	222d      	movs	r2, #45	; 0x2d
 800392a:	425b      	negs	r3, r3
 800392c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003930:	4962      	ldr	r1, [pc, #392]	; (8003abc <_printf_i+0x23c>)
 8003932:	220a      	movs	r2, #10
 8003934:	e017      	b.n	8003966 <_printf_i+0xe6>
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800393e:	d003      	beq.n	8003948 <_printf_i+0xc8>
 8003940:	1d08      	adds	r0, r1, #4
 8003942:	6018      	str	r0, [r3, #0]
 8003944:	680b      	ldr	r3, [r1, #0]
 8003946:	e006      	b.n	8003956 <_printf_i+0xd6>
 8003948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394c:	f101 0004 	add.w	r0, r1, #4
 8003950:	6018      	str	r0, [r3, #0]
 8003952:	d0f7      	beq.n	8003944 <_printf_i+0xc4>
 8003954:	880b      	ldrh	r3, [r1, #0]
 8003956:	4959      	ldr	r1, [pc, #356]	; (8003abc <_printf_i+0x23c>)
 8003958:	2a6f      	cmp	r2, #111	; 0x6f
 800395a:	bf14      	ite	ne
 800395c:	220a      	movne	r2, #10
 800395e:	2208      	moveq	r2, #8
 8003960:	2000      	movs	r0, #0
 8003962:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003966:	6865      	ldr	r5, [r4, #4]
 8003968:	60a5      	str	r5, [r4, #8]
 800396a:	2d00      	cmp	r5, #0
 800396c:	f2c0 809c 	blt.w	8003aa8 <_printf_i+0x228>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f020 0004 	bic.w	r0, r0, #4
 8003976:	6020      	str	r0, [r4, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13f      	bne.n	80039fc <_printf_i+0x17c>
 800397c:	2d00      	cmp	r5, #0
 800397e:	f040 8095 	bne.w	8003aac <_printf_i+0x22c>
 8003982:	4675      	mov	r5, lr
 8003984:	2a08      	cmp	r2, #8
 8003986:	d10b      	bne.n	80039a0 <_printf_i+0x120>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	07da      	lsls	r2, r3, #31
 800398c:	d508      	bpl.n	80039a0 <_printf_i+0x120>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	6862      	ldr	r2, [r4, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	bfde      	ittt	le
 8003996:	2330      	movle	r3, #48	; 0x30
 8003998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800399c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039a0:	ebae 0305 	sub.w	r3, lr, r5
 80039a4:	6123      	str	r3, [r4, #16]
 80039a6:	f8cd 8000 	str.w	r8, [sp]
 80039aa:	463b      	mov	r3, r7
 80039ac:	aa03      	add	r2, sp, #12
 80039ae:	4621      	mov	r1, r4
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff feef 	bl	8003794 <_printf_common>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d155      	bne.n	8003a66 <_printf_i+0x1e6>
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295
 80039be:	b005      	add	sp, #20
 80039c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039c8:	493c      	ldr	r1, [pc, #240]	; (8003abc <_printf_i+0x23c>)
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039d2:	f100 0504 	add.w	r5, r0, #4
 80039d6:	601d      	str	r5, [r3, #0]
 80039d8:	d001      	beq.n	80039de <_printf_i+0x15e>
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	e002      	b.n	80039e4 <_printf_i+0x164>
 80039de:	0655      	lsls	r5, r2, #25
 80039e0:	d5fb      	bpl.n	80039da <_printf_i+0x15a>
 80039e2:	8803      	ldrh	r3, [r0, #0]
 80039e4:	07d0      	lsls	r0, r2, #31
 80039e6:	bf44      	itt	mi
 80039e8:	f042 0220 	orrmi.w	r2, r2, #32
 80039ec:	6022      	strmi	r2, [r4, #0]
 80039ee:	b91b      	cbnz	r3, 80039f8 <_printf_i+0x178>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	f022 0220 	bic.w	r2, r2, #32
 80039f6:	6022      	str	r2, [r4, #0]
 80039f8:	2210      	movs	r2, #16
 80039fa:	e7b1      	b.n	8003960 <_printf_i+0xe0>
 80039fc:	4675      	mov	r5, lr
 80039fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a02:	fb02 3310 	mls	r3, r2, r0, r3
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d1f5      	bne.n	80039fe <_printf_i+0x17e>
 8003a12:	e7b7      	b.n	8003984 <_printf_i+0x104>
 8003a14:	6808      	ldr	r0, [r1, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	6949      	ldr	r1, [r1, #20]
 8003a1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a1e:	d004      	beq.n	8003a2a <_printf_i+0x1aa>
 8003a20:	1d10      	adds	r0, r2, #4
 8003a22:	6018      	str	r0, [r3, #0]
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <_printf_i+0x1ba>
 8003a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a2e:	f102 0004 	add.w	r0, r2, #4
 8003a32:	6018      	str	r0, [r3, #0]
 8003a34:	6813      	ldr	r3, [r2, #0]
 8003a36:	d0f6      	beq.n	8003a26 <_printf_i+0x1a6>
 8003a38:	8019      	strh	r1, [r3, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	4675      	mov	r5, lr
 8003a40:	e7b1      	b.n	80039a6 <_printf_i+0x126>
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	1d11      	adds	r1, r2, #4
 8003a46:	6019      	str	r1, [r3, #0]
 8003a48:	6815      	ldr	r5, [r2, #0]
 8003a4a:	6862      	ldr	r2, [r4, #4]
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f7fc fbce 	bl	80001f0 <memchr>
 8003a54:	b108      	cbz	r0, 8003a5a <_printf_i+0x1da>
 8003a56:	1b40      	subs	r0, r0, r5
 8003a58:	6060      	str	r0, [r4, #4]
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	6123      	str	r3, [r4, #16]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a64:	e79f      	b.n	80039a6 <_printf_i+0x126>
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	462a      	mov	r2, r5
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	47c0      	blx	r8
 8003a70:	3001      	adds	r0, #1
 8003a72:	d0a2      	beq.n	80039ba <_printf_i+0x13a>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	079b      	lsls	r3, r3, #30
 8003a78:	d507      	bpl.n	8003a8a <_printf_i+0x20a>
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	f104 0919 	add.w	r9, r4, #25
 8003a80:	68e3      	ldr	r3, [r4, #12]
 8003a82:	9a03      	ldr	r2, [sp, #12]
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	429d      	cmp	r5, r3
 8003a88:	db05      	blt.n	8003a96 <_printf_i+0x216>
 8003a8a:	68e0      	ldr	r0, [r4, #12]
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	4298      	cmp	r0, r3
 8003a90:	bfb8      	it	lt
 8003a92:	4618      	movlt	r0, r3
 8003a94:	e793      	b.n	80039be <_printf_i+0x13e>
 8003a96:	2301      	movs	r3, #1
 8003a98:	464a      	mov	r2, r9
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	47c0      	blx	r8
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d08a      	beq.n	80039ba <_printf_i+0x13a>
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	e7eb      	b.n	8003a80 <_printf_i+0x200>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1a7      	bne.n	80039fc <_printf_i+0x17c>
 8003aac:	780b      	ldrb	r3, [r1, #0]
 8003aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab6:	e765      	b.n	8003984 <_printf_i+0x104>
 8003ab8:	08003c15 	.word	0x08003c15
 8003abc:	08003c04 	.word	0x08003c04

08003ac0 <memcpy>:
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	1e43      	subs	r3, r0, #1
 8003ac4:	440a      	add	r2, r1
 8003ac6:	4291      	cmp	r1, r2
 8003ac8:	d100      	bne.n	8003acc <memcpy+0xc>
 8003aca:	bd10      	pop	{r4, pc}
 8003acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad4:	e7f7      	b.n	8003ac6 <memcpy+0x6>

08003ad6 <memmove>:
 8003ad6:	4288      	cmp	r0, r1
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	eb01 0302 	add.w	r3, r1, r2
 8003ade:	d803      	bhi.n	8003ae8 <memmove+0x12>
 8003ae0:	1e42      	subs	r2, r0, #1
 8003ae2:	4299      	cmp	r1, r3
 8003ae4:	d10c      	bne.n	8003b00 <memmove+0x2a>
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	d2f9      	bcs.n	8003ae0 <memmove+0xa>
 8003aec:	1881      	adds	r1, r0, r2
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	42d3      	cmn	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memmove+0x20>
 8003af4:	bd10      	pop	{r4, pc}
 8003af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003afa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003afe:	e7f7      	b.n	8003af0 <memmove+0x1a>
 8003b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b08:	e7eb      	b.n	8003ae2 <memmove+0xc>

08003b0a <_realloc_r>:
 8003b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0c:	4607      	mov	r7, r0
 8003b0e:	4614      	mov	r4, r2
 8003b10:	460e      	mov	r6, r1
 8003b12:	b921      	cbnz	r1, 8003b1e <_realloc_r+0x14>
 8003b14:	4611      	mov	r1, r2
 8003b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b1a:	f7ff bc4f 	b.w	80033bc <_malloc_r>
 8003b1e:	b922      	cbnz	r2, 8003b2a <_realloc_r+0x20>
 8003b20:	f7ff fbfe 	bl	8003320 <_free_r>
 8003b24:	4625      	mov	r5, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2a:	f000 f814 	bl	8003b56 <_malloc_usable_size_r>
 8003b2e:	4284      	cmp	r4, r0
 8003b30:	d90f      	bls.n	8003b52 <_realloc_r+0x48>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4638      	mov	r0, r7
 8003b36:	f7ff fc41 	bl	80033bc <_malloc_r>
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d0f2      	beq.n	8003b26 <_realloc_r+0x1c>
 8003b40:	4631      	mov	r1, r6
 8003b42:	4622      	mov	r2, r4
 8003b44:	f7ff ffbc 	bl	8003ac0 <memcpy>
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f7ff fbe8 	bl	8003320 <_free_r>
 8003b50:	e7e9      	b.n	8003b26 <_realloc_r+0x1c>
 8003b52:	4635      	mov	r5, r6
 8003b54:	e7e7      	b.n	8003b26 <_realloc_r+0x1c>

08003b56 <_malloc_usable_size_r>:
 8003b56:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f1a0 0004 	sub.w	r0, r0, #4
 8003b60:	bfbc      	itt	lt
 8003b62:	580b      	ldrlt	r3, [r1, r0]
 8003b64:	18c0      	addlt	r0, r0, r3
 8003b66:	4770      	bx	lr

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
