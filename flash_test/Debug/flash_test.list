
flash_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08003ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00004118  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000418c  2000418c  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001852b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003757  00000000  00000000  000385cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a849  00000000  00000000  0003bd26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00046570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  00047558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007c93  00000000  00000000  00048878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000060c1  00000000  00000000  0005050b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000565cc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003684  00000000  00000000  00056648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b38 	.word	0x08003b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003b38 	.word	0x08003b38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x30>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f81b 	bl	80005e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f002 f9d4 	bl	8002960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f002 f916 	bl	80027e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd08      	pop	{r3, pc}
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x10>)
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_IncTick+0x14>)
 80005c8:	6811      	ldr	r1, [r2, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	440b      	add	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20004038 	.word	0x20004038
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <HAL_GetTick+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20004038 	.word	0x20004038

080005e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	0c1b      	lsrs	r3, r3, #16
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	0200      	lsls	r0, r0, #8
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000602:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000604:	60d3      	str	r3, [r2, #12]
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	68dc      	ldr	r4, [r3, #12]
 8000612:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000616:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061c:	2b04      	cmp	r3, #4
 800061e:	bf28      	it	cs
 8000620:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 0501 	mov.w	r5, #1
 8000628:	fa05 f303 	lsl.w	r3, r5, r3
 800062c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	4019      	ands	r1, r3
 8000638:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063a:	fa05 f404 	lsl.w	r4, r5, r4
 800063e:	3c01      	subs	r4, #1
 8000640:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000642:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	ea42 0201 	orr.w	r2, r2, r1
 8000648:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	bfad      	iteet	ge
 800064e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	f000 000f 	andlt.w	r0, r0, #15
 8000656:	4b06      	ldrlt	r3, [pc, #24]	; (8000670 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfb5      	itete	lt
 800065e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	e000ed14 	.word	0xe000ed14

08000674 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000674:	2800      	cmp	r0, #0
 8000676:	db08      	blt.n	800068a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000678:	0942      	lsrs	r2, r0, #5
 800067a:	2301      	movs	r3, #1
 800067c:	f000 001f 	and.w	r0, r0, #31
 8000680:	fa03 f000 	lsl.w	r0, r3, r0
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <HAL_NVIC_EnableIRQ+0x18>)
 8000686:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000690:	4909      	ldr	r1, [pc, #36]	; (80006b8 <FLASH_Program_DoubleWord+0x28>)
{
 8000692:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000694:	690c      	ldr	r4, [r1, #16]
 8000696:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800069a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800069c:	690c      	ldr	r4, [r1, #16]
 800069e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80006a2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006a4:	690c      	ldr	r4, [r1, #16]
 80006a6:	f044 0401 	orr.w	r4, r4, #1
 80006aa:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80006ac:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80006ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80006b2:	6043      	str	r3, [r0, #4]
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	bf00      	nop
 80006b8:	40023c00 	.word	0x40023c00

080006bc <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <FLASH_Program_Word+0x20>)
 80006be:	691a      	ldr	r2, [r3, #16]
 80006c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006ce:	691a      	ldr	r2, [r3, #16]
 80006d0:	f042 0201 	orr.w	r2, r2, #1
 80006d4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80006d6:	6001      	str	r1, [r0, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <FLASH_Program_HalfWord+0x20>)
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	f042 0201 	orr.w	r2, r2, #1
 80006f8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80006fa:	8001      	strh	r1, [r0, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023c00 	.word	0x40023c00

08000704 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <FLASH_SetErrorCode+0x84>)
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	06d0      	lsls	r0, r2, #27
 800070a:	d506      	bpl.n	800071a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800070c:	491f      	ldr	r1, [pc, #124]	; (800078c <FLASH_SetErrorCode+0x88>)
 800070e:	69ca      	ldr	r2, [r1, #28]
 8000710:	f042 0210 	orr.w	r2, r2, #16
 8000714:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000716:	2210      	movs	r2, #16
 8000718:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800071a:	68da      	ldr	r2, [r3, #12]
 800071c:	0691      	lsls	r1, r2, #26
 800071e:	d506      	bpl.n	800072e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000720:	491a      	ldr	r1, [pc, #104]	; (800078c <FLASH_SetErrorCode+0x88>)
 8000722:	69ca      	ldr	r2, [r1, #28]
 8000724:	f042 0208 	orr.w	r2, r2, #8
 8000728:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800072a:	2220      	movs	r2, #32
 800072c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <FLASH_SetErrorCode+0x84>)
 8000730:	68da      	ldr	r2, [r3, #12]
 8000732:	0652      	lsls	r2, r2, #25
 8000734:	d506      	bpl.n	8000744 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000736:	4915      	ldr	r1, [pc, #84]	; (800078c <FLASH_SetErrorCode+0x88>)
 8000738:	69ca      	ldr	r2, [r1, #28]
 800073a:	f042 0204 	orr.w	r2, r2, #4
 800073e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	0610      	lsls	r0, r2, #24
 8000748:	d506      	bpl.n	8000758 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800074a:	4910      	ldr	r1, [pc, #64]	; (800078c <FLASH_SetErrorCode+0x88>)
 800074c:	69ca      	ldr	r2, [r1, #28]
 800074e:	f042 0202 	orr.w	r2, r2, #2
 8000752:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <FLASH_SetErrorCode+0x84>)
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	05d1      	lsls	r1, r2, #23
 800075e:	d507      	bpl.n	8000770 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000760:	490a      	ldr	r1, [pc, #40]	; (800078c <FLASH_SetErrorCode+0x88>)
 8000762:	69ca      	ldr	r2, [r1, #28]
 8000764:	f042 0201 	orr.w	r2, r2, #1
 8000768:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800076a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000770:	68da      	ldr	r2, [r3, #12]
 8000772:	0792      	lsls	r2, r2, #30
 8000774:	d506      	bpl.n	8000784 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000776:	4905      	ldr	r1, [pc, #20]	; (800078c <FLASH_SetErrorCode+0x88>)
 8000778:	69ca      	ldr	r2, [r1, #28]
 800077a:	f042 0220 	orr.w	r2, r2, #32
 800077e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000780:	2202      	movs	r2, #2
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023c00 	.word	0x40023c00
 800078c:	2000403c 	.word	0x2000403c

08000790 <FLASH_WaitForLastOperation>:
{ 
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000794:	4c12      	ldr	r4, [pc, #72]	; (80007e0 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000796:	2200      	movs	r2, #0
{ 
 8000798:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800079a:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800079c:	f7ff ff1e 	bl	80005dc <HAL_GetTick>
 80007a0:	4626      	mov	r6, r4
 80007a2:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80007a4:	68e3      	ldr	r3, [r4, #12]
 80007a6:	03da      	lsls	r2, r3, #15
 80007a8:	d40c      	bmi.n	80007c4 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80007aa:	68e3      	ldr	r3, [r4, #12]
 80007ac:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80007ae:	bf44      	itt	mi
 80007b0:	2301      	movmi	r3, #1
 80007b2:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80007b4:	68f0      	ldr	r0, [r6, #12]
 80007b6:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 80007ba:	d002      	beq.n	80007c2 <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 80007bc:	f7ff ffa2 	bl	8000704 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
}  
 80007c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80007c4:	1c69      	adds	r1, r5, #1
 80007c6:	d0ed      	beq.n	80007a4 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80007c8:	b90d      	cbnz	r5, 80007ce <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 80007ca:	2003      	movs	r0, #3
 80007cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80007ce:	f7ff ff05 	bl	80005dc <HAL_GetTick>
 80007d2:	1bc0      	subs	r0, r0, r7
 80007d4:	4285      	cmp	r5, r0
 80007d6:	d2e5      	bcs.n	80007a4 <FLASH_WaitForLastOperation+0x14>
 80007d8:	e7f7      	b.n	80007ca <FLASH_WaitForLastOperation+0x3a>
 80007da:	bf00      	nop
 80007dc:	2000403c 	.word	0x2000403c
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_FLASH_Program>:
{
 80007e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80007e8:	4d20      	ldr	r5, [pc, #128]	; (800086c <HAL_FLASH_Program+0x88>)
{
 80007ea:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80007ec:	7e2b      	ldrb	r3, [r5, #24]
 80007ee:	2b01      	cmp	r3, #1
{
 80007f0:	4607      	mov	r7, r0
 80007f2:	460e      	mov	r6, r1
 80007f4:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80007f6:	d035      	beq.n	8000864 <HAL_FLASH_Program+0x80>
 80007f8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007fa:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80007fe:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000800:	f7ff ffc6 	bl	8000790 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000804:	b9b0      	cbnz	r0, 8000834 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000806:	b9cf      	cbnz	r7, 800083c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_FLASH_Program+0x8c>)
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000810:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000812:	691a      	ldr	r2, [r3, #16]
 8000814:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000816:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000818:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800081a:	f042 0201 	orr.w	r2, r2, #1
 800081e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000820:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000822:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000826:	f7ff ffb3 	bl	8000790 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_FLASH_Program+0x8c>)
 800082c:	6913      	ldr	r3, [r2, #16]
 800082e:	f023 0301 	bic.w	r3, r3, #1
 8000832:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000834:	2300      	movs	r3, #0
 8000836:	762b      	strb	r3, [r5, #24]
  return status;
 8000838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800083c:	2f01      	cmp	r7, #1
 800083e:	d104      	bne.n	800084a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000840:	b2a1      	uxth	r1, r4
 8000842:	4630      	mov	r0, r6
 8000844:	f7ff ff4c 	bl	80006e0 <FLASH_Program_HalfWord>
 8000848:	e7eb      	b.n	8000822 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800084a:	2f02      	cmp	r7, #2
 800084c:	d104      	bne.n	8000858 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800084e:	4621      	mov	r1, r4
 8000850:	4630      	mov	r0, r6
 8000852:	f7ff ff33 	bl	80006bc <FLASH_Program_Word>
 8000856:	e7e4      	b.n	8000822 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000858:	4622      	mov	r2, r4
 800085a:	4643      	mov	r3, r8
 800085c:	4630      	mov	r0, r6
 800085e:	f7ff ff17 	bl	8000690 <FLASH_Program_DoubleWord>
 8000862:	e7de      	b.n	8000822 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000864:	2002      	movs	r0, #2
}
 8000866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086a:	bf00      	nop
 800086c:	2000403c 	.word	0x2000403c
 8000870:	40023c00 	.word	0x40023c00

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000878:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000a0c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000880:	4a60      	ldr	r2, [pc, #384]	; (8000a04 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000882:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000884:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000888:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800088c:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000890:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000892:	42ac      	cmp	r4, r5
 8000894:	f040 80a6 	bne.w	80009e4 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000898:	684c      	ldr	r4, [r1, #4]
 800089a:	f024 0c10 	bic.w	ip, r4, #16
 800089e:	f10c 36ff 	add.w	r6, ip, #4294967295
 80008a2:	2e01      	cmp	r6, #1
 80008a4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008a8:	d812      	bhi.n	80008d0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80008aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ac:	2603      	movs	r6, #3
 80008ae:	fa06 f60e 	lsl.w	r6, r6, lr
 80008b2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008b6:	68ce      	ldr	r6, [r1, #12]
 80008b8:	fa06 f60e 	lsl.w	r6, r6, lr
 80008bc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80008be:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008c0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ca:	409e      	lsls	r6, r3
 80008cc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80008ce:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80008d2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d4:	fa06 f60e 	lsl.w	r6, r6, lr
 80008d8:	43f6      	mvns	r6, r6
 80008da:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008de:	688f      	ldr	r7, [r1, #8]
 80008e0:	fa07 f70e 	lsl.w	r7, r7, lr
 80008e4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80008ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	d116      	bne.n	800091e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80008f0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80008f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80008fc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000900:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000904:	f04f 0c0f 	mov.w	ip, #15
 8000908:	fa0c fc0b 	lsl.w	ip, ip, fp
 800090c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000910:	690f      	ldr	r7, [r1, #16]
 8000912:	fa07 f70b 	lsl.w	r7, r7, fp
 8000916:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800091a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800091e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000920:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000922:	f004 0703 	and.w	r7, r4, #3
 8000926:	fa07 fe0e 	lsl.w	lr, r7, lr
 800092a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800092e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000930:	00e6      	lsls	r6, r4, #3
 8000932:	d557      	bpl.n	80009e4 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000934:	f04f 0b00 	mov.w	fp, #0
 8000938:	f8cd b00c 	str.w	fp, [sp, #12]
 800093c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000940:	4e31      	ldr	r6, [pc, #196]	; (8000a08 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000946:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800094a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800094e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000952:	9703      	str	r7, [sp, #12]
 8000954:	9f03      	ldr	r7, [sp, #12]
 8000956:	f023 0703 	bic.w	r7, r3, #3
 800095a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800095e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000962:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000966:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800096a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800096e:	f04f 0e0f 	mov.w	lr, #15
 8000972:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000976:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000978:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097c:	d039      	beq.n	80009f2 <HAL_GPIO_Init+0x17e>
 800097e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000982:	42b0      	cmp	r0, r6
 8000984:	d037      	beq.n	80009f6 <HAL_GPIO_Init+0x182>
 8000986:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800098a:	42b0      	cmp	r0, r6
 800098c:	d035      	beq.n	80009fa <HAL_GPIO_Init+0x186>
 800098e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000992:	42b0      	cmp	r0, r6
 8000994:	d033      	beq.n	80009fe <HAL_GPIO_Init+0x18a>
 8000996:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800099a:	42b0      	cmp	r0, r6
 800099c:	bf14      	ite	ne
 800099e:	2607      	movne	r6, #7
 80009a0:	2604      	moveq	r6, #4
 80009a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80009a6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009aa:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80009ac:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009ae:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80009b4:	bf0c      	ite	eq
 80009b6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80009b8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80009ba:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80009bc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009be:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80009c2:	bf0c      	ite	eq
 80009c4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80009c6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80009c8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009ca:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009cc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80009d0:	bf0c      	ite	eq
 80009d2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80009d4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80009d6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80009d8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009da:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80009dc:	bf54      	ite	pl
 80009de:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80009e0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80009e2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009e4:	3301      	adds	r3, #1
 80009e6:	2b10      	cmp	r3, #16
 80009e8:	f47f af4f 	bne.w	800088a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80009ec:	b005      	add	sp, #20
 80009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f2:	465e      	mov	r6, fp
 80009f4:	e7d5      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
 80009f6:	2601      	movs	r6, #1
 80009f8:	e7d3      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
 80009fa:	2602      	movs	r6, #2
 80009fc:	e7d1      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
 80009fe:	2603      	movs	r6, #3
 8000a00:	e7cf      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
 8000a02:	bf00      	nop
 8000a04:	40013c00 	.word	0x40013c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a10:	b10a      	cbz	r2, 8000a16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a12:	6181      	str	r1, [r0, #24]
 8000a14:	4770      	bx	lr
 8000a16:	0409      	lsls	r1, r1, #16
 8000a18:	e7fb      	b.n	8000a12 <HAL_GPIO_WritePin+0x2>
	...

08000a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a20:	4604      	mov	r4, r0
 8000a22:	b908      	cbnz	r0, 8000a28 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	e03f      	b.n	8000aa8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	07dd      	lsls	r5, r3, #31
 8000a2c:	d410      	bmi.n	8000a50 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2e:	6823      	ldr	r3, [r4, #0]
 8000a30:	0798      	lsls	r0, r3, #30
 8000a32:	d45a      	bmi.n	8000aea <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	071a      	lsls	r2, r3, #28
 8000a38:	f100 809c 	bmi.w	8000b74 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	075b      	lsls	r3, r3, #29
 8000a40:	f100 80ba 	bmi.w	8000bb8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a44:	69a0      	ldr	r0, [r4, #24]
 8000a46:	2800      	cmp	r0, #0
 8000a48:	f040 811b 	bne.w	8000c82 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e02b      	b.n	8000aa8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a50:	4ba4      	ldr	r3, [pc, #656]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	f002 020c 	and.w	r2, r2, #12
 8000a58:	2a04      	cmp	r2, #4
 8000a5a:	d007      	beq.n	8000a6c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a62:	2a08      	cmp	r2, #8
 8000a64:	d10a      	bne.n	8000a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	0259      	lsls	r1, r3, #9
 8000a6a:	d507      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6c:	4b9d      	ldr	r3, [pc, #628]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	039a      	lsls	r2, r3, #14
 8000a72:	d5dc      	bpl.n	8000a2e <HAL_RCC_OscConfig+0x12>
 8000a74:	6863      	ldr	r3, [r4, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1d9      	bne.n	8000a2e <HAL_RCC_OscConfig+0x12>
 8000a7a:	e7d3      	b.n	8000a24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	4d99      	ldr	r5, [pc, #612]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a84:	d113      	bne.n	8000aae <HAL_RCC_OscConfig+0x92>
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a8e:	f7ff fda5 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a92:	4d94      	ldr	r5, [pc, #592]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	039b      	lsls	r3, r3, #14
 8000a9a:	d4c8      	bmi.n	8000a2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a9c:	f7ff fd9e 	bl	80005dc <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2864      	cmp	r0, #100	; 0x64
 8000aa4:	d9f7      	bls.n	8000a96 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000aa6:	2003      	movs	r0, #3
}
 8000aa8:	b002      	add	sp, #8
 8000aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab2:	d104      	bne.n	8000abe <HAL_RCC_OscConfig+0xa2>
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aba:	602b      	str	r3, [r5, #0]
 8000abc:	e7e3      	b.n	8000a86 <HAL_RCC_OscConfig+0x6a>
 8000abe:	682a      	ldr	r2, [r5, #0]
 8000ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ac4:	602a      	str	r2, [r5, #0]
 8000ac6:	682a      	ldr	r2, [r5, #0]
 8000ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000acc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1dd      	bne.n	8000a8e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fd83 	bl	80005dc <HAL_GetTick>
 8000ad6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	039f      	lsls	r7, r3, #14
 8000adc:	d5a7      	bpl.n	8000a2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd7d 	bl	80005dc <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	2864      	cmp	r0, #100	; 0x64
 8000ae6:	d9f7      	bls.n	8000ad8 <HAL_RCC_OscConfig+0xbc>
 8000ae8:	e7dd      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000aea:	4b7e      	ldr	r3, [pc, #504]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	f012 0f0c 	tst.w	r2, #12
 8000af2:	d007      	beq.n	8000b04 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000afa:	2a08      	cmp	r2, #8
 8000afc:	d111      	bne.n	8000b22 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	025e      	lsls	r6, r3, #9
 8000b02:	d40e      	bmi.n	8000b22 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b04:	4b77      	ldr	r3, [pc, #476]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	0795      	lsls	r5, r2, #30
 8000b0a:	d502      	bpl.n	8000b12 <HAL_RCC_OscConfig+0xf6>
 8000b0c:	68e2      	ldr	r2, [r4, #12]
 8000b0e:	2a01      	cmp	r2, #1
 8000b10:	d188      	bne.n	8000a24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6921      	ldr	r1, [r4, #16]
 8000b16:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b1a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b20:	e788      	b.n	8000a34 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b22:	68e2      	ldr	r2, [r4, #12]
 8000b24:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <HAL_RCC_OscConfig+0x2cc>)
 8000b26:	b1b2      	cbz	r2, 8000b56 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fd56 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b30:	4d6c      	ldr	r5, [pc, #432]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	0798      	lsls	r0, r3, #30
 8000b38:	d507      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	6922      	ldr	r2, [r4, #16]
 8000b3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b46:	602b      	str	r3, [r5, #0]
 8000b48:	e774      	b.n	8000a34 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b4a:	f7ff fd47 	bl	80005dc <HAL_GetTick>
 8000b4e:	1b80      	subs	r0, r0, r6
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9ef      	bls.n	8000b34 <HAL_RCC_OscConfig+0x118>
 8000b54:	e7a7      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000b56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b58:	f7ff fd40 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b5c:	4d61      	ldr	r5, [pc, #388]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	0799      	lsls	r1, r3, #30
 8000b64:	f57f af66 	bpl.w	8000a34 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b68:	f7ff fd38 	bl	80005dc <HAL_GetTick>
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9f6      	bls.n	8000b60 <HAL_RCC_OscConfig+0x144>
 8000b72:	e798      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b74:	6962      	ldr	r2, [r4, #20]
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <HAL_RCC_OscConfig+0x2d0>)
 8000b78:	b17a      	cbz	r2, 8000b9a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fd2d 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b82:	4d58      	ldr	r5, [pc, #352]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000b84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b88:	079f      	lsls	r7, r3, #30
 8000b8a:	f53f af57 	bmi.w	8000a3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b8e:	f7ff fd25 	bl	80005dc <HAL_GetTick>
 8000b92:	1b80      	subs	r0, r0, r6
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x16a>
 8000b98:	e785      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000b9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b9c:	f7ff fd1e 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba0:	4d50      	ldr	r5, [pc, #320]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ba2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ba6:	0798      	lsls	r0, r3, #30
 8000ba8:	f57f af48 	bpl.w	8000a3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bac:	f7ff fd16 	bl	80005dc <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x188>
 8000bb6:	e776      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb8:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bbc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000bc0:	d128      	bne.n	8000c14 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	9201      	str	r2, [sp, #4]
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bd6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bd8:	4d45      	ldr	r5, [pc, #276]	; (8000cf0 <HAL_RCC_OscConfig+0x2d4>)
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	05d9      	lsls	r1, r3, #23
 8000bde:	d51b      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000be0:	68a3      	ldr	r3, [r4, #8]
 8000be2:	4d40      	ldr	r5, [pc, #256]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d127      	bne.n	8000c38 <HAL_RCC_OscConfig+0x21c>
 8000be8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fcf4 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bf4:	4d3b      	ldr	r5, [pc, #236]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000bf6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bfe:	079b      	lsls	r3, r3, #30
 8000c00:	d539      	bpl.n	8000c76 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f43f af1e 	beq.w	8000a44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c08:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000c0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	e717      	b.n	8000a44 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c14:	2600      	movs	r6, #0
 8000c16:	e7df      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c20:	f7ff fcdc 	bl	80005dc <HAL_GetTick>
 8000c24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	05da      	lsls	r2, r3, #23
 8000c2a:	d4d9      	bmi.n	8000be0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c2c:	f7ff fcd6 	bl	80005dc <HAL_GetTick>
 8000c30:	1bc0      	subs	r0, r0, r7
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f7      	bls.n	8000c26 <HAL_RCC_OscConfig+0x20a>
 8000c36:	e736      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d104      	bne.n	8000c46 <HAL_RCC_OscConfig+0x22a>
 8000c3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	672b      	str	r3, [r5, #112]	; 0x70
 8000c44:	e7d0      	b.n	8000be8 <HAL_RCC_OscConfig+0x1cc>
 8000c46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c48:	f022 0201 	bic.w	r2, r2, #1
 8000c4c:	672a      	str	r2, [r5, #112]	; 0x70
 8000c4e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c50:	f022 0204 	bic.w	r2, r2, #4
 8000c54:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1ca      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fcbf 	bl	80005dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c66:	0798      	lsls	r0, r3, #30
 8000c68:	d5cb      	bpl.n	8000c02 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c6a:	f7ff fcb7 	bl	80005dc <HAL_GetTick>
 8000c6e:	1bc0      	subs	r0, r0, r7
 8000c70:	4540      	cmp	r0, r8
 8000c72:	d9f7      	bls.n	8000c64 <HAL_RCC_OscConfig+0x248>
 8000c74:	e717      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c76:	f7ff fcb1 	bl	80005dc <HAL_GetTick>
 8000c7a:	1bc0      	subs	r0, r0, r7
 8000c7c:	4540      	cmp	r0, r8
 8000c7e:	d9bd      	bls.n	8000bfc <HAL_RCC_OscConfig+0x1e0>
 8000c80:	e711      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c82:	4d18      	ldr	r5, [pc, #96]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
 8000c84:	68ab      	ldr	r3, [r5, #8]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	d047      	beq.n	8000d1e <HAL_RCC_OscConfig+0x302>
 8000c8e:	4e19      	ldr	r6, [pc, #100]	; (8000cf4 <HAL_RCC_OscConfig+0x2d8>)
 8000c90:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c92:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c94:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c96:	d135      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000c98:	f7ff fca0 	bl	80005dc <HAL_GetTick>
 8000c9c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	0199      	lsls	r1, r3, #6
 8000ca2:	d429      	bmi.n	8000cf8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ca4:	6a22      	ldr	r2, [r4, #32]
 8000ca6:	69e3      	ldr	r3, [r4, #28]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cba:	0852      	lsrs	r2, r2, #1
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc88 	bl	80005dc <HAL_GetTick>
 8000ccc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	019a      	lsls	r2, r3, #6
 8000cd2:	f53f aebb 	bmi.w	8000a4c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd6:	f7ff fc81 	bl	80005dc <HAL_GetTick>
 8000cda:	1b40      	subs	r0, r0, r5
 8000cdc:	2802      	cmp	r0, #2
 8000cde:	d9f6      	bls.n	8000cce <HAL_RCC_OscConfig+0x2b2>
 8000ce0:	e6e1      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470000 	.word	0x42470000
 8000cec:	42470e80 	.word	0x42470e80
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fc70 	bl	80005dc <HAL_GetTick>
 8000cfc:	1bc0      	subs	r0, r0, r7
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9cd      	bls.n	8000c9e <HAL_RCC_OscConfig+0x282>
 8000d02:	e6d0      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc6a 	bl	80005dc <HAL_GetTick>
 8000d08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d0a:	682b      	ldr	r3, [r5, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	f57f ae9d 	bpl.w	8000a4c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d12:	f7ff fc63 	bl	80005dc <HAL_GetTick>
 8000d16:	1b00      	subs	r0, r0, r4
 8000d18:	2802      	cmp	r0, #2
 8000d1a:	d9f6      	bls.n	8000d0a <HAL_RCC_OscConfig+0x2ee>
 8000d1c:	e6c3      	b.n	8000aa6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d1e:	2801      	cmp	r0, #1
 8000d20:	f43f aec2 	beq.w	8000aa8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000d24:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d26:	69e3      	ldr	r3, [r4, #28]
 8000d28:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f47f ae79 	bne.w	8000a24 <HAL_RCC_OscConfig+0x8>
 8000d32:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d34:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	f47f ae73 	bne.w	8000a24 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d44:	4003      	ands	r3, r0
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f47f ae6c 	bne.w	8000a24 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000d4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d4e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000d52:	4293      	cmp	r3, r2
 8000d54:	f47f ae66 	bne.w	8000a24 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000d5a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000d5e:	1ac0      	subs	r0, r0, r3
 8000d60:	bf18      	it	ne
 8000d62:	2001      	movne	r0, #1
 8000d64:	e6a0      	b.n	8000aa8 <HAL_RCC_OscConfig+0x8c>
 8000d66:	bf00      	nop

08000d68 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d68:	4913      	ldr	r1, [pc, #76]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d6a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d6c:	688b      	ldr	r3, [r1, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d003      	beq.n	8000d7e <HAL_RCC_GetSysClockFreq+0x16>
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d003      	beq.n	8000d82 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d7a:	4810      	ldr	r0, [pc, #64]	; (8000dbc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d7c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d80:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d82:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d84:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d86:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d88:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d8c:	bf14      	ite	ne
 8000d8e:	480c      	ldrne	r0, [pc, #48]	; (8000dc0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d90:	480a      	ldreq	r0, [pc, #40]	; (8000dbc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d92:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d96:	bf18      	it	ne
 8000d98:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d9e:	fba1 0100 	umull	r0, r1, r1, r0
 8000da2:	f7ff fa6d 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000dae:	3301      	adds	r3, #1
 8000db0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000db2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000db6:	bd08      	pop	{r3, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	00f42400 	.word	0x00f42400
 8000dc0:	007a1200 	.word	0x007a1200

08000dc4 <HAL_RCC_ClockConfig>:
{
 8000dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b910      	cbnz	r0, 8000dd4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000dce:	2001      	movs	r0, #1
 8000dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_RCC_ClockConfig+0x124>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	f002 020f 	and.w	r2, r2, #15
 8000ddc:	428a      	cmp	r2, r1
 8000dde:	d329      	bcc.n	8000e34 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000de0:	6821      	ldr	r1, [r4, #0]
 8000de2:	078f      	lsls	r7, r1, #30
 8000de4:	d42e      	bmi.n	8000e44 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de6:	07c8      	lsls	r0, r1, #31
 8000de8:	d441      	bmi.n	8000e6e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <HAL_RCC_ClockConfig+0x124>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f002 020f 	and.w	r2, r2, #15
 8000df2:	4295      	cmp	r5, r2
 8000df4:	d367      	bcc.n	8000ec6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	0751      	lsls	r1, r2, #29
 8000dfa:	d46d      	bmi.n	8000ed8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfc:	0713      	lsls	r3, r2, #28
 8000dfe:	d507      	bpl.n	8000e10 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e00:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
 8000e02:	6921      	ldr	r1, [r4, #16]
 8000e04:	6893      	ldr	r3, [r2, #8]
 8000e06:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e10:	f7ff ffaa 	bl	8000d68 <HAL_RCC_GetSysClockFreq>
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
 8000e16:	4a36      	ldr	r2, [pc, #216]	; (8000ef0 <HAL_RCC_ClockConfig+0x12c>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	40d8      	lsrs	r0, r3
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_RCC_ClockConfig+0x134>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	f001 fd99 	bl	8002960 <HAL_InitTick>
  return HAL_OK;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e34:	b2ca      	uxtb	r2, r1
 8000e36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d1c5      	bne.n	8000dce <HAL_RCC_ClockConfig+0xa>
 8000e42:	e7cd      	b.n	8000de0 <HAL_RCC_ClockConfig+0x1c>
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e46:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e4a:	bf1e      	ittt	ne
 8000e4c:	689a      	ldrne	r2, [r3, #8]
 8000e4e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e52:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e54:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e56:	bf42      	ittt	mi
 8000e58:	689a      	ldrmi	r2, [r3, #8]
 8000e5a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e5e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	68a0      	ldr	r0, [r4, #8]
 8000e64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e68:	4302      	orrs	r2, r0
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	e7bb      	b.n	8000de6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6e:	6862      	ldr	r2, [r4, #4]
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d11d      	bne.n	8000eb2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	d0a7      	beq.n	8000dce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e7e:	4e1b      	ldr	r6, [pc, #108]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
 8000e80:	68b3      	ldr	r3, [r6, #8]
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e8a:	f7ff fba7 	bl	80005dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e92:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e94:	68b3      	ldr	r3, [r6, #8]
 8000e96:	6862      	ldr	r2, [r4, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ea0:	d0a3      	beq.n	8000dea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea2:	f7ff fb9b 	bl	80005dc <HAL_GetTick>
 8000ea6:	1bc0      	subs	r0, r0, r7
 8000ea8:	4540      	cmp	r0, r8
 8000eaa:	d9f3      	bls.n	8000e94 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000eac:	2003      	movs	r0, #3
}
 8000eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eb2:	1e91      	subs	r1, r2, #2
 8000eb4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ebe:	e7dd      	b.n	8000e7c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec0:	f013 0f02 	tst.w	r3, #2
 8000ec4:	e7da      	b.n	8000e7c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec6:	b2ea      	uxtb	r2, r5
 8000ec8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	429d      	cmp	r5, r3
 8000ed2:	f47f af7c 	bne.w	8000dce <HAL_RCC_ClockConfig+0xa>
 8000ed6:	e78e      	b.n	8000df6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <HAL_RCC_ClockConfig+0x128>)
 8000eda:	68e0      	ldr	r0, [r4, #12]
 8000edc:	688b      	ldr	r3, [r1, #8]
 8000ede:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	608b      	str	r3, [r1, #8]
 8000ee6:	e789      	b.n	8000dfc <HAL_RCC_ClockConfig+0x38>
 8000ee8:	40023c00 	.word	0x40023c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	08003c1e 	.word	0x08003c1e
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f0a:	6810      	ldr	r0, [r2, #0]
}
 8000f0c:	40d8      	lsrs	r0, r3
 8000f0e:	4770      	bx	lr
 8000f10:	40023800 	.word	0x40023800
 8000f14:	08003c2e 	.word	0x08003c2e
 8000f18:	2000000c 	.word	0x2000000c

08000f1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f2a:	6810      	ldr	r0, [r2, #0]
}
 8000f2c:	40d8      	lsrs	r0, r3
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800
 8000f34:	08003c2e 	.word	0x08003c2e
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_RCC_GetClockConfig+0x34>)
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000f50:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000f58:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f62:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_RCC_GetClockConfig+0x38>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	600b      	str	r3, [r1, #0]
 8000f6e:	4770      	bx	lr
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000f78:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d036      	beq.n	8000fee <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f84:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f8c:	b91b      	cbnz	r3, 8000f96 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f8e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f92:	f001 fc4b 	bl	800282c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f96:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f98:	68a0      	ldr	r0, [r4, #8]
 8000f9a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000fa2:	680b      	ldr	r3, [r1, #0]
 8000fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fa8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	4303      	orrs	r3, r0
 8000fae:	68e0      	ldr	r0, [r4, #12]
 8000fb0:	4303      	orrs	r3, r0
 8000fb2:	6920      	ldr	r0, [r4, #16]
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	6960      	ldr	r0, [r4, #20]
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	69e0      	ldr	r0, [r4, #28]
 8000fbc:	4303      	orrs	r3, r0
 8000fbe:	6a20      	ldr	r0, [r4, #32]
 8000fc0:	4303      	orrs	r3, r0
 8000fc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fc4:	4303      	orrs	r3, r0
 8000fc6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000fca:	4303      	orrs	r3, r0
 8000fcc:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000fce:	0c12      	lsrs	r2, r2, #16
 8000fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd2:	f002 0204 	and.w	r2, r2, #4
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fda:	69cb      	ldr	r3, [r1, #28]
 8000fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fe0:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fe2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000fe4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fe6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fe8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000fec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
}
 8000ff0:	bd10      	pop	{r4, pc}

08000ff2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001002:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001004:	bf1e      	ittt	ne
 8001006:	681a      	ldrne	r2, [r3, #0]
 8001008:	f042 0201 	orrne.w	r2, r2, #1
 800100c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800100e:	2000      	movs	r0, #0
 8001010:	4770      	bx	lr

08001012 <HAL_TIM_OC_DelayElapsedCallback>:
 8001012:	4770      	bx	lr

08001014 <HAL_TIM_IC_CaptureCallback>:
 8001014:	4770      	bx	lr

08001016 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001016:	4770      	bx	lr

08001018 <HAL_TIM_TriggerCallback>:
 8001018:	4770      	bx	lr

0800101a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800101a:	6803      	ldr	r3, [r0, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	0791      	lsls	r1, r2, #30
{
 8001020:	b510      	push	{r4, lr}
 8001022:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001024:	d50e      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	0792      	lsls	r2, r2, #30
 800102a:	d50b      	bpl.n	8001044 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800102c:	f06f 0202 	mvn.w	r2, #2
 8001030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001032:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001034:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001036:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001038:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800103a:	d077      	beq.n	800112c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800103c:	f7ff ffea 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001040:	2300      	movs	r3, #0
 8001042:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	0750      	lsls	r0, r2, #29
 800104a:	d510      	bpl.n	800106e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	0751      	lsls	r1, r2, #29
 8001050:	d50d      	bpl.n	800106e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001052:	f06f 0204 	mvn.w	r2, #4
 8001056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001058:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800105a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800105c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001060:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001062:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001064:	d068      	beq.n	8001138 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001066:	f7ff ffd5 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800106a:	2300      	movs	r3, #0
 800106c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	0712      	lsls	r2, r2, #28
 8001074:	d50f      	bpl.n	8001096 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	0710      	lsls	r0, r2, #28
 800107a:	d50c      	bpl.n	8001096 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800107c:	f06f 0208 	mvn.w	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001082:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001084:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001086:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001088:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800108a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800108c:	d05a      	beq.n	8001144 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800108e:	f7ff ffc1 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001092:	2300      	movs	r3, #0
 8001094:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	06d2      	lsls	r2, r2, #27
 800109c:	d510      	bpl.n	80010c0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	06d0      	lsls	r0, r2, #27
 80010a2:	d50d      	bpl.n	80010c0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010a4:	f06f 0210 	mvn.w	r2, #16
 80010a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010ac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010b2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010b6:	d04b      	beq.n	8001150 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80010b8:	f7ff ffac 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010bc:	2300      	movs	r3, #0
 80010be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	07d1      	lsls	r1, r2, #31
 80010c6:	d508      	bpl.n	80010da <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	07d2      	lsls	r2, r2, #31
 80010cc:	d505      	bpl.n	80010da <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010ce:	f06f 0201 	mvn.w	r2, #1
 80010d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f001 fb7f 	bl	80027d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	0610      	lsls	r0, r2, #24
 80010e0:	d508      	bpl.n	80010f4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	0611      	lsls	r1, r2, #24
 80010e6:	d505      	bpl.n	80010f4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80010ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80010ee:	4620      	mov	r0, r4
 80010f0:	f000 f977 	bl	80013e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	0652      	lsls	r2, r2, #25
 80010fa:	d508      	bpl.n	800110e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	0650      	lsls	r0, r2, #25
 8001100:	d505      	bpl.n	800110e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff ff85 	bl	8001018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	0691      	lsls	r1, r2, #26
 8001114:	d522      	bpl.n	800115c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	0692      	lsls	r2, r2, #26
 800111a:	d51f      	bpl.n	800115c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800111c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001120:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001122:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001128:	f000 b95a 	b.w	80013e0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800112c:	f7ff ff71 	bl	8001012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001130:	4620      	mov	r0, r4
 8001132:	f7ff ff70 	bl	8001016 <HAL_TIM_PWM_PulseFinishedCallback>
 8001136:	e783      	b.n	8001040 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001138:	f7ff ff6b 	bl	8001012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff6a 	bl	8001016 <HAL_TIM_PWM_PulseFinishedCallback>
 8001142:	e792      	b.n	800106a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001144:	f7ff ff65 	bl	8001012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff ff64 	bl	8001016 <HAL_TIM_PWM_PulseFinishedCallback>
 800114e:	e7a0      	b.n	8001092 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001150:	f7ff ff5f 	bl	8001012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ff5e 	bl	8001016 <HAL_TIM_PWM_PulseFinishedCallback>
 800115a:	e7af      	b.n	80010bc <HAL_TIM_IRQHandler+0xa2>
 800115c:	bd10      	pop	{r4, pc}
	...

08001160 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001160:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001162:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001164:	4290      	cmp	r0, r2
 8001166:	d00e      	beq.n	8001186 <TIM_Base_SetConfig+0x26>
 8001168:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800116c:	d00b      	beq.n	8001186 <TIM_Base_SetConfig+0x26>
 800116e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001172:	4290      	cmp	r0, r2
 8001174:	d007      	beq.n	8001186 <TIM_Base_SetConfig+0x26>
 8001176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800117a:	4290      	cmp	r0, r2
 800117c:	d003      	beq.n	8001186 <TIM_Base_SetConfig+0x26>
 800117e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001182:	4290      	cmp	r0, r2
 8001184:	d115      	bne.n	80011b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001186:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800118c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <TIM_Base_SetConfig+0x94>)
 8001190:	4290      	cmp	r0, r2
 8001192:	d019      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 8001194:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001198:	d016      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 800119a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800119e:	4290      	cmp	r0, r2
 80011a0:	d012      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 80011a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a6:	4290      	cmp	r0, r2
 80011a8:	d00e      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 80011aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ae:	4290      	cmp	r0, r2
 80011b0:	d00a      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <TIM_Base_SetConfig+0x98>)
 80011b4:	4290      	cmp	r0, r2
 80011b6:	d007      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 80011b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011bc:	4290      	cmp	r0, r2
 80011be:	d003      	beq.n	80011c8 <TIM_Base_SetConfig+0x68>
 80011c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c4:	4290      	cmp	r0, r2
 80011c6:	d103      	bne.n	80011d0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011ce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011d0:	694a      	ldr	r2, [r1, #20]
 80011d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011d6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011da:	688b      	ldr	r3, [r1, #8]
 80011dc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011de:	680b      	ldr	r3, [r1, #0]
 80011e0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <TIM_Base_SetConfig+0x94>)
 80011e4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011e6:	bf04      	itt	eq
 80011e8:	690b      	ldreq	r3, [r1, #16]
 80011ea:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011ec:	2301      	movs	r3, #1
 80011ee:	6143      	str	r3, [r0, #20]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40014000 	.word	0x40014000

080011fc <HAL_TIM_Base_Init>:
{
 80011fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80011fe:	4604      	mov	r4, r0
 8001200:	b1a0      	cbz	r0, 800122c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001202:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001206:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120a:	b91b      	cbnz	r3, 8001214 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800120c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001210:	f001 fb5a 	bl	80028c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001214:	2302      	movs	r3, #2
 8001216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800121a:	6820      	ldr	r0, [r4, #0]
 800121c:	1d21      	adds	r1, r4, #4
 800121e:	f7ff ff9f 	bl	8001160 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001222:	2301      	movs	r3, #1
 8001224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800122c:	2001      	movs	r0, #1
}
 800122e:	bd10      	pop	{r4, pc}

08001230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001230:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001232:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001234:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001236:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800123a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800123e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001240:	6083      	str	r3, [r0, #8]
 8001242:	bd10      	pop	{r4, pc}

08001244 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001244:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001248:	2b01      	cmp	r3, #1
{
 800124a:	b570      	push	{r4, r5, r6, lr}
 800124c:	4604      	mov	r4, r0
 800124e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001252:	d019      	beq.n	8001288 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001254:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001258:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800125a:	2301      	movs	r3, #1
 800125c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001260:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800126a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800126c:	680b      	ldr	r3, [r1, #0]
 800126e:	2b40      	cmp	r3, #64	; 0x40
 8001270:	d065      	beq.n	800133e <HAL_TIM_ConfigClockSource+0xfa>
 8001272:	d815      	bhi.n	80012a0 <HAL_TIM_ConfigClockSource+0x5c>
 8001274:	2b10      	cmp	r3, #16
 8001276:	d00c      	beq.n	8001292 <HAL_TIM_ConfigClockSource+0x4e>
 8001278:	d807      	bhi.n	800128a <HAL_TIM_ConfigClockSource+0x46>
 800127a:	b153      	cbz	r3, 8001292 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800127c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800127e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001280:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001284:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001288:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800128a:	2b20      	cmp	r3, #32
 800128c:	d001      	beq.n	8001292 <HAL_TIM_ConfigClockSource+0x4e>
 800128e:	2b30      	cmp	r3, #48	; 0x30
 8001290:	d1f4      	bne.n	800127c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001292:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001294:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001298:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800129c:	4313      	orrs	r3, r2
 800129e:	e01a      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80012a0:	2b60      	cmp	r3, #96	; 0x60
 80012a2:	d034      	beq.n	800130e <HAL_TIM_ConfigClockSource+0xca>
 80012a4:	d819      	bhi.n	80012da <HAL_TIM_ConfigClockSource+0x96>
 80012a6:	2b50      	cmp	r3, #80	; 0x50
 80012a8:	d1e8      	bne.n	800127c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012aa:	684a      	ldr	r2, [r1, #4]
 80012ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012ae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b0:	6a05      	ldr	r5, [r0, #32]
 80012b2:	f025 0501 	bic.w	r5, r5, #1
 80012b6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012ba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012c2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80012c6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80012c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012ca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012d2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80012d6:	6083      	str	r3, [r0, #8]
 80012d8:	e7d0      	b.n	800127c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80012da:	2b70      	cmp	r3, #112	; 0x70
 80012dc:	d00c      	beq.n	80012f8 <HAL_TIM_ConfigClockSource+0xb4>
 80012de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e2:	d1cb      	bne.n	800127c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80012e4:	68cb      	ldr	r3, [r1, #12]
 80012e6:	684a      	ldr	r2, [r1, #4]
 80012e8:	6889      	ldr	r1, [r1, #8]
 80012ea:	f7ff ffa1 	bl	8001230 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	6893      	ldr	r3, [r2, #8]
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	e008      	b.n	800130a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80012f8:	68cb      	ldr	r3, [r1, #12]
 80012fa:	684a      	ldr	r2, [r1, #4]
 80012fc:	6889      	ldr	r1, [r1, #8]
 80012fe:	f7ff ff97 	bl	8001230 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001306:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800130a:	6093      	str	r3, [r2, #8]
      break;
 800130c:	e7b6      	b.n	800127c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800130e:	684d      	ldr	r5, [r1, #4]
 8001310:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001312:	6a01      	ldr	r1, [r0, #32]
 8001314:	f021 0110 	bic.w	r1, r1, #16
 8001318:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800131a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800131c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800131e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001326:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800132a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800132e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001330:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001332:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001338:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800133c:	e7cb      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800133e:	684a      	ldr	r2, [r1, #4]
 8001340:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001342:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001344:	6a05      	ldr	r5, [r0, #32]
 8001346:	f025 0501 	bic.w	r5, r5, #1
 800134a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800134c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800134e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001356:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800135a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800135c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800135e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001360:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001366:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800136a:	e7b4      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x92>

0800136c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800136c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001370:	2b01      	cmp	r3, #1
{
 8001372:	b530      	push	{r4, r5, lr}
 8001374:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001378:	d02d      	beq.n	80013d6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800137a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800137e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001380:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001382:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001384:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001388:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800138a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 800138c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001390:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001392:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001394:	4c11      	ldr	r4, [pc, #68]	; (80013dc <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001396:	42a3      	cmp	r3, r4
 8001398:	d012      	beq.n	80013c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800139a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139e:	d00f      	beq.n	80013c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013a0:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80013a4:	42a3      	cmp	r3, r4
 80013a6:	d00b      	beq.n	80013c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013ac:	42a3      	cmp	r3, r4
 80013ae:	d007      	beq.n	80013c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013b4:	42a3      	cmp	r3, r4
 80013b6:	d003      	beq.n	80013c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013b8:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80013bc:	42a3      	cmp	r3, r4
 80013be:	d104      	bne.n	80013ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013c0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80013c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013c6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80013c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013d0:	2300      	movs	r3, #0
 80013d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80013d6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80013d8:	bd30      	pop	{r4, r5, pc}
 80013da:	bf00      	nop
 80013dc:	40010000 	.word	0x40010000

080013e0 <HAL_TIMEx_CommutCallback>:
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013e2:	4770      	bx	lr

080013e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013e4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013e6:	6803      	ldr	r3, [r0, #0]
 80013e8:	68c1      	ldr	r1, [r0, #12]
 80013ea:	691a      	ldr	r2, [r3, #16]
{
 80013ec:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013f2:	430a      	orrs	r2, r1
 80013f4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013f6:	6925      	ldr	r5, [r4, #16]
 80013f8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80013fa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013fc:	69c0      	ldr	r0, [r0, #28]
 80013fe:	432a      	orrs	r2, r5
 8001400:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001402:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001406:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001408:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800140c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800140e:	430a      	orrs	r2, r1
 8001410:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	69a1      	ldr	r1, [r4, #24]
 8001416:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800141a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800141c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001424:	d129      	bne.n	800147a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001426:	4293      	cmp	r3, r2
 8001428:	d003      	beq.n	8001432 <UART_SetConfig+0x4e>
 800142a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142e:	4293      	cmp	r3, r2
 8001430:	d120      	bne.n	8001474 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001432:	f7ff fd73 	bl	8000f1c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001436:	6862      	ldr	r2, [r4, #4]
 8001438:	6825      	ldr	r5, [r4, #0]
 800143a:	1892      	adds	r2, r2, r2
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	f04f 0119 	mov.w	r1, #25
 8001444:	415b      	adcs	r3, r3
 8001446:	fba0 0101 	umull	r0, r1, r0, r1
 800144a:	f7fe ff19 	bl	8000280 <__aeabi_uldivmod>
 800144e:	2164      	movs	r1, #100	; 0x64
 8001450:	fbb0 f4f1 	udiv	r4, r0, r1
 8001454:	fb01 0314 	mls	r3, r1, r4, r0
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	3332      	adds	r3, #50	; 0x32
 800145c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001460:	f003 0207 	and.w	r2, r3, #7
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800146a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800146e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001470:	60ab      	str	r3, [r5, #8]
 8001472:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001474:	f7ff fd42 	bl	8000efc <HAL_RCC_GetPCLK1Freq>
 8001478:	e7dd      	b.n	8001436 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800147a:	4293      	cmp	r3, r2
 800147c:	d002      	beq.n	8001484 <UART_SetConfig+0xa0>
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <UART_SetConfig+0xd8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d116      	bne.n	80014b2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001484:	f7ff fd4a 	bl	8000f1c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	6825      	ldr	r5, [r4, #0]
 800148c:	2119      	movs	r1, #25
 800148e:	009a      	lsls	r2, r3, #2
 8001490:	fba0 0101 	umull	r0, r1, r0, r1
 8001494:	0f9b      	lsrs	r3, r3, #30
 8001496:	f7fe fef3 	bl	8000280 <__aeabi_uldivmod>
 800149a:	2264      	movs	r2, #100	; 0x64
 800149c:	fbb0 f1f2 	udiv	r1, r0, r2
 80014a0:	fb02 0311 	mls	r3, r2, r1, r0
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	3332      	adds	r3, #50	; 0x32
 80014a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80014b0:	e7de      	b.n	8001470 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80014b2:	f7ff fd23 	bl	8000efc <HAL_RCC_GetPCLK1Freq>
 80014b6:	e7e7      	b.n	8001488 <UART_SetConfig+0xa4>
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40011400 	.word	0x40011400

080014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	4604      	mov	r4, r0
 80014c4:	460e      	mov	r6, r1
 80014c6:	4617      	mov	r7, r2
 80014c8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014ca:	6821      	ldr	r1, [r4, #0]
 80014cc:	680b      	ldr	r3, [r1, #0]
 80014ce:	ea36 0303 	bics.w	r3, r6, r3
 80014d2:	d101      	bne.n	80014d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
}
 80014d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80014d8:	1c6b      	adds	r3, r5, #1
 80014da:	d0f7      	beq.n	80014cc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014dc:	b995      	cbnz	r5, 8001504 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80014f0:	2320      	movs	r3, #32
 80014f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80014f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80014fa:	2300      	movs	r3, #0
 80014fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001500:	2003      	movs	r0, #3
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001504:	f7ff f86a 	bl	80005dc <HAL_GetTick>
 8001508:	1bc0      	subs	r0, r0, r7
 800150a:	4285      	cmp	r5, r0
 800150c:	d2dd      	bcs.n	80014ca <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800150e:	e7e6      	b.n	80014de <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001510 <HAL_UART_Init>:
{
 8001510:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001512:	4604      	mov	r4, r0
 8001514:	b340      	cbz	r0, 8001568 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001516:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800151a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800151e:	b91b      	cbnz	r3, 8001528 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001520:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001524:	f001 f9e8 	bl	80028f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001528:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800152a:	2324      	movs	r3, #36	; 0x24
 800152c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001530:	68d3      	ldr	r3, [r2, #12]
 8001532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001536:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff ff53 	bl	80013e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001546:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800154e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001556:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001558:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800155a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800155e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001562:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001566:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
}
 800156a:	bd10      	pop	{r4, pc}

0800156c <HAL_UART_Transmit>:
{
 800156c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001570:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001572:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001576:	2b20      	cmp	r3, #32
{
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800157e:	d151      	bne.n	8001624 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001580:	2900      	cmp	r1, #0
 8001582:	d04c      	beq.n	800161e <HAL_UART_Transmit+0xb2>
 8001584:	2a00      	cmp	r2, #0
 8001586:	d04a      	beq.n	800161e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001588:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800158c:	2b01      	cmp	r3, #1
 800158e:	d049      	beq.n	8001624 <HAL_UART_Transmit+0xb8>
 8001590:	2301      	movs	r3, #1
 8001592:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001596:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800159a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015a4:	f7ff f81a 	bl	80005dc <HAL_GetTick>
    huart->TxXferSize = Size;
 80015a8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80015ac:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80015ae:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80015b2:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80015b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b95b      	cbnz	r3, 80015d4 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4632      	mov	r2, r6
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff7c 	bl	80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015c8:	b9a0      	cbnz	r0, 80015f4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80015ca:	2320      	movs	r3, #32
 80015cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80015d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80015d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015dc:	68a3      	ldr	r3, [r4, #8]
 80015de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015e2:	4632      	mov	r2, r6
 80015e4:	463b      	mov	r3, r7
 80015e6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80015ea:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ec:	d10e      	bne.n	800160c <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ee:	f7ff ff67 	bl	80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015f2:	b110      	cbz	r0, 80015fa <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80015f4:	2003      	movs	r0, #3
 80015f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015fa:	882b      	ldrh	r3, [r5, #0]
 80015fc:	6822      	ldr	r2, [r4, #0]
 80015fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001602:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001604:	6923      	ldr	r3, [r4, #16]
 8001606:	b943      	cbnz	r3, 800161a <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001608:	3502      	adds	r5, #2
 800160a:	e7d4      	b.n	80015b6 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800160c:	f7ff ff58 	bl	80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001610:	2800      	cmp	r0, #0
 8001612:	d1ef      	bne.n	80015f4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	782a      	ldrb	r2, [r5, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	3501      	adds	r5, #1
 800161c:	e7cb      	b.n	80015b6 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800161e:	2001      	movs	r0, #1
 8001620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001624:	2002      	movs	r0, #2
}
 8001626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800162a <HAL_UART_Receive>:
{
 800162a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800162e:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001630:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001634:	2b20      	cmp	r3, #32
{
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800163c:	d154      	bne.n	80016e8 <HAL_UART_Receive+0xbe>
    if ((pData == NULL) || (Size == 0U))
 800163e:	2900      	cmp	r1, #0
 8001640:	d04f      	beq.n	80016e2 <HAL_UART_Receive+0xb8>
 8001642:	2a00      	cmp	r2, #0
 8001644:	d04d      	beq.n	80016e2 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8001646:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800164a:	2b01      	cmp	r3, #1
 800164c:	d04c      	beq.n	80016e8 <HAL_UART_Receive+0xbe>
 800164e:	2301      	movs	r3, #1
 8001650:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001654:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001658:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800165e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001662:	f7fe ffbb 	bl	80005dc <HAL_GetTick>
    huart->RxXferSize = Size;
 8001666:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800166a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800166c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8001670:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8001674:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001676:	b280      	uxth	r0, r0
 8001678:	b920      	cbnz	r0, 8001684 <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 800167a:	2320      	movs	r3, #32
 800167c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->RxXferCount--;
 8001684:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001686:	3b01      	subs	r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800168c:	68a3      	ldr	r3, [r4, #8]
 800168e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	4632      	mov	r2, r6
 8001694:	463b      	mov	r3, r7
 8001696:	f04f 0120 	mov.w	r1, #32
 800169a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800169c:	d112      	bne.n	80016c4 <HAL_UART_Receive+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800169e:	f7ff ff0f 	bl	80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016a2:	b110      	cbz	r0, 80016aa <HAL_UART_Receive+0x80>
          return HAL_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
 80016a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016aa:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016ac:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016ae:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016b0:	b922      	cbnz	r2, 80016bc <HAL_UART_Receive+0x92>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b6:	f825 3b02 	strh.w	r3, [r5], #2
 80016ba:	e7db      	b.n	8001674 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f825 3b01 	strh.w	r3, [r5], #1
 80016c2:	e7d7      	b.n	8001674 <HAL_UART_Receive+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016c4:	f7ff fefc 	bl	80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d1eb      	bne.n	80016a4 <HAL_UART_Receive+0x7a>
 80016cc:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016ce:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016d4:	b911      	cbnz	r1, 80016dc <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016d6:	702b      	strb	r3, [r5, #0]
 80016d8:	4615      	mov	r5, r2
 80016da:	e7cb      	b.n	8001674 <HAL_UART_Receive+0x4a>
 80016dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e0:	e7f9      	b.n	80016d6 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80016e8:	2002      	movs	r0, #2
}
 80016ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80016ee:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80016f0:	f000 fcae 	bl	8002050 <vTaskStartScheduler>
  
  return osOK;
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	bd08      	pop	{r3, pc}

080016f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80016fc:	6946      	ldr	r6, [r0, #20]
 80016fe:	692a      	ldr	r2, [r5, #16]
 8001700:	6840      	ldr	r0, [r0, #4]
 8001702:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001706:	460b      	mov	r3, r1
 8001708:	b086      	sub	sp, #24
 800170a:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800170c:	b176      	cbz	r6, 800172c <osThreadCreate+0x34>
 800170e:	69ad      	ldr	r5, [r5, #24]
 8001710:	b165      	cbz	r5, 800172c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001712:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001714:	bf14      	ite	ne
 8001716:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001718:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800171a:	9502      	str	r5, [sp, #8]
 800171c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001720:	f000 fc32 	bl	8001f88 <xTaskCreateStatic>
 8001724:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001726:	9805      	ldr	r0, [sp, #20]
}
 8001728:	b006      	add	sp, #24
 800172a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800172c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800172e:	bf14      	ite	ne
 8001730:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001732:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001734:	ad05      	add	r5, sp, #20
 8001736:	b292      	uxth	r2, r2
 8001738:	e88d 0030 	stmia.w	sp, {r4, r5}
 800173c:	f000 fc5b 	bl	8001ff6 <xTaskCreate>
 8001740:	2801      	cmp	r0, #1
 8001742:	d0f0      	beq.n	8001726 <osThreadCreate+0x2e>
      return NULL;
 8001744:	2000      	movs	r0, #0
 8001746:	e7ef      	b.n	8001728 <osThreadCreate+0x30>

08001748 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001748:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800174a:	2800      	cmp	r0, #0
 800174c:	bf08      	it	eq
 800174e:	2001      	moveq	r0, #1
 8001750:	f000 fdc6 	bl	80022e0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001754:	2000      	movs	r0, #0
 8001756:	bd08      	pop	{r3, pc}

08001758 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001758:	f100 0308 	add.w	r3, r0, #8
 800175c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800175e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001762:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001764:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001766:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001768:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800176a:	6003      	str	r3, [r0, #0]
 800176c:	4770      	bx	lr

0800176e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800176e:	2300      	movs	r3, #0
 8001770:	6103      	str	r3, [r0, #16]
 8001772:	4770      	bx	lr

08001774 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001774:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001776:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001780:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001782:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001784:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001786:	3301      	adds	r3, #1
 8001788:	6003      	str	r3, [r0, #0]
 800178a:	4770      	bx	lr

0800178c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800178c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800178e:	1c53      	adds	r3, r2, #1
{
 8001790:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001792:	d10a      	bne.n	80017aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001794:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800179a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800179c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800179e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80017a0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017a2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80017a4:	3301      	adds	r3, #1
 80017a6:	6003      	str	r3, [r0, #0]
 80017a8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017aa:	f100 0308 	add.w	r3, r0, #8
 80017ae:	685c      	ldr	r4, [r3, #4]
 80017b0:	6825      	ldr	r5, [r4, #0]
 80017b2:	42aa      	cmp	r2, r5
 80017b4:	d3ef      	bcc.n	8001796 <vListInsert+0xa>
 80017b6:	4623      	mov	r3, r4
 80017b8:	e7f9      	b.n	80017ae <vListInsert+0x22>

080017ba <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017ba:	6841      	ldr	r1, [r0, #4]
 80017bc:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80017be:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017c0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017c2:	6882      	ldr	r2, [r0, #8]
 80017c4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017ca:	bf08      	it	eq
 80017cc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80017ce:	2200      	movs	r2, #0
 80017d0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	3a01      	subs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017d8:	6818      	ldr	r0, [r3, #0]
}
 80017da:	4770      	bx	lr

080017dc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80017dc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <prvTaskExitError+0x3c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	d008      	beq.n	80017fc <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	e7fe      	b.n	80017fa <prvTaskExitError+0x1e>
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800180c:	9b01      	ldr	r3, [sp, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0fc      	beq.n	800180c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001812:	b002      	add	sp, #8
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800181c:	4808      	ldr	r0, [pc, #32]	; (8001840 <prvPortStartFirstTask+0x24>)
 800181e:	6800      	ldr	r0, [r0, #0]
 8001820:	6800      	ldr	r0, [r0, #0]
 8001822:	f380 8808 	msr	MSP, r0
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f380 8814 	msr	CONTROL, r0
 800182e:	b662      	cpsie	i
 8001830:	b661      	cpsie	f
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	f3bf 8f6f 	isb	sy
 800183a:	df00      	svc	0
 800183c:	bf00      	nop
 800183e:	0000      	.short	0x0000
 8001840:	e000ed08 	.word	0xe000ed08

08001844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001854 <vPortEnableVFP+0x10>
 8001848:	6801      	ldr	r1, [r0, #0]
 800184a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800184e:	6001      	str	r1, [r0, #0]
 8001850:	4770      	bx	lr
 8001852:	0000      	.short	0x0000
 8001854:	e000ed88 	.word	0xe000ed88

08001858 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <pxPortInitialiseStack+0x28>)
 8001862:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001866:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800186a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800186e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001872:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001876:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800187a:	3844      	subs	r0, #68	; 0x44
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	080017dd 	.word	0x080017dd
	...

08001890 <SVC_Handler>:
	__asm volatile (
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <pxCurrentTCBConst2>)
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	6808      	ldr	r0, [r1, #0]
 8001896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189a:	f380 8809 	msr	PSP, r0
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f380 8811 	msr	BASEPRI, r0
 80018aa:	4770      	bx	lr
 80018ac:	f3af 8000 	nop.w

080018b0 <pxCurrentTCBConst2>:
 80018b0:	20003cb0 	.word	0x20003cb0

080018b4 <vPortEnterCritical>:
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <vPortEnterCritical+0x3c>)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80018ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80018cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80018ce:	d10d      	bne.n	80018ec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <vPortEnterCritical+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80018d8:	d008      	beq.n	80018ec <vPortEnterCritical+0x38>
 80018da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018de:	f383 8811 	msr	BASEPRI, r3
 80018e2:	f3bf 8f6f 	isb	sy
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	e7fe      	b.n	80018ea <vPortEnterCritical+0x36>
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	e000ed04 	.word	0xe000ed04

080018f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <vPortExitCritical+0x24>)
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	b943      	cbnz	r3, 8001910 <vPortExitCritical+0x18>
 80018fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	f3bf 8f6f 	isb	sy
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	e7fe      	b.n	800190e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001910:	3b01      	subs	r3, #1
 8001912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001914:	b90b      	cbnz	r3, 800191a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	4770      	bx	lr
 800191c:	20000008 	.word	0x20000008

08001920 <PendSV_Handler>:
	__asm volatile
 8001920:	f3ef 8009 	mrs	r0, PSP
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <pxCurrentTCBConst>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f01e 0f10 	tst.w	lr, #16
 8001930:	bf08      	it	eq
 8001932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800193a:	6010      	str	r0, [r2, #0]
 800193c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001944:	f380 8811 	msr	BASEPRI, r0
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f000 fcea 	bl	8002328 <vTaskSwitchContext>
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f380 8811 	msr	BASEPRI, r0
 800195c:	bc09      	pop	{r0, r3}
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	6808      	ldr	r0, [r1, #0]
 8001962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001966:	f01e 0f10 	tst.w	lr, #16
 800196a:	bf08      	it	eq
 800196c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001970:	f380 8809 	msr	PSP, r0
 8001974:	f3bf 8f6f 	isb	sy
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w

08001980 <pxCurrentTCBConst>:
 8001980:	20003cb0 	.word	0x20003cb0

08001984 <SysTick_Handler>:
{
 8001984:	b508      	push	{r3, lr}
	__asm volatile
 8001986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001996:	f000 fb99 	bl	80020cc <xTaskIncrementTick>
 800199a:	b118      	cbz	r0, 80019a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <SysTick_Handler+0x28>)
 800199e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80019a4:	2300      	movs	r3, #0
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	bd08      	pop	{r3, pc}
 80019ac:	e000ed04 	.word	0xe000ed04

080019b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019b2:	4909      	ldr	r1, [pc, #36]	; (80019d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <vPortSetupTimerInterrupt+0x2c>)
 80019bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	4906      	ldr	r1, [pc, #24]	; (80019e0 <vPortSetupTimerInterrupt+0x30>)
 80019c8:	3b01      	subs	r3, #1
 80019ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019cc:	2307      	movs	r3, #7
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010
 80019d8:	e000e018 	.word	0xe000e018
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	e000e014 	.word	0xe000e014

080019e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <xPortStartScheduler+0xe8>)
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <xPortStartScheduler+0xec>)
{
 80019e8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	4291      	cmp	r1, r2
 80019ee:	d108      	bne.n	8001a02 <xPortStartScheduler+0x1e>
	__asm volatile
 80019f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	e7fe      	b.n	8001a00 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <xPortStartScheduler+0xf0>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d108      	bne.n	8001a1c <xPortStartScheduler+0x38>
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	e7fe      	b.n	8001a1a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <xPortStartScheduler+0xf4>)
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001a24:	22ff      	movs	r2, #255	; 0xff
 8001a26:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001a28:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a2a:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001a36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a3a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <xPortStartScheduler+0xfc>)
 8001a3e:	2207      	movs	r2, #7
 8001a40:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a42:	2100      	movs	r1, #0
 8001a44:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001a48:	0600      	lsls	r0, r0, #24
 8001a4a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001a4e:	d40d      	bmi.n	8001a6c <xPortStartScheduler+0x88>
 8001a50:	b101      	cbz	r1, 8001a54 <xPortStartScheduler+0x70>
 8001a52:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2a03      	cmp	r2, #3
 8001a58:	d011      	beq.n	8001a7e <xPortStartScheduler+0x9a>
 8001a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	f3bf 8f6f 	isb	sy
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	e7fe      	b.n	8001a6a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f88d 2003 	strb.w	r2, [sp, #3]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	e7e2      	b.n	8001a44 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a7e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001a84:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <xPortStartScheduler+0xf4>)
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <xPortStartScheduler+0x100>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001a96:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001a9e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001aa0:	f7ff ff86 	bl	80019b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <xPortStartScheduler+0x104>)
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001aaa:	f7ff fecb 	bl	8001844 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <xPortStartScheduler+0x108>)
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ab6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001ab8:	f7ff feb0 	bl	800181c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001abc:	f000 fc34 	bl	8002328 <vTaskSwitchContext>
	prvTaskExitError();
 8001ac0:	f7ff fe8c 	bl	80017dc <prvTaskExitError>
}
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	410fc271 	.word	0x410fc271
 8001ad4:	410fc270 	.word	0x410fc270
 8001ad8:	e000e400 	.word	0xe000e400
 8001adc:	20000090 	.word	0x20000090
 8001ae0:	20000094 	.word	0x20000094
 8001ae4:	e000ed20 	.word	0xe000ed20
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	e000ef34 	.word	0xe000ef34

08001af0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001af0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <prvInsertBlockIntoFreeList+0x40>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4282      	cmp	r2, r0
 8001af8:	d318      	bcc.n	8001b2c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001afa:	685c      	ldr	r4, [r3, #4]
 8001afc:	1919      	adds	r1, r3, r4
 8001afe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b00:	bf01      	itttt	eq
 8001b02:	6841      	ldreq	r1, [r0, #4]
 8001b04:	4618      	moveq	r0, r3
 8001b06:	1909      	addeq	r1, r1, r4
 8001b08:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b0a:	6844      	ldr	r4, [r0, #4]
 8001b0c:	1901      	adds	r1, r0, r4
 8001b0e:	428a      	cmp	r2, r1
 8001b10:	d107      	bne.n	8001b22 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <prvInsertBlockIntoFreeList+0x44>)
 8001b14:	6809      	ldr	r1, [r1, #0]
 8001b16:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b18:	bf1f      	itttt	ne
 8001b1a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b1c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b1e:	1909      	addne	r1, r1, r4
 8001b20:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b22:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b24:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b26:	bf18      	it	ne
 8001b28:	6018      	strne	r0, [r3, #0]
 8001b2a:	bd10      	pop	{r4, pc}
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	e7e1      	b.n	8001af4 <prvInsertBlockIntoFreeList+0x4>
 8001b30:	20003ca8 	.word	0x20003ca8
 8001b34:	20000098 	.word	0x20000098

08001b38 <pvPortMalloc>:
{
 8001b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001b3e:	f000 fabd 	bl	80020bc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001b42:	493e      	ldr	r1, [pc, #248]	; (8001c3c <pvPortMalloc+0x104>)
 8001b44:	4d3e      	ldr	r5, [pc, #248]	; (8001c40 <pvPortMalloc+0x108>)
 8001b46:	680b      	ldr	r3, [r1, #0]
 8001b48:	bb0b      	cbnz	r3, 8001b8e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001b4a:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b4c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b4e:	bf1f      	itttt	ne
 8001b50:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b52:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b56:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001b5a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b5c:	bf14      	ite	ne
 8001b5e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b60:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b64:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001b66:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b68:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b6c:	4e36      	ldr	r6, [pc, #216]	; (8001c48 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001b6e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b70:	2000      	movs	r0, #0
 8001b72:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b74:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001b76:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b78:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b7a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b7c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b80:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b82:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <pvPortMalloc+0x118>)
 8001b86:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b8c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b8e:	682f      	ldr	r7, [r5, #0]
 8001b90:	4227      	tst	r7, r4
 8001b92:	d116      	bne.n	8001bc2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001b94:	2c00      	cmp	r4, #0
 8001b96:	d041      	beq.n	8001c1c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001b98:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b9c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b9e:	bf1c      	itt	ne
 8001ba0:	f023 0307 	bicne.w	r3, r3, #7
 8001ba4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001ba6:	b163      	cbz	r3, 8001bc2 <pvPortMalloc+0x8a>
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <pvPortMalloc+0x118>)
 8001baa:	6816      	ldr	r6, [r2, #0]
 8001bac:	42b3      	cmp	r3, r6
 8001bae:	4690      	mov	r8, r2
 8001bb0:	d807      	bhi.n	8001bc2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001bb2:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <pvPortMalloc+0x110>)
 8001bb4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bb6:	6868      	ldr	r0, [r5, #4]
 8001bb8:	4283      	cmp	r3, r0
 8001bba:	d804      	bhi.n	8001bc6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001bbc:	6809      	ldr	r1, [r1, #0]
 8001bbe:	428d      	cmp	r5, r1
 8001bc0:	d107      	bne.n	8001bd2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	e02a      	b.n	8001c1c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bc6:	682c      	ldr	r4, [r5, #0]
 8001bc8:	2c00      	cmp	r4, #0
 8001bca:	d0f7      	beq.n	8001bbc <pvPortMalloc+0x84>
 8001bcc:	462a      	mov	r2, r5
 8001bce:	4625      	mov	r5, r4
 8001bd0:	e7f1      	b.n	8001bb6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bd2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bd4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bd6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bd8:	1ac2      	subs	r2, r0, r3
 8001bda:	2a10      	cmp	r2, #16
 8001bdc:	d90f      	bls.n	8001bfe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bde:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be0:	0741      	lsls	r1, r0, #29
 8001be2:	d008      	beq.n	8001bf6 <pvPortMalloc+0xbe>
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	f383 8811 	msr	BASEPRI, r3
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	e7fe      	b.n	8001bf4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bf6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001bf8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001bfa:	f7ff ff79 	bl	8001af0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c00:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c02:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c04:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c06:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c08:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001c0a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c0e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c12:	bf38      	it	cc
 8001c14:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c16:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c18:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c1a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001c1c:	f000 fae8 	bl	80021f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c20:	0763      	lsls	r3, r4, #29
 8001c22:	d008      	beq.n	8001c36 <pvPortMalloc+0xfe>
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	e7fe      	b.n	8001c34 <pvPortMalloc+0xfc>
}
 8001c36:	4620      	mov	r0, r4
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c3c:	20000098 	.word	0x20000098
 8001c40:	20003c9c 	.word	0x20003c9c
 8001c44:	2000009c 	.word	0x2000009c
 8001c48:	20003ca8 	.word	0x20003ca8
 8001c4c:	20003ca4 	.word	0x20003ca4
 8001c50:	20003ca0 	.word	0x20003ca0

08001c54 <vPortFree>:
{
 8001c54:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001c56:	4604      	mov	r4, r0
 8001c58:	b370      	cbz	r0, 8001cb8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <vPortFree+0x68>)
 8001c5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	4213      	tst	r3, r2
 8001c64:	d108      	bne.n	8001c78 <vPortFree+0x24>
 8001c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	e7fe      	b.n	8001c76 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c78:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001c7c:	b141      	cbz	r1, 8001c90 <vPortFree+0x3c>
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	e7fe      	b.n	8001c8e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c90:	ea23 0302 	bic.w	r3, r3, r2
 8001c94:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001c98:	f000 fa10 	bl	80020bc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c9c:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <vPortFree+0x6c>)
 8001c9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001ca2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ca4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ca8:	440b      	add	r3, r1
 8001caa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cac:	f7ff ff20 	bl	8001af0 <prvInsertBlockIntoFreeList>
}
 8001cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001cb4:	f000 ba9c 	b.w	80021f0 <xTaskResumeAll>
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	20003c9c 	.word	0x20003c9c
 8001cc0:	20003ca0 	.word	0x20003ca0

08001cc4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cca:	f7ff fdf3 	bl	80018b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001cd0:	4c2d      	ldr	r4, [pc, #180]	; (8001d88 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4f2d      	ldr	r7, [pc, #180]	; (8001d8c <prvAddNewTaskToReadyList+0xc8>)
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001cda:	6825      	ldr	r5, [r4, #0]
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	d145      	bne.n	8001d6c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ce0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11c      	bne.n	8001d22 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ce8:	1978      	adds	r0, r7, r5
 8001cea:	3514      	adds	r5, #20
 8001cec:	f7ff fd34 	bl	8001758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cf0:	2d8c      	cmp	r5, #140	; 0x8c
 8001cf2:	d1f9      	bne.n	8001ce8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001cf4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001db8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001cf8:	4d25      	ldr	r5, [pc, #148]	; (8001d90 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	f7ff fd2c 	bl	8001758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d00:	4628      	mov	r0, r5
 8001d02:	f7ff fd29 	bl	8001758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d06:	4823      	ldr	r0, [pc, #140]	; (8001d94 <prvAddNewTaskToReadyList+0xd0>)
 8001d08:	f7ff fd26 	bl	8001758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d0c:	4822      	ldr	r0, [pc, #136]	; (8001d98 <prvAddNewTaskToReadyList+0xd4>)
 8001d0e:	f7ff fd23 	bl	8001758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001d12:	4822      	ldr	r0, [pc, #136]	; (8001d9c <prvAddNewTaskToReadyList+0xd8>)
 8001d14:	f7ff fd20 	bl	8001758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <prvAddNewTaskToReadyList+0xdc>)
 8001d1a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <prvAddNewTaskToReadyList+0xe0>)
 8001d20:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001d24:	4921      	ldr	r1, [pc, #132]	; (8001dac <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001d26:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d28:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d2e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001d30:	2301      	movs	r3, #1
 8001d32:	4093      	lsls	r3, r2
 8001d34:	4303      	orrs	r3, r0
 8001d36:	2014      	movs	r0, #20
 8001d38:	600b      	str	r3, [r1, #0]
 8001d3a:	fb00 7002 	mla	r0, r0, r2, r7
 8001d3e:	1d31      	adds	r1, r6, #4
 8001d40:	f7ff fd18 	bl	8001774 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d44:	f7ff fdd8 	bl	80018f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <prvAddNewTaskToReadyList+0xec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b163      	cbz	r3, 8001d68 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d52:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <prvAddNewTaskToReadyList+0xf0>)
 8001d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <prvAddNewTaskToReadyList+0xec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1d6      	bne.n	8001d22 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d7a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d7c:	bf98      	it	ls
 8001d7e:	6026      	strls	r6, [r4, #0]
 8001d80:	e7cf      	b.n	8001d22 <prvAddNewTaskToReadyList+0x5e>
 8001d82:	bf00      	nop
 8001d84:	20003d48 	.word	0x20003d48
 8001d88:	20003cb0 	.word	0x20003cb0
 8001d8c:	20003cbc 	.word	0x20003cbc
 8001d90:	20003d74 	.word	0x20003d74
 8001d94:	20003d90 	.word	0x20003d90
 8001d98:	20003dbc 	.word	0x20003dbc
 8001d9c:	20003da8 	.word	0x20003da8
 8001da0:	20003cb4 	.word	0x20003cb4
 8001da4:	20003cb8 	.word	0x20003cb8
 8001da8:	20003d58 	.word	0x20003d58
 8001dac:	20003d5c 	.word	0x20003d5c
 8001db0:	20003da4 	.word	0x20003da4
 8001db4:	e000ed04 	.word	0xe000ed04
 8001db8:	20003d60 	.word	0x20003d60

08001dbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <prvResetNextTaskUnblockTime+0x1c>)
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <prvResetNextTaskUnblockTime+0x20>)
 8001dc4:	b919      	cbnz	r1, 8001dce <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dd2:	68d2      	ldr	r2, [r2, #12]
 8001dd4:	6852      	ldr	r2, [r2, #4]
 8001dd6:	e7f8      	b.n	8001dca <prvResetNextTaskUnblockTime+0xe>
 8001dd8:	20003cb4 	.word	0x20003cb4
 8001ddc:	20003d88 	.word	0x20003d88

08001de0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001de4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001de6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001dea:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001dec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001df0:	3a01      	subs	r2, #1
 8001df2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001df6:	469a      	mov	sl, r3
 8001df8:	4681      	mov	r9, r0
 8001dfa:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001dfc:	f026 0607 	bic.w	r6, r6, #7
 8001e00:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001e04:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e06:	7858      	ldrb	r0, [r3, #1]
 8001e08:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001e0c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001e10:	b108      	cbz	r0, 8001e16 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d1f7      	bne.n	8001e06 <prvInitialiseNewTask.isra.2+0x26>
 8001e16:	9d08      	ldr	r5, [sp, #32]
 8001e18:	2d06      	cmp	r5, #6
 8001e1a:	bf28      	it	cs
 8001e1c:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e1e:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001e20:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e22:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e24:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e26:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001e2a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e2c:	f7ff fc9f 	bl	800176e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e30:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e34:	f104 0018 	add.w	r0, r4, #24
 8001e38:	f7ff fc99 	bl	800176e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e3c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e3e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e40:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e42:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e44:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e48:	4652      	mov	r2, sl
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f7ff fd03 	bl	8001858 <pxPortInitialiseStack>
 8001e52:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e54:	f1b8 0f00 	cmp.w	r8, #0
 8001e58:	d001      	beq.n	8001e5e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e5a:	f8c8 4000 	str.w	r4, [r8]
 8001e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001e62 <prvDeleteTCB>:
	{
 8001e62:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e64:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001e68:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e6a:	b93b      	cbnz	r3, 8001e7c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001e6c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001e6e:	f7ff fef1 	bl	8001c54 <vPortFree>
				vPortFree( pxTCB );
 8001e72:	4620      	mov	r0, r4
	}
 8001e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001e78:	f7ff beec 	b.w	8001c54 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d0f9      	beq.n	8001e74 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d008      	beq.n	8001e96 <prvDeleteTCB+0x34>
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	e7fe      	b.n	8001e94 <prvDeleteTCB+0x32>
 8001e96:	bd10      	pop	{r4, pc}

08001e98 <prvIdleTask>:
{
 8001e98:	b580      	push	{r7, lr}
				taskYIELD();
 8001e9a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001ef8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e9e:	4f12      	ldr	r7, [pc, #72]	; (8001ee8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ea0:	4c12      	ldr	r4, [pc, #72]	; (8001eec <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001ea2:	4d13      	ldr	r5, [pc, #76]	; (8001ef0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	b963      	cbnz	r3, 8001ec2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <prvIdleTask+0x5c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d9f8      	bls.n	8001ea2 <prvIdleTask+0xa>
				taskYIELD();
 8001eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001eb4:	f8c8 3000 	str.w	r3, [r8]
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	e7ee      	b.n	8001ea0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001ec2:	f7ff fcf7 	bl	80018b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eca:	1d30      	adds	r0, r6, #4
 8001ecc:	f7ff fc75 	bl	80017ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ed0:	682b      	ldr	r3, [r5, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001edc:	f7ff fd0c 	bl	80018f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7ff ffbe 	bl	8001e62 <prvDeleteTCB>
 8001ee6:	e7dd      	b.n	8001ea4 <prvIdleTask+0xc>
 8001ee8:	20003dbc 	.word	0x20003dbc
 8001eec:	20003d4c 	.word	0x20003d4c
 8001ef0:	20003d48 	.word	0x20003d48
 8001ef4:	20003cbc 	.word	0x20003cbc
 8001ef8:	e000ed04 	.word	0xe000ed04

08001efc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f00:	4e1b      	ldr	r6, [pc, #108]	; (8001f70 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001f02:	681d      	ldr	r5, [r3, #0]
{
 8001f04:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f06:	6830      	ldr	r0, [r6, #0]
 8001f08:	3004      	adds	r0, #4
{
 8001f0a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f0c:	f7ff fc55 	bl	80017ba <uxListRemove>
 8001f10:	4633      	mov	r3, r6
 8001f12:	b940      	cbnz	r0, 8001f26 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f14:	6831      	ldr	r1, [r6, #0]
 8001f16:	4e17      	ldr	r6, [pc, #92]	; (8001f74 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f18:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001f1a:	6832      	ldr	r2, [r6, #0]
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	4088      	lsls	r0, r1
 8001f20:	ea22 0200 	bic.w	r2, r2, r0
 8001f24:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f26:	1c62      	adds	r2, r4, #1
 8001f28:	d107      	bne.n	8001f3a <prvAddCurrentTaskToDelayedList+0x3e>
 8001f2a:	b137      	cbz	r7, 8001f3a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001f30:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f36:	f7ff bc1d 	b.w	8001774 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f3a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f3c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001f3e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f40:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001f42:	d907      	bls.n	8001f54 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <prvAddCurrentTaskToDelayedList+0x80>)
 8001f46:	6810      	ldr	r0, [r2, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
}
 8001f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f4e:	3104      	adds	r1, #4
 8001f50:	f7ff bc1c 	b.w	800178c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <prvAddCurrentTaskToDelayedList+0x84>)
 8001f56:	6810      	ldr	r0, [r2, #0]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	3104      	adds	r1, #4
 8001f5c:	f7ff fc16 	bl	800178c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <prvAddCurrentTaskToDelayedList+0x88>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001f66:	bf38      	it	cc
 8001f68:	601c      	strcc	r4, [r3, #0]
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	20003dd0 	.word	0x20003dd0
 8001f70:	20003cb0 	.word	0x20003cb0
 8001f74:	20003d5c 	.word	0x20003d5c
 8001f78:	20003da8 	.word	0x20003da8
 8001f7c:	20003cb8 	.word	0x20003cb8
 8001f80:	20003cb4 	.word	0x20003cb4
 8001f84:	20003d88 	.word	0x20003d88

08001f88 <xTaskCreateStatic>:
	{
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001f8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001f90:	b945      	cbnz	r5, 8001fa4 <xTaskCreateStatic+0x1c>
 8001f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	e7fe      	b.n	8001fa2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001fa4:	b944      	cbnz	r4, 8001fb8 <xTaskCreateStatic+0x30>
 8001fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	e7fe      	b.n	8001fb6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fb8:	2654      	movs	r6, #84	; 0x54
 8001fba:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fbc:	9e04      	ldr	r6, [sp, #16]
 8001fbe:	2e54      	cmp	r6, #84	; 0x54
 8001fc0:	d008      	beq.n	8001fd4 <xTaskCreateStatic+0x4c>
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	e7fe      	b.n	8001fd2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001fd4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fd6:	2502      	movs	r5, #2
 8001fd8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fdc:	ad05      	add	r5, sp, #20
 8001fde:	9501      	str	r5, [sp, #4]
 8001fe0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001fe2:	9402      	str	r4, [sp, #8]
 8001fe4:	9500      	str	r5, [sp, #0]
 8001fe6:	f7ff fefb 	bl	8001de0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff fe6a 	bl	8001cc4 <prvAddNewTaskToReadyList>
	}
 8001ff0:	9805      	ldr	r0, [sp, #20]
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}

08001ff6 <xTaskCreate>:
	{
 8001ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ffa:	4607      	mov	r7, r0
 8001ffc:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffe:	0090      	lsls	r0, r2, #2
	{
 8002000:	4688      	mov	r8, r1
 8002002:	4616      	mov	r6, r2
 8002004:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002006:	f7ff fd97 	bl	8001b38 <pvPortMalloc>
			if( pxStack != NULL )
 800200a:	4605      	mov	r5, r0
 800200c:	b1e8      	cbz	r0, 800204a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800200e:	2054      	movs	r0, #84	; 0x54
 8002010:	f7ff fd92 	bl	8001b38 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002014:	4604      	mov	r4, r0
 8002016:	b1a8      	cbz	r0, 8002044 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002018:	2300      	movs	r3, #0
 800201a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800201e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002020:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002026:	9002      	str	r0, [sp, #8]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4632      	mov	r2, r6
 800202c:	464b      	mov	r3, r9
 800202e:	4641      	mov	r1, r8
 8002030:	4638      	mov	r0, r7
 8002032:	f7ff fed5 	bl	8001de0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fe44 	bl	8001cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800203c:	2001      	movs	r0, #1
	}
 800203e:	b005      	add	sp, #20
 8002040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002044:	4628      	mov	r0, r5
 8002046:	f7ff fe05 	bl	8001c54 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800204a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800204e:	e7f6      	b.n	800203e <xTaskCreate+0x48>

08002050 <vTaskStartScheduler>:
{
 8002050:	b510      	push	{r4, lr}
 8002052:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002054:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002056:	aa07      	add	r2, sp, #28
 8002058:	a906      	add	r1, sp, #24
 800205a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800205c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800205e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002060:	f000 f99c 	bl	800239c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002064:	9b05      	ldr	r3, [sp, #20]
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	9b06      	ldr	r3, [sp, #24]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	9400      	str	r4, [sp, #0]
 800206e:	4623      	mov	r3, r4
 8002070:	9a07      	ldr	r2, [sp, #28]
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <vTaskStartScheduler+0x58>)
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <vTaskStartScheduler+0x5c>)
 8002076:	f7ff ff87 	bl	8001f88 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800207a:	b190      	cbz	r0, 80020a2 <vTaskStartScheduler+0x52>
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <vTaskStartScheduler+0x60>)
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <vTaskStartScheduler+0x64>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <vTaskStartScheduler+0x68>)
 800209c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800209e:	f7ff fca1 	bl	80019e4 <xPortStartScheduler>
}
 80020a2:	b008      	add	sp, #32
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	bf00      	nop
 80020a8:	08003b6c 	.word	0x08003b6c
 80020ac:	08001e99 	.word	0x08001e99
 80020b0:	20003d88 	.word	0x20003d88
 80020b4:	20003da4 	.word	0x20003da4
 80020b8:	20003dd0 	.word	0x20003dd0

080020bc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80020bc:	4a02      	ldr	r2, [pc, #8]	; (80020c8 <vTaskSuspendAll+0xc>)
 80020be:	6813      	ldr	r3, [r2, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20003d54 	.word	0x20003d54

080020cc <xTaskIncrementTick>:
{
 80020cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <xTaskIncrementTick+0xf8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d153      	bne.n	8002180 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <xTaskIncrementTick+0xfc>)
 80020da:	681c      	ldr	r4, [r3, #0]
 80020dc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80020de:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020e0:	b9bc      	cbnz	r4, 8002112 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <xTaskIncrementTick+0x100>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	b142      	cbz	r2, 80020fc <xTaskIncrementTick+0x30>
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	e7fe      	b.n	80020fa <xTaskIncrementTick+0x2e>
 80020fc:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <xTaskIncrementTick+0x104>)
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	6810      	ldr	r0, [r2, #0]
 8002102:	6018      	str	r0, [r3, #0]
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <xTaskIncrementTick+0x108>)
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	f7ff fe55 	bl	8001dbc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002112:	4d31      	ldr	r5, [pc, #196]	; (80021d8 <xTaskIncrementTick+0x10c>)
 8002114:	4f31      	ldr	r7, [pc, #196]	; (80021dc <xTaskIncrementTick+0x110>)
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	429c      	cmp	r4, r3
 800211a:	f04f 0b00 	mov.w	fp, #0
 800211e:	d33e      	bcc.n	800219e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002120:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80021cc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002124:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80021ec <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002128:	f8d8 2000 	ldr.w	r2, [r8]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	bb72      	cbnz	r2, 800218e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	602a      	str	r2, [r5, #0]
					break;
 8002136:	e032      	b.n	800219e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002138:	f106 0a04 	add.w	sl, r6, #4
 800213c:	4650      	mov	r0, sl
 800213e:	f7ff fb3c 	bl	80017ba <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002142:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002144:	b119      	cbz	r1, 800214e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002146:	f106 0018 	add.w	r0, r6, #24
 800214a:	f7ff fb36 	bl	80017ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800214e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002150:	f8d9 3000 	ldr.w	r3, [r9]
 8002154:	2201      	movs	r2, #1
 8002156:	fa02 f100 	lsl.w	r1, r2, r0
 800215a:	4319      	orrs	r1, r3
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <xTaskIncrementTick+0x114>)
 800215e:	f8c9 1000 	str.w	r1, [r9]
 8002162:	f04f 0e14 	mov.w	lr, #20
 8002166:	4651      	mov	r1, sl
 8002168:	fb0e 3000 	mla	r0, lr, r0, r3
 800216c:	f7ff fb02 	bl	8001774 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002174:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002176:	4291      	cmp	r1, r2
 8002178:	bf28      	it	cs
 800217a:	f04f 0b01 	movcs.w	fp, #1
 800217e:	e7d3      	b.n	8002128 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <xTaskIncrementTick+0x118>)
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002188:	f04f 0b00 	mov.w	fp, #0
 800218c:	e011      	b.n	80021b2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800218e:	f8d8 2000 	ldr.w	r2, [r8]
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002196:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002198:	428c      	cmp	r4, r1
 800219a:	d2cd      	bcs.n	8002138 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800219c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <xTaskIncrementTick+0x114>)
 80021a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a4:	2214      	movs	r2, #20
 80021a6:	434a      	muls	r2, r1
 80021a8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80021aa:	2a02      	cmp	r2, #2
 80021ac:	bf28      	it	cs
 80021ae:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <xTaskIncrementTick+0x11c>)
 80021b4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	bf18      	it	ne
 80021ba:	f04f 0b01 	movne.w	fp, #1
}
 80021be:	4658      	mov	r0, fp
 80021c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c4:	20003d54 	.word	0x20003d54
 80021c8:	20003dd0 	.word	0x20003dd0
 80021cc:	20003cb4 	.word	0x20003cb4
 80021d0:	20003cb8 	.word	0x20003cb8
 80021d4:	20003d8c 	.word	0x20003d8c
 80021d8:	20003d88 	.word	0x20003d88
 80021dc:	20003cb0 	.word	0x20003cb0
 80021e0:	20003cbc 	.word	0x20003cbc
 80021e4:	20003d50 	.word	0x20003d50
 80021e8:	20003dd4 	.word	0x20003dd4
 80021ec:	20003d5c 	.word	0x20003d5c

080021f0 <xTaskResumeAll>:
{
 80021f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80021f4:	4c31      	ldr	r4, [pc, #196]	; (80022bc <xTaskResumeAll+0xcc>)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	b943      	cbnz	r3, 800220c <xTaskResumeAll+0x1c>
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	e7fe      	b.n	800220a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800220c:	f7ff fb52 	bl	80018b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	3b01      	subs	r3, #1
 8002214:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002216:	6824      	ldr	r4, [r4, #0]
 8002218:	b12c      	cbz	r4, 8002226 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800221a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800221c:	f7ff fb6c 	bl	80018f8 <vPortExitCritical>
}
 8002220:	4620      	mov	r0, r4
 8002222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <xTaskResumeAll+0xd0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f5      	beq.n	800221a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800222e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80022d8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002232:	4f24      	ldr	r7, [pc, #144]	; (80022c4 <xTaskResumeAll+0xd4>)
 8002234:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80022dc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002238:	f8d9 3000 	ldr.w	r3, [r9]
 800223c:	b9e3      	cbnz	r3, 8002278 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800223e:	b10c      	cbz	r4, 8002244 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002240:	f7ff fdbc 	bl	8001dbc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002244:	4d20      	ldr	r5, [pc, #128]	; (80022c8 <xTaskResumeAll+0xd8>)
 8002246:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002248:	b144      	cbz	r4, 800225c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800224a:	4e20      	ldr	r6, [pc, #128]	; (80022cc <xTaskResumeAll+0xdc>)
 800224c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800224e:	f7ff ff3d 	bl	80020cc <xTaskIncrementTick>
 8002252:	b100      	cbz	r0, 8002256 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002254:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002256:	3c01      	subs	r4, #1
 8002258:	d1f9      	bne.n	800224e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800225a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <xTaskResumeAll+0xdc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0da      	beq.n	800221a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <xTaskResumeAll+0xe0>)
 8002266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002274:	2401      	movs	r4, #1
 8002276:	e7d1      	b.n	800221c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002278:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800227c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800227e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002280:	f104 0018 	add.w	r0, r4, #24
 8002284:	f7ff fa99 	bl	80017ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002288:	4630      	mov	r0, r6
 800228a:	f7ff fa96 	bl	80017ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800228e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002290:	6839      	ldr	r1, [r7, #0]
 8002292:	2501      	movs	r5, #1
 8002294:	fa05 f302 	lsl.w	r3, r5, r2
 8002298:	2014      	movs	r0, #20
 800229a:	430b      	orrs	r3, r1
 800229c:	fb00 8002 	mla	r0, r0, r2, r8
 80022a0:	4631      	mov	r1, r6
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	f7ff fa66 	bl	8001774 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <xTaskResumeAll+0xe4>)
 80022aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80022b2:	bf24      	itt	cs
 80022b4:	4b05      	ldrcs	r3, [pc, #20]	; (80022cc <xTaskResumeAll+0xdc>)
 80022b6:	601d      	strcs	r5, [r3, #0]
 80022b8:	e7be      	b.n	8002238 <xTaskResumeAll+0x48>
 80022ba:	bf00      	nop
 80022bc:	20003d54 	.word	0x20003d54
 80022c0:	20003d48 	.word	0x20003d48
 80022c4:	20003d5c 	.word	0x20003d5c
 80022c8:	20003d50 	.word	0x20003d50
 80022cc:	20003dd4 	.word	0x20003dd4
 80022d0:	e000ed04 	.word	0xe000ed04
 80022d4:	20003cb0 	.word	0x20003cb0
 80022d8:	20003d90 	.word	0x20003d90
 80022dc:	20003cbc 	.word	0x20003cbc

080022e0 <vTaskDelay>:
	{
 80022e0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022e2:	b940      	cbnz	r0, 80022f6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <vTaskDelay+0x40>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <vTaskDelay+0x44>)
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	b141      	cbz	r1, 800230e <vTaskDelay+0x2e>
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	e7fe      	b.n	800230c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800230e:	f7ff fed5 	bl	80020bc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002312:	f7ff fdf3 	bl	8001efc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002316:	f7ff ff6b 	bl	80021f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800231a:	2800      	cmp	r0, #0
 800231c:	d0e2      	beq.n	80022e4 <vTaskDelay+0x4>
 800231e:	bd08      	pop	{r3, pc}
 8002320:	e000ed04 	.word	0xe000ed04
 8002324:	20003d54 	.word	0x20003d54

08002328 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <vTaskSwitchContext+0x60>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <vTaskSwitchContext+0x64>)
{
 800232e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002330:	b112      	cbz	r2, 8002338 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002332:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002338:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <vTaskSwitchContext+0x68>)
 800233c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f1c3 031f 	rsb	r3, r3, #31
 8002348:	2214      	movs	r2, #20
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <vTaskSwitchContext+0x6c>)
 800234c:	435a      	muls	r2, r3
 800234e:	1888      	adds	r0, r1, r2
 8002350:	588c      	ldr	r4, [r1, r2]
 8002352:	b944      	cbnz	r4, 8002366 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	e7fe      	b.n	8002364 <vTaskSwitchContext+0x3c>
 8002366:	6844      	ldr	r4, [r0, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	6864      	ldr	r4, [r4, #4]
 800236c:	6044      	str	r4, [r0, #4]
 800236e:	440a      	add	r2, r1
 8002370:	4294      	cmp	r4, r2
 8002372:	bf04      	itt	eq
 8002374:	6862      	ldreq	r2, [r4, #4]
 8002376:	6042      	streq	r2, [r0, #4]
 8002378:	2214      	movs	r2, #20
 800237a:	fb02 1303 	mla	r3, r2, r3, r1
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <vTaskSwitchContext+0x70>)
 8002384:	e7d6      	b.n	8002334 <vTaskSwitchContext+0xc>
 8002386:	bf00      	nop
 8002388:	20003d54 	.word	0x20003d54
 800238c:	20003dd4 	.word	0x20003dd4
 8002390:	20003d5c 	.word	0x20003d5c
 8002394:	20003cbc 	.word	0x20003cbc
 8002398:	20003cb0 	.word	0x20003cb0

0800239c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <vApplicationGetIdleTaskMemory+0x10>)
 800239e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <vApplicationGetIdleTaskMemory+0x14>)
 80023a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20003fd8 	.word	0x20003fd8
 80023b0:	20003dd8 	.word	0x20003dd8

080023b4 <getInputString>:
  return i;
}

DataLogTypeDef my_data;
int getInputString(char *inputString, size_t len)
{
 80023b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t currLen = 0;
  int c = 0;

  c = getchar();
 80023b8:	4d2d      	ldr	r5, [pc, #180]	; (8002470 <getInputString+0xbc>)
{
 80023ba:	4606      	mov	r6, r0
  c = getchar();
 80023bc:	6828      	ldr	r0, [r5, #0]
{
 80023be:	460f      	mov	r7, r1
  c = getchar();
 80023c0:	6841      	ldr	r1, [r0, #4]
 80023c2:	684b      	ldr	r3, [r1, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	604b      	str	r3, [r1, #4]
 80023ca:	da14      	bge.n	80023f6 <getInputString+0x42>
 80023cc:	f000 fbd4 	bl	8002b78 <__srget_r>
 80023d0:	2400      	movs	r4, #0
    {
      if (currLen != 0)
      {
        --currLen;
        inputString[currLen] = 0;
        printf(" \b");
 80023d2:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8002474 <getInputString+0xc0>
      }
    }
    else
    {
      if (currLen < (len-1))
 80023d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80023da:	46a1      	mov	r9, r4
  while ((c != EOF) && ((currLen + 1) < len) && (c != '\r') && (c != '\n') )
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	d007      	beq.n	80023f0 <getInputString+0x3c>
 80023e0:	f104 0b01 	add.w	fp, r4, #1
 80023e4:	45bb      	cmp	fp, r7
 80023e6:	d22b      	bcs.n	8002440 <getInputString+0x8c>
 80023e8:	280d      	cmp	r0, #13
 80023ea:	d03e      	beq.n	800246a <getInputString+0xb6>
 80023ec:	280a      	cmp	r0, #10
 80023ee:	d107      	bne.n	8002400 <getInputString+0x4c>

      ++currLen;
    }
    c = getchar();
  }
  if (currLen != 0)
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	d033      	beq.n	800245c <getInputString+0xa8>
 80023f4:	e025      	b.n	8002442 <getInputString+0x8e>
  c = getchar();
 80023f6:	680b      	ldr	r3, [r1, #0]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	600a      	str	r2, [r1, #0]
 80023fc:	7818      	ldrb	r0, [r3, #0]
 80023fe:	e7e7      	b.n	80023d0 <getInputString+0x1c>
    if (c == '\b')
 8002400:	2808      	cmp	r0, #8
 8002402:	d112      	bne.n	800242a <getInputString+0x76>
      if (currLen != 0)
 8002404:	b1ac      	cbz	r4, 8002432 <getInputString+0x7e>
        --currLen;
 8002406:	f104 3bff 	add.w	fp, r4, #4294967295
        printf(" \b");
 800240a:	4650      	mov	r0, sl
        inputString[currLen] = 0;
 800240c:	f806 900b 	strb.w	r9, [r6, fp]
        printf(" \b");
 8002410:	f000 fb9a 	bl	8002b48 <iprintf>
    c = getchar();
 8002414:	6828      	ldr	r0, [r5, #0]
 8002416:	6841      	ldr	r1, [r0, #4]
 8002418:	684b      	ldr	r3, [r1, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	da09      	bge.n	8002436 <getInputString+0x82>
 8002422:	f000 fba9 	bl	8002b78 <__srget_r>
 8002426:	465c      	mov	r4, fp
 8002428:	e7d8      	b.n	80023dc <getInputString+0x28>
      if (currLen < (len-1))
 800242a:	4544      	cmp	r4, r8
 800242c:	d2f2      	bcs.n	8002414 <getInputString+0x60>
        inputString[currLen] = c;
 800242e:	5530      	strb	r0, [r6, r4]
 8002430:	e7f0      	b.n	8002414 <getInputString+0x60>
 8002432:	46a3      	mov	fp, r4
 8002434:	e7ee      	b.n	8002414 <getInputString+0x60>
    c = getchar();
 8002436:	680b      	ldr	r3, [r1, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	600a      	str	r2, [r1, #0]
 800243c:	7818      	ldrb	r0, [r3, #0]
 800243e:	e7f2      	b.n	8002426 <getInputString+0x72>
  if (currLen != 0)
 8002440:	b10c      	cbz	r4, 8002446 <getInputString+0x92>
  { /* Close the string in the input buffer... only if a string was written to it. */
    inputString[currLen] = '\0';
 8002442:	2300      	movs	r3, #0
 8002444:	5533      	strb	r3, [r6, r4]
  }
  if (c == '\r')
 8002446:	280d      	cmp	r0, #13
 8002448:	d108      	bne.n	800245c <getInputString+0xa8>
  {
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 800244a:	6828      	ldr	r0, [r5, #0]
 800244c:	6841      	ldr	r1, [r0, #4]
 800244e:	684b      	ldr	r3, [r1, #4]
 8002450:	3b01      	subs	r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	da04      	bge.n	8002462 <getInputString+0xae>
 8002458:	f000 fb8e 	bl	8002b78 <__srget_r>
  }

  return currLen;
}
 800245c:	4620      	mov	r0, r4
 800245e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 8002462:	680b      	ldr	r3, [r1, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e7f8      	b.n	800245c <getInputString+0xa8>
  if (currLen != 0)
 800246a:	2c00      	cmp	r4, #0
 800246c:	d0ed      	beq.n	800244a <getInputString+0x96>
 800246e:	e7e8      	b.n	8002442 <getInputString+0x8e>
 8002470:	20000010 	.word	0x20000010
 8002474:	08003bfd 	.word	0x08003bfd

08002478 <enterPemString>:
{
 8002478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	4606      	mov	r6, r0
 800247e:	460f      	mov	r7, r1
  read_len = getInputString(&read_buffer[i], max_len);
 8002480:	f7ff ff98 	bl	80023b4 <getInputString>
  bool eof = false;
 8002484:	f04f 0a00 	mov.w	sl, #0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8002488:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002504 <enterPemString+0x8c>
  read_len = getInputString(&read_buffer[i], max_len);
 800248c:	4605      	mov	r5, r0
  int i = 0;
 800248e:	4654      	mov	r4, sl
    read_buffer[i++] = '\n';
 8002490:	f04f 080a 	mov.w	r8, #10
  while ( (read_len >= 0) && (i < max_len) && !eof )
 8002494:	2d00      	cmp	r5, #0
 8002496:	da08      	bge.n	80024aa <enterPemString+0x32>
  if (i >= max_len)
 8002498:	42a7      	cmp	r7, r4
 800249a:	d82b      	bhi.n	80024f4 <enterPemString+0x7c>
   printf("Certificate is too long , allocated size is %d\n",max_len);
 800249c:	4639      	mov	r1, r7
 800249e:	4818      	ldr	r0, [pc, #96]	; (8002500 <enterPemString+0x88>)
 80024a0:	f000 fb52 	bl	8002b48 <iprintf>
   return 0;
 80024a4:	2000      	movs	r0, #0
 80024a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ( (read_len >= 0) && (i < max_len) && !eof )
 80024aa:	42a7      	cmp	r7, r4
 80024ac:	d9f6      	bls.n	800249c <enterPemString+0x24>
 80024ae:	f1ba 0f00 	cmp.w	sl, #0
 80024b2:	d1f1      	bne.n	8002498 <enterPemString+0x20>
    i += read_len;
 80024b4:	4425      	add	r5, r4
    read_buffer[i++] = '\n';
 80024b6:	1c6c      	adds	r4, r5, #1
    read_len = getInputString(&read_buffer[i], max_len);
 80024b8:	eb06 0b04 	add.w	fp, r6, r4
    read_buffer[i++] = '\n';
 80024bc:	f806 8005 	strb.w	r8, [r6, r5]
    read_len = getInputString(&read_buffer[i], max_len);
 80024c0:	4639      	mov	r1, r7
 80024c2:	4658      	mov	r0, fp
 80024c4:	f7ff ff76 	bl	80023b4 <getInputString>
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80024c8:	2208      	movs	r2, #8
    read_len = getInputString(&read_buffer[i], max_len);
 80024ca:	4605      	mov	r5, r0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80024cc:	4649      	mov	r1, r9
 80024ce:	4658      	mov	r0, fp
 80024d0:	f000 fb7e 	bl	8002bd0 <strncmp>
    if (eof)
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d1dd      	bne.n	8002494 <enterPemString+0x1c>
        i += read_len;
 80024d8:	4425      	add	r5, r4
        read_buffer[i++] = '\n';
 80024da:	1c6c      	adds	r4, r5, #1
 80024dc:	f806 8005 	strb.w	r8, [r6, r5]
        read_len = getInputString(&read_buffer[i], max_len);
 80024e0:	4639      	mov	r1, r7
 80024e2:	1930      	adds	r0, r6, r4
 80024e4:	f7ff ff66 	bl	80023b4 <getInputString>
        if (read_len != 0) eof =false;
 80024e8:	fab0 fa80 	clz	sl, r0
 80024ec:	4605      	mov	r5, r0
 80024ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80024f2:	e7cf      	b.n	8002494 <enterPemString+0x1c>
  read_buffer[++i] = '\0';
 80024f4:	1c60      	adds	r0, r4, #1
 80024f6:	2300      	movs	r3, #0
 80024f8:	5433      	strb	r3, [r6, r0]
}
 80024fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024fe:	bf00      	nop
 8002500:	08003bcd 	.word	0x08003bcd
 8002504:	08003bc4 	.word	0x08003bc4

08002508 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002508:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 5 */
char * key_read_buffer = NULL;
//int    ret = 0;
key_read_buffer = pvPortMalloc(PEM_READ_BUFFER_SIZE);
 800250a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800250e:	f7ff fb13 	bl	8001b38 <pvPortMalloc>
if (key_read_buffer == NULL)
 8002512:	4604      	mov	r4, r0
 8002514:	b920      	cbnz	r0, 8002520 <StartDefaultTask+0x18>
{
  printf("Could not allocate %d bytes for the console readbuffer.\n", PEM_READ_BUFFER_SIZE);
 8002516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251a:	4811      	ldr	r0, [pc, #68]	; (8002560 <StartDefaultTask+0x58>)
 800251c:	f000 fb14 	bl	8002b48 <iprintf>

}
memset(key_read_buffer, 0, PEM_READ_BUFFER_SIZE);
 8002520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002524:	2100      	movs	r1, #0
 8002526:	4620      	mov	r0, r4
 8002528:	f000 fb06 	bl	8002b38 <memset>
printf("\nEnter your certificate\n\r");
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <StartDefaultTask+0x5c>)
enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
uint32_t flash_address = 0x08000000;//put first flash address here
int i;
for ( i = 0; i < sizeof(lUserConfigPtr->tls_root_ca_cert); i++, key_read_buffer++, flash_address++ )
 800252e:	4e0e      	ldr	r6, [pc, #56]	; (8002568 <StartDefaultTask+0x60>)
printf("\nEnter your certificate\n\r");
 8002530:	f000 fb0a 	bl	8002b48 <iprintf>
enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff ff9d 	bl	8002478 <enterPemString>
uint32_t flash_address = 0x08000000;//put first flash address here
 800253e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address, *key_read_buffer);
 8002542:	4629      	mov	r1, r5
 8002544:	f814 2b01 	ldrb.w	r2, [r4], #1
 8002548:	2300      	movs	r3, #0
 800254a:	2000      	movs	r0, #0
for ( i = 0; i < sizeof(lUserConfigPtr->tls_root_ca_cert); i++, key_read_buffer++, flash_address++ )
 800254c:	3501      	adds	r5, #1
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address, *key_read_buffer);
 800254e:	f7fe f949 	bl	80007e4 <HAL_FLASH_Program>
for ( i = 0; i < sizeof(lUserConfigPtr->tls_root_ca_cert); i++, key_read_buffer++, flash_address++ )
 8002552:	42b5      	cmp	r5, r6
 8002554:	d1f5      	bne.n	8002542 <StartDefaultTask+0x3a>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff f8f6 	bl	8001748 <osDelay>
 800255c:	e7fb      	b.n	8002556 <StartDefaultTask+0x4e>
 800255e:	bf00      	nop
 8002560:	08003b71 	.word	0x08003b71
 8002564:	08003baa 	.word	0x08003baa
 8002568:	080003e8 	.word	0x080003e8

0800256c <__io_putchar>:
{
 800256c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800256e:	ac02      	add	r4, sp, #8
  while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 30000))
 8002570:	4d07      	ldr	r5, [pc, #28]	; (8002590 <__io_putchar+0x24>)
{
 8002572:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 30000))
 8002576:	f247 5330 	movw	r3, #30000	; 0x7530
 800257a:	2201      	movs	r2, #1
 800257c:	4621      	mov	r1, r4
 800257e:	4628      	mov	r0, r5
 8002580:	f7fe fff4 	bl	800156c <HAL_UART_Transmit>
 8002584:	2800      	cmp	r0, #0
 8002586:	d1f6      	bne.n	8002576 <__io_putchar+0xa>
}
 8002588:	9801      	ldr	r0, [sp, #4]
 800258a:	b003      	add	sp, #12
 800258c:	bd30      	pop	{r4, r5, pc}
 800258e:	bf00      	nop
 8002590:	20004108 	.word	0x20004108

08002594 <__io_getchar>:
{
 8002594:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ch = 0;
 8002596:	ac02      	add	r4, sp, #8
 8002598:	2300      	movs	r3, #0
 800259a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 800259e:	4d07      	ldr	r5, [pc, #28]	; (80025bc <__io_getchar+0x28>)
 80025a0:	f247 5330 	movw	r3, #30000	; 0x7530
 80025a4:	2201      	movs	r2, #1
 80025a6:	4621      	mov	r1, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	f7ff f83e 	bl	800162a <HAL_UART_Receive>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d1f6      	bne.n	80025a0 <__io_getchar+0xc>
}
 80025b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80025b6:	b003      	add	sp, #12
 80025b8:	bd30      	pop	{r4, r5, pc}
 80025ba:	bf00      	nop
 80025bc:	20004108 	.word	0x20004108

080025c0 <SystemClock_Config>:
{
 80025c0:	b530      	push	{r4, r5, lr}
 80025c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c4:	2230      	movs	r2, #48	; 0x30
 80025c6:	2100      	movs	r1, #0
 80025c8:	a808      	add	r0, sp, #32
 80025ca:	f000 fab5 	bl	8002b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ce:	2100      	movs	r1, #0
 80025d0:	2214      	movs	r2, #20
 80025d2:	a803      	add	r0, sp, #12
 80025d4:	f000 fab0 	bl	8002b38 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	2500      	movs	r5, #0
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <SystemClock_Config+0x90>)
 80025dc:	9501      	str	r5, [sp, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f2:	9502      	str	r5, [sp, #8]
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	6813      	ldr	r3, [r2, #0]
 8002602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800260a:	2301      	movs	r3, #1
 800260c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800260e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002612:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002618:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800261a:	2304      	movs	r3, #4
 800261c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800261e:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002620:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002622:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002624:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002626:	2307      	movs	r3, #7
 8002628:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800262c:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262e:	f7fe f9f5 	bl	8000a1c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002632:	230f      	movs	r3, #15
 8002634:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002636:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800263c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002640:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002642:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002644:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002646:	f7fe fbbd 	bl	8000dc4 <HAL_RCC_ClockConfig>
}
 800264a:	b015      	add	sp, #84	; 0x54
 800264c:	bd30      	pop	{r4, r5, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000

08002658 <main>:
{
 8002658:	b500      	push	{lr}
 800265a:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800265c:	f7fd ff98 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 8002660:	f7ff ffae 	bl	80025c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	2214      	movs	r2, #20
 8002666:	2100      	movs	r1, #0
 8002668:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f000 fa64 	bl	8002b38 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <main+0x14c>)
 8002672:	9401      	str	r4, [sp, #4]
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002676:	484c      	ldr	r0, [pc, #304]	; (80027a8 <main+0x150>)
  htim3.Instance = TIM3;
 8002678:	4d4c      	ldr	r5, [pc, #304]	; (80027ac <main+0x154>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 20480);
 800267a:	4e4d      	ldr	r6, [pc, #308]	; (80027b0 <main+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267c:	f042 0204 	orr.w	r2, r2, #4
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	f002 0204 	and.w	r2, r2, #4
 8002688:	9201      	str	r2, [sp, #4]
 800268a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268c:	9402      	str	r4, [sp, #8]
 800268e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	9403      	str	r4, [sp, #12]
 80026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
 80026aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ac:	f002 0201 	and.w	r2, r2, #1
 80026b0:	9203      	str	r2, [sp, #12]
 80026b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	9404      	str	r4, [sp, #16]
 80026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b8:	f042 0202 	orr.w	r2, r2, #2
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026c4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026c8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026cc:	f7fe f9a0 	bl	8000a10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80026d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026d6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <main+0x15c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026da:	4837      	ldr	r0, [pc, #220]	; (80027b8 <main+0x160>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026dc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f7fe f8c8 	bl	8000874 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80026e4:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026e6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LD2_Pin;
 80026e8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026ea:	482f      	ldr	r0, [pc, #188]	; (80027a8 <main+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f7fe f8be 	bl	8000874 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 80026f8:	4830      	ldr	r0, [pc, #192]	; (80027bc <main+0x164>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <main+0x168>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026fc:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002702:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270a:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800270c:	230a      	movs	r3, #10
 800270e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002710:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002712:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002714:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002716:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002718:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800271a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271c:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800271e:	f7fe fc2b 	bl	8000f78 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	2210      	movs	r2, #16
 8002724:	4621      	mov	r1, r4
 8002726:	a807      	add	r0, sp, #28
 8002728:	f000 fa06 	bl	8002b38 <memset>
  htim3.Instance = TIM3;
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <main+0x16c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002730:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8002732:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 0;
 8002736:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273a:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	9405      	str	r4, [sp, #20]
 800273e:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002740:	f7fe fd5c 	bl	80011fc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002748:	a907      	add	r1, sp, #28
 800274a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800274e:	f7fe fd79 	bl	8001244 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002752:	a905      	add	r1, sp, #20
 8002754:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800275a:	f7fe fe07 	bl	800136c <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 800275e:	481a      	ldr	r0, [pc, #104]	; (80027c8 <main+0x170>)
  huart2.Init.BaudRate = 115200;
 8002760:	491a      	ldr	r1, [pc, #104]	; (80027cc <main+0x174>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002764:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002768:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800276c:	230c      	movs	r3, #12
 800276e:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002770:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002772:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002774:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002776:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002778:	f7fe feca 	bl	8001510 <HAL_UART_Init>
  printf("\n\r hello world \n\r");
 800277c:	4814      	ldr	r0, [pc, #80]	; (80027d0 <main+0x178>)
 800277e:	f000 f9e3 	bl	8002b48 <iprintf>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 20480);
 8002782:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002784:	ad07      	add	r5, sp, #28
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800278c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002790:	4621      	mov	r1, r4
 8002792:	a807      	add	r0, sp, #28
 8002794:	f7fe ffb0 	bl	80016f8 <osThreadCreate>
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <main+0x17c>)
 800279a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800279c:	f7fe ffa7 	bl	80016ee <osKernelStart>
 80027a0:	e7fe      	b.n	80027a0 <main+0x148>
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	200040c4 	.word	0x200040c4
 80027b0:	08003b50 	.word	0x08003b50
 80027b4:	10210000 	.word	0x10210000
 80027b8:	40020800 	.word	0x40020800
 80027bc:	20004060 	.word	0x20004060
 80027c0:	40003800 	.word	0x40003800
 80027c4:	40000400 	.word	0x40000400
 80027c8:	20004108 	.word	0x20004108
 80027cc:	40004400 	.word	0x40004400
 80027d0:	08003c00 	.word	0x08003c00
 80027d4:	2000405c 	.word	0x2000405c

080027d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80027e0:	f7fd bef0 	b.w	80005c4 <HAL_IncTick>
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_MspInit+0x40>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	9200      	str	r2, [sp, #0]
 80027f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027f2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80027f6:	6459      	str	r1, [r3, #68]	; 0x44
 80027f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027fa:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80027fe:	9100      	str	r1, [sp, #0]
 8002800:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	9201      	str	r2, [sp, #4]
 8002804:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002806:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800280a:	6419      	str	r1, [r3, #64]	; 0x40
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002814:	210f      	movs	r1, #15
 8002816:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281c:	f7fd fef6 	bl	800060c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002820:	b003      	add	sp, #12
 8002822:	f85d fb04 	ldr.w	pc, [sp], #4
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	2214      	movs	r2, #20
 8002834:	2100      	movs	r1, #0
 8002836:	a803      	add	r0, sp, #12
 8002838:	f000 f97e 	bl	8002b38 <memset>
  if(hspi->Instance==SPI2)
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_SPI_MspInit+0x90>)
 8002840:	429a      	cmp	r2, r3
 8002842:	d138      	bne.n	80028b6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002844:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002848:	2400      	movs	r4, #0
 800284a:	9400      	str	r4, [sp, #0]
 800284c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	481c      	ldr	r0, [pc, #112]	; (80028c0 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800285c:	9200      	str	r2, [sp, #0]
 800285e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	9401      	str	r4, [sp, #4]
 8002862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002864:	f042 0204 	orr.w	r2, r2, #4
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
 800286a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286c:	f002 0204 	and.w	r2, r2, #4
 8002870:	9201      	str	r2, [sp, #4]
 8002872:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002874:	9402      	str	r4, [sp, #8]
 8002876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002878:	f042 0202 	orr.w	r2, r2, #2
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002888:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002892:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002894:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800289a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	f7fd ffea 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	a903      	add	r1, sp, #12
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028b0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	f7fd ffdf 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028b6:	b009      	add	sp, #36	; 0x24
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40003800 	.word	0x40003800
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80028c8:	6802      	ldr	r2, [r0, #0]
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_TIM_Base_MspInit+0x28>)
 80028cc:	429a      	cmp	r2, r3
{
 80028ce:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80028d0:	d10b      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_TIM_Base_MspInit+0x2c>)
 80028d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028da:	f042 0202 	orr.w	r2, r2, #2
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028ea:	b002      	add	sp, #8
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b510      	push	{r4, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fe:	2214      	movs	r2, #20
 8002900:	2100      	movs	r1, #0
 8002902:	a803      	add	r0, sp, #12
 8002904:	f000 f918 	bl	8002b38 <memset>
  if(huart->Instance==USART2)
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_UART_MspInit+0x60>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d120      	bne.n	8002952 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002910:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002914:	2100      	movs	r1, #0
 8002916:	9101      	str	r1, [sp, #4]
 8002918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	4810      	ldr	r0, [pc, #64]	; (800295c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800291c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
 8002922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002924:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002928:	9201      	str	r2, [sp, #4]
 800292a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	9102      	str	r1, [sp, #8]
 800292e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	9302      	str	r3, [sp, #8]
 800293e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002940:	230c      	movs	r3, #12
 8002942:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800294a:	2307      	movs	r3, #7
 800294c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f7fd ff91 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002952:	b008      	add	sp, #32
 8002954:	bd10      	pop	{r4, pc}
 8002956:	bf00      	nop
 8002958:	40004400 	.word	0x40004400
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002962:	4601      	mov	r1, r0
{
 8002964:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002966:	2200      	movs	r2, #0
 8002968:	201c      	movs	r0, #28
 800296a:	f7fd fe4f 	bl	800060c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800296e:	201c      	movs	r0, #28
 8002970:	f7fd fe80 	bl	8000674 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002974:	2500      	movs	r5, #0
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_InitTick+0x6c>)
 8002978:	9502      	str	r5, [sp, #8]
 800297a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800297c:	4c14      	ldr	r4, [pc, #80]	; (80029d0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800298c:	a901      	add	r1, sp, #4
 800298e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002990:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002992:	f7fe fad3 	bl	8000f3c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002996:	f7fe fab1 	bl	8000efc <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800299a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800299e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80029a0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80029a4:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029a6:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_InitTick+0x74>)
 80029aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ae:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80029b0:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80029b2:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 80029b4:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80029b8:	f7fe fc20 	bl	80011fc <HAL_TIM_Base_Init>
 80029bc:	b920      	cbnz	r0, 80029c8 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80029be:	4620      	mov	r0, r4
 80029c0:	f7fe fb17 	bl	8000ff2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80029c4:	b009      	add	sp, #36	; 0x24
 80029c6:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
 80029ca:	e7fb      	b.n	80029c4 <HAL_InitTick+0x64>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	20004148 	.word	0x20004148
 80029d4:	000f4240 	.word	0x000f4240

080029d8 <NMI_Handler>:
 80029d8:	4770      	bx	lr

080029da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029da:	e7fe      	b.n	80029da <HardFault_Handler>

080029dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	e7fe      	b.n	80029de <BusFault_Handler>

080029e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler>

080029e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e2:	4770      	bx	lr

080029e4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <TIM2_IRQHandler+0x8>)
 80029e6:	f7fe bb18 	b.w	800101a <HAL_TIM_IRQHandler>
 80029ea:	bf00      	nop
 80029ec:	20004148 	.word	0x20004148

080029f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	460e      	mov	r6, r1
 80029f4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	460c      	mov	r4, r1
 80029f8:	1ba3      	subs	r3, r4, r6
 80029fa:	429d      	cmp	r5, r3
 80029fc:	dc01      	bgt.n	8002a02 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80029fe:	4628      	mov	r0, r5
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002a02:	f7ff fdc7 	bl	8002594 <__io_getchar>
 8002a06:	f804 0b01 	strb.w	r0, [r4], #1
 8002a0a:	e7f5      	b.n	80029f8 <_read+0x8>

08002a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	460e      	mov	r6, r1
 8002a10:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	460c      	mov	r4, r1
 8002a14:	1ba3      	subs	r3, r4, r6
 8002a16:	429d      	cmp	r5, r3
 8002a18:	dc01      	bgt.n	8002a1e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002a1e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a22:	f7ff fda3 	bl	800256c <__io_putchar>
 8002a26:	e7f5      	b.n	8002a14 <_write+0x8>

08002a28 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002a28:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <_sbrk+0x2c>)
 8002a2c:	6819      	ldr	r1, [r3, #0]
{
 8002a2e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002a30:	b909      	cbnz	r1, 8002a36 <_sbrk+0xe>
		heap_end = &end;
 8002a32:	4909      	ldr	r1, [pc, #36]	; (8002a58 <_sbrk+0x30>)
 8002a34:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002a36:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002a38:	4669      	mov	r1, sp
 8002a3a:	4402      	add	r2, r0
 8002a3c:	428a      	cmp	r2, r1
 8002a3e:	d906      	bls.n	8002a4e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002a40:	f000 f850 	bl	8002ae4 <__errno>
 8002a44:	230c      	movs	r3, #12
 8002a46:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002a4e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002a50:	bd08      	pop	{r3, pc}
 8002a52:	bf00      	nop
 8002a54:	2000402c 	.word	0x2000402c
 8002a58:	2000418c 	.word	0x2000418c

08002a5c <_close>:

int _close(int file)
{
	return -1;
}
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	4770      	bx	lr

08002a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a66:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4770      	bx	lr

08002a6c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	4770      	bx	lr

08002a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002a70:	2000      	movs	r0, #0
 8002a72:	4770      	bx	lr

08002a74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SystemInit+0x18>)
 8002a76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a7a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a96:	e003      	b.n	8002aa0 <LoopCopyDataInit>

08002a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a9e:	3104      	adds	r1, #4

08002aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002aa8:	d3f6      	bcc.n	8002a98 <CopyDataInit>
  ldr  r2, =_sbss
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002aac:	e002      	b.n	8002ab4 <LoopFillZerobss>

08002aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ab0:	f842 3b04 	str.w	r3, [r2], #4

08002ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ab8:	d3f9      	bcc.n	8002aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002aba:	f7ff ffdb 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002abe:	f000 f817 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ac2:	f7ff fdc9 	bl	8002658 <main>
  bx  lr    
 8002ac6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002acc:	08003ce0 	.word	0x08003ce0
  ldr  r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ad4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002ad8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002adc:	2000418c 	.word	0x2000418c

08002ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae0:	e7fe      	b.n	8002ae0 <ADC_IRQHandler>
	...

08002ae4 <__errno>:
 8002ae4:	4b01      	ldr	r3, [pc, #4]	; (8002aec <__errno+0x8>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000010 	.word	0x20000010

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4e0d      	ldr	r6, [pc, #52]	; (8002b28 <__libc_init_array+0x38>)
 8002af4:	4c0d      	ldr	r4, [pc, #52]	; (8002b2c <__libc_init_array+0x3c>)
 8002af6:	1ba4      	subs	r4, r4, r6
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	2500      	movs	r5, #0
 8002afc:	42a5      	cmp	r5, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	4e0b      	ldr	r6, [pc, #44]	; (8002b30 <__libc_init_array+0x40>)
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__libc_init_array+0x44>)
 8002b04:	f001 f818 	bl	8003b38 <_init>
 8002b08:	1ba4      	subs	r4, r4, r6
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	42a5      	cmp	r5, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b18:	4798      	blx	r3
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b22:	4798      	blx	r3
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08003cd8 	.word	0x08003cd8
 8002b2c:	08003cd8 	.word	0x08003cd8
 8002b30:	08003cd8 	.word	0x08003cd8
 8002b34:	08003cdc 	.word	0x08003cdc

08002b38 <memset>:
 8002b38:	4402      	add	r2, r0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memset+0xa>
 8002b40:	4770      	bx	lr
 8002b42:	f803 1b01 	strb.w	r1, [r3], #1
 8002b46:	e7f9      	b.n	8002b3c <memset+0x4>

08002b48 <iprintf>:
 8002b48:	b40f      	push	{r0, r1, r2, r3}
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <iprintf+0x2c>)
 8002b4c:	b513      	push	{r0, r1, r4, lr}
 8002b4e:	681c      	ldr	r4, [r3, #0]
 8002b50:	b124      	cbz	r4, 8002b5c <iprintf+0x14>
 8002b52:	69a3      	ldr	r3, [r4, #24]
 8002b54:	b913      	cbnz	r3, 8002b5c <iprintf+0x14>
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 f88c 	bl	8002c74 <__sinit>
 8002b5c:	ab05      	add	r3, sp, #20
 8002b5e:	9a04      	ldr	r2, [sp, #16]
 8002b60:	68a1      	ldr	r1, [r4, #8]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	4620      	mov	r0, r4
 8002b66:	f000 f9b3 	bl	8002ed0 <_vfiprintf_r>
 8002b6a:	b002      	add	sp, #8
 8002b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b70:	b004      	add	sp, #16
 8002b72:	4770      	bx	lr
 8002b74:	20000010 	.word	0x20000010

08002b78 <__srget_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	b118      	cbz	r0, 8002b88 <__srget_r+0x10>
 8002b80:	6983      	ldr	r3, [r0, #24]
 8002b82:	b90b      	cbnz	r3, 8002b88 <__srget_r+0x10>
 8002b84:	f000 f876 	bl	8002c74 <__sinit>
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <__srget_r+0x4c>)
 8002b8a:	429c      	cmp	r4, r3
 8002b8c:	d10d      	bne.n	8002baa <__srget_r+0x32>
 8002b8e:	686c      	ldr	r4, [r5, #4]
 8002b90:	4621      	mov	r1, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 fc52 	bl	800343c <__srefill_r>
 8002b98:	b988      	cbnz	r0, 8002bbe <__srget_r+0x46>
 8002b9a:	6863      	ldr	r3, [r4, #4]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	6063      	str	r3, [r4, #4]
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	6022      	str	r2, [r4, #0]
 8002ba6:	7818      	ldrb	r0, [r3, #0]
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <__srget_r+0x50>)
 8002bac:	429c      	cmp	r4, r3
 8002bae:	d101      	bne.n	8002bb4 <__srget_r+0x3c>
 8002bb0:	68ac      	ldr	r4, [r5, #8]
 8002bb2:	e7ed      	b.n	8002b90 <__srget_r+0x18>
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <__srget_r+0x54>)
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	bf08      	it	eq
 8002bba:	68ec      	ldreq	r4, [r5, #12]
 8002bbc:	e7e8      	b.n	8002b90 <__srget_r+0x18>
 8002bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	08003c5c 	.word	0x08003c5c
 8002bc8:	08003c7c 	.word	0x08003c7c
 8002bcc:	08003c3c 	.word	0x08003c3c

08002bd0 <strncmp>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	b16a      	cbz	r2, 8002bf0 <strncmp+0x20>
 8002bd4:	3901      	subs	r1, #1
 8002bd6:	1884      	adds	r4, r0, r2
 8002bd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002bdc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <strncmp+0x1c>
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d001      	beq.n	8002bec <strncmp+0x1c>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f5      	bne.n	8002bd8 <strncmp+0x8>
 8002bec:	1a98      	subs	r0, r3, r2
 8002bee:	bd10      	pop	{r4, pc}
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <_cleanup_r>:
 8002bf4:	4901      	ldr	r1, [pc, #4]	; (8002bfc <_cleanup_r+0x8>)
 8002bf6:	f000 b8c5 	b.w	8002d84 <_fwalk_reent>
 8002bfa:	bf00      	nop
 8002bfc:	080038cd 	.word	0x080038cd

08002c00 <std.isra.0>:
 8002c00:	2300      	movs	r3, #0
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
 8002c06:	6003      	str	r3, [r0, #0]
 8002c08:	6043      	str	r3, [r0, #4]
 8002c0a:	6083      	str	r3, [r0, #8]
 8002c0c:	8181      	strh	r1, [r0, #12]
 8002c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8002c10:	81c2      	strh	r2, [r0, #14]
 8002c12:	6103      	str	r3, [r0, #16]
 8002c14:	6143      	str	r3, [r0, #20]
 8002c16:	6183      	str	r3, [r0, #24]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	305c      	adds	r0, #92	; 0x5c
 8002c1e:	f7ff ff8b 	bl	8002b38 <memset>
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <std.isra.0+0x38>)
 8002c24:	6263      	str	r3, [r4, #36]	; 0x24
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <std.isra.0+0x3c>)
 8002c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <std.isra.0+0x40>)
 8002c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <std.isra.0+0x44>)
 8002c30:	6224      	str	r4, [r4, #32]
 8002c32:	6323      	str	r3, [r4, #48]	; 0x30
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	bf00      	nop
 8002c38:	08003571 	.word	0x08003571
 8002c3c:	08003593 	.word	0x08003593
 8002c40:	080035cb 	.word	0x080035cb
 8002c44:	080035ef 	.word	0x080035ef

08002c48 <__sfmoreglue>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	1e4a      	subs	r2, r1, #1
 8002c4c:	2568      	movs	r5, #104	; 0x68
 8002c4e:	4355      	muls	r5, r2
 8002c50:	460e      	mov	r6, r1
 8002c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c56:	f000 f8b3 	bl	8002dc0 <_malloc_r>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b140      	cbz	r0, 8002c70 <__sfmoreglue+0x28>
 8002c5e:	2100      	movs	r1, #0
 8002c60:	e880 0042 	stmia.w	r0, {r1, r6}
 8002c64:	300c      	adds	r0, #12
 8002c66:	60a0      	str	r0, [r4, #8]
 8002c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c6c:	f7ff ff64 	bl	8002b38 <memset>
 8002c70:	4620      	mov	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}

08002c74 <__sinit>:
 8002c74:	6983      	ldr	r3, [r0, #24]
 8002c76:	b510      	push	{r4, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	bb33      	cbnz	r3, 8002cca <__sinit+0x56>
 8002c7c:	6483      	str	r3, [r0, #72]	; 0x48
 8002c7e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002c80:	6503      	str	r3, [r0, #80]	; 0x50
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <__sinit+0x58>)
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <__sinit+0x5c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6282      	str	r2, [r0, #40]	; 0x28
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	bf04      	itt	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	6183      	streq	r3, [r0, #24]
 8002c92:	f000 f81f 	bl	8002cd4 <__sfp>
 8002c96:	6060      	str	r0, [r4, #4]
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 f81b 	bl	8002cd4 <__sfp>
 8002c9e:	60a0      	str	r0, [r4, #8]
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f817 	bl	8002cd4 <__sfp>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60e0      	str	r0, [r4, #12]
 8002caa:	2104      	movs	r1, #4
 8002cac:	6860      	ldr	r0, [r4, #4]
 8002cae:	f7ff ffa7 	bl	8002c00 <std.isra.0>
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2109      	movs	r1, #9
 8002cb6:	68a0      	ldr	r0, [r4, #8]
 8002cb8:	f7ff ffa2 	bl	8002c00 <std.isra.0>
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2112      	movs	r1, #18
 8002cc0:	68e0      	ldr	r0, [r4, #12]
 8002cc2:	f7ff ff9d 	bl	8002c00 <std.isra.0>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61a3      	str	r3, [r4, #24]
 8002cca:	bd10      	pop	{r4, pc}
 8002ccc:	08003c38 	.word	0x08003c38
 8002cd0:	08002bf5 	.word	0x08002bf5

08002cd4 <__sfp>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <__sfp+0x74>)
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	69b3      	ldr	r3, [r6, #24]
 8002cdc:	4607      	mov	r7, r0
 8002cde:	b913      	cbnz	r3, 8002ce6 <__sfp+0x12>
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ffc7 	bl	8002c74 <__sinit>
 8002ce6:	3648      	adds	r6, #72	; 0x48
 8002ce8:	68b4      	ldr	r4, [r6, #8]
 8002cea:	6873      	ldr	r3, [r6, #4]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	d503      	bpl.n	8002cf8 <__sfp+0x24>
 8002cf0:	6833      	ldr	r3, [r6, #0]
 8002cf2:	b133      	cbz	r3, 8002d02 <__sfp+0x2e>
 8002cf4:	6836      	ldr	r6, [r6, #0]
 8002cf6:	e7f7      	b.n	8002ce8 <__sfp+0x14>
 8002cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cfc:	b16d      	cbz	r5, 8002d1a <__sfp+0x46>
 8002cfe:	3468      	adds	r4, #104	; 0x68
 8002d00:	e7f4      	b.n	8002cec <__sfp+0x18>
 8002d02:	2104      	movs	r1, #4
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff ff9f 	bl	8002c48 <__sfmoreglue>
 8002d0a:	6030      	str	r0, [r6, #0]
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d1f1      	bne.n	8002cf4 <__sfp+0x20>
 8002d10:	230c      	movs	r3, #12
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4604      	mov	r4, r0
 8002d16:	4620      	mov	r0, r4
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1e:	81e3      	strh	r3, [r4, #14]
 8002d20:	2301      	movs	r3, #1
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	6665      	str	r5, [r4, #100]	; 0x64
 8002d26:	6025      	str	r5, [r4, #0]
 8002d28:	60a5      	str	r5, [r4, #8]
 8002d2a:	6065      	str	r5, [r4, #4]
 8002d2c:	6125      	str	r5, [r4, #16]
 8002d2e:	6165      	str	r5, [r4, #20]
 8002d30:	61a5      	str	r5, [r4, #24]
 8002d32:	2208      	movs	r2, #8
 8002d34:	4629      	mov	r1, r5
 8002d36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d3a:	f7ff fefd 	bl	8002b38 <memset>
 8002d3e:	6365      	str	r5, [r4, #52]	; 0x34
 8002d40:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d42:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d46:	e7e6      	b.n	8002d16 <__sfp+0x42>
 8002d48:	08003c38 	.word	0x08003c38

08002d4c <_fwalk>:
 8002d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d50:	4688      	mov	r8, r1
 8002d52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d56:	2600      	movs	r6, #0
 8002d58:	b914      	cbnz	r4, 8002d60 <_fwalk+0x14>
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d60:	68a5      	ldr	r5, [r4, #8]
 8002d62:	6867      	ldr	r7, [r4, #4]
 8002d64:	3f01      	subs	r7, #1
 8002d66:	d501      	bpl.n	8002d6c <_fwalk+0x20>
 8002d68:	6824      	ldr	r4, [r4, #0]
 8002d6a:	e7f5      	b.n	8002d58 <_fwalk+0xc>
 8002d6c:	89ab      	ldrh	r3, [r5, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d906      	bls.n	8002d80 <_fwalk+0x34>
 8002d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d76:	3301      	adds	r3, #1
 8002d78:	d002      	beq.n	8002d80 <_fwalk+0x34>
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	47c0      	blx	r8
 8002d7e:	4306      	orrs	r6, r0
 8002d80:	3568      	adds	r5, #104	; 0x68
 8002d82:	e7ef      	b.n	8002d64 <_fwalk+0x18>

08002d84 <_fwalk_reent>:
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d88:	4680      	mov	r8, r0
 8002d8a:	4689      	mov	r9, r1
 8002d8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d90:	2600      	movs	r6, #0
 8002d92:	b914      	cbnz	r4, 8002d9a <_fwalk_reent+0x16>
 8002d94:	4630      	mov	r0, r6
 8002d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d9a:	68a5      	ldr	r5, [r4, #8]
 8002d9c:	6867      	ldr	r7, [r4, #4]
 8002d9e:	3f01      	subs	r7, #1
 8002da0:	d501      	bpl.n	8002da6 <_fwalk_reent+0x22>
 8002da2:	6824      	ldr	r4, [r4, #0]
 8002da4:	e7f5      	b.n	8002d92 <_fwalk_reent+0xe>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d907      	bls.n	8002dbc <_fwalk_reent+0x38>
 8002dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db0:	3301      	adds	r3, #1
 8002db2:	d003      	beq.n	8002dbc <_fwalk_reent+0x38>
 8002db4:	4629      	mov	r1, r5
 8002db6:	4640      	mov	r0, r8
 8002db8:	47c8      	blx	r9
 8002dba:	4306      	orrs	r6, r0
 8002dbc:	3568      	adds	r5, #104	; 0x68
 8002dbe:	e7ee      	b.n	8002d9e <_fwalk_reent+0x1a>

08002dc0 <_malloc_r>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	1ccd      	adds	r5, r1, #3
 8002dc4:	f025 0503 	bic.w	r5, r5, #3
 8002dc8:	3508      	adds	r5, #8
 8002dca:	2d0c      	cmp	r5, #12
 8002dcc:	bf38      	it	cc
 8002dce:	250c      	movcc	r5, #12
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	db01      	blt.n	8002dda <_malloc_r+0x1a>
 8002dd6:	42a9      	cmp	r1, r5
 8002dd8:	d903      	bls.n	8002de2 <_malloc_r+0x22>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	2000      	movs	r0, #0
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	f000 fe25 	bl	8003a30 <__malloc_lock>
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <_malloc_r+0xb4>)
 8002de8:	6814      	ldr	r4, [r2, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	b991      	cbnz	r1, 8002e14 <_malloc_r+0x54>
 8002dee:	4c22      	ldr	r4, [pc, #136]	; (8002e78 <_malloc_r+0xb8>)
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	b91b      	cbnz	r3, 8002dfc <_malloc_r+0x3c>
 8002df4:	4630      	mov	r0, r6
 8002df6:	f000 fbab 	bl	8003550 <_sbrk_r>
 8002dfa:	6020      	str	r0, [r4, #0]
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f000 fba6 	bl	8003550 <_sbrk_r>
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d126      	bne.n	8002e56 <_malloc_r+0x96>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	6033      	str	r3, [r6, #0]
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f000 fe10 	bl	8003a32 <__malloc_unlock>
 8002e12:	e7e4      	b.n	8002dde <_malloc_r+0x1e>
 8002e14:	680b      	ldr	r3, [r1, #0]
 8002e16:	1b5b      	subs	r3, r3, r5
 8002e18:	d41a      	bmi.n	8002e50 <_malloc_r+0x90>
 8002e1a:	2b0b      	cmp	r3, #11
 8002e1c:	d90f      	bls.n	8002e3e <_malloc_r+0x7e>
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	50cd      	str	r5, [r1, r3]
 8002e22:	18cc      	adds	r4, r1, r3
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 fe04 	bl	8003a32 <__malloc_unlock>
 8002e2a:	f104 000b 	add.w	r0, r4, #11
 8002e2e:	1d23      	adds	r3, r4, #4
 8002e30:	f020 0007 	bic.w	r0, r0, #7
 8002e34:	1ac3      	subs	r3, r0, r3
 8002e36:	d01b      	beq.n	8002e70 <_malloc_r+0xb0>
 8002e38:	425a      	negs	r2, r3
 8002e3a:	50e2      	str	r2, [r4, r3]
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	428c      	cmp	r4, r1
 8002e40:	bf0d      	iteet	eq
 8002e42:	6863      	ldreq	r3, [r4, #4]
 8002e44:	684b      	ldrne	r3, [r1, #4]
 8002e46:	6063      	strne	r3, [r4, #4]
 8002e48:	6013      	streq	r3, [r2, #0]
 8002e4a:	bf18      	it	ne
 8002e4c:	460c      	movne	r4, r1
 8002e4e:	e7e9      	b.n	8002e24 <_malloc_r+0x64>
 8002e50:	460c      	mov	r4, r1
 8002e52:	6849      	ldr	r1, [r1, #4]
 8002e54:	e7ca      	b.n	8002dec <_malloc_r+0x2c>
 8002e56:	1cc4      	adds	r4, r0, #3
 8002e58:	f024 0403 	bic.w	r4, r4, #3
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d005      	beq.n	8002e6c <_malloc_r+0xac>
 8002e60:	1a21      	subs	r1, r4, r0
 8002e62:	4630      	mov	r0, r6
 8002e64:	f000 fb74 	bl	8003550 <_sbrk_r>
 8002e68:	3001      	adds	r0, #1
 8002e6a:	d0cd      	beq.n	8002e08 <_malloc_r+0x48>
 8002e6c:	6025      	str	r5, [r4, #0]
 8002e6e:	e7d9      	b.n	8002e24 <_malloc_r+0x64>
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	bf00      	nop
 8002e74:	20004030 	.word	0x20004030
 8002e78:	20004034 	.word	0x20004034

08002e7c <__sfputc_r>:
 8002e7c:	6893      	ldr	r3, [r2, #8]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	b410      	push	{r4}
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	da09      	bge.n	8002e9c <__sfputc_r+0x20>
 8002e88:	6994      	ldr	r4, [r2, #24]
 8002e8a:	42a3      	cmp	r3, r4
 8002e8c:	db02      	blt.n	8002e94 <__sfputc_r+0x18>
 8002e8e:	b2cb      	uxtb	r3, r1
 8002e90:	2b0a      	cmp	r3, #10
 8002e92:	d103      	bne.n	8002e9c <__sfputc_r+0x20>
 8002e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e98:	f000 bbae 	b.w	80035f8 <__swbuf_r>
 8002e9c:	6813      	ldr	r3, [r2, #0]
 8002e9e:	1c58      	adds	r0, r3, #1
 8002ea0:	6010      	str	r0, [r2, #0]
 8002ea2:	7019      	strb	r1, [r3, #0]
 8002ea4:	b2c8      	uxtb	r0, r1
 8002ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <__sfputs_r>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	4606      	mov	r6, r0
 8002eb0:	460f      	mov	r7, r1
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	18d5      	adds	r5, r2, r3
 8002eb6:	42ac      	cmp	r4, r5
 8002eb8:	d101      	bne.n	8002ebe <__sfputs_r+0x12>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e007      	b.n	8002ece <__sfputs_r+0x22>
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f7ff ffd9 	bl	8002e7c <__sfputc_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d1f3      	bne.n	8002eb6 <__sfputs_r+0xa>
 8002ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ed0 <_vfiprintf_r>:
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	b09d      	sub	sp, #116	; 0x74
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4617      	mov	r7, r2
 8002eda:	9303      	str	r3, [sp, #12]
 8002edc:	4606      	mov	r6, r0
 8002ede:	b118      	cbz	r0, 8002ee8 <_vfiprintf_r+0x18>
 8002ee0:	6983      	ldr	r3, [r0, #24]
 8002ee2:	b90b      	cbnz	r3, 8002ee8 <_vfiprintf_r+0x18>
 8002ee4:	f7ff fec6 	bl	8002c74 <__sinit>
 8002ee8:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <_vfiprintf_r+0x20c>)
 8002eea:	429c      	cmp	r4, r3
 8002eec:	d157      	bne.n	8002f9e <_vfiprintf_r+0xce>
 8002eee:	6874      	ldr	r4, [r6, #4]
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	0718      	lsls	r0, r3, #28
 8002ef4:	d55d      	bpl.n	8002fb2 <_vfiprintf_r+0xe2>
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05a      	beq.n	8002fb2 <_vfiprintf_r+0xe2>
 8002efc:	2300      	movs	r3, #0
 8002efe:	9309      	str	r3, [sp, #36]	; 0x24
 8002f00:	2320      	movs	r3, #32
 8002f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f06:	2330      	movs	r3, #48	; 0x30
 8002f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f0c:	f04f 0b01 	mov.w	fp, #1
 8002f10:	46b8      	mov	r8, r7
 8002f12:	4645      	mov	r5, r8
 8002f14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d155      	bne.n	8002fc8 <_vfiprintf_r+0xf8>
 8002f1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f20:	d00b      	beq.n	8002f3a <_vfiprintf_r+0x6a>
 8002f22:	4653      	mov	r3, sl
 8002f24:	463a      	mov	r2, r7
 8002f26:	4621      	mov	r1, r4
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f7ff ffbf 	bl	8002eac <__sfputs_r>
 8002f2e:	3001      	adds	r0, #1
 8002f30:	f000 80c4 	beq.w	80030bc <_vfiprintf_r+0x1ec>
 8002f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f36:	4453      	add	r3, sl
 8002f38:	9309      	str	r3, [sp, #36]	; 0x24
 8002f3a:	f898 3000 	ldrb.w	r3, [r8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80bc 	beq.w	80030bc <_vfiprintf_r+0x1ec>
 8002f44:	2300      	movs	r3, #0
 8002f46:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4a:	9304      	str	r3, [sp, #16]
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	9205      	str	r2, [sp, #20]
 8002f50:	9306      	str	r3, [sp, #24]
 8002f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f56:	931a      	str	r3, [sp, #104]	; 0x68
 8002f58:	2205      	movs	r2, #5
 8002f5a:	7829      	ldrb	r1, [r5, #0]
 8002f5c:	4860      	ldr	r0, [pc, #384]	; (80030e0 <_vfiprintf_r+0x210>)
 8002f5e:	f7fd f93f 	bl	80001e0 <memchr>
 8002f62:	f105 0801 	add.w	r8, r5, #1
 8002f66:	9b04      	ldr	r3, [sp, #16]
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d131      	bne.n	8002fd0 <_vfiprintf_r+0x100>
 8002f6c:	06d9      	lsls	r1, r3, #27
 8002f6e:	bf44      	itt	mi
 8002f70:	2220      	movmi	r2, #32
 8002f72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f76:	071a      	lsls	r2, r3, #28
 8002f78:	bf44      	itt	mi
 8002f7a:	222b      	movmi	r2, #43	; 0x2b
 8002f7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f80:	782a      	ldrb	r2, [r5, #0]
 8002f82:	2a2a      	cmp	r2, #42	; 0x2a
 8002f84:	d02c      	beq.n	8002fe0 <_vfiprintf_r+0x110>
 8002f86:	9a07      	ldr	r2, [sp, #28]
 8002f88:	2100      	movs	r1, #0
 8002f8a:	200a      	movs	r0, #10
 8002f8c:	46a8      	mov	r8, r5
 8002f8e:	3501      	adds	r5, #1
 8002f90:	f898 3000 	ldrb.w	r3, [r8]
 8002f94:	3b30      	subs	r3, #48	; 0x30
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d96d      	bls.n	8003076 <_vfiprintf_r+0x1a6>
 8002f9a:	b371      	cbz	r1, 8002ffa <_vfiprintf_r+0x12a>
 8002f9c:	e026      	b.n	8002fec <_vfiprintf_r+0x11c>
 8002f9e:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <_vfiprintf_r+0x214>)
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	d101      	bne.n	8002fa8 <_vfiprintf_r+0xd8>
 8002fa4:	68b4      	ldr	r4, [r6, #8]
 8002fa6:	e7a3      	b.n	8002ef0 <_vfiprintf_r+0x20>
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <_vfiprintf_r+0x218>)
 8002faa:	429c      	cmp	r4, r3
 8002fac:	bf08      	it	eq
 8002fae:	68f4      	ldreq	r4, [r6, #12]
 8002fb0:	e79e      	b.n	8002ef0 <_vfiprintf_r+0x20>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 fb83 	bl	80036c0 <__swsetup_r>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d09e      	beq.n	8002efc <_vfiprintf_r+0x2c>
 8002fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc2:	b01d      	add	sp, #116	; 0x74
 8002fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc8:	2b25      	cmp	r3, #37	; 0x25
 8002fca:	d0a7      	beq.n	8002f1c <_vfiprintf_r+0x4c>
 8002fcc:	46a8      	mov	r8, r5
 8002fce:	e7a0      	b.n	8002f12 <_vfiprintf_r+0x42>
 8002fd0:	4a43      	ldr	r2, [pc, #268]	; (80030e0 <_vfiprintf_r+0x210>)
 8002fd2:	1a80      	subs	r0, r0, r2
 8002fd4:	fa0b f000 	lsl.w	r0, fp, r0
 8002fd8:	4318      	orrs	r0, r3
 8002fda:	9004      	str	r0, [sp, #16]
 8002fdc:	4645      	mov	r5, r8
 8002fde:	e7bb      	b.n	8002f58 <_vfiprintf_r+0x88>
 8002fe0:	9a03      	ldr	r2, [sp, #12]
 8002fe2:	1d11      	adds	r1, r2, #4
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	9103      	str	r1, [sp, #12]
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	db01      	blt.n	8002ff0 <_vfiprintf_r+0x120>
 8002fec:	9207      	str	r2, [sp, #28]
 8002fee:	e004      	b.n	8002ffa <_vfiprintf_r+0x12a>
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	9207      	str	r2, [sp, #28]
 8002ff8:	9304      	str	r3, [sp, #16]
 8002ffa:	f898 3000 	ldrb.w	r3, [r8]
 8002ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8003000:	d110      	bne.n	8003024 <_vfiprintf_r+0x154>
 8003002:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003006:	2b2a      	cmp	r3, #42	; 0x2a
 8003008:	f108 0101 	add.w	r1, r8, #1
 800300c:	d137      	bne.n	800307e <_vfiprintf_r+0x1ae>
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	1d1a      	adds	r2, r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	9203      	str	r2, [sp, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfb8      	it	lt
 800301a:	f04f 33ff 	movlt.w	r3, #4294967295
 800301e:	f108 0802 	add.w	r8, r8, #2
 8003022:	9305      	str	r3, [sp, #20]
 8003024:	4d31      	ldr	r5, [pc, #196]	; (80030ec <_vfiprintf_r+0x21c>)
 8003026:	f898 1000 	ldrb.w	r1, [r8]
 800302a:	2203      	movs	r2, #3
 800302c:	4628      	mov	r0, r5
 800302e:	f7fd f8d7 	bl	80001e0 <memchr>
 8003032:	b140      	cbz	r0, 8003046 <_vfiprintf_r+0x176>
 8003034:	2340      	movs	r3, #64	; 0x40
 8003036:	1b40      	subs	r0, r0, r5
 8003038:	fa03 f000 	lsl.w	r0, r3, r0
 800303c:	9b04      	ldr	r3, [sp, #16]
 800303e:	4303      	orrs	r3, r0
 8003040:	9304      	str	r3, [sp, #16]
 8003042:	f108 0801 	add.w	r8, r8, #1
 8003046:	f898 1000 	ldrb.w	r1, [r8]
 800304a:	4829      	ldr	r0, [pc, #164]	; (80030f0 <_vfiprintf_r+0x220>)
 800304c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003050:	2206      	movs	r2, #6
 8003052:	f108 0701 	add.w	r7, r8, #1
 8003056:	f7fd f8c3 	bl	80001e0 <memchr>
 800305a:	2800      	cmp	r0, #0
 800305c:	d034      	beq.n	80030c8 <_vfiprintf_r+0x1f8>
 800305e:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <_vfiprintf_r+0x224>)
 8003060:	bb03      	cbnz	r3, 80030a4 <_vfiprintf_r+0x1d4>
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	3307      	adds	r3, #7
 8003066:	f023 0307 	bic.w	r3, r3, #7
 800306a:	3308      	adds	r3, #8
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003070:	444b      	add	r3, r9
 8003072:	9309      	str	r3, [sp, #36]	; 0x24
 8003074:	e74c      	b.n	8002f10 <_vfiprintf_r+0x40>
 8003076:	fb00 3202 	mla	r2, r0, r2, r3
 800307a:	2101      	movs	r1, #1
 800307c:	e786      	b.n	8002f8c <_vfiprintf_r+0xbc>
 800307e:	2300      	movs	r3, #0
 8003080:	9305      	str	r3, [sp, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	250a      	movs	r5, #10
 8003086:	4688      	mov	r8, r1
 8003088:	3101      	adds	r1, #1
 800308a:	f898 2000 	ldrb.w	r2, [r8]
 800308e:	3a30      	subs	r2, #48	; 0x30
 8003090:	2a09      	cmp	r2, #9
 8003092:	d903      	bls.n	800309c <_vfiprintf_r+0x1cc>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0c5      	beq.n	8003024 <_vfiprintf_r+0x154>
 8003098:	9005      	str	r0, [sp, #20]
 800309a:	e7c3      	b.n	8003024 <_vfiprintf_r+0x154>
 800309c:	fb05 2000 	mla	r0, r5, r0, r2
 80030a0:	2301      	movs	r3, #1
 80030a2:	e7f0      	b.n	8003086 <_vfiprintf_r+0x1b6>
 80030a4:	ab03      	add	r3, sp, #12
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4622      	mov	r2, r4
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <_vfiprintf_r+0x228>)
 80030ac:	a904      	add	r1, sp, #16
 80030ae:	4630      	mov	r0, r6
 80030b0:	f3af 8000 	nop.w
 80030b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030b8:	4681      	mov	r9, r0
 80030ba:	d1d8      	bne.n	800306e <_vfiprintf_r+0x19e>
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	065b      	lsls	r3, r3, #25
 80030c0:	f53f af7d 	bmi.w	8002fbe <_vfiprintf_r+0xee>
 80030c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c6:	e77c      	b.n	8002fc2 <_vfiprintf_r+0xf2>
 80030c8:	ab03      	add	r3, sp, #12
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4622      	mov	r2, r4
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <_vfiprintf_r+0x228>)
 80030d0:	a904      	add	r1, sp, #16
 80030d2:	4630      	mov	r0, r6
 80030d4:	f000 f888 	bl	80031e8 <_printf_i>
 80030d8:	e7ec      	b.n	80030b4 <_vfiprintf_r+0x1e4>
 80030da:	bf00      	nop
 80030dc:	08003c5c 	.word	0x08003c5c
 80030e0:	08003c9c 	.word	0x08003c9c
 80030e4:	08003c7c 	.word	0x08003c7c
 80030e8:	08003c3c 	.word	0x08003c3c
 80030ec:	08003ca2 	.word	0x08003ca2
 80030f0:	08003ca6 	.word	0x08003ca6
 80030f4:	00000000 	.word	0x00000000
 80030f8:	08002ead 	.word	0x08002ead

080030fc <_printf_common>:
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003100:	4691      	mov	r9, r2
 8003102:	461f      	mov	r7, r3
 8003104:	688a      	ldr	r2, [r1, #8]
 8003106:	690b      	ldr	r3, [r1, #16]
 8003108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800310c:	4293      	cmp	r3, r2
 800310e:	bfb8      	it	lt
 8003110:	4613      	movlt	r3, r2
 8003112:	f8c9 3000 	str.w	r3, [r9]
 8003116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800311a:	4606      	mov	r6, r0
 800311c:	460c      	mov	r4, r1
 800311e:	b112      	cbz	r2, 8003126 <_printf_common+0x2a>
 8003120:	3301      	adds	r3, #1
 8003122:	f8c9 3000 	str.w	r3, [r9]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	0699      	lsls	r1, r3, #26
 800312a:	bf42      	ittt	mi
 800312c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003130:	3302      	addmi	r3, #2
 8003132:	f8c9 3000 	strmi.w	r3, [r9]
 8003136:	6825      	ldr	r5, [r4, #0]
 8003138:	f015 0506 	ands.w	r5, r5, #6
 800313c:	d107      	bne.n	800314e <_printf_common+0x52>
 800313e:	f104 0a19 	add.w	sl, r4, #25
 8003142:	68e3      	ldr	r3, [r4, #12]
 8003144:	f8d9 2000 	ldr.w	r2, [r9]
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	429d      	cmp	r5, r3
 800314c:	db29      	blt.n	80031a2 <_printf_common+0xa6>
 800314e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	3300      	adds	r3, #0
 8003156:	bf18      	it	ne
 8003158:	2301      	movne	r3, #1
 800315a:	0692      	lsls	r2, r2, #26
 800315c:	d42e      	bmi.n	80031bc <_printf_common+0xc0>
 800315e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003162:	4639      	mov	r1, r7
 8003164:	4630      	mov	r0, r6
 8003166:	47c0      	blx	r8
 8003168:	3001      	adds	r0, #1
 800316a:	d021      	beq.n	80031b0 <_printf_common+0xb4>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	68e5      	ldr	r5, [r4, #12]
 8003170:	f8d9 2000 	ldr.w	r2, [r9]
 8003174:	f003 0306 	and.w	r3, r3, #6
 8003178:	2b04      	cmp	r3, #4
 800317a:	bf08      	it	eq
 800317c:	1aad      	subeq	r5, r5, r2
 800317e:	68a3      	ldr	r3, [r4, #8]
 8003180:	6922      	ldr	r2, [r4, #16]
 8003182:	bf0c      	ite	eq
 8003184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003188:	2500      	movne	r5, #0
 800318a:	4293      	cmp	r3, r2
 800318c:	bfc4      	itt	gt
 800318e:	1a9b      	subgt	r3, r3, r2
 8003190:	18ed      	addgt	r5, r5, r3
 8003192:	f04f 0900 	mov.w	r9, #0
 8003196:	341a      	adds	r4, #26
 8003198:	454d      	cmp	r5, r9
 800319a:	d11b      	bne.n	80031d4 <_printf_common+0xd8>
 800319c:	2000      	movs	r0, #0
 800319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a2:	2301      	movs	r3, #1
 80031a4:	4652      	mov	r2, sl
 80031a6:	4639      	mov	r1, r7
 80031a8:	4630      	mov	r0, r6
 80031aa:	47c0      	blx	r8
 80031ac:	3001      	adds	r0, #1
 80031ae:	d103      	bne.n	80031b8 <_printf_common+0xbc>
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	3501      	adds	r5, #1
 80031ba:	e7c2      	b.n	8003142 <_printf_common+0x46>
 80031bc:	18e1      	adds	r1, r4, r3
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	2030      	movs	r0, #48	; 0x30
 80031c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031c6:	4422      	add	r2, r4
 80031c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d0:	3302      	adds	r3, #2
 80031d2:	e7c4      	b.n	800315e <_printf_common+0x62>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4622      	mov	r2, r4
 80031d8:	4639      	mov	r1, r7
 80031da:	4630      	mov	r0, r6
 80031dc:	47c0      	blx	r8
 80031de:	3001      	adds	r0, #1
 80031e0:	d0e6      	beq.n	80031b0 <_printf_common+0xb4>
 80031e2:	f109 0901 	add.w	r9, r9, #1
 80031e6:	e7d7      	b.n	8003198 <_printf_common+0x9c>

080031e8 <_printf_i>:
 80031e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031ec:	4617      	mov	r7, r2
 80031ee:	7e0a      	ldrb	r2, [r1, #24]
 80031f0:	b085      	sub	sp, #20
 80031f2:	2a6e      	cmp	r2, #110	; 0x6e
 80031f4:	4698      	mov	r8, r3
 80031f6:	4606      	mov	r6, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003200:	f000 80bc 	beq.w	800337c <_printf_i+0x194>
 8003204:	d81a      	bhi.n	800323c <_printf_i+0x54>
 8003206:	2a63      	cmp	r2, #99	; 0x63
 8003208:	d02e      	beq.n	8003268 <_printf_i+0x80>
 800320a:	d80a      	bhi.n	8003222 <_printf_i+0x3a>
 800320c:	2a00      	cmp	r2, #0
 800320e:	f000 80c8 	beq.w	80033a2 <_printf_i+0x1ba>
 8003212:	2a58      	cmp	r2, #88	; 0x58
 8003214:	f000 808a 	beq.w	800332c <_printf_i+0x144>
 8003218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003220:	e02a      	b.n	8003278 <_printf_i+0x90>
 8003222:	2a64      	cmp	r2, #100	; 0x64
 8003224:	d001      	beq.n	800322a <_printf_i+0x42>
 8003226:	2a69      	cmp	r2, #105	; 0x69
 8003228:	d1f6      	bne.n	8003218 <_printf_i+0x30>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003232:	d023      	beq.n	800327c <_printf_i+0x94>
 8003234:	1d11      	adds	r1, r2, #4
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	e027      	b.n	800328c <_printf_i+0xa4>
 800323c:	2a73      	cmp	r2, #115	; 0x73
 800323e:	f000 80b4 	beq.w	80033aa <_printf_i+0x1c2>
 8003242:	d808      	bhi.n	8003256 <_printf_i+0x6e>
 8003244:	2a6f      	cmp	r2, #111	; 0x6f
 8003246:	d02a      	beq.n	800329e <_printf_i+0xb6>
 8003248:	2a70      	cmp	r2, #112	; 0x70
 800324a:	d1e5      	bne.n	8003218 <_printf_i+0x30>
 800324c:	680a      	ldr	r2, [r1, #0]
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	600a      	str	r2, [r1, #0]
 8003254:	e003      	b.n	800325e <_printf_i+0x76>
 8003256:	2a75      	cmp	r2, #117	; 0x75
 8003258:	d021      	beq.n	800329e <_printf_i+0xb6>
 800325a:	2a78      	cmp	r2, #120	; 0x78
 800325c:	d1dc      	bne.n	8003218 <_printf_i+0x30>
 800325e:	2278      	movs	r2, #120	; 0x78
 8003260:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003264:	496e      	ldr	r1, [pc, #440]	; (8003420 <_printf_i+0x238>)
 8003266:	e064      	b.n	8003332 <_printf_i+0x14a>
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800326e:	1d11      	adds	r1, r2, #4
 8003270:	6019      	str	r1, [r3, #0]
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003278:	2301      	movs	r3, #1
 800327a:	e0a3      	b.n	80033c4 <_printf_i+0x1dc>
 800327c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003280:	f102 0104 	add.w	r1, r2, #4
 8003284:	6019      	str	r1, [r3, #0]
 8003286:	d0d7      	beq.n	8003238 <_printf_i+0x50>
 8003288:	f9b2 3000 	ldrsh.w	r3, [r2]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da03      	bge.n	8003298 <_printf_i+0xb0>
 8003290:	222d      	movs	r2, #45	; 0x2d
 8003292:	425b      	negs	r3, r3
 8003294:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003298:	4962      	ldr	r1, [pc, #392]	; (8003424 <_printf_i+0x23c>)
 800329a:	220a      	movs	r2, #10
 800329c:	e017      	b.n	80032ce <_printf_i+0xe6>
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032a6:	d003      	beq.n	80032b0 <_printf_i+0xc8>
 80032a8:	1d08      	adds	r0, r1, #4
 80032aa:	6018      	str	r0, [r3, #0]
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	e006      	b.n	80032be <_printf_i+0xd6>
 80032b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032b4:	f101 0004 	add.w	r0, r1, #4
 80032b8:	6018      	str	r0, [r3, #0]
 80032ba:	d0f7      	beq.n	80032ac <_printf_i+0xc4>
 80032bc:	880b      	ldrh	r3, [r1, #0]
 80032be:	4959      	ldr	r1, [pc, #356]	; (8003424 <_printf_i+0x23c>)
 80032c0:	2a6f      	cmp	r2, #111	; 0x6f
 80032c2:	bf14      	ite	ne
 80032c4:	220a      	movne	r2, #10
 80032c6:	2208      	moveq	r2, #8
 80032c8:	2000      	movs	r0, #0
 80032ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032ce:	6865      	ldr	r5, [r4, #4]
 80032d0:	60a5      	str	r5, [r4, #8]
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	f2c0 809c 	blt.w	8003410 <_printf_i+0x228>
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	f020 0004 	bic.w	r0, r0, #4
 80032de:	6020      	str	r0, [r4, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d13f      	bne.n	8003364 <_printf_i+0x17c>
 80032e4:	2d00      	cmp	r5, #0
 80032e6:	f040 8095 	bne.w	8003414 <_printf_i+0x22c>
 80032ea:	4675      	mov	r5, lr
 80032ec:	2a08      	cmp	r2, #8
 80032ee:	d10b      	bne.n	8003308 <_printf_i+0x120>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	07da      	lsls	r2, r3, #31
 80032f4:	d508      	bpl.n	8003308 <_printf_i+0x120>
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	6862      	ldr	r2, [r4, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	bfde      	ittt	le
 80032fe:	2330      	movle	r3, #48	; 0x30
 8003300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003308:	ebae 0305 	sub.w	r3, lr, r5
 800330c:	6123      	str	r3, [r4, #16]
 800330e:	f8cd 8000 	str.w	r8, [sp]
 8003312:	463b      	mov	r3, r7
 8003314:	aa03      	add	r2, sp, #12
 8003316:	4621      	mov	r1, r4
 8003318:	4630      	mov	r0, r6
 800331a:	f7ff feef 	bl	80030fc <_printf_common>
 800331e:	3001      	adds	r0, #1
 8003320:	d155      	bne.n	80033ce <_printf_i+0x1e6>
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	b005      	add	sp, #20
 8003328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800332c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003330:	493c      	ldr	r1, [pc, #240]	; (8003424 <_printf_i+0x23c>)
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	f012 0f80 	tst.w	r2, #128	; 0x80
 800333a:	f100 0504 	add.w	r5, r0, #4
 800333e:	601d      	str	r5, [r3, #0]
 8003340:	d001      	beq.n	8003346 <_printf_i+0x15e>
 8003342:	6803      	ldr	r3, [r0, #0]
 8003344:	e002      	b.n	800334c <_printf_i+0x164>
 8003346:	0655      	lsls	r5, r2, #25
 8003348:	d5fb      	bpl.n	8003342 <_printf_i+0x15a>
 800334a:	8803      	ldrh	r3, [r0, #0]
 800334c:	07d0      	lsls	r0, r2, #31
 800334e:	bf44      	itt	mi
 8003350:	f042 0220 	orrmi.w	r2, r2, #32
 8003354:	6022      	strmi	r2, [r4, #0]
 8003356:	b91b      	cbnz	r3, 8003360 <_printf_i+0x178>
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	f022 0220 	bic.w	r2, r2, #32
 800335e:	6022      	str	r2, [r4, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	e7b1      	b.n	80032c8 <_printf_i+0xe0>
 8003364:	4675      	mov	r5, lr
 8003366:	fbb3 f0f2 	udiv	r0, r3, r2
 800336a:	fb02 3310 	mls	r3, r2, r0, r3
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003374:	4603      	mov	r3, r0
 8003376:	2800      	cmp	r0, #0
 8003378:	d1f5      	bne.n	8003366 <_printf_i+0x17e>
 800337a:	e7b7      	b.n	80032ec <_printf_i+0x104>
 800337c:	6808      	ldr	r0, [r1, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6949      	ldr	r1, [r1, #20]
 8003382:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003386:	d004      	beq.n	8003392 <_printf_i+0x1aa>
 8003388:	1d10      	adds	r0, r2, #4
 800338a:	6018      	str	r0, [r3, #0]
 800338c:	6813      	ldr	r3, [r2, #0]
 800338e:	6019      	str	r1, [r3, #0]
 8003390:	e007      	b.n	80033a2 <_printf_i+0x1ba>
 8003392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003396:	f102 0004 	add.w	r0, r2, #4
 800339a:	6018      	str	r0, [r3, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	d0f6      	beq.n	800338e <_printf_i+0x1a6>
 80033a0:	8019      	strh	r1, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	4675      	mov	r5, lr
 80033a8:	e7b1      	b.n	800330e <_printf_i+0x126>
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	1d11      	adds	r1, r2, #4
 80033ae:	6019      	str	r1, [r3, #0]
 80033b0:	6815      	ldr	r5, [r2, #0]
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4628      	mov	r0, r5
 80033b8:	f7fc ff12 	bl	80001e0 <memchr>
 80033bc:	b108      	cbz	r0, 80033c2 <_printf_i+0x1da>
 80033be:	1b40      	subs	r0, r0, r5
 80033c0:	6060      	str	r0, [r4, #4]
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	2300      	movs	r3, #0
 80033c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033cc:	e79f      	b.n	800330e <_printf_i+0x126>
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4639      	mov	r1, r7
 80033d4:	4630      	mov	r0, r6
 80033d6:	47c0      	blx	r8
 80033d8:	3001      	adds	r0, #1
 80033da:	d0a2      	beq.n	8003322 <_printf_i+0x13a>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	079b      	lsls	r3, r3, #30
 80033e0:	d507      	bpl.n	80033f2 <_printf_i+0x20a>
 80033e2:	2500      	movs	r5, #0
 80033e4:	f104 0919 	add.w	r9, r4, #25
 80033e8:	68e3      	ldr	r3, [r4, #12]
 80033ea:	9a03      	ldr	r2, [sp, #12]
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	429d      	cmp	r5, r3
 80033f0:	db05      	blt.n	80033fe <_printf_i+0x216>
 80033f2:	68e0      	ldr	r0, [r4, #12]
 80033f4:	9b03      	ldr	r3, [sp, #12]
 80033f6:	4298      	cmp	r0, r3
 80033f8:	bfb8      	it	lt
 80033fa:	4618      	movlt	r0, r3
 80033fc:	e793      	b.n	8003326 <_printf_i+0x13e>
 80033fe:	2301      	movs	r3, #1
 8003400:	464a      	mov	r2, r9
 8003402:	4639      	mov	r1, r7
 8003404:	4630      	mov	r0, r6
 8003406:	47c0      	blx	r8
 8003408:	3001      	adds	r0, #1
 800340a:	d08a      	beq.n	8003322 <_printf_i+0x13a>
 800340c:	3501      	adds	r5, #1
 800340e:	e7eb      	b.n	80033e8 <_printf_i+0x200>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1a7      	bne.n	8003364 <_printf_i+0x17c>
 8003414:	780b      	ldrb	r3, [r1, #0]
 8003416:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800341e:	e765      	b.n	80032ec <_printf_i+0x104>
 8003420:	08003cbe 	.word	0x08003cbe
 8003424:	08003cad 	.word	0x08003cad

08003428 <lflush>:
 8003428:	8983      	ldrh	r3, [r0, #12]
 800342a:	f003 0309 	and.w	r3, r3, #9
 800342e:	2b09      	cmp	r3, #9
 8003430:	d101      	bne.n	8003436 <lflush+0xe>
 8003432:	f000 ba75 	b.w	8003920 <fflush>
 8003436:	2000      	movs	r0, #0
 8003438:	4770      	bx	lr
	...

0800343c <__srefill_r>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	460c      	mov	r4, r1
 8003440:	4605      	mov	r5, r0
 8003442:	b118      	cbz	r0, 800344c <__srefill_r+0x10>
 8003444:	6983      	ldr	r3, [r0, #24]
 8003446:	b90b      	cbnz	r3, 800344c <__srefill_r+0x10>
 8003448:	f7ff fc14 	bl	8002c74 <__sinit>
 800344c:	4b3b      	ldr	r3, [pc, #236]	; (800353c <__srefill_r+0x100>)
 800344e:	429c      	cmp	r4, r3
 8003450:	d10a      	bne.n	8003468 <__srefill_r+0x2c>
 8003452:	686c      	ldr	r4, [r5, #4]
 8003454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003458:	2300      	movs	r3, #0
 800345a:	6063      	str	r3, [r4, #4]
 800345c:	b293      	uxth	r3, r2
 800345e:	069e      	lsls	r6, r3, #26
 8003460:	d50c      	bpl.n	800347c <__srefill_r+0x40>
 8003462:	f04f 30ff 	mov.w	r0, #4294967295
 8003466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <__srefill_r+0x104>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d101      	bne.n	8003472 <__srefill_r+0x36>
 800346e:	68ac      	ldr	r4, [r5, #8]
 8003470:	e7f0      	b.n	8003454 <__srefill_r+0x18>
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <__srefill_r+0x108>)
 8003474:	429c      	cmp	r4, r3
 8003476:	bf08      	it	eq
 8003478:	68ec      	ldreq	r4, [r5, #12]
 800347a:	e7eb      	b.n	8003454 <__srefill_r+0x18>
 800347c:	0758      	lsls	r0, r3, #29
 800347e:	d448      	bmi.n	8003512 <__srefill_r+0xd6>
 8003480:	06d9      	lsls	r1, r3, #27
 8003482:	d405      	bmi.n	8003490 <__srefill_r+0x54>
 8003484:	2309      	movs	r3, #9
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	602b      	str	r3, [r5, #0]
 800348c:	81a2      	strh	r2, [r4, #12]
 800348e:	e7e8      	b.n	8003462 <__srefill_r+0x26>
 8003490:	071a      	lsls	r2, r3, #28
 8003492:	d50b      	bpl.n	80034ac <__srefill_r+0x70>
 8003494:	4621      	mov	r1, r4
 8003496:	4628      	mov	r0, r5
 8003498:	f000 fa18 	bl	80038cc <_fflush_r>
 800349c:	2800      	cmp	r0, #0
 800349e:	d1e0      	bne.n	8003462 <__srefill_r+0x26>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	60a0      	str	r0, [r4, #8]
 80034a4:	f023 0308 	bic.w	r3, r3, #8
 80034a8:	81a3      	strh	r3, [r4, #12]
 80034aa:	61a0      	str	r0, [r4, #24]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	b91b      	cbnz	r3, 80034c0 <__srefill_r+0x84>
 80034b8:	4621      	mov	r1, r4
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 fa78 	bl	80039b0 <__smakebuf_r>
 80034c0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80034c4:	b2be      	uxth	r6, r7
 80034c6:	07b3      	lsls	r3, r6, #30
 80034c8:	d00f      	beq.n	80034ea <__srefill_r+0xae>
 80034ca:	2301      	movs	r3, #1
 80034cc:	81a3      	strh	r3, [r4, #12]
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <__srefill_r+0x10c>)
 80034d0:	491e      	ldr	r1, [pc, #120]	; (800354c <__srefill_r+0x110>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f006 0609 	and.w	r6, r6, #9
 80034d8:	f7ff fc38 	bl	8002d4c <_fwalk>
 80034dc:	2e09      	cmp	r6, #9
 80034de:	81a7      	strh	r7, [r4, #12]
 80034e0:	d103      	bne.n	80034ea <__srefill_r+0xae>
 80034e2:	4621      	mov	r1, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 f969 	bl	80037bc <__sflush_r>
 80034ea:	6922      	ldr	r2, [r4, #16]
 80034ec:	6022      	str	r2, [r4, #0]
 80034ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034f0:	6963      	ldr	r3, [r4, #20]
 80034f2:	6a21      	ldr	r1, [r4, #32]
 80034f4:	4628      	mov	r0, r5
 80034f6:	47b0      	blx	r6
 80034f8:	2800      	cmp	r0, #0
 80034fa:	6060      	str	r0, [r4, #4]
 80034fc:	dc1c      	bgt.n	8003538 <__srefill_r+0xfc>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	bf17      	itett	ne
 8003502:	2200      	movne	r2, #0
 8003504:	f043 0320 	orreq.w	r3, r3, #32
 8003508:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800350c:	6062      	strne	r2, [r4, #4]
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	e7a7      	b.n	8003462 <__srefill_r+0x26>
 8003512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003514:	2900      	cmp	r1, #0
 8003516:	d0cd      	beq.n	80034b4 <__srefill_r+0x78>
 8003518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800351c:	4299      	cmp	r1, r3
 800351e:	d002      	beq.n	8003526 <__srefill_r+0xea>
 8003520:	4628      	mov	r0, r5
 8003522:	f000 fa87 	bl	8003a34 <_free_r>
 8003526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003528:	6063      	str	r3, [r4, #4]
 800352a:	2000      	movs	r0, #0
 800352c:	6360      	str	r0, [r4, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0c0      	beq.n	80034b4 <__srefill_r+0x78>
 8003532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003538:	2000      	movs	r0, #0
 800353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353c:	08003c5c 	.word	0x08003c5c
 8003540:	08003c7c 	.word	0x08003c7c
 8003544:	08003c3c 	.word	0x08003c3c
 8003548:	08003c38 	.word	0x08003c38
 800354c:	08003429 	.word	0x08003429

08003550 <_sbrk_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4c06      	ldr	r4, [pc, #24]	; (800356c <_sbrk_r+0x1c>)
 8003554:	2300      	movs	r3, #0
 8003556:	4605      	mov	r5, r0
 8003558:	4608      	mov	r0, r1
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	f7ff fa64 	bl	8002a28 <_sbrk>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_sbrk_r+0x1a>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	b103      	cbz	r3, 800356a <_sbrk_r+0x1a>
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	20004188 	.word	0x20004188

08003570 <__sread>:
 8003570:	b510      	push	{r4, lr}
 8003572:	460c      	mov	r4, r1
 8003574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003578:	f000 faaa 	bl	8003ad0 <_read_r>
 800357c:	2800      	cmp	r0, #0
 800357e:	bfab      	itete	ge
 8003580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003582:	89a3      	ldrhlt	r3, [r4, #12]
 8003584:	181b      	addge	r3, r3, r0
 8003586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800358a:	bfac      	ite	ge
 800358c:	6563      	strge	r3, [r4, #84]	; 0x54
 800358e:	81a3      	strhlt	r3, [r4, #12]
 8003590:	bd10      	pop	{r4, pc}

08003592 <__swrite>:
 8003592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003596:	461f      	mov	r7, r3
 8003598:	898b      	ldrh	r3, [r1, #12]
 800359a:	05db      	lsls	r3, r3, #23
 800359c:	4605      	mov	r5, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	4616      	mov	r6, r2
 80035a2:	d505      	bpl.n	80035b0 <__swrite+0x1e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	2200      	movs	r2, #0
 80035a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ac:	f000 f9ca 	bl	8003944 <_lseek_r>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	4632      	mov	r2, r6
 80035be:	463b      	mov	r3, r7
 80035c0:	4628      	mov	r0, r5
 80035c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035c6:	f000 b869 	b.w	800369c <_write_r>

080035ca <__sseek>:
 80035ca:	b510      	push	{r4, lr}
 80035cc:	460c      	mov	r4, r1
 80035ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d2:	f000 f9b7 	bl	8003944 <_lseek_r>
 80035d6:	1c43      	adds	r3, r0, #1
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	bf15      	itete	ne
 80035dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80035de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035e6:	81a3      	strheq	r3, [r4, #12]
 80035e8:	bf18      	it	ne
 80035ea:	81a3      	strhne	r3, [r4, #12]
 80035ec:	bd10      	pop	{r4, pc}

080035ee <__sclose>:
 80035ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f2:	f000 b8d3 	b.w	800379c <_close_r>
	...

080035f8 <__swbuf_r>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	460e      	mov	r6, r1
 80035fc:	4614      	mov	r4, r2
 80035fe:	4605      	mov	r5, r0
 8003600:	b118      	cbz	r0, 800360a <__swbuf_r+0x12>
 8003602:	6983      	ldr	r3, [r0, #24]
 8003604:	b90b      	cbnz	r3, 800360a <__swbuf_r+0x12>
 8003606:	f7ff fb35 	bl	8002c74 <__sinit>
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <__swbuf_r+0x98>)
 800360c:	429c      	cmp	r4, r3
 800360e:	d12a      	bne.n	8003666 <__swbuf_r+0x6e>
 8003610:	686c      	ldr	r4, [r5, #4]
 8003612:	69a3      	ldr	r3, [r4, #24]
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	071a      	lsls	r2, r3, #28
 800361a:	d52e      	bpl.n	800367a <__swbuf_r+0x82>
 800361c:	6923      	ldr	r3, [r4, #16]
 800361e:	b363      	cbz	r3, 800367a <__swbuf_r+0x82>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	1ac0      	subs	r0, r0, r3
 8003626:	6963      	ldr	r3, [r4, #20]
 8003628:	b2f6      	uxtb	r6, r6
 800362a:	4298      	cmp	r0, r3
 800362c:	4637      	mov	r7, r6
 800362e:	db04      	blt.n	800363a <__swbuf_r+0x42>
 8003630:	4621      	mov	r1, r4
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f94a 	bl	80038cc <_fflush_r>
 8003638:	bb28      	cbnz	r0, 8003686 <__swbuf_r+0x8e>
 800363a:	68a3      	ldr	r3, [r4, #8]
 800363c:	3b01      	subs	r3, #1
 800363e:	60a3      	str	r3, [r4, #8]
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	6022      	str	r2, [r4, #0]
 8003646:	701e      	strb	r6, [r3, #0]
 8003648:	6963      	ldr	r3, [r4, #20]
 800364a:	3001      	adds	r0, #1
 800364c:	4298      	cmp	r0, r3
 800364e:	d004      	beq.n	800365a <__swbuf_r+0x62>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	07db      	lsls	r3, r3, #31
 8003654:	d519      	bpl.n	800368a <__swbuf_r+0x92>
 8003656:	2e0a      	cmp	r6, #10
 8003658:	d117      	bne.n	800368a <__swbuf_r+0x92>
 800365a:	4621      	mov	r1, r4
 800365c:	4628      	mov	r0, r5
 800365e:	f000 f935 	bl	80038cc <_fflush_r>
 8003662:	b190      	cbz	r0, 800368a <__swbuf_r+0x92>
 8003664:	e00f      	b.n	8003686 <__swbuf_r+0x8e>
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <__swbuf_r+0x9c>)
 8003668:	429c      	cmp	r4, r3
 800366a:	d101      	bne.n	8003670 <__swbuf_r+0x78>
 800366c:	68ac      	ldr	r4, [r5, #8]
 800366e:	e7d0      	b.n	8003612 <__swbuf_r+0x1a>
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <__swbuf_r+0xa0>)
 8003672:	429c      	cmp	r4, r3
 8003674:	bf08      	it	eq
 8003676:	68ec      	ldreq	r4, [r5, #12]
 8003678:	e7cb      	b.n	8003612 <__swbuf_r+0x1a>
 800367a:	4621      	mov	r1, r4
 800367c:	4628      	mov	r0, r5
 800367e:	f000 f81f 	bl	80036c0 <__swsetup_r>
 8003682:	2800      	cmp	r0, #0
 8003684:	d0cc      	beq.n	8003620 <__swbuf_r+0x28>
 8003686:	f04f 37ff 	mov.w	r7, #4294967295
 800368a:	4638      	mov	r0, r7
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368e:	bf00      	nop
 8003690:	08003c5c 	.word	0x08003c5c
 8003694:	08003c7c 	.word	0x08003c7c
 8003698:	08003c3c 	.word	0x08003c3c

0800369c <_write_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4c07      	ldr	r4, [pc, #28]	; (80036bc <_write_r+0x20>)
 80036a0:	4605      	mov	r5, r0
 80036a2:	4608      	mov	r0, r1
 80036a4:	4611      	mov	r1, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	6022      	str	r2, [r4, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7ff f9ae 	bl	8002a0c <_write>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_write_r+0x1e>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_write_r+0x1e>
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	20004188 	.word	0x20004188

080036c0 <__swsetup_r>:
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <__swsetup_r+0xcc>)
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	4606      	mov	r6, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	b125      	cbz	r5, 80036d6 <__swsetup_r+0x16>
 80036cc:	69ab      	ldr	r3, [r5, #24]
 80036ce:	b913      	cbnz	r3, 80036d6 <__swsetup_r+0x16>
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff facf 	bl	8002c74 <__sinit>
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <__swsetup_r+0xd0>)
 80036d8:	429c      	cmp	r4, r3
 80036da:	d10f      	bne.n	80036fc <__swsetup_r+0x3c>
 80036dc:	686c      	ldr	r4, [r5, #4]
 80036de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	0715      	lsls	r5, r2, #28
 80036e6:	d42c      	bmi.n	8003742 <__swsetup_r+0x82>
 80036e8:	06d0      	lsls	r0, r2, #27
 80036ea:	d411      	bmi.n	8003710 <__swsetup_r+0x50>
 80036ec:	2209      	movs	r2, #9
 80036ee:	6032      	str	r2, [r6, #0]
 80036f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <__swsetup_r+0xd4>)
 80036fe:	429c      	cmp	r4, r3
 8003700:	d101      	bne.n	8003706 <__swsetup_r+0x46>
 8003702:	68ac      	ldr	r4, [r5, #8]
 8003704:	e7eb      	b.n	80036de <__swsetup_r+0x1e>
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <__swsetup_r+0xd8>)
 8003708:	429c      	cmp	r4, r3
 800370a:	bf08      	it	eq
 800370c:	68ec      	ldreq	r4, [r5, #12]
 800370e:	e7e6      	b.n	80036de <__swsetup_r+0x1e>
 8003710:	0751      	lsls	r1, r2, #29
 8003712:	d512      	bpl.n	800373a <__swsetup_r+0x7a>
 8003714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003716:	b141      	cbz	r1, 800372a <__swsetup_r+0x6a>
 8003718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800371c:	4299      	cmp	r1, r3
 800371e:	d002      	beq.n	8003726 <__swsetup_r+0x66>
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f987 	bl	8003a34 <_free_r>
 8003726:	2300      	movs	r3, #0
 8003728:	6363      	str	r3, [r4, #52]	; 0x34
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	2300      	movs	r3, #0
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	b94b      	cbnz	r3, 800375a <__swsetup_r+0x9a>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d003      	beq.n	800375a <__swsetup_r+0x9a>
 8003752:	4621      	mov	r1, r4
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f92b 	bl	80039b0 <__smakebuf_r>
 800375a:	89a2      	ldrh	r2, [r4, #12]
 800375c:	f012 0301 	ands.w	r3, r2, #1
 8003760:	d00c      	beq.n	800377c <__swsetup_r+0xbc>
 8003762:	2300      	movs	r3, #0
 8003764:	60a3      	str	r3, [r4, #8]
 8003766:	6963      	ldr	r3, [r4, #20]
 8003768:	425b      	negs	r3, r3
 800376a:	61a3      	str	r3, [r4, #24]
 800376c:	6923      	ldr	r3, [r4, #16]
 800376e:	b953      	cbnz	r3, 8003786 <__swsetup_r+0xc6>
 8003770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003774:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003778:	d1ba      	bne.n	80036f0 <__swsetup_r+0x30>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	0792      	lsls	r2, r2, #30
 800377e:	bf58      	it	pl
 8003780:	6963      	ldrpl	r3, [r4, #20]
 8003782:	60a3      	str	r3, [r4, #8]
 8003784:	e7f2      	b.n	800376c <__swsetup_r+0xac>
 8003786:	2000      	movs	r0, #0
 8003788:	e7f7      	b.n	800377a <__swsetup_r+0xba>
 800378a:	bf00      	nop
 800378c:	20000010 	.word	0x20000010
 8003790:	08003c5c 	.word	0x08003c5c
 8003794:	08003c7c 	.word	0x08003c7c
 8003798:	08003c3c 	.word	0x08003c3c

0800379c <_close_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4c06      	ldr	r4, [pc, #24]	; (80037b8 <_close_r+0x1c>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	4605      	mov	r5, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	f7ff f958 	bl	8002a5c <_close>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_close_r+0x1a>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_close_r+0x1a>
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20004188 	.word	0x20004188

080037bc <__sflush_r>:
 80037bc:	898a      	ldrh	r2, [r1, #12]
 80037be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c2:	4605      	mov	r5, r0
 80037c4:	0710      	lsls	r0, r2, #28
 80037c6:	460c      	mov	r4, r1
 80037c8:	d45a      	bmi.n	8003880 <__sflush_r+0xc4>
 80037ca:	684b      	ldr	r3, [r1, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dc05      	bgt.n	80037dc <__sflush_r+0x20>
 80037d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	dc02      	bgt.n	80037dc <__sflush_r+0x20>
 80037d6:	2000      	movs	r0, #0
 80037d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037de:	2e00      	cmp	r6, #0
 80037e0:	d0f9      	beq.n	80037d6 <__sflush_r+0x1a>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037e8:	682f      	ldr	r7, [r5, #0]
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	d033      	beq.n	8003856 <__sflush_r+0x9a>
 80037ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	075a      	lsls	r2, r3, #29
 80037f4:	d505      	bpl.n	8003802 <__sflush_r+0x46>
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	1ac0      	subs	r0, r0, r3
 80037fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037fc:	b10b      	cbz	r3, 8003802 <__sflush_r+0x46>
 80037fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003800:	1ac0      	subs	r0, r0, r3
 8003802:	2300      	movs	r3, #0
 8003804:	4602      	mov	r2, r0
 8003806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003808:	6a21      	ldr	r1, [r4, #32]
 800380a:	4628      	mov	r0, r5
 800380c:	47b0      	blx	r6
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	d106      	bne.n	8003822 <__sflush_r+0x66>
 8003814:	6829      	ldr	r1, [r5, #0]
 8003816:	291d      	cmp	r1, #29
 8003818:	d84b      	bhi.n	80038b2 <__sflush_r+0xf6>
 800381a:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <__sflush_r+0x10c>)
 800381c:	40ca      	lsrs	r2, r1
 800381e:	07d6      	lsls	r6, r2, #31
 8003820:	d547      	bpl.n	80038b2 <__sflush_r+0xf6>
 8003822:	2200      	movs	r2, #0
 8003824:	6062      	str	r2, [r4, #4]
 8003826:	04d9      	lsls	r1, r3, #19
 8003828:	6922      	ldr	r2, [r4, #16]
 800382a:	6022      	str	r2, [r4, #0]
 800382c:	d504      	bpl.n	8003838 <__sflush_r+0x7c>
 800382e:	1c42      	adds	r2, r0, #1
 8003830:	d101      	bne.n	8003836 <__sflush_r+0x7a>
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	b903      	cbnz	r3, 8003838 <__sflush_r+0x7c>
 8003836:	6560      	str	r0, [r4, #84]	; 0x54
 8003838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800383a:	602f      	str	r7, [r5, #0]
 800383c:	2900      	cmp	r1, #0
 800383e:	d0ca      	beq.n	80037d6 <__sflush_r+0x1a>
 8003840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003844:	4299      	cmp	r1, r3
 8003846:	d002      	beq.n	800384e <__sflush_r+0x92>
 8003848:	4628      	mov	r0, r5
 800384a:	f000 f8f3 	bl	8003a34 <_free_r>
 800384e:	2000      	movs	r0, #0
 8003850:	6360      	str	r0, [r4, #52]	; 0x34
 8003852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003856:	6a21      	ldr	r1, [r4, #32]
 8003858:	2301      	movs	r3, #1
 800385a:	4628      	mov	r0, r5
 800385c:	47b0      	blx	r6
 800385e:	1c41      	adds	r1, r0, #1
 8003860:	d1c6      	bne.n	80037f0 <__sflush_r+0x34>
 8003862:	682b      	ldr	r3, [r5, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0c3      	beq.n	80037f0 <__sflush_r+0x34>
 8003868:	2b1d      	cmp	r3, #29
 800386a:	d001      	beq.n	8003870 <__sflush_r+0xb4>
 800386c:	2b16      	cmp	r3, #22
 800386e:	d101      	bne.n	8003874 <__sflush_r+0xb8>
 8003870:	602f      	str	r7, [r5, #0]
 8003872:	e7b0      	b.n	80037d6 <__sflush_r+0x1a>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003880:	690f      	ldr	r7, [r1, #16]
 8003882:	2f00      	cmp	r7, #0
 8003884:	d0a7      	beq.n	80037d6 <__sflush_r+0x1a>
 8003886:	0793      	lsls	r3, r2, #30
 8003888:	680e      	ldr	r6, [r1, #0]
 800388a:	bf08      	it	eq
 800388c:	694b      	ldreq	r3, [r1, #20]
 800388e:	600f      	str	r7, [r1, #0]
 8003890:	bf18      	it	ne
 8003892:	2300      	movne	r3, #0
 8003894:	eba6 0807 	sub.w	r8, r6, r7
 8003898:	608b      	str	r3, [r1, #8]
 800389a:	f1b8 0f00 	cmp.w	r8, #0
 800389e:	dd9a      	ble.n	80037d6 <__sflush_r+0x1a>
 80038a0:	4643      	mov	r3, r8
 80038a2:	463a      	mov	r2, r7
 80038a4:	6a21      	ldr	r1, [r4, #32]
 80038a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038a8:	4628      	mov	r0, r5
 80038aa:	47b0      	blx	r6
 80038ac:	2800      	cmp	r0, #0
 80038ae:	dc07      	bgt.n	80038c0 <__sflush_r+0x104>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c0:	4407      	add	r7, r0
 80038c2:	eba8 0800 	sub.w	r8, r8, r0
 80038c6:	e7e8      	b.n	800389a <__sflush_r+0xde>
 80038c8:	20400001 	.word	0x20400001

080038cc <_fflush_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	690b      	ldr	r3, [r1, #16]
 80038d0:	4605      	mov	r5, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	b1db      	cbz	r3, 800390e <_fflush_r+0x42>
 80038d6:	b118      	cbz	r0, 80038e0 <_fflush_r+0x14>
 80038d8:	6983      	ldr	r3, [r0, #24]
 80038da:	b90b      	cbnz	r3, 80038e0 <_fflush_r+0x14>
 80038dc:	f7ff f9ca 	bl	8002c74 <__sinit>
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <_fflush_r+0x48>)
 80038e2:	429c      	cmp	r4, r3
 80038e4:	d109      	bne.n	80038fa <_fflush_r+0x2e>
 80038e6:	686c      	ldr	r4, [r5, #4]
 80038e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ec:	b17b      	cbz	r3, 800390e <_fflush_r+0x42>
 80038ee:	4621      	mov	r1, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f6:	f7ff bf61 	b.w	80037bc <__sflush_r>
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <_fflush_r+0x4c>)
 80038fc:	429c      	cmp	r4, r3
 80038fe:	d101      	bne.n	8003904 <_fflush_r+0x38>
 8003900:	68ac      	ldr	r4, [r5, #8]
 8003902:	e7f1      	b.n	80038e8 <_fflush_r+0x1c>
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <_fflush_r+0x50>)
 8003906:	429c      	cmp	r4, r3
 8003908:	bf08      	it	eq
 800390a:	68ec      	ldreq	r4, [r5, #12]
 800390c:	e7ec      	b.n	80038e8 <_fflush_r+0x1c>
 800390e:	2000      	movs	r0, #0
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	bf00      	nop
 8003914:	08003c5c 	.word	0x08003c5c
 8003918:	08003c7c 	.word	0x08003c7c
 800391c:	08003c3c 	.word	0x08003c3c

08003920 <fflush>:
 8003920:	4601      	mov	r1, r0
 8003922:	b920      	cbnz	r0, 800392e <fflush+0xe>
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <fflush+0x18>)
 8003926:	4905      	ldr	r1, [pc, #20]	; (800393c <fflush+0x1c>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	f7ff ba2b 	b.w	8002d84 <_fwalk_reent>
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <fflush+0x20>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f7ff bfcb 	b.w	80038cc <_fflush_r>
 8003936:	bf00      	nop
 8003938:	08003c38 	.word	0x08003c38
 800393c:	080038cd 	.word	0x080038cd
 8003940:	20000010 	.word	0x20000010

08003944 <_lseek_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4c07      	ldr	r4, [pc, #28]	; (8003964 <_lseek_r+0x20>)
 8003948:	4605      	mov	r5, r0
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	2200      	movs	r2, #0
 8003950:	6022      	str	r2, [r4, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f7ff f88c 	bl	8002a70 <_lseek>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_lseek_r+0x1e>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	b103      	cbz	r3, 8003962 <_lseek_r+0x1e>
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	20004188 	.word	0x20004188

08003968 <__swhatbuf_r>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	460e      	mov	r6, r1
 800396c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003970:	2900      	cmp	r1, #0
 8003972:	b090      	sub	sp, #64	; 0x40
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
 8003978:	da07      	bge.n	800398a <__swhatbuf_r+0x22>
 800397a:	2300      	movs	r3, #0
 800397c:	602b      	str	r3, [r5, #0]
 800397e:	89b3      	ldrh	r3, [r6, #12]
 8003980:	061a      	lsls	r2, r3, #24
 8003982:	d410      	bmi.n	80039a6 <__swhatbuf_r+0x3e>
 8003984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003988:	e00e      	b.n	80039a8 <__swhatbuf_r+0x40>
 800398a:	aa01      	add	r2, sp, #4
 800398c:	f000 f8b2 	bl	8003af4 <_fstat_r>
 8003990:	2800      	cmp	r0, #0
 8003992:	dbf2      	blt.n	800397a <__swhatbuf_r+0x12>
 8003994:	9a02      	ldr	r2, [sp, #8]
 8003996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800399a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800399e:	425a      	negs	r2, r3
 80039a0:	415a      	adcs	r2, r3
 80039a2:	602a      	str	r2, [r5, #0]
 80039a4:	e7ee      	b.n	8003984 <__swhatbuf_r+0x1c>
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	2000      	movs	r0, #0
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	b010      	add	sp, #64	; 0x40
 80039ae:	bd70      	pop	{r4, r5, r6, pc}

080039b0 <__smakebuf_r>:
 80039b0:	898b      	ldrh	r3, [r1, #12]
 80039b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039b4:	079d      	lsls	r5, r3, #30
 80039b6:	4606      	mov	r6, r0
 80039b8:	460c      	mov	r4, r1
 80039ba:	d507      	bpl.n	80039cc <__smakebuf_r+0x1c>
 80039bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	6123      	str	r3, [r4, #16]
 80039c4:	2301      	movs	r3, #1
 80039c6:	6163      	str	r3, [r4, #20]
 80039c8:	b002      	add	sp, #8
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	ab01      	add	r3, sp, #4
 80039ce:	466a      	mov	r2, sp
 80039d0:	f7ff ffca 	bl	8003968 <__swhatbuf_r>
 80039d4:	9900      	ldr	r1, [sp, #0]
 80039d6:	4605      	mov	r5, r0
 80039d8:	4630      	mov	r0, r6
 80039da:	f7ff f9f1 	bl	8002dc0 <_malloc_r>
 80039de:	b948      	cbnz	r0, 80039f4 <__smakebuf_r+0x44>
 80039e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e4:	059a      	lsls	r2, r3, #22
 80039e6:	d4ef      	bmi.n	80039c8 <__smakebuf_r+0x18>
 80039e8:	f023 0303 	bic.w	r3, r3, #3
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	e7e3      	b.n	80039bc <__smakebuf_r+0xc>
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <__smakebuf_r+0x7c>)
 80039f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	6020      	str	r0, [r4, #0]
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	9b00      	ldr	r3, [sp, #0]
 8003a04:	6163      	str	r3, [r4, #20]
 8003a06:	9b01      	ldr	r3, [sp, #4]
 8003a08:	6120      	str	r0, [r4, #16]
 8003a0a:	b15b      	cbz	r3, 8003a24 <__smakebuf_r+0x74>
 8003a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 f881 	bl	8003b18 <_isatty_r>
 8003a16:	b128      	cbz	r0, 8003a24 <__smakebuf_r+0x74>
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	f023 0303 	bic.w	r3, r3, #3
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	81a3      	strh	r3, [r4, #12]
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	431d      	orrs	r5, r3
 8003a28:	81a5      	strh	r5, [r4, #12]
 8003a2a:	e7cd      	b.n	80039c8 <__smakebuf_r+0x18>
 8003a2c:	08002bf5 	.word	0x08002bf5

08003a30 <__malloc_lock>:
 8003a30:	4770      	bx	lr

08003a32 <__malloc_unlock>:
 8003a32:	4770      	bx	lr

08003a34 <_free_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d045      	beq.n	8003ac8 <_free_r+0x94>
 8003a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a40:	1f0c      	subs	r4, r1, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	18e4      	addlt	r4, r4, r3
 8003a48:	f7ff fff2 	bl	8003a30 <__malloc_lock>
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <_free_r+0x98>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	b933      	cbnz	r3, 8003a62 <_free_r+0x2e>
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6014      	str	r4, [r2, #0]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f7ff bfe8 	b.w	8003a32 <__malloc_unlock>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d90c      	bls.n	8003a80 <_free_r+0x4c>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1862      	adds	r2, r4, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf04      	itt	eq
 8003a6e:	681a      	ldreq	r2, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	bf04      	itt	eq
 8003a76:	1852      	addeq	r2, r2, r1
 8003a78:	6022      	streq	r2, [r4, #0]
 8003a7a:	6004      	str	r4, [r0, #0]
 8003a7c:	e7ec      	b.n	8003a58 <_free_r+0x24>
 8003a7e:	4613      	mov	r3, r2
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	b10a      	cbz	r2, 8003a88 <_free_r+0x54>
 8003a84:	42a2      	cmp	r2, r4
 8003a86:	d9fa      	bls.n	8003a7e <_free_r+0x4a>
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	1858      	adds	r0, r3, r1
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d10b      	bne.n	8003aa8 <_free_r+0x74>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	4401      	add	r1, r0
 8003a94:	1858      	adds	r0, r3, r1
 8003a96:	4282      	cmp	r2, r0
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	d1dd      	bne.n	8003a58 <_free_r+0x24>
 8003a9c:	6810      	ldr	r0, [r2, #0]
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	e7d7      	b.n	8003a58 <_free_r+0x24>
 8003aa8:	d902      	bls.n	8003ab0 <_free_r+0x7c>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	e7d3      	b.n	8003a58 <_free_r+0x24>
 8003ab0:	6820      	ldr	r0, [r4, #0]
 8003ab2:	1821      	adds	r1, r4, r0
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	bf04      	itt	eq
 8003ab8:	6811      	ldreq	r1, [r2, #0]
 8003aba:	6852      	ldreq	r2, [r2, #4]
 8003abc:	6062      	str	r2, [r4, #4]
 8003abe:	bf04      	itt	eq
 8003ac0:	1809      	addeq	r1, r1, r0
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	605c      	str	r4, [r3, #4]
 8003ac6:	e7c7      	b.n	8003a58 <_free_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	20004030 	.word	0x20004030

08003ad0 <_read_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4c07      	ldr	r4, [pc, #28]	; (8003af0 <_read_r+0x20>)
 8003ad4:	4605      	mov	r5, r0
 8003ad6:	4608      	mov	r0, r1
 8003ad8:	4611      	mov	r1, r2
 8003ada:	2200      	movs	r2, #0
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7fe ff86 	bl	80029f0 <_read>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_read_r+0x1e>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_read_r+0x1e>
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	20004188 	.word	0x20004188

08003af4 <_fstat_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4c07      	ldr	r4, [pc, #28]	; (8003b14 <_fstat_r+0x20>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	4605      	mov	r5, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	f7fe ffae 	bl	8002a62 <_fstat>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d102      	bne.n	8003b10 <_fstat_r+0x1c>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	b103      	cbz	r3, 8003b10 <_fstat_r+0x1c>
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	20004188 	.word	0x20004188

08003b18 <_isatty_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4c06      	ldr	r4, [pc, #24]	; (8003b34 <_isatty_r+0x1c>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4605      	mov	r5, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	f7fe ffa2 	bl	8002a6c <_isatty>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_isatty_r+0x1a>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_isatty_r+0x1a>
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20004188 	.word	0x20004188

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
