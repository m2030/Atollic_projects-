
DHT22_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002ca0  08002ca0  00012ca0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20020000  08002d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00020070  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  00020070  2**0
                  CONTENTS
  9 .bss          000001c8  20020070  20020070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20020238  20020238  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f930  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002069  00000000  00000000  0002f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007107  00000000  00000000  00031a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a38  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d30  00000000  00000000  00039578  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005317  00000000  00000000  0003a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004651  00000000  00000000  0003f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00043c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  00043c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20020070 	.word	0x20020070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002c88 	.word	0x08002c88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20020074 	.word	0x20020074
 800023c:	08002c88 	.word	0x08002c88

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f88c 	bl	8000734 <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f83c 	bl	80006a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20020000 	.word	0x20020000
 8000640:	20020008 	.word	0x20020008
 8000644:	20020004 	.word	0x20020004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f81a 	bl	8000684 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f001 fdf1 	bl	800223c <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2002009c 	.word	0x2002009c
 8000674:	20020000 	.word	0x20020000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2002009c 	.word	0x2002009c

08000684 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000686:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	0c1b      	lsrs	r3, r3, #16
 8000696:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800069e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006a0:	60d3      	str	r3, [r2, #12]
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	68dc      	ldr	r4, [r3, #12]
 80006ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	bf28      	it	cs
 80006bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c4:	bf8c      	ite	hi
 80006c6:	3c03      	subhi	r4, #3
 80006c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ca:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80006d4:	ea01 0103 	and.w	r1, r1, r3
 80006d8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	fa05 f404 	lsl.w	r4, r5, r4
 80006e0:	f104 34ff 	add.w	r4, r4, #4294967295
 80006e4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	ea42 0201 	orr.w	r2, r2, r1
 80006ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006f0:	db07      	blt.n	8000702 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006fc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000700:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	f000 000f 	and.w	r0, r0, #15
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_NVIC_SetPriority+0x6c>)
 800070a:	541a      	strb	r2, [r3, r0]
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00
 8000714:	e000ed14 	.word	0xe000ed14

08000718 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000718:	2800      	cmp	r0, #0
 800071a:	db08      	blt.n	800072e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071c:	0942      	lsrs	r2, r0, #5
 800071e:	2301      	movs	r3, #1
 8000720:	f000 001f 	and.w	r0, r0, #31
 8000724:	fa03 f000 	lsl.w	r0, r3, r0
 8000728:	4b01      	ldr	r3, [pc, #4]	; (8000730 <HAL_NVIC_EnableIRQ+0x18>)
 800072a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100

08000734 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	3801      	subs	r0, #1
 8000736:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800073a:	d20a      	bcs.n	8000752 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	21f0      	movs	r1, #240	; 0xf0
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000764:	680b      	ldr	r3, [r1, #0]
{
 8000766:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800092c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800076e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000770:	4a6c      	ldr	r2, [pc, #432]	; (8000924 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000772:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000930 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000776:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000778:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800077a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800077e:	42ac      	cmp	r4, r5
 8000780:	f040 80b6 	bne.w	80008f0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000784:	684c      	ldr	r4, [r1, #4]
 8000786:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800078a:	f024 0c10 	bic.w	ip, r4, #16
 800078e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000792:	2e01      	cmp	r6, #1
 8000794:	d812      	bhi.n	80007bc <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000796:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000798:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800079a:	fa06 f60e 	lsl.w	r6, r6, lr
 800079e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80007a2:	68ce      	ldr	r6, [r1, #12]
 80007a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80007aa:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007ac:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 80007b0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007b2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007b4:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007b8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007ba:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007bc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80007be:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007c4:	fa06 f60e 	lsl.w	r6, r6, lr
 80007c8:	ea6f 0606 	mvn.w	r6, r6
 80007cc:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007d0:	688f      	ldr	r7, [r1, #8]
 80007d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80007d6:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80007da:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007dc:	d116      	bne.n	800080c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80007de:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007e2:	f003 0b07 	and.w	fp, r3, #7
 80007e6:	f04f 0c0f 	mov.w	ip, #15
 80007ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80007ee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80007f2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007f6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007fa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007fe:	690f      	ldr	r7, [r1, #16]
 8000800:	fa07 f70b 	lsl.w	r7, r7, fp
 8000804:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000808:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800080c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800080e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000810:	f004 0703 	and.w	r7, r4, #3
 8000814:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000818:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800081c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800081e:	00e6      	lsls	r6, r4, #3
 8000820:	d566      	bpl.n	80008f0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000826:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800082a:	f003 0e03 	and.w	lr, r3, #3
 800082e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000836:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800083a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000842:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000846:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800084a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800084e:	9603      	str	r6, [sp, #12]
 8000850:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000852:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000856:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800085a:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800085e:	4e32      	ldr	r6, [pc, #200]	; (8000928 <HAL_GPIO_Init+0x1c8>)
 8000860:	42b0      	cmp	r0, r6
 8000862:	d04c      	beq.n	80008fe <HAL_GPIO_Init+0x19e>
 8000864:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000868:	42b0      	cmp	r0, r6
 800086a:	d04a      	beq.n	8000902 <HAL_GPIO_Init+0x1a2>
 800086c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000870:	42b0      	cmp	r0, r6
 8000872:	d048      	beq.n	8000906 <HAL_GPIO_Init+0x1a6>
 8000874:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000878:	42b0      	cmp	r0, r6
 800087a:	d046      	beq.n	800090a <HAL_GPIO_Init+0x1aa>
 800087c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000880:	42b0      	cmp	r0, r6
 8000882:	d044      	beq.n	800090e <HAL_GPIO_Init+0x1ae>
 8000884:	4548      	cmp	r0, r9
 8000886:	d044      	beq.n	8000912 <HAL_GPIO_Init+0x1b2>
 8000888:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800088c:	42b0      	cmp	r0, r6
 800088e:	d042      	beq.n	8000916 <HAL_GPIO_Init+0x1b6>
 8000890:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000894:	42b0      	cmp	r0, r6
 8000896:	d040      	beq.n	800091a <HAL_GPIO_Init+0x1ba>
 8000898:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800089c:	42b0      	cmp	r0, r6
 800089e:	d03e      	beq.n	800091e <HAL_GPIO_Init+0x1be>
 80008a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008a4:	42b0      	cmp	r0, r6
 80008a6:	bf14      	ite	ne
 80008a8:	260a      	movne	r6, #10
 80008aa:	2609      	moveq	r6, #9
 80008ac:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008b4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80008b8:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80008ba:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80008be:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008c0:	bf0c      	ite	eq
 80008c2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008c4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80008ca:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80008cc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80008ce:	bf0c      	ite	eq
 80008d0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008d2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008d4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80008d8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80008da:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80008dc:	bf0c      	ite	eq
 80008de:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008e0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008e2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80008e4:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80008e6:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80008e8:	bf54      	ite	pl
 80008ea:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008ec:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008ee:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008f0:	3301      	adds	r3, #1
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	f47f af3f 	bne.w	8000776 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008f8:	b005      	add	sp, #20
 80008fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008fe:	2600      	movs	r6, #0
 8000900:	e7d4      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 8000902:	2601      	movs	r6, #1
 8000904:	e7d2      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 8000906:	2602      	movs	r6, #2
 8000908:	e7d0      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 800090a:	2603      	movs	r6, #3
 800090c:	e7ce      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 800090e:	2604      	movs	r6, #4
 8000910:	e7cc      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 8000912:	2605      	movs	r6, #5
 8000914:	e7ca      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 8000916:	2606      	movs	r6, #6
 8000918:	e7c8      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 800091a:	2607      	movs	r6, #7
 800091c:	e7c6      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 800091e:	2608      	movs	r6, #8
 8000920:	e7c4      	b.n	80008ac <HAL_GPIO_Init+0x14c>
 8000922:	bf00      	nop
 8000924:	40013c00 	.word	0x40013c00
 8000928:	40020000 	.word	0x40020000
 800092c:	40023800 	.word	0x40023800
 8000930:	40021400 	.word	0x40021400

08000934 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000934:	6903      	ldr	r3, [r0, #16]
 8000936:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000938:	bf14      	ite	ne
 800093a:	2001      	movne	r0, #1
 800093c:	2000      	moveq	r0, #0
 800093e:	4770      	bx	lr

08000940 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000940:	b10a      	cbz	r2, 8000946 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000942:	6181      	str	r1, [r0, #24]
 8000944:	4770      	bx	lr
 8000946:	0409      	lsls	r1, r1, #16
 8000948:	e7fb      	b.n	8000942 <HAL_GPIO_WritePin+0x2>

0800094a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800094a:	6943      	ldr	r3, [r0, #20]
 800094c:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800094e:	bf18      	it	ne
 8000950:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000952:	6181      	str	r1, [r0, #24]
 8000954:	4770      	bx	lr
	...

08000958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000958:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800095c:	6959      	ldr	r1, [r3, #20]
 800095e:	4201      	tst	r1, r0
 8000960:	d002      	beq.n	8000968 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000962:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000964:	f001 fc4e 	bl	8002204 <HAL_GPIO_EXTI_Callback>
 8000968:	bd08      	pop	{r3, pc}
 800096a:	bf00      	nop
 800096c:	40013c00 	.word	0x40013c00

08000970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000974:	4604      	mov	r4, r0
 8000976:	b908      	cbnz	r0, 800097c <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000978:	2001      	movs	r0, #1
 800097a:	e03f      	b.n	80009fc <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097c:	6803      	ldr	r3, [r0, #0]
 800097e:	07d8      	lsls	r0, r3, #31
 8000980:	d410      	bmi.n	80009a4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	0799      	lsls	r1, r3, #30
 8000986:	d460      	bmi.n	8000a4a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	0719      	lsls	r1, r3, #28
 800098c:	f100 80a5 	bmi.w	8000ada <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	075a      	lsls	r2, r3, #29
 8000994:	f100 80c6 	bmi.w	8000b24 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000998:	69a0      	ldr	r0, [r4, #24]
 800099a:	2800      	cmp	r0, #0
 800099c:	f040 8130 	bne.w	8000c00 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 80009a0:	2000      	movs	r0, #0
 80009a2:	e02b      	b.n	80009fc <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009a4:	4b94      	ldr	r3, [pc, #592]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	f002 020c 	and.w	r2, r2, #12
 80009ac:	2a04      	cmp	r2, #4
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f002 020c 	and.w	r2, r2, #12
 80009b6:	2a08      	cmp	r2, #8
 80009b8:	d10a      	bne.n	80009d0 <HAL_RCC_OscConfig+0x60>
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	025a      	lsls	r2, r3, #9
 80009be:	d507      	bpl.n	80009d0 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c0:	4b8d      	ldr	r3, [pc, #564]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	039b      	lsls	r3, r3, #14
 80009c6:	d5dc      	bpl.n	8000982 <HAL_RCC_OscConfig+0x12>
 80009c8:	6863      	ldr	r3, [r4, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1d9      	bne.n	8000982 <HAL_RCC_OscConfig+0x12>
 80009ce:	e7d3      	b.n	8000978 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d0:	6863      	ldr	r3, [r4, #4]
 80009d2:	4d89      	ldr	r5, [pc, #548]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 80009d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d8:	d113      	bne.n	8000a02 <HAL_RCC_OscConfig+0x92>
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009e2:	f7ff fe49 	bl	8000678 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e6:	4d84      	ldr	r5, [pc, #528]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80009e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	039f      	lsls	r7, r3, #14
 80009ee:	d4c8      	bmi.n	8000982 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009f0:	f7ff fe42 	bl	8000678 <HAL_GetTick>
 80009f4:	1b80      	subs	r0, r0, r6
 80009f6:	2864      	cmp	r0, #100	; 0x64
 80009f8:	d9f7      	bls.n	80009ea <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80009fa:	2003      	movs	r0, #3
}
 80009fc:	b002      	add	sp, #8
 80009fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a02:	b99b      	cbnz	r3, 8000a2c <HAL_RCC_OscConfig+0xbc>
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0a:	602b      	str	r3, [r5, #0]
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fe30 	bl	8000678 <HAL_GetTick>
 8000a18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	0398      	lsls	r0, r3, #14
 8000a1e:	d5b0      	bpl.n	8000982 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a20:	f7ff fe2a 	bl	8000678 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2864      	cmp	r0, #100	; 0x64
 8000a28:	d9f7      	bls.n	8000a1a <HAL_RCC_OscConfig+0xaa>
 8000a2a:	e7e6      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	d103      	bne.n	8000a3c <HAL_RCC_OscConfig+0xcc>
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	602b      	str	r3, [r5, #0]
 8000a3a:	e7ce      	b.n	80009da <HAL_RCC_OscConfig+0x6a>
 8000a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a40:	602b      	str	r3, [r5, #0]
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a48:	e7ca      	b.n	80009e0 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	f012 0f0c 	tst.w	r2, #12
 8000a52:	d007      	beq.n	8000a64 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	f002 020c 	and.w	r2, r2, #12
 8000a5a:	2a08      	cmp	r2, #8
 8000a5c:	d111      	bne.n	8000a82 <HAL_RCC_OscConfig+0x112>
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	0259      	lsls	r1, r3, #9
 8000a62:	d40e      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a64:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	0792      	lsls	r2, r2, #30
 8000a6a:	d502      	bpl.n	8000a72 <HAL_RCC_OscConfig+0x102>
 8000a6c:	68e2      	ldr	r2, [r4, #12]
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	d182      	bne.n	8000978 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	6921      	ldr	r1, [r4, #16]
 8000a76:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a7e:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a80:	e782      	b.n	8000988 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a82:	68e3      	ldr	r3, [r4, #12]
 8000a84:	4d5c      	ldr	r5, [pc, #368]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000a86:	b1bb      	cbz	r3, 8000ab8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a90:	f7ff fdf2 	bl	8000678 <HAL_GetTick>
 8000a94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	079f      	lsls	r7, r3, #30
 8000a9a:	d507      	bpl.n	8000aac <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	6922      	ldr	r2, [r4, #16]
 8000aa0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000aa4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aa8:	602b      	str	r3, [r5, #0]
 8000aaa:	e76d      	b.n	8000988 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aac:	f7ff fde4 	bl	8000678 <HAL_GetTick>
 8000ab0:	1b80      	subs	r0, r0, r6
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9ef      	bls.n	8000a96 <HAL_RCC_OscConfig+0x126>
 8000ab6:	e7a0      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fdda 	bl	8000678 <HAL_GetTick>
 8000ac4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac6:	682b      	ldr	r3, [r5, #0]
 8000ac8:	0798      	lsls	r0, r3, #30
 8000aca:	f57f af5d 	bpl.w	8000988 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ace:	f7ff fdd3 	bl	8000678 <HAL_GetTick>
 8000ad2:	1b80      	subs	r0, r0, r6
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f6      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x156>
 8000ad8:	e78f      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ada:	6963      	ldr	r3, [r4, #20]
 8000adc:	4d46      	ldr	r5, [pc, #280]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000ade:	b183      	cbz	r3, 8000b02 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000ae0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fdc6 	bl	8000678 <HAL_GetTick>
 8000aec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000af0:	079b      	lsls	r3, r3, #30
 8000af2:	f53f af4d 	bmi.w	8000990 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000af6:	f7ff fdbf 	bl	8000678 <HAL_GetTick>
 8000afa:	1b80      	subs	r0, r0, r6
 8000afc:	2802      	cmp	r0, #2
 8000afe:	d9f6      	bls.n	8000aee <HAL_RCC_OscConfig+0x17e>
 8000b00:	e77b      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000b02:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fdb5 	bl	8000678 <HAL_GetTick>
 8000b0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b12:	079f      	lsls	r7, r3, #30
 8000b14:	f57f af3c 	bpl.w	8000990 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b18:	f7ff fdae 	bl	8000678 <HAL_GetTick>
 8000b1c:	1b80      	subs	r0, r0, r6
 8000b1e:	2802      	cmp	r0, #2
 8000b20:	d9f6      	bls.n	8000b10 <HAL_RCC_OscConfig+0x1a0>
 8000b22:	e76a      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b24:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	00d0      	lsls	r0, r2, #3
 8000b2a:	d427      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000b2e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b40:	4d2e      	ldr	r5, [pc, #184]	; (8000bfc <HAL_RCC_OscConfig+0x28c>)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	05d9      	lsls	r1, r3, #23
 8000b46:	d51b      	bpl.n	8000b80 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b48:	68a3      	ldr	r3, [r4, #8]
 8000b4a:	4d2b      	ldr	r5, [pc, #172]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d127      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x230>
 8000b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b5c:	f7ff fd8c 	bl	8000678 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b60:	4f25      	ldr	r7, [pc, #148]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000b62:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b66:	079b      	lsls	r3, r3, #30
 8000b68:	d53f      	bpl.n	8000bea <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f43f af14 	beq.w	8000998 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <HAL_RCC_OscConfig+0x288>)
 8000b72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	e70d      	b.n	8000998 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	e7df      	b.n	8000b40 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b88:	f7ff fd76 	bl	8000678 <HAL_GetTick>
 8000b8c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	05da      	lsls	r2, r3, #23
 8000b92:	d4d9      	bmi.n	8000b48 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b94:	f7ff fd70 	bl	8000678 <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2864      	cmp	r0, #100	; 0x64
 8000b9c:	d9f7      	bls.n	8000b8e <HAL_RCC_OscConfig+0x21e>
 8000b9e:	e72c      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba0:	b9ab      	cbnz	r3, 8000bce <HAL_RCC_OscConfig+0x25e>
 8000ba2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ba4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba8:	f023 0301 	bic.w	r3, r3, #1
 8000bac:	672b      	str	r3, [r5, #112]	; 0x70
 8000bae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fd5f 	bl	8000678 <HAL_GetTick>
 8000bba:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bbe:	0798      	lsls	r0, r3, #30
 8000bc0:	d5d3      	bpl.n	8000b6a <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fd59 	bl	8000678 <HAL_GetTick>
 8000bc6:	1bc0      	subs	r0, r0, r7
 8000bc8:	4540      	cmp	r0, r8
 8000bca:	d9f7      	bls.n	8000bbc <HAL_RCC_OscConfig+0x24c>
 8000bcc:	e715      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bd2:	d103      	bne.n	8000bdc <HAL_RCC_OscConfig+0x26c>
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	672b      	str	r3, [r5, #112]	; 0x70
 8000bda:	e7b9      	b.n	8000b50 <HAL_RCC_OscConfig+0x1e0>
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	672b      	str	r3, [r5, #112]	; 0x70
 8000be2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000be4:	f023 0304 	bic.w	r3, r3, #4
 8000be8:	e7b5      	b.n	8000b56 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f7ff fd45 	bl	8000678 <HAL_GetTick>
 8000bee:	eba0 0008 	sub.w	r0, r0, r8
 8000bf2:	42a8      	cmp	r0, r5
 8000bf4:	d9b6      	bls.n	8000b64 <HAL_RCC_OscConfig+0x1f4>
 8000bf6:	e700      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c00:	4d3c      	ldr	r5, [pc, #240]	; (8000cf4 <HAL_RCC_OscConfig+0x384>)
 8000c02:	68ab      	ldr	r3, [r5, #8]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d042      	beq.n	8000c92 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8000c0c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c0e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c14:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c16:	d12f      	bne.n	8000c78 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8000c18:	f7ff fd2e 	bl	8000678 <HAL_GetTick>
 8000c1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	0199      	lsls	r1, r3, #6
 8000c22:	d423      	bmi.n	8000c6c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c24:	6a22      	ldr	r2, [r4, #32]
 8000c26:	69e3      	ldr	r3, [r4, #28]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c38:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c3e:	4c2d      	ldr	r4, [pc, #180]	; (8000cf4 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c40:	0852      	lsrs	r2, r2, #1
 8000c42:	3a01      	subs	r2, #1
 8000c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c48:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c52:	f7ff fd11 	bl	8000678 <HAL_GetTick>
 8000c56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	019a      	lsls	r2, r3, #6
 8000c5c:	f53f aea0 	bmi.w	80009a0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c60:	f7ff fd0a 	bl	8000678 <HAL_GetTick>
 8000c64:	1b40      	subs	r0, r0, r5
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9f6      	bls.n	8000c58 <HAL_RCC_OscConfig+0x2e8>
 8000c6a:	e6c6      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c6c:	f7ff fd04 	bl	8000678 <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2802      	cmp	r0, #2
 8000c74:	d9d3      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2ae>
 8000c76:	e6c0      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000c78:	f7ff fcfe 	bl	8000678 <HAL_GetTick>
 8000c7c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	f57f ae8d 	bpl.w	80009a0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c86:	f7ff fcf7 	bl	8000678 <HAL_GetTick>
 8000c8a:	1b00      	subs	r0, r0, r4
 8000c8c:	2802      	cmp	r0, #2
 8000c8e:	d9f6      	bls.n	8000c7e <HAL_RCC_OscConfig+0x30e>
 8000c90:	e6b3      	b.n	80009fa <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c92:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000c94:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c96:	f43f aeb1 	beq.w	80009fc <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c9e:	69e1      	ldr	r1, [r4, #28]
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	f47f ae69 	bne.w	8000978 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000caa:	6a21      	ldr	r1, [r4, #32]
 8000cac:	428a      	cmp	r2, r1
 8000cae:	f47f ae63 	bne.w	8000978 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000cb2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000cb8:	401a      	ands	r2, r3
 8000cba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000cbe:	f47f ae5b 	bne.w	8000978 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000cc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cc4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000cc8:	0852      	lsrs	r2, r2, #1
 8000cca:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ccc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000cd0:	f47f ae52 	bne.w	8000978 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000cd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000cd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000cda:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000cde:	f47f ae4b 	bne.w	8000978 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ce4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ce8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8000cec:	bf14      	ite	ne
 8000cee:	2001      	movne	r0, #1
 8000cf0:	2000      	moveq	r0, #0
 8000cf2:	e683      	b.n	80009fc <HAL_RCC_OscConfig+0x8c>
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cf8:	4913      	ldr	r1, [pc, #76]	; (8000d48 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000cfa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cfc:	688b      	ldr	r3, [r1, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d003      	beq.n	8000d0e <HAL_RCC_GetSysClockFreq+0x16>
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d003      	beq.n	8000d12 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d0c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d10:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d12:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000d14:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d16:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000d1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d20:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d24:	bf1a      	itte	ne
 8000d26:	480a      	ldrne	r0, [pc, #40]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d28:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d2a:	4808      	ldreq	r0, [pc, #32]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x54>)
 8000d2c:	fba1 0100 	umull	r0, r1, r1, r0
 8000d30:	f7ff fade 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8000d40:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d44:	bd08      	pop	{r3, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	00f42400 	.word	0x00f42400
 8000d50:	007a1200 	.word	0x007a1200

08000d54 <HAL_RCC_ClockConfig>:
{
 8000d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d58:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	b910      	cbnz	r0, 8000d64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d5e:	2001      	movs	r0, #1
 8000d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d64:	4a46      	ldr	r2, [pc, #280]	; (8000e80 <HAL_RCC_ClockConfig+0x12c>)
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d329      	bcc.n	8000dc4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d70:	6821      	ldr	r1, [r4, #0]
 8000d72:	078f      	lsls	r7, r1, #30
 8000d74:	d431      	bmi.n	8000dda <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d76:	07c8      	lsls	r0, r1, #31
 8000d78:	d444      	bmi.n	8000e04 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7a:	4a41      	ldr	r2, [pc, #260]	; (8000e80 <HAL_RCC_ClockConfig+0x12c>)
 8000d7c:	6813      	ldr	r3, [r2, #0]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	429d      	cmp	r5, r3
 8000d84:	d368      	bcc.n	8000e58 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	0751      	lsls	r1, r2, #29
 8000d8a:	d471      	bmi.n	8000e70 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d8c:	0713      	lsls	r3, r2, #28
 8000d8e:	d507      	bpl.n	8000da0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d90:	4a3c      	ldr	r2, [pc, #240]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
 8000d92:	6921      	ldr	r1, [r4, #16]
 8000d94:	6893      	ldr	r3, [r2, #8]
 8000d96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000da0:	f7ff ffaa 	bl	8000cf8 <HAL_RCC_GetSysClockFreq>
 8000da4:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
 8000da6:	4a38      	ldr	r2, [pc, #224]	; (8000e88 <HAL_RCC_ClockConfig+0x134>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_RCC_ClockConfig+0x138>)
 8000db4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_ClockConfig+0x13c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	f7ff fc21 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc4:	6813      	ldr	r3, [r2, #0]
 8000dc6:	f023 030f 	bic.w	r3, r3, #15
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	d1c2      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xa>
 8000dd8:	e7ca      	b.n	8000d70 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dda:	f011 0f04 	tst.w	r1, #4
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
 8000de0:	d003      	beq.n	8000dea <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000de8:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dea:	070e      	lsls	r6, r1, #28
 8000dec:	d503      	bpl.n	8000df6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000df4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	68a0      	ldr	r0, [r4, #8]
 8000dfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dfe:	4302      	orrs	r2, r0
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	e7b8      	b.n	8000d76 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e04:	6861      	ldr	r1, [r4, #4]
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
 8000e08:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0c:	d11c      	bne.n	8000e48 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e12:	d0a4      	beq.n	8000d5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e14:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e16:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e1a:	4e1a      	ldr	r6, [pc, #104]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1c:	f022 0203 	bic.w	r2, r2, #3
 8000e20:	430a      	orrs	r2, r1
 8000e22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e24:	f7ff fc28 	bl	8000678 <HAL_GetTick>
 8000e28:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e2a:	68b3      	ldr	r3, [r6, #8]
 8000e2c:	6862      	ldr	r2, [r4, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e36:	d0a0      	beq.n	8000d7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fc1e 	bl	8000678 <HAL_GetTick>
 8000e3c:	1bc0      	subs	r0, r0, r7
 8000e3e:	4540      	cmp	r0, r8
 8000e40:	d9f3      	bls.n	8000e2a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
}
 8000e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e48:	2902      	cmp	r1, #2
 8000e4a:	d102      	bne.n	8000e52 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e50:	e7df      	b.n	8000e12 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	f012 0f02 	tst.w	r2, #2
 8000e56:	e7dc      	b.n	8000e12 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f023 030f 	bic.w	r3, r3, #15
 8000e5e:	432b      	orrs	r3, r5
 8000e60:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	429d      	cmp	r5, r3
 8000e6a:	f47f af78 	bne.w	8000d5e <HAL_RCC_ClockConfig+0xa>
 8000e6e:	e78a      	b.n	8000d86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <HAL_RCC_ClockConfig+0x130>)
 8000e72:	68e0      	ldr	r0, [r4, #12]
 8000e74:	688b      	ldr	r3, [r1, #8]
 8000e76:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	608b      	str	r3, [r1, #8]
 8000e7e:	e785      	b.n	8000d8c <HAL_RCC_ClockConfig+0x38>
 8000e80:	40023c00 	.word	0x40023c00
 8000e84:	40023800 	.word	0x40023800
 8000e88:	08002cf6 	.word	0x08002cf6
 8000e8c:	20020008 	.word	0x20020008
 8000e90:	20020004 	.word	0x20020004

08000e94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ea2:	6810      	ldr	r0, [r2, #0]
}
 8000ea4:	40d8      	lsrs	r0, r3
 8000ea6:	4770      	bx	lr
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	08002d06 	.word	0x08002d06
 8000eb0:	20020008 	.word	0x20020008

08000eb4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ebe:	5cd3      	ldrb	r3, [r2, r3]
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ec2:	6810      	ldr	r0, [r2, #0]
}
 8000ec4:	40d8      	lsrs	r0, r3
 8000ec6:	4770      	bx	lr
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	08002d06 	.word	0x08002d06
 8000ed0:	20020008 	.word	0x20020008

08000ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000ed8:	6802      	ldr	r2, [r0, #0]
{
 8000eda:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000edc:	f012 0601 	ands.w	r6, r2, #1
 8000ee0:	d00b      	beq.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ee2:	4bba      	ldr	r3, [pc, #744]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ee4:	6899      	ldr	r1, [r3, #8]
 8000ee6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000eea:	6099      	str	r1, [r3, #8]
 8000eec:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000eee:	6899      	ldr	r1, [r3, #8]
 8000ef0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000ef2:	fab6 f686 	clz	r6, r6
 8000ef6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ef8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000efa:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000efe:	d012      	beq.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f00:	49b2      	ldr	r1, [pc, #712]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f02:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f04:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000f08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8000f10:	bf08      	it	eq
 8000f12:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f14:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000f18:	bf16      	itet	ne
 8000f1a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000f1e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000f20:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000f26:	02d7      	lsls	r7, r2, #11
 8000f28:	d510      	bpl.n	8000f4c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000f2a:	48a8      	ldr	r0, [pc, #672]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f2c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f2e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000f32:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000f36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f3a:	ea43 0301 	orr.w	r3, r3, r1
 8000f3e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000f42:	f000 81a9 	beq.w	8001298 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8000f46:	2900      	cmp	r1, #0
 8000f48:	bf08      	it	eq
 8000f4a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8000f4c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000f50:	bf18      	it	ne
 8000f52:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f54:	0690      	lsls	r0, r2, #26
 8000f56:	d531      	bpl.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b9c      	ldr	r3, [pc, #624]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f5a:	4f9d      	ldr	r7, [pc, #628]	; (80011d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f76:	f7ff fb7f 	bl	8000678 <HAL_GetTick>
 8000f7a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	05d9      	lsls	r1, r3, #23
 8000f80:	f140 818c 	bpl.w	800129c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f84:	4f91      	ldr	r7, [pc, #580]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f88:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000f8c:	f040 8191 	bne.w	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f92:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000f96:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000f9a:	4a8c      	ldr	r2, [pc, #560]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f9c:	f040 81af 	bne.w	80012fe <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8000fa0:	6891      	ldr	r1, [r2, #8]
 8000fa2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000fa6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000faa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	6091      	str	r1, [r2, #8]
 8000fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	06df      	lsls	r7, r3, #27
 8000fc0:	d50c      	bpl.n	8000fdc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000fc2:	4a82      	ldr	r2, [pc, #520]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fc4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000fc8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000fcc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000fd0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000fd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000fd6:	4301      	orrs	r1, r0
 8000fd8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000fdc:	0458      	lsls	r0, r3, #17
 8000fde:	d508      	bpl.n	8000ff2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000fe0:	497a      	ldr	r1, [pc, #488]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fe2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000fe4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fe8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fec:	4302      	orrs	r2, r0
 8000fee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000ff2:	0419      	lsls	r1, r3, #16
 8000ff4:	d508      	bpl.n	8001008 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000ff6:	4975      	ldr	r1, [pc, #468]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ff8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000ffa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000ffe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001002:	4302      	orrs	r2, r0
 8001004:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001008:	03da      	lsls	r2, r3, #15
 800100a:	d508      	bpl.n	800101e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800100c:	496f      	ldr	r1, [pc, #444]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800100e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001010:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001014:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001018:	4302      	orrs	r2, r0
 800101a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800101e:	039f      	lsls	r7, r3, #14
 8001020:	d508      	bpl.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001022:	496a      	ldr	r1, [pc, #424]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001024:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001026:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800102a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800102e:	4302      	orrs	r2, r0
 8001030:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001034:	0658      	lsls	r0, r3, #25
 8001036:	d508      	bpl.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001038:	4964      	ldr	r1, [pc, #400]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800103a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800103c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001040:	f022 0203 	bic.w	r2, r2, #3
 8001044:	4302      	orrs	r2, r0
 8001046:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800104a:	0619      	lsls	r1, r3, #24
 800104c:	d508      	bpl.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800104e:	495f      	ldr	r1, [pc, #380]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001050:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001052:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001056:	f022 020c 	bic.w	r2, r2, #12
 800105a:	4302      	orrs	r2, r0
 800105c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001060:	05da      	lsls	r2, r3, #23
 8001062:	d508      	bpl.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001064:	4959      	ldr	r1, [pc, #356]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001066:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001068:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800106c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001070:	4302      	orrs	r2, r0
 8001072:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001076:	059f      	lsls	r7, r3, #22
 8001078:	d508      	bpl.n	800108c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800107a:	4954      	ldr	r1, [pc, #336]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800107c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800107e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001082:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001086:	4302      	orrs	r2, r0
 8001088:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800108c:	0558      	lsls	r0, r3, #21
 800108e:	d508      	bpl.n	80010a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001090:	494e      	ldr	r1, [pc, #312]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001094:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800109c:	4302      	orrs	r2, r0
 800109e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80010a2:	0519      	lsls	r1, r3, #20
 80010a4:	d508      	bpl.n	80010b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80010a6:	4949      	ldr	r1, [pc, #292]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80010b2:	4302      	orrs	r2, r0
 80010b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80010b8:	04da      	lsls	r2, r3, #19
 80010ba:	d508      	bpl.n	80010ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80010bc:	4943      	ldr	r1, [pc, #268]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80010c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010c8:	4302      	orrs	r2, r0
 80010ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80010ce:	049f      	lsls	r7, r3, #18
 80010d0:	d508      	bpl.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80010d2:	493e      	ldr	r1, [pc, #248]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80010d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80010de:	4302      	orrs	r2, r0
 80010e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80010e4:	0258      	lsls	r0, r3, #9
 80010e6:	d508      	bpl.n	80010fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80010e8:	4938      	ldr	r1, [pc, #224]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010ea:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80010ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010f0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80010f4:	4302      	orrs	r2, r0
 80010f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80010fa:	0299      	lsls	r1, r3, #10
 80010fc:	d50c      	bpl.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80010fe:	4833      	ldr	r0, [pc, #204]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001100:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001102:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001106:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800110a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800110e:	bf08      	it	eq
 8001110:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001112:	430a      	orrs	r2, r1
 8001114:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001118:	f013 0f08 	tst.w	r3, #8
 800111c:	bf18      	it	ne
 800111e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001120:	035a      	lsls	r2, r3, #13
 8001122:	d508      	bpl.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001124:	4929      	ldr	r1, [pc, #164]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001126:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001128:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800112c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001130:	4302      	orrs	r2, r0
 8001132:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001136:	021f      	lsls	r7, r3, #8
 8001138:	d509      	bpl.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800113c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001140:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001144:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001148:	4302      	orrs	r2, r0
 800114a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800114e:	0158      	lsls	r0, r3, #5
 8001150:	d509      	bpl.n	8001166 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001152:	491e      	ldr	r1, [pc, #120]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001154:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001158:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800115c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001160:	4302      	orrs	r2, r0
 8001162:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001166:	0119      	lsls	r1, r3, #4
 8001168:	d509      	bpl.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800116a:	4918      	ldr	r1, [pc, #96]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800116c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001170:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001174:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001178:	4302      	orrs	r2, r0
 800117a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800117e:	00da      	lsls	r2, r3, #3
 8001180:	d509      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001182:	4912      	ldr	r1, [pc, #72]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001184:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001188:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800118c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001190:	4302      	orrs	r2, r0
 8001192:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001196:	2e01      	cmp	r6, #1
 8001198:	f000 80b5 	beq.w	8001306 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800119c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a0:	f000 80b1 	beq.w	8001306 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80011a4:	2d01      	cmp	r5, #1
 80011a6:	d175      	bne.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80011a8:	4d08      	ldr	r5, [pc, #32]	; (80011cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011aa:	682b      	ldr	r3, [r5, #0]
 80011ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011b2:	f7ff fa61 	bl	8000678 <HAL_GetTick>
 80011b6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	009f      	lsls	r7, r3, #2
 80011bc:	f100 8127 	bmi.w	800140e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80011c0:	6821      	ldr	r1, [r4, #0]
 80011c2:	030e      	lsls	r6, r1, #12
 80011c4:	d506      	bpl.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80011c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011c8:	b143      	cbz	r3, 80011dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80011ca:	e003      	b.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000
 80011d4:	02cd      	lsls	r5, r1, #11
 80011d6:	d51d      	bpl.n	8001214 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80011d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011da:	b9db      	cbnz	r3, 8001214 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80011dc:	4a93      	ldr	r2, [pc, #588]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80011e2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80011e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80011ee:	4303      	orrs	r3, r0
 80011f0:	6960      	ldr	r0, [r4, #20]
 80011f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80011f6:	69a0      	ldr	r0, [r4, #24]
 80011f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001200:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001204:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001206:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800120a:	3801      	subs	r0, #1
 800120c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001214:	0288      	lsls	r0, r1, #10
 8001216:	d515      	bpl.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001218:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800121a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800121e:	d111      	bne.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001220:	4a82      	ldr	r2, [pc, #520]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001222:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001226:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800122a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800122e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001232:	4303      	orrs	r3, r0
 8001234:	6960      	ldr	r0, [r4, #20]
 8001236:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800123a:	6a20      	ldr	r0, [r4, #32]
 800123c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001244:	070a      	lsls	r2, r1, #28
 8001246:	d519      	bpl.n	800127c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001248:	4978      	ldr	r1, [pc, #480]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800124a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800124e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001252:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125a:	4313      	orrs	r3, r2
 800125c:	6962      	ldr	r2, [r4, #20]
 800125e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001262:	69e2      	ldr	r2, [r4, #28]
 8001264:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800126c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001272:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001276:	4313      	orrs	r3, r2
 8001278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800127c:	4c6b      	ldr	r4, [pc, #428]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001286:	f7ff f9f7 	bl	8000678 <HAL_GetTick>
 800128a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f140 80c4 	bpl.w	800141c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001294:	2000      	movs	r0, #0
 8001296:	e009      	b.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001298:	2601      	movs	r6, #1
 800129a:	e657      	b.n	8000f4c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129c:	f7ff f9ec 	bl	8000678 <HAL_GetTick>
 80012a0:	eba0 0008 	sub.w	r0, r0, r8
 80012a4:	2864      	cmp	r0, #100	; 0x64
 80012a6:	f67f ae69 	bls.w	8000f7c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80012aa:	2003      	movs	r0, #3
}
 80012ac:	b003      	add	sp, #12
 80012ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f43f ae69 	beq.w	8000f90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80012c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80012c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012ca:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80012ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012d2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80012d4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80012d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d8:	07da      	lsls	r2, r3, #31
 80012da:	f57f ae59 	bpl.w	8000f90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80012de:	f7ff f9cb 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80012e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ea:	079b      	lsls	r3, r3, #30
 80012ec:	f53f ae50 	bmi.w	8000f90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f7ff f9c2 	bl	8000678 <HAL_GetTick>
 80012f4:	eba0 0008 	sub.w	r0, r0, r8
 80012f8:	4548      	cmp	r0, r9
 80012fa:	d9f5      	bls.n	80012e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80012fc:	e7d5      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012fe:	6891      	ldr	r1, [r2, #8]
 8001300:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001304:	e654      	b.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001306:	4e49      	ldr	r6, [pc, #292]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001308:	6833      	ldr	r3, [r6, #0]
 800130a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800130e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001310:	f7ff f9b2 	bl	8000678 <HAL_GetTick>
 8001314:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001316:	6833      	ldr	r3, [r6, #0]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	d472      	bmi.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	07d7      	lsls	r7, r2, #31
 8001320:	d512      	bpl.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001324:	b983      	cbnz	r3, 8001348 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001326:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800132a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800132e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001332:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001336:	430b      	orrs	r3, r1
 8001338:	6861      	ldr	r1, [r4, #4]
 800133a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800133e:	68a1      	ldr	r1, [r4, #8]
 8001340:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001344:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001348:	0316      	lsls	r6, r2, #12
 800134a:	d503      	bpl.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800134c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800134e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001352:	d005      	beq.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001354:	02d0      	lsls	r0, r2, #11
 8001356:	d51e      	bpl.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800135a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135e:	d11a      	bne.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001360:	4932      	ldr	r1, [pc, #200]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001362:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001366:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800136a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001372:	4303      	orrs	r3, r0
 8001374:	6860      	ldr	r0, [r4, #4]
 8001376:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800137a:	68e0      	ldr	r0, [r4, #12]
 800137c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001384:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800138a:	f020 001f 	bic.w	r0, r0, #31
 800138e:	3b01      	subs	r3, #1
 8001390:	4303      	orrs	r3, r0
 8001392:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001396:	01d1      	lsls	r1, r2, #7
 8001398:	d511      	bpl.n	80013be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800139a:	4924      	ldr	r1, [pc, #144]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800139c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013a0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80013a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013a8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80013ac:	4303      	orrs	r3, r0
 80013ae:	6860      	ldr	r0, [r4, #4]
 80013b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013b4:	6920      	ldr	r0, [r4, #16]
 80013b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80013be:	0192      	lsls	r2, r2, #6
 80013c0:	d50d      	bpl.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	6862      	ldr	r2, [r4, #4]
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013cc:	68e2      	ldr	r2, [r4, #12]
 80013ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013d2:	68a2      	ldr	r2, [r4, #8]
 80013d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80013da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80013de:	4e13      	ldr	r6, [pc, #76]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80013e0:	6833      	ldr	r3, [r6, #0]
 80013e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013e6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013e8:	f7ff f946 	bl	8000678 <HAL_GetTick>
 80013ec:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013ee:	6833      	ldr	r3, [r6, #0]
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	f53f aed7 	bmi.w	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80013f6:	f7ff f93f 	bl	8000678 <HAL_GetTick>
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	2864      	cmp	r0, #100	; 0x64
 80013fe:	d9f6      	bls.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001400:	e753      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001402:	f7ff f939 	bl	8000678 <HAL_GetTick>
 8001406:	1bc0      	subs	r0, r0, r7
 8001408:	2864      	cmp	r0, #100	; 0x64
 800140a:	d984      	bls.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800140c:	e74d      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800140e:	f7ff f933 	bl	8000678 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2864      	cmp	r0, #100	; 0x64
 8001416:	f67f aecf 	bls.w	80011b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800141a:	e746      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800141c:	f7ff f92c 	bl	8000678 <HAL_GetTick>
 8001420:	1b40      	subs	r0, r0, r5
 8001422:	2864      	cmp	r0, #100	; 0x64
 8001424:	f67f af32 	bls.w	800128c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001428:	e73f      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_TIM_Base_Start_IT+0x28>)
 800143c:	6899      	ldr	r1, [r3, #8]
 800143e:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001440:	2a06      	cmp	r2, #6
 8001442:	d006      	beq.n	8001452 <HAL_TIM_Base_Start_IT+0x22>
 8001444:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001448:	d003      	beq.n	8001452 <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001452:	2000      	movs	r0, #0
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	00010007 	.word	0x00010007

0800145c <HAL_TIM_PeriodElapsedCallback>:
 800145c:	4770      	bx	lr

0800145e <HAL_TIM_OC_DelayElapsedCallback>:
 800145e:	4770      	bx	lr

08001460 <HAL_TIM_IC_CaptureCallback>:
 8001460:	4770      	bx	lr

08001462 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001462:	4770      	bx	lr

08001464 <HAL_TIM_TriggerCallback>:
 8001464:	4770      	bx	lr

08001466 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001466:	6803      	ldr	r3, [r0, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	0791      	lsls	r1, r2, #30
{
 800146c:	b510      	push	{r4, lr}
 800146e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001470:	d50f      	bpl.n	8001492 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	0792      	lsls	r2, r2, #30
 8001476:	d50c      	bpl.n	8001492 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001478:	f06f 0202 	mvn.w	r2, #2
 800147c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800147e:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001480:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001482:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001484:	0799      	lsls	r1, r3, #30
 8001486:	f000 8085 	beq.w	8001594 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800148a:	f7ff ffe9 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800148e:	2300      	movs	r3, #0
 8001490:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	0752      	lsls	r2, r2, #29
 8001498:	d510      	bpl.n	80014bc <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	0750      	lsls	r0, r2, #29
 800149e:	d50d      	bpl.n	80014bc <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014a0:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014a8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014aa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80014b2:	d075      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014b4:	f7ff ffd4 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b8:	2300      	movs	r3, #0
 80014ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	0711      	lsls	r1, r2, #28
 80014c2:	d50f      	bpl.n	80014e4 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	0712      	lsls	r2, r2, #28
 80014c8:	d50c      	bpl.n	80014e4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014ca:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014d2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014d4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014d8:	079b      	lsls	r3, r3, #30
 80014da:	d067      	beq.n	80015ac <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80014dc:	f7ff ffc0 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e0:	2300      	movs	r3, #0
 80014e2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	06d0      	lsls	r0, r2, #27
 80014ea:	d510      	bpl.n	800150e <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	06d1      	lsls	r1, r2, #27
 80014f0:	d50d      	bpl.n	800150e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014f2:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014fa:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001500:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001504:	d058      	beq.n	80015b8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001506:	f7ff ffab 	bl	8001460 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	2300      	movs	r3, #0
 800150c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	07d2      	lsls	r2, r2, #31
 8001514:	d508      	bpl.n	8001528 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	07d0      	lsls	r0, r2, #31
 800151a:	d505      	bpl.n	8001528 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800151c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001520:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001522:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001524:	f7ff ff9a 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	0611      	lsls	r1, r2, #24
 800152e:	d508      	bpl.n	8001542 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	0612      	lsls	r2, r2, #24
 8001534:	d505      	bpl.n	8001542 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001536:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800153a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800153c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800153e:	f000 f9b0 	bl	80018a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	05d0      	lsls	r0, r2, #23
 8001548:	d508      	bpl.n	800155c <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	0611      	lsls	r1, r2, #24
 800154e:	d505      	bpl.n	800155c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001550:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001554:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001556:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001558:	f000 f9a4 	bl	80018a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	0652      	lsls	r2, r2, #25
 8001562:	d508      	bpl.n	8001576 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	0650      	lsls	r0, r2, #25
 8001568:	d505      	bpl.n	8001576 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800156a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800156e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001570:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001572:	f7ff ff77 	bl	8001464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	0691      	lsls	r1, r2, #26
 800157c:	d522      	bpl.n	80015c4 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	0692      	lsls	r2, r2, #26
 8001582:	d51f      	bpl.n	80015c4 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001584:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001588:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800158a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800158c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001590:	f000 b986 	b.w	80018a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001594:	f7ff ff63 	bl	800145e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff ff62 	bl	8001462 <HAL_TIM_PWM_PulseFinishedCallback>
 800159e:	e776      	b.n	800148e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a0:	f7ff ff5d 	bl	800145e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff ff5c 	bl	8001462 <HAL_TIM_PWM_PulseFinishedCallback>
 80015aa:	e785      	b.n	80014b8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ac:	f7ff ff57 	bl	800145e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff ff56 	bl	8001462 <HAL_TIM_PWM_PulseFinishedCallback>
 80015b6:	e793      	b.n	80014e0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b8:	f7ff ff51 	bl	800145e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ff50 	bl	8001462 <HAL_TIM_PWM_PulseFinishedCallback>
 80015c2:	e7a2      	b.n	800150a <HAL_TIM_IRQHandler+0xa4>
 80015c4:	bd10      	pop	{r4, pc}
	...

080015c8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015c8:	4a30      	ldr	r2, [pc, #192]	; (800168c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80015ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015cc:	4290      	cmp	r0, r2
 80015ce:	d012      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015d4:	d00f      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015da:	4290      	cmp	r0, r2
 80015dc:	d00b      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d007      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d003      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015f2:	4290      	cmp	r0, r2
 80015f4:	d119      	bne.n	800162a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80015f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <TIM_Base_SetConfig+0xc4>)
 8001600:	4290      	cmp	r0, r2
 8001602:	d029      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001604:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001608:	d026      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 800160a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800160e:	4290      	cmp	r0, r2
 8001610:	d022      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001616:	4290      	cmp	r0, r2
 8001618:	d01e      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4290      	cmp	r0, r2
 8001620:	d01a      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001622:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001626:	4290      	cmp	r0, r2
 8001628:	d016      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <TIM_Base_SetConfig+0xc8>)
 800162c:	4290      	cmp	r0, r2
 800162e:	d013      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001630:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001634:	4290      	cmp	r0, r2
 8001636:	d00f      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001638:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163c:	4290      	cmp	r0, r2
 800163e:	d00b      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001640:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001644:	4290      	cmp	r0, r2
 8001646:	d007      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164c:	4290      	cmp	r0, r2
 800164e:	d003      	beq.n	8001658 <TIM_Base_SetConfig+0x90>
 8001650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001654:	4290      	cmp	r0, r2
 8001656:	d103      	bne.n	8001660 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800165c:	68ca      	ldr	r2, [r1, #12]
 800165e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001660:	694a      	ldr	r2, [r1, #20]
 8001662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001666:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001668:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800166a:	688b      	ldr	r3, [r1, #8]
 800166c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800166e:	680b      	ldr	r3, [r1, #0]
 8001670:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <TIM_Base_SetConfig+0xc4>)
 8001674:	4298      	cmp	r0, r3
 8001676:	d003      	beq.n	8001680 <TIM_Base_SetConfig+0xb8>
 8001678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167c:	4298      	cmp	r0, r3
 800167e:	d101      	bne.n	8001684 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001680:	690b      	ldr	r3, [r1, #16]
 8001682:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001684:	2301      	movs	r3, #1
 8001686:	6143      	str	r3, [r0, #20]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40010000 	.word	0x40010000
 8001690:	40014000 	.word	0x40014000

08001694 <HAL_TIM_Base_Init>:
{
 8001694:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001696:	4604      	mov	r4, r0
 8001698:	b1a0      	cbz	r0, 80016c4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800169a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800169e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016a2:	b91b      	cbnz	r3, 80016ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016a8:	f000 fde0 	bl	800226c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80016b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b6:	f7ff ff87 	bl	80015c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016ba:	2301      	movs	r3, #1
  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80016be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
}
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80016c8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016ca:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80016cc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016d6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016d8:	6083      	str	r3, [r0, #8]
 80016da:	bd10      	pop	{r4, pc}

080016dc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
{
 80016e2:	b570      	push	{r4, r5, r6, lr}
 80016e4:	4604      	mov	r4, r0
 80016e6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016ea:	d017      	beq.n	800171c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80016f0:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80016f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80016f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80016f8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_TIM_ConfigClockSource+0x124>)
 80016fc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80016fe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001700:	680b      	ldr	r3, [r1, #0]
 8001702:	2b40      	cmp	r3, #64	; 0x40
 8001704:	d065      	beq.n	80017d2 <HAL_TIM_ConfigClockSource+0xf6>
 8001706:	d815      	bhi.n	8001734 <HAL_TIM_ConfigClockSource+0x58>
 8001708:	2b10      	cmp	r3, #16
 800170a:	d00c      	beq.n	8001726 <HAL_TIM_ConfigClockSource+0x4a>
 800170c:	d807      	bhi.n	800171e <HAL_TIM_ConfigClockSource+0x42>
 800170e:	b153      	cbz	r3, 8001726 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8001710:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001712:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001718:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800171e:	2b20      	cmp	r3, #32
 8001720:	d001      	beq.n	8001726 <HAL_TIM_ConfigClockSource+0x4a>
 8001722:	2b30      	cmp	r3, #48	; 0x30
 8001724:	d1f4      	bne.n	8001710 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8001726:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001728:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800172c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001730:	4313      	orrs	r3, r2
 8001732:	e01a      	b.n	800176a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001734:	2b60      	cmp	r3, #96	; 0x60
 8001736:	d034      	beq.n	80017a2 <HAL_TIM_ConfigClockSource+0xc6>
 8001738:	d819      	bhi.n	800176e <HAL_TIM_ConfigClockSource+0x92>
 800173a:	2b50      	cmp	r3, #80	; 0x50
 800173c:	d1e8      	bne.n	8001710 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800173e:	684a      	ldr	r2, [r1, #4]
 8001740:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001742:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001744:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001746:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800174a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800174e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001750:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001752:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001758:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800175c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800175e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001760:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001766:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800176a:	6083      	str	r3, [r0, #8]
 800176c:	e7d0      	b.n	8001710 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800176e:	2b70      	cmp	r3, #112	; 0x70
 8001770:	d00c      	beq.n	800178c <HAL_TIM_ConfigClockSource+0xb0>
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d1cb      	bne.n	8001710 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8001778:	68cb      	ldr	r3, [r1, #12]
 800177a:	684a      	ldr	r2, [r1, #4]
 800177c:	6889      	ldr	r1, [r1, #8]
 800177e:	f7ff ffa3 	bl	80016c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	6893      	ldr	r3, [r2, #8]
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	e008      	b.n	800179e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800178c:	68cb      	ldr	r3, [r1, #12]
 800178e:	684a      	ldr	r2, [r1, #4]
 8001790:	6889      	ldr	r1, [r1, #8]
 8001792:	f7ff ff99 	bl	80016c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800179a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800179e:	6093      	str	r3, [r2, #8]
      break;
 80017a0:	e7b6      	b.n	8001710 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017a2:	684d      	ldr	r5, [r1, #4]
 80017a4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017a6:	6a01      	ldr	r1, [r0, #32]
 80017a8:	f021 0110 	bic.w	r1, r1, #16
 80017ac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017ae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80017b0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017ba:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80017be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80017c2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80017c4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017cc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80017d0:	e7cb      	b.n	800176a <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017d2:	684a      	ldr	r2, [r1, #4]
 80017d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80017d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017d8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017da:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017de:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80017e2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017e4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017e6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017ec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80017f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017fa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80017fe:	e7b4      	b.n	800176a <HAL_TIM_ConfigClockSource+0x8e>
 8001800:	fffe0088 	.word	0xfffe0088

08001804 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001804:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	f04f 0302 	mov.w	r3, #2
{
 800180e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001810:	d03e      	beq.n	8001890 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001812:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001816:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001818:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800181a:	4d1e      	ldr	r5, [pc, #120]	; (8001894 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 800181c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001820:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8001822:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001824:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001826:	d002      	beq.n	800182e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8001828:	4e1b      	ldr	r6, [pc, #108]	; (8001898 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800182a:	42b3      	cmp	r3, r6
 800182c:	d103      	bne.n	8001836 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800182e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001832:	684e      	ldr	r6, [r1, #4]
 8001834:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001836:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001838:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800183c:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800183e:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8001842:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001844:	d019      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184a:	d016      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001856:	4293      	cmp	r3, r2
 8001858:	d00f      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800185a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800185e:	4293      	cmp	r3, r2
 8001860:	d00b      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001862:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800186a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800186e:	4293      	cmp	r3, r2
 8001870:	d003      	beq.n	800187a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001872:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001876:	4293      	cmp	r3, r2
 8001878:	d104      	bne.n	8001884 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800187a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800187c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001880:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001884:	2301      	movs	r3, #1
 8001886:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800188a:	2300      	movs	r3, #0
 800188c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001890:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001892:	bd70      	pop	{r4, r5, r6, pc}
 8001894:	40010000 	.word	0x40010000
 8001898:	40010400 	.word	0x40010400
 800189c:	40000400 	.word	0x40000400

080018a0 <HAL_TIMEx_CommutCallback>:
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIMEx_BreakCallback>:
 80018a2:	4770      	bx	lr

080018a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80018a4:	4770      	bx	lr
	...

080018a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018a8:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018aa:	69c2      	ldr	r2, [r0, #28]
{
 80018ac:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018ae:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018b0:	6881      	ldr	r1, [r0, #8]
 80018b2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018b4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018b6:	4301      	orrs	r1, r0
 80018b8:	6960      	ldr	r0, [r4, #20]
 80018ba:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018bc:	4890      	ldr	r0, [pc, #576]	; (8001b00 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018be:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018c0:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80018c2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018c4:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018c6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018c8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80018d0:	4301      	orrs	r1, r0
 80018d2:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018d4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018d6:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80018d8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018da:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80018de:	4301      	orrs	r1, r0
 80018e0:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018e2:	4988      	ldr	r1, [pc, #544]	; (8001b04 <UART_SetConfig+0x25c>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d117      	bne.n	8001918 <UART_SetConfig+0x70>
 80018e8:	4b87      	ldr	r3, [pc, #540]	; (8001b08 <UART_SetConfig+0x260>)
 80018ea:	4988      	ldr	r1, [pc, #544]	; (8001b0c <UART_SetConfig+0x264>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	d129      	bne.n	8001950 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f200 809d 	bhi.w	8001a3c <UART_SetConfig+0x194>
 8001902:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001906:	008c      	.short	0x008c
 8001908:	00ee00e8 	.word	0x00ee00e8
 800190c:	00fa009b 	.word	0x00fa009b
 8001910:	009b009b 	.word	0x009b009b
 8001914:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001918:	497d      	ldr	r1, [pc, #500]	; (8001b10 <UART_SetConfig+0x268>)
 800191a:	428b      	cmp	r3, r1
 800191c:	d106      	bne.n	800192c <UART_SetConfig+0x84>
 800191e:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <UART_SetConfig+0x260>)
 8001920:	497c      	ldr	r1, [pc, #496]	; (8001b14 <UART_SetConfig+0x26c>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	e7e3      	b.n	80018f4 <UART_SetConfig+0x4c>
 800192c:	497a      	ldr	r1, [pc, #488]	; (8001b18 <UART_SetConfig+0x270>)
 800192e:	428b      	cmp	r3, r1
 8001930:	d11d      	bne.n	800196e <UART_SetConfig+0xc6>
 8001932:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <UART_SetConfig+0x260>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800193c:	2b10      	cmp	r3, #16
 800193e:	f000 80d9 	beq.w	8001af4 <UART_SetConfig+0x24c>
 8001942:	d80e      	bhi.n	8001962 <UART_SetConfig+0xba>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d067      	beq.n	8001a18 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001948:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800194c:	d076      	beq.n	8001a3c <UART_SetConfig+0x194>
 800194e:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001950:	2b08      	cmp	r3, #8
 8001952:	d873      	bhi.n	8001a3c <UART_SetConfig+0x194>
 8001954:	e8df f003 	tbb	[pc, r3]
 8001958:	72a29f99 	.word	0x72a29f99
 800195c:	727272b4 	.word	0x727272b4
 8001960:	b7          	.byte	0xb7
 8001961:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001962:	2b20      	cmp	r3, #32
 8001964:	f000 80ba 	beq.w	8001adc <UART_SetConfig+0x234>
 8001968:	2b30      	cmp	r3, #48	; 0x30
 800196a:	d03f      	beq.n	80019ec <UART_SetConfig+0x144>
 800196c:	e7ec      	b.n	8001948 <UART_SetConfig+0xa0>
 800196e:	496b      	ldr	r1, [pc, #428]	; (8001b1c <UART_SetConfig+0x274>)
 8001970:	428b      	cmp	r3, r1
 8001972:	d10d      	bne.n	8001990 <UART_SetConfig+0xe8>
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <UART_SetConfig+0x260>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	f000 80b8 	beq.w	8001af4 <UART_SetConfig+0x24c>
 8001984:	d9de      	bls.n	8001944 <UART_SetConfig+0x9c>
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	f000 80a8 	beq.w	8001adc <UART_SetConfig+0x234>
 800198c:	2bc0      	cmp	r3, #192	; 0xc0
 800198e:	e7ec      	b.n	800196a <UART_SetConfig+0xc2>
 8001990:	4963      	ldr	r1, [pc, #396]	; (8001b20 <UART_SetConfig+0x278>)
 8001992:	428b      	cmp	r3, r1
 8001994:	d110      	bne.n	80019b8 <UART_SetConfig+0x110>
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <UART_SetConfig+0x260>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	f000 80a6 	beq.w	8001af4 <UART_SetConfig+0x24c>
 80019a8:	d9cc      	bls.n	8001944 <UART_SetConfig+0x9c>
 80019aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ae:	f000 8095 	beq.w	8001adc <UART_SetConfig+0x234>
 80019b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019b6:	e7d8      	b.n	800196a <UART_SetConfig+0xc2>
 80019b8:	495a      	ldr	r1, [pc, #360]	; (8001b24 <UART_SetConfig+0x27c>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	d11e      	bne.n	80019fc <UART_SetConfig+0x154>
 80019be:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <UART_SetConfig+0x260>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019cc:	f000 8092 	beq.w	8001af4 <UART_SetConfig+0x24c>
 80019d0:	d806      	bhi.n	80019e0 <UART_SetConfig+0x138>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d07c      	beq.n	8001ad0 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019da:	d12f      	bne.n	8001a3c <UART_SetConfig+0x194>
 80019dc:	2310      	movs	r3, #16
 80019de:	e78d      	b.n	80018fc <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e4:	d07a      	beq.n	8001adc <UART_SetConfig+0x234>
 80019e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019ea:	d1f4      	bne.n	80019d6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019f0:	d169      	bne.n	8001ac6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	0858      	lsrs	r0, r3, #1
 80019f6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80019fa:	e078      	b.n	8001aee <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019fc:	494a      	ldr	r1, [pc, #296]	; (8001b28 <UART_SetConfig+0x280>)
 80019fe:	428b      	cmp	r3, r1
 8001a00:	d124      	bne.n	8001a4c <UART_SetConfig+0x1a4>
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <UART_SetConfig+0x260>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a10:	d070      	beq.n	8001af4 <UART_SetConfig+0x24c>
 8001a12:	d815      	bhi.n	8001a40 <UART_SetConfig+0x198>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1de      	bne.n	80019d6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a1c:	d135      	bne.n	8001a8a <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a1e:	f7ff fa39 	bl	8000e94 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a22:	6862      	ldr	r2, [r4, #4]
 8001a24:	0853      	lsrs	r3, r2, #1
 8001a26:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001a2a:	fbb0 f0f2 	udiv	r0, r0, r2
 8001a2e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a30:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001a34:	f1a0 0210 	sub.w	r2, r0, #16
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d91a      	bls.n	8001a72 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e020      	b.n	8001a82 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a44:	d04a      	beq.n	8001adc <UART_SetConfig+0x234>
 8001a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a4a:	e7ce      	b.n	80019ea <UART_SetConfig+0x142>
 8001a4c:	4937      	ldr	r1, [pc, #220]	; (8001b2c <UART_SetConfig+0x284>)
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d1f4      	bne.n	8001a3c <UART_SetConfig+0x194>
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <UART_SetConfig+0x260>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a60:	d048      	beq.n	8001af4 <UART_SetConfig+0x24c>
 8001a62:	f67f af6f 	bls.w	8001944 <UART_SetConfig+0x9c>
 8001a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6a:	d037      	beq.n	8001adc <UART_SetConfig+0x234>
 8001a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a70:	e77b      	b.n	800196a <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a72:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a76:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	4318      	orrs	r0, r3
 8001a7e:	60d0      	str	r0, [r2, #12]
 8001a80:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a86:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001a88:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a8a:	f7ff fa03 	bl	8000e94 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001a94:	e008      	b.n	8001aa8 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a96:	f7ff fa0d 	bl	8000eb4 <HAL_RCC_GetPCLK2Freq>
 8001a9a:	e7f8      	b.n	8001a8e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	0858      	lsrs	r0, r3, #1
 8001aa0:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001aa4:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001aa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aac:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aae:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001ab2:	f1a0 0210 	sub.w	r2, r0, #16
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d8c0      	bhi.n	8001a3c <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	60d8      	str	r0, [r3, #12]
 8001abe:	e7df      	b.n	8001a80 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ac0:	f7ff f91a 	bl	8000cf8 <HAL_RCC_GetSysClockFreq>
 8001ac4:	e7e3      	b.n	8001a8e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	0858      	lsrs	r0, r3, #1
 8001aca:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001ace:	e7eb      	b.n	8001aa8 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ad4:	d1df      	bne.n	8001a96 <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001ad6:	f7ff f9ed 	bl	8000eb4 <HAL_RCC_GetPCLK2Freq>
 8001ada:	e7a2      	b.n	8001a22 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001adc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ae0:	d1dc      	bne.n	8001a9c <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ae2:	6863      	ldr	r3, [r4, #4]
 8001ae4:	0858      	lsrs	r0, r3, #1
 8001ae6:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001aea:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001aee:	fbb0 f0f3 	udiv	r0, r0, r3
 8001af2:	e79c      	b.n	8001a2e <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001af8:	d1e2      	bne.n	8001ac0 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001afa:	f7ff f8fd 	bl	8000cf8 <HAL_RCC_GetSysClockFreq>
 8001afe:	e790      	b.n	8001a22 <UART_SetConfig+0x17a>
 8001b00:	efff69f3 	.word	0xefff69f3
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08002ca0 	.word	0x08002ca0
 8001b10:	40004400 	.word	0x40004400
 8001b14:	08002ca4 	.word	0x08002ca4
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	40004c00 	.word	0x40004c00
 8001b20:	40005000 	.word	0x40005000
 8001b24:	40011400 	.word	0x40011400
 8001b28:	40007800 	.word	0x40007800
 8001b2c:	40007c00 	.word	0x40007c00

08001b30 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b32:	07da      	lsls	r2, r3, #31
{
 8001b34:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b36:	d506      	bpl.n	8001b46 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b38:	6801      	ldr	r1, [r0, #0]
 8001b3a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001b3c:	684a      	ldr	r2, [r1, #4]
 8001b3e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b42:	4322      	orrs	r2, r4
 8001b44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b46:	079c      	lsls	r4, r3, #30
 8001b48:	d506      	bpl.n	8001b58 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b4a:	6801      	ldr	r1, [r0, #0]
 8001b4c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b4e:	684a      	ldr	r2, [r1, #4]
 8001b50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b54:	4322      	orrs	r2, r4
 8001b56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b58:	0759      	lsls	r1, r3, #29
 8001b5a:	d506      	bpl.n	8001b6a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b5c:	6801      	ldr	r1, [r0, #0]
 8001b5e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b60:	684a      	ldr	r2, [r1, #4]
 8001b62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b66:	4322      	orrs	r2, r4
 8001b68:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b6a:	071a      	lsls	r2, r3, #28
 8001b6c:	d506      	bpl.n	8001b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b6e:	6801      	ldr	r1, [r0, #0]
 8001b70:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b72:	684a      	ldr	r2, [r1, #4]
 8001b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b78:	4322      	orrs	r2, r4
 8001b7a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b7c:	06dc      	lsls	r4, r3, #27
 8001b7e:	d506      	bpl.n	8001b8e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b80:	6801      	ldr	r1, [r0, #0]
 8001b82:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b84:	688a      	ldr	r2, [r1, #8]
 8001b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b8e:	0699      	lsls	r1, r3, #26
 8001b90:	d506      	bpl.n	8001ba0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b92:	6801      	ldr	r1, [r0, #0]
 8001b94:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b96:	688a      	ldr	r2, [r1, #8]
 8001b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9c:	4322      	orrs	r2, r4
 8001b9e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ba0:	065a      	lsls	r2, r3, #25
 8001ba2:	d510      	bpl.n	8001bc6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ba4:	6801      	ldr	r1, [r0, #0]
 8001ba6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ba8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001baa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001bb2:	ea42 0204 	orr.w	r2, r2, r4
 8001bb6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bb8:	d105      	bne.n	8001bc6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001bba:	684a      	ldr	r2, [r1, #4]
 8001bbc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bbe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001bc2:	4322      	orrs	r2, r4
 8001bc4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	d506      	bpl.n	8001bd8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001bca:	6802      	ldr	r2, [r0, #0]
 8001bcc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001bce:	6853      	ldr	r3, [r2, #4]
 8001bd0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6053      	str	r3, [r2, #4]
 8001bd8:	bd10      	pop	{r4, pc}

08001bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bde:	9d06      	ldr	r5, [sp, #24]
 8001be0:	4604      	mov	r4, r0
 8001be2:	460f      	mov	r7, r1
 8001be4:	4616      	mov	r6, r2
 8001be6:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	69ca      	ldr	r2, [r1, #28]
 8001bec:	ea37 0302 	bics.w	r3, r7, r2
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2201      	moveq	r2, #1
 8001bf4:	2200      	movne	r2, #0
 8001bf6:	42b2      	cmp	r2, r6
 8001bf8:	d002      	beq.n	8001c00 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001bfa:	2000      	movs	r0, #0
}
 8001bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c00:	1c68      	adds	r0, r5, #1
 8001c02:	d0f2      	beq.n	8001bea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7fe fd38 	bl	8000678 <HAL_GetTick>
 8001c08:	eba0 0008 	sub.w	r0, r0, r8
 8001c0c:	4285      	cmp	r5, r0
 8001c0e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c10:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	d300      	bcc.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001c14:	b97d      	cbnz	r5, 8001c36 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c1a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1c:	6883      	ldr	r3, [r0, #8]
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001c24:	2320      	movs	r3, #32
 8001c26:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001c28:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001c2a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001c2e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	d5d6      	bpl.n	8001be8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c3a:	69c3      	ldr	r3, [r0, #28]
 8001c3c:	051b      	lsls	r3, r3, #20
 8001c3e:	d5d3      	bpl.n	8001be8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c44:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c4c:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4e:	6883      	ldr	r3, [r0, #8]
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001c56:	2320      	movs	r3, #32
 8001c58:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001c5a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c5c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001c5e:	e7e4      	b.n	8001c2a <UART_WaitOnFlagUntilTimeout+0x50>

08001c60 <HAL_UART_Transmit>:
{
 8001c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c64:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c66:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001c68:	4604      	mov	r4, r0
 8001c6a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001c6c:	2b20      	cmp	r3, #32
{
 8001c6e:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c70:	d14c      	bne.n	8001d0c <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d048      	beq.n	8001d08 <HAL_UART_Transmit+0xa8>
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	d046      	beq.n	8001d08 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001c7a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d044      	beq.n	8001d0c <HAL_UART_Transmit+0xac>
 8001c82:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c8a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8c:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c8e:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001c90:	f7fe fcf2 	bl	8000678 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c94:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001c96:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001c98:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001ca0:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca4:	d103      	bne.n	8001cae <HAL_UART_Transmit+0x4e>
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	b90b      	cbnz	r3, 8001cae <HAL_UART_Transmit+0x4e>
 8001caa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001cac:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001cb4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	b93a      	cbnz	r2, 8001cd2 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff ff88 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001cca:	b940      	cbnz	r0, 8001cde <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001cd0:	e006      	b.n	8001ce0 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff ff7f 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001cdc:	b118      	cbz	r0, 8001ce6 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
}
 8001ce0:	b003      	add	sp, #12
 8001ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001ce8:	b95e      	cbnz	r6, 8001d02 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cea:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001cf4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001d00:	e7d8      	b.n	8001cb4 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d02:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001d06:	e7f4      	b.n	8001cf2 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7e9      	b.n	8001ce0 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	e7e7      	b.n	8001ce0 <HAL_UART_Transmit+0x80>

08001d10 <UART_CheckIdleState>:
{
 8001d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	2600      	movs	r6, #0
{
 8001d14:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d16:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001d18:	f7fe fcae 	bl	8000678 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d1c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001d1e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	071a      	lsls	r2, r3, #28
 8001d24:	d415      	bmi.n	8001d52 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	075b      	lsls	r3, r3, #29
 8001d2c:	d50a      	bpl.n	8001d44 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d38:	4620      	mov	r0, r4
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	f7ff ff4c 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001d42:	b990      	cbnz	r0, 8001d6a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001d44:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d46:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d48:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001d4a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001d4e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001d50:	e00c      	b.n	8001d6c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d56:	4632      	mov	r2, r6
 8001d58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff ff3a 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d0dd      	beq.n	8001d26 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d6a:	2003      	movs	r0, #3
}
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}

08001d70 <HAL_UART_Init>:
{
 8001d70:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d72:	4604      	mov	r4, r0
 8001d74:	b340      	cbz	r0, 8001dc8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d78:	b91b      	cbnz	r3, 8001d82 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001d7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001d7e:	f000 fa91 	bl	80022a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d84:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d86:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001d88:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d92:	f7ff fd89 	bl	80018a8 <UART_SetConfig>
 8001d96:	2801      	cmp	r0, #1
 8001d98:	d016      	beq.n	8001dc8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9c:	b113      	cbz	r3, 8001da4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fec6 	bl	8001b30 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001da6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
}
 8001dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001dc2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001dc4:	f7ff bfa4 	b.w	8001d10 <UART_CheckIdleState>
}
 8001dc8:	2001      	movs	r0, #1
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <delay>:

void delay (uint16_t time)
{
	/* change your code here for the delay in microseconds */

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <delay+0x10>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd6:	4282      	cmp	r2, r0
 8001dd8:	d3fc      	bcc.n	8001dd4 <delay+0x8>
}
 8001dda:	4770      	bx	lr
 8001ddc:	200201f0 	.word	0x200201f0

08001de0 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b530      	push	{r4, r5, lr}
 8001de2:	b087      	sub	sp, #28
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	2214      	movs	r2, #20
 8001dea:	2100      	movs	r1, #0
 8001dec:	a801      	add	r0, sp, #4
 8001dee:	f000 fb1d 	bl	800242c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001df4:	a901      	add	r1, sp, #4
 8001df6:	4620      	mov	r0, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfa:	2302      	movs	r3, #2
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001dfc:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e00:	f7fe fcae 	bl	8000760 <HAL_GPIO_Init>
}
 8001e04:	b007      	add	sp, #28
 8001e06:	bd30      	pop	{r4, r5, pc}

08001e08 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b530      	push	{r4, r5, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	2214      	movs	r2, #20
 8001e12:	2100      	movs	r1, #0
 8001e14:	a801      	add	r0, sp, #4
 8001e16:	f000 fb09 	bl	800242c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1a:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e1c:	a901      	add	r1, sp, #4
 8001e1e:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001e20:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e22:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e24:	f7fe fc9c 	bl	8000760 <HAL_GPIO_Init>
}
 8001e28:	b007      	add	sp, #28
 8001e2a:	bd30      	pop	{r4, r5, pc}

08001e2c <DHT11_Start>:

void DHT11_Start (void)
{
 8001e2c:	b510      	push	{r4, lr}
	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);  // set the pin as output
 8001e2e:	4c10      	ldr	r4, [pc, #64]	; (8001e70 <DHT11_Start+0x44>)
 8001e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ffd3 	bl	8001de0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 0);   // pull the pin low
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7fe fd7d 	bl	8000940 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8001e46:	f244 6050 	movw	r0, #18000	; 0x4650
 8001e4a:	f7ff ffbf 	bl	8001dcc <delay>
    HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 1);   // pull the pin high
 8001e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e52:	4620      	mov	r0, r4
 8001e54:	2201      	movs	r2, #1
 8001e56:	f7fe fd73 	bl	8000940 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001e5a:	2014      	movs	r0, #20
 8001e5c:	f7ff ffb6 	bl	8001dcc <delay>
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);    // set as input
 8001e60:	4620      	mov	r0, r4
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8001e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);    // set as input
 8001e6a:	f7ff bfcd 	b.w	8001e08 <Set_Pin_Input>
 8001e6e:	bf00      	nop
 8001e70:	40020400 	.word	0x40020400

08001e74 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
	uint8_t Response = 0;
	delay (40);
 8001e76:	2028      	movs	r0, #40	; 0x28
 8001e78:	f7ff ffa8 	bl	8001dcc <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))
 8001e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <DHT11_Check_Response+0x44>)
 8001e82:	f7fe fd57 	bl	8000934 <HAL_GPIO_ReadPin>
 8001e86:	b9a8      	cbnz	r0, 8001eb4 <DHT11_Check_Response+0x40>
	{
		delay (80);
 8001e88:	2050      	movs	r0, #80	; 0x50
 8001e8a:	f7ff ff9f 	bl	8001dcc <delay>
		if ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin))) Response = 1;
 8001e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e92:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <DHT11_Check_Response+0x44>)
 8001e94:	f7fe fd4e 	bl	8000934 <HAL_GPIO_ReadPin>
		else Response = -1; // 255
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2401      	movne	r4, #1
 8001e9e:	24ff      	moveq	r4, #255	; 0xff
	}
	while ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));   // wait for the pin to go low
 8001ea0:	4d05      	ldr	r5, [pc, #20]	; (8001eb8 <DHT11_Check_Response+0x44>)
 8001ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7fe fd44 	bl	8000934 <HAL_GPIO_ReadPin>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1f8      	bne.n	8001ea2 <DHT11_Check_Response+0x2e>

	return Response;
}
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	e7f3      	b.n	8001ea0 <DHT11_Check_Response+0x2c>
 8001eb8:	40020400 	.word	0x40020400

08001ebc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2507      	movs	r5, #7
	uint8_t i,j;
	for (j=0;j<8;j++)
	{
		while (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));   // wait for the pin to go high
 8001ec2:	4e12      	ldr	r6, [pc, #72]	; (8001f0c <DHT11_Read+0x50>)
 8001ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f7fe fd33 	bl	8000934 <HAL_GPIO_ReadPin>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d0f8      	beq.n	8001ec4 <DHT11_Read+0x8>
		delay (40);   // wait for 40 us
 8001ed2:	2028      	movs	r0, #40	; 0x28
 8001ed4:	f7ff ff7a 	bl	8001dcc <delay>
		if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))   // if the pin is low
 8001ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001edc:	4630      	mov	r0, r6
 8001ede:	f7fe fd29 	bl	8000934 <HAL_GPIO_ReadPin>
 8001ee2:	2301      	movs	r3, #1
		{
			i&= ~(1<<(7-j));   // write 0
 8001ee4:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)))   // if the pin is low
 8001ee6:	b968      	cbnz	r0, 8001f04 <DHT11_Read+0x48>
			i&= ~(1<<(7-j));   // write 0
 8001ee8:	ea24 0403 	bic.w	r4, r4, r3
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin)));  // wait for the pin to go low
 8001eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7fe fd1f 	bl	8000934 <HAL_GPIO_ReadPin>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d1f8      	bne.n	8001eec <DHT11_Read+0x30>
	for (j=0;j<8;j++)
 8001efa:	f115 35ff 	adds.w	r5, r5, #4294967295
 8001efe:	d2e1      	bcs.n	8001ec4 <DHT11_Read+0x8>
	}
	return i;
}
 8001f00:	4620      	mov	r0, r4
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001f04:	431c      	orrs	r4, r3
 8001f06:	b2e4      	uxtb	r4, r4
 8001f08:	e7f0      	b.n	8001eec <DHT11_Read+0x30>
 8001f0a:	bf00      	nop
 8001f0c:	40020400 	.word	0x40020400

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b510      	push	{r4, lr}
 8001f12:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f14:	2234      	movs	r2, #52	; 0x34
 8001f16:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f18:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	a807      	add	r0, sp, #28
 8001f1c:	f000 fa86 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	2214      	movs	r2, #20
 8001f22:	2100      	movs	r1, #0
 8001f24:	a802      	add	r0, sp, #8
 8001f26:	f000 fa81 	bl	800242c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2290      	movs	r2, #144	; 0x90
 8001f2e:	a814      	add	r0, sp, #80	; 0x50
 8001f30:	f000 fa7c 	bl	800242c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f36:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f42:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4c:	6813      	ldr	r3, [r2, #0]
 8001f4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f60:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f74:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f7a:	23a8      	movs	r3, #168	; 0xa8
 8001f7c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f82:	f7fe fcf5 	bl	8000970 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f86:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f88:	4621      	mov	r1, r4
 8001f8a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f98:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f9a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9c:	f7fe feda 	bl	8000d54 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa4:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fa6:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fac:	f7fe ff92 	bl	8000ed4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001fb0:	b038      	add	sp, #224	; 0xe0
 8001fb2:	bd10      	pop	{r4, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <main>:
{
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	f2ad 7dfc 	subw	sp, sp, #2044	; 0x7fc
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2400      	movs	r4, #0
  HAL_Init();
 8001fc6:	f7fe fb3f 	bl	8000648 <HAL_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2501      	movs	r5, #1
  SystemClock_Config();
 8001fcc:	f7ff ffa0 	bl	8001f10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	2214      	movs	r2, #20
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	a80a      	add	r0, sp, #40	; 0x28
 8001fd6:	f000 fa29 	bl	800242c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <main+0x200>)
  HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 8001fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe0:	4877      	ldr	r0, [pc, #476]	; (80021c0 <main+0x204>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  htim2.Instance = TIM2;
 8001fe4:	4e77      	ldr	r6, [pc, #476]	; (80021c4 <main+0x208>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	f042 0204 	orr.w	r2, r2, #4
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 8001fea:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80021c0 <main+0x204>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff2:	f002 0204 	and.w	r2, r2, #4
 8001ff6:	9202      	str	r2, [sp, #8]
 8001ff8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
 8002002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002004:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002008:	9203      	str	r2, [sp, #12]
 800200a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
 8002014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002016:	f002 0201 	and.w	r2, r2, #1
 800201a:	9204      	str	r2, [sp, #16]
 800201c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	f042 0202 	orr.w	r2, r2, #2
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
 8002026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002028:	f002 0202 	and.w	r2, r2, #2
 800202c:	9205      	str	r2, [sp, #20]
 800202e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	9306      	str	r3, [sp, #24]
 8002042:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 8002044:	f7fe fc7c 	bl	8000940 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f244 0181 	movw	r1, #16513	; 0x4081
 800204e:	485c      	ldr	r0, [pc, #368]	; (80021c0 <main+0x204>)
 8002050:	f7fe fc76 	bl	8000940 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	a90a      	add	r1, sp, #40	; 0x28
 800205a:	485b      	ldr	r0, [pc, #364]	; (80021c8 <main+0x20c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800205c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205e:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <main+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002062:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f7fe fb7c 	bl	8000760 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DHT22_Pin;
 8002068:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 800206c:	a90a      	add	r1, sp, #40	; 0x28
 800206e:	4854      	ldr	r0, [pc, #336]	; (80021c0 <main+0x204>)
  GPIO_InitStruct.Pin = DHT22_Pin;
 8002070:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002072:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002076:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 800207a:	f7fe fb71 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800207e:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	a90a      	add	r1, sp, #40	; 0x28
 8002084:	484e      	ldr	r0, [pc, #312]	; (80021c0 <main+0x204>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8002086:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f7fe fb67 	bl	8000760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002092:	4621      	mov	r1, r4
 8002094:	4622      	mov	r2, r4
 8002096:	2028      	movs	r0, #40	; 0x28
  huart3.Instance = USART3;
 8002098:	4d4d      	ldr	r5, [pc, #308]	; (80021d0 <main+0x214>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800209a:	f7fe fb05 	bl	80006a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800209e:	2028      	movs	r0, #40	; 0x28
 80020a0:	f7fe fb3a 	bl	8000718 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 80020a4:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <main+0x218>)
 80020a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020aa:	4628      	mov	r0, r5
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ac:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ae:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b0:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	622c      	str	r4, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b8:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 80020ba:	e885 000c 	stmia.w	r5, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020be:	230c      	movs	r3, #12
 80020c0:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	f7ff fe55 	bl	8001d70 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c6:	2210      	movs	r2, #16
 80020c8:	4621      	mov	r1, r4
 80020ca:	a80a      	add	r0, sp, #40	; 0x28
 80020cc:	f000 f9ae 	bl	800242c <memset>
  htim2.Init.Prescaler = 84-1;
 80020d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020d4:	2353      	movs	r3, #83	; 0x53
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d6:	4630      	mov	r0, r6
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020dc:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	9407      	str	r4, [sp, #28]
 80020e0:	9408      	str	r4, [sp, #32]
 80020e2:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.Prescaler = 84-1;
 80020e4:	e886 000a 	stmia.w	r6, {r1, r3}
  htim2.Init.Period = 0xffff;
 80020e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ec:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ee:	f7ff fad1 	bl	8001694 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f6:	a90a      	add	r1, sp, #40	; 0x28
 80020f8:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fc:	f7ff faee 	bl	80016dc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002100:	a907      	add	r1, sp, #28
 8002102:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002108:	f7ff fb7c 	bl	8001804 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Init(&htim2);
 800210c:	4630      	mov	r0, r6
 800210e:	f7ff fac1 	bl	8001694 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002112:	4630      	mov	r0, r6
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8002114:	4e30      	ldr	r6, [pc, #192]	; (80021d8 <main+0x21c>)
  HAL_TIM_Base_Start_IT(&htim2);
 8002116:	f7ff f98b 	bl	8001430 <HAL_TIM_Base_Start_IT>
	  i+=1;
 800211a:	3401      	adds	r4, #1
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 800211c:	4640      	mov	r0, r8
 800211e:	2180      	movs	r1, #128	; 0x80
	  Rh_byte1 = DHT11_Read ();
 8002120:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80021f8 <main+0x23c>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 8002124:	f7fe fc11 	bl	800094a <HAL_GPIO_TogglePin>
	  sprintf(g,"\n\r hello Mohamed No: %d",i);
 8002128:	4622      	mov	r2, r4
 800212a:	492c      	ldr	r1, [pc, #176]	; (80021dc <main+0x220>)
 800212c:	4630      	mov	r0, r6
 800212e:	f000 f985 	bl	800243c <siprintf>
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 8002132:	4630      	mov	r0, r6
 8002134:	f7fe f884 	bl	8000240 <strlen>
 8002138:	4631      	mov	r1, r6
 800213a:	b282      	uxth	r2, r0
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	4628      	mov	r0, r5
	  Rh_byte2 = DHT11_Read ();
 8002142:	4f27      	ldr	r7, [pc, #156]	; (80021e0 <main+0x224>)
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 8002144:	f7ff fd8c 	bl	8001c60 <HAL_UART_Transmit>
	  Temp_byte1 = DHT11_Read ();
 8002148:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80021fc <main+0x240>
	  DHT11_Start();
 800214c:	f7ff fe6e 	bl	8001e2c <DHT11_Start>
	  Temp_byte2 = DHT11_Read ();
 8002150:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002200 <main+0x244>
	  Presence = DHT11_Check_Response();
 8002154:	f7ff fe8e 	bl	8001e74 <DHT11_Check_Response>
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <main+0x228>)
 800215a:	7018      	strb	r0, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 800215c:	f7ff feae 	bl	8001ebc <DHT11_Read>
 8002160:	f88a 0000 	strb.w	r0, [sl]
	  Rh_byte2 = DHT11_Read ();
 8002164:	f7ff feaa 	bl	8001ebc <DHT11_Read>
 8002168:	7038      	strb	r0, [r7, #0]
	  Temp_byte1 = DHT11_Read ();
 800216a:	f7ff fea7 	bl	8001ebc <DHT11_Read>
 800216e:	f88b 0000 	strb.w	r0, [fp]
	  Temp_byte2 = DHT11_Read ();
 8002172:	f7ff fea3 	bl	8001ebc <DHT11_Read>
 8002176:	f889 0000 	strb.w	r0, [r9]
	  SUM = DHT11_Read();
 800217a:	f7ff fe9f 	bl	8001ebc <DHT11_Read>
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <main+0x22c>)
	  TEMP = Temp_byte1;
 8002180:	f89b 2000 	ldrb.w	r2, [fp]
	  SUM = DHT11_Read();
 8002184:	8018      	strh	r0, [r3, #0]
	  TEMP = Temp_byte1;
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <main+0x230>)
	  RH = Rh_byte1;
 8002188:	f89a 1000 	ldrb.w	r1, [sl]
	  TEMP = Temp_byte1;
 800218c:	801a      	strh	r2, [r3, #0]
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 800218e:	7838      	ldrb	r0, [r7, #0]
	  RH = Rh_byte1;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <main+0x234>)
 8002192:	8019      	strh	r1, [r3, #0]
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 8002194:	f899 3000 	ldrb.w	r3, [r9]
 8002198:	9001      	str	r0, [sp, #4]
 800219a:	a80a      	add	r0, sp, #40	; 0x28
 800219c:	9100      	str	r1, [sp, #0]
 800219e:	4915      	ldr	r1, [pc, #84]	; (80021f4 <main+0x238>)
 80021a0:	f000 f94c 	bl	800243c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80021a4:	a80a      	add	r0, sp, #40	; 0x28
 80021a6:	f7fe f84b 	bl	8000240 <strlen>
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	b282      	uxth	r2, r0
 80021b0:	a90a      	add	r1, sp, #40	; 0x28
 80021b2:	4628      	mov	r0, r5
 80021b4:	f7ff fd54 	bl	8001c60 <HAL_UART_Transmit>
 80021b8:	e7af      	b.n	800211a <main+0x15e>
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400
 80021c4:	200201f0 	.word	0x200201f0
 80021c8:	40020800 	.word	0x40020800
 80021cc:	10110000 	.word	0x10110000
 80021d0:	200200a0 	.word	0x200200a0
 80021d4:	40004800 	.word	0x40004800
 80021d8:	20020120 	.word	0x20020120
 80021dc:	08002cc7 	.word	0x08002cc7
 80021e0:	200201ef 	.word	0x200201ef
 80021e4:	2002008c 	.word	0x2002008c
 80021e8:	20020230 	.word	0x20020230
 80021ec:	200201ec 	.word	0x200201ec
 80021f0:	200201ea 	.word	0x200201ea
 80021f4:	08002cdf 	.word	0x08002cdf
 80021f8:	200201e8 	.word	0x200201e8
 80021fc:	200201ee 	.word	0x200201ee
 8002200:	20020232 	.word	0x20020232

08002204 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_13)
 8002204:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8002208:	b510      	push	{r4, lr}
  if (GPIO_Pin == GPIO_PIN_13)
 800220a:	d10f      	bne.n	800222c <HAL_GPIO_EXTI_Callback+0x28>
  {
	  sprintf(g,"\n\r interrupt trigger ");
 800220c:	4908      	ldr	r1, [pc, #32]	; (8002230 <HAL_GPIO_EXTI_Callback+0x2c>)
 800220e:	4809      	ldr	r0, [pc, #36]	; (8002234 <HAL_GPIO_EXTI_Callback+0x30>)
 8002210:	f000 f938 	bl	8002484 <strcpy>
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 8002214:	4807      	ldr	r0, [pc, #28]	; (8002234 <HAL_GPIO_EXTI_Callback+0x30>)
 8002216:	f7fe f813 	bl	8000240 <strlen>
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	b282      	uxth	r2, r0
 8002220:	4904      	ldr	r1, [pc, #16]	; (8002234 <HAL_GPIO_EXTI_Callback+0x30>)
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_GPIO_EXTI_Callback+0x34>)
  }
}
 8002224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_Transmit(&huart3,g,strlen(g),1000);
 8002228:	f7ff bd1a 	b.w	8001c60 <HAL_UART_Transmit>
 800222c:	bd10      	pop	{r4, pc}
 800222e:	bf00      	nop
 8002230:	08002cb1 	.word	0x08002cb1
 8002234:	20020120 	.word	0x20020120
 8002238:	200200a0 	.word	0x200200a0

0800223c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_MspInit+0x2c>)
{
 800223e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800224e:	9200      	str	r2, [sp, #0]
 8002250:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002264:	b002      	add	sp, #8
 8002266:	4770      	bx	lr
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800226c:	6803      	ldr	r3, [r0, #0]
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002272:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002274:	d112      	bne.n	800229c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002276:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800227a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002288:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002292:	f7fe fa09 	bl	80006a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002296:	201c      	movs	r0, #28
 8002298:	f7fe fa3e 	bl	8000718 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800229c:	b003      	add	sp, #12
 800229e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b510      	push	{r4, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	2214      	movs	r2, #20
 80022ac:	2100      	movs	r1, #0
 80022ae:	a803      	add	r0, sp, #12
 80022b0:	f000 f8bc 	bl	800242c <memset>
  if(huart->Instance==USART3)
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_UART_MspInit+0x60>)
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d120      	bne.n	80022fe <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022bc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c0:	a903      	add	r1, sp, #12
 80022c2:	4811      	ldr	r0, [pc, #68]	; (8002308 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d8:	f042 0208 	orr.w	r2, r2, #8
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f6:	2307      	movs	r3, #7
 80022f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fa:	f7fe fa31 	bl	8000760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022fe:	b008      	add	sp, #32
 8002300:	bd10      	pop	{r4, pc}
 8002302:	bf00      	nop
 8002304:	40004800 	.word	0x40004800
 8002308:	40020c00 	.word	0x40020c00

0800230c <NMI_Handler>:
 800230c:	4770      	bx	lr

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	e7fe      	b.n	800230e <HardFault_Handler>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler>

08002316 <SVC_Handler>:
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	4770      	bx	lr

0800231c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f7fe b9a0 	b.w	8000660 <HAL_IncTick>

08002320 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002320:	4801      	ldr	r0, [pc, #4]	; (8002328 <TIM2_IRQHandler+0x8>)
 8002322:	f7ff b8a0 	b.w	8001466 <HAL_TIM_IRQHandler>
 8002326:	bf00      	nop
 8002328:	200201f0 	.word	0x200201f0

0800232c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800232c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002330:	f7fe bb12 	b.w	8000958 <HAL_GPIO_EXTI_IRQHandler>

08002334 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002334:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <_sbrk+0x2c>)
{
 8002338:	4602      	mov	r2, r0
	if (heap_end == 0)
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	b909      	cbnz	r1, 8002342 <_sbrk+0xe>
		heap_end = &end;
 800233e:	4909      	ldr	r1, [pc, #36]	; (8002364 <_sbrk+0x30>)
 8002340:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002342:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002344:	4669      	mov	r1, sp
 8002346:	4402      	add	r2, r0
 8002348:	428a      	cmp	r2, r1
 800234a:	d906      	bls.n	800235a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800234c:	f000 f844 	bl	80023d8 <__errno>
 8002350:	230c      	movs	r3, #12
 8002352:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800235a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800235c:	bd08      	pop	{r3, pc}
 800235e:	bf00      	nop
 8002360:	20020090 	.word	0x20020090
 8002364:	20020238 	.word	0x20020238

08002368 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SystemInit+0x18>)
 800236a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800236e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002388:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800238a:	e003      	b.n	8002394 <LoopCopyDataInit>

0800238c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800238e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002390:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002392:	3104      	adds	r1, #4

08002394 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002394:	480b      	ldr	r0, [pc, #44]	; (80023c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002398:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800239a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800239c:	d3f6      	bcc.n	800238c <CopyDataInit>
  ldr  r2, =_sbss
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023a0:	e002      	b.n	80023a8 <LoopFillZerobss>

080023a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023a4:	f842 3b04 	str.w	r3, [r2], #4

080023a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023ac:	d3f9      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ae:	f7ff ffdb 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b2:	f000 f817 	bl	80023e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b6:	f7ff fe01 	bl	8001fbc <main>
  bx  lr    
 80023ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80023c0:	08002d54 	.word	0x08002d54
  ldr  r0, =_sdata
 80023c4:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 80023c8:	20020070 	.word	0x20020070
  ldr  r2, =_sbss
 80023cc:	20020070 	.word	0x20020070
  ldr  r3, = _ebss
 80023d0:	20020238 	.word	0x20020238

080023d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC_IRQHandler>
	...

080023d8 <__errno>:
 80023d8:	4b01      	ldr	r3, [pc, #4]	; (80023e0 <__errno+0x8>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	2002000c 	.word	0x2002000c

080023e4 <__libc_init_array>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	4e0d      	ldr	r6, [pc, #52]	; (800241c <__libc_init_array+0x38>)
 80023e8:	4c0d      	ldr	r4, [pc, #52]	; (8002420 <__libc_init_array+0x3c>)
 80023ea:	1ba4      	subs	r4, r4, r6
 80023ec:	10a4      	asrs	r4, r4, #2
 80023ee:	2500      	movs	r5, #0
 80023f0:	42a5      	cmp	r5, r4
 80023f2:	d109      	bne.n	8002408 <__libc_init_array+0x24>
 80023f4:	4e0b      	ldr	r6, [pc, #44]	; (8002424 <__libc_init_array+0x40>)
 80023f6:	4c0c      	ldr	r4, [pc, #48]	; (8002428 <__libc_init_array+0x44>)
 80023f8:	f000 fc46 	bl	8002c88 <_init>
 80023fc:	1ba4      	subs	r4, r4, r6
 80023fe:	10a4      	asrs	r4, r4, #2
 8002400:	2500      	movs	r5, #0
 8002402:	42a5      	cmp	r5, r4
 8002404:	d105      	bne.n	8002412 <__libc_init_array+0x2e>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800240c:	4798      	blx	r3
 800240e:	3501      	adds	r5, #1
 8002410:	e7ee      	b.n	80023f0 <__libc_init_array+0xc>
 8002412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002416:	4798      	blx	r3
 8002418:	3501      	adds	r5, #1
 800241a:	e7f2      	b.n	8002402 <__libc_init_array+0x1e>
 800241c:	08002d4c 	.word	0x08002d4c
 8002420:	08002d4c 	.word	0x08002d4c
 8002424:	08002d4c 	.word	0x08002d4c
 8002428:	08002d50 	.word	0x08002d50

0800242c <memset>:
 800242c:	4402      	add	r2, r0
 800242e:	4603      	mov	r3, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <siprintf>:
 800243c:	b40e      	push	{r1, r2, r3}
 800243e:	b500      	push	{lr}
 8002440:	b09c      	sub	sp, #112	; 0x70
 8002442:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002446:	ab1d      	add	r3, sp, #116	; 0x74
 8002448:	f8ad 1014 	strh.w	r1, [sp, #20]
 800244c:	9002      	str	r0, [sp, #8]
 800244e:	9006      	str	r0, [sp, #24]
 8002450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002454:	480a      	ldr	r0, [pc, #40]	; (8002480 <siprintf+0x44>)
 8002456:	9104      	str	r1, [sp, #16]
 8002458:	9107      	str	r1, [sp, #28]
 800245a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800245e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002462:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002466:	6800      	ldr	r0, [r0, #0]
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	a902      	add	r1, sp, #8
 800246c:	f000 f86e 	bl	800254c <_svfiprintf_r>
 8002470:	9b02      	ldr	r3, [sp, #8]
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	b01c      	add	sp, #112	; 0x70
 8002478:	f85d eb04 	ldr.w	lr, [sp], #4
 800247c:	b003      	add	sp, #12
 800247e:	4770      	bx	lr
 8002480:	2002000c 	.word	0x2002000c

08002484 <strcpy>:
 8002484:	4603      	mov	r3, r0
 8002486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800248a:	f803 2b01 	strb.w	r2, [r3], #1
 800248e:	2a00      	cmp	r2, #0
 8002490:	d1f9      	bne.n	8002486 <strcpy+0x2>
 8002492:	4770      	bx	lr

08002494 <__ssputs_r>:
 8002494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002498:	688e      	ldr	r6, [r1, #8]
 800249a:	429e      	cmp	r6, r3
 800249c:	4682      	mov	sl, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	4691      	mov	r9, r2
 80024a2:	4698      	mov	r8, r3
 80024a4:	d835      	bhi.n	8002512 <__ssputs_r+0x7e>
 80024a6:	898a      	ldrh	r2, [r1, #12]
 80024a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024ac:	d031      	beq.n	8002512 <__ssputs_r+0x7e>
 80024ae:	6825      	ldr	r5, [r4, #0]
 80024b0:	6909      	ldr	r1, [r1, #16]
 80024b2:	1a6f      	subs	r7, r5, r1
 80024b4:	6965      	ldr	r5, [r4, #20]
 80024b6:	2302      	movs	r3, #2
 80024b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80024c0:	f108 0301 	add.w	r3, r8, #1
 80024c4:	443b      	add	r3, r7
 80024c6:	429d      	cmp	r5, r3
 80024c8:	bf38      	it	cc
 80024ca:	461d      	movcc	r5, r3
 80024cc:	0553      	lsls	r3, r2, #21
 80024ce:	d531      	bpl.n	8002534 <__ssputs_r+0xa0>
 80024d0:	4629      	mov	r1, r5
 80024d2:	f000 fb39 	bl	8002b48 <_malloc_r>
 80024d6:	4606      	mov	r6, r0
 80024d8:	b950      	cbnz	r0, 80024f0 <__ssputs_r+0x5c>
 80024da:	230c      	movs	r3, #12
 80024dc:	f8ca 3000 	str.w	r3, [sl]
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e6:	81a3      	strh	r3, [r4, #12]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f0:	463a      	mov	r2, r7
 80024f2:	6921      	ldr	r1, [r4, #16]
 80024f4:	f000 fab4 	bl	8002a60 <memcpy>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002502:	81a3      	strh	r3, [r4, #12]
 8002504:	6126      	str	r6, [r4, #16]
 8002506:	6165      	str	r5, [r4, #20]
 8002508:	443e      	add	r6, r7
 800250a:	1bed      	subs	r5, r5, r7
 800250c:	6026      	str	r6, [r4, #0]
 800250e:	60a5      	str	r5, [r4, #8]
 8002510:	4646      	mov	r6, r8
 8002512:	4546      	cmp	r6, r8
 8002514:	bf28      	it	cs
 8002516:	4646      	movcs	r6, r8
 8002518:	4632      	mov	r2, r6
 800251a:	4649      	mov	r1, r9
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	f000 faaa 	bl	8002a76 <memmove>
 8002522:	68a3      	ldr	r3, [r4, #8]
 8002524:	1b9b      	subs	r3, r3, r6
 8002526:	60a3      	str	r3, [r4, #8]
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	441e      	add	r6, r3
 800252c:	6026      	str	r6, [r4, #0]
 800252e:	2000      	movs	r0, #0
 8002530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002534:	462a      	mov	r2, r5
 8002536:	f000 fb65 	bl	8002c04 <_realloc_r>
 800253a:	4606      	mov	r6, r0
 800253c:	2800      	cmp	r0, #0
 800253e:	d1e1      	bne.n	8002504 <__ssputs_r+0x70>
 8002540:	6921      	ldr	r1, [r4, #16]
 8002542:	4650      	mov	r0, sl
 8002544:	f000 fab2 	bl	8002aac <_free_r>
 8002548:	e7c7      	b.n	80024da <__ssputs_r+0x46>
	...

0800254c <_svfiprintf_r>:
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b09d      	sub	sp, #116	; 0x74
 8002552:	4680      	mov	r8, r0
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	898b      	ldrh	r3, [r1, #12]
 8002558:	061c      	lsls	r4, r3, #24
 800255a:	460d      	mov	r5, r1
 800255c:	4616      	mov	r6, r2
 800255e:	d50f      	bpl.n	8002580 <_svfiprintf_r+0x34>
 8002560:	690b      	ldr	r3, [r1, #16]
 8002562:	b96b      	cbnz	r3, 8002580 <_svfiprintf_r+0x34>
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	f000 faef 	bl	8002b48 <_malloc_r>
 800256a:	6028      	str	r0, [r5, #0]
 800256c:	6128      	str	r0, [r5, #16]
 800256e:	b928      	cbnz	r0, 800257c <_svfiprintf_r+0x30>
 8002570:	230c      	movs	r3, #12
 8002572:	f8c8 3000 	str.w	r3, [r8]
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	e0c5      	b.n	8002708 <_svfiprintf_r+0x1bc>
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	616b      	str	r3, [r5, #20]
 8002580:	2300      	movs	r3, #0
 8002582:	9309      	str	r3, [sp, #36]	; 0x24
 8002584:	2320      	movs	r3, #32
 8002586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800258a:	2330      	movs	r3, #48	; 0x30
 800258c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002590:	f04f 0b01 	mov.w	fp, #1
 8002594:	4637      	mov	r7, r6
 8002596:	463c      	mov	r4, r7
 8002598:	f814 3b01 	ldrb.w	r3, [r4], #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d13c      	bne.n	800261a <_svfiprintf_r+0xce>
 80025a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80025a4:	d00b      	beq.n	80025be <_svfiprintf_r+0x72>
 80025a6:	4653      	mov	r3, sl
 80025a8:	4632      	mov	r2, r6
 80025aa:	4629      	mov	r1, r5
 80025ac:	4640      	mov	r0, r8
 80025ae:	f7ff ff71 	bl	8002494 <__ssputs_r>
 80025b2:	3001      	adds	r0, #1
 80025b4:	f000 80a3 	beq.w	80026fe <_svfiprintf_r+0x1b2>
 80025b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ba:	4453      	add	r3, sl
 80025bc:	9309      	str	r3, [sp, #36]	; 0x24
 80025be:	783b      	ldrb	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 809c 	beq.w	80026fe <_svfiprintf_r+0x1b2>
 80025c6:	2300      	movs	r3, #0
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	9304      	str	r3, [sp, #16]
 80025ce:	9307      	str	r3, [sp, #28]
 80025d0:	9205      	str	r2, [sp, #20]
 80025d2:	9306      	str	r3, [sp, #24]
 80025d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025d8:	931a      	str	r3, [sp, #104]	; 0x68
 80025da:	2205      	movs	r2, #5
 80025dc:	7821      	ldrb	r1, [r4, #0]
 80025de:	4850      	ldr	r0, [pc, #320]	; (8002720 <_svfiprintf_r+0x1d4>)
 80025e0:	f7fd fe36 	bl	8000250 <memchr>
 80025e4:	1c67      	adds	r7, r4, #1
 80025e6:	9b04      	ldr	r3, [sp, #16]
 80025e8:	b9d8      	cbnz	r0, 8002622 <_svfiprintf_r+0xd6>
 80025ea:	06d9      	lsls	r1, r3, #27
 80025ec:	bf44      	itt	mi
 80025ee:	2220      	movmi	r2, #32
 80025f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025f4:	071a      	lsls	r2, r3, #28
 80025f6:	bf44      	itt	mi
 80025f8:	222b      	movmi	r2, #43	; 0x2b
 80025fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025fe:	7822      	ldrb	r2, [r4, #0]
 8002600:	2a2a      	cmp	r2, #42	; 0x2a
 8002602:	d016      	beq.n	8002632 <_svfiprintf_r+0xe6>
 8002604:	9a07      	ldr	r2, [sp, #28]
 8002606:	2100      	movs	r1, #0
 8002608:	200a      	movs	r0, #10
 800260a:	4627      	mov	r7, r4
 800260c:	3401      	adds	r4, #1
 800260e:	783b      	ldrb	r3, [r7, #0]
 8002610:	3b30      	subs	r3, #48	; 0x30
 8002612:	2b09      	cmp	r3, #9
 8002614:	d951      	bls.n	80026ba <_svfiprintf_r+0x16e>
 8002616:	b1c9      	cbz	r1, 800264c <_svfiprintf_r+0x100>
 8002618:	e011      	b.n	800263e <_svfiprintf_r+0xf2>
 800261a:	2b25      	cmp	r3, #37	; 0x25
 800261c:	d0c0      	beq.n	80025a0 <_svfiprintf_r+0x54>
 800261e:	4627      	mov	r7, r4
 8002620:	e7b9      	b.n	8002596 <_svfiprintf_r+0x4a>
 8002622:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <_svfiprintf_r+0x1d4>)
 8002624:	1a80      	subs	r0, r0, r2
 8002626:	fa0b f000 	lsl.w	r0, fp, r0
 800262a:	4318      	orrs	r0, r3
 800262c:	9004      	str	r0, [sp, #16]
 800262e:	463c      	mov	r4, r7
 8002630:	e7d3      	b.n	80025da <_svfiprintf_r+0x8e>
 8002632:	9a03      	ldr	r2, [sp, #12]
 8002634:	1d11      	adds	r1, r2, #4
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	9103      	str	r1, [sp, #12]
 800263a:	2a00      	cmp	r2, #0
 800263c:	db01      	blt.n	8002642 <_svfiprintf_r+0xf6>
 800263e:	9207      	str	r2, [sp, #28]
 8002640:	e004      	b.n	800264c <_svfiprintf_r+0x100>
 8002642:	4252      	negs	r2, r2
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	9207      	str	r2, [sp, #28]
 800264a:	9304      	str	r3, [sp, #16]
 800264c:	783b      	ldrb	r3, [r7, #0]
 800264e:	2b2e      	cmp	r3, #46	; 0x2e
 8002650:	d10e      	bne.n	8002670 <_svfiprintf_r+0x124>
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	2b2a      	cmp	r3, #42	; 0x2a
 8002656:	f107 0101 	add.w	r1, r7, #1
 800265a:	d132      	bne.n	80026c2 <_svfiprintf_r+0x176>
 800265c:	9b03      	ldr	r3, [sp, #12]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	9203      	str	r2, [sp, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	bfb8      	it	lt
 8002668:	f04f 33ff 	movlt.w	r3, #4294967295
 800266c:	3702      	adds	r7, #2
 800266e:	9305      	str	r3, [sp, #20]
 8002670:	4c2c      	ldr	r4, [pc, #176]	; (8002724 <_svfiprintf_r+0x1d8>)
 8002672:	7839      	ldrb	r1, [r7, #0]
 8002674:	2203      	movs	r2, #3
 8002676:	4620      	mov	r0, r4
 8002678:	f7fd fdea 	bl	8000250 <memchr>
 800267c:	b138      	cbz	r0, 800268e <_svfiprintf_r+0x142>
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	1b00      	subs	r0, r0, r4
 8002682:	fa03 f000 	lsl.w	r0, r3, r0
 8002686:	9b04      	ldr	r3, [sp, #16]
 8002688:	4303      	orrs	r3, r0
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	3701      	adds	r7, #1
 800268e:	7839      	ldrb	r1, [r7, #0]
 8002690:	4825      	ldr	r0, [pc, #148]	; (8002728 <_svfiprintf_r+0x1dc>)
 8002692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002696:	2206      	movs	r2, #6
 8002698:	1c7e      	adds	r6, r7, #1
 800269a:	f7fd fdd9 	bl	8000250 <memchr>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d035      	beq.n	800270e <_svfiprintf_r+0x1c2>
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <_svfiprintf_r+0x1e0>)
 80026a4:	b9fb      	cbnz	r3, 80026e6 <_svfiprintf_r+0x19a>
 80026a6:	9b03      	ldr	r3, [sp, #12]
 80026a8:	3307      	adds	r3, #7
 80026aa:	f023 0307 	bic.w	r3, r3, #7
 80026ae:	3308      	adds	r3, #8
 80026b0:	9303      	str	r3, [sp, #12]
 80026b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b4:	444b      	add	r3, r9
 80026b6:	9309      	str	r3, [sp, #36]	; 0x24
 80026b8:	e76c      	b.n	8002594 <_svfiprintf_r+0x48>
 80026ba:	fb00 3202 	mla	r2, r0, r2, r3
 80026be:	2101      	movs	r1, #1
 80026c0:	e7a3      	b.n	800260a <_svfiprintf_r+0xbe>
 80026c2:	2300      	movs	r3, #0
 80026c4:	9305      	str	r3, [sp, #20]
 80026c6:	4618      	mov	r0, r3
 80026c8:	240a      	movs	r4, #10
 80026ca:	460f      	mov	r7, r1
 80026cc:	3101      	adds	r1, #1
 80026ce:	783a      	ldrb	r2, [r7, #0]
 80026d0:	3a30      	subs	r2, #48	; 0x30
 80026d2:	2a09      	cmp	r2, #9
 80026d4:	d903      	bls.n	80026de <_svfiprintf_r+0x192>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ca      	beq.n	8002670 <_svfiprintf_r+0x124>
 80026da:	9005      	str	r0, [sp, #20]
 80026dc:	e7c8      	b.n	8002670 <_svfiprintf_r+0x124>
 80026de:	fb04 2000 	mla	r0, r4, r0, r2
 80026e2:	2301      	movs	r3, #1
 80026e4:	e7f1      	b.n	80026ca <_svfiprintf_r+0x17e>
 80026e6:	ab03      	add	r3, sp, #12
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	462a      	mov	r2, r5
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_svfiprintf_r+0x1e4>)
 80026ee:	a904      	add	r1, sp, #16
 80026f0:	4640      	mov	r0, r8
 80026f2:	f3af 8000 	nop.w
 80026f6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026fa:	4681      	mov	r9, r0
 80026fc:	d1d9      	bne.n	80026b2 <_svfiprintf_r+0x166>
 80026fe:	89ab      	ldrh	r3, [r5, #12]
 8002700:	065b      	lsls	r3, r3, #25
 8002702:	f53f af38 	bmi.w	8002576 <_svfiprintf_r+0x2a>
 8002706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002708:	b01d      	add	sp, #116	; 0x74
 800270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270e:	ab03      	add	r3, sp, #12
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	462a      	mov	r2, r5
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <_svfiprintf_r+0x1e4>)
 8002716:	a904      	add	r1, sp, #16
 8002718:	4640      	mov	r0, r8
 800271a:	f000 f881 	bl	8002820 <_printf_i>
 800271e:	e7ea      	b.n	80026f6 <_svfiprintf_r+0x1aa>
 8002720:	08002d0e 	.word	0x08002d0e
 8002724:	08002d14 	.word	0x08002d14
 8002728:	08002d18 	.word	0x08002d18
 800272c:	00000000 	.word	0x00000000
 8002730:	08002495 	.word	0x08002495

08002734 <_printf_common>:
 8002734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002738:	4691      	mov	r9, r2
 800273a:	461f      	mov	r7, r3
 800273c:	688a      	ldr	r2, [r1, #8]
 800273e:	690b      	ldr	r3, [r1, #16]
 8002740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002744:	4293      	cmp	r3, r2
 8002746:	bfb8      	it	lt
 8002748:	4613      	movlt	r3, r2
 800274a:	f8c9 3000 	str.w	r3, [r9]
 800274e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002752:	4606      	mov	r6, r0
 8002754:	460c      	mov	r4, r1
 8002756:	b112      	cbz	r2, 800275e <_printf_common+0x2a>
 8002758:	3301      	adds	r3, #1
 800275a:	f8c9 3000 	str.w	r3, [r9]
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	0699      	lsls	r1, r3, #26
 8002762:	bf42      	ittt	mi
 8002764:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002768:	3302      	addmi	r3, #2
 800276a:	f8c9 3000 	strmi.w	r3, [r9]
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	f015 0506 	ands.w	r5, r5, #6
 8002774:	d107      	bne.n	8002786 <_printf_common+0x52>
 8002776:	f104 0a19 	add.w	sl, r4, #25
 800277a:	68e3      	ldr	r3, [r4, #12]
 800277c:	f8d9 2000 	ldr.w	r2, [r9]
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	429d      	cmp	r5, r3
 8002784:	db29      	blt.n	80027da <_printf_common+0xa6>
 8002786:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	3300      	adds	r3, #0
 800278e:	bf18      	it	ne
 8002790:	2301      	movne	r3, #1
 8002792:	0692      	lsls	r2, r2, #26
 8002794:	d42e      	bmi.n	80027f4 <_printf_common+0xc0>
 8002796:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800279a:	4639      	mov	r1, r7
 800279c:	4630      	mov	r0, r6
 800279e:	47c0      	blx	r8
 80027a0:	3001      	adds	r0, #1
 80027a2:	d021      	beq.n	80027e8 <_printf_common+0xb4>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	68e5      	ldr	r5, [r4, #12]
 80027a8:	f8d9 2000 	ldr.w	r2, [r9]
 80027ac:	f003 0306 	and.w	r3, r3, #6
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	bf08      	it	eq
 80027b4:	1aad      	subeq	r5, r5, r2
 80027b6:	68a3      	ldr	r3, [r4, #8]
 80027b8:	6922      	ldr	r2, [r4, #16]
 80027ba:	bf0c      	ite	eq
 80027bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027c0:	2500      	movne	r5, #0
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bfc4      	itt	gt
 80027c6:	1a9b      	subgt	r3, r3, r2
 80027c8:	18ed      	addgt	r5, r5, r3
 80027ca:	f04f 0900 	mov.w	r9, #0
 80027ce:	341a      	adds	r4, #26
 80027d0:	454d      	cmp	r5, r9
 80027d2:	d11b      	bne.n	800280c <_printf_common+0xd8>
 80027d4:	2000      	movs	r0, #0
 80027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027da:	2301      	movs	r3, #1
 80027dc:	4652      	mov	r2, sl
 80027de:	4639      	mov	r1, r7
 80027e0:	4630      	mov	r0, r6
 80027e2:	47c0      	blx	r8
 80027e4:	3001      	adds	r0, #1
 80027e6:	d103      	bne.n	80027f0 <_printf_common+0xbc>
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f0:	3501      	adds	r5, #1
 80027f2:	e7c2      	b.n	800277a <_printf_common+0x46>
 80027f4:	18e1      	adds	r1, r4, r3
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	2030      	movs	r0, #48	; 0x30
 80027fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027fe:	4422      	add	r2, r4
 8002800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002808:	3302      	adds	r3, #2
 800280a:	e7c4      	b.n	8002796 <_printf_common+0x62>
 800280c:	2301      	movs	r3, #1
 800280e:	4622      	mov	r2, r4
 8002810:	4639      	mov	r1, r7
 8002812:	4630      	mov	r0, r6
 8002814:	47c0      	blx	r8
 8002816:	3001      	adds	r0, #1
 8002818:	d0e6      	beq.n	80027e8 <_printf_common+0xb4>
 800281a:	f109 0901 	add.w	r9, r9, #1
 800281e:	e7d7      	b.n	80027d0 <_printf_common+0x9c>

08002820 <_printf_i>:
 8002820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002824:	4617      	mov	r7, r2
 8002826:	7e0a      	ldrb	r2, [r1, #24]
 8002828:	b085      	sub	sp, #20
 800282a:	2a6e      	cmp	r2, #110	; 0x6e
 800282c:	4698      	mov	r8, r3
 800282e:	4606      	mov	r6, r0
 8002830:	460c      	mov	r4, r1
 8002832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002834:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002838:	f000 80bc 	beq.w	80029b4 <_printf_i+0x194>
 800283c:	d81a      	bhi.n	8002874 <_printf_i+0x54>
 800283e:	2a63      	cmp	r2, #99	; 0x63
 8002840:	d02e      	beq.n	80028a0 <_printf_i+0x80>
 8002842:	d80a      	bhi.n	800285a <_printf_i+0x3a>
 8002844:	2a00      	cmp	r2, #0
 8002846:	f000 80c8 	beq.w	80029da <_printf_i+0x1ba>
 800284a:	2a58      	cmp	r2, #88	; 0x58
 800284c:	f000 808a 	beq.w	8002964 <_printf_i+0x144>
 8002850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002854:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002858:	e02a      	b.n	80028b0 <_printf_i+0x90>
 800285a:	2a64      	cmp	r2, #100	; 0x64
 800285c:	d001      	beq.n	8002862 <_printf_i+0x42>
 800285e:	2a69      	cmp	r2, #105	; 0x69
 8002860:	d1f6      	bne.n	8002850 <_printf_i+0x30>
 8002862:	6821      	ldr	r1, [r4, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	f011 0f80 	tst.w	r1, #128	; 0x80
 800286a:	d023      	beq.n	80028b4 <_printf_i+0x94>
 800286c:	1d11      	adds	r1, r2, #4
 800286e:	6019      	str	r1, [r3, #0]
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	e027      	b.n	80028c4 <_printf_i+0xa4>
 8002874:	2a73      	cmp	r2, #115	; 0x73
 8002876:	f000 80b4 	beq.w	80029e2 <_printf_i+0x1c2>
 800287a:	d808      	bhi.n	800288e <_printf_i+0x6e>
 800287c:	2a6f      	cmp	r2, #111	; 0x6f
 800287e:	d02a      	beq.n	80028d6 <_printf_i+0xb6>
 8002880:	2a70      	cmp	r2, #112	; 0x70
 8002882:	d1e5      	bne.n	8002850 <_printf_i+0x30>
 8002884:	680a      	ldr	r2, [r1, #0]
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	600a      	str	r2, [r1, #0]
 800288c:	e003      	b.n	8002896 <_printf_i+0x76>
 800288e:	2a75      	cmp	r2, #117	; 0x75
 8002890:	d021      	beq.n	80028d6 <_printf_i+0xb6>
 8002892:	2a78      	cmp	r2, #120	; 0x78
 8002894:	d1dc      	bne.n	8002850 <_printf_i+0x30>
 8002896:	2278      	movs	r2, #120	; 0x78
 8002898:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800289c:	496e      	ldr	r1, [pc, #440]	; (8002a58 <_printf_i+0x238>)
 800289e:	e064      	b.n	800296a <_printf_i+0x14a>
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80028a6:	1d11      	adds	r1, r2, #4
 80028a8:	6019      	str	r1, [r3, #0]
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0a3      	b.n	80029fc <_printf_i+0x1dc>
 80028b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80028b8:	f102 0104 	add.w	r1, r2, #4
 80028bc:	6019      	str	r1, [r3, #0]
 80028be:	d0d7      	beq.n	8002870 <_printf_i+0x50>
 80028c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da03      	bge.n	80028d0 <_printf_i+0xb0>
 80028c8:	222d      	movs	r2, #45	; 0x2d
 80028ca:	425b      	negs	r3, r3
 80028cc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028d0:	4962      	ldr	r1, [pc, #392]	; (8002a5c <_printf_i+0x23c>)
 80028d2:	220a      	movs	r2, #10
 80028d4:	e017      	b.n	8002906 <_printf_i+0xe6>
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028de:	d003      	beq.n	80028e8 <_printf_i+0xc8>
 80028e0:	1d08      	adds	r0, r1, #4
 80028e2:	6018      	str	r0, [r3, #0]
 80028e4:	680b      	ldr	r3, [r1, #0]
 80028e6:	e006      	b.n	80028f6 <_printf_i+0xd6>
 80028e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028ec:	f101 0004 	add.w	r0, r1, #4
 80028f0:	6018      	str	r0, [r3, #0]
 80028f2:	d0f7      	beq.n	80028e4 <_printf_i+0xc4>
 80028f4:	880b      	ldrh	r3, [r1, #0]
 80028f6:	4959      	ldr	r1, [pc, #356]	; (8002a5c <_printf_i+0x23c>)
 80028f8:	2a6f      	cmp	r2, #111	; 0x6f
 80028fa:	bf14      	ite	ne
 80028fc:	220a      	movne	r2, #10
 80028fe:	2208      	moveq	r2, #8
 8002900:	2000      	movs	r0, #0
 8002902:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002906:	6865      	ldr	r5, [r4, #4]
 8002908:	60a5      	str	r5, [r4, #8]
 800290a:	2d00      	cmp	r5, #0
 800290c:	f2c0 809c 	blt.w	8002a48 <_printf_i+0x228>
 8002910:	6820      	ldr	r0, [r4, #0]
 8002912:	f020 0004 	bic.w	r0, r0, #4
 8002916:	6020      	str	r0, [r4, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13f      	bne.n	800299c <_printf_i+0x17c>
 800291c:	2d00      	cmp	r5, #0
 800291e:	f040 8095 	bne.w	8002a4c <_printf_i+0x22c>
 8002922:	4675      	mov	r5, lr
 8002924:	2a08      	cmp	r2, #8
 8002926:	d10b      	bne.n	8002940 <_printf_i+0x120>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	07da      	lsls	r2, r3, #31
 800292c:	d508      	bpl.n	8002940 <_printf_i+0x120>
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	6862      	ldr	r2, [r4, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	bfde      	ittt	le
 8002936:	2330      	movle	r3, #48	; 0x30
 8002938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800293c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002940:	ebae 0305 	sub.w	r3, lr, r5
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	f8cd 8000 	str.w	r8, [sp]
 800294a:	463b      	mov	r3, r7
 800294c:	aa03      	add	r2, sp, #12
 800294e:	4621      	mov	r1, r4
 8002950:	4630      	mov	r0, r6
 8002952:	f7ff feef 	bl	8002734 <_printf_common>
 8002956:	3001      	adds	r0, #1
 8002958:	d155      	bne.n	8002a06 <_printf_i+0x1e6>
 800295a:	f04f 30ff 	mov.w	r0, #4294967295
 800295e:	b005      	add	sp, #20
 8002960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002964:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002968:	493c      	ldr	r1, [pc, #240]	; (8002a5c <_printf_i+0x23c>)
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002972:	f100 0504 	add.w	r5, r0, #4
 8002976:	601d      	str	r5, [r3, #0]
 8002978:	d001      	beq.n	800297e <_printf_i+0x15e>
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	e002      	b.n	8002984 <_printf_i+0x164>
 800297e:	0655      	lsls	r5, r2, #25
 8002980:	d5fb      	bpl.n	800297a <_printf_i+0x15a>
 8002982:	8803      	ldrh	r3, [r0, #0]
 8002984:	07d0      	lsls	r0, r2, #31
 8002986:	bf44      	itt	mi
 8002988:	f042 0220 	orrmi.w	r2, r2, #32
 800298c:	6022      	strmi	r2, [r4, #0]
 800298e:	b91b      	cbnz	r3, 8002998 <_printf_i+0x178>
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	f022 0220 	bic.w	r2, r2, #32
 8002996:	6022      	str	r2, [r4, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	e7b1      	b.n	8002900 <_printf_i+0xe0>
 800299c:	4675      	mov	r5, lr
 800299e:	fbb3 f0f2 	udiv	r0, r3, r2
 80029a2:	fb02 3310 	mls	r3, r2, r0, r3
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80029ac:	4603      	mov	r3, r0
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d1f5      	bne.n	800299e <_printf_i+0x17e>
 80029b2:	e7b7      	b.n	8002924 <_printf_i+0x104>
 80029b4:	6808      	ldr	r0, [r1, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	6949      	ldr	r1, [r1, #20]
 80029ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029be:	d004      	beq.n	80029ca <_printf_i+0x1aa>
 80029c0:	1d10      	adds	r0, r2, #4
 80029c2:	6018      	str	r0, [r3, #0]
 80029c4:	6813      	ldr	r3, [r2, #0]
 80029c6:	6019      	str	r1, [r3, #0]
 80029c8:	e007      	b.n	80029da <_printf_i+0x1ba>
 80029ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029ce:	f102 0004 	add.w	r0, r2, #4
 80029d2:	6018      	str	r0, [r3, #0]
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	d0f6      	beq.n	80029c6 <_printf_i+0x1a6>
 80029d8:	8019      	strh	r1, [r3, #0]
 80029da:	2300      	movs	r3, #0
 80029dc:	6123      	str	r3, [r4, #16]
 80029de:	4675      	mov	r5, lr
 80029e0:	e7b1      	b.n	8002946 <_printf_i+0x126>
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	1d11      	adds	r1, r2, #4
 80029e6:	6019      	str	r1, [r3, #0]
 80029e8:	6815      	ldr	r5, [r2, #0]
 80029ea:	6862      	ldr	r2, [r4, #4]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7fd fc2e 	bl	8000250 <memchr>
 80029f4:	b108      	cbz	r0, 80029fa <_printf_i+0x1da>
 80029f6:	1b40      	subs	r0, r0, r5
 80029f8:	6060      	str	r0, [r4, #4]
 80029fa:	6863      	ldr	r3, [r4, #4]
 80029fc:	6123      	str	r3, [r4, #16]
 80029fe:	2300      	movs	r3, #0
 8002a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a04:	e79f      	b.n	8002946 <_printf_i+0x126>
 8002a06:	6923      	ldr	r3, [r4, #16]
 8002a08:	462a      	mov	r2, r5
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	47c0      	blx	r8
 8002a10:	3001      	adds	r0, #1
 8002a12:	d0a2      	beq.n	800295a <_printf_i+0x13a>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	079b      	lsls	r3, r3, #30
 8002a18:	d507      	bpl.n	8002a2a <_printf_i+0x20a>
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	f104 0919 	add.w	r9, r4, #25
 8002a20:	68e3      	ldr	r3, [r4, #12]
 8002a22:	9a03      	ldr	r2, [sp, #12]
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	429d      	cmp	r5, r3
 8002a28:	db05      	blt.n	8002a36 <_printf_i+0x216>
 8002a2a:	68e0      	ldr	r0, [r4, #12]
 8002a2c:	9b03      	ldr	r3, [sp, #12]
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	bfb8      	it	lt
 8002a32:	4618      	movlt	r0, r3
 8002a34:	e793      	b.n	800295e <_printf_i+0x13e>
 8002a36:	2301      	movs	r3, #1
 8002a38:	464a      	mov	r2, r9
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	47c0      	blx	r8
 8002a40:	3001      	adds	r0, #1
 8002a42:	d08a      	beq.n	800295a <_printf_i+0x13a>
 8002a44:	3501      	adds	r5, #1
 8002a46:	e7eb      	b.n	8002a20 <_printf_i+0x200>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1a7      	bne.n	800299c <_printf_i+0x17c>
 8002a4c:	780b      	ldrb	r3, [r1, #0]
 8002a4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a56:	e765      	b.n	8002924 <_printf_i+0x104>
 8002a58:	08002d30 	.word	0x08002d30
 8002a5c:	08002d1f 	.word	0x08002d1f

08002a60 <memcpy>:
 8002a60:	b510      	push	{r4, lr}
 8002a62:	1e43      	subs	r3, r0, #1
 8002a64:	440a      	add	r2, r1
 8002a66:	4291      	cmp	r1, r2
 8002a68:	d100      	bne.n	8002a6c <memcpy+0xc>
 8002a6a:	bd10      	pop	{r4, pc}
 8002a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a74:	e7f7      	b.n	8002a66 <memcpy+0x6>

08002a76 <memmove>:
 8002a76:	4288      	cmp	r0, r1
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	eb01 0302 	add.w	r3, r1, r2
 8002a7e:	d803      	bhi.n	8002a88 <memmove+0x12>
 8002a80:	1e42      	subs	r2, r0, #1
 8002a82:	4299      	cmp	r1, r3
 8002a84:	d10c      	bne.n	8002aa0 <memmove+0x2a>
 8002a86:	bd10      	pop	{r4, pc}
 8002a88:	4298      	cmp	r0, r3
 8002a8a:	d2f9      	bcs.n	8002a80 <memmove+0xa>
 8002a8c:	1881      	adds	r1, r0, r2
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	42d3      	cmn	r3, r2
 8002a92:	d100      	bne.n	8002a96 <memmove+0x20>
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a9e:	e7f7      	b.n	8002a90 <memmove+0x1a>
 8002aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002aa4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002aa8:	e7eb      	b.n	8002a82 <memmove+0xc>
	...

08002aac <_free_r>:
 8002aac:	b538      	push	{r3, r4, r5, lr}
 8002aae:	4605      	mov	r5, r0
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d045      	beq.n	8002b40 <_free_r+0x94>
 8002ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ab8:	1f0c      	subs	r4, r1, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bfb8      	it	lt
 8002abe:	18e4      	addlt	r4, r4, r3
 8002ac0:	f000 f8d6 	bl	8002c70 <__malloc_lock>
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <_free_r+0x98>)
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	4610      	mov	r0, r2
 8002aca:	b933      	cbnz	r3, 8002ada <_free_r+0x2e>
 8002acc:	6063      	str	r3, [r4, #4]
 8002ace:	6014      	str	r4, [r2, #0]
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ad6:	f000 b8cc 	b.w	8002c72 <__malloc_unlock>
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	d90c      	bls.n	8002af8 <_free_r+0x4c>
 8002ade:	6821      	ldr	r1, [r4, #0]
 8002ae0:	1862      	adds	r2, r4, r1
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bf04      	itt	eq
 8002ae6:	681a      	ldreq	r2, [r3, #0]
 8002ae8:	685b      	ldreq	r3, [r3, #4]
 8002aea:	6063      	str	r3, [r4, #4]
 8002aec:	bf04      	itt	eq
 8002aee:	1852      	addeq	r2, r2, r1
 8002af0:	6022      	streq	r2, [r4, #0]
 8002af2:	6004      	str	r4, [r0, #0]
 8002af4:	e7ec      	b.n	8002ad0 <_free_r+0x24>
 8002af6:	4613      	mov	r3, r2
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	b10a      	cbz	r2, 8002b00 <_free_r+0x54>
 8002afc:	42a2      	cmp	r2, r4
 8002afe:	d9fa      	bls.n	8002af6 <_free_r+0x4a>
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	1858      	adds	r0, r3, r1
 8002b04:	42a0      	cmp	r0, r4
 8002b06:	d10b      	bne.n	8002b20 <_free_r+0x74>
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	4401      	add	r1, r0
 8002b0c:	1858      	adds	r0, r3, r1
 8002b0e:	4282      	cmp	r2, r0
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	d1dd      	bne.n	8002ad0 <_free_r+0x24>
 8002b14:	6810      	ldr	r0, [r2, #0]
 8002b16:	6852      	ldr	r2, [r2, #4]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	4401      	add	r1, r0
 8002b1c:	6019      	str	r1, [r3, #0]
 8002b1e:	e7d7      	b.n	8002ad0 <_free_r+0x24>
 8002b20:	d902      	bls.n	8002b28 <_free_r+0x7c>
 8002b22:	230c      	movs	r3, #12
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	e7d3      	b.n	8002ad0 <_free_r+0x24>
 8002b28:	6820      	ldr	r0, [r4, #0]
 8002b2a:	1821      	adds	r1, r4, r0
 8002b2c:	428a      	cmp	r2, r1
 8002b2e:	bf04      	itt	eq
 8002b30:	6811      	ldreq	r1, [r2, #0]
 8002b32:	6852      	ldreq	r2, [r2, #4]
 8002b34:	6062      	str	r2, [r4, #4]
 8002b36:	bf04      	itt	eq
 8002b38:	1809      	addeq	r1, r1, r0
 8002b3a:	6021      	streq	r1, [r4, #0]
 8002b3c:	605c      	str	r4, [r3, #4]
 8002b3e:	e7c7      	b.n	8002ad0 <_free_r+0x24>
 8002b40:	bd38      	pop	{r3, r4, r5, pc}
 8002b42:	bf00      	nop
 8002b44:	20020094 	.word	0x20020094

08002b48 <_malloc_r>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	1ccd      	adds	r5, r1, #3
 8002b4c:	f025 0503 	bic.w	r5, r5, #3
 8002b50:	3508      	adds	r5, #8
 8002b52:	2d0c      	cmp	r5, #12
 8002b54:	bf38      	it	cc
 8002b56:	250c      	movcc	r5, #12
 8002b58:	2d00      	cmp	r5, #0
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	db01      	blt.n	8002b62 <_malloc_r+0x1a>
 8002b5e:	42a9      	cmp	r1, r5
 8002b60:	d903      	bls.n	8002b6a <_malloc_r+0x22>
 8002b62:	230c      	movs	r3, #12
 8002b64:	6033      	str	r3, [r6, #0]
 8002b66:	2000      	movs	r0, #0
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	f000 f881 	bl	8002c70 <__malloc_lock>
 8002b6e:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <_malloc_r+0xb4>)
 8002b70:	6814      	ldr	r4, [r2, #0]
 8002b72:	4621      	mov	r1, r4
 8002b74:	b991      	cbnz	r1, 8002b9c <_malloc_r+0x54>
 8002b76:	4c22      	ldr	r4, [pc, #136]	; (8002c00 <_malloc_r+0xb8>)
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	b91b      	cbnz	r3, 8002b84 <_malloc_r+0x3c>
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f000 f867 	bl	8002c50 <_sbrk_r>
 8002b82:	6020      	str	r0, [r4, #0]
 8002b84:	4629      	mov	r1, r5
 8002b86:	4630      	mov	r0, r6
 8002b88:	f000 f862 	bl	8002c50 <_sbrk_r>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d126      	bne.n	8002bde <_malloc_r+0x96>
 8002b90:	230c      	movs	r3, #12
 8002b92:	6033      	str	r3, [r6, #0]
 8002b94:	4630      	mov	r0, r6
 8002b96:	f000 f86c 	bl	8002c72 <__malloc_unlock>
 8002b9a:	e7e4      	b.n	8002b66 <_malloc_r+0x1e>
 8002b9c:	680b      	ldr	r3, [r1, #0]
 8002b9e:	1b5b      	subs	r3, r3, r5
 8002ba0:	d41a      	bmi.n	8002bd8 <_malloc_r+0x90>
 8002ba2:	2b0b      	cmp	r3, #11
 8002ba4:	d90f      	bls.n	8002bc6 <_malloc_r+0x7e>
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	50cd      	str	r5, [r1, r3]
 8002baa:	18cc      	adds	r4, r1, r3
 8002bac:	4630      	mov	r0, r6
 8002bae:	f000 f860 	bl	8002c72 <__malloc_unlock>
 8002bb2:	f104 000b 	add.w	r0, r4, #11
 8002bb6:	1d23      	adds	r3, r4, #4
 8002bb8:	f020 0007 	bic.w	r0, r0, #7
 8002bbc:	1ac3      	subs	r3, r0, r3
 8002bbe:	d01b      	beq.n	8002bf8 <_malloc_r+0xb0>
 8002bc0:	425a      	negs	r2, r3
 8002bc2:	50e2      	str	r2, [r4, r3]
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	428c      	cmp	r4, r1
 8002bc8:	bf0d      	iteet	eq
 8002bca:	6863      	ldreq	r3, [r4, #4]
 8002bcc:	684b      	ldrne	r3, [r1, #4]
 8002bce:	6063      	strne	r3, [r4, #4]
 8002bd0:	6013      	streq	r3, [r2, #0]
 8002bd2:	bf18      	it	ne
 8002bd4:	460c      	movne	r4, r1
 8002bd6:	e7e9      	b.n	8002bac <_malloc_r+0x64>
 8002bd8:	460c      	mov	r4, r1
 8002bda:	6849      	ldr	r1, [r1, #4]
 8002bdc:	e7ca      	b.n	8002b74 <_malloc_r+0x2c>
 8002bde:	1cc4      	adds	r4, r0, #3
 8002be0:	f024 0403 	bic.w	r4, r4, #3
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d005      	beq.n	8002bf4 <_malloc_r+0xac>
 8002be8:	1a21      	subs	r1, r4, r0
 8002bea:	4630      	mov	r0, r6
 8002bec:	f000 f830 	bl	8002c50 <_sbrk_r>
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d0cd      	beq.n	8002b90 <_malloc_r+0x48>
 8002bf4:	6025      	str	r5, [r4, #0]
 8002bf6:	e7d9      	b.n	8002bac <_malloc_r+0x64>
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20020094 	.word	0x20020094
 8002c00:	20020098 	.word	0x20020098

08002c04 <_realloc_r>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	4607      	mov	r7, r0
 8002c08:	4614      	mov	r4, r2
 8002c0a:	460e      	mov	r6, r1
 8002c0c:	b921      	cbnz	r1, 8002c18 <_realloc_r+0x14>
 8002c0e:	4611      	mov	r1, r2
 8002c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c14:	f7ff bf98 	b.w	8002b48 <_malloc_r>
 8002c18:	b922      	cbnz	r2, 8002c24 <_realloc_r+0x20>
 8002c1a:	f7ff ff47 	bl	8002aac <_free_r>
 8002c1e:	4625      	mov	r5, r4
 8002c20:	4628      	mov	r0, r5
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c24:	f000 f826 	bl	8002c74 <_malloc_usable_size_r>
 8002c28:	4284      	cmp	r4, r0
 8002c2a:	d90f      	bls.n	8002c4c <_realloc_r+0x48>
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	4638      	mov	r0, r7
 8002c30:	f7ff ff8a 	bl	8002b48 <_malloc_r>
 8002c34:	4605      	mov	r5, r0
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0f2      	beq.n	8002c20 <_realloc_r+0x1c>
 8002c3a:	4631      	mov	r1, r6
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	f7ff ff0f 	bl	8002a60 <memcpy>
 8002c42:	4631      	mov	r1, r6
 8002c44:	4638      	mov	r0, r7
 8002c46:	f7ff ff31 	bl	8002aac <_free_r>
 8002c4a:	e7e9      	b.n	8002c20 <_realloc_r+0x1c>
 8002c4c:	4635      	mov	r5, r6
 8002c4e:	e7e7      	b.n	8002c20 <_realloc_r+0x1c>

08002c50 <_sbrk_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4c06      	ldr	r4, [pc, #24]	; (8002c6c <_sbrk_r+0x1c>)
 8002c54:	2300      	movs	r3, #0
 8002c56:	4605      	mov	r5, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	f7ff fb6a 	bl	8002334 <_sbrk>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_sbrk_r+0x1a>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_sbrk_r+0x1a>
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20020234 	.word	0x20020234

08002c70 <__malloc_lock>:
 8002c70:	4770      	bx	lr

08002c72 <__malloc_unlock>:
 8002c72:	4770      	bx	lr

08002c74 <_malloc_usable_size_r>:
 8002c74:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f1a0 0004 	sub.w	r0, r0, #4
 8002c7e:	bfbc      	itt	lt
 8002c80:	580b      	ldrlt	r3, [r1, r0]
 8002c82:	18c0      	addlt	r0, r0, r3
 8002c84:	4770      	bx	lr
	...

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
