
BH1750F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000fc  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000016c  2000016c  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000adae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001806  00000000  00000000  0002ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009a0  00000000  00000000  0002c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000900  00000000  00000000  0002cff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004824  00000000  00000000  0002d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003044  00000000  00000000  0003211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035160  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cb0  00000000  00000000  000351dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004548 	.word	0x08004548

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004548 	.word	0x08004548

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b97a 	b.w	8000d70 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	468c      	mov	ip, r1
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	9e08      	ldr	r6, [sp, #32]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d151      	bne.n	8000b48 <__udivmoddi4+0xb4>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d96d      	bls.n	8000b86 <__udivmoddi4+0xf2>
 8000aaa:	fab2 fe82 	clz	lr, r2
 8000aae:	f1be 0f00 	cmp.w	lr, #0
 8000ab2:	d00b      	beq.n	8000acc <__udivmoddi4+0x38>
 8000ab4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000abc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ac0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000acc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ad0:	0c25      	lsrs	r5, r4, #16
 8000ad2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad6:	fa1f f987 	uxth.w	r9, r7
 8000ada:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ade:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ae2:	fb08 f309 	mul.w	r3, r8, r9
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x6c>
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	f108 32ff 	add.w	r2, r8, #4294967295
 8000af0:	f080 8123 	bcs.w	8000d3a <__udivmoddi4+0x2a6>
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	f240 8120 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	443d      	add	r5, r7
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b08:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b10:	fb00 f909 	mul.w	r9, r0, r9
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x98>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	f080 810a 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000b22:	45a1      	cmp	r9, r4
 8000b24:	f240 8107 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	eba4 0409 	sub.w	r4, r4, r9
 8000b30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d061      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b3a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6034      	str	r4, [r6, #0]
 8000b42:	6073      	str	r3, [r6, #4]
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0xc8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d054      	beq.n	8000bfa <__udivmoddi4+0x166>
 8000b50:	2100      	movs	r1, #0
 8000b52:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b56:	4608      	mov	r0, r1
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	fab3 f183 	clz	r1, r3
 8000b60:	2900      	cmp	r1, #0
 8000b62:	f040 808e 	bne.w	8000c82 <__udivmoddi4+0x1ee>
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xdc>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80fa 	bhi.w	8000d64 <__udivmoddi4+0x2d0>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb65 0503 	sbc.w	r5, r5, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	46ac      	mov	ip, r5
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d03f      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b7e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	b912      	cbnz	r2, 8000b8e <__udivmoddi4+0xfa>
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8e:	fab7 fe87 	clz	lr, r7
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d134      	bne.n	8000c02 <__udivmoddi4+0x16e>
 8000b98:	1beb      	subs	r3, r5, r7
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba6:	0c25      	lsrs	r5, r4, #16
 8000ba8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bb0:	fb0c f308 	mul.w	r3, ip, r8
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x134>
 8000bb8:	19ed      	adds	r5, r5, r7
 8000bba:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x132>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f200 80d1 	bhi.w	8000d68 <__udivmoddi4+0x2d4>
 8000bc6:	4680      	mov	r8, r0
 8000bc8:	1aed      	subs	r5, r5, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bd0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x15c>
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x15a>
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	f200 80b8 	bhi.w	8000d5e <__udivmoddi4+0x2ca>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf8:	e79d      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1ce 0420 	rsb	r4, lr, #32
 8000c06:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c0a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa25 f404 	lsr.w	r4, r5, r4
 8000c18:	ea48 0803 	orr.w	r8, r8, r3
 8000c1c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c20:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c24:	fb02 4411 	mls	r4, r2, r1, r4
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c30:	fb01 f30c 	mul.w	r3, r1, ip
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x1bc>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c42:	f080 808a 	bcs.w	8000d5a <__udivmoddi4+0x2c6>
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	f240 8087 	bls.w	8000d5a <__udivmoddi4+0x2c6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aeb      	subs	r3, r5, r3
 8000c52:	fa1f f588 	uxth.w	r5, r8
 8000c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c62:	fb00 f30c 	mul.w	r3, r0, ip
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x1e6>
 8000c6a:	19ed      	adds	r5, r5, r7
 8000c6c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c70:	d26f      	bcs.n	8000d52 <__udivmoddi4+0x2be>
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0x2be>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443d      	add	r5, r7
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	e78f      	b.n	8000ba2 <__udivmoddi4+0x10e>
 8000c82:	f1c1 0720 	rsb	r7, r1, #32
 8000c86:	fa22 f807 	lsr.w	r8, r2, r7
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c90:	ea48 0303 	orr.w	r3, r8, r3
 8000c94:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ca2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000caa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cae:	fa1f f883 	uxth.w	r8, r3
 8000cb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb6:	fb09 f408 	mul.w	r4, r9, r8
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x244>
 8000cc6:	18ed      	adds	r5, r5, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	d243      	bcs.n	8000d56 <__udivmoddi4+0x2c2>
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	d941      	bls.n	8000d56 <__udivmoddi4+0x2c2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	441d      	add	r5, r3
 8000cd8:	1b2d      	subs	r5, r5, r4
 8000cda:	fa1f fe8e 	uxth.w	lr, lr
 8000cde:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ce2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cea:	fb00 f808 	mul.w	r8, r0, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cf2:	18e4      	adds	r4, r4, r3
 8000cf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf8:	d229      	bcs.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfa:	45a0      	cmp	r8, r4
 8000cfc:	d927      	bls.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	441c      	add	r4, r3
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	eba4 0408 	sub.w	r4, r4, r8
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c6      	mov	lr, r8
 8000d12:	464d      	mov	r5, r9
 8000d14:	d315      	bcc.n	8000d42 <__udivmoddi4+0x2ae>
 8000d16:	d012      	beq.n	8000d3e <__udivmoddi4+0x2aa>
 8000d18:	b156      	cbz	r6, 8000d30 <__udivmoddi4+0x29c>
 8000d1a:	ebba 030e 	subs.w	r3, sl, lr
 8000d1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d22:	fa04 f707 	lsl.w	r7, r4, r7
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	6037      	str	r7, [r6, #0]
 8000d2e:	6074      	str	r4, [r6, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	4618      	mov	r0, r3
 8000d38:	e6f8      	b.n	8000b2c <__udivmoddi4+0x98>
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	e6e0      	b.n	8000b00 <__udivmoddi4+0x6c>
 8000d3e:	45c2      	cmp	sl, r8
 8000d40:	d2ea      	bcs.n	8000d18 <__udivmoddi4+0x284>
 8000d42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d46:	eb69 0503 	sbc.w	r5, r9, r3
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7e4      	b.n	8000d18 <__udivmoddi4+0x284>
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e7d7      	b.n	8000d02 <__udivmoddi4+0x26e>
 8000d52:	4640      	mov	r0, r8
 8000d54:	e791      	b.n	8000c7a <__udivmoddi4+0x1e6>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e7be      	b.n	8000cd8 <__udivmoddi4+0x244>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0x1bc>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	e745      	b.n	8000bf0 <__udivmoddi4+0x15c>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e708      	b.n	8000b7a <__udivmoddi4+0xe6>
 8000d68:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6c:	443d      	add	r5, r7
 8000d6e:	e72b      	b.n	8000bc8 <__udivmoddi4+0x134>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <_Error_Handler>:

#include "bh1750.h"
extern UART_HandleTypeDef huart2;
extern char buffer[50];
void _Error_Handler(char * file, int line)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  while(1)
 8000d7e:	e7fe      	b.n	8000d7e <_Error_Handler+0xa>

08000d80 <BH1750_init_i2c>:
  {
  }
}

HAL_StatusTypeDef BH1750_init_i2c(I2C_HandleTypeDef* i2c_handle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <BH1750_init_i2c+0x7c>)
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <BH1750_init_i2c+0x7c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <BH1750_init_i2c+0x7c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

	i2c_handle->Instance = I2C1;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <BH1750_init_i2c+0x80>)
 8000da8:	601a      	str	r2, [r3, #0]
	i2c_handle->Init.ClockSpeed = 100000;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <BH1750_init_i2c+0x84>)
 8000dae:	605a      	str	r2, [r3, #4]
	i2c_handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
	i2c_handle->Init.OwnAddress1 = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
	i2c_handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
	i2c_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
	i2c_handle->Init.OwnAddress2 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
	i2c_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
	i2c_handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c_handle) != HAL_OK)
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 febb 	bl	8001b58 <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <BH1750_init_i2c+0x70>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000de8:	2137      	movs	r1, #55	; 0x37
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <BH1750_init_i2c+0x88>)
 8000dec:	f7ff ffc2 	bl	8000d74 <_Error_Handler>
	}

	return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40005400 	.word	0x40005400
 8000e04:	000186a0 	.word	0x000186a0
 8000e08:	08004560 	.word	0x08004560

08000e0c <BH1750_send_command>:

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	uint8_t u;
	if(u=HAL_I2C_Master_Transmit(
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a5b      	ldrb	r3, [r3, #9]
	if(u=HAL_I2C_Master_Transmit(
 8000e20:	b299      	uxth	r1, r3
 8000e22:	1cfa      	adds	r2, r7, #3
 8000e24:	230a      	movs	r3, #10
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f000 ffcd 	bl	8001dc8 <HAL_I2C_Master_Transmit>
 8000e2e:	4603      	mov	r3, r0
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
	if(u=HAL_I2C_Master_Transmit(
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <BH1750_send_command+0x3a>
		) != HAL_OK) return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <BH1750_send_command+0x3c>

	return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f8c1 	bl	8000fe0 <BH1750_get_lumen>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
 8000e76:	2114      	movs	r1, #20
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f002 fef1 	bl	8003c60 <calloc>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	617b      	str	r3, [r7, #20]
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));

	if(init == NULL) return NULL;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <BH1750_init_dev_struct+0x24>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e02d      	b.n	8000ee8 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2247      	movs	r2, #71	; 0x47
 8000e96:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2246      	movs	r2, #70	; 0x46
 8000e9c:	725a      	strb	r2, [r3, #9]
 8000e9e:	e005      	b.n	8000eac <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	22ba      	movs	r2, #186	; 0xba
 8000ea4:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	22b9      	movs	r2, #185	; 0xb9
 8000eaa:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000eac:	68b8      	ldr	r0, [r7, #8]
 8000eae:	f7ff f997 	bl	80001e0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 ff05 	bl	8003cc4 <malloc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <BH1750_init_dev_struct+0x66>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e00c      	b.n	8000ee8 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fff0 	bl	8003ec0 <strcpy>

	init->poll = &BH1750_poll_self;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <BH1750_init_dev_struct+0x88>)
 8000ee4:	611a      	str	r2, [r3, #16]

	return init;
 8000ee6:	697b      	ldr	r3, [r7, #20]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	08000e51 	.word	0x08000e51

08000ef4 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000efc:	2101      	movs	r1, #1
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff84 	bl	8000e0c <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000f04:	2103      	movs	r1, #3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff80 	bl	8000e0c <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff7c 	bl	8000e0c <BH1750_send_command>

	return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af02      	add	r7, sp, #8
 8000f24:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000f2e:	b299      	uxth	r1, r3
			dev->buffer,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000f36:	230a      	movs	r3, #10
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f001 f842 	bl	8001fc4 <HAL_I2C_Master_Receive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7b1b      	ldrb	r3, [r3, #12]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	895b      	ldrh	r3, [r3, #10]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b5b      	ldrb	r3, [r3, #13]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	815a      	strh	r2, [r3, #10]
	  uint8_t size;
	//TODO check float stuff
	dev->value/=1.2;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fad6 	bl	8000534 <__aeabi_i2d>
 8000f88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <BH1750_convert+0x7c>)
 8000f8e:	f7ff fc61 	bl	8000854 <__aeabi_ddiv>
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4618      	mov	r0, r3
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f7ff fd43 	bl	8000a24 <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	815a      	strh	r2, [r3, #10]
	  size = sprintf(buffer, "BH1750 Lux: %d\n\r", dev->value);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	895b      	ldrh	r3, [r3, #10]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <BH1750_convert+0x80>)
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <BH1750_convert+0x84>)
 8000fb0:	f002 ff62 	bl	8003e78 <siprintf>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	4906      	ldr	r1, [pc, #24]	; (8000fd8 <BH1750_convert+0x84>)
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <BH1750_convert+0x88>)
 8000fc2:	f002 fa02 	bl	80033ca <HAL_UART_Transmit>
	return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	3ff33333 	.word	0x3ff33333
 8000fd4:	08004578 	.word	0x08004578
 8000fd8:	200000f0 	.word	0x200000f0
 8000fdc:	20000124 	.word	0x20000124

08000fe0 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff98 	bl	8000f1e <BH1750_read_dev>
	BH1750_convert(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb0 	bl	8000f54 <BH1750_convert>
	return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fa93 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f837 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 f8f7 	bl	8001200 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001012:	f000 f89d 	bl	8001150 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001016:	f000 f8c9 	bl	80011ac <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BH1750_init_i2c(&hi2c1);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <main+0x68>)
 800101c:	f7ff feb0 	bl	8000d80 <BH1750_init_i2c>
  BH1750_device_t* test_dev = BH1750_init_dev_struct(&hi2c1, "test device", true);
 8001020:	2201      	movs	r2, #1
 8001022:	4912      	ldr	r1, [pc, #72]	; (800106c <main+0x6c>)
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0x68>)
 8001026:	f7ff ff1f 	bl	8000e68 <BH1750_init_dev_struct>
 800102a:	6078      	str	r0, [r7, #4]
  BH1750_init_dev(test_dev);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff61 	bl	8000ef4 <BH1750_init_dev>

  /* USER CODE END 2 */
  size = sprintf(buffer, "BH1750 start \n\r");
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <main+0x70>)
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <main+0x74>)
 8001036:	4614      	mov	r4, r2
 8001038:	461d      	mov	r5, r3
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	6020      	str	r0, [r4, #0]
 800103e:	6061      	str	r1, [r4, #4]
 8001040:	60a2      	str	r2, [r4, #8]
 8001042:	60e3      	str	r3, [r4, #12]
 8001044:	230f      	movs	r3, #15
 8001046:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	b29a      	uxth	r2, r3
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <main+0x70>)
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <main+0x78>)
 8001052:	f002 f9ba 	bl	80033ca <HAL_UART_Transmit>
  while (1)
  {
	  test_dev->poll(test_dev);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	4798      	blx	r3
	  HAL_Delay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001062:	f000 fad7 	bl	8001614 <HAL_Delay>
	  test_dev->poll(test_dev);
 8001066:	e7f6      	b.n	8001056 <main+0x56>
 8001068:	20000098 	.word	0x20000098
 800106c:	0800458c 	.word	0x0800458c
 8001070:	200000f0 	.word	0x200000f0
 8001074:	08004598 	.word	0x08004598
 8001078:	20000124 	.word	0x20000124

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fe22 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4a28      	ldr	r2, [pc, #160]	; (8001148 <SystemClock_Config+0xcc>)
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <SystemClock_Config+0xcc>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <SystemClock_Config+0xd0>)
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <SystemClock_Config+0xd0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010f4:	2354      	movs	r3, #84	; 0x54
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fc:	2307      	movs	r3, #7
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fcb1 	bl	8002a6c <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001110:	f000 f8e6 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 ff0b 	bl	8002f4c <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800113c:	f000 f8d0 	bl	80012e0 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f000 fce3 	bl	8001b58 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f8a2 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000098 	.word	0x20000098
 80011a4:	40005400 	.word	0x40005400
 80011a8:	00061a80 	.word	0x00061a80

080011ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART2_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f002 f8a4 	bl	8003330 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f877 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000124 	.word	0x20000124
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_GPIO_Init+0xd0>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MX_GPIO_Init+0xd4>)
 800128c:	f000 fc4a 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_GPIO_Init+0xd8>)
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_GPIO_Init+0xdc>)
 80012a6:	f000 fabb 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012aa:	2320      	movs	r3, #32
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0xd4>)
 80012c2:	f000 faad 	bl	8001820 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	40020800 	.word	0x40020800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <Error_Handler+0x6>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001326:	2007      	movs	r0, #7
 8001328:	f000 fa46 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_I2C_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12c      	bne.n	80013b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137c:	2312      	movs	r3, #18
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001388:	2304      	movs	r3, #4
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <HAL_I2C_MspInit+0x8c>)
 8001394:	f000 fa44 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_I2C_MspInit+0x88>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_UART_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12b      	bne.n	8001442 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_UART_MspInit+0x88>)
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_UART_MspInit+0x88>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_UART_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_UART_MspInit+0x88>)
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_MspInit+0x88>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_UART_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001422:	230c      	movs	r3, #12
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001432:	2307      	movs	r3, #7
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_UART_MspInit+0x8c>)
 800143e:	f000 f9ef 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40004400 	.word	0x40004400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f896 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x50>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x16>
		heap_end = &end;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <_sbrk+0x50>)
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <_sbrk+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <_sbrk+0x50>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <_sbrk+0x50>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	466a      	mov	r2, sp
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d907      	bls.n	80014e6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80014d6:	f002 fbcb 	bl	8003c70 <__errno>
 80014da:	4602      	mov	r2, r0
 80014dc:	230c      	movs	r3, #12
 80014de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e006      	b.n	80014f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <_sbrk+0x50>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <_sbrk+0x50>)
 80014f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000008c 	.word	0x2000008c
 8001500:	2000016c 	.word	0x2000016c

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <SystemInit+0x28>)
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <SystemInit+0x28>)
 800150c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <SystemInit+0x28>)
 800151a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800151e:	609a      	str	r2, [r3, #8]
#endif
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f92d 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fec0 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f937 	bl	8001806 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f90d 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000164 	.word	0x20000164

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000164 	.word	0x20000164

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_Delay+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad2      	subs	r2, r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3f7      	bcc.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000008 	.word	0x20000008

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	490d      	ldr	r1, [pc, #52]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	4909      	ldr	r1, [pc, #36]	; (800170c <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	2201      	movs	r2, #1
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	401a      	ands	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001756:	2101      	movs	r1, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	1e59      	subs	r1, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff90 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff49 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff5e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffb0 	bl	8001774 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e159      	b.n	8001af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8148 	bne.w	8001aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d00b      	beq.n	800187a <HAL_GPIO_Init+0x5a>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186e:	2b11      	cmp	r3, #17
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0xfc>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_GPIO_Init+0x2e4>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a48      	ldr	r2, [pc, #288]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x202>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a47      	ldr	r2, [pc, #284]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1fe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a46      	ldr	r2, [pc, #280]	; (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1fa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <HAL_GPIO_Init+0x2f8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1f6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a44      	ldr	r2, [pc, #272]	; (8001b1c <HAL_GPIO_Init+0x2fc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1f2>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a66:	4a2e      	ldr	r2, [pc, #184]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f aea2 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	3724      	adds	r7, #36	; 0x24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e11f      	b.n	8001daa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fbda 	bl	8001338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bbc:	f001 fb90 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d807      	bhi.n	8001bdc <HAL_I2C_Init+0x84>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_I2C_Init+0x260>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e006      	b.n	8001bea <HAL_I2C_Init+0x92>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_I2C_Init+0x264>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0db      	b.n	8001daa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_I2C_Init+0x268>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	6852      	ldr	r2, [r2, #4]
 8001c08:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4863      	ldr	r0, [pc, #396]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001c26:	4283      	cmp	r3, r0
 8001c28:	d802      	bhi.n	8001c30 <HAL_I2C_Init+0xd8>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	e009      	b.n	8001c44 <HAL_I2C_Init+0xec>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c36:	fb00 f303 	mul.w	r3, r0, r3
 8001c3a:	4862      	ldr	r0, [pc, #392]	; (8001dc4 <HAL_I2C_Init+0x26c>)
 8001c3c:	fba0 0303 	umull	r0, r3, r0, r3
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	3301      	adds	r3, #1
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4955      	ldr	r1, [pc, #340]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d80d      	bhi.n	8001c80 <HAL_I2C_Init+0x128>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e59      	subs	r1, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	bf38      	it	cc
 8001c7c:	2304      	movcc	r3, #4
 8001c7e:	e04f      	b.n	8001d20 <HAL_I2C_Init+0x1c8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d111      	bne.n	8001cac <HAL_I2C_Init+0x154>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e5c      	subs	r4, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e012      	b.n	8001cd2 <HAL_I2C_Init+0x17a>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e5c      	subs	r4, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	0099      	lsls	r1, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Init+0x182>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e022      	b.n	8001d20 <HAL_I2C_Init+0x1c8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10e      	bne.n	8001d00 <HAL_I2C_Init+0x1a8>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e5c      	subs	r4, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfe:	e00f      	b.n	8001d20 <HAL_I2C_Init+0x1c8>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e5c      	subs	r4, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	0099      	lsls	r1, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	69d0      	ldr	r0, [r2, #28]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a12      	ldr	r2, [r2, #32]
 8001d3a:	4302      	orrs	r2, r0
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	6908      	ldr	r0, [r1, #16]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	68c9      	ldr	r1, [r1, #12]
 8001d5a:	4301      	orrs	r1, r0
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	68d2      	ldr	r2, [r2, #12]
 8001d6a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6950      	ldr	r0, [r2, #20]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6992      	ldr	r2, [r2, #24]
 8001d76:	4302      	orrs	r2, r0
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	000186a0 	.word	0x000186a0
 8001db8:	001e847f 	.word	0x001e847f
 8001dbc:	003d08ff 	.word	0x003d08ff
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fc0e 	bl	80015fc <HAL_GetTick>
 8001de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f040 80e0 	bne.w	8001fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2319      	movs	r3, #25
 8001df6:	2201      	movs	r2, #1
 8001df8:	4970      	ldr	r1, [pc, #448]	; (8001fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fc58 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0d3      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0x50>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e0cc      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d007      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2221      	movs	r2, #33	; 0x21
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	893a      	ldrh	r2, [r7, #8]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fac2 	bl	8002410 <I2C_MasterRequestWrite>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e08d      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eac:	e066      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	6a39      	ldr	r1, [r7, #32]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fcd2 	bl	800285c <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d107      	bne.n	8001ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06b      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d11b      	bne.n	8001f50 <HAL_I2C_Master_Transmit+0x188>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d017      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fcc2 	bl	80028de <I2C_WaitOnBTFFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d107      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01a      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d194      	bne.n	8001eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	00100002 	.word	0x00100002
 8001fc0:	ffff0000 	.word	0xffff0000

08001fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	817b      	strh	r3, [r7, #10]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fb10 	bl	80015fc <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	f040 820b 	bne.w	8002402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2319      	movs	r3, #25
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	497c      	ldr	r1, [pc, #496]	; (80021e8 <HAL_I2C_Master_Receive+0x224>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fb5a 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	e1fe      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Master_Receive+0x50>
 8002010:	2302      	movs	r3, #2
 8002012:	e1f7      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d007      	beq.n	800203a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2222      	movs	r2, #34	; 0x22
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2210      	movs	r2, #16
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_I2C_Master_Receive+0x228>)
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa46 	bl	8002514 <I2C_MasterRequestRead>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e1b8      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	d113      	bne.n	80020c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e18c      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d11b      	bne.n	8002102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e16c      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b02      	cmp	r3, #2
 8002108:	d11b      	bne.n	8002142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	e14c      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002168:	e138      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b03      	cmp	r3, #3
 8002170:	f200 80f1 	bhi.w	8002356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b01      	cmp	r3, #1
 800217a:	d123      	bne.n	80021c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fbed 	bl	8002960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e139      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	6912      	ldr	r2, [r2, #16]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021c2:	e10b      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d14e      	bne.n	800226a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	2200      	movs	r2, #0
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <HAL_I2C_Master_Receive+0x22c>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa6a 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e10e      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
 80021e6:	bf00      	nop
 80021e8:	00100002 	.word	0x00100002
 80021ec:	ffff0000 	.word	0xffff0000
 80021f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	6912      	ldr	r2, [r2, #16]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	6912      	ldr	r2, [r2, #16]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002268:	e0b8      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	4966      	ldr	r1, [pc, #408]	; (800240c <HAL_I2C_Master_Receive+0x448>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fa1b 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0bf      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	6912      	ldr	r2, [r2, #16]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2200      	movs	r2, #0
 80022ce:	494f      	ldr	r1, [pc, #316]	; (800240c <HAL_I2C_Master_Receive+0x448>)
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f9ed 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e091      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	6912      	ldr	r2, [r2, #16]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	6912      	ldr	r2, [r2, #16]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002354:	e042      	b.n	80023dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fb00 	bl	8002960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e04c      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6912      	ldr	r2, [r2, #16]
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d118      	bne.n	80023dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	6912      	ldr	r2, [r2, #16]
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f aec2 	bne.w	800216a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	00010004 	.word	0x00010004

08002410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	460b      	mov	r3, r1
 800241e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d006      	beq.n	800243a <I2C_MasterRequestWrite+0x2a>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d003      	beq.n	800243a <I2C_MasterRequestWrite+0x2a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00b      	b.n	8002464 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	2b12      	cmp	r3, #18
 8002452:	d107      	bne.n	8002464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f91d 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	d103      	bne.n	8002494 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e034      	b.n	8002502 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a0:	d107      	bne.n	80024b2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	897a      	ldrh	r2, [r7, #10]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ae:	611a      	str	r2, [r3, #16]
 80024b0:	e01b      	b.n	80024ea <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	897a      	ldrh	r2, [r7, #10]
 80024b8:	11d2      	asrs	r2, r2, #7
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f002 0206 	and.w	r2, r2, #6
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f062 020f 	orn	r2, r2, #15
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <I2C_MasterRequestWrite+0xfc>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f944 	bl	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e010      	b.n	8002502 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	897a      	ldrh	r2, [r7, #10]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <I2C_MasterRequestWrite+0x100>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f934 	bl	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00010008 	.word	0x00010008
 8002510:	00010002 	.word	0x00010002

08002514 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002538:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d006      	beq.n	800254e <I2C_MasterRequestRead+0x3a>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d003      	beq.n	800254e <I2C_MasterRequestRead+0x3a>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00b      	b.n	8002578 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	2b11      	cmp	r3, #17
 8002566:	d107      	bne.n	8002578 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f893 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d103      	bne.n	80025a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e079      	b.n	80026a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025b4:	d108      	bne.n	80025c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	897a      	ldrh	r2, [r7, #10]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	611a      	str	r2, [r3, #16]
 80025c6:	e05f      	b.n	8002688 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	897a      	ldrh	r2, [r7, #10]
 80025ce:	11d2      	asrs	r2, r2, #7
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f002 0206 	and.w	r2, r2, #6
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f062 020f 	orn	r2, r2, #15
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4930      	ldr	r1, [pc, #192]	; (80026a8 <I2C_MasterRequestRead+0x194>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8b9 	bl	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e054      	b.n	80026a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	897a      	ldrh	r2, [r7, #10]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4929      	ldr	r1, [pc, #164]	; (80026ac <I2C_MasterRequestRead+0x198>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f8a9 	bl	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e044      	b.n	80026a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f831 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002662:	d103      	bne.n	800266c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e017      	b.n	80026a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	897a      	ldrh	r2, [r7, #10]
 8002676:	11d2      	asrs	r2, r2, #7
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 0206 	and.w	r2, r2, #6
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f062 020e 	orn	r2, r2, #14
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <I2C_MasterRequestRead+0x198>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f865 	bl	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	00010008 	.word	0x00010008
 80026ac:	00010002 	.word	0x00010002

080026b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c0:	e025      	b.n	800270e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d021      	beq.n	800270e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7fe ff97 	bl	80015fc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d802      	bhi.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d116      	bne.n	800270e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e023      	b.n	8002756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4013      	ands	r3, r2
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	e00c      	b.n	800274e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d0b6      	beq.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800276c:	e051      	b.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277c:	d123      	bne.n	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e046      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d021      	beq.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7fe ff15 	bl	80015fc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d802      	bhi.n	80027e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e020      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10c      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e00b      	b.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	43da      	mvns	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4013      	ands	r3, r2
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d18d      	bne.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002868:	e02d      	b.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f8ce 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e02d      	b.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d021      	beq.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe febb 	bl	80015fc <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad2      	subs	r2, r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d802      	bhi.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d116      	bne.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d1ca      	bne.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ea:	e02d      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f88d 	bl	8002a0c <I2C_IsAcknowledgeFailed>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02d      	b.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d021      	beq.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7fe fe7a 	bl	80015fc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1ad2      	subs	r2, r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d802      	bhi.n	800291a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d1ca      	bne.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800296c:	e042      	b.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d119      	bne.n	80029b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0210 	mvn.w	r2, #16
 8002984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e029      	b.n	8002a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7fe fe24 	bl	80015fc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	1ad2      	subs	r2, r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d802      	bhi.n	80029c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d1b5      	bne.n	800296e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d11b      	bne.n	8002a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e25b      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d075      	beq.n	8002b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8a:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b9d      	ldr	r3, [pc, #628]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05b      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e236      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x74>
 8002ad2:	4a91      	ldr	r2, [pc, #580]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4a8b      	ldr	r2, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4a88      	ldr	r2, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002b04:	4a84      	ldr	r2, [pc, #528]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	4b84      	ldr	r3, [pc, #528]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4a81      	ldr	r2, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fd6a 	bl	80015fc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fd66 	bl	80015fc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1fb      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xc0>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd56 	bl	80015fc <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe fd52 	bl	80015fc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1e7      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b6c      	ldr	r3, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0xe8>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1bb      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4956      	ldr	r1, [pc, #344]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_RCC_OscConfig+0x2b0>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fd0b 	bl	80015fc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fd07 	bl	80015fc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e19c      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4943      	ldr	r1, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_OscConfig+0x2b0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fcea 	bl	80015fc <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fce6 	bl	80015fc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e17b      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d030      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x2b4>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fcca 	bl	80015fc <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fcc6 	bl	80015fc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e15b      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x200>
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x2b4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fcb3 	bl	80015fc <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fcaf 	bl	80015fc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e144      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a0 	beq.w	8002e06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x2b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d121      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCC_OscConfig+0x2b8>)
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_RCC_OscConfig+0x2b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fc75 	bl	80015fc <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e011      	b.n	8002d3a <HAL_RCC_OscConfig+0x2ce>
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
 8002d24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe fc68 	bl	80015fc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0fd      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x4d4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d50:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCC_OscConfig+0x32a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x312>
 8002d64:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d72:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e00b      	b.n	8002d96 <HAL_RCC_OscConfig+0x32a>
 8002d7e:	4a71      	ldr	r2, [pc, #452]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fc2d 	bl	80015fc <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fc29 	bl	80015fc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0bc      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ee      	beq.n	8002da6 <HAL_RCC_OscConfig+0x33a>
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fc17 	bl	80015fc <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fc13 	bl	80015fc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0a6      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002dfc:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8092 	beq.w	8002f34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d05c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d141      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fbe7 	bl	80015fc <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fbe3 	bl	80015fc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e078      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e50:	493c      	ldr	r1, [pc, #240]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fbbc 	bl	80015fc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe fbb8 	bl	80015fc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e04d      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x41c>
 8002ea6:	e045      	b.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe fba5 	bl	80015fc <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe fba1 	bl	80015fc <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e036      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x44a>
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e029      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_RCC_OscConfig+0x4d8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d115      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40007000 	.word	0x40007000
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470060 	.word	0x42470060

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0cc      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d20c      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b8      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa0:	4a59      	ldr	r2, [pc, #356]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb8:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4950      	ldr	r1, [pc, #320]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e067      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 0203 	bic.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7fe fade 	bl	80015fc <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7fe fada 	bl	80015fc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e032      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4919      	ldr	r1, [pc, #100]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4912      	ldr	r1, [pc, #72]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f821 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030d6:	4601      	mov	r1, r0
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fa3e 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00
 8003108:	40023800 	.word	0x40023800
 800310c:	080045a8 	.word	0x080045a8
 8003110:	20000000 	.word	0x20000000
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	b08f      	sub	sp, #60	; 0x3c
 800311e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	2300      	movs	r3, #0
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	4b62      	ldr	r3, [pc, #392]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d007      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x34>
 800313c:	2b08      	cmp	r3, #8
 800313e:	d008      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x3a>
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 80b2 	bne.w	80032aa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003146:	4b5e      	ldr	r3, [pc, #376]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800314a:	e0b1      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003150:	e0ae      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003152:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d04e      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b54      	ldr	r3, [pc, #336]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	f04f 0400 	mov.w	r4, #0
 8003172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	ea01 0103 	and.w	r1, r1, r3
 800317e:	ea02 0204 	and.w	r2, r2, r4
 8003182:	460b      	mov	r3, r1
 8003184:	4614      	mov	r4, r2
 8003186:	0160      	lsls	r0, r4, #5
 8003188:	6278      	str	r0, [r7, #36]	; 0x24
 800318a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800318c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003190:	6278      	str	r0, [r7, #36]	; 0x24
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	eb64 0402 	sbc.w	r4, r4, r2
 80031a0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80031a4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80031a8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80031ac:	ebb8 0803 	subs.w	r8, r8, r3
 80031b0:	eb69 0904 	sbc.w	r9, r9, r4
 80031b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80031cc:	eb18 0801 	adds.w	r8, r8, r1
 80031d0:	eb49 0902 	adc.w	r9, r9, r2
 80031d4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80031ec:	4640      	mov	r0, r8
 80031ee:	4649      	mov	r1, r9
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	f04f 0400 	mov.w	r4, #0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4623      	mov	r3, r4
 80031fa:	f7fd fc33 	bl	8000a64 <__aeabi_uldivmod>
 80031fe:	4603      	mov	r3, r0
 8003200:	460c      	mov	r4, r1
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
 8003204:	e043      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea01 0103 	and.w	r1, r1, r3
 800321c:	ea02 0204 	and.w	r2, r2, r4
 8003220:	460b      	mov	r3, r1
 8003222:	4614      	mov	r4, r2
 8003224:	0160      	lsls	r0, r4, #5
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	015b      	lsls	r3, r3, #5
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003238:	1a5b      	subs	r3, r3, r1
 800323a:	eb64 0402 	sbc.w	r4, r4, r2
 800323e:	01a6      	lsls	r6, r4, #6
 8003240:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003244:	019d      	lsls	r5, r3, #6
 8003246:	1aed      	subs	r5, r5, r3
 8003248:	eb66 0604 	sbc.w	r6, r6, r4
 800324c:	00f3      	lsls	r3, r6, #3
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	00eb      	lsls	r3, r5, #3
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003260:	186d      	adds	r5, r5, r1
 8003262:	eb46 0602 	adc.w	r6, r6, r2
 8003266:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800326a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800326e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003272:	4655      	mov	r5, sl
 8003274:	465e      	mov	r6, fp
 8003276:	4628      	mov	r0, r5
 8003278:	4631      	mov	r1, r6
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	f7fd fbee 	bl	8000a64 <__aeabi_uldivmod>
 8003288:	4603      	mov	r3, r0
 800328a:	460c      	mov	r4, r1
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	3301      	adds	r3, #1
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800329e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	373c      	adds	r7, #60	; 0x3c
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	007a1200 	.word	0x007a1200

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4601      	mov	r1, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	080045b8 	.word	0x080045b8

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800330c:	f7ff ffdc 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 8003310:	4601      	mov	r1, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	080045b8 	.word	0x080045b8

08003330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e03f      	b.n	80033c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe f836 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	68d2      	ldr	r2, [r2, #12]
 800336e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f90b 	bl	8003590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6912      	ldr	r2, [r2, #16]
 8003384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6952      	ldr	r2, [r2, #20]
 8003394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	68d2      	ldr	r2, [r2, #12]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af02      	add	r7, sp, #8
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	f040 8082 	bne.w	80034f0 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Transmit+0x2e>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e07a      	b.n	80034f2 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_UART_Transmit+0x40>
 8003406:	2302      	movs	r3, #2
 8003408:	e073      	b.n	80034f2 <HAL_UART_Transmit+0x128>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2221      	movs	r2, #33	; 0x21
 800341c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003420:	f7fe f8ec 	bl	80015fc <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800343a:	e041      	b.n	80034c0 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d121      	bne.n	8003498 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f84b 	bl	80034fa <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e041      	b.n	80034f2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3302      	adds	r3, #2
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	e017      	b.n	80034c0 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3301      	adds	r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	e013      	b.n	80034c0 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f829 	bl	80034fa <UART_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e01f      	b.n	80034f2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1b8      	bne.n	800343c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f810 	bl	80034fa <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e006      	b.n	80034f2 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350a:	e02c      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d028      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <UART_WaitOnFlagUntilTimeout+0x30>
 800351a:	f7fe f86f 	bl	80015fc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1ad2      	subs	r2, r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d91d      	bls.n	8003566 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	68d2      	ldr	r2, [r2, #12]
 8003534:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003538:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	6952      	ldr	r2, [r2, #20]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e00f      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	429a      	cmp	r2, r3
 8003582:	d0c3      	beq.n	800350c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	b0a3      	sub	sp, #140	; 0x8c
 8003596:	af00      	add	r7, sp, #0
 8003598:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 80035ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80035d8:	f022 020c 	bic.w	r2, r2, #12
 80035dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	f040 8171 	bne.w	80038e8 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4ab4      	ldr	r2, [pc, #720]	; (80038dc <UART_SetConfig+0x34c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d005      	beq.n	800361c <UART_SetConfig+0x8c>
 8003610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4ab2      	ldr	r2, [pc, #712]	; (80038e0 <UART_SetConfig+0x350>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f040 80b1 	bne.w	800377e <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7ff fe74 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003620:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003626:	681d      	ldr	r5, [r3, #0]
 8003628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800362c:	4619      	mov	r1, r3
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	460b      	mov	r3, r1
 8003634:	4614      	mov	r4, r2
 8003636:	18db      	adds	r3, r3, r3
 8003638:	eb44 0404 	adc.w	r4, r4, r4
 800363c:	185b      	adds	r3, r3, r1
 800363e:	eb44 0402 	adc.w	r4, r4, r2
 8003642:	00e0      	lsls	r0, r4, #3
 8003644:	6478      	str	r0, [r7, #68]	; 0x44
 8003646:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003648:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800364c:	6478      	str	r0, [r7, #68]	; 0x44
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
 8003652:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003656:	eb13 0801 	adds.w	r8, r3, r1
 800365a:	eb44 0902 	adc.w	r9, r4, r2
 800365e:	4640      	mov	r0, r8
 8003660:	4649      	mov	r1, r9
 8003662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f04f 0400 	mov.w	r4, #0
 800366a:	18db      	adds	r3, r3, r3
 800366c:	eb44 0404 	adc.w	r4, r4, r4
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	f7fd f9f6 	bl	8000a64 <__aeabi_uldivmod>
 8003678:	4603      	mov	r3, r0
 800367a:	460c      	mov	r4, r1
 800367c:	461a      	mov	r2, r3
 800367e:	4b99      	ldr	r3, [pc, #612]	; (80038e4 <UART_SetConfig+0x354>)
 8003680:	fba3 2302 	umull	r2, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	011e      	lsls	r6, r3, #4
 8003688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800368c:	4619      	mov	r1, r3
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	460b      	mov	r3, r1
 8003694:	4614      	mov	r4, r2
 8003696:	18db      	adds	r3, r3, r3
 8003698:	eb44 0404 	adc.w	r4, r4, r4
 800369c:	185b      	adds	r3, r3, r1
 800369e:	eb44 0402 	adc.w	r4, r4, r2
 80036a2:	00e0      	lsls	r0, r4, #3
 80036a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80036a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036a8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80036ac:	63f8      	str	r0, [r7, #60]	; 0x3c
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80036b6:	eb13 0801 	adds.w	r8, r3, r1
 80036ba:	eb44 0902 	adc.w	r9, r4, r2
 80036be:	4640      	mov	r0, r8
 80036c0:	4649      	mov	r1, r9
 80036c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	18db      	adds	r3, r3, r3
 80036cc:	eb44 0404 	adc.w	r4, r4, r4
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	f7fd f9c6 	bl	8000a64 <__aeabi_uldivmod>
 80036d8:	4603      	mov	r3, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	461a      	mov	r2, r3
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <UART_SetConfig+0x354>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	3332      	adds	r3, #50	; 0x32
 80036f2:	4a7c      	ldr	r2, [pc, #496]	; (80038e4 <UART_SetConfig+0x354>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003700:	441e      	add	r6, r3
 8003702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003706:	4619      	mov	r1, r3
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	460b      	mov	r3, r1
 800370e:	4614      	mov	r4, r2
 8003710:	18db      	adds	r3, r3, r3
 8003712:	eb44 0404 	adc.w	r4, r4, r4
 8003716:	185b      	adds	r3, r3, r1
 8003718:	eb44 0402 	adc.w	r4, r4, r2
 800371c:	00e0      	lsls	r0, r4, #3
 800371e:	6378      	str	r0, [r7, #52]	; 0x34
 8003720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003722:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003726:	6378      	str	r0, [r7, #52]	; 0x34
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
 800372c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003730:	eb13 0801 	adds.w	r8, r3, r1
 8003734:	eb44 0902 	adc.w	r9, r4, r2
 8003738:	4640      	mov	r0, r8
 800373a:	4649      	mov	r1, r9
 800373c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	18db      	adds	r3, r3, r3
 8003746:	eb44 0404 	adc.w	r4, r4, r4
 800374a:	461a      	mov	r2, r3
 800374c:	4623      	mov	r3, r4
 800374e:	f7fd f989 	bl	8000a64 <__aeabi_uldivmod>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	461a      	mov	r2, r3
 8003758:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <UART_SetConfig+0x354>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <UART_SetConfig+0x354>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4433      	add	r3, r6
 800377a:	60ab      	str	r3, [r5, #8]
 800377c:	e240      	b.n	8003c00 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800377e:	f7ff fdaf 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8003782:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	673a      	str	r2, [r7, #112]	; 0x70
 800378c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003790:	4619      	mov	r1, r3
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	460b      	mov	r3, r1
 8003798:	4614      	mov	r4, r2
 800379a:	18db      	adds	r3, r3, r3
 800379c:	eb44 0404 	adc.w	r4, r4, r4
 80037a0:	185b      	adds	r3, r3, r1
 80037a2:	eb44 0402 	adc.w	r4, r4, r2
 80037a6:	00e0      	lsls	r0, r4, #3
 80037a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80037aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ac:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80037b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80037ba:	185d      	adds	r5, r3, r1
 80037bc:	eb44 0602 	adc.w	r6, r4, r2
 80037c0:	4628      	mov	r0, r5
 80037c2:	4631      	mov	r1, r6
 80037c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	18db      	adds	r3, r3, r3
 80037ce:	eb44 0404 	adc.w	r4, r4, r4
 80037d2:	461a      	mov	r2, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	f7fd f945 	bl	8000a64 <__aeabi_uldivmod>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	461a      	mov	r2, r3
 80037e0:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <UART_SetConfig+0x354>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	011e      	lsls	r6, r3, #4
 80037ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037ee:	4619      	mov	r1, r3
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	18db      	adds	r3, r3, r3
 80037fa:	eb44 0404 	adc.w	r4, r4, r4
 80037fe:	185b      	adds	r3, r3, r1
 8003800:	eb44 0402 	adc.w	r4, r4, r2
 8003804:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003808:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800380c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003810:	4653      	mov	r3, sl
 8003812:	465c      	mov	r4, fp
 8003814:	eb13 0a01 	adds.w	sl, r3, r1
 8003818:	eb44 0b02 	adc.w	fp, r4, r2
 800381c:	4650      	mov	r0, sl
 800381e:	4659      	mov	r1, fp
 8003820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	18db      	adds	r3, r3, r3
 800382a:	eb44 0404 	adc.w	r4, r4, r4
 800382e:	461a      	mov	r2, r3
 8003830:	4623      	mov	r3, r4
 8003832:	f7fd f917 	bl	8000a64 <__aeabi_uldivmod>
 8003836:	4603      	mov	r3, r0
 8003838:	460c      	mov	r4, r1
 800383a:	461a      	mov	r2, r3
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <UART_SetConfig+0x354>)
 800383e:	fba3 1302 	umull	r1, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2164      	movs	r1, #100	; 0x64
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <UART_SetConfig+0x354>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800385e:	441e      	add	r6, r3
 8003860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	18db      	adds	r3, r3, r3
 8003870:	eb44 0404 	adc.w	r4, r4, r4
 8003874:	185b      	adds	r3, r3, r1
 8003876:	eb44 0402 	adc.w	r4, r4, r2
 800387a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800387e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003882:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003886:	4643      	mov	r3, r8
 8003888:	464c      	mov	r4, r9
 800388a:	eb13 0801 	adds.w	r8, r3, r1
 800388e:	eb44 0902 	adc.w	r9, r4, r2
 8003892:	4640      	mov	r0, r8
 8003894:	4649      	mov	r1, r9
 8003896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f04f 0400 	mov.w	r4, #0
 800389e:	18db      	adds	r3, r3, r3
 80038a0:	eb44 0404 	adc.w	r4, r4, r4
 80038a4:	461a      	mov	r2, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	f7fd f8dc 	bl	8000a64 <__aeabi_uldivmod>
 80038ac:	4603      	mov	r3, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <UART_SetConfig+0x354>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <UART_SetConfig+0x354>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	4433      	add	r3, r6
 80038d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038d6:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80038d8:	e192      	b.n	8003c00 <UART_SetConfig+0x670>
 80038da:	bf00      	nop
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40011400 	.word	0x40011400
 80038e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4bc1      	ldr	r3, [pc, #772]	; (8003bf4 <UART_SetConfig+0x664>)
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d005      	beq.n	80038fe <UART_SetConfig+0x36e>
 80038f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4bc0      	ldr	r3, [pc, #768]	; (8003bf8 <UART_SetConfig+0x668>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f040 80bf 	bne.w	8003a7c <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fe:	f7ff fd03 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003902:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003908:	681e      	ldr	r6, [r3, #0]
 800390a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	460b      	mov	r3, r1
 8003916:	4614      	mov	r4, r2
 8003918:	18db      	adds	r3, r3, r3
 800391a:	eb44 0404 	adc.w	r4, r4, r4
 800391e:	185b      	adds	r3, r3, r1
 8003920:	eb44 0402 	adc.w	r4, r4, r2
 8003924:	00e0      	lsls	r0, r4, #3
 8003926:	6278      	str	r0, [r7, #36]	; 0x24
 8003928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003938:	eb13 0801 	adds.w	r8, r3, r1
 800393c:	eb44 0902 	adc.w	r9, r4, r2
 8003940:	4640      	mov	r0, r8
 8003942:	4649      	mov	r1, r9
 8003944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	00a2      	lsls	r2, r4, #2
 800394e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003952:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003956:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	65bb      	str	r3, [r7, #88]	; 0x58
 800395c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003960:	f7fd f880 	bl	8000a64 <__aeabi_uldivmod>
 8003964:	4603      	mov	r3, r0
 8003966:	460c      	mov	r4, r1
 8003968:	461a      	mov	r2, r3
 800396a:	4ba4      	ldr	r3, [pc, #656]	; (8003bfc <UART_SetConfig+0x66c>)
 800396c:	fba3 2302 	umull	r2, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	011d      	lsls	r5, r3, #4
 8003974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003978:	4619      	mov	r1, r3
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	460b      	mov	r3, r1
 8003980:	4614      	mov	r4, r2
 8003982:	18db      	adds	r3, r3, r3
 8003984:	eb44 0404 	adc.w	r4, r4, r4
 8003988:	185b      	adds	r3, r3, r1
 800398a:	eb44 0402 	adc.w	r4, r4, r2
 800398e:	00e0      	lsls	r0, r4, #3
 8003990:	61f8      	str	r0, [r7, #28]
 8003992:	69f8      	ldr	r0, [r7, #28]
 8003994:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003998:	61f8      	str	r0, [r7, #28]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80039a2:	eb13 0801 	adds.w	r8, r3, r1
 80039a6:	eb44 0902 	adc.w	r9, r4, r2
 80039aa:	4640      	mov	r0, r8
 80039ac:	4649      	mov	r1, r9
 80039ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f04f 0400 	mov.w	r4, #0
 80039b6:	00a2      	lsls	r2, r4, #2
 80039b8:	657a      	str	r2, [r7, #84]	; 0x54
 80039ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039bc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80039c0:	657a      	str	r2, [r7, #84]	; 0x54
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	653b      	str	r3, [r7, #80]	; 0x50
 80039c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ca:	f7fd f84b 	bl	8000a64 <__aeabi_uldivmod>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <UART_SetConfig+0x66c>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2164      	movs	r1, #100	; 0x64
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a84      	ldr	r2, [pc, #528]	; (8003bfc <UART_SetConfig+0x66c>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	441d      	add	r5, r3
 80039f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4614      	mov	r4, r2
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	eb44 0404 	adc.w	r4, r4, r4
 8003a0a:	185b      	adds	r3, r3, r1
 8003a0c:	eb44 0402 	adc.w	r4, r4, r2
 8003a10:	00e0      	lsls	r0, r4, #3
 8003a12:	6178      	str	r0, [r7, #20]
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003a1a:	6178      	str	r0, [r7, #20]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a24:	eb13 0801 	adds.w	r8, r3, r1
 8003a28:	eb44 0902 	adc.w	r9, r4, r2
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	4649      	mov	r1, r9
 8003a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f04f 0400 	mov.w	r4, #0
 8003a38:	00a2      	lsls	r2, r4, #2
 8003a3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a3e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003a42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	f7fd f80a 	bl	8000a64 <__aeabi_uldivmod>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b69      	ldr	r3, [pc, #420]	; (8003bfc <UART_SetConfig+0x66c>)
 8003a58:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	3332      	adds	r3, #50	; 0x32
 8003a6a:	4a64      	ldr	r2, [pc, #400]	; (8003bfc <UART_SetConfig+0x66c>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	442b      	add	r3, r5
 8003a78:	60b3      	str	r3, [r6, #8]
 8003a7a:	e0c1      	b.n	8003c00 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7ff fc30 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8003a80:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4614      	mov	r4, r2
 8003a98:	18db      	adds	r3, r3, r3
 8003a9a:	eb44 0404 	adc.w	r4, r4, r4
 8003a9e:	185b      	adds	r3, r3, r1
 8003aa0:	eb44 0402 	adc.w	r4, r4, r2
 8003aa4:	00e6      	lsls	r6, r4, #3
 8003aa6:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003aaa:	00dd      	lsls	r5, r3, #3
 8003aac:	462b      	mov	r3, r5
 8003aae:	4634      	mov	r4, r6
 8003ab0:	185d      	adds	r5, r3, r1
 8003ab2:	eb44 0602 	adc.w	r6, r4, r2
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	4631      	mov	r1, r6
 8003aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	00a5      	lsls	r5, r4, #2
 8003ac4:	677d      	str	r5, [r7, #116]	; 0x74
 8003ac6:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8003ac8:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003acc:	677d      	str	r5, [r7, #116]	; 0x74
 8003ace:	009c      	lsls	r4, r3, #2
 8003ad0:	673c      	str	r4, [r7, #112]	; 0x70
 8003ad2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ad6:	f7fc ffc5 	bl	8000a64 <__aeabi_uldivmod>
 8003ada:	4603      	mov	r3, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <UART_SetConfig+0x66c>)
 8003ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011d      	lsls	r5, r3, #4
 8003aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aee:	4619      	mov	r1, r3
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	18db      	adds	r3, r3, r3
 8003afa:	eb44 0404 	adc.w	r4, r4, r4
 8003afe:	185b      	adds	r3, r3, r1
 8003b00:	eb44 0402 	adc.w	r4, r4, r2
 8003b04:	00e0      	lsls	r0, r4, #3
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	00d8      	lsls	r0, r3, #3
 8003b12:	60b8      	str	r0, [r7, #8]
 8003b14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003b18:	eb13 0801 	adds.w	r8, r3, r1
 8003b1c:	eb44 0902 	adc.w	r9, r4, r2
 8003b20:	4640      	mov	r0, r8
 8003b22:	4649      	mov	r1, r9
 8003b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	00a6      	lsls	r6, r4, #2
 8003b2e:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003b30:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8003b32:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003b36:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003b38:	009c      	lsls	r4, r3, #2
 8003b3a:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b3c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b40:	f7fc ff90 	bl	8000a64 <__aeabi_uldivmod>
 8003b44:	4603      	mov	r3, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <UART_SetConfig+0x66c>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <UART_SetConfig+0x66c>)
 8003b60:	fba2 1303 	umull	r1, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	441d      	add	r5, r3
 8003b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b70:	4619      	mov	r1, r3
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	eb44 0404 	adc.w	r4, r4, r4
 8003b80:	185b      	adds	r3, r3, r1
 8003b82:	eb44 0402 	adc.w	r4, r4, r2
 8003b86:	00e0      	lsls	r0, r4, #3
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	00d8      	lsls	r0, r3, #3
 8003b94:	6038      	str	r0, [r7, #0]
 8003b96:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003b9a:	eb13 0801 	adds.w	r8, r3, r1
 8003b9e:	eb44 0902 	adc.w	r9, r4, r2
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f04f 0400 	mov.w	r4, #0
 8003bae:	00a6      	lsls	r6, r4, #2
 8003bb0:	667e      	str	r6, [r7, #100]	; 0x64
 8003bb2:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8003bb4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003bb8:	667e      	str	r6, [r7, #100]	; 0x64
 8003bba:	009c      	lsls	r4, r3, #2
 8003bbc:	663c      	str	r4, [r7, #96]	; 0x60
 8003bbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bc2:	f7fc ff4f 	bl	8000a64 <__aeabi_uldivmod>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <UART_SetConfig+0x66c>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <UART_SetConfig+0x66c>)
 8003be2:	fba2 1303 	umull	r1, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	442b      	add	r3, r5
 8003bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf0:	6093      	str	r3, [r2, #8]
}
 8003bf2:	e005      	b.n	8003c00 <UART_SetConfig+0x670>
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	51eb851f 	.word	0x51eb851f
 8003c00:	bf00      	nop
 8003c02:	378c      	adds	r7, #140	; 0x8c
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop

08003c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c12:	e003      	b.n	8003c1c <LoopCopyDataInit>

08003c14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c1a:	3104      	adds	r1, #4

08003c1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c24:	d3f6      	bcc.n	8003c14 <CopyDataInit>
  ldr  r2, =_sbss
 8003c26:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c28:	e002      	b.n	8003c30 <LoopFillZerobss>

08003c2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c2c:	f842 3b04 	str.w	r3, [r2], #4

08003c30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c34:	d3f9      	bcc.n	8003c2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c36:	f7fd fc65 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f000 f81f 	bl	8003c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3e:	f7fd f9df 	bl	8001000 <main>
  bx  lr    
 8003c42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c44:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003c48:	08004604 	.word	0x08004604
  ldr  r0, =_sdata
 8003c4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c50:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003c54:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003c58:	2000016c 	.word	0x2000016c

08003c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <ADC_IRQHandler>
	...

08003c60 <calloc>:
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <calloc+0xc>)
 8003c62:	460a      	mov	r2, r1
 8003c64:	4601      	mov	r1, r0
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f000 b83c 	b.w	8003ce4 <_calloc_r>
 8003c6c:	2000000c 	.word	0x2000000c

08003c70 <__errno>:
 8003c70:	4b01      	ldr	r3, [pc, #4]	; (8003c78 <__errno+0x8>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000000c 	.word	0x2000000c

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4e0d      	ldr	r6, [pc, #52]	; (8003cb4 <__libc_init_array+0x38>)
 8003c80:	4c0d      	ldr	r4, [pc, #52]	; (8003cb8 <__libc_init_array+0x3c>)
 8003c82:	1ba4      	subs	r4, r4, r6
 8003c84:	10a4      	asrs	r4, r4, #2
 8003c86:	2500      	movs	r5, #0
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	4e0b      	ldr	r6, [pc, #44]	; (8003cbc <__libc_init_array+0x40>)
 8003c8e:	4c0c      	ldr	r4, [pc, #48]	; (8003cc0 <__libc_init_array+0x44>)
 8003c90:	f000 fc5a 	bl	8004548 <_init>
 8003c94:	1ba4      	subs	r4, r4, r6
 8003c96:	10a4      	asrs	r4, r4, #2
 8003c98:	2500      	movs	r5, #0
 8003c9a:	42a5      	cmp	r5, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca4:	4798      	blx	r3
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cae:	4798      	blx	r3
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	080045fc 	.word	0x080045fc
 8003cb8:	080045fc 	.word	0x080045fc
 8003cbc:	080045fc 	.word	0x080045fc
 8003cc0:	08004600 	.word	0x08004600

08003cc4 <malloc>:
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <malloc+0xc>)
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f000 b867 	b.w	8003d9c <_malloc_r>
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <memset>:
 8003cd4:	4402      	add	r2, r0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <_calloc_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	fb02 f401 	mul.w	r4, r2, r1
 8003cea:	4621      	mov	r1, r4
 8003cec:	f000 f856 	bl	8003d9c <_malloc_r>
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	b118      	cbz	r0, 8003cfc <_calloc_r+0x18>
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f7ff ffec 	bl	8003cd4 <memset>
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d045      	beq.n	8003d94 <_free_r+0x94>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f000 f8dc 	bl	8003ed0 <__malloc_lock>
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <_free_r+0x98>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	b933      	cbnz	r3, 8003d2e <_free_r+0x2e>
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6014      	str	r4, [r2, #0]
 8003d24:	4628      	mov	r0, r5
 8003d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2a:	f000 b8d2 	b.w	8003ed2 <__malloc_unlock>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d90c      	bls.n	8003d4c <_free_r+0x4c>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1862      	adds	r2, r4, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf04      	itt	eq
 8003d3a:	681a      	ldreq	r2, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	bf04      	itt	eq
 8003d42:	1852      	addeq	r2, r2, r1
 8003d44:	6022      	streq	r2, [r4, #0]
 8003d46:	6004      	str	r4, [r0, #0]
 8003d48:	e7ec      	b.n	8003d24 <_free_r+0x24>
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	b10a      	cbz	r2, 8003d54 <_free_r+0x54>
 8003d50:	42a2      	cmp	r2, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x4a>
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	1858      	adds	r0, r3, r1
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x74>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	4401      	add	r1, r0
 8003d60:	1858      	adds	r0, r3, r1
 8003d62:	4282      	cmp	r2, r0
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	d1dd      	bne.n	8003d24 <_free_r+0x24>
 8003d68:	6810      	ldr	r0, [r2, #0]
 8003d6a:	6852      	ldr	r2, [r2, #4]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	4401      	add	r1, r0
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	e7d7      	b.n	8003d24 <_free_r+0x24>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x7c>
 8003d76:	230c      	movs	r3, #12
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	e7d3      	b.n	8003d24 <_free_r+0x24>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428a      	cmp	r2, r1
 8003d82:	bf04      	itt	eq
 8003d84:	6811      	ldreq	r1, [r2, #0]
 8003d86:	6852      	ldreq	r2, [r2, #4]
 8003d88:	6062      	str	r2, [r4, #4]
 8003d8a:	bf04      	itt	eq
 8003d8c:	1809      	addeq	r1, r1, r0
 8003d8e:	6021      	streq	r1, [r4, #0]
 8003d90:	605c      	str	r4, [r3, #4]
 8003d92:	e7c7      	b.n	8003d24 <_free_r+0x24>
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop
 8003d98:	20000090 	.word	0x20000090

08003d9c <_malloc_r>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	1ccd      	adds	r5, r1, #3
 8003da0:	f025 0503 	bic.w	r5, r5, #3
 8003da4:	3508      	adds	r5, #8
 8003da6:	2d0c      	cmp	r5, #12
 8003da8:	bf38      	it	cc
 8003daa:	250c      	movcc	r5, #12
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	4606      	mov	r6, r0
 8003db0:	db01      	blt.n	8003db6 <_malloc_r+0x1a>
 8003db2:	42a9      	cmp	r1, r5
 8003db4:	d903      	bls.n	8003dbe <_malloc_r+0x22>
 8003db6:	230c      	movs	r3, #12
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	f000 f887 	bl	8003ed0 <__malloc_lock>
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <_malloc_r+0xb4>)
 8003dc4:	6814      	ldr	r4, [r2, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	b991      	cbnz	r1, 8003df0 <_malloc_r+0x54>
 8003dca:	4c22      	ldr	r4, [pc, #136]	; (8003e54 <_malloc_r+0xb8>)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	b91b      	cbnz	r3, 8003dd8 <_malloc_r+0x3c>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f841 	bl	8003e58 <_sbrk_r>
 8003dd6:	6020      	str	r0, [r4, #0]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f83c 	bl	8003e58 <_sbrk_r>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d126      	bne.n	8003e32 <_malloc_r+0x96>
 8003de4:	230c      	movs	r3, #12
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 f872 	bl	8003ed2 <__malloc_unlock>
 8003dee:	e7e4      	b.n	8003dba <_malloc_r+0x1e>
 8003df0:	680b      	ldr	r3, [r1, #0]
 8003df2:	1b5b      	subs	r3, r3, r5
 8003df4:	d41a      	bmi.n	8003e2c <_malloc_r+0x90>
 8003df6:	2b0b      	cmp	r3, #11
 8003df8:	d90f      	bls.n	8003e1a <_malloc_r+0x7e>
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	50cd      	str	r5, [r1, r3]
 8003dfe:	18cc      	adds	r4, r1, r3
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 f866 	bl	8003ed2 <__malloc_unlock>
 8003e06:	f104 000b 	add.w	r0, r4, #11
 8003e0a:	1d23      	adds	r3, r4, #4
 8003e0c:	f020 0007 	bic.w	r0, r0, #7
 8003e10:	1ac3      	subs	r3, r0, r3
 8003e12:	d01b      	beq.n	8003e4c <_malloc_r+0xb0>
 8003e14:	425a      	negs	r2, r3
 8003e16:	50e2      	str	r2, [r4, r3]
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	428c      	cmp	r4, r1
 8003e1c:	bf0d      	iteet	eq
 8003e1e:	6863      	ldreq	r3, [r4, #4]
 8003e20:	684b      	ldrne	r3, [r1, #4]
 8003e22:	6063      	strne	r3, [r4, #4]
 8003e24:	6013      	streq	r3, [r2, #0]
 8003e26:	bf18      	it	ne
 8003e28:	460c      	movne	r4, r1
 8003e2a:	e7e9      	b.n	8003e00 <_malloc_r+0x64>
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	6849      	ldr	r1, [r1, #4]
 8003e30:	e7ca      	b.n	8003dc8 <_malloc_r+0x2c>
 8003e32:	1cc4      	adds	r4, r0, #3
 8003e34:	f024 0403 	bic.w	r4, r4, #3
 8003e38:	42a0      	cmp	r0, r4
 8003e3a:	d005      	beq.n	8003e48 <_malloc_r+0xac>
 8003e3c:	1a21      	subs	r1, r4, r0
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f000 f80a 	bl	8003e58 <_sbrk_r>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d0cd      	beq.n	8003de4 <_malloc_r+0x48>
 8003e48:	6025      	str	r5, [r4, #0]
 8003e4a:	e7d9      	b.n	8003e00 <_malloc_r+0x64>
 8003e4c:	bd70      	pop	{r4, r5, r6, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000090 	.word	0x20000090
 8003e54:	20000094 	.word	0x20000094

08003e58 <_sbrk_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4c06      	ldr	r4, [pc, #24]	; (8003e74 <_sbrk_r+0x1c>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	f7fd fb22 	bl	80014ac <_sbrk>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_sbrk_r+0x1a>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_sbrk_r+0x1a>
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	20000168 	.word	0x20000168

08003e78 <siprintf>:
 8003e78:	b40e      	push	{r1, r2, r3}
 8003e7a:	b500      	push	{lr}
 8003e7c:	b09c      	sub	sp, #112	; 0x70
 8003e7e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003e82:	ab1d      	add	r3, sp, #116	; 0x74
 8003e84:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003e88:	9002      	str	r0, [sp, #8]
 8003e8a:	9006      	str	r0, [sp, #24]
 8003e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <siprintf+0x44>)
 8003e92:	9104      	str	r1, [sp, #16]
 8003e94:	9107      	str	r1, [sp, #28]
 8003e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e9e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	a902      	add	r1, sp, #8
 8003ea8:	f000 f870 	bl	8003f8c <_svfiprintf_r>
 8003eac:	9b02      	ldr	r3, [sp, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	b01c      	add	sp, #112	; 0x70
 8003eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb8:	b003      	add	sp, #12
 8003eba:	4770      	bx	lr
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <strcpy>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ec6:	f803 2b01 	strb.w	r2, [r3], #1
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d1f9      	bne.n	8003ec2 <strcpy+0x2>
 8003ece:	4770      	bx	lr

08003ed0 <__malloc_lock>:
 8003ed0:	4770      	bx	lr

08003ed2 <__malloc_unlock>:
 8003ed2:	4770      	bx	lr

08003ed4 <__ssputs_r>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	688e      	ldr	r6, [r1, #8]
 8003eda:	429e      	cmp	r6, r3
 8003edc:	4682      	mov	sl, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	4698      	mov	r8, r3
 8003ee4:	d835      	bhi.n	8003f52 <__ssputs_r+0x7e>
 8003ee6:	898a      	ldrh	r2, [r1, #12]
 8003ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eec:	d031      	beq.n	8003f52 <__ssputs_r+0x7e>
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	6909      	ldr	r1, [r1, #16]
 8003ef2:	1a6f      	subs	r7, r5, r1
 8003ef4:	6965      	ldr	r5, [r4, #20]
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003efc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f00:	f108 0301 	add.w	r3, r8, #1
 8003f04:	443b      	add	r3, r7
 8003f06:	429d      	cmp	r5, r3
 8003f08:	bf38      	it	cc
 8003f0a:	461d      	movcc	r5, r3
 8003f0c:	0553      	lsls	r3, r2, #21
 8003f0e:	d531      	bpl.n	8003f74 <__ssputs_r+0xa0>
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7ff ff43 	bl	8003d9c <_malloc_r>
 8003f16:	4606      	mov	r6, r0
 8003f18:	b950      	cbnz	r0, 8003f30 <__ssputs_r+0x5c>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	f8ca 3000 	str.w	r3, [sl]
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	463a      	mov	r2, r7
 8003f32:	6921      	ldr	r1, [r4, #16]
 8003f34:	f000 fab4 	bl	80044a0 <memcpy>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	6126      	str	r6, [r4, #16]
 8003f46:	6165      	str	r5, [r4, #20]
 8003f48:	443e      	add	r6, r7
 8003f4a:	1bed      	subs	r5, r5, r7
 8003f4c:	6026      	str	r6, [r4, #0]
 8003f4e:	60a5      	str	r5, [r4, #8]
 8003f50:	4646      	mov	r6, r8
 8003f52:	4546      	cmp	r6, r8
 8003f54:	bf28      	it	cs
 8003f56:	4646      	movcs	r6, r8
 8003f58:	4632      	mov	r2, r6
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	f000 faaa 	bl	80044b6 <memmove>
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	1b9b      	subs	r3, r3, r6
 8003f66:	60a3      	str	r3, [r4, #8]
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	441e      	add	r6, r3
 8003f6c:	6026      	str	r6, [r4, #0]
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	462a      	mov	r2, r5
 8003f76:	f000 fab8 	bl	80044ea <_realloc_r>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1e1      	bne.n	8003f44 <__ssputs_r+0x70>
 8003f80:	6921      	ldr	r1, [r4, #16]
 8003f82:	4650      	mov	r0, sl
 8003f84:	f7ff febc 	bl	8003d00 <_free_r>
 8003f88:	e7c7      	b.n	8003f1a <__ssputs_r+0x46>
	...

08003f8c <_svfiprintf_r>:
 8003f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f90:	b09d      	sub	sp, #116	; 0x74
 8003f92:	4680      	mov	r8, r0
 8003f94:	9303      	str	r3, [sp, #12]
 8003f96:	898b      	ldrh	r3, [r1, #12]
 8003f98:	061c      	lsls	r4, r3, #24
 8003f9a:	460d      	mov	r5, r1
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	d50f      	bpl.n	8003fc0 <_svfiprintf_r+0x34>
 8003fa0:	690b      	ldr	r3, [r1, #16]
 8003fa2:	b96b      	cbnz	r3, 8003fc0 <_svfiprintf_r+0x34>
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	f7ff fef9 	bl	8003d9c <_malloc_r>
 8003faa:	6028      	str	r0, [r5, #0]
 8003fac:	6128      	str	r0, [r5, #16]
 8003fae:	b928      	cbnz	r0, 8003fbc <_svfiprintf_r+0x30>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	f8c8 3000 	str.w	r3, [r8]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fba:	e0c5      	b.n	8004148 <_svfiprintf_r+0x1bc>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	616b      	str	r3, [r5, #20]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fca:	2330      	movs	r3, #48	; 0x30
 8003fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd0:	f04f 0b01 	mov.w	fp, #1
 8003fd4:	4637      	mov	r7, r6
 8003fd6:	463c      	mov	r4, r7
 8003fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d13c      	bne.n	800405a <_svfiprintf_r+0xce>
 8003fe0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fe4:	d00b      	beq.n	8003ffe <_svfiprintf_r+0x72>
 8003fe6:	4653      	mov	r3, sl
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4629      	mov	r1, r5
 8003fec:	4640      	mov	r0, r8
 8003fee:	f7ff ff71 	bl	8003ed4 <__ssputs_r>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f000 80a3 	beq.w	800413e <_svfiprintf_r+0x1b2>
 8003ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffa:	4453      	add	r3, sl
 8003ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffe:	783b      	ldrb	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 809c 	beq.w	800413e <_svfiprintf_r+0x1b2>
 8004006:	2300      	movs	r3, #0
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	9205      	str	r2, [sp, #20]
 8004012:	9306      	str	r3, [sp, #24]
 8004014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004018:	931a      	str	r3, [sp, #104]	; 0x68
 800401a:	2205      	movs	r2, #5
 800401c:	7821      	ldrb	r1, [r4, #0]
 800401e:	4850      	ldr	r0, [pc, #320]	; (8004160 <_svfiprintf_r+0x1d4>)
 8004020:	f7fc f8e6 	bl	80001f0 <memchr>
 8004024:	1c67      	adds	r7, r4, #1
 8004026:	9b04      	ldr	r3, [sp, #16]
 8004028:	b9d8      	cbnz	r0, 8004062 <_svfiprintf_r+0xd6>
 800402a:	06d9      	lsls	r1, r3, #27
 800402c:	bf44      	itt	mi
 800402e:	2220      	movmi	r2, #32
 8004030:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004034:	071a      	lsls	r2, r3, #28
 8004036:	bf44      	itt	mi
 8004038:	222b      	movmi	r2, #43	; 0x2b
 800403a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800403e:	7822      	ldrb	r2, [r4, #0]
 8004040:	2a2a      	cmp	r2, #42	; 0x2a
 8004042:	d016      	beq.n	8004072 <_svfiprintf_r+0xe6>
 8004044:	9a07      	ldr	r2, [sp, #28]
 8004046:	2100      	movs	r1, #0
 8004048:	200a      	movs	r0, #10
 800404a:	4627      	mov	r7, r4
 800404c:	3401      	adds	r4, #1
 800404e:	783b      	ldrb	r3, [r7, #0]
 8004050:	3b30      	subs	r3, #48	; 0x30
 8004052:	2b09      	cmp	r3, #9
 8004054:	d951      	bls.n	80040fa <_svfiprintf_r+0x16e>
 8004056:	b1c9      	cbz	r1, 800408c <_svfiprintf_r+0x100>
 8004058:	e011      	b.n	800407e <_svfiprintf_r+0xf2>
 800405a:	2b25      	cmp	r3, #37	; 0x25
 800405c:	d0c0      	beq.n	8003fe0 <_svfiprintf_r+0x54>
 800405e:	4627      	mov	r7, r4
 8004060:	e7b9      	b.n	8003fd6 <_svfiprintf_r+0x4a>
 8004062:	4a3f      	ldr	r2, [pc, #252]	; (8004160 <_svfiprintf_r+0x1d4>)
 8004064:	1a80      	subs	r0, r0, r2
 8004066:	fa0b f000 	lsl.w	r0, fp, r0
 800406a:	4318      	orrs	r0, r3
 800406c:	9004      	str	r0, [sp, #16]
 800406e:	463c      	mov	r4, r7
 8004070:	e7d3      	b.n	800401a <_svfiprintf_r+0x8e>
 8004072:	9a03      	ldr	r2, [sp, #12]
 8004074:	1d11      	adds	r1, r2, #4
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	9103      	str	r1, [sp, #12]
 800407a:	2a00      	cmp	r2, #0
 800407c:	db01      	blt.n	8004082 <_svfiprintf_r+0xf6>
 800407e:	9207      	str	r2, [sp, #28]
 8004080:	e004      	b.n	800408c <_svfiprintf_r+0x100>
 8004082:	4252      	negs	r2, r2
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	9207      	str	r2, [sp, #28]
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	783b      	ldrb	r3, [r7, #0]
 800408e:	2b2e      	cmp	r3, #46	; 0x2e
 8004090:	d10e      	bne.n	80040b0 <_svfiprintf_r+0x124>
 8004092:	787b      	ldrb	r3, [r7, #1]
 8004094:	2b2a      	cmp	r3, #42	; 0x2a
 8004096:	f107 0101 	add.w	r1, r7, #1
 800409a:	d132      	bne.n	8004102 <_svfiprintf_r+0x176>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	9203      	str	r2, [sp, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfb8      	it	lt
 80040a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ac:	3702      	adds	r7, #2
 80040ae:	9305      	str	r3, [sp, #20]
 80040b0:	4c2c      	ldr	r4, [pc, #176]	; (8004164 <_svfiprintf_r+0x1d8>)
 80040b2:	7839      	ldrb	r1, [r7, #0]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7fc f89a 	bl	80001f0 <memchr>
 80040bc:	b138      	cbz	r0, 80040ce <_svfiprintf_r+0x142>
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	1b00      	subs	r0, r0, r4
 80040c2:	fa03 f000 	lsl.w	r0, r3, r0
 80040c6:	9b04      	ldr	r3, [sp, #16]
 80040c8:	4303      	orrs	r3, r0
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	3701      	adds	r7, #1
 80040ce:	7839      	ldrb	r1, [r7, #0]
 80040d0:	4825      	ldr	r0, [pc, #148]	; (8004168 <_svfiprintf_r+0x1dc>)
 80040d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d6:	2206      	movs	r2, #6
 80040d8:	1c7e      	adds	r6, r7, #1
 80040da:	f7fc f889 	bl	80001f0 <memchr>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d035      	beq.n	800414e <_svfiprintf_r+0x1c2>
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <_svfiprintf_r+0x1e0>)
 80040e4:	b9fb      	cbnz	r3, 8004126 <_svfiprintf_r+0x19a>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	3307      	adds	r3, #7
 80040ea:	f023 0307 	bic.w	r3, r3, #7
 80040ee:	3308      	adds	r3, #8
 80040f0:	9303      	str	r3, [sp, #12]
 80040f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f4:	444b      	add	r3, r9
 80040f6:	9309      	str	r3, [sp, #36]	; 0x24
 80040f8:	e76c      	b.n	8003fd4 <_svfiprintf_r+0x48>
 80040fa:	fb00 3202 	mla	r2, r0, r2, r3
 80040fe:	2101      	movs	r1, #1
 8004100:	e7a3      	b.n	800404a <_svfiprintf_r+0xbe>
 8004102:	2300      	movs	r3, #0
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	4618      	mov	r0, r3
 8004108:	240a      	movs	r4, #10
 800410a:	460f      	mov	r7, r1
 800410c:	3101      	adds	r1, #1
 800410e:	783a      	ldrb	r2, [r7, #0]
 8004110:	3a30      	subs	r2, #48	; 0x30
 8004112:	2a09      	cmp	r2, #9
 8004114:	d903      	bls.n	800411e <_svfiprintf_r+0x192>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ca      	beq.n	80040b0 <_svfiprintf_r+0x124>
 800411a:	9005      	str	r0, [sp, #20]
 800411c:	e7c8      	b.n	80040b0 <_svfiprintf_r+0x124>
 800411e:	fb04 2000 	mla	r0, r4, r0, r2
 8004122:	2301      	movs	r3, #1
 8004124:	e7f1      	b.n	800410a <_svfiprintf_r+0x17e>
 8004126:	ab03      	add	r3, sp, #12
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462a      	mov	r2, r5
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <_svfiprintf_r+0x1e4>)
 800412e:	a904      	add	r1, sp, #16
 8004130:	4640      	mov	r0, r8
 8004132:	f3af 8000 	nop.w
 8004136:	f1b0 3fff 	cmp.w	r0, #4294967295
 800413a:	4681      	mov	r9, r0
 800413c:	d1d9      	bne.n	80040f2 <_svfiprintf_r+0x166>
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	065b      	lsls	r3, r3, #25
 8004142:	f53f af38 	bmi.w	8003fb6 <_svfiprintf_r+0x2a>
 8004146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004148:	b01d      	add	sp, #116	; 0x74
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	ab03      	add	r3, sp, #12
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	462a      	mov	r2, r5
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <_svfiprintf_r+0x1e4>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	4640      	mov	r0, r8
 800415a:	f000 f881 	bl	8004260 <_printf_i>
 800415e:	e7ea      	b.n	8004136 <_svfiprintf_r+0x1aa>
 8004160:	080045c0 	.word	0x080045c0
 8004164:	080045c6 	.word	0x080045c6
 8004168:	080045ca 	.word	0x080045ca
 800416c:	00000000 	.word	0x00000000
 8004170:	08003ed5 	.word	0x08003ed5

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4691      	mov	r9, r2
 800417a:	461f      	mov	r7, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004184:	4293      	cmp	r3, r2
 8004186:	bfb8      	it	lt
 8004188:	4613      	movlt	r3, r2
 800418a:	f8c9 3000 	str.w	r3, [r9]
 800418e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004192:	4606      	mov	r6, r0
 8004194:	460c      	mov	r4, r1
 8004196:	b112      	cbz	r2, 800419e <_printf_common+0x2a>
 8004198:	3301      	adds	r3, #1
 800419a:	f8c9 3000 	str.w	r3, [r9]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0699      	lsls	r1, r3, #26
 80041a2:	bf42      	ittt	mi
 80041a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041a8:	3302      	addmi	r3, #2
 80041aa:	f8c9 3000 	strmi.w	r3, [r9]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	f015 0506 	ands.w	r5, r5, #6
 80041b4:	d107      	bne.n	80041c6 <_printf_common+0x52>
 80041b6:	f104 0a19 	add.w	sl, r4, #25
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	f8d9 2000 	ldr.w	r2, [r9]
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	429d      	cmp	r5, r3
 80041c4:	db29      	blt.n	800421a <_printf_common+0xa6>
 80041c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	3300      	adds	r3, #0
 80041ce:	bf18      	it	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	0692      	lsls	r2, r2, #26
 80041d4:	d42e      	bmi.n	8004234 <_printf_common+0xc0>
 80041d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041da:	4639      	mov	r1, r7
 80041dc:	4630      	mov	r0, r6
 80041de:	47c0      	blx	r8
 80041e0:	3001      	adds	r0, #1
 80041e2:	d021      	beq.n	8004228 <_printf_common+0xb4>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	68e5      	ldr	r5, [r4, #12]
 80041e8:	f8d9 2000 	ldr.w	r2, [r9]
 80041ec:	f003 0306 	and.w	r3, r3, #6
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	bf08      	it	eq
 80041f4:	1aad      	subeq	r5, r5, r2
 80041f6:	68a3      	ldr	r3, [r4, #8]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	bf0c      	ite	eq
 80041fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004200:	2500      	movne	r5, #0
 8004202:	4293      	cmp	r3, r2
 8004204:	bfc4      	itt	gt
 8004206:	1a9b      	subgt	r3, r3, r2
 8004208:	18ed      	addgt	r5, r5, r3
 800420a:	f04f 0900 	mov.w	r9, #0
 800420e:	341a      	adds	r4, #26
 8004210:	454d      	cmp	r5, r9
 8004212:	d11b      	bne.n	800424c <_printf_common+0xd8>
 8004214:	2000      	movs	r0, #0
 8004216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421a:	2301      	movs	r3, #1
 800421c:	4652      	mov	r2, sl
 800421e:	4639      	mov	r1, r7
 8004220:	4630      	mov	r0, r6
 8004222:	47c0      	blx	r8
 8004224:	3001      	adds	r0, #1
 8004226:	d103      	bne.n	8004230 <_printf_common+0xbc>
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004230:	3501      	adds	r5, #1
 8004232:	e7c2      	b.n	80041ba <_printf_common+0x46>
 8004234:	18e1      	adds	r1, r4, r3
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	2030      	movs	r0, #48	; 0x30
 800423a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800423e:	4422      	add	r2, r4
 8004240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004248:	3302      	adds	r3, #2
 800424a:	e7c4      	b.n	80041d6 <_printf_common+0x62>
 800424c:	2301      	movs	r3, #1
 800424e:	4622      	mov	r2, r4
 8004250:	4639      	mov	r1, r7
 8004252:	4630      	mov	r0, r6
 8004254:	47c0      	blx	r8
 8004256:	3001      	adds	r0, #1
 8004258:	d0e6      	beq.n	8004228 <_printf_common+0xb4>
 800425a:	f109 0901 	add.w	r9, r9, #1
 800425e:	e7d7      	b.n	8004210 <_printf_common+0x9c>

08004260 <_printf_i>:
 8004260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004264:	4617      	mov	r7, r2
 8004266:	7e0a      	ldrb	r2, [r1, #24]
 8004268:	b085      	sub	sp, #20
 800426a:	2a6e      	cmp	r2, #110	; 0x6e
 800426c:	4698      	mov	r8, r3
 800426e:	4606      	mov	r6, r0
 8004270:	460c      	mov	r4, r1
 8004272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004274:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004278:	f000 80bc 	beq.w	80043f4 <_printf_i+0x194>
 800427c:	d81a      	bhi.n	80042b4 <_printf_i+0x54>
 800427e:	2a63      	cmp	r2, #99	; 0x63
 8004280:	d02e      	beq.n	80042e0 <_printf_i+0x80>
 8004282:	d80a      	bhi.n	800429a <_printf_i+0x3a>
 8004284:	2a00      	cmp	r2, #0
 8004286:	f000 80c8 	beq.w	800441a <_printf_i+0x1ba>
 800428a:	2a58      	cmp	r2, #88	; 0x58
 800428c:	f000 808a 	beq.w	80043a4 <_printf_i+0x144>
 8004290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004294:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004298:	e02a      	b.n	80042f0 <_printf_i+0x90>
 800429a:	2a64      	cmp	r2, #100	; 0x64
 800429c:	d001      	beq.n	80042a2 <_printf_i+0x42>
 800429e:	2a69      	cmp	r2, #105	; 0x69
 80042a0:	d1f6      	bne.n	8004290 <_printf_i+0x30>
 80042a2:	6821      	ldr	r1, [r4, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80042aa:	d023      	beq.n	80042f4 <_printf_i+0x94>
 80042ac:	1d11      	adds	r1, r2, #4
 80042ae:	6019      	str	r1, [r3, #0]
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	e027      	b.n	8004304 <_printf_i+0xa4>
 80042b4:	2a73      	cmp	r2, #115	; 0x73
 80042b6:	f000 80b4 	beq.w	8004422 <_printf_i+0x1c2>
 80042ba:	d808      	bhi.n	80042ce <_printf_i+0x6e>
 80042bc:	2a6f      	cmp	r2, #111	; 0x6f
 80042be:	d02a      	beq.n	8004316 <_printf_i+0xb6>
 80042c0:	2a70      	cmp	r2, #112	; 0x70
 80042c2:	d1e5      	bne.n	8004290 <_printf_i+0x30>
 80042c4:	680a      	ldr	r2, [r1, #0]
 80042c6:	f042 0220 	orr.w	r2, r2, #32
 80042ca:	600a      	str	r2, [r1, #0]
 80042cc:	e003      	b.n	80042d6 <_printf_i+0x76>
 80042ce:	2a75      	cmp	r2, #117	; 0x75
 80042d0:	d021      	beq.n	8004316 <_printf_i+0xb6>
 80042d2:	2a78      	cmp	r2, #120	; 0x78
 80042d4:	d1dc      	bne.n	8004290 <_printf_i+0x30>
 80042d6:	2278      	movs	r2, #120	; 0x78
 80042d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80042dc:	496e      	ldr	r1, [pc, #440]	; (8004498 <_printf_i+0x238>)
 80042de:	e064      	b.n	80043aa <_printf_i+0x14a>
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80042e6:	1d11      	adds	r1, r2, #4
 80042e8:	6019      	str	r1, [r3, #0]
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0a3      	b.n	800443c <_printf_i+0x1dc>
 80042f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042f8:	f102 0104 	add.w	r1, r2, #4
 80042fc:	6019      	str	r1, [r3, #0]
 80042fe:	d0d7      	beq.n	80042b0 <_printf_i+0x50>
 8004300:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da03      	bge.n	8004310 <_printf_i+0xb0>
 8004308:	222d      	movs	r2, #45	; 0x2d
 800430a:	425b      	negs	r3, r3
 800430c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004310:	4962      	ldr	r1, [pc, #392]	; (800449c <_printf_i+0x23c>)
 8004312:	220a      	movs	r2, #10
 8004314:	e017      	b.n	8004346 <_printf_i+0xe6>
 8004316:	6820      	ldr	r0, [r4, #0]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800431e:	d003      	beq.n	8004328 <_printf_i+0xc8>
 8004320:	1d08      	adds	r0, r1, #4
 8004322:	6018      	str	r0, [r3, #0]
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	e006      	b.n	8004336 <_printf_i+0xd6>
 8004328:	f010 0f40 	tst.w	r0, #64	; 0x40
 800432c:	f101 0004 	add.w	r0, r1, #4
 8004330:	6018      	str	r0, [r3, #0]
 8004332:	d0f7      	beq.n	8004324 <_printf_i+0xc4>
 8004334:	880b      	ldrh	r3, [r1, #0]
 8004336:	4959      	ldr	r1, [pc, #356]	; (800449c <_printf_i+0x23c>)
 8004338:	2a6f      	cmp	r2, #111	; 0x6f
 800433a:	bf14      	ite	ne
 800433c:	220a      	movne	r2, #10
 800433e:	2208      	moveq	r2, #8
 8004340:	2000      	movs	r0, #0
 8004342:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004346:	6865      	ldr	r5, [r4, #4]
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	2d00      	cmp	r5, #0
 800434c:	f2c0 809c 	blt.w	8004488 <_printf_i+0x228>
 8004350:	6820      	ldr	r0, [r4, #0]
 8004352:	f020 0004 	bic.w	r0, r0, #4
 8004356:	6020      	str	r0, [r4, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d13f      	bne.n	80043dc <_printf_i+0x17c>
 800435c:	2d00      	cmp	r5, #0
 800435e:	f040 8095 	bne.w	800448c <_printf_i+0x22c>
 8004362:	4675      	mov	r5, lr
 8004364:	2a08      	cmp	r2, #8
 8004366:	d10b      	bne.n	8004380 <_printf_i+0x120>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	07da      	lsls	r2, r3, #31
 800436c:	d508      	bpl.n	8004380 <_printf_i+0x120>
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	6862      	ldr	r2, [r4, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	bfde      	ittt	le
 8004376:	2330      	movle	r3, #48	; 0x30
 8004378:	f805 3c01 	strble.w	r3, [r5, #-1]
 800437c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004380:	ebae 0305 	sub.w	r3, lr, r5
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	f8cd 8000 	str.w	r8, [sp]
 800438a:	463b      	mov	r3, r7
 800438c:	aa03      	add	r2, sp, #12
 800438e:	4621      	mov	r1, r4
 8004390:	4630      	mov	r0, r6
 8004392:	f7ff feef 	bl	8004174 <_printf_common>
 8004396:	3001      	adds	r0, #1
 8004398:	d155      	bne.n	8004446 <_printf_i+0x1e6>
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	b005      	add	sp, #20
 80043a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80043a8:	493c      	ldr	r1, [pc, #240]	; (800449c <_printf_i+0x23c>)
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80043b2:	f100 0504 	add.w	r5, r0, #4
 80043b6:	601d      	str	r5, [r3, #0]
 80043b8:	d001      	beq.n	80043be <_printf_i+0x15e>
 80043ba:	6803      	ldr	r3, [r0, #0]
 80043bc:	e002      	b.n	80043c4 <_printf_i+0x164>
 80043be:	0655      	lsls	r5, r2, #25
 80043c0:	d5fb      	bpl.n	80043ba <_printf_i+0x15a>
 80043c2:	8803      	ldrh	r3, [r0, #0]
 80043c4:	07d0      	lsls	r0, r2, #31
 80043c6:	bf44      	itt	mi
 80043c8:	f042 0220 	orrmi.w	r2, r2, #32
 80043cc:	6022      	strmi	r2, [r4, #0]
 80043ce:	b91b      	cbnz	r3, 80043d8 <_printf_i+0x178>
 80043d0:	6822      	ldr	r2, [r4, #0]
 80043d2:	f022 0220 	bic.w	r2, r2, #32
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	2210      	movs	r2, #16
 80043da:	e7b1      	b.n	8004340 <_printf_i+0xe0>
 80043dc:	4675      	mov	r5, lr
 80043de:	fbb3 f0f2 	udiv	r0, r3, r2
 80043e2:	fb02 3310 	mls	r3, r2, r0, r3
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043ec:	4603      	mov	r3, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d1f5      	bne.n	80043de <_printf_i+0x17e>
 80043f2:	e7b7      	b.n	8004364 <_printf_i+0x104>
 80043f4:	6808      	ldr	r0, [r1, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6949      	ldr	r1, [r1, #20]
 80043fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043fe:	d004      	beq.n	800440a <_printf_i+0x1aa>
 8004400:	1d10      	adds	r0, r2, #4
 8004402:	6018      	str	r0, [r3, #0]
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	6019      	str	r1, [r3, #0]
 8004408:	e007      	b.n	800441a <_printf_i+0x1ba>
 800440a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800440e:	f102 0004 	add.w	r0, r2, #4
 8004412:	6018      	str	r0, [r3, #0]
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	d0f6      	beq.n	8004406 <_printf_i+0x1a6>
 8004418:	8019      	strh	r1, [r3, #0]
 800441a:	2300      	movs	r3, #0
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	4675      	mov	r5, lr
 8004420:	e7b1      	b.n	8004386 <_printf_i+0x126>
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	1d11      	adds	r1, r2, #4
 8004426:	6019      	str	r1, [r3, #0]
 8004428:	6815      	ldr	r5, [r2, #0]
 800442a:	6862      	ldr	r2, [r4, #4]
 800442c:	2100      	movs	r1, #0
 800442e:	4628      	mov	r0, r5
 8004430:	f7fb fede 	bl	80001f0 <memchr>
 8004434:	b108      	cbz	r0, 800443a <_printf_i+0x1da>
 8004436:	1b40      	subs	r0, r0, r5
 8004438:	6060      	str	r0, [r4, #4]
 800443a:	6863      	ldr	r3, [r4, #4]
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	2300      	movs	r3, #0
 8004440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004444:	e79f      	b.n	8004386 <_printf_i+0x126>
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	462a      	mov	r2, r5
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d0a2      	beq.n	800439a <_printf_i+0x13a>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	079b      	lsls	r3, r3, #30
 8004458:	d507      	bpl.n	800446a <_printf_i+0x20a>
 800445a:	2500      	movs	r5, #0
 800445c:	f104 0919 	add.w	r9, r4, #25
 8004460:	68e3      	ldr	r3, [r4, #12]
 8004462:	9a03      	ldr	r2, [sp, #12]
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	429d      	cmp	r5, r3
 8004468:	db05      	blt.n	8004476 <_printf_i+0x216>
 800446a:	68e0      	ldr	r0, [r4, #12]
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	4298      	cmp	r0, r3
 8004470:	bfb8      	it	lt
 8004472:	4618      	movlt	r0, r3
 8004474:	e793      	b.n	800439e <_printf_i+0x13e>
 8004476:	2301      	movs	r3, #1
 8004478:	464a      	mov	r2, r9
 800447a:	4639      	mov	r1, r7
 800447c:	4630      	mov	r0, r6
 800447e:	47c0      	blx	r8
 8004480:	3001      	adds	r0, #1
 8004482:	d08a      	beq.n	800439a <_printf_i+0x13a>
 8004484:	3501      	adds	r5, #1
 8004486:	e7eb      	b.n	8004460 <_printf_i+0x200>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1a7      	bne.n	80043dc <_printf_i+0x17c>
 800448c:	780b      	ldrb	r3, [r1, #0]
 800448e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004496:	e765      	b.n	8004364 <_printf_i+0x104>
 8004498:	080045e2 	.word	0x080045e2
 800449c:	080045d1 	.word	0x080045d1

080044a0 <memcpy>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	1e43      	subs	r3, r0, #1
 80044a4:	440a      	add	r2, r1
 80044a6:	4291      	cmp	r1, r2
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	bd10      	pop	{r4, pc}
 80044ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b4:	e7f7      	b.n	80044a6 <memcpy+0x6>

080044b6 <memmove>:
 80044b6:	4288      	cmp	r0, r1
 80044b8:	b510      	push	{r4, lr}
 80044ba:	eb01 0302 	add.w	r3, r1, r2
 80044be:	d803      	bhi.n	80044c8 <memmove+0x12>
 80044c0:	1e42      	subs	r2, r0, #1
 80044c2:	4299      	cmp	r1, r3
 80044c4:	d10c      	bne.n	80044e0 <memmove+0x2a>
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	4298      	cmp	r0, r3
 80044ca:	d2f9      	bcs.n	80044c0 <memmove+0xa>
 80044cc:	1881      	adds	r1, r0, r2
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	42d3      	cmn	r3, r2
 80044d2:	d100      	bne.n	80044d6 <memmove+0x20>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044de:	e7f7      	b.n	80044d0 <memmove+0x1a>
 80044e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044e8:	e7eb      	b.n	80044c2 <memmove+0xc>

080044ea <_realloc_r>:
 80044ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ec:	4607      	mov	r7, r0
 80044ee:	4614      	mov	r4, r2
 80044f0:	460e      	mov	r6, r1
 80044f2:	b921      	cbnz	r1, 80044fe <_realloc_r+0x14>
 80044f4:	4611      	mov	r1, r2
 80044f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044fa:	f7ff bc4f 	b.w	8003d9c <_malloc_r>
 80044fe:	b922      	cbnz	r2, 800450a <_realloc_r+0x20>
 8004500:	f7ff fbfe 	bl	8003d00 <_free_r>
 8004504:	4625      	mov	r5, r4
 8004506:	4628      	mov	r0, r5
 8004508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450a:	f000 f814 	bl	8004536 <_malloc_usable_size_r>
 800450e:	4284      	cmp	r4, r0
 8004510:	d90f      	bls.n	8004532 <_realloc_r+0x48>
 8004512:	4621      	mov	r1, r4
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff fc41 	bl	8003d9c <_malloc_r>
 800451a:	4605      	mov	r5, r0
 800451c:	2800      	cmp	r0, #0
 800451e:	d0f2      	beq.n	8004506 <_realloc_r+0x1c>
 8004520:	4631      	mov	r1, r6
 8004522:	4622      	mov	r2, r4
 8004524:	f7ff ffbc 	bl	80044a0 <memcpy>
 8004528:	4631      	mov	r1, r6
 800452a:	4638      	mov	r0, r7
 800452c:	f7ff fbe8 	bl	8003d00 <_free_r>
 8004530:	e7e9      	b.n	8004506 <_realloc_r+0x1c>
 8004532:	4635      	mov	r5, r6
 8004534:	e7e7      	b.n	8004506 <_realloc_r+0x1c>

08004536 <_malloc_usable_size_r>:
 8004536:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800453a:	2800      	cmp	r0, #0
 800453c:	f1a0 0004 	sub.w	r0, r0, #4
 8004540:	bfbc      	itt	lt
 8004542:	580b      	ldrlt	r3, [r1, r0]
 8004544:	18c0      	addlt	r0, r0, r3
 8004546:	4770      	bx	lr

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
