
Uart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  200001dc  080041a0  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000450  080041a0  00020450  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000166ec  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e9e  00000000  00000000  000368f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bbf2  00000000  00000000  00039796  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de8  00000000  00000000  00045388  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001538  00000000  00000000  00046170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007d82  00000000  00000000  000476a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000051dd  00000000  00000000  0004f42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00054607  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000372c  00000000  00000000  00054684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cd8 	.word	0x08003cd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08003cd8 	.word	0x08003cd8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f8b2 	bl	8000740 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f866 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f837 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 ff0c 	bl	800244c <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000208 	.word	0x20000208
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000208 	.word	0x20000208

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff6 	bl	8000654 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000668:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	bf1c      	itt	ne
 800066c:	4b05      	ldrne	r3, [pc, #20]	; (8000684 <HAL_Delay+0x24>)
 800066e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000670:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000672:	bf18      	it	ne
 8000674:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	f7ff ffed 	bl	8000654 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	4284      	cmp	r4, r0
 800067e:	d8fa      	bhi.n	8000676 <HAL_Delay+0x16>
  {
  }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetDEVID+0xc>)
 800068a:	6818      	ldr	r0, [r3, #0]
}
 800068c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e0042000 	.word	0xe0042000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800069a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a0:	041b      	lsls	r3, r3, #16
 80006a2:	0c1b      	lsrs	r3, r3, #16
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a8:	0200      	lsls	r0, r0, #8
 80006aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
 80006d8:	fa05 f303 	lsl.w	r3, r5, r3
 80006dc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e0:	bf8c      	ite	hi
 80006e2:	3c03      	subhi	r4, #3
 80006e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e6:	4019      	ands	r1, r3
 80006e8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ea:	fa05 f404 	lsl.w	r4, r5, r4
 80006ee:	3c01      	subs	r4, #1
 80006f0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	ea42 0201 	orr.w	r2, r2, r1
 80006f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	bfad      	iteet	ge
 80006fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	f000 000f 	andlt.w	r0, r0, #15
 8000706:	4b06      	ldrlt	r3, [pc, #24]	; (8000720 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	bfb5      	itete	lt
 800070e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20a      	bcs.n	800075e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	21f0      	movs	r1, #240	; 0xf0
 8000750:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	6803      	ldr	r3, [r0, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000774:	f023 0303 	bic.w	r3, r3, #3
 8000778:	2118      	movs	r1, #24
 800077a:	3a10      	subs	r2, #16
 800077c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000780:	4904      	ldr	r1, [pc, #16]	; (8000794 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000782:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000784:	bf88      	it	hi
 8000786:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000788:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800078a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800078c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	08003cf0 	.word	0x08003cf0

08000798 <HAL_DMA_Init>:
{
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff ff5a 	bl	8000654 <HAL_GetTick>
 80007a0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d071      	beq.n	800088a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80007a6:	2300      	movs	r3, #0
 80007a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80007ac:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b4:	6813      	ldr	r3, [r2, #0]
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007bc:	6821      	ldr	r1, [r4, #0]
 80007be:	680b      	ldr	r3, [r1, #0]
 80007c0:	07d8      	lsls	r0, r3, #31
 80007c2:	d43c      	bmi.n	800083e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80007c4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	4d32      	ldr	r5, [pc, #200]	; (8000890 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007ca:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007cc:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ce:	68a3      	ldr	r3, [r4, #8]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	68e2      	ldr	r2, [r4, #12]
 80007d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d6:	6922      	ldr	r2, [r4, #16]
 80007d8:	4313      	orrs	r3, r2
 80007da:	6962      	ldr	r2, [r4, #20]
 80007dc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007de:	69e2      	ldr	r2, [r4, #28]
 80007e0:	4303      	orrs	r3, r0
 80007e2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e4:	6a22      	ldr	r2, [r4, #32]
 80007e6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007ea:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ec:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007f0:	bf01      	itttt	eq
 80007f2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80007f4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80007f6:	4335      	orreq	r5, r6
 80007f8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007fa:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007fe:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000800:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000804:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000808:	d10b      	bne.n	8000822 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000810:	b13d      	cbz	r5, 8000822 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000812:	b9f8      	cbnz	r0, 8000854 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000814:	2a01      	cmp	r2, #1
 8000816:	d02d      	beq.n	8000874 <HAL_DMA_Init+0xdc>
 8000818:	d301      	bcc.n	800081e <HAL_DMA_Init+0x86>
 800081a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800081c:	d101      	bne.n	8000822 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081e:	01ea      	lsls	r2, r5, #7
 8000820:	d42b      	bmi.n	800087a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000822:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000824:	4620      	mov	r0, r4
 8000826:	f7ff ffa1 	bl	800076c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800082a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800082c:	233f      	movs	r3, #63	; 0x3f
 800082e:	4093      	lsls	r3, r2
 8000830:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000832:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000834:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000836:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000838:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800083c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800083e:	f7ff ff09 	bl	8000654 <HAL_GetTick>
 8000842:	1b40      	subs	r0, r0, r5
 8000844:	2805      	cmp	r0, #5
 8000846:	d9b9      	bls.n	80007bc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000848:	2320      	movs	r3, #32
 800084a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800084c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800084e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000852:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000854:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000858:	d113      	bne.n	8000882 <HAL_DMA_Init+0xea>
    switch (tmp)
 800085a:	2a03      	cmp	r2, #3
 800085c:	d8e1      	bhi.n	8000822 <HAL_DMA_Init+0x8a>
 800085e:	a001      	add	r0, pc, #4	; (adr r0, 8000864 <HAL_DMA_Init+0xcc>)
 8000860:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000864:	0800087b 	.word	0x0800087b
 8000868:	0800081f 	.word	0x0800081f
 800086c:	0800087b 	.word	0x0800087b
 8000870:	08000875 	.word	0x08000875
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000874:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000878:	d1d3      	bne.n	8000822 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800087e:	2001      	movs	r0, #1
 8000880:	e7e5      	b.n	800084e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000882:	2a02      	cmp	r2, #2
 8000884:	d9f9      	bls.n	800087a <HAL_DMA_Init+0xe2>
 8000886:	2a03      	cmp	r2, #3
 8000888:	e7c8      	b.n	800081c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	bf00      	nop
 8000890:	f010803f 	.word	0xf010803f

08000894 <HAL_DMA_Start_IT>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000896:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800089a:	2c01      	cmp	r4, #1
 800089c:	d032      	beq.n	8000904 <HAL_DMA_Start_IT+0x70>
 800089e:	2401      	movs	r4, #1
 80008a0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80008aa:	2c01      	cmp	r4, #1
 80008ac:	f04f 0500 	mov.w	r5, #0
 80008b0:	f04f 0402 	mov.w	r4, #2
 80008b4:	d124      	bne.n	8000900 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80008b6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008ba:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008bc:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008be:	6825      	ldr	r5, [r4, #0]
 80008c0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008c4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80008c6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c8:	6883      	ldr	r3, [r0, #8]
 80008ca:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80008cc:	bf0e      	itee	eq
 80008ce:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80008d0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80008d2:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80008d6:	bf08      	it	eq
 80008d8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008da:	233f      	movs	r3, #63	; 0x3f
 80008dc:	4093      	lsls	r3, r2
 80008de:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	f043 0316 	orr.w	r3, r3, #22
 80008e6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008fc:	2000      	movs	r0, #0
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000900:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000904:	2002      	movs	r0, #2
}
 8000906:	bd70      	pop	{r4, r5, r6, pc}

08000908 <HAL_DMA_IRQHandler>:
{
 8000908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800090a:	2300      	movs	r3, #0
 800090c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000910:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000912:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000914:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000916:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000918:	2208      	movs	r2, #8
 800091a:	409a      	lsls	r2, r3
 800091c:	4216      	tst	r6, r2
{
 800091e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000920:	d00c      	beq.n	800093c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000922:	6801      	ldr	r1, [r0, #0]
 8000924:	6808      	ldr	r0, [r1, #0]
 8000926:	0740      	lsls	r0, r0, #29
 8000928:	d508      	bpl.n	800093c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800092a:	6808      	ldr	r0, [r1, #0]
 800092c:	f020 0004 	bic.w	r0, r0, #4
 8000930:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000932:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000934:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000936:	f042 0201 	orr.w	r2, r2, #1
 800093a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800093c:	2201      	movs	r2, #1
 800093e:	409a      	lsls	r2, r3
 8000940:	4216      	tst	r6, r2
 8000942:	d008      	beq.n	8000956 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000944:	6821      	ldr	r1, [r4, #0]
 8000946:	6949      	ldr	r1, [r1, #20]
 8000948:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800094a:	bf41      	itttt	mi
 800094c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800094e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000950:	f042 0202 	orrmi.w	r2, r2, #2
 8000954:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000956:	2204      	movs	r2, #4
 8000958:	409a      	lsls	r2, r3
 800095a:	4216      	tst	r6, r2
 800095c:	d008      	beq.n	8000970 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800095e:	6821      	ldr	r1, [r4, #0]
 8000960:	6809      	ldr	r1, [r1, #0]
 8000962:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000964:	bf41      	itttt	mi
 8000966:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000968:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800096a:	f042 0204 	orrmi.w	r2, r2, #4
 800096e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000970:	2210      	movs	r2, #16
 8000972:	409a      	lsls	r2, r3
 8000974:	4216      	tst	r6, r2
 8000976:	d010      	beq.n	800099a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	6819      	ldr	r1, [r3, #0]
 800097c:	0709      	lsls	r1, r1, #28
 800097e:	d50c      	bpl.n	800099a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000980:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	0350      	lsls	r0, r2, #13
 8000986:	d535      	bpl.n	80009f4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	0319      	lsls	r1, r3, #12
 800098c:	d401      	bmi.n	8000992 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800098e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000990:	e000      	b.n	8000994 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000994:	b10b      	cbz	r3, 800099a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000996:	4620      	mov	r0, r4
 8000998:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800099a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800099c:	2220      	movs	r2, #32
 800099e:	408a      	lsls	r2, r1
 80009a0:	4216      	tst	r6, r2
 80009a2:	d038      	beq.n	8000a16 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	06c6      	lsls	r6, r0, #27
 80009aa:	d534      	bpl.n	8000a16 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009ac:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009ae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009b2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009b4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009b6:	d125      	bne.n	8000a04 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009b8:	f022 0216 	bic.w	r2, r2, #22
 80009bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009be:	695a      	ldr	r2, [r3, #20]
 80009c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009c4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009c8:	b90a      	cbnz	r2, 80009ce <HAL_DMA_IRQHandler+0xc6>
 80009ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009cc:	b11a      	cbz	r2, 80009d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	f022 0208 	bic.w	r2, r2, #8
 80009d4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d6:	233f      	movs	r3, #63	; 0x3f
 80009d8:	408b      	lsls	r3, r1
 80009da:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80009dc:	2300      	movs	r3, #0
 80009de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80009e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009ea:	b10b      	cbz	r3, 80009f0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80009ec:	4620      	mov	r0, r4
 80009ee:	4798      	blx	r3
}
 80009f0:	b003      	add	sp, #12
 80009f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009f8:	bf5e      	ittt	pl
 80009fa:	681a      	ldrpl	r2, [r3, #0]
 80009fc:	f022 0208 	bicpl.w	r2, r2, #8
 8000a00:	601a      	strpl	r2, [r3, #0]
 8000a02:	e7c4      	b.n	800098e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a04:	0350      	lsls	r0, r2, #13
 8000a06:	d528      	bpl.n	8000a5a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	0319      	lsls	r1, r3, #12
 8000a0c:	d432      	bmi.n	8000a74 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a10:	b10b      	cbz	r3, 8000a16 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000a12:	4620      	mov	r0, r4
 8000a14:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0e9      	beq.n	80009f0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a1e:	07da      	lsls	r2, r3, #31
 8000a20:	d519      	bpl.n	8000a56 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a22:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a24:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a32:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a36:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a3a:	9b01      	ldr	r3, [sp, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	d302      	bcc.n	8000a4a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	07db      	lsls	r3, r3, #31
 8000a48:	d4f7      	bmi.n	8000a3a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a58:	e7c7      	b.n	80009ea <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a60:	d108      	bne.n	8000a74 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	f021 0110 	bic.w	r1, r1, #16
 8000a68:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a6c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a76:	e7cb      	b.n	8000a10 <HAL_DMA_IRQHandler+0x108>
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a80:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a84:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000c14 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a88:	4a60      	ldr	r2, [pc, #384]	; (8000c0c <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000a8c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a90:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a92:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000a94:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a98:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000a9a:	42ac      	cmp	r4, r5
 8000a9c:	f040 80a6 	bne.w	8000bec <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa0:	684c      	ldr	r4, [r1, #4]
 8000aa2:	f024 0c10 	bic.w	ip, r4, #16
 8000aa6:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000aaa:	2e01      	cmp	r6, #1
 8000aac:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ab0:	d812      	bhi.n	8000ad8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000ab2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ab4:	2603      	movs	r6, #3
 8000ab6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000aba:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000abe:	68ce      	ldr	r6, [r1, #12]
 8000ac0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ac4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ac6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ac8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aca:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ace:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ad2:	409e      	lsls	r6, r3
 8000ad4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ad6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ad8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ada:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000adc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ae0:	43f6      	mvns	r6, r6
 8000ae2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae6:	688f      	ldr	r7, [r1, #8]
 8000ae8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000aec:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000af4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af6:	d116      	bne.n	8000b26 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000af8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000afc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b00:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b04:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b0c:	f04f 0c0f 	mov.w	ip, #15
 8000b10:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b14:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b18:	690f      	ldr	r7, [r1, #16]
 8000b1a:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b1e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b22:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b26:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b28:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2a:	f004 0703 	and.w	r7, r4, #3
 8000b2e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b32:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b36:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b38:	00e6      	lsls	r6, r4, #3
 8000b3a:	d557      	bpl.n	8000bec <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3c:	f04f 0b00 	mov.w	fp, #0
 8000b40:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b44:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b48:	4e31      	ldr	r6, [pc, #196]	; (8000c10 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b4e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b52:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b56:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b5a:	9703      	str	r7, [sp, #12]
 8000b5c:	9f03      	ldr	r7, [sp, #12]
 8000b5e:	f023 0703 	bic.w	r7, r3, #3
 8000b62:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b66:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b6a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b6e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b72:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b76:	f04f 0e0f 	mov.w	lr, #15
 8000b7a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b7e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b80:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b84:	d039      	beq.n	8000bfa <HAL_GPIO_Init+0x17e>
 8000b86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b8a:	42b0      	cmp	r0, r6
 8000b8c:	d037      	beq.n	8000bfe <HAL_GPIO_Init+0x182>
 8000b8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b92:	42b0      	cmp	r0, r6
 8000b94:	d035      	beq.n	8000c02 <HAL_GPIO_Init+0x186>
 8000b96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b9a:	42b0      	cmp	r0, r6
 8000b9c:	d033      	beq.n	8000c06 <HAL_GPIO_Init+0x18a>
 8000b9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ba2:	42b0      	cmp	r0, r6
 8000ba4:	bf14      	ite	ne
 8000ba6:	2607      	movne	r6, #7
 8000ba8:	2604      	moveq	r6, #4
 8000baa:	fa06 f60c 	lsl.w	r6, r6, ip
 8000bae:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bb2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000bb4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	bf0c      	ite	eq
 8000bbe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bc0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000bc2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000bc4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf0c      	ite	eq
 8000bcc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bce:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000bd0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	bf0c      	ite	eq
 8000bda:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bdc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000bde:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000be0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000be4:	bf54      	ite	pl
 8000be6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000be8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000bea:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bec:	3301      	adds	r3, #1
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	f47f af4f 	bne.w	8000a92 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bf4:	b005      	add	sp, #20
 8000bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bfa:	465e      	mov	r6, fp
 8000bfc:	e7d5      	b.n	8000baa <HAL_GPIO_Init+0x12e>
 8000bfe:	2601      	movs	r6, #1
 8000c00:	e7d3      	b.n	8000baa <HAL_GPIO_Init+0x12e>
 8000c02:	2602      	movs	r6, #2
 8000c04:	e7d1      	b.n	8000baa <HAL_GPIO_Init+0x12e>
 8000c06:	2603      	movs	r6, #3
 8000c08:	e7cf      	b.n	8000baa <HAL_GPIO_Init+0x12e>
 8000c0a:	bf00      	nop
 8000c0c:	40013c00 	.word	0x40013c00
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c18:	b10a      	cbz	r2, 8000c1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c1a:	6181      	str	r1, [r0, #24]
 8000c1c:	4770      	bx	lr
 8000c1e:	0409      	lsls	r1, r1, #16
 8000c20:	e7fb      	b.n	8000c1a <HAL_GPIO_WritePin+0x2>

08000c22 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c22:	6943      	ldr	r3, [r0, #20]
 8000c24:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c28:	bf08      	it	eq
 8000c2a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2c:	6181      	str	r1, [r0, #24]
 8000c2e:	4770      	bx	lr

08000c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b908      	cbnz	r0, 8000c3a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c42:	b91b      	cbnz	r3, 8000c4c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c48:	f001 fc20 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4c:	2324      	movs	r3, #36	; 0x24
 8000c4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f000 fafc 	bl	8001268 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c70:	6865      	ldr	r5, [r4, #4]
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <HAL_I2C_Init+0x148>)
 8000c74:	429d      	cmp	r5, r3
 8000c76:	d84d      	bhi.n	8000d14 <HAL_I2C_Init+0xe4>
 8000c78:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <HAL_I2C_Init+0x14c>)
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d9db      	bls.n	8000c36 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c7e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c80:	493f      	ldr	r1, [pc, #252]	; (8000d80 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c82:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c84:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c90:	6a13      	ldr	r3, [r2, #32]
 8000c92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c96:	3101      	adds	r1, #1
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c9c:	69d1      	ldr	r1, [r2, #28]
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <HAL_I2C_Init+0x148>)
 8000ca0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ca4:	429d      	cmp	r5, r3
 8000ca6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000caa:	f100 30ff 	add.w	r0, r0, #4294967295
 8000cae:	d848      	bhi.n	8000d42 <HAL_I2C_Init+0x112>
 8000cb0:	006d      	lsls	r5, r5, #1
 8000cb2:	fbb0 f0f5 	udiv	r0, r0, r5
 8000cb6:	3001      	adds	r0, #1
 8000cb8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	bf38      	it	cc
 8000cc0:	2304      	movcc	r3, #4
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	6a20      	ldr	r0, [r4, #32]
 8000cca:	69e3      	ldr	r3, [r4, #28]
 8000ccc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000cd0:	4303      	orrs	r3, r0
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cd6:	6891      	ldr	r1, [r2, #8]
 8000cd8:	68e0      	ldr	r0, [r4, #12]
 8000cda:	6923      	ldr	r3, [r4, #16]
 8000cdc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cea:	68d1      	ldr	r1, [r2, #12]
 8000cec:	69a0      	ldr	r0, [r4, #24]
 8000cee:	6963      	ldr	r3, [r4, #20]
 8000cf0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000cf4:	4303      	orrs	r3, r0
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d02:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d04:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d06:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d0c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d0e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_I2C_Init+0x154>)
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d98d      	bls.n	8000c36 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d1c:	4e18      	ldr	r6, [pc, #96]	; (8000d80 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d20:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d28:	4333      	orrs	r3, r6
 8000d2a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d2c:	6a13      	ldr	r3, [r2, #32]
 8000d2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d32:	4371      	muls	r1, r6
 8000d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d38:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000d3c:	fbb1 f1f6 	udiv	r1, r1, r6
 8000d40:	e7a9      	b.n	8000c96 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d42:	68a3      	ldr	r3, [r4, #8]
 8000d44:	b953      	cbnz	r3, 8000d5c <HAL_I2C_Init+0x12c>
 8000d46:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d4e:	1c43      	adds	r3, r0, #1
 8000d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d54:	b16b      	cbz	r3, 8000d72 <HAL_I2C_Init+0x142>
 8000d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5a:	e7b2      	b.n	8000cc2 <HAL_I2C_Init+0x92>
 8000d5c:	2319      	movs	r3, #25
 8000d5e:	436b      	muls	r3, r5
 8000d60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d64:	1c43      	adds	r3, r0, #1
 8000d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6a:	b113      	cbz	r3, 8000d72 <HAL_I2C_Init+0x142>
 8000d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d70:	e7a7      	b.n	8000cc2 <HAL_I2C_Init+0x92>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e7a5      	b.n	8000cc2 <HAL_I2C_Init+0x92>
 8000d76:	bf00      	nop
 8000d78:	000186a0 	.word	0x000186a0
 8000d7c:	001e847f 	.word	0x001e847f
 8000d80:	000f4240 	.word	0x000f4240
 8000d84:	003d08ff 	.word	0x003d08ff

08000d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	b908      	cbnz	r0, 8000d94 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	e03f      	b.n	8000e14 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d94:	6803      	ldr	r3, [r0, #0]
 8000d96:	07dd      	lsls	r5, r3, #31
 8000d98:	d410      	bmi.n	8000dbc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	0798      	lsls	r0, r3, #30
 8000d9e:	d45a      	bmi.n	8000e56 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	071a      	lsls	r2, r3, #28
 8000da4:	f100 809c 	bmi.w	8000ee0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	075b      	lsls	r3, r3, #29
 8000dac:	f100 80ba 	bmi.w	8000f24 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db0:	69a0      	ldr	r0, [r4, #24]
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f040 811b 	bne.w	8000fee <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000db8:	2000      	movs	r0, #0
 8000dba:	e02b      	b.n	8000e14 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dbc:	4ba4      	ldr	r3, [pc, #656]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	f002 020c 	and.w	r2, r2, #12
 8000dc4:	2a04      	cmp	r2, #4
 8000dc6:	d007      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dce:	2a08      	cmp	r2, #8
 8000dd0:	d10a      	bne.n	8000de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	0259      	lsls	r1, r3, #9
 8000dd6:	d507      	bpl.n	8000de8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	4b9d      	ldr	r3, [pc, #628]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	039a      	lsls	r2, r3, #14
 8000dde:	d5dc      	bpl.n	8000d9a <HAL_RCC_OscConfig+0x12>
 8000de0:	6863      	ldr	r3, [r4, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1d9      	bne.n	8000d9a <HAL_RCC_OscConfig+0x12>
 8000de6:	e7d3      	b.n	8000d90 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	6863      	ldr	r3, [r4, #4]
 8000dea:	4d99      	ldr	r5, [pc, #612]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d113      	bne.n	8000e1a <HAL_RCC_OscConfig+0x92>
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fc2b 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4d94      	ldr	r5, [pc, #592]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e02:	682b      	ldr	r3, [r5, #0]
 8000e04:	039b      	lsls	r3, r3, #14
 8000e06:	d4c8      	bmi.n	8000d9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fc24 	bl	8000654 <HAL_GetTick>
 8000e0c:	1b80      	subs	r0, r0, r6
 8000e0e:	2864      	cmp	r0, #100	; 0x64
 8000e10:	d9f7      	bls.n	8000e02 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000e12:	2003      	movs	r0, #3
}
 8000e14:	b002      	add	sp, #8
 8000e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e1e:	d104      	bne.n	8000e2a <HAL_RCC_OscConfig+0xa2>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e26:	602b      	str	r3, [r5, #0]
 8000e28:	e7e3      	b.n	8000df2 <HAL_RCC_OscConfig+0x6a>
 8000e2a:	682a      	ldr	r2, [r5, #0]
 8000e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e30:	602a      	str	r2, [r5, #0]
 8000e32:	682a      	ldr	r2, [r5, #0]
 8000e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e38:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1dd      	bne.n	8000dfa <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fc09 	bl	8000654 <HAL_GetTick>
 8000e42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	039f      	lsls	r7, r3, #14
 8000e48:	d5a7      	bpl.n	8000d9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fc03 	bl	8000654 <HAL_GetTick>
 8000e4e:	1b80      	subs	r0, r0, r6
 8000e50:	2864      	cmp	r0, #100	; 0x64
 8000e52:	d9f7      	bls.n	8000e44 <HAL_RCC_OscConfig+0xbc>
 8000e54:	e7dd      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e56:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f012 0f0c 	tst.w	r2, #12
 8000e5e:	d007      	beq.n	8000e70 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e66:	2a08      	cmp	r2, #8
 8000e68:	d111      	bne.n	8000e8e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	025e      	lsls	r6, r3, #9
 8000e6e:	d40e      	bmi.n	8000e8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e70:	4b77      	ldr	r3, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	0795      	lsls	r5, r2, #30
 8000e76:	d502      	bpl.n	8000e7e <HAL_RCC_OscConfig+0xf6>
 8000e78:	68e2      	ldr	r2, [r4, #12]
 8000e7a:	2a01      	cmp	r2, #1
 8000e7c:	d188      	bne.n	8000d90 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	6921      	ldr	r1, [r4, #16]
 8000e82:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e86:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8c:	e788      	b.n	8000da0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e8e:	68e2      	ldr	r2, [r4, #12]
 8000e90:	4b70      	ldr	r3, [pc, #448]	; (8001054 <HAL_RCC_OscConfig+0x2cc>)
 8000e92:	b1b2      	cbz	r2, 8000ec2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fbdc 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4d6c      	ldr	r5, [pc, #432]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	0798      	lsls	r0, r3, #30
 8000ea4:	d507      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	6922      	ldr	r2, [r4, #16]
 8000eaa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	e774      	b.n	8000da0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fbcd 	bl	8000654 <HAL_GetTick>
 8000eba:	1b80      	subs	r0, r0, r6
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d9ef      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x118>
 8000ec0:	e7a7      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbc6 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec8:	4d61      	ldr	r5, [pc, #388]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000eca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	0799      	lsls	r1, r3, #30
 8000ed0:	f57f af66 	bpl.w	8000da0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fbbe 	bl	8000654 <HAL_GetTick>
 8000ed8:	1b80      	subs	r0, r0, r6
 8000eda:	2802      	cmp	r0, #2
 8000edc:	d9f6      	bls.n	8000ecc <HAL_RCC_OscConfig+0x144>
 8000ede:	e798      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ee0:	6962      	ldr	r2, [r4, #20]
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x2d0>)
 8000ee4:	b17a      	cbz	r2, 8000f06 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eea:	f7ff fbb3 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4d58      	ldr	r5, [pc, #352]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ef0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ef4:	079f      	lsls	r7, r3, #30
 8000ef6:	f53f af57 	bmi.w	8000da8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fbab 	bl	8000654 <HAL_GetTick>
 8000efe:	1b80      	subs	r0, r0, r6
 8000f00:	2802      	cmp	r0, #2
 8000f02:	d9f6      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x16a>
 8000f04:	e785      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000f06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f08:	f7ff fba4 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4d50      	ldr	r5, [pc, #320]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f0e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f12:	0798      	lsls	r0, r3, #30
 8000f14:	f57f af48 	bpl.w	8000da8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fb9c 	bl	8000654 <HAL_GetTick>
 8000f1c:	1b80      	subs	r0, r0, r6
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	d9f6      	bls.n	8000f10 <HAL_RCC_OscConfig+0x188>
 8000f22:	e776      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f24:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f28:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f2c:	d128      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	9201      	str	r2, [sp, #4]
 8000f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f42:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	4d45      	ldr	r5, [pc, #276]	; (800105c <HAL_RCC_OscConfig+0x2d4>)
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	05d9      	lsls	r1, r3, #23
 8000f4a:	d51b      	bpl.n	8000f84 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	68a3      	ldr	r3, [r4, #8]
 8000f4e:	4d40      	ldr	r5, [pc, #256]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d127      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x21c>
 8000f54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fb7a 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	4d3b      	ldr	r5, [pc, #236]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f62:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f64:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f6a:	079b      	lsls	r3, r3, #30
 8000f6c:	d539      	bpl.n	8000fe2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	f43f af1e 	beq.w	8000db0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f74:	4a36      	ldr	r2, [pc, #216]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000f76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	e717      	b.n	8000db0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f80:	2600      	movs	r6, #0
 8000f82:	e7df      	b.n	8000f44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fb62 	bl	8000654 <HAL_GetTick>
 8000f90:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	05da      	lsls	r2, r3, #23
 8000f96:	d4d9      	bmi.n	8000f4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f98:	f7ff fb5c 	bl	8000654 <HAL_GetTick>
 8000f9c:	1bc0      	subs	r0, r0, r7
 8000f9e:	2802      	cmp	r0, #2
 8000fa0:	d9f7      	bls.n	8000f92 <HAL_RCC_OscConfig+0x20a>
 8000fa2:	e736      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d104      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x22a>
 8000fa8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	672b      	str	r3, [r5, #112]	; 0x70
 8000fb0:	e7d0      	b.n	8000f54 <HAL_RCC_OscConfig+0x1cc>
 8000fb2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	672a      	str	r2, [r5, #112]	; 0x70
 8000fba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1ca      	bne.n	8000f5c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fb45 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fd2:	0798      	lsls	r0, r3, #30
 8000fd4:	d5cb      	bpl.n	8000f6e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb3d 	bl	8000654 <HAL_GetTick>
 8000fda:	1bc0      	subs	r0, r0, r7
 8000fdc:	4540      	cmp	r0, r8
 8000fde:	d9f7      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x248>
 8000fe0:	e717      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb37 	bl	8000654 <HAL_GetTick>
 8000fe6:	1bc0      	subs	r0, r0, r7
 8000fe8:	4540      	cmp	r0, r8
 8000fea:	d9bd      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1e0>
 8000fec:	e711      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fee:	4d18      	ldr	r5, [pc, #96]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
 8000ff0:	68ab      	ldr	r3, [r5, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d047      	beq.n	800108a <HAL_RCC_OscConfig+0x302>
 8000ffa:	4e19      	ldr	r6, [pc, #100]	; (8001060 <HAL_RCC_OscConfig+0x2d8>)
 8000ffc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001000:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001002:	d135      	bne.n	8001070 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001004:	f7ff fb26 	bl	8000654 <HAL_GetTick>
 8001008:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	0199      	lsls	r1, r3, #6
 800100e:	d429      	bmi.n	8001064 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001010:	6a22      	ldr	r2, [r4, #32]
 8001012:	69e3      	ldr	r3, [r4, #28]
 8001014:	4313      	orrs	r3, r2
 8001016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001018:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800101c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800101e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001022:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001026:	0852      	lsrs	r2, r2, #1
 8001028:	3a01      	subs	r2, #1
 800102a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800102e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001030:	2301      	movs	r3, #1
 8001032:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001034:	f7ff fb0e 	bl	8000654 <HAL_GetTick>
 8001038:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	019a      	lsls	r2, r3, #6
 800103e:	f53f aebb 	bmi.w	8000db8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb07 	bl	8000654 <HAL_GetTick>
 8001046:	1b40      	subs	r0, r0, r5
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f6      	bls.n	800103a <HAL_RCC_OscConfig+0x2b2>
 800104c:	e6e1      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	42470000 	.word	0x42470000
 8001058:	42470e80 	.word	0x42470e80
 800105c:	40007000 	.word	0x40007000
 8001060:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001064:	f7ff faf6 	bl	8000654 <HAL_GetTick>
 8001068:	1bc0      	subs	r0, r0, r7
 800106a:	2802      	cmp	r0, #2
 800106c:	d9cd      	bls.n	800100a <HAL_RCC_OscConfig+0x282>
 800106e:	e6d0      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001070:	f7ff faf0 	bl	8000654 <HAL_GetTick>
 8001074:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001076:	682b      	ldr	r3, [r5, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	f57f ae9d 	bpl.w	8000db8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fae9 	bl	8000654 <HAL_GetTick>
 8001082:	1b00      	subs	r0, r0, r4
 8001084:	2802      	cmp	r0, #2
 8001086:	d9f6      	bls.n	8001076 <HAL_RCC_OscConfig+0x2ee>
 8001088:	e6c3      	b.n	8000e12 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108a:	2801      	cmp	r0, #1
 800108c:	f43f aec2 	beq.w	8000e14 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8001090:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001092:	69e3      	ldr	r3, [r4, #28]
 8001094:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001098:	429a      	cmp	r2, r3
 800109a:	f47f ae79 	bne.w	8000d90 <HAL_RCC_OscConfig+0x8>
 800109e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010a0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a4:	4293      	cmp	r3, r2
 80010a6:	f47f ae73 	bne.w	8000d90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010b0:	4003      	ands	r3, r0
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f47f ae6c 	bne.w	8000d90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010ba:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010be:	4293      	cmp	r3, r2
 80010c0:	f47f ae66 	bne.w	8000d90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010c6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80010ca:	1ac0      	subs	r0, r0, r3
 80010cc:	bf18      	it	ne
 80010ce:	2001      	movne	r0, #1
 80010d0:	e6a0      	b.n	8000e14 <HAL_RCC_OscConfig+0x8c>
 80010d2:	bf00      	nop

080010d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010d4:	4913      	ldr	r1, [pc, #76]	; (8001124 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80010d6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010d8:	688b      	ldr	r3, [r1, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d003      	beq.n	80010ea <HAL_RCC_GetSysClockFreq+0x16>
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d003      	beq.n	80010ee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <HAL_RCC_GetSysClockFreq+0x58>)
 80010ec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f8:	bf14      	ite	ne
 80010fa:	480c      	ldrne	r0, [pc, #48]	; (800112c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fc:	480a      	ldreq	r0, [pc, #40]	; (8001128 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001102:	bf18      	it	ne
 8001104:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001106:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800110a:	fba1 0100 	umull	r0, r1, r1, r0
 800110e:	f7ff f8cf 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RCC_GetSysClockFreq+0x50>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800111a:	3301      	adds	r3, #1
 800111c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800111e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001122:	bd08      	pop	{r3, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	00f42400 	.word	0x00f42400
 800112c:	007a1200 	.word	0x007a1200

08001130 <HAL_RCC_ClockConfig>:
{
 8001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001134:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001136:	4604      	mov	r4, r0
 8001138:	b910      	cbnz	r0, 8001140 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_RCC_ClockConfig+0x124>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f002 020f 	and.w	r2, r2, #15
 8001148:	428a      	cmp	r2, r1
 800114a:	d329      	bcc.n	80011a0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	6821      	ldr	r1, [r4, #0]
 800114e:	078f      	lsls	r7, r1, #30
 8001150:	d42e      	bmi.n	80011b0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001152:	07c8      	lsls	r0, r1, #31
 8001154:	d441      	bmi.n	80011da <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_RCC_ClockConfig+0x124>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f002 020f 	and.w	r2, r2, #15
 800115e:	4295      	cmp	r5, r2
 8001160:	d367      	bcc.n	8001232 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	0751      	lsls	r1, r2, #29
 8001166:	d46d      	bmi.n	8001244 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001168:	0713      	lsls	r3, r2, #28
 800116a:	d507      	bpl.n	800117c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
 800116e:	6921      	ldr	r1, [r4, #16]
 8001170:	6893      	ldr	r3, [r2, #8]
 8001172:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001176:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800117a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800117c:	f7ff ffaa 	bl	80010d4 <HAL_RCC_GetSysClockFreq>
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
 8001182:	4a36      	ldr	r2, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x12c>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	40d8      	lsrs	r0, r3
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_RCC_ClockConfig+0x130>)
 8001190:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_RCC_ClockConfig+0x134>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f7ff fa13 	bl	80005c0 <HAL_InitTick>
  return HAL_OK;
 800119a:	2000      	movs	r0, #0
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d1c5      	bne.n	800113a <HAL_RCC_ClockConfig+0xa>
 80011ae:	e7cd      	b.n	800114c <HAL_RCC_ClockConfig+0x1c>
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b6:	bf1e      	ittt	ne
 80011b8:	689a      	ldrne	r2, [r3, #8]
 80011ba:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80011be:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c2:	bf42      	ittt	mi
 80011c4:	689a      	ldrmi	r2, [r3, #8]
 80011c6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80011ca:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	68a0      	ldr	r0, [r4, #8]
 80011d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011d4:	4302      	orrs	r2, r0
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	e7bb      	b.n	8001152 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011da:	6862      	ldr	r2, [r4, #4]
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
 80011de:	2a01      	cmp	r2, #1
 80011e0:	d11d      	bne.n	800121e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	d0a7      	beq.n	800113a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4e1b      	ldr	r6, [pc, #108]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
 80011ec:	68b3      	ldr	r3, [r6, #8]
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80011f6:	f7ff fa2d 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001200:	68b3      	ldr	r3, [r6, #8]
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800120c:	d0a3      	beq.n	8001156 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120e:	f7ff fa21 	bl	8000654 <HAL_GetTick>
 8001212:	1bc0      	subs	r0, r0, r7
 8001214:	4540      	cmp	r0, r8
 8001216:	d9f3      	bls.n	8001200 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001218:	2003      	movs	r0, #3
}
 800121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	1e91      	subs	r1, r2, #2
 8001220:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001224:	d802      	bhi.n	800122c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800122a:	e7dd      	b.n	80011e8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	f013 0f02 	tst.w	r3, #2
 8001230:	e7da      	b.n	80011e8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	b2ea      	uxtb	r2, r5
 8001234:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	429d      	cmp	r5, r3
 800123e:	f47f af7c 	bne.w	800113a <HAL_RCC_ClockConfig+0xa>
 8001242:	e78e      	b.n	8001162 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001244:	4904      	ldr	r1, [pc, #16]	; (8001258 <HAL_RCC_ClockConfig+0x128>)
 8001246:	68e0      	ldr	r0, [r4, #12]
 8001248:	688b      	ldr	r3, [r1, #8]
 800124a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800124e:	4303      	orrs	r3, r0
 8001250:	608b      	str	r3, [r1, #8]
 8001252:	e789      	b.n	8001168 <HAL_RCC_ClockConfig+0x38>
 8001254:	40023c00 	.word	0x40023c00
 8001258:	40023800 	.word	0x40023800
 800125c:	08003df7 	.word	0x08003df7
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetPCLK1Freq+0x14>)
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x18>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001276:	6810      	ldr	r0, [r2, #0]
}
 8001278:	40d8      	lsrs	r0, r3
 800127a:	4770      	bx	lr
 800127c:	40023800 	.word	0x40023800
 8001280:	08003e07 	.word	0x08003e07
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_RCC_GetPCLK2Freq+0x14>)
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001296:	6810      	ldr	r0, [r2, #0]
}
 8001298:	40d8      	lsrs	r0, r3
 800129a:	4770      	bx	lr
 800129c:	40023800 	.word	0x40023800
 80012a0:	08003e07 	.word	0x08003e07
 80012a4:	20000008 	.word	0x20000008

080012a8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	4604      	mov	r4, r0
 80012ac:	460e      	mov	r6, r1
 80012ae:	4615      	mov	r5, r2
 80012b0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012b2:	6821      	ldr	r1, [r4, #0]
 80012b4:	688a      	ldr	r2, [r1, #8]
 80012b6:	ea36 0302 	bics.w	r3, r6, r2
 80012ba:	d001      	beq.n	80012c0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012bc:	2000      	movs	r0, #0
}
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012c0:	1c6b      	adds	r3, r5, #1
 80012c2:	d0f7      	beq.n	80012b4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80012c4:	f7ff f9c6 	bl	8000654 <HAL_GetTick>
 80012c8:	1bc0      	subs	r0, r0, r7
 80012ca:	4285      	cmp	r5, r0
 80012cc:	d8f1      	bhi.n	80012b2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012d8:	6862      	ldr	r2, [r4, #4]
 80012da:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012de:	d10a      	bne.n	80012f6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 80012e0:	68a2      	ldr	r2, [r4, #8]
 80012e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012e6:	d002      	beq.n	80012ee <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012ec:	d103      	bne.n	80012f6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012fc:	d107      	bne.n	800130e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800130c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800130e:	2301      	movs	r3, #1
 8001310:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001314:	2300      	movs	r3, #0
 8001316:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800131a:	2003      	movs	r0, #3
 800131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001322:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <SPI_EndRxTxTransaction+0x54>)
 8001326:	4e14      	ldr	r6, [pc, #80]	; (8001378 <SPI_EndRxTxTransaction+0x58>)
 8001328:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800132a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800132c:	fbb5 f6f6 	udiv	r6, r5, r6
 8001330:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001334:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001336:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800133a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800133c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800133e:	d10d      	bne.n	800135c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001340:	460a      	mov	r2, r1
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	f7ff ffb0 	bl	80012a8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001348:	b910      	cbnz	r0, 8001350 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 800134a:	2000      	movs	r0, #0
}
 800134c:	b002      	add	sp, #8
 800134e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001350:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
 800135a:	e7f7      	b.n	800134c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 800135c:	9b01      	ldr	r3, [sp, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f3      	beq.n	800134a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001362:	9b01      	ldr	r3, [sp, #4]
 8001364:	3b01      	subs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	d4f5      	bmi.n	800135c <SPI_EndRxTxTransaction+0x3c>
 8001370:	e7eb      	b.n	800134a <SPI_EndRxTxTransaction+0x2a>
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	016e3600 	.word	0x016e3600

0800137c <HAL_SPI_Init>:
{
 800137c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800137e:	4604      	mov	r4, r0
 8001380:	2800      	cmp	r0, #0
 8001382:	d036      	beq.n	80013f2 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001388:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800138c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001390:	b91b      	cbnz	r3, 800139a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001392:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001396:	f001 f8ff 	bl	8002598 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800139a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800139c:	68a0      	ldr	r0, [r4, #8]
 800139e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80013a6:	680b      	ldr	r3, [r1, #0]
 80013a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	4303      	orrs	r3, r0
 80013b2:	68e0      	ldr	r0, [r4, #12]
 80013b4:	4303      	orrs	r3, r0
 80013b6:	6920      	ldr	r0, [r4, #16]
 80013b8:	4303      	orrs	r3, r0
 80013ba:	6960      	ldr	r0, [r4, #20]
 80013bc:	4303      	orrs	r3, r0
 80013be:	69e0      	ldr	r0, [r4, #28]
 80013c0:	4303      	orrs	r3, r0
 80013c2:	6a20      	ldr	r0, [r4, #32]
 80013c4:	4303      	orrs	r3, r0
 80013c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013c8:	4303      	orrs	r3, r0
 80013ca:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80013ce:	4303      	orrs	r3, r0
 80013d0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80013d2:	0c12      	lsrs	r2, r2, #16
 80013d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013d6:	f002 0204 	and.w	r2, r2, #4
 80013da:	431a      	orrs	r2, r3
 80013dc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013de:	69cb      	ldr	r3, [r1, #28]
 80013e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013e4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013e6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80013e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013ea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80013f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
}
 80013f4:	bd10      	pop	{r4, pc}

080013f6 <HAL_SPI_Transmit>:
{
 80013f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80013fa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80013fc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001400:	2b01      	cmp	r3, #1
{
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001408:	f000 809b 	beq.w	8001542 <HAL_SPI_Transmit+0x14c>
 800140c:	2301      	movs	r3, #1
 800140e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001412:	f7ff f91f 	bl	8000654 <HAL_GetTick>
 8001416:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001418:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800141c:	b2c0      	uxtb	r0, r0
 800141e:	2801      	cmp	r0, #1
 8001420:	f040 808d 	bne.w	800153e <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8001424:	2d00      	cmp	r5, #0
 8001426:	d05d      	beq.n	80014e4 <HAL_SPI_Transmit+0xee>
 8001428:	f1b8 0f00 	cmp.w	r8, #0
 800142c:	d05a      	beq.n	80014e4 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800142e:	2303      	movs	r3, #3
 8001430:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001434:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001436:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001438:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800143a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800143c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001440:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001442:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001444:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001446:	6420      	str	r0, [r4, #64]	; 0x40
 8001448:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800144a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800144c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001450:	bf08      	it	eq
 8001452:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001454:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001458:	bf04      	itt	eq
 800145a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800145e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001460:	6803      	ldr	r3, [r0, #0]
 8001462:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001464:	bf5e      	ittt	pl
 8001466:	6803      	ldrpl	r3, [r0, #0]
 8001468:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800146c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800146e:	68e3      	ldr	r3, [r4, #12]
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001474:	6863      	ldr	r3, [r4, #4]
 8001476:	d13e      	bne.n	80014f6 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001478:	b113      	cbz	r3, 8001480 <HAL_SPI_Transmit+0x8a>
 800147a:	f1b8 0f01 	cmp.w	r8, #1
 800147e:	d107      	bne.n	8001490 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001480:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001484:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001486:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001488:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001490:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001492:	b29b      	uxth	r3, r3
 8001494:	b9a3      	cbnz	r3, 80014c0 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001496:	463a      	mov	r2, r7
 8001498:	4631      	mov	r1, r6
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff ff40 	bl	8001320 <SPI_EndRxTxTransaction>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d149      	bne.n	8001538 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014a4:	68a3      	ldr	r3, [r4, #8]
 80014a6:	b933      	cbnz	r3, 80014b6 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80014b8:	3000      	adds	r0, #0
 80014ba:	bf18      	it	ne
 80014bc:	2001      	movne	r0, #1
 80014be:	e011      	b.n	80014e4 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	6893      	ldr	r3, [r2, #8]
 80014c4:	0798      	lsls	r0, r3, #30
 80014c6:	d505      	bpl.n	80014d4 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80014ce:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014d0:	6323      	str	r3, [r4, #48]	; 0x30
 80014d2:	e7d9      	b.n	8001488 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014d4:	f7ff f8be 	bl	8000654 <HAL_GetTick>
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	42b0      	cmp	r0, r6
 80014dc:	d3d8      	bcc.n	8001490 <HAL_SPI_Transmit+0x9a>
 80014de:	1c71      	adds	r1, r6, #1
 80014e0:	d0d6      	beq.n	8001490 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80014e2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80014ea:	2300      	movs	r3, #0
 80014ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80014f0:	b002      	add	sp, #8
 80014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014f6:	b113      	cbz	r3, 80014fe <HAL_SPI_Transmit+0x108>
 80014f8:	f1b8 0f01 	cmp.w	r8, #1
 80014fc:	d108      	bne.n	8001510 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014fe:	782b      	ldrb	r3, [r5, #0]
 8001500:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001504:	3301      	adds	r3, #1
 8001506:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001508:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001510:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0be      	beq.n	8001496 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	0792      	lsls	r2, r2, #30
 800151e:	d503      	bpl.n	8001528 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001520:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	731a      	strb	r2, [r3, #12]
 8001526:	e7ec      	b.n	8001502 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001528:	f7ff f894 	bl	8000654 <HAL_GetTick>
 800152c:	1bc0      	subs	r0, r0, r7
 800152e:	4286      	cmp	r6, r0
 8001530:	d8ee      	bhi.n	8001510 <HAL_SPI_Transmit+0x11a>
 8001532:	1c73      	adds	r3, r6, #1
 8001534:	d0ec      	beq.n	8001510 <HAL_SPI_Transmit+0x11a>
 8001536:	e7d4      	b.n	80014e2 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001538:	2320      	movs	r3, #32
 800153a:	6563      	str	r3, [r4, #84]	; 0x54
 800153c:	e7b2      	b.n	80014a4 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 800153e:	2002      	movs	r0, #2
 8001540:	e7d0      	b.n	80014e4 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001542:	2002      	movs	r0, #2
 8001544:	e7d4      	b.n	80014f0 <HAL_SPI_Transmit+0xfa>

08001546 <HAL_TIM_PeriodElapsedCallback>:
 8001546:	4770      	bx	lr

08001548 <HAL_TIM_OC_DelayElapsedCallback>:
 8001548:	4770      	bx	lr

0800154a <HAL_TIM_IC_CaptureCallback>:
 800154a:	4770      	bx	lr

0800154c <HAL_TIM_PWM_PulseFinishedCallback>:
 800154c:	4770      	bx	lr

0800154e <HAL_TIM_TriggerCallback>:
 800154e:	4770      	bx	lr

08001550 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001550:	6803      	ldr	r3, [r0, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	0791      	lsls	r1, r2, #30
{
 8001556:	b510      	push	{r4, lr}
 8001558:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800155a:	d50e      	bpl.n	800157a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	0792      	lsls	r2, r2, #30
 8001560:	d50b      	bpl.n	800157a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001562:	f06f 0202 	mvn.w	r2, #2
 8001566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001568:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800156c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001570:	d077      	beq.n	8001662 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001572:	f7ff ffea 	bl	800154a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	2300      	movs	r3, #0
 8001578:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	0750      	lsls	r0, r2, #29
 8001580:	d510      	bpl.n	80015a4 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	0751      	lsls	r1, r2, #29
 8001586:	d50d      	bpl.n	80015a4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001588:	f06f 0204 	mvn.w	r2, #4
 800158c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800158e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001590:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001592:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001596:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001598:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800159a:	d068      	beq.n	800166e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800159c:	f7ff ffd5 	bl	800154a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a0:	2300      	movs	r3, #0
 80015a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	0712      	lsls	r2, r2, #28
 80015aa:	d50f      	bpl.n	80015cc <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	0710      	lsls	r0, r2, #28
 80015b0:	d50c      	bpl.n	80015cc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015b2:	f06f 0208 	mvn.w	r2, #8
 80015b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015b8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ba:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015bc:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015be:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015c2:	d05a      	beq.n	800167a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015c4:	f7ff ffc1 	bl	800154a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c8:	2300      	movs	r3, #0
 80015ca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	06d2      	lsls	r2, r2, #27
 80015d2:	d510      	bpl.n	80015f6 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	06d0      	lsls	r0, r2, #27
 80015d8:	d50d      	bpl.n	80015f6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015da:	f06f 0210 	mvn.w	r2, #16
 80015de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015e2:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015e8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015ec:	d04b      	beq.n	8001686 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80015ee:	f7ff ffac 	bl	800154a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	2300      	movs	r3, #0
 80015f4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	07d1      	lsls	r1, r2, #31
 80015fc:	d508      	bpl.n	8001610 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	07d2      	lsls	r2, r2, #31
 8001602:	d505      	bpl.n	8001610 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001604:	f06f 0201 	mvn.w	r2, #1
 8001608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff ff9b 	bl	8001546 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	0610      	lsls	r0, r2, #24
 8001616:	d508      	bpl.n	800162a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	0611      	lsls	r1, r2, #24
 800161c:	d505      	bpl.n	800162a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800161e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001624:	4620      	mov	r0, r4
 8001626:	f000 f976 	bl	8001916 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	0652      	lsls	r2, r2, #25
 8001630:	d508      	bpl.n	8001644 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	0650      	lsls	r0, r2, #25
 8001636:	d505      	bpl.n	8001644 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800163c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff ff85 	bl	800154e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	0691      	lsls	r1, r2, #26
 800164a:	d522      	bpl.n	8001692 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	0692      	lsls	r2, r2, #26
 8001650:	d51f      	bpl.n	8001692 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001652:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001656:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001658:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800165e:	f000 b959 	b.w	8001914 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	f7ff ff71 	bl	8001548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff ff70 	bl	800154c <HAL_TIM_PWM_PulseFinishedCallback>
 800166c:	e783      	b.n	8001576 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166e:	f7ff ff6b 	bl	8001548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff ff6a 	bl	800154c <HAL_TIM_PWM_PulseFinishedCallback>
 8001678:	e792      	b.n	80015a0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167a:	f7ff ff65 	bl	8001548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167e:	4620      	mov	r0, r4
 8001680:	f7ff ff64 	bl	800154c <HAL_TIM_PWM_PulseFinishedCallback>
 8001684:	e7a0      	b.n	80015c8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	f7ff ff5f 	bl	8001548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff ff5e 	bl	800154c <HAL_TIM_PWM_PulseFinishedCallback>
 8001690:	e7af      	b.n	80015f2 <HAL_TIM_IRQHandler+0xa2>
 8001692:	bd10      	pop	{r4, pc}

08001694 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001694:	4a24      	ldr	r2, [pc, #144]	; (8001728 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001696:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001698:	4290      	cmp	r0, r2
 800169a:	d00e      	beq.n	80016ba <TIM_Base_SetConfig+0x26>
 800169c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016a0:	d00b      	beq.n	80016ba <TIM_Base_SetConfig+0x26>
 80016a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016a6:	4290      	cmp	r0, r2
 80016a8:	d007      	beq.n	80016ba <TIM_Base_SetConfig+0x26>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4290      	cmp	r0, r2
 80016b0:	d003      	beq.n	80016ba <TIM_Base_SetConfig+0x26>
 80016b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b6:	4290      	cmp	r0, r2
 80016b8:	d115      	bne.n	80016e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016c2:	4a19      	ldr	r2, [pc, #100]	; (8001728 <TIM_Base_SetConfig+0x94>)
 80016c4:	4290      	cmp	r0, r2
 80016c6:	d019      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016cc:	d016      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d012      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016da:	4290      	cmp	r0, r2
 80016dc:	d00e      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d00a      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <TIM_Base_SetConfig+0x98>)
 80016e8:	4290      	cmp	r0, r2
 80016ea:	d007      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016f0:	4290      	cmp	r0, r2
 80016f2:	d003      	beq.n	80016fc <TIM_Base_SetConfig+0x68>
 80016f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016f8:	4290      	cmp	r0, r2
 80016fa:	d103      	bne.n	8001704 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016fc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001702:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001704:	694a      	ldr	r2, [r1, #20]
 8001706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800170a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800170c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800170e:	688b      	ldr	r3, [r1, #8]
 8001710:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001712:	680b      	ldr	r3, [r1, #0]
 8001714:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <TIM_Base_SetConfig+0x94>)
 8001718:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800171a:	bf04      	itt	eq
 800171c:	690b      	ldreq	r3, [r1, #16]
 800171e:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001720:	2301      	movs	r3, #1
 8001722:	6143      	str	r3, [r0, #20]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40010000 	.word	0x40010000
 800172c:	40014000 	.word	0x40014000

08001730 <HAL_TIM_Base_Init>:
{
 8001730:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001732:	4604      	mov	r4, r0
 8001734:	b1a0      	cbz	r0, 8001760 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800173a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173e:	b91b      	cbnz	r3, 8001748 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001740:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001744:	f000 ff76 	bl	8002634 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	2302      	movs	r3, #2
 800174a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174e:	6820      	ldr	r0, [r4, #0]
 8001750:	1d21      	adds	r1, r4, #4
 8001752:	f7ff ff9f 	bl	8001694 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001756:	2301      	movs	r3, #1
 8001758:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800175c:	2000      	movs	r0, #0
 800175e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001760:	2001      	movs	r0, #1
}
 8001762:	bd10      	pop	{r4, pc}

08001764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001764:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001766:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001768:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800176a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800176e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001772:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001774:	6083      	str	r3, [r0, #8]
 8001776:	bd10      	pop	{r4, pc}

08001778 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001778:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800177c:	2b01      	cmp	r3, #1
{
 800177e:	b570      	push	{r4, r5, r6, lr}
 8001780:	4604      	mov	r4, r0
 8001782:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001786:	d019      	beq.n	80017bc <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001788:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800178c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800178e:	2301      	movs	r3, #1
 8001790:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001794:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800179a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800179e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80017a0:	680b      	ldr	r3, [r1, #0]
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	d065      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xfa>
 80017a6:	d815      	bhi.n	80017d4 <HAL_TIM_ConfigClockSource+0x5c>
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d00c      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0x4e>
 80017ac:	d807      	bhi.n	80017be <HAL_TIM_ConfigClockSource+0x46>
 80017ae:	b153      	cbz	r3, 80017c6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80017b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d001      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0x4e>
 80017c2:	2b30      	cmp	r3, #48	; 0x30
 80017c4:	d1f4      	bne.n	80017b0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80017c6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017c8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80017cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017d0:	4313      	orrs	r3, r2
 80017d2:	e01a      	b.n	800180a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80017d4:	2b60      	cmp	r3, #96	; 0x60
 80017d6:	d034      	beq.n	8001842 <HAL_TIM_ConfigClockSource+0xca>
 80017d8:	d819      	bhi.n	800180e <HAL_TIM_ConfigClockSource+0x96>
 80017da:	2b50      	cmp	r3, #80	; 0x50
 80017dc:	d1e8      	bne.n	80017b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017de:	684a      	ldr	r2, [r1, #4]
 80017e0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80017e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017e4:	6a05      	ldr	r5, [r0, #32]
 80017e6:	f025 0501 	bic.w	r5, r5, #1
 80017ea:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017ec:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017ee:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017f6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80017fa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80017fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001800:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001806:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800180a:	6083      	str	r3, [r0, #8]
 800180c:	e7d0      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800180e:	2b70      	cmp	r3, #112	; 0x70
 8001810:	d00c      	beq.n	800182c <HAL_TIM_ConfigClockSource+0xb4>
 8001812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001816:	d1cb      	bne.n	80017b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001818:	68cb      	ldr	r3, [r1, #12]
 800181a:	684a      	ldr	r2, [r1, #4]
 800181c:	6889      	ldr	r1, [r1, #8]
 800181e:	f7ff ffa1 	bl	8001764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182a:	e008      	b.n	800183e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800182c:	68cb      	ldr	r3, [r1, #12]
 800182e:	684a      	ldr	r2, [r1, #4]
 8001830:	6889      	ldr	r1, [r1, #8]
 8001832:	f7ff ff97 	bl	8001764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800183a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800183e:	6093      	str	r3, [r2, #8]
      break;
 8001840:	e7b6      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001842:	684d      	ldr	r5, [r1, #4]
 8001844:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001846:	6a01      	ldr	r1, [r0, #32]
 8001848:	f021 0110 	bic.w	r1, r1, #16
 800184c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800184e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001850:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001852:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800185a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800185e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001862:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001864:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001866:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800186c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001870:	e7cb      	b.n	800180a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001872:	684a      	ldr	r2, [r1, #4]
 8001874:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001876:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001878:	6a05      	ldr	r5, [r0, #32]
 800187a:	f025 0501 	bic.w	r5, r5, #1
 800187e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001880:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001882:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800188a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800188e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001890:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001892:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001894:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800189a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800189e:	e7b4      	b.n	800180a <HAL_TIM_ConfigClockSource+0x92>

080018a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018a4:	2b01      	cmp	r3, #1
{
 80018a6:	b530      	push	{r4, r5, lr}
 80018a8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80018ac:	d02d      	beq.n	800190a <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018b2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018b4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80018b6:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80018b8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80018bc:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018be:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80018c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80018c4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018c6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c8:	4c11      	ldr	r4, [pc, #68]	; (8001910 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80018ca:	42a3      	cmp	r3, r4
 80018cc:	d012      	beq.n	80018f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80018ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d2:	d00f      	beq.n	80018f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80018d4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80018d8:	42a3      	cmp	r3, r4
 80018da:	d00b      	beq.n	80018f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80018dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018e0:	42a3      	cmp	r3, r4
 80018e2:	d007      	beq.n	80018f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80018e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018e8:	42a3      	cmp	r3, r4
 80018ea:	d003      	beq.n	80018f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80018ec:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80018f0:	42a3      	cmp	r3, r4
 80018f2:	d104      	bne.n	80018fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018f4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80018f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018fa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001904:	2300      	movs	r3, #0
 8001906:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800190a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800190c:	bd30      	pop	{r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	40010000 	.word	0x40010000

08001914 <HAL_TIMEx_CommutCallback>:
 8001914:	4770      	bx	lr

08001916 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001916:	4770      	bx	lr

08001918 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001920:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800192a:	2320      	movs	r3, #32
 800192c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001930:	4770      	bx	lr
	...

08001934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001934:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001936:	6803      	ldr	r3, [r0, #0]
 8001938:	68c1      	ldr	r1, [r0, #12]
 800193a:	691a      	ldr	r2, [r3, #16]
{
 800193c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800193e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001942:	430a      	orrs	r2, r1
 8001944:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001946:	6925      	ldr	r5, [r4, #16]
 8001948:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800194a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800194c:	69c0      	ldr	r0, [r0, #28]
 800194e:	432a      	orrs	r2, r5
 8001950:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001952:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001956:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001958:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800195c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800195e:	430a      	orrs	r2, r1
 8001960:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	69a1      	ldr	r1, [r4, #24]
 8001966:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800196a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800196c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001974:	d129      	bne.n	80019ca <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001976:	4293      	cmp	r3, r2
 8001978:	d003      	beq.n	8001982 <UART_SetConfig+0x4e>
 800197a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800197e:	4293      	cmp	r3, r2
 8001980:	d120      	bne.n	80019c4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001982:	f7ff fc81 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001986:	6862      	ldr	r2, [r4, #4]
 8001988:	6825      	ldr	r5, [r4, #0]
 800198a:	1892      	adds	r2, r2, r2
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	f04f 0119 	mov.w	r1, #25
 8001994:	415b      	adcs	r3, r3
 8001996:	fba0 0101 	umull	r0, r1, r0, r1
 800199a:	f7fe fc89 	bl	80002b0 <__aeabi_uldivmod>
 800199e:	2164      	movs	r1, #100	; 0x64
 80019a0:	fbb0 f4f1 	udiv	r4, r0, r1
 80019a4:	fb01 0314 	mls	r3, r1, r4, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	3332      	adds	r3, #50	; 0x32
 80019ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b0:	f003 0207 	and.w	r2, r3, #7
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80019ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019be:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019c0:	60ab      	str	r3, [r5, #8]
 80019c2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80019c4:	f7ff fc50 	bl	8001268 <HAL_RCC_GetPCLK1Freq>
 80019c8:	e7dd      	b.n	8001986 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d002      	beq.n	80019d4 <UART_SetConfig+0xa0>
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <UART_SetConfig+0xd8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d116      	bne.n	8001a02 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80019d4:	f7ff fc58 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	6825      	ldr	r5, [r4, #0]
 80019dc:	2119      	movs	r1, #25
 80019de:	009a      	lsls	r2, r3, #2
 80019e0:	fba0 0101 	umull	r0, r1, r0, r1
 80019e4:	0f9b      	lsrs	r3, r3, #30
 80019e6:	f7fe fc63 	bl	80002b0 <__aeabi_uldivmod>
 80019ea:	2264      	movs	r2, #100	; 0x64
 80019ec:	fbb0 f1f2 	udiv	r1, r0, r2
 80019f0:	fb02 0311 	mls	r3, r2, r1, r0
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	3332      	adds	r3, #50	; 0x32
 80019f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001a00:	e7de      	b.n	80019c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a02:	f7ff fc31 	bl	8001268 <HAL_RCC_GetPCLK1Freq>
 8001a06:	e7e7      	b.n	80019d8 <UART_SetConfig+0xa4>
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400

08001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	4604      	mov	r4, r0
 8001a14:	460e      	mov	r6, r1
 8001a16:	4617      	mov	r7, r2
 8001a18:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	680b      	ldr	r3, [r1, #0]
 8001a1e:	ea36 0303 	bics.w	r3, r6, r3
 8001a22:	d101      	bne.n	8001a28 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
}
 8001a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a28:	1c6b      	adds	r3, r5, #1
 8001a2a:	d0f7      	beq.n	8001a1c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a2c:	b995      	cbnz	r5, 8001a54 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001a40:	2320      	movs	r3, #32
 8001a42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a46:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001a50:	2003      	movs	r0, #3
 8001a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a54:	f7fe fdfe 	bl	8000654 <HAL_GetTick>
 8001a58:	1bc0      	subs	r0, r0, r7
 8001a5a:	4285      	cmp	r5, r0
 8001a5c:	d2dd      	bcs.n	8001a1a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001a5e:	e7e6      	b.n	8001a2e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001a60 <HAL_UART_Init>:
{
 8001a60:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001a62:	4604      	mov	r4, r0
 8001a64:	b340      	cbz	r0, 8001ab8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a6e:	b91b      	cbnz	r3, 8001a78 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a70:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a74:	f000 fe14 	bl	80026a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a7a:	2324      	movs	r3, #36	; 0x24
 8001a7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a80:	68d3      	ldr	r3, [r2, #12]
 8001a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a86:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ff53 	bl	8001934 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a9e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aa6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001aaa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ab2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ab6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
}
 8001aba:	bd10      	pop	{r4, pc}

08001abc <HAL_UART_Transmit>:
{
 8001abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ac6:	2b20      	cmp	r3, #32
{
 8001ac8:	4604      	mov	r4, r0
 8001aca:	460d      	mov	r5, r1
 8001acc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ace:	d151      	bne.n	8001b74 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	d04c      	beq.n	8001b6e <HAL_UART_Transmit+0xb2>
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d04a      	beq.n	8001b6e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001ad8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d049      	beq.n	8001b74 <HAL_UART_Transmit+0xb8>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aea:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aec:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001af4:	f7fe fdae 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001af8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001afc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001afe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001b02:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001b06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b95b      	cbnz	r3, 8001b24 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4632      	mov	r2, r6
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff ff7c 	bl	8001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b18:	b9a0      	cbnz	r0, 8001b44 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001b24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b2c:	68a3      	ldr	r3, [r4, #8]
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b32:	4632      	mov	r2, r6
 8001b34:	463b      	mov	r3, r7
 8001b36:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001b3a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b3c:	d10e      	bne.n	8001b5c <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3e:	f7ff ff67 	bl	8001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b42:	b110      	cbz	r0, 8001b4a <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b4a:	882b      	ldrh	r3, [r5, #0]
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b52:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b54:	6923      	ldr	r3, [r4, #16]
 8001b56:	b943      	cbnz	r3, 8001b6a <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001b58:	3502      	adds	r5, #2
 8001b5a:	e7d4      	b.n	8001b06 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5c:	f7ff ff58 	bl	8001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1ef      	bne.n	8001b44 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	782a      	ldrb	r2, [r5, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	3501      	adds	r5, #1
 8001b6c:	e7cb      	b.n	8001b06 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001b74:	2002      	movs	r0, #2
}
 8001b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b7a <HAL_UART_Receive>:
{
 8001b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b7e:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b80:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001b84:	2b20      	cmp	r3, #32
{
 8001b86:	4604      	mov	r4, r0
 8001b88:	460d      	mov	r5, r1
 8001b8a:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b8c:	d154      	bne.n	8001c38 <HAL_UART_Receive+0xbe>
    if ((pData == NULL) || (Size == 0U))
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	d04f      	beq.n	8001c32 <HAL_UART_Receive+0xb8>
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d04d      	beq.n	8001c32 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8001b96:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d04c      	beq.n	8001c38 <HAL_UART_Receive+0xbe>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba4:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ba8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001baa:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001bb2:	f7fe fd4f 	bl	8000654 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001bb6:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8001bba:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001bbc:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8001bc0:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8001bc4:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001bc6:	b280      	uxth	r0, r0
 8001bc8:	b920      	cbnz	r0, 8001bd4 <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->RxXferCount--;
 8001bd4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bdc:	68a3      	ldr	r3, [r4, #8]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001be2:	4632      	mov	r2, r6
 8001be4:	463b      	mov	r3, r7
 8001be6:	f04f 0120 	mov.w	r1, #32
 8001bea:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bec:	d112      	bne.n	8001c14 <HAL_UART_Receive+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bee:	f7ff ff0f 	bl	8001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bf2:	b110      	cbz	r0, 8001bfa <HAL_UART_Receive+0x80>
          return HAL_TIMEOUT;
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bfa:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bfc:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bfe:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c00:	b922      	cbnz	r2, 8001c0c <HAL_UART_Receive+0x92>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c06:	f825 3b02 	strh.w	r3, [r5], #2
 8001c0a:	e7db      	b.n	8001bc4 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f825 3b01 	strh.w	r3, [r5], #1
 8001c12:	e7d7      	b.n	8001bc4 <HAL_UART_Receive+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c14:	f7ff fefc 	bl	8001a10 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_UART_Receive+0x7a>
 8001c1c:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c1e:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c24:	b911      	cbnz	r1, 8001c2c <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c26:	702b      	strb	r3, [r5, #0]
 8001c28:	4615      	mov	r5, r2
 8001c2a:	e7cb      	b.n	8001bc4 <HAL_UART_Receive+0x4a>
 8001c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c30:	e7f9      	b.n	8001c26 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
 8001c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001c38:	2002      	movs	r0, #2
}
 8001c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001c40 <HAL_UART_Receive_DMA>:
{
 8001c40:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c42:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001c46:	2a20      	cmp	r2, #32
{
 8001c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c4a:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c4c:	d138      	bne.n	8001cc0 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d034      	beq.n	8001cbc <HAL_UART_Receive_DMA+0x7c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d032      	beq.n	8001cbc <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001c56:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001c5a:	2a01      	cmp	r2, #1
 8001c5c:	d030      	beq.n	8001cc0 <HAL_UART_Receive_DMA+0x80>
 8001c5e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c60:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001c62:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c66:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c68:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8001c6a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c6c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c6e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_UART_Receive_DMA+0x84>)
 8001c76:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c78:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_UART_Receive_DMA+0x88>)
 8001c7c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_UART_Receive_DMA+0x8c>)
 8001c80:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8001c82:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c84:	460a      	mov	r2, r1
 8001c86:	1d31      	adds	r1, r6, #4
 8001c88:	f7fe fe04 	bl	8000894 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	9401      	str	r4, [sp, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	9201      	str	r2, [sp, #4]
 8001c98:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c9a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8001c9c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb4:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001cb6:	4620      	mov	r0, r4
}
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e7fb      	b.n	8001cb8 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	e7f9      	b.n	8001cb8 <HAL_UART_Receive_DMA+0x78>
 8001cc4:	08001cd1 	.word	0x08001cd1
 8001cc8:	08001d0b 	.word	0x08001d0b
 8001ccc:	08001d17 	.word	0x08001d17

08001cd0 <UART_DMAReceiveCplt>:
{
 8001cd0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001cd2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001cdc:	d110      	bne.n	8001d00 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8001cde:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001ce8:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cea:	6959      	ldr	r1, [r3, #20]
 8001cec:	f021 0101 	bic.w	r1, r1, #1
 8001cf0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cf2:	6959      	ldr	r1, [r3, #20]
 8001cf4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001cf8:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001d00:	4610      	mov	r0, r2
 8001d02:	f000 fa1b 	bl	800213c <HAL_UART_RxCpltCallback>
 8001d06:	bd08      	pop	{r3, pc}

08001d08 <HAL_UART_RxHalfCpltCallback>:
 8001d08:	4770      	bx	lr

08001d0a <UART_DMARxHalfCplt>:
{
 8001d0a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8001d0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001d0e:	f7ff fffb 	bl	8001d08 <HAL_UART_RxHalfCpltCallback>
 8001d12:	bd08      	pop	{r3, pc}

08001d14 <HAL_UART_ErrorCallback>:
 8001d14:	4770      	bx	lr

08001d16 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d16:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001d18:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001d1a:	680b      	ldr	r3, [r1, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d1e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001d22:	2821      	cmp	r0, #33	; 0x21
 8001d24:	d10a      	bne.n	8001d3c <UART_DMAError+0x26>
 8001d26:	0612      	lsls	r2, r2, #24
 8001d28:	d508      	bpl.n	8001d3c <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001d34:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d36:	2220      	movs	r2, #32
 8001d38:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d3c:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001d3e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001d42:	2a22      	cmp	r2, #34	; 0x22
 8001d44:	d106      	bne.n	8001d54 <UART_DMAError+0x3e>
 8001d46:	065b      	lsls	r3, r3, #25
 8001d48:	d504      	bpl.n	8001d54 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001d4e:	4608      	mov	r0, r1
 8001d50:	f7ff fde2 	bl	8001918 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001d54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	f7ff ffd9 	bl	8001d14 <HAL_UART_ErrorCallback>
 8001d62:	bd08      	pop	{r3, pc}

08001d64 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 8001d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ST7735_Init();
 8001d66:	f000 fb4b 	bl	8002400 <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <init+0x28>)
 8001d6c:	6810      	ldr	r0, [r2, #0]
 8001d6e:	6851      	ldr	r1, [r2, #4]
 8001d70:	7a12      	ldrb	r2, [r2, #8]
 8001d72:	ab01      	add	r3, sp, #4
 8001d74:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 8001d76:	a901      	add	r1, sp, #4
    const char ready[] = "Ready!\r\n";
 8001d78:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <init+0x2c>)
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	2208      	movs	r2, #8
 8001d82:	f7ff fe9b 	bl	8001abc <HAL_UART_Transmit>
}
 8001d86:	b005      	add	sp, #20
 8001d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d8c:	08003cf8 	.word	0x08003cf8
 8001d90:	2000040c 	.word	0x2000040c

08001d94 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d96:	ac02      	add	r4, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 30000))
 8001d98:	4d07      	ldr	r5, [pc, #28]	; (8001db8 <__io_putchar+0x24>)
{
 8001d9a:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 30000))
 8001d9e:	f247 5330 	movw	r3, #30000	; 0x7530
 8001da2:	2201      	movs	r2, #1
 8001da4:	4621      	mov	r1, r4
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fe88 	bl	8001abc <HAL_UART_Transmit>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1f6      	bne.n	8001d9e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
}
 8001db0:	9801      	ldr	r0, [sp, #4]
 8001db2:	b003      	add	sp, #12
 8001db4:	bd30      	pop	{r4, r5, pc}
 8001db6:	bf00      	nop
 8001db8:	2000040c 	.word	0x2000040c

08001dbc <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8001dbe:	ac02      	add	r4, sp, #8
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 8001dc6:	4d07      	ldr	r5, [pc, #28]	; (8001de4 <__io_getchar+0x28>)
 8001dc8:	f247 5330 	movw	r3, #30000	; 0x7530
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4621      	mov	r1, r4
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f7ff fed2 	bl	8001b7a <HAL_UART_Receive>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d1f6      	bne.n	8001dc8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
}
 8001dda:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001dde:	b003      	add	sp, #12
 8001de0:	bd30      	pop	{r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	2000040c 	.word	0x2000040c

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b530      	push	{r4, r5, lr}
 8001dea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dec:	2230      	movs	r2, #48	; 0x30
 8001dee:	2100      	movs	r1, #0
 8001df0:	a808      	add	r0, sp, #32
 8001df2:	f000 fd69 	bl	80028c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df6:	2100      	movs	r1, #0
 8001df8:	2214      	movs	r2, #20
 8001dfa:	a803      	add	r0, sp, #12
 8001dfc:	f000 fd64 	bl	80028c8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	2500      	movs	r5, #0
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <SystemClock_Config+0x90>)
 8001e04:	9501      	str	r5, [sp, #4]
 8001e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e1a:	9502      	str	r5, [sp, #8]
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e40:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e42:	2304      	movs	r3, #4
 8001e44:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e46:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e4a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e54:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e56:	f7fe ff97 	bl	8000d88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e5e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e64:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e66:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e68:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e6a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6c:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e6e:	f7ff f95f 	bl	8001130 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001e72:	b015      	add	sp, #84	; 0x54
 8001e74:	bd30      	pop	{r4, r5, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <main>:
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0a0      	sub	sp, #128	; 0x80
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	2400      	movs	r4, #0
 8001e86:	4d97      	ldr	r5, [pc, #604]	; (80020e4 <main+0x264>)
  hi2c1.Init.ClockSpeed = 100000;
 8001e88:	4f97      	ldr	r7, [pc, #604]	; (80020e8 <main+0x268>)
  HAL_Init();
 8001e8a:	f7fe fbbd 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 8001e8e:	f7ff ffab 	bl	8001de8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	2214      	movs	r2, #20
 8001e94:	2100      	movs	r1, #0
 8001e96:	a807      	add	r0, sp, #28
 8001e98:	f000 fd16 	bl	80028c8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	9401      	str	r4, [sp, #4]
 8001e9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin, GPIO_PIN_RESET);
 8001ea0:	4892      	ldr	r0, [pc, #584]	; (80020ec <main+0x26c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	632b      	str	r3, [r5, #48]	; 0x30
 8001ea8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb2:	9402      	str	r4, [sp, #8]
 8001eb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eba:	632b      	str	r3, [r5, #48]	; 0x30
 8001ebc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	9403      	str	r4, [sp, #12]
 8001ec8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	632b      	str	r3, [r5, #48]	; 0x30
 8001ed0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	9303      	str	r3, [sp, #12]
 8001ed8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	9404      	str	r4, [sp, #16]
 8001edc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	632b      	str	r3, [r5, #48]	; 0x30
 8001ee4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin, GPIO_PIN_RESET);
 8001eea:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin, GPIO_PIN_RESET);
 8001eee:	f240 1103 	movw	r1, #259	; 0x103
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin, GPIO_PIN_RESET);
 8001ef4:	f7fe fe90 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ef8:	4622      	mov	r2, r4
 8001efa:	2120      	movs	r1, #32
 8001efc:	487c      	ldr	r0, [pc, #496]	; (80020f0 <main+0x270>)
 8001efe:	f7fe fe8b 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f02:	4622      	mov	r2, r4
 8001f04:	2101      	movs	r1, #1
 8001f06:	487b      	ldr	r0, [pc, #492]	; (80020f4 <main+0x274>)
 8001f08:	f7fe fe86 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f12:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f14:	4b78      	ldr	r3, [pc, #480]	; (80020f8 <main+0x278>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f16:	4875      	ldr	r0, [pc, #468]	; (80020ec <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f18:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : PC0 PC1 DHT22_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f7fe fdad 	bl	8000a7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin;
 8001f22:	f240 1303 	movw	r3, #259	; 0x103
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	a907      	add	r1, sp, #28
 8001f28:	4870      	ldr	r0, [pc, #448]	; (80020ec <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|DHT22_Pin;
 8001f2a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f7fe fda3 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f36:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f38:	a907      	add	r1, sp, #28
 8001f3a:	486d      	ldr	r0, [pc, #436]	; (80020f0 <main+0x270>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f3c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f7fe fd9a 	bl	8000a7c <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	a907      	add	r1, sp, #28
 8001f4a:	486a      	ldr	r0, [pc, #424]	; (80020f4 <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f4c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f7fe fd92 	bl	8000a7c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f58:	9400      	str	r4, [sp, #0]
 8001f5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f60:	632b      	str	r3, [r5, #48]	; 0x30
 8001f62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Instance = USART2;
 8001f64:	4d65      	ldr	r5, [pc, #404]	; (80020fc <main+0x27c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6e:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f70:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f72:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f74:	f7fe fba2 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f78:	2010      	movs	r0, #16
 8001f7a:	f7fe fbd3 	bl	8000724 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 8001f7e:	4860      	ldr	r0, [pc, #384]	; (8002100 <main+0x280>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f80:	4a60      	ldr	r2, [pc, #384]	; (8002104 <main+0x284>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f82:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f88:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f90:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001f92:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f98:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9a:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9c:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fa2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa4:	f7ff f9ea 	bl	800137c <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8001fa8:	4957      	ldr	r1, [pc, #348]	; (8002108 <main+0x288>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 8001fac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fb0:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb4:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fba:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	f7ff fd4d 	bl	8001a60 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 8001fc6:	4851      	ldr	r0, [pc, #324]	; (800210c <main+0x28c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <main+0x290>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fca:	6084      	str	r4, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fcc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001fd0:	e880 0088 	stmia.w	r0, {r3, r7}
  hi2c1.Init.OwnAddress1 = 0;
 8001fd4:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd6:	6106      	str	r6, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd8:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fda:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fdc:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe0:	f7fe fe26 	bl	8000c30 <HAL_I2C_Init>
  hi2c3.Instance = I2C3;
 8001fe4:	484b      	ldr	r0, [pc, #300]	; (8002114 <main+0x294>)
 8001fe6:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <main+0x298>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe8:	6106      	str	r6, [r0, #16]
  htim2.Instance = TIM2;
 8001fea:	4e4c      	ldr	r6, [pc, #304]	; (800211c <main+0x29c>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fec:	6084      	str	r4, [r0, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8001fee:	e880 0088 	stmia.w	r0, {r3, r7}
  hi2c3.Init.OwnAddress1 = 0;
 8001ff2:	60c4      	str	r4, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff4:	6144      	str	r4, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ff6:	6184      	str	r4, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff8:	61c4      	str	r4, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffa:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ffc:	f7fe fe18 	bl	8000c30 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002000:	2210      	movs	r2, #16
 8002002:	4621      	mov	r1, r4
 8002004:	a807      	add	r0, sp, #28
 8002006:	f000 fc5f 	bl	80028c8 <memset>
  htim2.Init.Prescaler = 83;
 800200a:	f04f 0953 	mov.w	r9, #83	; 0x53
 800200e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 0xffff;
 8002012:	f64f 78ff 	movw	r8, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002016:	4630      	mov	r0, r6
  htim2.Init.Prescaler = 83;
 8002018:	e886 0208 	stmia.w	r6, {r3, r9}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002022:	9405      	str	r4, [sp, #20]
 8002024:	9406      	str	r4, [sp, #24]
  htim2.Init.Period = 0xffff;
 8002026:	f8c6 800c 	str.w	r8, [r6, #12]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202e:	f7ff fb7f 	bl	8001730 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002032:	a907      	add	r1, sp, #28
 8002034:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002036:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002038:	f7ff fb9e 	bl	8001778 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203c:	a905      	add	r1, sp, #20
 800203e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	9405      	str	r4, [sp, #20]
  htim3.Instance = TIM3;
 8002042:	4e37      	ldr	r6, [pc, #220]	; (8002120 <main+0x2a0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002046:	f7ff fc2b 	bl	80018a0 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	2210      	movs	r2, #16
 800204c:	4621      	mov	r1, r4
 800204e:	a807      	add	r0, sp, #28
 8002050:	f000 fc3a 	bl	80028c8 <memset>
  htim3.Instance = TIM3;
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <main+0x2a4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002058:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 83;
 800205a:	e886 0208 	stmia.w	r6, {r3, r9}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002060:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	9405      	str	r4, [sp, #20]
 8002064:	9406      	str	r4, [sp, #24]
  htim3.Init.Period = 0xFFFF;
 8002066:	f8c6 800c 	str.w	r8, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800206a:	f7ff fb61 	bl	8001730 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800206e:	a907      	add	r1, sp, #28
 8002070:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002072:	9707      	str	r7, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002074:	f7ff fb80 	bl	8001778 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002078:	a905      	add	r1, sp, #20
 800207a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002080:	f7ff fc0e 	bl	80018a0 <HAL_TIMEx_MasterConfigSynchronization>
  init();
 8002084:	f7ff fe6e 	bl	8001d64 <init>
  sprintf(i,"MCU ID = %d",HAL_GetDEVID);
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <main+0x2a8>)
 800208a:	4928      	ldr	r1, [pc, #160]	; (800212c <main+0x2ac>)
if(flag_dma!=0){
 800208c:	4c28      	ldr	r4, [pc, #160]	; (8002130 <main+0x2b0>)
	at_wait_msg(byte2);
 800208e:	4e29      	ldr	r6, [pc, #164]	; (8002134 <main+0x2b4>)
  sprintf(i,"MCU ID = %d",HAL_GetDEVID);
 8002090:	a807      	add	r0, sp, #28
 8002092:	f000 fc9d 	bl	80029d0 <siprintf>
  HAL_UART_Transmit(&huart2,i,strlen(i),100);
 8002096:	a807      	add	r0, sp, #28
 8002098:	f7fe f8ac 	bl	80001f4 <strlen>
 800209c:	2364      	movs	r3, #100	; 0x64
 800209e:	b282      	uxth	r2, r0
 80020a0:	a907      	add	r1, sp, #28
 80020a2:	4628      	mov	r0, r5
 80020a4:	f7ff fd0a 	bl	8001abc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,"\n\r",2,100);
 80020a8:	2364      	movs	r3, #100	; 0x64
 80020aa:	2202      	movs	r2, #2
 80020ac:	4922      	ldr	r1, [pc, #136]	; (8002138 <main+0x2b8>)
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff fd04 	bl	8001abc <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(&huart2, &byte2, sizeof(byte2)-1);
 80020b4:	4628      	mov	r0, r5
 80020b6:	221b      	movs	r2, #27
 80020b8:	491e      	ldr	r1, [pc, #120]	; (8002134 <main+0x2b4>)
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80020ba:	4d0d      	ldr	r5, [pc, #52]	; (80020f0 <main+0x270>)
  HAL_UART_Receive_DMA(&huart2, &byte2, sizeof(byte2)-1);
 80020bc:	f7ff fdc0 	bl	8001c40 <HAL_UART_Receive_DMA>
if(flag_dma!=0){
 80020c0:	8823      	ldrh	r3, [r4, #0]
 80020c2:	b153      	cbz	r3, 80020da <main+0x25a>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80020c4:	2120      	movs	r1, #32
 80020c6:	4628      	mov	r0, r5
 80020c8:	f7fe fdab 	bl	8000c22 <HAL_GPIO_TogglePin>
	at_wait_msg(byte2);
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <main+0x2b4>)
 80020ce:	f000 f8c5 	bl	800225c <at_wait_msg>
	flag_dma=0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	8023      	strh	r3, [r4, #0]
    memset(byte2, -1, sizeof(char));
 80020d6:	23ff      	movs	r3, #255	; 0xff
 80020d8:	7033      	strb	r3, [r6, #0]
HAL_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7fe fac0 	bl	8000660 <HAL_Delay>
if(flag_dma!=0){
 80020e0:	e7ee      	b.n	80020c0 <main+0x240>
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	000186a0 	.word	0x000186a0
 80020ec:	40020800 	.word	0x40020800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	10210000 	.word	0x10210000
 80020fc:	2000040c 	.word	0x2000040c
 8002100:	200002dc 	.word	0x200002dc
 8002104:	40003800 	.word	0x40003800
 8002108:	40004400 	.word	0x40004400
 800210c:	20000338 	.word	0x20000338
 8002110:	40005400 	.word	0x40005400
 8002114:	20000288 	.word	0x20000288
 8002118:	40005c00 	.word	0x40005c00
 800211c:	200003cc 	.word	0x200003cc
 8002120:	2000038c 	.word	0x2000038c
 8002124:	40000400 	.word	0x40000400
 8002128:	08000689 	.word	0x08000689
 800212c:	08003d01 	.word	0x08003d01
 8002130:	200001f8 	.word	0x200001f8
 8002134:	2000020c 	.word	0x2000020c
 8002138:	08003d0d 	.word	0x08003d0d

0800213c <HAL_UART_RxCpltCallback>:

	/* UartReady = SET;
	 byte2[0]=byte1;
	  HAL_UART_Receive_DMA(&huart2, &byte1, 1);
*/
      flag_dma=1;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_UART_RxCpltCallback+0x10>)


	  HAL_UART_Receive_DMA(&huart2, &byte2,sizeof(byte2));
 800213e:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_UART_RxCpltCallback+0x14>)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <HAL_UART_RxCpltCallback+0x18>)
      flag_dma=1;
 8002142:	2201      	movs	r2, #1
 8002144:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart2, &byte2,sizeof(byte2));
 8002146:	221c      	movs	r2, #28
 8002148:	f7ff bd7a 	b.w	8001c40 <HAL_UART_Receive_DMA>
 800214c:	200001f8 	.word	0x200001f8
 8002150:	2000020c 	.word	0x2000020c
 8002154:	2000040c 	.word	0x2000040c

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	4770      	bx	lr
	...

0800215c <at_check_format>:
return 0;

}

 AT_Msg_Type at_check_format(AT_Msg_Data *data)
{
 800215c:	b513      	push	{r0, r1, r4, lr}
volatile uint16_t DEv_id=0;
 800215e:	2300      	movs	r3, #0
{
 8002160:	4604      	mov	r4, r0
 DEv_id=atoi(data->id);
 8002162:	3003      	adds	r0, #3
volatile uint16_t DEv_id=0;
 8002164:	f8ad 3006 	strh.w	r3, [sp, #6]
 DEv_id=atoi(data->id);
 8002168:	f000 fb7f 	bl	800286a <atoi>
 800216c:	b280      	uxth	r0, r0
 800216e:	f8ad 0006 	strh.w	r0, [sp, #6]
 if(strcmp(data->header, AT_HEADER) != 0)
 8002172:	4910      	ldr	r1, [pc, #64]	; (80021b4 <at_check_format+0x58>)
 8002174:	4620      	mov	r0, r4
 8002176:	f7fe f833 	bl	80001e0 <strcmp>
 800217a:	b9b0      	cbnz	r0, 80021aa <at_check_format+0x4e>
 {
        return Error;
 }
   if ( DEv_id != 369) {
 800217c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002180:	f240 1271 	movw	r2, #369	; 0x171
 8002184:	b29b      	uxth	r3, r3
 8002186:	4293      	cmp	r3, r2
 8002188:	d111      	bne.n	80021ae <at_check_format+0x52>
        return NOTME;
    }
    if (strcmp(data->command, AT_DEVICE_PROFILE) == 0) {
 800218a:	3406      	adds	r4, #6
 800218c:	490a      	ldr	r1, [pc, #40]	; (80021b8 <at_check_format+0x5c>)
 800218e:	4620      	mov	r0, r4
 8002190:	f7fe f826 	bl	80001e0 <strcmp>
 8002194:	b138      	cbz	r0, 80021a6 <at_check_format+0x4a>
        return DeviceProfile;
    }

    if (strcmp(data->command, AT_SET_DEVICE) == 0) {
 8002196:	4909      	ldr	r1, [pc, #36]	; (80021bc <at_check_format+0x60>)
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe f821 	bl	80001e0 <strcmp>
 800219e:	2800      	cmp	r0, #0
        return SetDevice;
 80021a0:	bf14      	ite	ne
 80021a2:	2002      	movne	r0, #2
 80021a4:	2001      	moveq	r0, #1
    }

    return Error;
}
 80021a6:	b002      	add	sp, #8
 80021a8:	bd10      	pop	{r4, pc}
    return Error;
 80021aa:	2002      	movs	r0, #2
 80021ac:	e7fb      	b.n	80021a6 <at_check_format+0x4a>
        return NOTME;
 80021ae:	2003      	movs	r0, #3
 80021b0:	e7f9      	b.n	80021a6 <at_check_format+0x4a>
 80021b2:	bf00      	nop
 80021b4:	08003d10 	.word	0x08003d10
 80021b8:	08003d13 	.word	0x08003d13
 80021bc:	08003d16 	.word	0x08003d16

080021c0 <at_parse_msg>:
{
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4604      	mov	r4, r0
    AT_Msg_Type type = at_check_format(data);
 80021c4:	f7ff ffca 	bl	800215c <at_check_format>
    switch (type) {
 80021c8:	2803      	cmp	r0, #3
 80021ca:	d82f      	bhi.n	800222c <at_parse_msg+0x6c>
 80021cc:	e8df f000 	tbb	[pc, r0]
 80021d0:	2b2e0233 	.word	0x2b2e0233
      if(strcmp(data->data,Led_off)==0){
 80021d4:	3409      	adds	r4, #9
 80021d6:	4918      	ldr	r1, [pc, #96]	; (8002238 <at_parse_msg+0x78>)
 80021d8:	4620      	mov	r0, r4
 80021da:	f7fe f801 	bl	80001e0 <strcmp>
 80021de:	b928      	cbnz	r0, 80021ec <at_parse_msg+0x2c>
        printf("settings %s\r\n", data->data);
 80021e0:	4621      	mov	r1, r4
    	  printf("settings %s\r\n", data->data);
 80021e2:	4816      	ldr	r0, [pc, #88]	; (800223c <at_parse_msg+0x7c>)
}
 80021e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	  printf("settings %s\r\n", data->data);
 80021e8:	f000 bb76 	b.w	80028d8 <iprintf>
      else if(strcmp(data->data,Led_on)==0){
 80021ec:	4914      	ldr	r1, [pc, #80]	; (8002240 <at_parse_msg+0x80>)
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fd fff6 	bl	80001e0 <strcmp>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d0f3      	beq.n	80021e0 <at_parse_msg+0x20>
      else if(strcmp(data->data,relay1_off)==0){
 80021f8:	4912      	ldr	r1, [pc, #72]	; (8002244 <at_parse_msg+0x84>)
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7fd fff0 	bl	80001e0 <strcmp>
 8002200:	2800      	cmp	r0, #0
 8002202:	d0ed      	beq.n	80021e0 <at_parse_msg+0x20>
      else  if(strcmp(data->data,relay1_on)==0){
 8002204:	4910      	ldr	r1, [pc, #64]	; (8002248 <at_parse_msg+0x88>)
 8002206:	4620      	mov	r0, r4
 8002208:	f7fd ffea 	bl	80001e0 <strcmp>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0e7      	beq.n	80021e0 <at_parse_msg+0x20>
      else if(strcmp(data->data,relay2_off)==0){
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <at_parse_msg+0x8c>)
 8002212:	4620      	mov	r0, r4
 8002214:	f7fd ffe4 	bl	80001e0 <strcmp>
 8002218:	2800      	cmp	r0, #0
 800221a:	d0e1      	beq.n	80021e0 <at_parse_msg+0x20>
      else if(strcmp(data->data,relay2_on)==0){
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <at_parse_msg+0x90>)
 800221e:	4620      	mov	r0, r4
 8002220:	f7fd ffde 	bl	80001e0 <strcmp>
 8002224:	e7dc      	b.n	80021e0 <at_parse_msg+0x20>
           printf("NOT ME\r\n");
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <at_parse_msg+0x94>)
 8002228:	f000 fbca 	bl	80029c0 <puts>
        printf("Error\r\n");
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <at_parse_msg+0x98>)
}
 800222e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("Error\r\n");
 8002232:	f000 bbc5 	b.w	80029c0 <puts>
 8002236:	bd10      	pop	{r4, pc}
 8002238:	08003d19 	.word	0x08003d19
 800223c:	08003d21 	.word	0x08003d21
 8002240:	08003d2f 	.word	0x08003d2f
 8002244:	08003d36 	.word	0x08003d36
 8002248:	08003d41 	.word	0x08003d41
 800224c:	08003d4b 	.word	0x08003d4b
 8002250:	08003d56 	.word	0x08003d56
 8002254:	08003d75 	.word	0x08003d75
 8002258:	08003d7d 	.word	0x08003d7d

0800225c <at_wait_msg>:
{
 800225c:	b530      	push	{r4, r5, lr}
for (int k=0 ;k<250;k++){target[k]='\0';}
 800225e:	2200      	movs	r2, #0
{
 8002260:	b0af      	sub	sp, #188	; 0xbc
 8002262:	4604      	mov	r4, r0
for (int k=0 ;k<250;k++){target[k]='\0';}
 8002264:	4613      	mov	r3, r2
 8002266:	a92e      	add	r1, sp, #184	; 0xb8
 8002268:	4411      	add	r1, r2
 800226a:	3201      	adds	r2, #1
 800226c:	2afa      	cmp	r2, #250	; 0xfa
 800226e:	f801 3cb0 	strb.w	r3, [r1, #-176]
 8002272:	d1f8      	bne.n	8002266 <at_wait_msg+0xa>
for (int q=0 ;q<sizeof(data.header);q++){data.header[q]='\0';}
 8002274:	2200      	movs	r2, #0
for (int x=0 ;x<sizeof(data.command);x++){data.command[x]='\0';}
 8002276:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800227a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800227e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
for (int q=0 ;q<sizeof(data.header);q++){data.header[q]='\0';}
 8002282:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8002286:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800228a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
for (int m=0 ;m<sizeof(data.data);m++){data.data[m]='\0';}
 800228e:	4613      	mov	r3, r2
 8002290:	a90b      	add	r1, sp, #44	; 0x2c
 8002292:	4411      	add	r1, r2
 8002294:	3201      	adds	r2, #1
 8002296:	2a80      	cmp	r2, #128	; 0x80
 8002298:	724b      	strb	r3, [r1, #9]
 800229a:	d1f9      	bne.n	8002290 <at_wait_msg+0x34>
pFch=strchr(text,AT_EOF);
 800229c:	2124      	movs	r1, #36	; 0x24
 800229e:	4620      	mov	r0, r4
for (int n=0 ;n<sizeof(data.id);n++){data.id[n]='\0';}
 80022a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80022a4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80022a8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
volatile int y=0;
 80022ac:	9301      	str	r3, [sp, #4]
pFch=strchr(text,AT_EOF);
 80022ae:	f000 fbb3 	bl	8002a18 <strchr>
pLch=strrchr(text,AT_EOF);
 80022b2:	2124      	movs	r1, #36	; 0x24
pFch=strchr(text,AT_EOF);
 80022b4:	4605      	mov	r5, r0
pLch=strrchr(text,AT_EOF);
 80022b6:	4620      	mov	r0, r4
 80022b8:	f000 fbbc 	bl	8002a34 <strrchr>
y=pLch-pFch;
 80022bc:	1b40      	subs	r0, r0, r5
 80022be:	9001      	str	r0, [sp, #4]
for(int g=0;g<(y-1);g++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	9a01      	ldr	r2, [sp, #4]
 80022c4:	3a01      	subs	r2, #1
 80022c6:	4293      	cmp	r3, r2
 80022c8:	db27      	blt.n	800231a <at_wait_msg+0xbe>
data.header[0]=target[0];
 80022ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80022ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
data.header[1]=target[1];
 80022d2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80022d6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
data.id[0]=target[2];
 80022da:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80022de:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
data.id[1]=target[3];
 80022e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80022e6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
data.id[2]=target[4];
 80022ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80022ee:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
data.command[0]=target[5];
 80022f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80022f6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
data.command [1]=target[6];
 80022fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80022fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
for(int y=0;y<strlen(target);y++){if(y>6){data.data[y-7]=target[y];}}
 8002302:	2400      	movs	r4, #0
 8002304:	a802      	add	r0, sp, #8
 8002306:	f7fd ff75 	bl	80001f4 <strlen>
 800230a:	42a0      	cmp	r0, r4
 800230c:	d80f      	bhi.n	800232e <at_wait_msg+0xd2>
at_parse_msg(&data);
 800230e:	a80b      	add	r0, sp, #44	; 0x2c
 8002310:	f7ff ff56 	bl	80021c0 <at_parse_msg>
}
 8002314:	2000      	movs	r0, #0
 8002316:	b02f      	add	sp, #188	; 0xbc
 8002318:	bd30      	pop	{r4, r5, pc}
  if(g==0){*text++;}
 800231a:	b903      	cbnz	r3, 800231e <at_wait_msg+0xc2>
 800231c:	3401      	adds	r4, #1
target[g]=*(text++);
 800231e:	aa2e      	add	r2, sp, #184	; 0xb8
 8002320:	441a      	add	r2, r3
 8002322:	7821      	ldrb	r1, [r4, #0]
 8002324:	f802 1cb0 	strb.w	r1, [r2, #-176]
for(int g=0;g<(y-1);g++){
 8002328:	3301      	adds	r3, #1
target[g]=*(text++);
 800232a:	3401      	adds	r4, #1
 800232c:	e7c9      	b.n	80022c2 <at_wait_msg+0x66>
for(int y=0;y<strlen(target);y++){if(y>6){data.data[y-7]=target[y];}}
 800232e:	2c06      	cmp	r4, #6
 8002330:	dd06      	ble.n	8002340 <at_wait_msg+0xe4>
 8002332:	ab2e      	add	r3, sp, #184	; 0xb8
 8002334:	4423      	add	r3, r4
 8002336:	f813 2cb0 	ldrb.w	r2, [r3, #-176]
 800233a:	ab0b      	add	r3, sp, #44	; 0x2c
 800233c:	4423      	add	r3, r4
 800233e:	709a      	strb	r2, [r3, #2]
 8002340:	3401      	adds	r4, #1
 8002342:	e7df      	b.n	8002304 <at_wait_msg+0xa8>

08002344 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2102      	movs	r1, #2
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <ST7735_Select+0xc>)
 800234a:	f7fe bc65 	b.w	8000c18 <HAL_GPIO_WritePin>
 800234e:	bf00      	nop
 8002350:	40020800 	.word	0x40020800

08002354 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8002354:	b513      	push	{r0, r1, r4, lr}
 8002356:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
static void ST7735_WriteCommand(uint8_t cmd) {
 800235a:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800235e:	2101      	movs	r1, #1
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <ST7735_WriteCommand+0x24>)
 8002362:	f7fe fc59 	bl	8000c18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	2201      	movs	r2, #1
 800236c:	4621      	mov	r1, r4
 800236e:	4803      	ldr	r0, [pc, #12]	; (800237c <ST7735_WriteCommand+0x28>)
 8002370:	f7ff f841 	bl	80013f6 <HAL_SPI_Transmit>
}
 8002374:	b002      	add	sp, #8
 8002376:	bd10      	pop	{r4, pc}
 8002378:	40020400 	.word	0x40020400
 800237c:	200002dc 	.word	0x200002dc

08002380 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002380:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <ST7735_WriteData+0x24>)
 800238a:	4611      	mov	r1, r2
 800238c:	f7fe fc44 	bl	8000c18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002390:	b2aa      	uxth	r2, r5
 8002392:	4621      	mov	r1, r4
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <ST7735_WriteData+0x28>)
}
 800239a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800239e:	f7ff b82a 	b.w	80013f6 <HAL_SPI_Transmit>
 80023a2:	bf00      	nop
 80023a4:	40020400 	.word	0x40020400
 80023a8:	200002dc 	.word	0x200002dc

080023ac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80023ae:	7805      	ldrb	r5, [r0, #0]
 80023b0:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 80023b2:	b905      	cbnz	r5, 80023b6 <ST7735_ExecuteCommandList+0xa>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 80023b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 80023b6:	4634      	mov	r4, r6
 80023b8:	f814 0b02 	ldrb.w	r0, [r4], #2
 80023bc:	f7ff ffca 	bl	8002354 <ST7735_WriteCommand>
        numArgs = *addr++;
 80023c0:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 80023c2:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 80023c6:	d004      	beq.n	80023d2 <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80023c8:	4620      	mov	r0, r4
 80023ca:	4639      	mov	r1, r7
 80023cc:	f7ff ffd8 	bl	8002380 <ST7735_WriteData>
            addr += numArgs;
 80023d0:	443c      	add	r4, r7
        if(ms) {
 80023d2:	0633      	lsls	r3, r6, #24
 80023d4:	d508      	bpl.n	80023e8 <ST7735_ExecuteCommandList+0x3c>
            ms = *addr++;
 80023d6:	7820      	ldrb	r0, [r4, #0]
            if(ms == 255) ms = 500;
 80023d8:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 80023da:	bf08      	it	eq
 80023dc:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80023e0:	f7fe f93e 	bl	8000660 <HAL_Delay>
            ms = *addr++;
 80023e4:	1c66      	adds	r6, r4, #1
 80023e6:	4634      	mov	r4, r6
 80023e8:	3d01      	subs	r5, #1
 80023ea:	b2ed      	uxtb	r5, r5
 80023ec:	4626      	mov	r6, r4
 80023ee:	e7e0      	b.n	80023b2 <ST7735_ExecuteCommandList+0x6>

080023f0 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2102      	movs	r1, #2
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <ST7735_Unselect+0xc>)
 80023f6:	f7fe bc0f 	b.w	8000c18 <HAL_GPIO_WritePin>
 80023fa:	bf00      	nop
 80023fc:	40020800 	.word	0x40020800

08002400 <ST7735_Init>:

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}

void ST7735_Init() {
 8002400:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002402:	4c0e      	ldr	r4, [pc, #56]	; (800243c <ST7735_Init+0x3c>)
    ST7735_Select();
 8002404:	f7ff ff9e 	bl	8002344 <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2101      	movs	r1, #1
 800240c:	4620      	mov	r0, r4
 800240e:	f7fe fc03 	bl	8000c18 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002412:	2005      	movs	r0, #5
 8002414:	f7fe f924 	bl	8000660 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002418:	2201      	movs	r2, #1
 800241a:	4611      	mov	r1, r2
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe fbfb 	bl	8000c18 <HAL_GPIO_WritePin>
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <ST7735_Init+0x40>)
 8002424:	f7ff ffc2 	bl	80023ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <ST7735_Init+0x44>)
 800242a:	f7ff ffbf 	bl	80023ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <ST7735_Init+0x48>)
 8002430:	f7ff ffbc 	bl	80023ac <ST7735_ExecuteCommandList>
    ST7735_Unselect();
}
 8002434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8002438:	f7ff bfda 	b.w	80023f0 <ST7735_Unselect>
 800243c:	40020800 	.word	0x40020800
 8002440:	08003d84 	.word	0x08003d84
 8002444:	08003dbf 	.word	0x08003dbf
 8002448:	08003dcc 	.word	0x08003dcc

0800244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_MspInit+0x3c>)
 8002450:	2100      	movs	r1, #0
 8002452:	9100      	str	r1, [sp, #0]
 8002454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
 800245c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800245e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002462:	9200      	str	r2, [sp, #0]
 8002464:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	9101      	str	r1, [sp, #4]
 8002468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002478:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800247c:	f7fe f90c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002480:	b003      	add	sp, #12
 8002482:	f85d fb04 	ldr.w	pc, [sp], #4
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800248c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	2214      	movs	r2, #20
{
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	2100      	movs	r1, #0
 8002498:	eb0d 0002 	add.w	r0, sp, r2
 800249c:	f000 fa14 	bl	80028c8 <memset>
  if(hi2c->Instance==I2C1)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	4a37      	ldr	r2, [pc, #220]	; (8002580 <HAL_I2C_MspInit+0xf4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d126      	bne.n	80024f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4c36      	ldr	r4, [pc, #216]	; (8002584 <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	4837      	ldr	r0, [pc, #220]	; (8002588 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ac:	2500      	movs	r5, #0
 80024ae:	9500      	str	r5, [sp, #0]
 80024b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	6323      	str	r3, [r4, #48]	; 0x30
 80024b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c2:	23c0      	movs	r3, #192	; 0xc0
 80024c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c6:	2312      	movs	r3, #18
 80024c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ca:	2301      	movs	r3, #1
 80024cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d4:	2304      	movs	r3, #4
 80024d6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f7fe fad0 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024dc:	9501      	str	r5, [sp, #4]
 80024de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e4:	6423      	str	r3, [r4, #64]	; 0x40
 80024e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024f0:	b00b      	add	sp, #44	; 0x2c
 80024f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hi2c->Instance==I2C3)
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <HAL_I2C_MspInit+0x100>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d1f9      	bne.n	80024f0 <HAL_I2C_MspInit+0x64>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fc:	4c21      	ldr	r4, [pc, #132]	; (8002584 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	4824      	ldr	r0, [pc, #144]	; (8002590 <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002500:	2500      	movs	r5, #0
 8002502:	9502      	str	r5, [sp, #8]
 8002504:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6323      	str	r3, [r4, #48]	; 0x30
 800250c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	9503      	str	r5, [sp, #12]
 8002518:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6323      	str	r3, [r4, #48]	; 0x30
 8002520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	9303      	str	r3, [sp, #12]
 8002528:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800252a:	f04f 0912 	mov.w	r9, #18
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800252e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002532:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002538:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800253c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002542:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002548:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f7fe fa97 	bl	8000a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	a905      	add	r1, sp, #20
 8002554:	480f      	ldr	r0, [pc, #60]	; (8002594 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002556:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255c:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002562:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f7fe fa8a 	bl	8000a7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002568:	9504      	str	r5, [sp, #16]
 800256a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800256c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002570:	6423      	str	r3, [r4, #64]	; 0x40
 8002572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002578:	9304      	str	r3, [sp, #16]
 800257a:	9b04      	ldr	r3, [sp, #16]
}
 800257c:	e7b8      	b.n	80024f0 <HAL_I2C_MspInit+0x64>
 800257e:	bf00      	nop
 8002580:	40005400 	.word	0x40005400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400
 800258c:	40005c00 	.word	0x40005c00
 8002590:	40020800 	.word	0x40020800
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	4604      	mov	r4, r0
 800259c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	2214      	movs	r2, #20
 80025a0:	2100      	movs	r1, #0
 80025a2:	a803      	add	r0, sp, #12
 80025a4:	f000 f990 	bl	80028c8 <memset>
  if(hspi->Instance==SPI2)
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_SPI_MspInit+0x90>)
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d138      	bne.n	8002622 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025b0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80025b4:	2400      	movs	r4, #0
 80025b6:	9400      	str	r4, [sp, #0]
 80025b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	481c      	ldr	r0, [pc, #112]	; (800262c <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
 80025c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025cc:	9401      	str	r4, [sp, #4]
 80025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
 80025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d8:	f002 0204 	and.w	r2, r2, #4
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	9402      	str	r4, [sp, #8]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	f042 0202 	orr.w	r2, r2, #2
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025f4:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025fe:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002600:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002606:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f7fe fa38 	bl	8000a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	a903      	add	r1, sp, #12
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800261c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f7fe fa2d 	bl	8000a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002622:	b009      	add	sp, #36	; 0x24
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002626:	bf00      	nop
 8002628:	40003800 	.word	0x40003800
 800262c:	40020800 	.word	0x40020800
 8002630:	40020400 	.word	0x40020400

08002634 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800263a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800263c:	d116      	bne.n	800266c <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	2200      	movs	r2, #0
 8002640:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002644:	9200      	str	r2, [sp, #0]
 8002646:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002648:	f041 0101 	orr.w	r1, r1, #1
 800264c:	6419      	str	r1, [r3, #64]	; 0x40
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002656:	201c      	movs	r0, #28
 8002658:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800265c:	f7fe f82e 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002660:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002662:	f7fe f85f 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002666:	b003      	add	sp, #12
 8002668:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_TIM_Base_MspInit+0x64>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d1f9      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002672:	2200      	movs	r2, #0
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_TIM_Base_MspInit+0x68>)
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800267a:	f041 0102 	orr.w	r1, r1, #2
 800267e:	6419      	str	r1, [r3, #64]	; 0x40
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002688:	201d      	movs	r0, #29
 800268a:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800268e:	f7fe f815 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002692:	201d      	movs	r0, #29
 8002694:	e7e5      	b.n	8002662 <HAL_TIM_Base_MspInit+0x2e>
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4606      	mov	r6, r0
 80026a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a6:	2214      	movs	r2, #20
 80026a8:	2100      	movs	r1, #0
 80026aa:	a803      	add	r0, sp, #12
 80026ac:	f000 f90c 	bl	80028c8 <memset>
  if(huart->Instance==USART2)
 80026b0:	6832      	ldr	r2, [r6, #0]
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_UART_MspInit+0x90>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d138      	bne.n	800272a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b8:	2500      	movs	r5, #0
 80026ba:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80026be:	9501      	str	r5, [sp, #4]
 80026c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	481c      	ldr	r0, [pc, #112]	; (8002734 <HAL_UART_MspInit+0x94>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026c4:	4c1c      	ldr	r4, [pc, #112]	; (8002738 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	9502      	str	r5, [sp, #8]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ea:	230c      	movs	r3, #12
 80026ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f4:	2307      	movs	r3, #7
 80026f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f7fe f9c0 	bl	8000a7c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_UART_MspInit+0x9c>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fe:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002704:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002708:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800270e:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002710:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002712:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002714:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002716:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002718:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800271c:	f7fe f83c 	bl	8000798 <HAL_DMA_Init>
 8002720:	b108      	cbz	r0, 8002726 <HAL_UART_MspInit+0x86>
    {
      Error_Handler();
 8002722:	f7ff fd19 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002726:	6374      	str	r4, [r6, #52]	; 0x34
 8002728:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272a:	b008      	add	sp, #32
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	bf00      	nop
 8002730:	40004400 	.word	0x40004400
 8002734:	40020000 	.word	0x40020000
 8002738:	20000228 	.word	0x20000228
 800273c:	40026088 	.word	0x40026088

08002740 <NMI_Handler>:
 8002740:	4770      	bx	lr

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	e7fe      	b.n	8002744 <MemManage_Handler>

08002746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler>

0800274a <SVC_Handler>:
 800274a:	4770      	bx	lr

0800274c <DebugMon_Handler>:
 800274c:	4770      	bx	lr

0800274e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274e:	4770      	bx	lr

08002750 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002750:	f7fd bf74 	b.w	800063c <HAL_IncTick>

08002754 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002754:	4801      	ldr	r0, [pc, #4]	; (800275c <DMA1_Stream5_IRQHandler+0x8>)
 8002756:	f7fe b8d7 	b.w	8000908 <HAL_DMA_IRQHandler>
 800275a:	bf00      	nop
 800275c:	20000228 	.word	0x20000228

08002760 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002760:	4801      	ldr	r0, [pc, #4]	; (8002768 <TIM2_IRQHandler+0x8>)
 8002762:	f7fe bef5 	b.w	8001550 <HAL_TIM_IRQHandler>
 8002766:	bf00      	nop
 8002768:	200003cc 	.word	0x200003cc

0800276c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800276c:	4801      	ldr	r0, [pc, #4]	; (8002774 <TIM3_IRQHandler+0x8>)
 800276e:	f7fe beef 	b.w	8001550 <HAL_TIM_IRQHandler>
 8002772:	bf00      	nop
 8002774:	2000038c 	.word	0x2000038c

08002778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	460e      	mov	r6, r1
 800277c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277e:	460c      	mov	r4, r1
 8002780:	1ba3      	subs	r3, r4, r6
 8002782:	429d      	cmp	r5, r3
 8002784:	dc01      	bgt.n	800278a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002786:	4628      	mov	r0, r5
 8002788:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800278a:	f7ff fb17 	bl	8001dbc <__io_getchar>
 800278e:	f804 0b01 	strb.w	r0, [r4], #1
 8002792:	e7f5      	b.n	8002780 <_read+0x8>

08002794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	460e      	mov	r6, r1
 8002798:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	460c      	mov	r4, r1
 800279c:	1ba3      	subs	r3, r4, r6
 800279e:	429d      	cmp	r5, r3
 80027a0:	dc01      	bgt.n	80027a6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80027a2:	4628      	mov	r0, r5
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80027a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80027aa:	f7ff faf3 	bl	8001d94 <__io_putchar>
 80027ae:	e7f5      	b.n	800279c <_write+0x8>

080027b0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80027b0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <_sbrk+0x2c>)
 80027b4:	6819      	ldr	r1, [r3, #0]
{
 80027b6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80027b8:	b909      	cbnz	r1, 80027be <_sbrk+0xe>
		heap_end = &end;
 80027ba:	4909      	ldr	r1, [pc, #36]	; (80027e0 <_sbrk+0x30>)
 80027bc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80027be:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80027c0:	4669      	mov	r1, sp
 80027c2:	4402      	add	r2, r0
 80027c4:	428a      	cmp	r2, r1
 80027c6:	d906      	bls.n	80027d6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80027c8:	f000 f854 	bl	8002874 <__errno>
 80027cc:	230c      	movs	r3, #12
 80027ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80027d6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80027d8:	bd08      	pop	{r3, pc}
 80027da:	bf00      	nop
 80027dc:	200001fc 	.word	0x200001fc
 80027e0:	20000450 	.word	0x20000450

080027e4 <_close>:

int _close(int file)
{
	return -1;
}
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	4770      	bx	lr

080027ea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80027ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ee:	604b      	str	r3, [r1, #4]
	return 0;
}
 80027f0:	2000      	movs	r0, #0
 80027f2:	4770      	bx	lr

080027f4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80027f8:	2000      	movs	r0, #0
 80027fa:	4770      	bx	lr

080027fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SystemInit+0x18>)
 80027fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002802:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800280a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800281c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281e:	e003      	b.n	8002828 <LoopCopyDataInit>

08002820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002826:	3104      	adds	r1, #4

08002828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800282c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002830:	d3f6      	bcc.n	8002820 <CopyDataInit>
  ldr  r2, =_sbss
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002834:	e002      	b.n	800283c <LoopFillZerobss>

08002836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002838:	f842 3b04 	str.w	r3, [r2], #4

0800283c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002840:	d3f9      	bcc.n	8002836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002842:	f7ff ffdb 	bl	80027fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002846:	f000 f81b 	bl	8002880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7ff fb19 	bl	8001e80 <main>
  bx  lr    
 800284e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002850:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002854:	08003fc4 	.word	0x08003fc4
  ldr  r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800285c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002860:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002864:	20000450 	.word	0x20000450

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>

0800286a <atoi>:
 800286a:	220a      	movs	r2, #10
 800286c:	2100      	movs	r1, #0
 800286e:	f000 b975 	b.w	8002b5c <strtol>
	...

08002874 <__errno>:
 8002874:	4b01      	ldr	r3, [pc, #4]	; (800287c <__errno+0x8>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	2000000c 	.word	0x2000000c

08002880 <__libc_init_array>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	4e0d      	ldr	r6, [pc, #52]	; (80028b8 <__libc_init_array+0x38>)
 8002884:	4c0d      	ldr	r4, [pc, #52]	; (80028bc <__libc_init_array+0x3c>)
 8002886:	1ba4      	subs	r4, r4, r6
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	2500      	movs	r5, #0
 800288c:	42a5      	cmp	r5, r4
 800288e:	d109      	bne.n	80028a4 <__libc_init_array+0x24>
 8002890:	4e0b      	ldr	r6, [pc, #44]	; (80028c0 <__libc_init_array+0x40>)
 8002892:	4c0c      	ldr	r4, [pc, #48]	; (80028c4 <__libc_init_array+0x44>)
 8002894:	f001 fa20 	bl	8003cd8 <_init>
 8002898:	1ba4      	subs	r4, r4, r6
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	2500      	movs	r5, #0
 800289e:	42a5      	cmp	r5, r4
 80028a0:	d105      	bne.n	80028ae <__libc_init_array+0x2e>
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a8:	4798      	blx	r3
 80028aa:	3501      	adds	r5, #1
 80028ac:	e7ee      	b.n	800288c <__libc_init_array+0xc>
 80028ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028b2:	4798      	blx	r3
 80028b4:	3501      	adds	r5, #1
 80028b6:	e7f2      	b.n	800289e <__libc_init_array+0x1e>
 80028b8:	08003fbc 	.word	0x08003fbc
 80028bc:	08003fbc 	.word	0x08003fbc
 80028c0:	08003fbc 	.word	0x08003fbc
 80028c4:	08003fc0 	.word	0x08003fc0

080028c8 <memset>:
 80028c8:	4402      	add	r2, r0
 80028ca:	4603      	mov	r3, r0
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d100      	bne.n	80028d2 <memset+0xa>
 80028d0:	4770      	bx	lr
 80028d2:	f803 1b01 	strb.w	r1, [r3], #1
 80028d6:	e7f9      	b.n	80028cc <memset+0x4>

080028d8 <iprintf>:
 80028d8:	b40f      	push	{r0, r1, r2, r3}
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <iprintf+0x2c>)
 80028dc:	b513      	push	{r0, r1, r4, lr}
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	b124      	cbz	r4, 80028ec <iprintf+0x14>
 80028e2:	69a3      	ldr	r3, [r4, #24]
 80028e4:	b913      	cbnz	r3, 80028ec <iprintf+0x14>
 80028e6:	4620      	mov	r0, r4
 80028e8:	f000 fb00 	bl	8002eec <__sinit>
 80028ec:	ab05      	add	r3, sp, #20
 80028ee:	9a04      	ldr	r2, [sp, #16]
 80028f0:	68a1      	ldr	r1, [r4, #8]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	4620      	mov	r0, r4
 80028f6:	f000 fe23 	bl	8003540 <_vfiprintf_r>
 80028fa:	b002      	add	sp, #8
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002900:	b004      	add	sp, #16
 8002902:	4770      	bx	lr
 8002904:	2000000c 	.word	0x2000000c

08002908 <_puts_r>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	460e      	mov	r6, r1
 800290c:	4605      	mov	r5, r0
 800290e:	b118      	cbz	r0, 8002918 <_puts_r+0x10>
 8002910:	6983      	ldr	r3, [r0, #24]
 8002912:	b90b      	cbnz	r3, 8002918 <_puts_r+0x10>
 8002914:	f000 faea 	bl	8002eec <__sinit>
 8002918:	69ab      	ldr	r3, [r5, #24]
 800291a:	68ac      	ldr	r4, [r5, #8]
 800291c:	b913      	cbnz	r3, 8002924 <_puts_r+0x1c>
 800291e:	4628      	mov	r0, r5
 8002920:	f000 fae4 	bl	8002eec <__sinit>
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <_puts_r+0xac>)
 8002926:	429c      	cmp	r4, r3
 8002928:	d117      	bne.n	800295a <_puts_r+0x52>
 800292a:	686c      	ldr	r4, [r5, #4]
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	071b      	lsls	r3, r3, #28
 8002930:	d51d      	bpl.n	800296e <_puts_r+0x66>
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	b1db      	cbz	r3, 800296e <_puts_r+0x66>
 8002936:	3e01      	subs	r6, #1
 8002938:	68a3      	ldr	r3, [r4, #8]
 800293a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800293e:	3b01      	subs	r3, #1
 8002940:	60a3      	str	r3, [r4, #8]
 8002942:	b9e9      	cbnz	r1, 8002980 <_puts_r+0x78>
 8002944:	2b00      	cmp	r3, #0
 8002946:	da2e      	bge.n	80029a6 <_puts_r+0x9e>
 8002948:	4622      	mov	r2, r4
 800294a:	210a      	movs	r1, #10
 800294c:	4628      	mov	r0, r5
 800294e:	f000 f91b 	bl	8002b88 <__swbuf_r>
 8002952:	3001      	adds	r0, #1
 8002954:	d011      	beq.n	800297a <_puts_r+0x72>
 8002956:	200a      	movs	r0, #10
 8002958:	bd70      	pop	{r4, r5, r6, pc}
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <_puts_r+0xb0>)
 800295c:	429c      	cmp	r4, r3
 800295e:	d101      	bne.n	8002964 <_puts_r+0x5c>
 8002960:	68ac      	ldr	r4, [r5, #8]
 8002962:	e7e3      	b.n	800292c <_puts_r+0x24>
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <_puts_r+0xb4>)
 8002966:	429c      	cmp	r4, r3
 8002968:	bf08      	it	eq
 800296a:	68ec      	ldreq	r4, [r5, #12]
 800296c:	e7de      	b.n	800292c <_puts_r+0x24>
 800296e:	4621      	mov	r1, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f95b 	bl	8002c2c <__swsetup_r>
 8002976:	2800      	cmp	r0, #0
 8002978:	d0dd      	beq.n	8002936 <_puts_r+0x2e>
 800297a:	f04f 30ff 	mov.w	r0, #4294967295
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	2b00      	cmp	r3, #0
 8002982:	da04      	bge.n	800298e <_puts_r+0x86>
 8002984:	69a2      	ldr	r2, [r4, #24]
 8002986:	4293      	cmp	r3, r2
 8002988:	db06      	blt.n	8002998 <_puts_r+0x90>
 800298a:	290a      	cmp	r1, #10
 800298c:	d004      	beq.n	8002998 <_puts_r+0x90>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	6022      	str	r2, [r4, #0]
 8002994:	7019      	strb	r1, [r3, #0]
 8002996:	e7cf      	b.n	8002938 <_puts_r+0x30>
 8002998:	4622      	mov	r2, r4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f8f4 	bl	8002b88 <__swbuf_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d1c9      	bne.n	8002938 <_puts_r+0x30>
 80029a4:	e7e9      	b.n	800297a <_puts_r+0x72>
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	200a      	movs	r0, #10
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	6022      	str	r2, [r4, #0]
 80029ae:	7018      	strb	r0, [r3, #0]
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	bf00      	nop
 80029b4:	08003e34 	.word	0x08003e34
 80029b8:	08003e54 	.word	0x08003e54
 80029bc:	08003e14 	.word	0x08003e14

080029c0 <puts>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <puts+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f7ff bf9f 	b.w	8002908 <_puts_r>
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <siprintf>:
 80029d0:	b40e      	push	{r1, r2, r3}
 80029d2:	b500      	push	{lr}
 80029d4:	b09c      	sub	sp, #112	; 0x70
 80029d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80029da:	ab1d      	add	r3, sp, #116	; 0x74
 80029dc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80029e0:	9002      	str	r0, [sp, #8]
 80029e2:	9006      	str	r0, [sp, #24]
 80029e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029e8:	480a      	ldr	r0, [pc, #40]	; (8002a14 <siprintf+0x44>)
 80029ea:	9104      	str	r1, [sp, #16]
 80029ec:	9107      	str	r1, [sp, #28]
 80029ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80029f6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80029fa:	6800      	ldr	r0, [r0, #0]
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	a902      	add	r1, sp, #8
 8002a00:	f000 fc80 	bl	8003304 <_svfiprintf_r>
 8002a04:	9b02      	ldr	r3, [sp, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	b01c      	add	sp, #112	; 0x70
 8002a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a10:	b003      	add	sp, #12
 8002a12:	4770      	bx	lr
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <strchr>:
 8002a18:	b2c9      	uxtb	r1, r1
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a20:	b11a      	cbz	r2, 8002a2a <strchr+0x12>
 8002a22:	4291      	cmp	r1, r2
 8002a24:	d1f9      	bne.n	8002a1a <strchr+0x2>
 8002a26:	4618      	mov	r0, r3
 8002a28:	4770      	bx	lr
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	bf0c      	ite	eq
 8002a2e:	4618      	moveq	r0, r3
 8002a30:	2000      	movne	r0, #0
 8002a32:	4770      	bx	lr

08002a34 <strrchr>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	4603      	mov	r3, r0
 8002a38:	460d      	mov	r5, r1
 8002a3a:	b151      	cbz	r1, 8002a52 <strrchr+0x1e>
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ffe9 	bl	8002a18 <strchr>
 8002a46:	b908      	cbnz	r0, 8002a4c <strrchr+0x18>
 8002a48:	4620      	mov	r0, r4
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	4604      	mov	r4, r0
 8002a50:	e7f5      	b.n	8002a3e <strrchr+0xa>
 8002a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a56:	f7ff bfdf 	b.w	8002a18 <strchr>

08002a5a <_strtol_l.isra.0>:
 8002a5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5e:	4680      	mov	r8, r0
 8002a60:	4689      	mov	r9, r1
 8002a62:	4692      	mov	sl, r2
 8002a64:	461f      	mov	r7, r3
 8002a66:	468b      	mov	fp, r1
 8002a68:	465d      	mov	r5, fp
 8002a6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a70:	f000 fac6 	bl	8003000 <__locale_ctype_ptr_l>
 8002a74:	4420      	add	r0, r4
 8002a76:	7846      	ldrb	r6, [r0, #1]
 8002a78:	f016 0608 	ands.w	r6, r6, #8
 8002a7c:	d10b      	bne.n	8002a96 <_strtol_l.isra.0+0x3c>
 8002a7e:	2c2d      	cmp	r4, #45	; 0x2d
 8002a80:	d10b      	bne.n	8002a9a <_strtol_l.isra.0+0x40>
 8002a82:	782c      	ldrb	r4, [r5, #0]
 8002a84:	2601      	movs	r6, #1
 8002a86:	f10b 0502 	add.w	r5, fp, #2
 8002a8a:	b167      	cbz	r7, 8002aa6 <_strtol_l.isra.0+0x4c>
 8002a8c:	2f10      	cmp	r7, #16
 8002a8e:	d114      	bne.n	8002aba <_strtol_l.isra.0+0x60>
 8002a90:	2c30      	cmp	r4, #48	; 0x30
 8002a92:	d00a      	beq.n	8002aaa <_strtol_l.isra.0+0x50>
 8002a94:	e011      	b.n	8002aba <_strtol_l.isra.0+0x60>
 8002a96:	46ab      	mov	fp, r5
 8002a98:	e7e6      	b.n	8002a68 <_strtol_l.isra.0+0xe>
 8002a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8002a9c:	bf04      	itt	eq
 8002a9e:	782c      	ldrbeq	r4, [r5, #0]
 8002aa0:	f10b 0502 	addeq.w	r5, fp, #2
 8002aa4:	e7f1      	b.n	8002a8a <_strtol_l.isra.0+0x30>
 8002aa6:	2c30      	cmp	r4, #48	; 0x30
 8002aa8:	d127      	bne.n	8002afa <_strtol_l.isra.0+0xa0>
 8002aaa:	782b      	ldrb	r3, [r5, #0]
 8002aac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002ab0:	2b58      	cmp	r3, #88	; 0x58
 8002ab2:	d14b      	bne.n	8002b4c <_strtol_l.isra.0+0xf2>
 8002ab4:	786c      	ldrb	r4, [r5, #1]
 8002ab6:	2710      	movs	r7, #16
 8002ab8:	3502      	adds	r5, #2
 8002aba:	2e00      	cmp	r6, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002ac2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	fbb1 fef7 	udiv	lr, r1, r7
 8002acc:	4610      	mov	r0, r2
 8002ace:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002ad2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002ad6:	2b09      	cmp	r3, #9
 8002ad8:	d811      	bhi.n	8002afe <_strtol_l.isra.0+0xa4>
 8002ada:	461c      	mov	r4, r3
 8002adc:	42a7      	cmp	r7, r4
 8002ade:	dd1d      	ble.n	8002b1c <_strtol_l.isra.0+0xc2>
 8002ae0:	1c53      	adds	r3, r2, #1
 8002ae2:	d007      	beq.n	8002af4 <_strtol_l.isra.0+0x9a>
 8002ae4:	4586      	cmp	lr, r0
 8002ae6:	d316      	bcc.n	8002b16 <_strtol_l.isra.0+0xbc>
 8002ae8:	d101      	bne.n	8002aee <_strtol_l.isra.0+0x94>
 8002aea:	45a4      	cmp	ip, r4
 8002aec:	db13      	blt.n	8002b16 <_strtol_l.isra.0+0xbc>
 8002aee:	fb00 4007 	mla	r0, r0, r7, r4
 8002af2:	2201      	movs	r2, #1
 8002af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002af8:	e7eb      	b.n	8002ad2 <_strtol_l.isra.0+0x78>
 8002afa:	270a      	movs	r7, #10
 8002afc:	e7dd      	b.n	8002aba <_strtol_l.isra.0+0x60>
 8002afe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002b02:	2b19      	cmp	r3, #25
 8002b04:	d801      	bhi.n	8002b0a <_strtol_l.isra.0+0xb0>
 8002b06:	3c37      	subs	r4, #55	; 0x37
 8002b08:	e7e8      	b.n	8002adc <_strtol_l.isra.0+0x82>
 8002b0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002b0e:	2b19      	cmp	r3, #25
 8002b10:	d804      	bhi.n	8002b1c <_strtol_l.isra.0+0xc2>
 8002b12:	3c57      	subs	r4, #87	; 0x57
 8002b14:	e7e2      	b.n	8002adc <_strtol_l.isra.0+0x82>
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	e7eb      	b.n	8002af4 <_strtol_l.isra.0+0x9a>
 8002b1c:	1c53      	adds	r3, r2, #1
 8002b1e:	d108      	bne.n	8002b32 <_strtol_l.isra.0+0xd8>
 8002b20:	2322      	movs	r3, #34	; 0x22
 8002b22:	f8c8 3000 	str.w	r3, [r8]
 8002b26:	4608      	mov	r0, r1
 8002b28:	f1ba 0f00 	cmp.w	sl, #0
 8002b2c:	d107      	bne.n	8002b3e <_strtol_l.isra.0+0xe4>
 8002b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b32:	b106      	cbz	r6, 8002b36 <_strtol_l.isra.0+0xdc>
 8002b34:	4240      	negs	r0, r0
 8002b36:	f1ba 0f00 	cmp.w	sl, #0
 8002b3a:	d00c      	beq.n	8002b56 <_strtol_l.isra.0+0xfc>
 8002b3c:	b122      	cbz	r2, 8002b48 <_strtol_l.isra.0+0xee>
 8002b3e:	3d01      	subs	r5, #1
 8002b40:	f8ca 5000 	str.w	r5, [sl]
 8002b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b48:	464d      	mov	r5, r9
 8002b4a:	e7f9      	b.n	8002b40 <_strtol_l.isra.0+0xe6>
 8002b4c:	2430      	movs	r4, #48	; 0x30
 8002b4e:	2f00      	cmp	r7, #0
 8002b50:	d1b3      	bne.n	8002aba <_strtol_l.isra.0+0x60>
 8002b52:	2708      	movs	r7, #8
 8002b54:	e7b1      	b.n	8002aba <_strtol_l.isra.0+0x60>
 8002b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002b5c <strtol>:
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <strtol+0x24>)
 8002b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b60:	681c      	ldr	r4, [r3, #0]
 8002b62:	4d08      	ldr	r5, [pc, #32]	; (8002b84 <strtol+0x28>)
 8002b64:	6a23      	ldr	r3, [r4, #32]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf08      	it	eq
 8002b6a:	462b      	moveq	r3, r5
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	460a      	mov	r2, r1
 8002b72:	4601      	mov	r1, r0
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff ff70 	bl	8002a5a <_strtol_l.isra.0>
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bd30      	pop	{r4, r5, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000070 	.word	0x20000070

08002b88 <__swbuf_r>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	460e      	mov	r6, r1
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	4605      	mov	r5, r0
 8002b90:	b118      	cbz	r0, 8002b9a <__swbuf_r+0x12>
 8002b92:	6983      	ldr	r3, [r0, #24]
 8002b94:	b90b      	cbnz	r3, 8002b9a <__swbuf_r+0x12>
 8002b96:	f000 f9a9 	bl	8002eec <__sinit>
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <__swbuf_r+0x98>)
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	d12a      	bne.n	8002bf6 <__swbuf_r+0x6e>
 8002ba0:	686c      	ldr	r4, [r5, #4]
 8002ba2:	69a3      	ldr	r3, [r4, #24]
 8002ba4:	60a3      	str	r3, [r4, #8]
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	071a      	lsls	r2, r3, #28
 8002baa:	d52e      	bpl.n	8002c0a <__swbuf_r+0x82>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	b363      	cbz	r3, 8002c0a <__swbuf_r+0x82>
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	1ac0      	subs	r0, r0, r3
 8002bb6:	6963      	ldr	r3, [r4, #20]
 8002bb8:	b2f6      	uxtb	r6, r6
 8002bba:	4298      	cmp	r0, r3
 8002bbc:	4637      	mov	r7, r6
 8002bbe:	db04      	blt.n	8002bca <__swbuf_r+0x42>
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 f928 	bl	8002e18 <_fflush_r>
 8002bc8:	bb28      	cbnz	r0, 8002c16 <__swbuf_r+0x8e>
 8002bca:	68a3      	ldr	r3, [r4, #8]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60a3      	str	r3, [r4, #8]
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	6022      	str	r2, [r4, #0]
 8002bd6:	701e      	strb	r6, [r3, #0]
 8002bd8:	6963      	ldr	r3, [r4, #20]
 8002bda:	3001      	adds	r0, #1
 8002bdc:	4298      	cmp	r0, r3
 8002bde:	d004      	beq.n	8002bea <__swbuf_r+0x62>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	07db      	lsls	r3, r3, #31
 8002be4:	d519      	bpl.n	8002c1a <__swbuf_r+0x92>
 8002be6:	2e0a      	cmp	r6, #10
 8002be8:	d117      	bne.n	8002c1a <__swbuf_r+0x92>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f913 	bl	8002e18 <_fflush_r>
 8002bf2:	b190      	cbz	r0, 8002c1a <__swbuf_r+0x92>
 8002bf4:	e00f      	b.n	8002c16 <__swbuf_r+0x8e>
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <__swbuf_r+0x9c>)
 8002bf8:	429c      	cmp	r4, r3
 8002bfa:	d101      	bne.n	8002c00 <__swbuf_r+0x78>
 8002bfc:	68ac      	ldr	r4, [r5, #8]
 8002bfe:	e7d0      	b.n	8002ba2 <__swbuf_r+0x1a>
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <__swbuf_r+0xa0>)
 8002c02:	429c      	cmp	r4, r3
 8002c04:	bf08      	it	eq
 8002c06:	68ec      	ldreq	r4, [r5, #12]
 8002c08:	e7cb      	b.n	8002ba2 <__swbuf_r+0x1a>
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 f80d 	bl	8002c2c <__swsetup_r>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d0cc      	beq.n	8002bb0 <__swbuf_r+0x28>
 8002c16:	f04f 37ff 	mov.w	r7, #4294967295
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	08003e34 	.word	0x08003e34
 8002c24:	08003e54 	.word	0x08003e54
 8002c28:	08003e14 	.word	0x08003e14

08002c2c <__swsetup_r>:
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <__swsetup_r+0xcc>)
 8002c2e:	b570      	push	{r4, r5, r6, lr}
 8002c30:	681d      	ldr	r5, [r3, #0]
 8002c32:	4606      	mov	r6, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	b125      	cbz	r5, 8002c42 <__swsetup_r+0x16>
 8002c38:	69ab      	ldr	r3, [r5, #24]
 8002c3a:	b913      	cbnz	r3, 8002c42 <__swsetup_r+0x16>
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 f955 	bl	8002eec <__sinit>
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <__swsetup_r+0xd0>)
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d10f      	bne.n	8002c68 <__swsetup_r+0x3c>
 8002c48:	686c      	ldr	r4, [r5, #4]
 8002c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	0715      	lsls	r5, r2, #28
 8002c52:	d42c      	bmi.n	8002cae <__swsetup_r+0x82>
 8002c54:	06d0      	lsls	r0, r2, #27
 8002c56:	d411      	bmi.n	8002c7c <__swsetup_r+0x50>
 8002c58:	2209      	movs	r2, #9
 8002c5a:	6032      	str	r2, [r6, #0]
 8002c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <__swsetup_r+0xd4>)
 8002c6a:	429c      	cmp	r4, r3
 8002c6c:	d101      	bne.n	8002c72 <__swsetup_r+0x46>
 8002c6e:	68ac      	ldr	r4, [r5, #8]
 8002c70:	e7eb      	b.n	8002c4a <__swsetup_r+0x1e>
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <__swsetup_r+0xd8>)
 8002c74:	429c      	cmp	r4, r3
 8002c76:	bf08      	it	eq
 8002c78:	68ec      	ldreq	r4, [r5, #12]
 8002c7a:	e7e6      	b.n	8002c4a <__swsetup_r+0x1e>
 8002c7c:	0751      	lsls	r1, r2, #29
 8002c7e:	d512      	bpl.n	8002ca6 <__swsetup_r+0x7a>
 8002c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c82:	b141      	cbz	r1, 8002c96 <__swsetup_r+0x6a>
 8002c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	d002      	beq.n	8002c92 <__swsetup_r+0x66>
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f000 fa31 	bl	80030f4 <_free_r>
 8002c92:	2300      	movs	r3, #0
 8002c94:	6363      	str	r3, [r4, #52]	; 0x34
 8002c96:	89a3      	ldrh	r3, [r4, #12]
 8002c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	81a3      	strh	r3, [r4, #12]
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	b94b      	cbnz	r3, 8002cc6 <__swsetup_r+0x9a>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d003      	beq.n	8002cc6 <__swsetup_r+0x9a>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f000 f9c5 	bl	8003050 <__smakebuf_r>
 8002cc6:	89a2      	ldrh	r2, [r4, #12]
 8002cc8:	f012 0301 	ands.w	r3, r2, #1
 8002ccc:	d00c      	beq.n	8002ce8 <__swsetup_r+0xbc>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	6963      	ldr	r3, [r4, #20]
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	61a3      	str	r3, [r4, #24]
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	b953      	cbnz	r3, 8002cf2 <__swsetup_r+0xc6>
 8002cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ce4:	d1ba      	bne.n	8002c5c <__swsetup_r+0x30>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	0792      	lsls	r2, r2, #30
 8002cea:	bf58      	it	pl
 8002cec:	6963      	ldrpl	r3, [r4, #20]
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	e7f2      	b.n	8002cd8 <__swsetup_r+0xac>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e7f7      	b.n	8002ce6 <__swsetup_r+0xba>
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	08003e34 	.word	0x08003e34
 8002d00:	08003e54 	.word	0x08003e54
 8002d04:	08003e14 	.word	0x08003e14

08002d08 <__sflush_r>:
 8002d08:	898a      	ldrh	r2, [r1, #12]
 8002d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0e:	4605      	mov	r5, r0
 8002d10:	0710      	lsls	r0, r2, #28
 8002d12:	460c      	mov	r4, r1
 8002d14:	d45a      	bmi.n	8002dcc <__sflush_r+0xc4>
 8002d16:	684b      	ldr	r3, [r1, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	dc05      	bgt.n	8002d28 <__sflush_r+0x20>
 8002d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dc02      	bgt.n	8002d28 <__sflush_r+0x20>
 8002d22:	2000      	movs	r0, #0
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	d0f9      	beq.n	8002d22 <__sflush_r+0x1a>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d34:	682f      	ldr	r7, [r5, #0]
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	d033      	beq.n	8002da2 <__sflush_r+0x9a>
 8002d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	075a      	lsls	r2, r3, #29
 8002d40:	d505      	bpl.n	8002d4e <__sflush_r+0x46>
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	1ac0      	subs	r0, r0, r3
 8002d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d48:	b10b      	cbz	r3, 8002d4e <__sflush_r+0x46>
 8002d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d4c:	1ac0      	subs	r0, r0, r3
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4602      	mov	r2, r0
 8002d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d54:	6a21      	ldr	r1, [r4, #32]
 8002d56:	4628      	mov	r0, r5
 8002d58:	47b0      	blx	r6
 8002d5a:	1c43      	adds	r3, r0, #1
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	d106      	bne.n	8002d6e <__sflush_r+0x66>
 8002d60:	6829      	ldr	r1, [r5, #0]
 8002d62:	291d      	cmp	r1, #29
 8002d64:	d84b      	bhi.n	8002dfe <__sflush_r+0xf6>
 8002d66:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <__sflush_r+0x10c>)
 8002d68:	40ca      	lsrs	r2, r1
 8002d6a:	07d6      	lsls	r6, r2, #31
 8002d6c:	d547      	bpl.n	8002dfe <__sflush_r+0xf6>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6062      	str	r2, [r4, #4]
 8002d72:	04d9      	lsls	r1, r3, #19
 8002d74:	6922      	ldr	r2, [r4, #16]
 8002d76:	6022      	str	r2, [r4, #0]
 8002d78:	d504      	bpl.n	8002d84 <__sflush_r+0x7c>
 8002d7a:	1c42      	adds	r2, r0, #1
 8002d7c:	d101      	bne.n	8002d82 <__sflush_r+0x7a>
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	b903      	cbnz	r3, 8002d84 <__sflush_r+0x7c>
 8002d82:	6560      	str	r0, [r4, #84]	; 0x54
 8002d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d86:	602f      	str	r7, [r5, #0]
 8002d88:	2900      	cmp	r1, #0
 8002d8a:	d0ca      	beq.n	8002d22 <__sflush_r+0x1a>
 8002d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d90:	4299      	cmp	r1, r3
 8002d92:	d002      	beq.n	8002d9a <__sflush_r+0x92>
 8002d94:	4628      	mov	r0, r5
 8002d96:	f000 f9ad 	bl	80030f4 <_free_r>
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8002d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da2:	6a21      	ldr	r1, [r4, #32]
 8002da4:	2301      	movs	r3, #1
 8002da6:	4628      	mov	r0, r5
 8002da8:	47b0      	blx	r6
 8002daa:	1c41      	adds	r1, r0, #1
 8002dac:	d1c6      	bne.n	8002d3c <__sflush_r+0x34>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0c3      	beq.n	8002d3c <__sflush_r+0x34>
 8002db4:	2b1d      	cmp	r3, #29
 8002db6:	d001      	beq.n	8002dbc <__sflush_r+0xb4>
 8002db8:	2b16      	cmp	r3, #22
 8002dba:	d101      	bne.n	8002dc0 <__sflush_r+0xb8>
 8002dbc:	602f      	str	r7, [r5, #0]
 8002dbe:	e7b0      	b.n	8002d22 <__sflush_r+0x1a>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dcc:	690f      	ldr	r7, [r1, #16]
 8002dce:	2f00      	cmp	r7, #0
 8002dd0:	d0a7      	beq.n	8002d22 <__sflush_r+0x1a>
 8002dd2:	0793      	lsls	r3, r2, #30
 8002dd4:	680e      	ldr	r6, [r1, #0]
 8002dd6:	bf08      	it	eq
 8002dd8:	694b      	ldreq	r3, [r1, #20]
 8002dda:	600f      	str	r7, [r1, #0]
 8002ddc:	bf18      	it	ne
 8002dde:	2300      	movne	r3, #0
 8002de0:	eba6 0807 	sub.w	r8, r6, r7
 8002de4:	608b      	str	r3, [r1, #8]
 8002de6:	f1b8 0f00 	cmp.w	r8, #0
 8002dea:	dd9a      	ble.n	8002d22 <__sflush_r+0x1a>
 8002dec:	4643      	mov	r3, r8
 8002dee:	463a      	mov	r2, r7
 8002df0:	6a21      	ldr	r1, [r4, #32]
 8002df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002df4:	4628      	mov	r0, r5
 8002df6:	47b0      	blx	r6
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	dc07      	bgt.n	8002e0c <__sflush_r+0x104>
 8002dfc:	89a3      	ldrh	r3, [r4, #12]
 8002dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e02:	81a3      	strh	r3, [r4, #12]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e0c:	4407      	add	r7, r0
 8002e0e:	eba8 0800 	sub.w	r8, r8, r0
 8002e12:	e7e8      	b.n	8002de6 <__sflush_r+0xde>
 8002e14:	20400001 	.word	0x20400001

08002e18 <_fflush_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	690b      	ldr	r3, [r1, #16]
 8002e1c:	4605      	mov	r5, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	b1db      	cbz	r3, 8002e5a <_fflush_r+0x42>
 8002e22:	b118      	cbz	r0, 8002e2c <_fflush_r+0x14>
 8002e24:	6983      	ldr	r3, [r0, #24]
 8002e26:	b90b      	cbnz	r3, 8002e2c <_fflush_r+0x14>
 8002e28:	f000 f860 	bl	8002eec <__sinit>
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <_fflush_r+0x48>)
 8002e2e:	429c      	cmp	r4, r3
 8002e30:	d109      	bne.n	8002e46 <_fflush_r+0x2e>
 8002e32:	686c      	ldr	r4, [r5, #4]
 8002e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e38:	b17b      	cbz	r3, 8002e5a <_fflush_r+0x42>
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e42:	f7ff bf61 	b.w	8002d08 <__sflush_r>
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_fflush_r+0x4c>)
 8002e48:	429c      	cmp	r4, r3
 8002e4a:	d101      	bne.n	8002e50 <_fflush_r+0x38>
 8002e4c:	68ac      	ldr	r4, [r5, #8]
 8002e4e:	e7f1      	b.n	8002e34 <_fflush_r+0x1c>
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <_fflush_r+0x50>)
 8002e52:	429c      	cmp	r4, r3
 8002e54:	bf08      	it	eq
 8002e56:	68ec      	ldreq	r4, [r5, #12]
 8002e58:	e7ec      	b.n	8002e34 <_fflush_r+0x1c>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	08003e34 	.word	0x08003e34
 8002e64:	08003e54 	.word	0x08003e54
 8002e68:	08003e14 	.word	0x08003e14

08002e6c <_cleanup_r>:
 8002e6c:	4901      	ldr	r1, [pc, #4]	; (8002e74 <_cleanup_r+0x8>)
 8002e6e:	f000 b8a9 	b.w	8002fc4 <_fwalk_reent>
 8002e72:	bf00      	nop
 8002e74:	08002e19 	.word	0x08002e19

08002e78 <std.isra.0>:
 8002e78:	2300      	movs	r3, #0
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	6003      	str	r3, [r0, #0]
 8002e80:	6043      	str	r3, [r0, #4]
 8002e82:	6083      	str	r3, [r0, #8]
 8002e84:	8181      	strh	r1, [r0, #12]
 8002e86:	6643      	str	r3, [r0, #100]	; 0x64
 8002e88:	81c2      	strh	r2, [r0, #14]
 8002e8a:	6103      	str	r3, [r0, #16]
 8002e8c:	6143      	str	r3, [r0, #20]
 8002e8e:	6183      	str	r3, [r0, #24]
 8002e90:	4619      	mov	r1, r3
 8002e92:	2208      	movs	r2, #8
 8002e94:	305c      	adds	r0, #92	; 0x5c
 8002e96:	f7ff fd17 	bl	80028c8 <memset>
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <std.isra.0+0x38>)
 8002e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <std.isra.0+0x3c>)
 8002ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <std.isra.0+0x40>)
 8002ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <std.isra.0+0x44>)
 8002ea8:	6224      	str	r4, [r4, #32]
 8002eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	bf00      	nop
 8002eb0:	08003ab9 	.word	0x08003ab9
 8002eb4:	08003adb 	.word	0x08003adb
 8002eb8:	08003b13 	.word	0x08003b13
 8002ebc:	08003b37 	.word	0x08003b37

08002ec0 <__sfmoreglue>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	1e4a      	subs	r2, r1, #1
 8002ec4:	2568      	movs	r5, #104	; 0x68
 8002ec6:	4355      	muls	r5, r2
 8002ec8:	460e      	mov	r6, r1
 8002eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ece:	f000 f95f 	bl	8003190 <_malloc_r>
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	b140      	cbz	r0, 8002ee8 <__sfmoreglue+0x28>
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	e880 0042 	stmia.w	r0, {r1, r6}
 8002edc:	300c      	adds	r0, #12
 8002ede:	60a0      	str	r0, [r4, #8]
 8002ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ee4:	f7ff fcf0 	bl	80028c8 <memset>
 8002ee8:	4620      	mov	r0, r4
 8002eea:	bd70      	pop	{r4, r5, r6, pc}

08002eec <__sinit>:
 8002eec:	6983      	ldr	r3, [r0, #24]
 8002eee:	b510      	push	{r4, lr}
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	bb33      	cbnz	r3, 8002f42 <__sinit+0x56>
 8002ef4:	6483      	str	r3, [r0, #72]	; 0x48
 8002ef6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002ef8:	6503      	str	r3, [r0, #80]	; 0x50
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <__sinit+0x58>)
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <__sinit+0x5c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6282      	str	r2, [r0, #40]	; 0x28
 8002f02:	4298      	cmp	r0, r3
 8002f04:	bf04      	itt	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	6183      	streq	r3, [r0, #24]
 8002f0a:	f000 f81f 	bl	8002f4c <__sfp>
 8002f0e:	6060      	str	r0, [r4, #4]
 8002f10:	4620      	mov	r0, r4
 8002f12:	f000 f81b 	bl	8002f4c <__sfp>
 8002f16:	60a0      	str	r0, [r4, #8]
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f000 f817 	bl	8002f4c <__sfp>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60e0      	str	r0, [r4, #12]
 8002f22:	2104      	movs	r1, #4
 8002f24:	6860      	ldr	r0, [r4, #4]
 8002f26:	f7ff ffa7 	bl	8002e78 <std.isra.0>
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2109      	movs	r1, #9
 8002f2e:	68a0      	ldr	r0, [r4, #8]
 8002f30:	f7ff ffa2 	bl	8002e78 <std.isra.0>
 8002f34:	2202      	movs	r2, #2
 8002f36:	2112      	movs	r1, #18
 8002f38:	68e0      	ldr	r0, [r4, #12]
 8002f3a:	f7ff ff9d 	bl	8002e78 <std.isra.0>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61a3      	str	r3, [r4, #24]
 8002f42:	bd10      	pop	{r4, pc}
 8002f44:	08003e10 	.word	0x08003e10
 8002f48:	08002e6d 	.word	0x08002e6d

08002f4c <__sfp>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <__sfp+0x74>)
 8002f50:	681e      	ldr	r6, [r3, #0]
 8002f52:	69b3      	ldr	r3, [r6, #24]
 8002f54:	4607      	mov	r7, r0
 8002f56:	b913      	cbnz	r3, 8002f5e <__sfp+0x12>
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7ff ffc7 	bl	8002eec <__sinit>
 8002f5e:	3648      	adds	r6, #72	; 0x48
 8002f60:	68b4      	ldr	r4, [r6, #8]
 8002f62:	6873      	ldr	r3, [r6, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	d503      	bpl.n	8002f70 <__sfp+0x24>
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	b133      	cbz	r3, 8002f7a <__sfp+0x2e>
 8002f6c:	6836      	ldr	r6, [r6, #0]
 8002f6e:	e7f7      	b.n	8002f60 <__sfp+0x14>
 8002f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f74:	b16d      	cbz	r5, 8002f92 <__sfp+0x46>
 8002f76:	3468      	adds	r4, #104	; 0x68
 8002f78:	e7f4      	b.n	8002f64 <__sfp+0x18>
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	f7ff ff9f 	bl	8002ec0 <__sfmoreglue>
 8002f82:	6030      	str	r0, [r6, #0]
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d1f1      	bne.n	8002f6c <__sfp+0x20>
 8002f88:	230c      	movs	r3, #12
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	4620      	mov	r0, r4
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f96:	81e3      	strh	r3, [r4, #14]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	6665      	str	r5, [r4, #100]	; 0x64
 8002f9e:	6025      	str	r5, [r4, #0]
 8002fa0:	60a5      	str	r5, [r4, #8]
 8002fa2:	6065      	str	r5, [r4, #4]
 8002fa4:	6125      	str	r5, [r4, #16]
 8002fa6:	6165      	str	r5, [r4, #20]
 8002fa8:	61a5      	str	r5, [r4, #24]
 8002faa:	2208      	movs	r2, #8
 8002fac:	4629      	mov	r1, r5
 8002fae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fb2:	f7ff fc89 	bl	80028c8 <memset>
 8002fb6:	6365      	str	r5, [r4, #52]	; 0x34
 8002fb8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002fba:	64a5      	str	r5, [r4, #72]	; 0x48
 8002fbc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002fbe:	e7e6      	b.n	8002f8e <__sfp+0x42>
 8002fc0:	08003e10 	.word	0x08003e10

08002fc4 <_fwalk_reent>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	4680      	mov	r8, r0
 8002fca:	4689      	mov	r9, r1
 8002fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	b914      	cbnz	r4, 8002fda <_fwalk_reent+0x16>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fda:	68a5      	ldr	r5, [r4, #8]
 8002fdc:	6867      	ldr	r7, [r4, #4]
 8002fde:	3f01      	subs	r7, #1
 8002fe0:	d501      	bpl.n	8002fe6 <_fwalk_reent+0x22>
 8002fe2:	6824      	ldr	r4, [r4, #0]
 8002fe4:	e7f5      	b.n	8002fd2 <_fwalk_reent+0xe>
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d907      	bls.n	8002ffc <_fwalk_reent+0x38>
 8002fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	d003      	beq.n	8002ffc <_fwalk_reent+0x38>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	47c8      	blx	r9
 8002ffa:	4306      	orrs	r6, r0
 8002ffc:	3568      	adds	r5, #104	; 0x68
 8002ffe:	e7ee      	b.n	8002fde <_fwalk_reent+0x1a>

08003000 <__locale_ctype_ptr_l>:
 8003000:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003004:	4770      	bx	lr

08003006 <__swhatbuf_r>:
 8003006:	b570      	push	{r4, r5, r6, lr}
 8003008:	460e      	mov	r6, r1
 800300a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300e:	2900      	cmp	r1, #0
 8003010:	b090      	sub	sp, #64	; 0x40
 8003012:	4614      	mov	r4, r2
 8003014:	461d      	mov	r5, r3
 8003016:	da07      	bge.n	8003028 <__swhatbuf_r+0x22>
 8003018:	2300      	movs	r3, #0
 800301a:	602b      	str	r3, [r5, #0]
 800301c:	89b3      	ldrh	r3, [r6, #12]
 800301e:	061a      	lsls	r2, r3, #24
 8003020:	d410      	bmi.n	8003044 <__swhatbuf_r+0x3e>
 8003022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003026:	e00e      	b.n	8003046 <__swhatbuf_r+0x40>
 8003028:	aa01      	add	r2, sp, #4
 800302a:	f000 fdb7 	bl	8003b9c <_fstat_r>
 800302e:	2800      	cmp	r0, #0
 8003030:	dbf2      	blt.n	8003018 <__swhatbuf_r+0x12>
 8003032:	9a02      	ldr	r2, [sp, #8]
 8003034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800303c:	425a      	negs	r2, r3
 800303e:	415a      	adcs	r2, r3
 8003040:	602a      	str	r2, [r5, #0]
 8003042:	e7ee      	b.n	8003022 <__swhatbuf_r+0x1c>
 8003044:	2340      	movs	r3, #64	; 0x40
 8003046:	2000      	movs	r0, #0
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	b010      	add	sp, #64	; 0x40
 800304c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003050 <__smakebuf_r>:
 8003050:	898b      	ldrh	r3, [r1, #12]
 8003052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003054:	079d      	lsls	r5, r3, #30
 8003056:	4606      	mov	r6, r0
 8003058:	460c      	mov	r4, r1
 800305a:	d507      	bpl.n	800306c <__smakebuf_r+0x1c>
 800305c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	6123      	str	r3, [r4, #16]
 8003064:	2301      	movs	r3, #1
 8003066:	6163      	str	r3, [r4, #20]
 8003068:	b002      	add	sp, #8
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	ab01      	add	r3, sp, #4
 800306e:	466a      	mov	r2, sp
 8003070:	f7ff ffc9 	bl	8003006 <__swhatbuf_r>
 8003074:	9900      	ldr	r1, [sp, #0]
 8003076:	4605      	mov	r5, r0
 8003078:	4630      	mov	r0, r6
 800307a:	f000 f889 	bl	8003190 <_malloc_r>
 800307e:	b948      	cbnz	r0, 8003094 <__smakebuf_r+0x44>
 8003080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003084:	059a      	lsls	r2, r3, #22
 8003086:	d4ef      	bmi.n	8003068 <__smakebuf_r+0x18>
 8003088:	f023 0303 	bic.w	r3, r3, #3
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	81a3      	strh	r3, [r4, #12]
 8003092:	e7e3      	b.n	800305c <__smakebuf_r+0xc>
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <__smakebuf_r+0x7c>)
 8003096:	62b3      	str	r3, [r6, #40]	; 0x28
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	6020      	str	r0, [r4, #0]
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	9b00      	ldr	r3, [sp, #0]
 80030a4:	6163      	str	r3, [r4, #20]
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	6120      	str	r0, [r4, #16]
 80030aa:	b15b      	cbz	r3, 80030c4 <__smakebuf_r+0x74>
 80030ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030b0:	4630      	mov	r0, r6
 80030b2:	f000 fd85 	bl	8003bc0 <_isatty_r>
 80030b6:	b128      	cbz	r0, 80030c4 <__smakebuf_r+0x74>
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	81a3      	strh	r3, [r4, #12]
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	431d      	orrs	r5, r3
 80030c8:	81a5      	strh	r5, [r4, #12]
 80030ca:	e7cd      	b.n	8003068 <__smakebuf_r+0x18>
 80030cc:	08002e6d 	.word	0x08002e6d

080030d0 <__ascii_mbtowc>:
 80030d0:	b082      	sub	sp, #8
 80030d2:	b901      	cbnz	r1, 80030d6 <__ascii_mbtowc+0x6>
 80030d4:	a901      	add	r1, sp, #4
 80030d6:	b142      	cbz	r2, 80030ea <__ascii_mbtowc+0x1a>
 80030d8:	b14b      	cbz	r3, 80030ee <__ascii_mbtowc+0x1e>
 80030da:	7813      	ldrb	r3, [r2, #0]
 80030dc:	600b      	str	r3, [r1, #0]
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	1c10      	adds	r0, r2, #0
 80030e2:	bf18      	it	ne
 80030e4:	2001      	movne	r0, #1
 80030e6:	b002      	add	sp, #8
 80030e8:	4770      	bx	lr
 80030ea:	4610      	mov	r0, r2
 80030ec:	e7fb      	b.n	80030e6 <__ascii_mbtowc+0x16>
 80030ee:	f06f 0001 	mvn.w	r0, #1
 80030f2:	e7f8      	b.n	80030e6 <__ascii_mbtowc+0x16>

080030f4 <_free_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4605      	mov	r5, r0
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d045      	beq.n	8003188 <_free_r+0x94>
 80030fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003100:	1f0c      	subs	r4, r1, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bfb8      	it	lt
 8003106:	18e4      	addlt	r4, r4, r3
 8003108:	f000 fda1 	bl	8003c4e <__malloc_lock>
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <_free_r+0x98>)
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	4610      	mov	r0, r2
 8003112:	b933      	cbnz	r3, 8003122 <_free_r+0x2e>
 8003114:	6063      	str	r3, [r4, #4]
 8003116:	6014      	str	r4, [r2, #0]
 8003118:	4628      	mov	r0, r5
 800311a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800311e:	f000 bd97 	b.w	8003c50 <__malloc_unlock>
 8003122:	42a3      	cmp	r3, r4
 8003124:	d90c      	bls.n	8003140 <_free_r+0x4c>
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	1862      	adds	r2, r4, r1
 800312a:	4293      	cmp	r3, r2
 800312c:	bf04      	itt	eq
 800312e:	681a      	ldreq	r2, [r3, #0]
 8003130:	685b      	ldreq	r3, [r3, #4]
 8003132:	6063      	str	r3, [r4, #4]
 8003134:	bf04      	itt	eq
 8003136:	1852      	addeq	r2, r2, r1
 8003138:	6022      	streq	r2, [r4, #0]
 800313a:	6004      	str	r4, [r0, #0]
 800313c:	e7ec      	b.n	8003118 <_free_r+0x24>
 800313e:	4613      	mov	r3, r2
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	b10a      	cbz	r2, 8003148 <_free_r+0x54>
 8003144:	42a2      	cmp	r2, r4
 8003146:	d9fa      	bls.n	800313e <_free_r+0x4a>
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	1858      	adds	r0, r3, r1
 800314c:	42a0      	cmp	r0, r4
 800314e:	d10b      	bne.n	8003168 <_free_r+0x74>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	4401      	add	r1, r0
 8003154:	1858      	adds	r0, r3, r1
 8003156:	4282      	cmp	r2, r0
 8003158:	6019      	str	r1, [r3, #0]
 800315a:	d1dd      	bne.n	8003118 <_free_r+0x24>
 800315c:	6810      	ldr	r0, [r2, #0]
 800315e:	6852      	ldr	r2, [r2, #4]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	4401      	add	r1, r0
 8003164:	6019      	str	r1, [r3, #0]
 8003166:	e7d7      	b.n	8003118 <_free_r+0x24>
 8003168:	d902      	bls.n	8003170 <_free_r+0x7c>
 800316a:	230c      	movs	r3, #12
 800316c:	602b      	str	r3, [r5, #0]
 800316e:	e7d3      	b.n	8003118 <_free_r+0x24>
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	1821      	adds	r1, r4, r0
 8003174:	428a      	cmp	r2, r1
 8003176:	bf04      	itt	eq
 8003178:	6811      	ldreq	r1, [r2, #0]
 800317a:	6852      	ldreq	r2, [r2, #4]
 800317c:	6062      	str	r2, [r4, #4]
 800317e:	bf04      	itt	eq
 8003180:	1809      	addeq	r1, r1, r0
 8003182:	6021      	streq	r1, [r4, #0]
 8003184:	605c      	str	r4, [r3, #4]
 8003186:	e7c7      	b.n	8003118 <_free_r+0x24>
 8003188:	bd38      	pop	{r3, r4, r5, pc}
 800318a:	bf00      	nop
 800318c:	20000200 	.word	0x20000200

08003190 <_malloc_r>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	1ccd      	adds	r5, r1, #3
 8003194:	f025 0503 	bic.w	r5, r5, #3
 8003198:	3508      	adds	r5, #8
 800319a:	2d0c      	cmp	r5, #12
 800319c:	bf38      	it	cc
 800319e:	250c      	movcc	r5, #12
 80031a0:	2d00      	cmp	r5, #0
 80031a2:	4606      	mov	r6, r0
 80031a4:	db01      	blt.n	80031aa <_malloc_r+0x1a>
 80031a6:	42a9      	cmp	r1, r5
 80031a8:	d903      	bls.n	80031b2 <_malloc_r+0x22>
 80031aa:	230c      	movs	r3, #12
 80031ac:	6033      	str	r3, [r6, #0]
 80031ae:	2000      	movs	r0, #0
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	f000 fd4c 	bl	8003c4e <__malloc_lock>
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <_malloc_r+0xb4>)
 80031b8:	6814      	ldr	r4, [r2, #0]
 80031ba:	4621      	mov	r1, r4
 80031bc:	b991      	cbnz	r1, 80031e4 <_malloc_r+0x54>
 80031be:	4c22      	ldr	r4, [pc, #136]	; (8003248 <_malloc_r+0xb8>)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	b91b      	cbnz	r3, 80031cc <_malloc_r+0x3c>
 80031c4:	4630      	mov	r0, r6
 80031c6:	f000 fc67 	bl	8003a98 <_sbrk_r>
 80031ca:	6020      	str	r0, [r4, #0]
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f000 fc62 	bl	8003a98 <_sbrk_r>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d126      	bne.n	8003226 <_malloc_r+0x96>
 80031d8:	230c      	movs	r3, #12
 80031da:	6033      	str	r3, [r6, #0]
 80031dc:	4630      	mov	r0, r6
 80031de:	f000 fd37 	bl	8003c50 <__malloc_unlock>
 80031e2:	e7e4      	b.n	80031ae <_malloc_r+0x1e>
 80031e4:	680b      	ldr	r3, [r1, #0]
 80031e6:	1b5b      	subs	r3, r3, r5
 80031e8:	d41a      	bmi.n	8003220 <_malloc_r+0x90>
 80031ea:	2b0b      	cmp	r3, #11
 80031ec:	d90f      	bls.n	800320e <_malloc_r+0x7e>
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	50cd      	str	r5, [r1, r3]
 80031f2:	18cc      	adds	r4, r1, r3
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 fd2b 	bl	8003c50 <__malloc_unlock>
 80031fa:	f104 000b 	add.w	r0, r4, #11
 80031fe:	1d23      	adds	r3, r4, #4
 8003200:	f020 0007 	bic.w	r0, r0, #7
 8003204:	1ac3      	subs	r3, r0, r3
 8003206:	d01b      	beq.n	8003240 <_malloc_r+0xb0>
 8003208:	425a      	negs	r2, r3
 800320a:	50e2      	str	r2, [r4, r3]
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	428c      	cmp	r4, r1
 8003210:	bf0d      	iteet	eq
 8003212:	6863      	ldreq	r3, [r4, #4]
 8003214:	684b      	ldrne	r3, [r1, #4]
 8003216:	6063      	strne	r3, [r4, #4]
 8003218:	6013      	streq	r3, [r2, #0]
 800321a:	bf18      	it	ne
 800321c:	460c      	movne	r4, r1
 800321e:	e7e9      	b.n	80031f4 <_malloc_r+0x64>
 8003220:	460c      	mov	r4, r1
 8003222:	6849      	ldr	r1, [r1, #4]
 8003224:	e7ca      	b.n	80031bc <_malloc_r+0x2c>
 8003226:	1cc4      	adds	r4, r0, #3
 8003228:	f024 0403 	bic.w	r4, r4, #3
 800322c:	42a0      	cmp	r0, r4
 800322e:	d005      	beq.n	800323c <_malloc_r+0xac>
 8003230:	1a21      	subs	r1, r4, r0
 8003232:	4630      	mov	r0, r6
 8003234:	f000 fc30 	bl	8003a98 <_sbrk_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d0cd      	beq.n	80031d8 <_malloc_r+0x48>
 800323c:	6025      	str	r5, [r4, #0]
 800323e:	e7d9      	b.n	80031f4 <_malloc_r+0x64>
 8003240:	bd70      	pop	{r4, r5, r6, pc}
 8003242:	bf00      	nop
 8003244:	20000200 	.word	0x20000200
 8003248:	20000204 	.word	0x20000204

0800324c <__ssputs_r>:
 800324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003250:	688e      	ldr	r6, [r1, #8]
 8003252:	429e      	cmp	r6, r3
 8003254:	4682      	mov	sl, r0
 8003256:	460c      	mov	r4, r1
 8003258:	4691      	mov	r9, r2
 800325a:	4698      	mov	r8, r3
 800325c:	d835      	bhi.n	80032ca <__ssputs_r+0x7e>
 800325e:	898a      	ldrh	r2, [r1, #12]
 8003260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003264:	d031      	beq.n	80032ca <__ssputs_r+0x7e>
 8003266:	6825      	ldr	r5, [r4, #0]
 8003268:	6909      	ldr	r1, [r1, #16]
 800326a:	1a6f      	subs	r7, r5, r1
 800326c:	6965      	ldr	r5, [r4, #20]
 800326e:	2302      	movs	r3, #2
 8003270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003274:	fb95 f5f3 	sdiv	r5, r5, r3
 8003278:	f108 0301 	add.w	r3, r8, #1
 800327c:	443b      	add	r3, r7
 800327e:	429d      	cmp	r5, r3
 8003280:	bf38      	it	cc
 8003282:	461d      	movcc	r5, r3
 8003284:	0553      	lsls	r3, r2, #21
 8003286:	d531      	bpl.n	80032ec <__ssputs_r+0xa0>
 8003288:	4629      	mov	r1, r5
 800328a:	f7ff ff81 	bl	8003190 <_malloc_r>
 800328e:	4606      	mov	r6, r0
 8003290:	b950      	cbnz	r0, 80032a8 <__ssputs_r+0x5c>
 8003292:	230c      	movs	r3, #12
 8003294:	f8ca 3000 	str.w	r3, [sl]
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a8:	463a      	mov	r2, r7
 80032aa:	6921      	ldr	r1, [r4, #16]
 80032ac:	f000 fcaa 	bl	8003c04 <memcpy>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ba:	81a3      	strh	r3, [r4, #12]
 80032bc:	6126      	str	r6, [r4, #16]
 80032be:	6165      	str	r5, [r4, #20]
 80032c0:	443e      	add	r6, r7
 80032c2:	1bed      	subs	r5, r5, r7
 80032c4:	6026      	str	r6, [r4, #0]
 80032c6:	60a5      	str	r5, [r4, #8]
 80032c8:	4646      	mov	r6, r8
 80032ca:	4546      	cmp	r6, r8
 80032cc:	bf28      	it	cs
 80032ce:	4646      	movcs	r6, r8
 80032d0:	4632      	mov	r2, r6
 80032d2:	4649      	mov	r1, r9
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	f000 fca0 	bl	8003c1a <memmove>
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	1b9b      	subs	r3, r3, r6
 80032de:	60a3      	str	r3, [r4, #8]
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	441e      	add	r6, r3
 80032e4:	6026      	str	r6, [r4, #0]
 80032e6:	2000      	movs	r0, #0
 80032e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ec:	462a      	mov	r2, r5
 80032ee:	f000 fcb0 	bl	8003c52 <_realloc_r>
 80032f2:	4606      	mov	r6, r0
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d1e1      	bne.n	80032bc <__ssputs_r+0x70>
 80032f8:	6921      	ldr	r1, [r4, #16]
 80032fa:	4650      	mov	r0, sl
 80032fc:	f7ff fefa 	bl	80030f4 <_free_r>
 8003300:	e7c7      	b.n	8003292 <__ssputs_r+0x46>
	...

08003304 <_svfiprintf_r>:
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	b09d      	sub	sp, #116	; 0x74
 800330a:	4680      	mov	r8, r0
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	898b      	ldrh	r3, [r1, #12]
 8003310:	061c      	lsls	r4, r3, #24
 8003312:	460d      	mov	r5, r1
 8003314:	4616      	mov	r6, r2
 8003316:	d50f      	bpl.n	8003338 <_svfiprintf_r+0x34>
 8003318:	690b      	ldr	r3, [r1, #16]
 800331a:	b96b      	cbnz	r3, 8003338 <_svfiprintf_r+0x34>
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	f7ff ff37 	bl	8003190 <_malloc_r>
 8003322:	6028      	str	r0, [r5, #0]
 8003324:	6128      	str	r0, [r5, #16]
 8003326:	b928      	cbnz	r0, 8003334 <_svfiprintf_r+0x30>
 8003328:	230c      	movs	r3, #12
 800332a:	f8c8 3000 	str.w	r3, [r8]
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	e0c5      	b.n	80034c0 <_svfiprintf_r+0x1bc>
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	616b      	str	r3, [r5, #20]
 8003338:	2300      	movs	r3, #0
 800333a:	9309      	str	r3, [sp, #36]	; 0x24
 800333c:	2320      	movs	r3, #32
 800333e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003342:	2330      	movs	r3, #48	; 0x30
 8003344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003348:	f04f 0b01 	mov.w	fp, #1
 800334c:	4637      	mov	r7, r6
 800334e:	463c      	mov	r4, r7
 8003350:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d13c      	bne.n	80033d2 <_svfiprintf_r+0xce>
 8003358:	ebb7 0a06 	subs.w	sl, r7, r6
 800335c:	d00b      	beq.n	8003376 <_svfiprintf_r+0x72>
 800335e:	4653      	mov	r3, sl
 8003360:	4632      	mov	r2, r6
 8003362:	4629      	mov	r1, r5
 8003364:	4640      	mov	r0, r8
 8003366:	f7ff ff71 	bl	800324c <__ssputs_r>
 800336a:	3001      	adds	r0, #1
 800336c:	f000 80a3 	beq.w	80034b6 <_svfiprintf_r+0x1b2>
 8003370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003372:	4453      	add	r3, sl
 8003374:	9309      	str	r3, [sp, #36]	; 0x24
 8003376:	783b      	ldrb	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 809c 	beq.w	80034b6 <_svfiprintf_r+0x1b2>
 800337e:	2300      	movs	r3, #0
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	9307      	str	r3, [sp, #28]
 8003388:	9205      	str	r2, [sp, #20]
 800338a:	9306      	str	r3, [sp, #24]
 800338c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003390:	931a      	str	r3, [sp, #104]	; 0x68
 8003392:	2205      	movs	r2, #5
 8003394:	7821      	ldrb	r1, [r4, #0]
 8003396:	4850      	ldr	r0, [pc, #320]	; (80034d8 <_svfiprintf_r+0x1d4>)
 8003398:	f7fc ff3a 	bl	8000210 <memchr>
 800339c:	1c67      	adds	r7, r4, #1
 800339e:	9b04      	ldr	r3, [sp, #16]
 80033a0:	b9d8      	cbnz	r0, 80033da <_svfiprintf_r+0xd6>
 80033a2:	06d9      	lsls	r1, r3, #27
 80033a4:	bf44      	itt	mi
 80033a6:	2220      	movmi	r2, #32
 80033a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033ac:	071a      	lsls	r2, r3, #28
 80033ae:	bf44      	itt	mi
 80033b0:	222b      	movmi	r2, #43	; 0x2b
 80033b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033b6:	7822      	ldrb	r2, [r4, #0]
 80033b8:	2a2a      	cmp	r2, #42	; 0x2a
 80033ba:	d016      	beq.n	80033ea <_svfiprintf_r+0xe6>
 80033bc:	9a07      	ldr	r2, [sp, #28]
 80033be:	2100      	movs	r1, #0
 80033c0:	200a      	movs	r0, #10
 80033c2:	4627      	mov	r7, r4
 80033c4:	3401      	adds	r4, #1
 80033c6:	783b      	ldrb	r3, [r7, #0]
 80033c8:	3b30      	subs	r3, #48	; 0x30
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	d951      	bls.n	8003472 <_svfiprintf_r+0x16e>
 80033ce:	b1c9      	cbz	r1, 8003404 <_svfiprintf_r+0x100>
 80033d0:	e011      	b.n	80033f6 <_svfiprintf_r+0xf2>
 80033d2:	2b25      	cmp	r3, #37	; 0x25
 80033d4:	d0c0      	beq.n	8003358 <_svfiprintf_r+0x54>
 80033d6:	4627      	mov	r7, r4
 80033d8:	e7b9      	b.n	800334e <_svfiprintf_r+0x4a>
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <_svfiprintf_r+0x1d4>)
 80033dc:	1a80      	subs	r0, r0, r2
 80033de:	fa0b f000 	lsl.w	r0, fp, r0
 80033e2:	4318      	orrs	r0, r3
 80033e4:	9004      	str	r0, [sp, #16]
 80033e6:	463c      	mov	r4, r7
 80033e8:	e7d3      	b.n	8003392 <_svfiprintf_r+0x8e>
 80033ea:	9a03      	ldr	r2, [sp, #12]
 80033ec:	1d11      	adds	r1, r2, #4
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	2a00      	cmp	r2, #0
 80033f4:	db01      	blt.n	80033fa <_svfiprintf_r+0xf6>
 80033f6:	9207      	str	r2, [sp, #28]
 80033f8:	e004      	b.n	8003404 <_svfiprintf_r+0x100>
 80033fa:	4252      	negs	r2, r2
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	9207      	str	r2, [sp, #28]
 8003402:	9304      	str	r3, [sp, #16]
 8003404:	783b      	ldrb	r3, [r7, #0]
 8003406:	2b2e      	cmp	r3, #46	; 0x2e
 8003408:	d10e      	bne.n	8003428 <_svfiprintf_r+0x124>
 800340a:	787b      	ldrb	r3, [r7, #1]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	f107 0101 	add.w	r1, r7, #1
 8003412:	d132      	bne.n	800347a <_svfiprintf_r+0x176>
 8003414:	9b03      	ldr	r3, [sp, #12]
 8003416:	1d1a      	adds	r2, r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	9203      	str	r2, [sp, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	bfb8      	it	lt
 8003420:	f04f 33ff 	movlt.w	r3, #4294967295
 8003424:	3702      	adds	r7, #2
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	4c2c      	ldr	r4, [pc, #176]	; (80034dc <_svfiprintf_r+0x1d8>)
 800342a:	7839      	ldrb	r1, [r7, #0]
 800342c:	2203      	movs	r2, #3
 800342e:	4620      	mov	r0, r4
 8003430:	f7fc feee 	bl	8000210 <memchr>
 8003434:	b138      	cbz	r0, 8003446 <_svfiprintf_r+0x142>
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	1b00      	subs	r0, r0, r4
 800343a:	fa03 f000 	lsl.w	r0, r3, r0
 800343e:	9b04      	ldr	r3, [sp, #16]
 8003440:	4303      	orrs	r3, r0
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	3701      	adds	r7, #1
 8003446:	7839      	ldrb	r1, [r7, #0]
 8003448:	4825      	ldr	r0, [pc, #148]	; (80034e0 <_svfiprintf_r+0x1dc>)
 800344a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800344e:	2206      	movs	r2, #6
 8003450:	1c7e      	adds	r6, r7, #1
 8003452:	f7fc fedd 	bl	8000210 <memchr>
 8003456:	2800      	cmp	r0, #0
 8003458:	d035      	beq.n	80034c6 <_svfiprintf_r+0x1c2>
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <_svfiprintf_r+0x1e0>)
 800345c:	b9fb      	cbnz	r3, 800349e <_svfiprintf_r+0x19a>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	3308      	adds	r3, #8
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346c:	444b      	add	r3, r9
 800346e:	9309      	str	r3, [sp, #36]	; 0x24
 8003470:	e76c      	b.n	800334c <_svfiprintf_r+0x48>
 8003472:	fb00 3202 	mla	r2, r0, r2, r3
 8003476:	2101      	movs	r1, #1
 8003478:	e7a3      	b.n	80033c2 <_svfiprintf_r+0xbe>
 800347a:	2300      	movs	r3, #0
 800347c:	9305      	str	r3, [sp, #20]
 800347e:	4618      	mov	r0, r3
 8003480:	240a      	movs	r4, #10
 8003482:	460f      	mov	r7, r1
 8003484:	3101      	adds	r1, #1
 8003486:	783a      	ldrb	r2, [r7, #0]
 8003488:	3a30      	subs	r2, #48	; 0x30
 800348a:	2a09      	cmp	r2, #9
 800348c:	d903      	bls.n	8003496 <_svfiprintf_r+0x192>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ca      	beq.n	8003428 <_svfiprintf_r+0x124>
 8003492:	9005      	str	r0, [sp, #20]
 8003494:	e7c8      	b.n	8003428 <_svfiprintf_r+0x124>
 8003496:	fb04 2000 	mla	r0, r4, r0, r2
 800349a:	2301      	movs	r3, #1
 800349c:	e7f1      	b.n	8003482 <_svfiprintf_r+0x17e>
 800349e:	ab03      	add	r3, sp, #12
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	462a      	mov	r2, r5
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <_svfiprintf_r+0x1e4>)
 80034a6:	a904      	add	r1, sp, #16
 80034a8:	4640      	mov	r0, r8
 80034aa:	f3af 8000 	nop.w
 80034ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034b2:	4681      	mov	r9, r0
 80034b4:	d1d9      	bne.n	800346a <_svfiprintf_r+0x166>
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	065b      	lsls	r3, r3, #25
 80034ba:	f53f af38 	bmi.w	800332e <_svfiprintf_r+0x2a>
 80034be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034c0:	b01d      	add	sp, #116	; 0x74
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c6:	ab03      	add	r3, sp, #12
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	462a      	mov	r2, r5
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <_svfiprintf_r+0x1e4>)
 80034ce:	a904      	add	r1, sp, #16
 80034d0:	4640      	mov	r0, r8
 80034d2:	f000 f9c1 	bl	8003858 <_printf_i>
 80034d6:	e7ea      	b.n	80034ae <_svfiprintf_r+0x1aa>
 80034d8:	08003e7e 	.word	0x08003e7e
 80034dc:	08003e84 	.word	0x08003e84
 80034e0:	08003e88 	.word	0x08003e88
 80034e4:	00000000 	.word	0x00000000
 80034e8:	0800324d 	.word	0x0800324d

080034ec <__sfputc_r>:
 80034ec:	6893      	ldr	r3, [r2, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	b410      	push	{r4}
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	da09      	bge.n	800350c <__sfputc_r+0x20>
 80034f8:	6994      	ldr	r4, [r2, #24]
 80034fa:	42a3      	cmp	r3, r4
 80034fc:	db02      	blt.n	8003504 <__sfputc_r+0x18>
 80034fe:	b2cb      	uxtb	r3, r1
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d103      	bne.n	800350c <__sfputc_r+0x20>
 8003504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003508:	f7ff bb3e 	b.w	8002b88 <__swbuf_r>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1c58      	adds	r0, r3, #1
 8003510:	6010      	str	r0, [r2, #0]
 8003512:	7019      	strb	r1, [r3, #0]
 8003514:	b2c8      	uxtb	r0, r1
 8003516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800351a:	4770      	bx	lr

0800351c <__sfputs_r>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	4606      	mov	r6, r0
 8003520:	460f      	mov	r7, r1
 8003522:	4614      	mov	r4, r2
 8003524:	18d5      	adds	r5, r2, r3
 8003526:	42ac      	cmp	r4, r5
 8003528:	d101      	bne.n	800352e <__sfputs_r+0x12>
 800352a:	2000      	movs	r0, #0
 800352c:	e007      	b.n	800353e <__sfputs_r+0x22>
 800352e:	463a      	mov	r2, r7
 8003530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff ffd9 	bl	80034ec <__sfputc_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d1f3      	bne.n	8003526 <__sfputs_r+0xa>
 800353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003540 <_vfiprintf_r>:
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	b09d      	sub	sp, #116	; 0x74
 8003546:	460c      	mov	r4, r1
 8003548:	4617      	mov	r7, r2
 800354a:	9303      	str	r3, [sp, #12]
 800354c:	4606      	mov	r6, r0
 800354e:	b118      	cbz	r0, 8003558 <_vfiprintf_r+0x18>
 8003550:	6983      	ldr	r3, [r0, #24]
 8003552:	b90b      	cbnz	r3, 8003558 <_vfiprintf_r+0x18>
 8003554:	f7ff fcca 	bl	8002eec <__sinit>
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <_vfiprintf_r+0x20c>)
 800355a:	429c      	cmp	r4, r3
 800355c:	d157      	bne.n	800360e <_vfiprintf_r+0xce>
 800355e:	6874      	ldr	r4, [r6, #4]
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	0718      	lsls	r0, r3, #28
 8003564:	d55d      	bpl.n	8003622 <_vfiprintf_r+0xe2>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05a      	beq.n	8003622 <_vfiprintf_r+0xe2>
 800356c:	2300      	movs	r3, #0
 800356e:	9309      	str	r3, [sp, #36]	; 0x24
 8003570:	2320      	movs	r3, #32
 8003572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003576:	2330      	movs	r3, #48	; 0x30
 8003578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800357c:	f04f 0b01 	mov.w	fp, #1
 8003580:	46b8      	mov	r8, r7
 8003582:	4645      	mov	r5, r8
 8003584:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d155      	bne.n	8003638 <_vfiprintf_r+0xf8>
 800358c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003590:	d00b      	beq.n	80035aa <_vfiprintf_r+0x6a>
 8003592:	4653      	mov	r3, sl
 8003594:	463a      	mov	r2, r7
 8003596:	4621      	mov	r1, r4
 8003598:	4630      	mov	r0, r6
 800359a:	f7ff ffbf 	bl	800351c <__sfputs_r>
 800359e:	3001      	adds	r0, #1
 80035a0:	f000 80c4 	beq.w	800372c <_vfiprintf_r+0x1ec>
 80035a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a6:	4453      	add	r3, sl
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
 80035aa:	f898 3000 	ldrb.w	r3, [r8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80bc 	beq.w	800372c <_vfiprintf_r+0x1ec>
 80035b4:	2300      	movs	r3, #0
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ba:	9304      	str	r3, [sp, #16]
 80035bc:	9307      	str	r3, [sp, #28]
 80035be:	9205      	str	r2, [sp, #20]
 80035c0:	9306      	str	r3, [sp, #24]
 80035c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035c6:	931a      	str	r3, [sp, #104]	; 0x68
 80035c8:	2205      	movs	r2, #5
 80035ca:	7829      	ldrb	r1, [r5, #0]
 80035cc:	4860      	ldr	r0, [pc, #384]	; (8003750 <_vfiprintf_r+0x210>)
 80035ce:	f7fc fe1f 	bl	8000210 <memchr>
 80035d2:	f105 0801 	add.w	r8, r5, #1
 80035d6:	9b04      	ldr	r3, [sp, #16]
 80035d8:	2800      	cmp	r0, #0
 80035da:	d131      	bne.n	8003640 <_vfiprintf_r+0x100>
 80035dc:	06d9      	lsls	r1, r3, #27
 80035de:	bf44      	itt	mi
 80035e0:	2220      	movmi	r2, #32
 80035e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035e6:	071a      	lsls	r2, r3, #28
 80035e8:	bf44      	itt	mi
 80035ea:	222b      	movmi	r2, #43	; 0x2b
 80035ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035f0:	782a      	ldrb	r2, [r5, #0]
 80035f2:	2a2a      	cmp	r2, #42	; 0x2a
 80035f4:	d02c      	beq.n	8003650 <_vfiprintf_r+0x110>
 80035f6:	9a07      	ldr	r2, [sp, #28]
 80035f8:	2100      	movs	r1, #0
 80035fa:	200a      	movs	r0, #10
 80035fc:	46a8      	mov	r8, r5
 80035fe:	3501      	adds	r5, #1
 8003600:	f898 3000 	ldrb.w	r3, [r8]
 8003604:	3b30      	subs	r3, #48	; 0x30
 8003606:	2b09      	cmp	r3, #9
 8003608:	d96d      	bls.n	80036e6 <_vfiprintf_r+0x1a6>
 800360a:	b371      	cbz	r1, 800366a <_vfiprintf_r+0x12a>
 800360c:	e026      	b.n	800365c <_vfiprintf_r+0x11c>
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <_vfiprintf_r+0x214>)
 8003610:	429c      	cmp	r4, r3
 8003612:	d101      	bne.n	8003618 <_vfiprintf_r+0xd8>
 8003614:	68b4      	ldr	r4, [r6, #8]
 8003616:	e7a3      	b.n	8003560 <_vfiprintf_r+0x20>
 8003618:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <_vfiprintf_r+0x218>)
 800361a:	429c      	cmp	r4, r3
 800361c:	bf08      	it	eq
 800361e:	68f4      	ldreq	r4, [r6, #12]
 8003620:	e79e      	b.n	8003560 <_vfiprintf_r+0x20>
 8003622:	4621      	mov	r1, r4
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff fb01 	bl	8002c2c <__swsetup_r>
 800362a:	2800      	cmp	r0, #0
 800362c:	d09e      	beq.n	800356c <_vfiprintf_r+0x2c>
 800362e:	f04f 30ff 	mov.w	r0, #4294967295
 8003632:	b01d      	add	sp, #116	; 0x74
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	2b25      	cmp	r3, #37	; 0x25
 800363a:	d0a7      	beq.n	800358c <_vfiprintf_r+0x4c>
 800363c:	46a8      	mov	r8, r5
 800363e:	e7a0      	b.n	8003582 <_vfiprintf_r+0x42>
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <_vfiprintf_r+0x210>)
 8003642:	1a80      	subs	r0, r0, r2
 8003644:	fa0b f000 	lsl.w	r0, fp, r0
 8003648:	4318      	orrs	r0, r3
 800364a:	9004      	str	r0, [sp, #16]
 800364c:	4645      	mov	r5, r8
 800364e:	e7bb      	b.n	80035c8 <_vfiprintf_r+0x88>
 8003650:	9a03      	ldr	r2, [sp, #12]
 8003652:	1d11      	adds	r1, r2, #4
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	9103      	str	r1, [sp, #12]
 8003658:	2a00      	cmp	r2, #0
 800365a:	db01      	blt.n	8003660 <_vfiprintf_r+0x120>
 800365c:	9207      	str	r2, [sp, #28]
 800365e:	e004      	b.n	800366a <_vfiprintf_r+0x12a>
 8003660:	4252      	negs	r2, r2
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	9207      	str	r2, [sp, #28]
 8003668:	9304      	str	r3, [sp, #16]
 800366a:	f898 3000 	ldrb.w	r3, [r8]
 800366e:	2b2e      	cmp	r3, #46	; 0x2e
 8003670:	d110      	bne.n	8003694 <_vfiprintf_r+0x154>
 8003672:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003676:	2b2a      	cmp	r3, #42	; 0x2a
 8003678:	f108 0101 	add.w	r1, r8, #1
 800367c:	d137      	bne.n	80036ee <_vfiprintf_r+0x1ae>
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9203      	str	r2, [sp, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfb8      	it	lt
 800368a:	f04f 33ff 	movlt.w	r3, #4294967295
 800368e:	f108 0802 	add.w	r8, r8, #2
 8003692:	9305      	str	r3, [sp, #20]
 8003694:	4d31      	ldr	r5, [pc, #196]	; (800375c <_vfiprintf_r+0x21c>)
 8003696:	f898 1000 	ldrb.w	r1, [r8]
 800369a:	2203      	movs	r2, #3
 800369c:	4628      	mov	r0, r5
 800369e:	f7fc fdb7 	bl	8000210 <memchr>
 80036a2:	b140      	cbz	r0, 80036b6 <_vfiprintf_r+0x176>
 80036a4:	2340      	movs	r3, #64	; 0x40
 80036a6:	1b40      	subs	r0, r0, r5
 80036a8:	fa03 f000 	lsl.w	r0, r3, r0
 80036ac:	9b04      	ldr	r3, [sp, #16]
 80036ae:	4303      	orrs	r3, r0
 80036b0:	9304      	str	r3, [sp, #16]
 80036b2:	f108 0801 	add.w	r8, r8, #1
 80036b6:	f898 1000 	ldrb.w	r1, [r8]
 80036ba:	4829      	ldr	r0, [pc, #164]	; (8003760 <_vfiprintf_r+0x220>)
 80036bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036c0:	2206      	movs	r2, #6
 80036c2:	f108 0701 	add.w	r7, r8, #1
 80036c6:	f7fc fda3 	bl	8000210 <memchr>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d034      	beq.n	8003738 <_vfiprintf_r+0x1f8>
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <_vfiprintf_r+0x224>)
 80036d0:	bb03      	cbnz	r3, 8003714 <_vfiprintf_r+0x1d4>
 80036d2:	9b03      	ldr	r3, [sp, #12]
 80036d4:	3307      	adds	r3, #7
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	3308      	adds	r3, #8
 80036dc:	9303      	str	r3, [sp, #12]
 80036de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e0:	444b      	add	r3, r9
 80036e2:	9309      	str	r3, [sp, #36]	; 0x24
 80036e4:	e74c      	b.n	8003580 <_vfiprintf_r+0x40>
 80036e6:	fb00 3202 	mla	r2, r0, r2, r3
 80036ea:	2101      	movs	r1, #1
 80036ec:	e786      	b.n	80035fc <_vfiprintf_r+0xbc>
 80036ee:	2300      	movs	r3, #0
 80036f0:	9305      	str	r3, [sp, #20]
 80036f2:	4618      	mov	r0, r3
 80036f4:	250a      	movs	r5, #10
 80036f6:	4688      	mov	r8, r1
 80036f8:	3101      	adds	r1, #1
 80036fa:	f898 2000 	ldrb.w	r2, [r8]
 80036fe:	3a30      	subs	r2, #48	; 0x30
 8003700:	2a09      	cmp	r2, #9
 8003702:	d903      	bls.n	800370c <_vfiprintf_r+0x1cc>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0c5      	beq.n	8003694 <_vfiprintf_r+0x154>
 8003708:	9005      	str	r0, [sp, #20]
 800370a:	e7c3      	b.n	8003694 <_vfiprintf_r+0x154>
 800370c:	fb05 2000 	mla	r0, r5, r0, r2
 8003710:	2301      	movs	r3, #1
 8003712:	e7f0      	b.n	80036f6 <_vfiprintf_r+0x1b6>
 8003714:	ab03      	add	r3, sp, #12
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4622      	mov	r2, r4
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_vfiprintf_r+0x228>)
 800371c:	a904      	add	r1, sp, #16
 800371e:	4630      	mov	r0, r6
 8003720:	f3af 8000 	nop.w
 8003724:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003728:	4681      	mov	r9, r0
 800372a:	d1d8      	bne.n	80036de <_vfiprintf_r+0x19e>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	065b      	lsls	r3, r3, #25
 8003730:	f53f af7d 	bmi.w	800362e <_vfiprintf_r+0xee>
 8003734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003736:	e77c      	b.n	8003632 <_vfiprintf_r+0xf2>
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4622      	mov	r2, r4
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <_vfiprintf_r+0x228>)
 8003740:	a904      	add	r1, sp, #16
 8003742:	4630      	mov	r0, r6
 8003744:	f000 f888 	bl	8003858 <_printf_i>
 8003748:	e7ec      	b.n	8003724 <_vfiprintf_r+0x1e4>
 800374a:	bf00      	nop
 800374c:	08003e34 	.word	0x08003e34
 8003750:	08003e7e 	.word	0x08003e7e
 8003754:	08003e54 	.word	0x08003e54
 8003758:	08003e14 	.word	0x08003e14
 800375c:	08003e84 	.word	0x08003e84
 8003760:	08003e88 	.word	0x08003e88
 8003764:	00000000 	.word	0x00000000
 8003768:	0800351d 	.word	0x0800351d

0800376c <_printf_common>:
 800376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	4691      	mov	r9, r2
 8003772:	461f      	mov	r7, r3
 8003774:	688a      	ldr	r2, [r1, #8]
 8003776:	690b      	ldr	r3, [r1, #16]
 8003778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800377c:	4293      	cmp	r3, r2
 800377e:	bfb8      	it	lt
 8003780:	4613      	movlt	r3, r2
 8003782:	f8c9 3000 	str.w	r3, [r9]
 8003786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800378a:	4606      	mov	r6, r0
 800378c:	460c      	mov	r4, r1
 800378e:	b112      	cbz	r2, 8003796 <_printf_common+0x2a>
 8003790:	3301      	adds	r3, #1
 8003792:	f8c9 3000 	str.w	r3, [r9]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	0699      	lsls	r1, r3, #26
 800379a:	bf42      	ittt	mi
 800379c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037a0:	3302      	addmi	r3, #2
 80037a2:	f8c9 3000 	strmi.w	r3, [r9]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	f015 0506 	ands.w	r5, r5, #6
 80037ac:	d107      	bne.n	80037be <_printf_common+0x52>
 80037ae:	f104 0a19 	add.w	sl, r4, #25
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	f8d9 2000 	ldr.w	r2, [r9]
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	429d      	cmp	r5, r3
 80037bc:	db29      	blt.n	8003812 <_printf_common+0xa6>
 80037be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	3300      	adds	r3, #0
 80037c6:	bf18      	it	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	0692      	lsls	r2, r2, #26
 80037cc:	d42e      	bmi.n	800382c <_printf_common+0xc0>
 80037ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d2:	4639      	mov	r1, r7
 80037d4:	4630      	mov	r0, r6
 80037d6:	47c0      	blx	r8
 80037d8:	3001      	adds	r0, #1
 80037da:	d021      	beq.n	8003820 <_printf_common+0xb4>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	68e5      	ldr	r5, [r4, #12]
 80037e0:	f8d9 2000 	ldr.w	r2, [r9]
 80037e4:	f003 0306 	and.w	r3, r3, #6
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	bf08      	it	eq
 80037ec:	1aad      	subeq	r5, r5, r2
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	6922      	ldr	r2, [r4, #16]
 80037f2:	bf0c      	ite	eq
 80037f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f8:	2500      	movne	r5, #0
 80037fa:	4293      	cmp	r3, r2
 80037fc:	bfc4      	itt	gt
 80037fe:	1a9b      	subgt	r3, r3, r2
 8003800:	18ed      	addgt	r5, r5, r3
 8003802:	f04f 0900 	mov.w	r9, #0
 8003806:	341a      	adds	r4, #26
 8003808:	454d      	cmp	r5, r9
 800380a:	d11b      	bne.n	8003844 <_printf_common+0xd8>
 800380c:	2000      	movs	r0, #0
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003812:	2301      	movs	r3, #1
 8003814:	4652      	mov	r2, sl
 8003816:	4639      	mov	r1, r7
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d103      	bne.n	8003828 <_printf_common+0xbc>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	3501      	adds	r5, #1
 800382a:	e7c2      	b.n	80037b2 <_printf_common+0x46>
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	2030      	movs	r0, #48	; 0x30
 8003832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003836:	4422      	add	r2, r4
 8003838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800383c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003840:	3302      	adds	r3, #2
 8003842:	e7c4      	b.n	80037ce <_printf_common+0x62>
 8003844:	2301      	movs	r3, #1
 8003846:	4622      	mov	r2, r4
 8003848:	4639      	mov	r1, r7
 800384a:	4630      	mov	r0, r6
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d0e6      	beq.n	8003820 <_printf_common+0xb4>
 8003852:	f109 0901 	add.w	r9, r9, #1
 8003856:	e7d7      	b.n	8003808 <_printf_common+0x9c>

08003858 <_printf_i>:
 8003858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800385c:	4617      	mov	r7, r2
 800385e:	7e0a      	ldrb	r2, [r1, #24]
 8003860:	b085      	sub	sp, #20
 8003862:	2a6e      	cmp	r2, #110	; 0x6e
 8003864:	4698      	mov	r8, r3
 8003866:	4606      	mov	r6, r0
 8003868:	460c      	mov	r4, r1
 800386a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800386c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003870:	f000 80bc 	beq.w	80039ec <_printf_i+0x194>
 8003874:	d81a      	bhi.n	80038ac <_printf_i+0x54>
 8003876:	2a63      	cmp	r2, #99	; 0x63
 8003878:	d02e      	beq.n	80038d8 <_printf_i+0x80>
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x3a>
 800387c:	2a00      	cmp	r2, #0
 800387e:	f000 80c8 	beq.w	8003a12 <_printf_i+0x1ba>
 8003882:	2a58      	cmp	r2, #88	; 0x58
 8003884:	f000 808a 	beq.w	800399c <_printf_i+0x144>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003890:	e02a      	b.n	80038e8 <_printf_i+0x90>
 8003892:	2a64      	cmp	r2, #100	; 0x64
 8003894:	d001      	beq.n	800389a <_printf_i+0x42>
 8003896:	2a69      	cmp	r2, #105	; 0x69
 8003898:	d1f6      	bne.n	8003888 <_printf_i+0x30>
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038a2:	d023      	beq.n	80038ec <_printf_i+0x94>
 80038a4:	1d11      	adds	r1, r2, #4
 80038a6:	6019      	str	r1, [r3, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	e027      	b.n	80038fc <_printf_i+0xa4>
 80038ac:	2a73      	cmp	r2, #115	; 0x73
 80038ae:	f000 80b4 	beq.w	8003a1a <_printf_i+0x1c2>
 80038b2:	d808      	bhi.n	80038c6 <_printf_i+0x6e>
 80038b4:	2a6f      	cmp	r2, #111	; 0x6f
 80038b6:	d02a      	beq.n	800390e <_printf_i+0xb6>
 80038b8:	2a70      	cmp	r2, #112	; 0x70
 80038ba:	d1e5      	bne.n	8003888 <_printf_i+0x30>
 80038bc:	680a      	ldr	r2, [r1, #0]
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	600a      	str	r2, [r1, #0]
 80038c4:	e003      	b.n	80038ce <_printf_i+0x76>
 80038c6:	2a75      	cmp	r2, #117	; 0x75
 80038c8:	d021      	beq.n	800390e <_printf_i+0xb6>
 80038ca:	2a78      	cmp	r2, #120	; 0x78
 80038cc:	d1dc      	bne.n	8003888 <_printf_i+0x30>
 80038ce:	2278      	movs	r2, #120	; 0x78
 80038d0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038d4:	496e      	ldr	r1, [pc, #440]	; (8003a90 <_printf_i+0x238>)
 80038d6:	e064      	b.n	80039a2 <_printf_i+0x14a>
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038de:	1d11      	adds	r1, r2, #4
 80038e0:	6019      	str	r1, [r3, #0]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0a3      	b.n	8003a34 <_printf_i+0x1dc>
 80038ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038f0:	f102 0104 	add.w	r1, r2, #4
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	d0d7      	beq.n	80038a8 <_printf_i+0x50>
 80038f8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da03      	bge.n	8003908 <_printf_i+0xb0>
 8003900:	222d      	movs	r2, #45	; 0x2d
 8003902:	425b      	negs	r3, r3
 8003904:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003908:	4962      	ldr	r1, [pc, #392]	; (8003a94 <_printf_i+0x23c>)
 800390a:	220a      	movs	r2, #10
 800390c:	e017      	b.n	800393e <_printf_i+0xe6>
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003916:	d003      	beq.n	8003920 <_printf_i+0xc8>
 8003918:	1d08      	adds	r0, r1, #4
 800391a:	6018      	str	r0, [r3, #0]
 800391c:	680b      	ldr	r3, [r1, #0]
 800391e:	e006      	b.n	800392e <_printf_i+0xd6>
 8003920:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003924:	f101 0004 	add.w	r0, r1, #4
 8003928:	6018      	str	r0, [r3, #0]
 800392a:	d0f7      	beq.n	800391c <_printf_i+0xc4>
 800392c:	880b      	ldrh	r3, [r1, #0]
 800392e:	4959      	ldr	r1, [pc, #356]	; (8003a94 <_printf_i+0x23c>)
 8003930:	2a6f      	cmp	r2, #111	; 0x6f
 8003932:	bf14      	ite	ne
 8003934:	220a      	movne	r2, #10
 8003936:	2208      	moveq	r2, #8
 8003938:	2000      	movs	r0, #0
 800393a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800393e:	6865      	ldr	r5, [r4, #4]
 8003940:	60a5      	str	r5, [r4, #8]
 8003942:	2d00      	cmp	r5, #0
 8003944:	f2c0 809c 	blt.w	8003a80 <_printf_i+0x228>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	f020 0004 	bic.w	r0, r0, #4
 800394e:	6020      	str	r0, [r4, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13f      	bne.n	80039d4 <_printf_i+0x17c>
 8003954:	2d00      	cmp	r5, #0
 8003956:	f040 8095 	bne.w	8003a84 <_printf_i+0x22c>
 800395a:	4675      	mov	r5, lr
 800395c:	2a08      	cmp	r2, #8
 800395e:	d10b      	bne.n	8003978 <_printf_i+0x120>
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	07da      	lsls	r2, r3, #31
 8003964:	d508      	bpl.n	8003978 <_printf_i+0x120>
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	6862      	ldr	r2, [r4, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	bfde      	ittt	le
 800396e:	2330      	movle	r3, #48	; 0x30
 8003970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003978:	ebae 0305 	sub.w	r3, lr, r5
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	f8cd 8000 	str.w	r8, [sp]
 8003982:	463b      	mov	r3, r7
 8003984:	aa03      	add	r2, sp, #12
 8003986:	4621      	mov	r1, r4
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff feef 	bl	800376c <_printf_common>
 800398e:	3001      	adds	r0, #1
 8003990:	d155      	bne.n	8003a3e <_printf_i+0x1e6>
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	b005      	add	sp, #20
 8003998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800399c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039a0:	493c      	ldr	r1, [pc, #240]	; (8003a94 <_printf_i+0x23c>)
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039aa:	f100 0504 	add.w	r5, r0, #4
 80039ae:	601d      	str	r5, [r3, #0]
 80039b0:	d001      	beq.n	80039b6 <_printf_i+0x15e>
 80039b2:	6803      	ldr	r3, [r0, #0]
 80039b4:	e002      	b.n	80039bc <_printf_i+0x164>
 80039b6:	0655      	lsls	r5, r2, #25
 80039b8:	d5fb      	bpl.n	80039b2 <_printf_i+0x15a>
 80039ba:	8803      	ldrh	r3, [r0, #0]
 80039bc:	07d0      	lsls	r0, r2, #31
 80039be:	bf44      	itt	mi
 80039c0:	f042 0220 	orrmi.w	r2, r2, #32
 80039c4:	6022      	strmi	r2, [r4, #0]
 80039c6:	b91b      	cbnz	r3, 80039d0 <_printf_i+0x178>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	f022 0220 	bic.w	r2, r2, #32
 80039ce:	6022      	str	r2, [r4, #0]
 80039d0:	2210      	movs	r2, #16
 80039d2:	e7b1      	b.n	8003938 <_printf_i+0xe0>
 80039d4:	4675      	mov	r5, lr
 80039d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80039da:	fb02 3310 	mls	r3, r2, r0, r3
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039e4:	4603      	mov	r3, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1f5      	bne.n	80039d6 <_printf_i+0x17e>
 80039ea:	e7b7      	b.n	800395c <_printf_i+0x104>
 80039ec:	6808      	ldr	r0, [r1, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6949      	ldr	r1, [r1, #20]
 80039f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039f6:	d004      	beq.n	8003a02 <_printf_i+0x1aa>
 80039f8:	1d10      	adds	r0, r2, #4
 80039fa:	6018      	str	r0, [r3, #0]
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	6019      	str	r1, [r3, #0]
 8003a00:	e007      	b.n	8003a12 <_printf_i+0x1ba>
 8003a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a06:	f102 0004 	add.w	r0, r2, #4
 8003a0a:	6018      	str	r0, [r3, #0]
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	d0f6      	beq.n	80039fe <_printf_i+0x1a6>
 8003a10:	8019      	strh	r1, [r3, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	6123      	str	r3, [r4, #16]
 8003a16:	4675      	mov	r5, lr
 8003a18:	e7b1      	b.n	800397e <_printf_i+0x126>
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	1d11      	adds	r1, r2, #4
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	6815      	ldr	r5, [r2, #0]
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4628      	mov	r0, r5
 8003a28:	f7fc fbf2 	bl	8000210 <memchr>
 8003a2c:	b108      	cbz	r0, 8003a32 <_printf_i+0x1da>
 8003a2e:	1b40      	subs	r0, r0, r5
 8003a30:	6060      	str	r0, [r4, #4]
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	2300      	movs	r3, #0
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3c:	e79f      	b.n	800397e <_printf_i+0x126>
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	462a      	mov	r2, r5
 8003a42:	4639      	mov	r1, r7
 8003a44:	4630      	mov	r0, r6
 8003a46:	47c0      	blx	r8
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d0a2      	beq.n	8003992 <_printf_i+0x13a>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	079b      	lsls	r3, r3, #30
 8003a50:	d507      	bpl.n	8003a62 <_printf_i+0x20a>
 8003a52:	2500      	movs	r5, #0
 8003a54:	f104 0919 	add.w	r9, r4, #25
 8003a58:	68e3      	ldr	r3, [r4, #12]
 8003a5a:	9a03      	ldr	r2, [sp, #12]
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	429d      	cmp	r5, r3
 8003a60:	db05      	blt.n	8003a6e <_printf_i+0x216>
 8003a62:	68e0      	ldr	r0, [r4, #12]
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	4298      	cmp	r0, r3
 8003a68:	bfb8      	it	lt
 8003a6a:	4618      	movlt	r0, r3
 8003a6c:	e793      	b.n	8003996 <_printf_i+0x13e>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	464a      	mov	r2, r9
 8003a72:	4639      	mov	r1, r7
 8003a74:	4630      	mov	r0, r6
 8003a76:	47c0      	blx	r8
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d08a      	beq.n	8003992 <_printf_i+0x13a>
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	e7eb      	b.n	8003a58 <_printf_i+0x200>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1a7      	bne.n	80039d4 <_printf_i+0x17c>
 8003a84:	780b      	ldrb	r3, [r1, #0]
 8003a86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a8e:	e765      	b.n	800395c <_printf_i+0x104>
 8003a90:	08003ea0 	.word	0x08003ea0
 8003a94:	08003e8f 	.word	0x08003e8f

08003a98 <_sbrk_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4c06      	ldr	r4, [pc, #24]	; (8003ab4 <_sbrk_r+0x1c>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	f7fe fe84 	bl	80027b0 <_sbrk>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk_r+0x1a>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_sbrk_r+0x1a>
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	2000044c 	.word	0x2000044c

08003ab8 <__sread>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	460c      	mov	r4, r1
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	f000 f8ee 	bl	8003ca0 <_read_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	bfab      	itete	ge
 8003ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aca:	89a3      	ldrhlt	r3, [r4, #12]
 8003acc:	181b      	addge	r3, r3, r0
 8003ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ad2:	bfac      	ite	ge
 8003ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ad6:	81a3      	strhlt	r3, [r4, #12]
 8003ad8:	bd10      	pop	{r4, pc}

08003ada <__swrite>:
 8003ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	461f      	mov	r7, r3
 8003ae0:	898b      	ldrh	r3, [r1, #12]
 8003ae2:	05db      	lsls	r3, r3, #23
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	4616      	mov	r6, r2
 8003aea:	d505      	bpl.n	8003af8 <__swrite+0x1e>
 8003aec:	2302      	movs	r3, #2
 8003aee:	2200      	movs	r2, #0
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	f000 f874 	bl	8003be0 <_lseek_r>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	4632      	mov	r2, r6
 8003b06:	463b      	mov	r3, r7
 8003b08:	4628      	mov	r0, r5
 8003b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	f000 b823 	b.w	8003b58 <_write_r>

08003b12 <__sseek>:
 8003b12:	b510      	push	{r4, lr}
 8003b14:	460c      	mov	r4, r1
 8003b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1a:	f000 f861 	bl	8003be0 <_lseek_r>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	bf15      	itete	ne
 8003b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b2e:	81a3      	strheq	r3, [r4, #12]
 8003b30:	bf18      	it	ne
 8003b32:	81a3      	strhne	r3, [r4, #12]
 8003b34:	bd10      	pop	{r4, pc}

08003b36 <__sclose>:
 8003b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3a:	f000 b81f 	b.w	8003b7c <_close_r>

08003b3e <__ascii_wctomb>:
 8003b3e:	b149      	cbz	r1, 8003b54 <__ascii_wctomb+0x16>
 8003b40:	2aff      	cmp	r2, #255	; 0xff
 8003b42:	bf85      	ittet	hi
 8003b44:	238a      	movhi	r3, #138	; 0x8a
 8003b46:	6003      	strhi	r3, [r0, #0]
 8003b48:	700a      	strbls	r2, [r1, #0]
 8003b4a:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b4e:	bf98      	it	ls
 8003b50:	2001      	movls	r0, #1
 8003b52:	4770      	bx	lr
 8003b54:	4608      	mov	r0, r1
 8003b56:	4770      	bx	lr

08003b58 <_write_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4c07      	ldr	r4, [pc, #28]	; (8003b78 <_write_r+0x20>)
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	4608      	mov	r0, r1
 8003b60:	4611      	mov	r1, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	6022      	str	r2, [r4, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fe fe14 	bl	8002794 <_write>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_write_r+0x1e>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_write_r+0x1e>
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	2000044c 	.word	0x2000044c

08003b7c <_close_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4c06      	ldr	r4, [pc, #24]	; (8003b98 <_close_r+0x1c>)
 8003b80:	2300      	movs	r3, #0
 8003b82:	4605      	mov	r5, r0
 8003b84:	4608      	mov	r0, r1
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	f7fe fe2c 	bl	80027e4 <_close>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_close_r+0x1a>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_close_r+0x1a>
 8003b94:	602b      	str	r3, [r5, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	2000044c 	.word	0x2000044c

08003b9c <_fstat_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4c07      	ldr	r4, [pc, #28]	; (8003bbc <_fstat_r+0x20>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	f7fe fe1e 	bl	80027ea <_fstat>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d102      	bne.n	8003bb8 <_fstat_r+0x1c>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	b103      	cbz	r3, 8003bb8 <_fstat_r+0x1c>
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000044c 	.word	0x2000044c

08003bc0 <_isatty_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4c06      	ldr	r4, [pc, #24]	; (8003bdc <_isatty_r+0x1c>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	f7fe fe12 	bl	80027f4 <_isatty>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_isatty_r+0x1a>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_isatty_r+0x1a>
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	2000044c 	.word	0x2000044c

08003be0 <_lseek_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4c07      	ldr	r4, [pc, #28]	; (8003c00 <_lseek_r+0x20>)
 8003be4:	4605      	mov	r5, r0
 8003be6:	4608      	mov	r0, r1
 8003be8:	4611      	mov	r1, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	6022      	str	r2, [r4, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f7fe fe02 	bl	80027f8 <_lseek>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_lseek_r+0x1e>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_lseek_r+0x1e>
 8003bfc:	602b      	str	r3, [r5, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	2000044c 	.word	0x2000044c

08003c04 <memcpy>:
 8003c04:	b510      	push	{r4, lr}
 8003c06:	1e43      	subs	r3, r0, #1
 8003c08:	440a      	add	r2, r1
 8003c0a:	4291      	cmp	r1, r2
 8003c0c:	d100      	bne.n	8003c10 <memcpy+0xc>
 8003c0e:	bd10      	pop	{r4, pc}
 8003c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c18:	e7f7      	b.n	8003c0a <memcpy+0x6>

08003c1a <memmove>:
 8003c1a:	4288      	cmp	r0, r1
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	eb01 0302 	add.w	r3, r1, r2
 8003c22:	d803      	bhi.n	8003c2c <memmove+0x12>
 8003c24:	1e42      	subs	r2, r0, #1
 8003c26:	4299      	cmp	r1, r3
 8003c28:	d10c      	bne.n	8003c44 <memmove+0x2a>
 8003c2a:	bd10      	pop	{r4, pc}
 8003c2c:	4298      	cmp	r0, r3
 8003c2e:	d2f9      	bcs.n	8003c24 <memmove+0xa>
 8003c30:	1881      	adds	r1, r0, r2
 8003c32:	1ad2      	subs	r2, r2, r3
 8003c34:	42d3      	cmn	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memmove+0x20>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c42:	e7f7      	b.n	8003c34 <memmove+0x1a>
 8003c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c4c:	e7eb      	b.n	8003c26 <memmove+0xc>

08003c4e <__malloc_lock>:
 8003c4e:	4770      	bx	lr

08003c50 <__malloc_unlock>:
 8003c50:	4770      	bx	lr

08003c52 <_realloc_r>:
 8003c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	4614      	mov	r4, r2
 8003c58:	460e      	mov	r6, r1
 8003c5a:	b921      	cbnz	r1, 8003c66 <_realloc_r+0x14>
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c62:	f7ff ba95 	b.w	8003190 <_malloc_r>
 8003c66:	b922      	cbnz	r2, 8003c72 <_realloc_r+0x20>
 8003c68:	f7ff fa44 	bl	80030f4 <_free_r>
 8003c6c:	4625      	mov	r5, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c72:	f000 f827 	bl	8003cc4 <_malloc_usable_size_r>
 8003c76:	4284      	cmp	r4, r0
 8003c78:	d90f      	bls.n	8003c9a <_realloc_r+0x48>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff fa87 	bl	8003190 <_malloc_r>
 8003c82:	4605      	mov	r5, r0
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d0f2      	beq.n	8003c6e <_realloc_r+0x1c>
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	f7ff ffba 	bl	8003c04 <memcpy>
 8003c90:	4631      	mov	r1, r6
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff fa2e 	bl	80030f4 <_free_r>
 8003c98:	e7e9      	b.n	8003c6e <_realloc_r+0x1c>
 8003c9a:	4635      	mov	r5, r6
 8003c9c:	e7e7      	b.n	8003c6e <_realloc_r+0x1c>
	...

08003ca0 <_read_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4c07      	ldr	r4, [pc, #28]	; (8003cc0 <_read_r+0x20>)
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	4611      	mov	r1, r2
 8003caa:	2200      	movs	r2, #0
 8003cac:	6022      	str	r2, [r4, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f7fe fd62 	bl	8002778 <_read>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_read_r+0x1e>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_read_r+0x1e>
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	2000044c 	.word	0x2000044c

08003cc4 <_malloc_usable_size_r>:
 8003cc4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f1a0 0004 	sub.w	r0, r0, #4
 8003cce:	bfbc      	itt	lt
 8003cd0:	580b      	ldrlt	r3, [r1, r0]
 8003cd2:	18c0      	addlt	r0, r0, r3
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
