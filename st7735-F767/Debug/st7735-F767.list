
st7735-F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a958  08003028  08003028  00013028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d980  0800d980  0001d980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d988  0800d988  0001d988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d98c  0800d98c  0001d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20020000  0800d990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00020024  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  00020024  2**0
                  CONTENTS
  9 .bss          00000550  20020024  20020024  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20020574  20020574  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014794  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d96  00000000  00000000  000347e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000085c0  00000000  00000000  0003757e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c68  00000000  00000000  0003fb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010b0  00000000  00000000  000407a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069ac  00000000  00000000  00041858  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000054e4  00000000  00000000  00048204  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0004d6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002308  00000000  00000000  0004d764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20020024 	.word	0x20020024
 8000214:	00000000 	.word	0x00000000
 8000218:	08003010 	.word	0x08003010

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20020028 	.word	0x20020028
 8000234:	08003010 	.word	0x08003010

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f890 	bl	8000684 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f84e 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20020000 	.word	0x20020000
 8000588:	20020020 	.word	0x20020020
 800058c:	20020004 	.word	0x20020004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f002 fb7f 	bl	8002ca0 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20020040 	.word	0x20020040
 80005bc:	20020000 	.word	0x20020000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20020040 	.word	0x20020040

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20020000 	.word	0x20020000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800063a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000640:	ea01 0103 	and.w	r1, r1, r3
 8000644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800065c:	db07      	blt.n	800066e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000668:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f000 000f 	and.w	r0, r0, #15
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_NVIC_SetPriority+0x6c>)
 8000676:	541a      	strb	r2, [r3, r0]
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80006b4:	b129      	cbz	r1, 80006c2 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80006b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ba:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80006bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006c0:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80006c2:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80006c4:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006c6:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 80006c8:	68e0      	ldr	r0, [r4, #12]
 80006ca:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 80006cc:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006ce:	bf08      	it	eq
 80006d0:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 80006d4:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80006d8:	482e      	ldr	r0, [pc, #184]	; (8000794 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006da:	bf18      	it	ne
 80006dc:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80006de:	4028      	ands	r0, r5
 80006e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e4:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e6:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80006e8:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80006ea:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80006ec:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ee:	f7ff ff6d 	bl	80005cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80006f2:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006f4:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f6:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80006f8:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006fa:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80006fc:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006fe:	f7ff ff65 	bl	80005cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000702:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000704:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000706:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000708:	2500      	movs	r5, #0
 800070a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800070c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800070e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000710:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800071c:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800071e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000720:	f7ff ff54 	bl	80005cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000724:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000726:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000728:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800072a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800072c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800072e:	f7ff ff4d 	bl	80005cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000732:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000734:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000738:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800073a:	f241 0518 	movw	r5, #4120	; 0x1018
 800073e:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000740:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000742:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000746:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800074a:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800074c:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800074e:	f7ff ff3d 	bl	80005cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000752:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000754:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000758:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800075a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075e:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000760:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000762:	f7ff ff33 	bl	80005cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000766:	6822      	ldr	r2, [r4, #0]
 8000768:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 800076c:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800076e:	69a3      	ldr	r3, [r4, #24]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d107      	bne.n	8000784 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000774:	f241 011c 	movw	r1, #4124	; 0x101c
 8000778:	5853      	ldr	r3, [r2, r1]
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000782:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000784:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000788:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800078a:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800078c:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <ETH_MACDMAConfig+0xf4>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	ff20810f 	.word	0xff20810f
 8000798:	f8de3f23 	.word	0xf8de3f23
 800079c:	02c12080 	.word	0x02c12080
 80007a0:	40028040 	.word	0x40028040
 80007a4:	40028044 	.word	0x40028044

080007a8 <HAL_ETH_ReadPHYRegister>:
{
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80007aa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80007ae:	4605      	mov	r5, r0
 80007b0:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80007b2:	2b82      	cmp	r3, #130	; 0x82
 80007b4:	d030      	beq.n	8000818 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 80007b6:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80007b8:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80007ba:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80007bc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 80007c0:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80007c2:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80007c6:	f003 011c 	and.w	r1, r3, #28
 80007ca:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80007cc:	8a04      	ldrh	r4, [r0, #16]
 80007ce:	02e4      	lsls	r4, r4, #11
 80007d0:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80007d2:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80007d4:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 80007d8:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80007da:	f7ff fef1 	bl	80005c0 <HAL_GetTick>
 80007de:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80007e0:	f014 0001 	ands.w	r0, r4, #1
 80007e4:	d107      	bne.n	80007f6 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80007e6:	682b      	ldr	r3, [r5, #0]
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80007f6:	f7ff fee3 	bl	80005c0 <HAL_GetTick>
 80007fa:	1bc0      	subs	r0, r0, r7
 80007fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000800:	d307      	bcc.n	8000812 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000802:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000804:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000806:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800080a:	2300      	movs	r3, #0
 800080c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000812:	682b      	ldr	r3, [r5, #0]
 8000814:	691c      	ldr	r4, [r3, #16]
 8000816:	e7e3      	b.n	80007e0 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000818:	2002      	movs	r0, #2
}
 800081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800081c <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800081c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000820:	2b42      	cmp	r3, #66	; 0x42
{
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000826:	d02e      	beq.n	8000886 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000828:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800082a:	018c      	lsls	r4, r1, #6
 800082c:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800082e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000832:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000836:	6803      	ldr	r3, [r0, #0]
 8000838:	f044 0403 	orr.w	r4, r4, #3
 800083c:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800083e:	f000 001c 	and.w	r0, r0, #28
 8000842:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000844:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000846:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000848:	02e4      	lsls	r4, r4, #11
 800084a:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800084c:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 800084e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000850:	f7ff feb6 	bl	80005c0 <HAL_GetTick>
 8000854:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000856:	f014 0001 	ands.w	r0, r4, #1
 800085a:	d103      	bne.n	8000864 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 800085c:	2301      	movs	r3, #1
 800085e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000862:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000864:	f7ff feac 	bl	80005c0 <HAL_GetTick>
 8000868:	1b80      	subs	r0, r0, r6
 800086a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800086e:	d307      	bcc.n	8000880 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000870:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000872:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000874:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000878:	2300      	movs	r3, #0
 800087a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800087e:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	691c      	ldr	r4, [r3, #16]
 8000884:	e7e7      	b.n	8000856 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000886:	2002      	movs	r0, #2
}
 8000888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800088c <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 800088c:	2300      	movs	r3, #0
{
 800088e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000890:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000892:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000894:	2800      	cmp	r0, #0
 8000896:	f000 80dc 	beq.w	8000a52 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 800089a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800089e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008a2:	b91b      	cbnz	r3, 80008ac <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80008a4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80008a8:	f002 fa12 	bl	8002cd0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ac:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <HAL_ETH_Init+0x1cc>)
 80008ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008b4:	645a      	str	r2, [r3, #68]	; 0x44
 80008b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008c0:	4b66      	ldr	r3, [pc, #408]	; (8000a5c <HAL_ETH_Init+0x1d0>)
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80008c8:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	6a21      	ldr	r1, [r4, #32]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	f042 0201 	orr.w	r2, r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008e0:	f7ff fe6e 	bl	80005c0 <HAL_GetTick>
 80008e4:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	07d0      	lsls	r0, r2, #31
 80008f0:	d41d      	bmi.n	800092e <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80008f2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80008f4:	f000 fd24 	bl	8001340 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <HAL_ETH_Init+0x1d4>)
 80008fa:	4a5a      	ldr	r2, [pc, #360]	; (8000a64 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80008fc:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000900:	4403      	add	r3, r0
 8000902:	4293      	cmp	r3, r2
 8000904:	d822      	bhi.n	800094c <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000906:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800090a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800090c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000910:	2100      	movs	r1, #0
 8000912:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000914:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000916:	f7ff ff81 	bl	800081c <HAL_ETH_WritePHYRegister>
 800091a:	4605      	mov	r5, r0
 800091c:	b368      	cbz	r0, 800097a <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 800091e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000920:	2101      	movs	r1, #1
 8000922:	4620      	mov	r0, r4
 8000924:	f7ff fec4 	bl	80006b0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000928:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800092c:	e00b      	b.n	8000946 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800092e:	f7ff fe47 	bl	80005c0 <HAL_GetTick>
 8000932:	1b40      	subs	r0, r0, r5
 8000934:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000938:	d9d5      	bls.n	80008e6 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800093a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 800093c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800093e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000946:	4628      	mov	r0, r5
 8000948:	b003      	add	sp, #12
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800094c:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <HAL_ETH_Init+0x1dc>)
 800094e:	4a47      	ldr	r2, [pc, #284]	; (8000a6c <HAL_ETH_Init+0x1e0>)
 8000950:	4403      	add	r3, r0
 8000952:	4293      	cmp	r3, r2
 8000954:	d802      	bhi.n	800095c <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000956:	f045 050c 	orr.w	r5, r5, #12
 800095a:	e7d6      	b.n	800090a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800095c:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <HAL_ETH_Init+0x1e4>)
 800095e:	4a45      	ldr	r2, [pc, #276]	; (8000a74 <HAL_ETH_Init+0x1e8>)
 8000960:	4403      	add	r3, r0
 8000962:	4293      	cmp	r3, r2
 8000964:	d9d1      	bls.n	800090a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000966:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_ETH_Init+0x1ec>)
 8000968:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <HAL_ETH_Init+0x1f0>)
 800096a:	4403      	add	r3, r0
 800096c:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800096e:	bf94      	ite	ls
 8000970:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000974:	f045 0510 	orrhi.w	r5, r5, #16
 8000978:	e7c7      	b.n	800090a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	f7ff fe26 	bl	80005cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d053      	beq.n	8000a2e <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000986:	f7ff fe1b 	bl	80005c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800098a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800098e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000990:	466a      	mov	r2, sp
 8000992:	2101      	movs	r1, #1
 8000994:	4620      	mov	r0, r4
 8000996:	f7ff ff07 	bl	80007a8 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800099a:	f7ff fe11 	bl	80005c0 <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	42b8      	cmp	r0, r7
 80009a2:	d90b      	bls.n	80009bc <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 80009a4:	2101      	movs	r1, #1
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff fe82 	bl	80006b0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80009ac:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80009ae:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 80009b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80009b4:	2300      	movs	r3, #0
 80009b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80009ba:	e7c4      	b.n	8000946 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009bc:	9b00      	ldr	r3, [sp, #0]
 80009be:	0759      	lsls	r1, r3, #29
 80009c0:	d5e6      	bpl.n	8000990 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80009c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c6:	2100      	movs	r1, #0
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff ff27 	bl	800081c <HAL_ETH_WritePHYRegister>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1a5      	bne.n	800091e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 80009d2:	f7ff fdf5 	bl	80005c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80009d6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009da:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009dc:	466a      	mov	r2, sp
 80009de:	2101      	movs	r1, #1
 80009e0:	4620      	mov	r0, r4
 80009e2:	f7ff fee1 	bl	80007a8 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80009e6:	f7ff fdeb 	bl	80005c0 <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	42b8      	cmp	r0, r7
 80009ee:	d8d9      	bhi.n	80009a4 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80009f0:	9b00      	ldr	r3, [sp, #0]
 80009f2:	069a      	lsls	r2, r3, #26
 80009f4:	d5f2      	bpl.n	80009dc <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80009f6:	466a      	mov	r2, sp
 80009f8:	211f      	movs	r1, #31
 80009fa:	4620      	mov	r0, r4
 80009fc:	f7ff fed4 	bl	80007a8 <HAL_ETH_ReadPHYRegister>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d18c      	bne.n	800091e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a04:	9b00      	ldr	r3, [sp, #0]
 8000a06:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a0a:	bf18      	it	ne
 8000a0c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a10:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a12:	bf4c      	ite	mi
 8000a14:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a16:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a1a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a1c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fe45 	bl	80006b0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000a2c:	e78b      	b.n	8000946 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000a2e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a30:	4629      	mov	r1, r5
 8000a32:	68e2      	ldr	r2, [r4, #12]
 8000a34:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000a36:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a38:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000a3c:	b292      	uxth	r2, r2
 8000a3e:	f7ff feed 	bl	800081c <HAL_ETH_WritePHYRegister>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	f47f af6b 	bne.w	800091e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a48:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a4c:	f7ff fdbe 	bl	80005cc <HAL_Delay>
 8000a50:	e7e5      	b.n	8000a1e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000a52:	2501      	movs	r5, #1
 8000a54:	e777      	b.n	8000946 <HAL_ETH_Init+0xba>
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	feced300 	.word	0xfeced300
 8000a64:	00e4e1bf 	.word	0x00e4e1bf
 8000a68:	fde9f140 	.word	0xfde9f140
 8000a6c:	017d783f 	.word	0x017d783f
 8000a70:	fc6c7900 	.word	0xfc6c7900
 8000a74:	026259ff 	.word	0x026259ff
 8000a78:	fa0a1f00 	.word	0xfa0a1f00
 8000a7c:	02faf07f 	.word	0x02faf07f

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a84:	680b      	ldr	r3, [r1, #0]
{
 8000a86:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c4c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a8e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a90:	4a6c      	ldr	r2, [pc, #432]	; (8000c44 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a92:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000c50 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000a96:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a98:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000a9a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000a9e:	42ac      	cmp	r4, r5
 8000aa0:	f040 80b6 	bne.w	8000c10 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa4:	684c      	ldr	r4, [r1, #4]
 8000aa6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000aaa:	f024 0c10 	bic.w	ip, r4, #16
 8000aae:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000ab2:	2e01      	cmp	r6, #1
 8000ab4:	d812      	bhi.n	8000adc <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ab6:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000ab8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000aba:	fa06 f60e 	lsl.w	r6, r6, lr
 8000abe:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ac2:	68ce      	ldr	r6, [r1, #12]
 8000ac4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ac8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000aca:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000acc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000ad0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad4:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ada:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000adc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ade:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ae4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ae8:	ea6f 0606 	mvn.w	r6, r6
 8000aec:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000af0:	688f      	ldr	r7, [r1, #8]
 8000af2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000af6:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000afa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	d116      	bne.n	8000b2c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000afe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b02:	f003 0b07 	and.w	fp, r3, #7
 8000b06:	f04f 0c0f 	mov.w	ip, #15
 8000b0a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b12:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b16:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b1a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b1e:	690f      	ldr	r7, [r1, #16]
 8000b20:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b24:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b28:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b2c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b2e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b30:	f004 0703 	and.w	r7, r4, #3
 8000b34:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b38:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b3c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	00e6      	lsls	r6, r4, #3
 8000b40:	d566      	bpl.n	8000c10 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b46:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b4a:	f003 0e03 	and.w	lr, r3, #3
 8000b4e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b56:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000b62:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000b66:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b6a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b6e:	9603      	str	r6, [sp, #12]
 8000b70:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b72:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000b76:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b7a:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b7e:	4e32      	ldr	r6, [pc, #200]	; (8000c48 <HAL_GPIO_Init+0x1c8>)
 8000b80:	42b0      	cmp	r0, r6
 8000b82:	d04c      	beq.n	8000c1e <HAL_GPIO_Init+0x19e>
 8000b84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b88:	42b0      	cmp	r0, r6
 8000b8a:	d04a      	beq.n	8000c22 <HAL_GPIO_Init+0x1a2>
 8000b8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b90:	42b0      	cmp	r0, r6
 8000b92:	d048      	beq.n	8000c26 <HAL_GPIO_Init+0x1a6>
 8000b94:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b98:	42b0      	cmp	r0, r6
 8000b9a:	d046      	beq.n	8000c2a <HAL_GPIO_Init+0x1aa>
 8000b9c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ba0:	42b0      	cmp	r0, r6
 8000ba2:	d044      	beq.n	8000c2e <HAL_GPIO_Init+0x1ae>
 8000ba4:	4548      	cmp	r0, r9
 8000ba6:	d044      	beq.n	8000c32 <HAL_GPIO_Init+0x1b2>
 8000ba8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000bac:	42b0      	cmp	r0, r6
 8000bae:	d042      	beq.n	8000c36 <HAL_GPIO_Init+0x1b6>
 8000bb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bb4:	42b0      	cmp	r0, r6
 8000bb6:	d040      	beq.n	8000c3a <HAL_GPIO_Init+0x1ba>
 8000bb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bbc:	42b0      	cmp	r0, r6
 8000bbe:	d03e      	beq.n	8000c3e <HAL_GPIO_Init+0x1be>
 8000bc0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc4:	42b0      	cmp	r0, r6
 8000bc6:	bf14      	ite	ne
 8000bc8:	260a      	movne	r6, #10
 8000bca:	2609      	moveq	r6, #9
 8000bcc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bd4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd8:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000bde:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000be0:	bf0c      	ite	eq
 8000be2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000be4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000bea:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000bec:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	bf0c      	ite	eq
 8000bf0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bf2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000bf8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000bfa:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bfc:	bf0c      	ite	eq
 8000bfe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c00:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c02:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c04:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000c06:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c08:	bf54      	ite	pl
 8000c0a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c0c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c0e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c10:	3301      	adds	r3, #1
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	f47f af3f 	bne.w	8000a96 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c18:	b005      	add	sp, #20
 8000c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c1e:	2600      	movs	r6, #0
 8000c20:	e7d4      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c22:	2601      	movs	r6, #1
 8000c24:	e7d2      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c26:	2602      	movs	r6, #2
 8000c28:	e7d0      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c2a:	2603      	movs	r6, #3
 8000c2c:	e7ce      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c2e:	2604      	movs	r6, #4
 8000c30:	e7cc      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c32:	2605      	movs	r6, #5
 8000c34:	e7ca      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c36:	2606      	movs	r6, #6
 8000c38:	e7c8      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c3a:	2607      	movs	r6, #7
 8000c3c:	e7c6      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c3e:	2608      	movs	r6, #8
 8000c40:	e7c4      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c42:	bf00      	nop
 8000c44:	40013c00 	.word	0x40013c00
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40021400 	.word	0x40021400

08000c54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c54:	b10a      	cbz	r2, 8000c5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c56:	6181      	str	r1, [r0, #24]
 8000c58:	4770      	bx	lr
 8000c5a:	0409      	lsls	r1, r1, #16
 8000c5c:	e7fb      	b.n	8000c56 <HAL_GPIO_WritePin+0x2>

08000c5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c60:	4604      	mov	r4, r0
{
 8000c62:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000c64:	b360      	cbz	r0, 8000cc0 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c66:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000c6a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c70:	b91b      	cbnz	r3, 8000c7a <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c72:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c76:	f002 f917 	bl	8002ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c7a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c7c:	466e      	mov	r6, sp
 8000c7e:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c80:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000c86:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c88:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000c8c:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000c90:	bf08      	it	eq
 8000c92:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000c94:	f001 fa99 	bl	80021ca <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca4:	4625      	mov	r5, r4
 8000ca6:	e886 0003 	stmia.w	r6, {r0, r1}
 8000caa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cae:	f855 0b10 	ldr.w	r0, [r5], #16
 8000cb2:	f001 fa4f 	bl	8002154 <USB_CoreInit>
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	b120      	cbz	r0, 8000cc4 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000cc0:	2501      	movs	r5, #1
 8000cc2:	e054      	b.n	8000d6e <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	f001 fa85 	bl	80021d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cd2:	261c      	movs	r6, #28
 8000cd4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cd8:	4601      	mov	r1, r0
 8000cda:	b2c2      	uxtb	r2, r0
 8000cdc:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cde:	4596      	cmp	lr, r2
 8000ce0:	d81b      	bhi.n	8000d1a <HAL_PCD_Init+0xbc>
 8000ce2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ce4:	261c      	movs	r6, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cec:	4586      	cmp	lr, r0
 8000cee:	d822      	bhi.n	8000d36 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf2:	466e      	mov	r6, sp
 8000cf4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cfe:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d02:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d06:	6820      	ldr	r0, [r4, #0]
 8000d08:	f001 faa6 	bl	8002258 <USB_DevInit>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4605      	mov	r5, r0
 8000d10:	b300      	cbz	r0, 8000d54 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d12:	2202      	movs	r2, #2
 8000d14:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000d18:	e7d2      	b.n	8000cc0 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000d1a:	fb06 4302 	mla	r3, r6, r2, r4
 8000d1e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d26:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d2a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d2e:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d30:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d32:	6519      	str	r1, [r3, #80]	; 0x50
 8000d34:	e7d1      	b.n	8000cda <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000d36:	fb06 4200 	mla	r2, r6, r0, r4
 8000d3a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000d3e:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d42:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d46:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d4a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d4e:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000d52:	e7c9      	b.n	8000ce8 <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000d54:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d58:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d62:	4620      	mov	r0, r4
 8000d64:	f000 f806 	bl	8000d74 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	f001 fb2f 	bl	80023cc <USB_DevDisconnect>

  return HAL_OK;
}
 8000d6e:	4628      	mov	r0, r5
 8000d70:	b00b      	add	sp, #44	; 0x2c
 8000d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d74 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000d74:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d76:	6802      	ldr	r2, [r0, #0]
{
 8000d78:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000d7a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000d84:	6993      	ldr	r3, [r2, #24]
 8000d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d8a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000d8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	f043 0303 	orr.w	r3, r3, #3
 8000d96:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d9c:	4a02      	ldr	r2, [pc, #8]	; (8000da8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4770      	bx	lr
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000dae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000db2:	4c19      	ldr	r4, [pc, #100]	; (8000e18 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dca:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dcc:	f7ff fbf8 	bl	80005c0 <HAL_GetTick>
 8000dd0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000dd2:	6863      	ldr	r3, [r4, #4]
 8000dd4:	03da      	lsls	r2, r3, #15
 8000dd6:	d50c      	bpl.n	8000df2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de0:	f7ff fbee 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000de4:	4c0c      	ldr	r4, [pc, #48]	; (8000e18 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000de6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000de8:	6863      	ldr	r3, [r4, #4]
 8000dea:	039b      	lsls	r3, r3, #14
 8000dec:	d50a      	bpl.n	8000e04 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
 8000df0:	e006      	b.n	8000e00 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000df2:	f7ff fbe5 	bl	80005c0 <HAL_GetTick>
 8000df6:	1b40      	subs	r0, r0, r5
 8000df8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dfc:	d9e9      	bls.n	8000dd2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000dfe:	2003      	movs	r0, #3
}
 8000e00:	b003      	add	sp, #12
 8000e02:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e04:	f7ff fbdc 	bl	80005c0 <HAL_GetTick>
 8000e08:	1b40      	subs	r0, r0, r5
 8000e0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e0e:	d9eb      	bls.n	8000de8 <HAL_PWREx_EnableOverDrive+0x3c>
 8000e10:	e7f5      	b.n	8000dfe <HAL_PWREx_EnableOverDrive+0x52>
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40007000 	.word	0x40007000

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e20:	4604      	mov	r4, r0
 8000e22:	b908      	cbnz	r0, 8000e28 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
 8000e26:	e03f      	b.n	8000ea8 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	07d8      	lsls	r0, r3, #31
 8000e2c:	d410      	bmi.n	8000e50 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	0799      	lsls	r1, r3, #30
 8000e32:	d460      	bmi.n	8000ef6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	0719      	lsls	r1, r3, #28
 8000e38:	f100 80a5 	bmi.w	8000f86 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	f100 80c6 	bmi.w	8000fd0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e44:	69a0      	ldr	r0, [r4, #24]
 8000e46:	2800      	cmp	r0, #0
 8000e48:	f040 8130 	bne.w	80010ac <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e02b      	b.n	8000ea8 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e50:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	f002 020c 	and.w	r2, r2, #12
 8000e58:	2a04      	cmp	r2, #4
 8000e5a:	d007      	beq.n	8000e6c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	f002 020c 	and.w	r2, r2, #12
 8000e62:	2a08      	cmp	r2, #8
 8000e64:	d10a      	bne.n	8000e7c <HAL_RCC_OscConfig+0x60>
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	025a      	lsls	r2, r3, #9
 8000e6a:	d507      	bpl.n	8000e7c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6c:	4b8d      	ldr	r3, [pc, #564]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	039b      	lsls	r3, r3, #14
 8000e72:	d5dc      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x12>
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1d9      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
 8000e7a:	e7d3      	b.n	8000e24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7c:	6863      	ldr	r3, [r4, #4]
 8000e7e:	4d89      	ldr	r5, [pc, #548]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e84:	d113      	bne.n	8000eae <HAL_RCC_OscConfig+0x92>
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fb97 	bl	80005c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	4d84      	ldr	r5, [pc, #528]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000e94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	039f      	lsls	r7, r3, #14
 8000e9a:	d4c8      	bmi.n	8000e2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fb90 	bl	80005c0 <HAL_GetTick>
 8000ea0:	1b80      	subs	r0, r0, r6
 8000ea2:	2864      	cmp	r0, #100	; 0x64
 8000ea4:	d9f7      	bls.n	8000e96 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
}
 8000ea8:	b002      	add	sp, #8
 8000eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	b99b      	cbnz	r3, 8000ed8 <HAL_RCC_OscConfig+0xbc>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	602b      	str	r3, [r5, #0]
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb7e 	bl	80005c0 <HAL_GetTick>
 8000ec4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	0398      	lsls	r0, r3, #14
 8000eca:	d5b0      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fb78 	bl	80005c0 <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	2864      	cmp	r0, #100	; 0x64
 8000ed4:	d9f7      	bls.n	8000ec6 <HAL_RCC_OscConfig+0xaa>
 8000ed6:	e7e6      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	d103      	bne.n	8000ee8 <HAL_RCC_OscConfig+0xcc>
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	602b      	str	r3, [r5, #0]
 8000ee6:	e7ce      	b.n	8000e86 <HAL_RCC_OscConfig+0x6a>
 8000ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eec:	602b      	str	r3, [r5, #0]
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	e7ca      	b.n	8000e8c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	f012 0f0c 	tst.w	r2, #12
 8000efe:	d007      	beq.n	8000f10 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	f002 020c 	and.w	r2, r2, #12
 8000f06:	2a08      	cmp	r2, #8
 8000f08:	d111      	bne.n	8000f2e <HAL_RCC_OscConfig+0x112>
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	0259      	lsls	r1, r3, #9
 8000f0e:	d40e      	bmi.n	8000f2e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f10:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	0792      	lsls	r2, r2, #30
 8000f16:	d502      	bpl.n	8000f1e <HAL_RCC_OscConfig+0x102>
 8000f18:	68e2      	ldr	r2, [r4, #12]
 8000f1a:	2a01      	cmp	r2, #1
 8000f1c:	d182      	bne.n	8000e24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	6921      	ldr	r1, [r4, #16]
 8000f22:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f26:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f2a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2c:	e782      	b.n	8000e34 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f2e:	68e3      	ldr	r3, [r4, #12]
 8000f30:	4d5c      	ldr	r5, [pc, #368]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000f32:	b1bb      	cbz	r3, 8000f64 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb40 	bl	80005c0 <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	079f      	lsls	r7, r3, #30
 8000f46:	d507      	bpl.n	8000f58 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	6922      	ldr	r2, [r4, #16]
 8000f4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f54:	602b      	str	r3, [r5, #0]
 8000f56:	e76d      	b.n	8000e34 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fb32 	bl	80005c0 <HAL_GetTick>
 8000f5c:	1b80      	subs	r0, r0, r6
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9ef      	bls.n	8000f42 <HAL_RCC_OscConfig+0x126>
 8000f62:	e7a0      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fb28 	bl	80005c0 <HAL_GetTick>
 8000f70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	0798      	lsls	r0, r3, #30
 8000f76:	f57f af5d 	bpl.w	8000e34 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fb21 	bl	80005c0 <HAL_GetTick>
 8000f7e:	1b80      	subs	r0, r0, r6
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d9f6      	bls.n	8000f72 <HAL_RCC_OscConfig+0x156>
 8000f84:	e78f      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f86:	6963      	ldr	r3, [r4, #20]
 8000f88:	4d46      	ldr	r5, [pc, #280]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000f8a:	b183      	cbz	r3, 8000fae <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000f8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f94:	f7ff fb14 	bl	80005c0 <HAL_GetTick>
 8000f98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f9c:	079b      	lsls	r3, r3, #30
 8000f9e:	f53f af4d 	bmi.w	8000e3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fb0d 	bl	80005c0 <HAL_GetTick>
 8000fa6:	1b80      	subs	r0, r0, r6
 8000fa8:	2802      	cmp	r0, #2
 8000faa:	d9f6      	bls.n	8000f9a <HAL_RCC_OscConfig+0x17e>
 8000fac:	e77b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000fae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb03 	bl	80005c0 <HAL_GetTick>
 8000fba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fbe:	079f      	lsls	r7, r3, #30
 8000fc0:	f57f af3c 	bpl.w	8000e3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fafc 	bl	80005c0 <HAL_GetTick>
 8000fc8:	1b80      	subs	r0, r0, r6
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9f6      	bls.n	8000fbc <HAL_RCC_OscConfig+0x1a0>
 8000fce:	e76a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd0:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd4:	00d0      	lsls	r0, r2, #3
 8000fd6:	d427      	bmi.n	8001028 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000fda:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fec:	4d2e      	ldr	r5, [pc, #184]	; (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	05d9      	lsls	r1, r3, #23
 8000ff2:	d51b      	bpl.n	800102c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff4:	68a3      	ldr	r3, [r4, #8]
 8000ff6:	4d2b      	ldr	r5, [pc, #172]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d127      	bne.n	800104c <HAL_RCC_OscConfig+0x230>
 8000ffc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001008:	f7ff fada 	bl	80005c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	4f25      	ldr	r7, [pc, #148]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800100e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	d53f      	bpl.n	8001096 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8001016:	2e00      	cmp	r6, #0
 8001018:	f43f af14 	beq.w	8000e44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_RCC_OscConfig+0x288>)
 800101e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	e70d      	b.n	8000e44 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8001028:	2600      	movs	r6, #0
 800102a:	e7df      	b.n	8000fec <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001034:	f7ff fac4 	bl	80005c0 <HAL_GetTick>
 8001038:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800103a:	682b      	ldr	r3, [r5, #0]
 800103c:	05da      	lsls	r2, r3, #23
 800103e:	d4d9      	bmi.n	8000ff4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001040:	f7ff fabe 	bl	80005c0 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	2864      	cmp	r0, #100	; 0x64
 8001048:	d9f7      	bls.n	800103a <HAL_RCC_OscConfig+0x21e>
 800104a:	e72c      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	b9ab      	cbnz	r3, 800107a <HAL_RCC_OscConfig+0x25e>
 800104e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	672b      	str	r3, [r5, #112]	; 0x70
 800105a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001062:	f7ff faad 	bl	80005c0 <HAL_GetTick>
 8001066:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800106a:	0798      	lsls	r0, r3, #30
 800106c:	d5d3      	bpl.n	8001016 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff faa7 	bl	80005c0 <HAL_GetTick>
 8001072:	1bc0      	subs	r0, r0, r7
 8001074:	4540      	cmp	r0, r8
 8001076:	d9f7      	bls.n	8001068 <HAL_RCC_OscConfig+0x24c>
 8001078:	e715      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107a:	2b05      	cmp	r3, #5
 800107c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800107e:	d103      	bne.n	8001088 <HAL_RCC_OscConfig+0x26c>
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	672b      	str	r3, [r5, #112]	; 0x70
 8001086:	e7b9      	b.n	8000ffc <HAL_RCC_OscConfig+0x1e0>
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	672b      	str	r3, [r5, #112]	; 0x70
 800108e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	e7b5      	b.n	8001002 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fa93 	bl	80005c0 <HAL_GetTick>
 800109a:	eba0 0008 	sub.w	r0, r0, r8
 800109e:	42a8      	cmp	r0, r5
 80010a0:	d9b6      	bls.n	8001010 <HAL_RCC_OscConfig+0x1f4>
 80010a2:	e700      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ac:	4d3c      	ldr	r5, [pc, #240]	; (80011a0 <HAL_RCC_OscConfig+0x384>)
 80010ae:	68ab      	ldr	r3, [r5, #8]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d042      	beq.n	800113e <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 80010b8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80010bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c2:	d12f      	bne.n	8001124 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80010c4:	f7ff fa7c 	bl	80005c0 <HAL_GetTick>
 80010c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	0199      	lsls	r1, r3, #6
 80010ce:	d423      	bmi.n	8001118 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d0:	6a22      	ldr	r2, [r4, #32]
 80010d2:	69e3      	ldr	r3, [r4, #28]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4c2d      	ldr	r4, [pc, #180]	; (80011a0 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ec:	0852      	lsrs	r2, r2, #1
 80010ee:	3a01      	subs	r2, #1
 80010f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010f4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010fe:	f7ff fa5f 	bl	80005c0 <HAL_GetTick>
 8001102:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	019a      	lsls	r2, r3, #6
 8001108:	f53f aea0 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff fa58 	bl	80005c0 <HAL_GetTick>
 8001110:	1b40      	subs	r0, r0, r5
 8001112:	2802      	cmp	r0, #2
 8001114:	d9f6      	bls.n	8001104 <HAL_RCC_OscConfig+0x2e8>
 8001116:	e6c6      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fa52 	bl	80005c0 <HAL_GetTick>
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	2802      	cmp	r0, #2
 8001120:	d9d3      	bls.n	80010ca <HAL_RCC_OscConfig+0x2ae>
 8001122:	e6c0      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001124:	f7ff fa4c 	bl	80005c0 <HAL_GetTick>
 8001128:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112a:	682b      	ldr	r3, [r5, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	f57f ae8d 	bpl.w	8000e4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001132:	f7ff fa45 	bl	80005c0 <HAL_GetTick>
 8001136:	1b00      	subs	r0, r0, r4
 8001138:	2802      	cmp	r0, #2
 800113a:	d9f6      	bls.n	800112a <HAL_RCC_OscConfig+0x30e>
 800113c:	e6b3      	b.n	8000ea6 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800113e:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001140:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001142:	f43f aeb1 	beq.w	8000ea8 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800114a:	69e1      	ldr	r1, [r4, #28]
 800114c:	428a      	cmp	r2, r1
 800114e:	f47f ae69 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	6a21      	ldr	r1, [r4, #32]
 8001158:	428a      	cmp	r2, r1
 800115a:	f47f ae63 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800115e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001162:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001164:	401a      	ands	r2, r3
 8001166:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800116a:	f47f ae5b 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800116e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001170:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001174:	0852      	lsrs	r2, r2, #1
 8001176:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001178:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800117c:	f47f ae52 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001180:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001184:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001186:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800118a:	f47f ae4b 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800118e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001190:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001194:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001198:	bf14      	ite	ne
 800119a:	2001      	movne	r0, #1
 800119c:	2000      	moveq	r0, #0
 800119e:	e683      	b.n	8000ea8 <HAL_RCC_OscConfig+0x8c>
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a4:	4913      	ldr	r1, [pc, #76]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a8:	688b      	ldr	r3, [r1, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x16>
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d003      	beq.n	80011be <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011b8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <HAL_RCC_GetSysClockFreq+0x58>)
 80011bc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011be:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011c0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011d0:	bf1a      	itte	ne
 80011d2:	480a      	ldrne	r0, [pc, #40]	; (80011fc <HAL_RCC_GetSysClockFreq+0x58>)
 80011d4:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d6:	4808      	ldreq	r0, [pc, #32]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80011d8:	fba1 0100 	umull	r0, r1, r1, r0
 80011dc:	f7ff f82c 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011e8:	3301      	adds	r3, #1
 80011ea:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80011ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80011f0:	bd08      	pop	{r3, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	00f42400 	.word	0x00f42400
 80011fc:	007a1200 	.word	0x007a1200

08001200 <HAL_RCC_ClockConfig>:
{
 8001200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001204:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001206:	4604      	mov	r4, r0
 8001208:	b910      	cbnz	r0, 8001210 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_RCC_ClockConfig+0x12c>)
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	428b      	cmp	r3, r1
 800121a:	d329      	bcc.n	8001270 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	6821      	ldr	r1, [r4, #0]
 800121e:	078f      	lsls	r7, r1, #30
 8001220:	d431      	bmi.n	8001286 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001222:	07c8      	lsls	r0, r1, #31
 8001224:	d444      	bmi.n	80012b0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001226:	4a41      	ldr	r2, [pc, #260]	; (800132c <HAL_RCC_ClockConfig+0x12c>)
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	429d      	cmp	r5, r3
 8001230:	d368      	bcc.n	8001304 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	0751      	lsls	r1, r2, #29
 8001236:	d471      	bmi.n	800131c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001238:	0713      	lsls	r3, r2, #28
 800123a:	d507      	bpl.n	800124c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
 800123e:	6921      	ldr	r1, [r4, #16]
 8001240:	6893      	ldr	r3, [r2, #8]
 8001242:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001246:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800124a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124c:	f7ff ffaa 	bl	80011a4 <HAL_RCC_GetSysClockFreq>
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
 8001252:	4a38      	ldr	r2, [pc, #224]	; (8001334 <HAL_RCC_ClockConfig+0x134>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	40d8      	lsrs	r0, r3
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_ClockConfig+0x138>)
 8001260:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_ClockConfig+0x13c>)
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	f7ff f96f 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
 800126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f023 030f 	bic.w	r3, r3, #15
 8001276:	430b      	orrs	r3, r1
 8001278:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	4299      	cmp	r1, r3
 8001282:	d1c2      	bne.n	800120a <HAL_RCC_ClockConfig+0xa>
 8001284:	e7ca      	b.n	800121c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001286:	f011 0f04 	tst.w	r1, #4
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
 800128c:	d003      	beq.n	8001296 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001294:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	070e      	lsls	r6, r1, #28
 8001298:	d503      	bpl.n	80012a2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80012a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	68a0      	ldr	r0, [r4, #8]
 80012a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012aa:	4302      	orrs	r2, r0
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e7b8      	b.n	8001222 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b0:	6861      	ldr	r1, [r4, #4]
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
 80012b4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	d0a4      	beq.n	800120a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4e1a      	ldr	r6, [pc, #104]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c8:	f022 0203 	bic.w	r2, r2, #3
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80012d0:	f7ff f976 	bl	80005c0 <HAL_GetTick>
 80012d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	68b3      	ldr	r3, [r6, #8]
 80012d8:	6862      	ldr	r2, [r4, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012e2:	d0a0      	beq.n	8001226 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff f96c 	bl	80005c0 <HAL_GetTick>
 80012e8:	1bc0      	subs	r0, r0, r7
 80012ea:	4540      	cmp	r0, r8
 80012ec:	d9f3      	bls.n	80012d6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80012ee:	2003      	movs	r0, #3
}
 80012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f4:	2902      	cmp	r1, #2
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012fc:	e7df      	b.n	80012be <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	f012 0f02 	tst.w	r2, #2
 8001302:	e7dc      	b.n	80012be <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	432b      	orrs	r3, r5
 800130c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	429d      	cmp	r5, r3
 8001316:	f47f af78 	bne.w	800120a <HAL_RCC_ClockConfig+0xa>
 800131a:	e78a      	b.n	8001232 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <HAL_RCC_ClockConfig+0x130>)
 800131e:	68e0      	ldr	r0, [r4, #12]
 8001320:	688b      	ldr	r3, [r1, #8]
 8001322:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001326:	4303      	orrs	r3, r0
 8001328:	608b      	str	r3, [r1, #8]
 800132a:	e785      	b.n	8001238 <HAL_RCC_ClockConfig+0x38>
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	0800d965 	.word	0x0800d965
 8001338:	20020020 	.word	0x20020020
 800133c:	20020004 	.word	0x20020004

08001340 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_GetHCLKFreq+0x8>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20020020 	.word	0x20020020

0800134c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x14>)
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800135a:	6810      	ldr	r0, [r2, #0]
}
 800135c:	40d8      	lsrs	r0, r3
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800
 8001364:	0800d975 	.word	0x0800d975
 8001368:	20020020 	.word	0x20020020

0800136c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x14>)
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800137a:	6810      	ldr	r0, [r2, #0]
}
 800137c:	40d8      	lsrs	r0, r3
 800137e:	4770      	bx	lr
 8001380:	40023800 	.word	0x40023800
 8001384:	0800d975 	.word	0x0800d975
 8001388:	20020020 	.word	0x20020020

0800138c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800138c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001390:	6802      	ldr	r2, [r0, #0]
{
 8001392:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001394:	f012 0601 	ands.w	r6, r2, #1
 8001398:	d00b      	beq.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800139a:	4bba      	ldr	r3, [pc, #744]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80013a2:	6099      	str	r1, [r3, #8]
 80013a4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80013aa:	fab6 f686 	clz	r6, r6
 80013ae:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80013b0:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013b2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80013b6:	d012      	beq.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013b8:	49b2      	ldr	r1, [pc, #712]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013ba:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80013bc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80013c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80013c8:	bf08      	it	eq
 80013ca:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013cc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013d0:	bf16      	itet	ne
 80013d2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80013d6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013d8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80013de:	02d7      	lsls	r7, r2, #11
 80013e0:	d510      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013e2:	48a8      	ldr	r0, [pc, #672]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013e6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013ea:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013f2:	ea43 0301 	orr.w	r3, r3, r1
 80013f6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013fa:	f000 81a9 	beq.w	8001750 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80013fe:	2900      	cmp	r1, #0
 8001400:	bf08      	it	eq
 8001402:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001404:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001408:	bf18      	it	ne
 800140a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800140c:	0690      	lsls	r0, r2, #26
 800140e:	d531      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001412:	4f9d      	ldr	r7, [pc, #628]	; (8001688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001416:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800142e:	f7ff f8c7 	bl	80005c0 <HAL_GetTick>
 8001432:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	05d9      	lsls	r1, r3, #23
 8001438:	f140 818c 	bpl.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800143c:	4f91      	ldr	r7, [pc, #580]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800143e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001440:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001444:	f040 8191 	bne.w	800176a <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001448:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800144a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800144e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001452:	4a8c      	ldr	r2, [pc, #560]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001454:	f040 81af 	bne.w	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001458:	6891      	ldr	r1, [r2, #8]
 800145a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800145e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001462:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001466:	4301      	orrs	r1, r0
 8001468:	6091      	str	r1, [r2, #8]
 800146a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001470:	430b      	orrs	r3, r1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	06df      	lsls	r7, r3, #27
 8001478:	d50c      	bpl.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800147a:	4a82      	ldr	r2, [pc, #520]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800147c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001480:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001484:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001488:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800148c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800148e:	4301      	orrs	r1, r0
 8001490:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001494:	0458      	lsls	r0, r3, #17
 8001496:	d508      	bpl.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001498:	497a      	ldr	r1, [pc, #488]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800149a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800149c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80014a4:	4302      	orrs	r2, r0
 80014a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014aa:	0419      	lsls	r1, r3, #16
 80014ac:	d508      	bpl.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80014ae:	4975      	ldr	r1, [pc, #468]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014b0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80014b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014b6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80014ba:	4302      	orrs	r2, r0
 80014bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80014c0:	03da      	lsls	r2, r3, #15
 80014c2:	d508      	bpl.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80014c4:	496f      	ldr	r1, [pc, #444]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014d0:	4302      	orrs	r2, r0
 80014d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80014d6:	039f      	lsls	r7, r3, #14
 80014d8:	d508      	bpl.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80014da:	496a      	ldr	r1, [pc, #424]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80014de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80014e6:	4302      	orrs	r2, r0
 80014e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014ec:	0658      	lsls	r0, r3, #25
 80014ee:	d508      	bpl.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014f0:	4964      	ldr	r1, [pc, #400]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80014f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014f8:	f022 0203 	bic.w	r2, r2, #3
 80014fc:	4302      	orrs	r2, r0
 80014fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001502:	0619      	lsls	r1, r3, #24
 8001504:	d508      	bpl.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001506:	495f      	ldr	r1, [pc, #380]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001508:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800150a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800150e:	f022 020c 	bic.w	r2, r2, #12
 8001512:	4302      	orrs	r2, r0
 8001514:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001518:	05da      	lsls	r2, r3, #23
 800151a:	d508      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800151c:	4959      	ldr	r1, [pc, #356]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800151e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001524:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001528:	4302      	orrs	r2, r0
 800152a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800152e:	059f      	lsls	r7, r3, #22
 8001530:	d508      	bpl.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001532:	4954      	ldr	r1, [pc, #336]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001534:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800153a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800153e:	4302      	orrs	r2, r0
 8001540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001544:	0558      	lsls	r0, r3, #21
 8001546:	d508      	bpl.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001548:	494e      	ldr	r1, [pc, #312]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800154a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800154c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001550:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001554:	4302      	orrs	r2, r0
 8001556:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800155a:	0519      	lsls	r1, r3, #20
 800155c:	d508      	bpl.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800155e:	4949      	ldr	r1, [pc, #292]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001562:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001566:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800156a:	4302      	orrs	r2, r0
 800156c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001570:	04da      	lsls	r2, r3, #19
 8001572:	d508      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001574:	4943      	ldr	r1, [pc, #268]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001576:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800157c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001580:	4302      	orrs	r2, r0
 8001582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001586:	049f      	lsls	r7, r3, #18
 8001588:	d508      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800158a:	493e      	ldr	r1, [pc, #248]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800158e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001592:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001596:	4302      	orrs	r2, r0
 8001598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800159c:	0258      	lsls	r0, r3, #9
 800159e:	d508      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015a0:	4938      	ldr	r1, [pc, #224]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015a2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80015a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015a8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80015ac:	4302      	orrs	r2, r0
 80015ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80015b2:	0299      	lsls	r1, r3, #10
 80015b4:	d50c      	bpl.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015b6:	4833      	ldr	r0, [pc, #204]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80015ba:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80015be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015c2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80015c6:	bf08      	it	eq
 80015c8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015ca:	430a      	orrs	r2, r1
 80015cc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80015d0:	f013 0f08 	tst.w	r3, #8
 80015d4:	bf18      	it	ne
 80015d6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80015d8:	035a      	lsls	r2, r3, #13
 80015da:	d508      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015dc:	4929      	ldr	r1, [pc, #164]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80015e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e8:	4302      	orrs	r2, r0
 80015ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80015ee:	021f      	lsls	r7, r3, #8
 80015f0:	d509      	bpl.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80015f2:	4924      	ldr	r1, [pc, #144]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015f4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80015f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001600:	4302      	orrs	r2, r0
 8001602:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001606:	0158      	lsls	r0, r3, #5
 8001608:	d509      	bpl.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800160a:	491e      	ldr	r1, [pc, #120]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800160c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001610:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001614:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001618:	4302      	orrs	r2, r0
 800161a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800161e:	0119      	lsls	r1, r3, #4
 8001620:	d509      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001622:	4918      	ldr	r1, [pc, #96]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001624:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001628:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800162c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001630:	4302      	orrs	r2, r0
 8001632:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001636:	00da      	lsls	r2, r3, #3
 8001638:	d509      	bpl.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800163a:	4912      	ldr	r1, [pc, #72]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800163c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001640:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001644:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001648:	4302      	orrs	r2, r0
 800164a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800164e:	2e01      	cmp	r6, #1
 8001650:	f000 80b5 	beq.w	80017be <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001658:	f000 80b1 	beq.w	80017be <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800165c:	2d01      	cmp	r5, #1
 800165e:	d175      	bne.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001660:	4d08      	ldr	r5, [pc, #32]	; (8001684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001668:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166a:	f7fe ffa9 	bl	80005c0 <HAL_GetTick>
 800166e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	009f      	lsls	r7, r3, #2
 8001674:	f100 8127 	bmi.w	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001678:	6821      	ldr	r1, [r4, #0]
 800167a:	030e      	lsls	r6, r1, #12
 800167c:	d506      	bpl.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800167e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001680:	b143      	cbz	r3, 8001694 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001682:	e003      	b.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000
 800168c:	02cd      	lsls	r5, r1, #11
 800168e:	d51d      	bpl.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001692:	b9db      	cbnz	r3, 80016cc <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001694:	4a93      	ldr	r2, [pc, #588]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001696:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800169a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800169e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016a6:	4303      	orrs	r3, r0
 80016a8:	6960      	ldr	r0, [r4, #20]
 80016aa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016ae:	69a0      	ldr	r0, [r4, #24]
 80016b0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80016b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80016bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80016c2:	3801      	subs	r0, #1
 80016c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80016c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80016cc:	0288      	lsls	r0, r1, #10
 80016ce:	d515      	bpl.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x370>
 80016d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80016d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016d6:	d111      	bne.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80016d8:	4a82      	ldr	r2, [pc, #520]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80016de:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80016e2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016e6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016ea:	4303      	orrs	r3, r0
 80016ec:	6960      	ldr	r0, [r4, #20]
 80016ee:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016f2:	6a20      	ldr	r0, [r4, #32]
 80016f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80016fc:	070a      	lsls	r2, r1, #28
 80016fe:	d519      	bpl.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001700:	4978      	ldr	r1, [pc, #480]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001702:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001706:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800170a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800170e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001712:	4313      	orrs	r3, r2
 8001714:	6962      	ldr	r2, [r4, #20]
 8001716:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800171a:	69e2      	ldr	r2, [r4, #28]
 800171c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001724:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001728:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800172a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800172e:	4313      	orrs	r3, r2
 8001730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001734:	4c6b      	ldr	r4, [pc, #428]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800173e:	f7fe ff3f 	bl	80005c0 <HAL_GetTick>
 8001742:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	f140 80c4 	bpl.w	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e009      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001750:	2601      	movs	r6, #1
 8001752:	e657      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7fe ff34 	bl	80005c0 <HAL_GetTick>
 8001758:	eba0 0008 	sub.w	r0, r0, r8
 800175c:	2864      	cmp	r0, #100	; 0x64
 800175e:	f67f ae69 	bls.w	8001434 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
}
 8001764:	b003      	add	sp, #12
 8001766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800176a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800176c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001770:	4293      	cmp	r3, r2
 8001772:	f43f ae69 	beq.w	8001448 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001778:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800177e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001782:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001784:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800178a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800178c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800178e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001790:	07da      	lsls	r2, r3, #31
 8001792:	f57f ae59 	bpl.w	8001448 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001796:	f7fe ff13 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800179e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a2:	079b      	lsls	r3, r3, #30
 80017a4:	f53f ae50 	bmi.w	8001448 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7fe ff0a 	bl	80005c0 <HAL_GetTick>
 80017ac:	eba0 0008 	sub.w	r0, r0, r8
 80017b0:	4548      	cmp	r0, r9
 80017b2:	d9f5      	bls.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80017b4:	e7d5      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017b6:	6891      	ldr	r1, [r2, #8]
 80017b8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80017bc:	e654      	b.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80017be:	4e49      	ldr	r6, [pc, #292]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017c0:	6833      	ldr	r3, [r6, #0]
 80017c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017c6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017c8:	f7fe fefa 	bl	80005c0 <HAL_GetTick>
 80017cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017ce:	6833      	ldr	r3, [r6, #0]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	d472      	bmi.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	07d7      	lsls	r7, r2, #31
 80017d8:	d512      	bpl.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80017da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017dc:	b983      	cbnz	r3, 8001800 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80017de:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017e2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80017e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ea:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6861      	ldr	r1, [r4, #4]
 80017f2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80017f6:	68a1      	ldr	r1, [r4, #8]
 80017f8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80017fc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001800:	0316      	lsls	r6, r2, #12
 8001802:	d503      	bpl.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800180a:	d005      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800180c:	02d0      	lsls	r0, r2, #11
 800180e:	d51e      	bpl.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001816:	d11a      	bne.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001818:	4932      	ldr	r1, [pc, #200]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800181a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800181e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800182a:	4303      	orrs	r3, r0
 800182c:	6860      	ldr	r0, [r4, #4]
 800182e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001832:	68e0      	ldr	r0, [r4, #12]
 8001834:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800183c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001842:	f020 001f 	bic.w	r0, r0, #31
 8001846:	3b01      	subs	r3, #1
 8001848:	4303      	orrs	r3, r0
 800184a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800184e:	01d1      	lsls	r1, r2, #7
 8001850:	d511      	bpl.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001852:	4924      	ldr	r1, [pc, #144]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001854:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001858:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800185c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001860:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001864:	4303      	orrs	r3, r0
 8001866:	6860      	ldr	r0, [r4, #4]
 8001868:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800186c:	6920      	ldr	r0, [r4, #16]
 800186e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001872:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001876:	0192      	lsls	r2, r2, #6
 8001878:	d50d      	bpl.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800187a:	6923      	ldr	r3, [r4, #16]
 800187c:	6862      	ldr	r2, [r4, #4]
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001884:	68e2      	ldr	r2, [r4, #12]
 8001886:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800188a:	68a2      	ldr	r2, [r4, #8]
 800188c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001892:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001896:	4e13      	ldr	r6, [pc, #76]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001898:	6833      	ldr	r3, [r6, #0]
 800189a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800189e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80018a0:	f7fe fe8e 	bl	80005c0 <HAL_GetTick>
 80018a4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80018a6:	6833      	ldr	r3, [r6, #0]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	f53f aed7 	bmi.w	800165c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80018ae:	f7fe fe87 	bl	80005c0 <HAL_GetTick>
 80018b2:	1bc0      	subs	r0, r0, r7
 80018b4:	2864      	cmp	r0, #100	; 0x64
 80018b6:	d9f6      	bls.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80018b8:	e753      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80018ba:	f7fe fe81 	bl	80005c0 <HAL_GetTick>
 80018be:	1bc0      	subs	r0, r0, r7
 80018c0:	2864      	cmp	r0, #100	; 0x64
 80018c2:	d984      	bls.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 80018c4:	e74d      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018c6:	f7fe fe7b 	bl	80005c0 <HAL_GetTick>
 80018ca:	1b80      	subs	r0, r0, r6
 80018cc:	2864      	cmp	r0, #100	; 0x64
 80018ce:	f67f aecf 	bls.w	8001670 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80018d2:	e746      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018d4:	f7fe fe74 	bl	80005c0 <HAL_GetTick>
 80018d8:	1b40      	subs	r0, r0, r5
 80018da:	2864      	cmp	r0, #100	; 0x64
 80018dc:	f67f af32 	bls.w	8001744 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80018e0:	e73f      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018e8:	6803      	ldr	r3, [r0, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80018f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018f2:	6842      	ldr	r2, [r0, #4]
 80018f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80018f8:	d10a      	bne.n	8001910 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80018fa:	6882      	ldr	r2, [r0, #8]
 80018fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001900:	d002      	beq.n	8001908 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001902:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001906:	d103      	bne.n	8001910 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800190e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001910:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001912:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001916:	d107      	bne.n	8001928 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001928:	2301      	movs	r3, #1
 800192a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800192e:	2300      	movs	r3, #0
 8001930:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001934:	2003      	movs	r0, #3
 8001936:	4770      	bx	lr

08001938 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	6898      	ldr	r0, [r3, #8]
 8001944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001948:	d100      	bne.n	800194c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 800194a:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 800194c:	1c6a      	adds	r2, r5, #1
 800194e:	d0f8      	beq.n	8001942 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001950:	f7fe fe36 	bl	80005c0 <HAL_GetTick>
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	4285      	cmp	r5, r0
 8001958:	d8f2      	bhi.n	8001940 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800195a:	4620      	mov	r0, r4
}
 800195c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001960:	f7ff bfc2 	b.w	80018e8 <SPI_WaitFifoStateUntilTimeout.part.1>

08001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	4605      	mov	r5, r0
 8001968:	460c      	mov	r4, r1
 800196a:	4616      	mov	r6, r2
 800196c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800196e:	6829      	ldr	r1, [r5, #0]
 8001970:	6888      	ldr	r0, [r1, #8]
 8001972:	4020      	ands	r0, r4
 8001974:	d100      	bne.n	8001978 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001978:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800197c:	d100      	bne.n	8001980 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800197e:	7b0b      	ldrb	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001980:	1c73      	adds	r3, r6, #1
 8001982:	d0f5      	beq.n	8001970 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001984:	f7fe fe1c 	bl	80005c0 <HAL_GetTick>
 8001988:	1bc0      	subs	r0, r0, r7
 800198a:	4286      	cmp	r6, r0
 800198c:	d8ef      	bhi.n	800196e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 800198e:	4628      	mov	r0, r5
}
 8001990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001994:	f7ff bfa8 	b.w	80018e8 <SPI_WaitFifoStateUntilTimeout.part.1>

08001998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001998:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800199a:	4613      	mov	r3, r2
{
 800199c:	460d      	mov	r5, r1
 800199e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019a0:	460a      	mov	r2, r1
 80019a2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80019a6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019a8:	f7ff ffdc 	bl	8001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019ac:	b128      	cbz	r0, 80019ba <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80019b0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	6623      	str	r3, [r4, #96]	; 0x60
 80019b8:	e00f      	b.n	80019da <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019ba:	4632      	mov	r2, r6
 80019bc:	4629      	mov	r1, r5
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff ffba 	bl	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d1f2      	bne.n	80019ae <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019c8:	4633      	mov	r3, r6
 80019ca:	462a      	mov	r2, r5
 80019cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff ffc7 	bl	8001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d1e9      	bne.n	80019ae <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80019da:	bd70      	pop	{r4, r5, r6, pc}

080019dc <HAL_SPI_Init>:
{
 80019dc:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80019de:	4604      	mov	r4, r0
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d04e      	beq.n	8001a82 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80019e8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80019ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f0:	b91b      	cbnz	r3, 80019fa <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80019f2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80019f6:	f001 f9f1 	bl	8002ddc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80019fa:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80019fc:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019fe:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001a04:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a06:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a14:	d932      	bls.n	8001a7c <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a16:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a18:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	bf18      	it	ne
 8001a1e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a22:	b92b      	cbnz	r3, 8001a30 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a24:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a28:	bf8c      	ite	hi
 8001a2a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a2c:	2301      	movls	r3, #1
 8001a2e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a30:	68a6      	ldr	r6, [r4, #8]
 8001a32:	6863      	ldr	r3, [r4, #4]
 8001a34:	69a5      	ldr	r5, [r4, #24]
 8001a36:	4333      	orrs	r3, r6
 8001a38:	6926      	ldr	r6, [r4, #16]
 8001a3a:	4333      	orrs	r3, r6
 8001a3c:	6966      	ldr	r6, [r4, #20]
 8001a3e:	4333      	orrs	r3, r6
 8001a40:	69e6      	ldr	r6, [r4, #28]
 8001a42:	4333      	orrs	r3, r6
 8001a44:	6a26      	ldr	r6, [r4, #32]
 8001a46:	4333      	orrs	r3, r6
 8001a48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a4a:	4333      	orrs	r3, r6
 8001a4c:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a50:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a52:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a54:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a58:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a60:	431a      	orrs	r2, r3
 8001a62:	432a      	orrs	r2, r5
 8001a64:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a66:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a68:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a6a:	69cb      	ldr	r3, [r1, #28]
 8001a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a70:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001a72:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a74:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a80:	e7cc      	b.n	8001a1c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
}
 8001a84:	bd70      	pop	{r4, r5, r6, pc}

08001a86 <HAL_SPI_Transmit>:
{
 8001a86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a8a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001a8c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8001a94:	2b01      	cmp	r3, #1
{
 8001a96:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001a98:	f000 80b0 	beq.w	8001bfc <HAL_SPI_Transmit+0x176>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001aa2:	f7fe fd8d 	bl	80005c0 <HAL_GetTick>
 8001aa6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001aa8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001aac:	b2c0      	uxtb	r0, r0
 8001aae:	2801      	cmp	r0, #1
 8001ab0:	f040 80a2 	bne.w	8001bf8 <HAL_SPI_Transmit+0x172>
  if ((pData == NULL) || (Size == 0U))
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	d05e      	beq.n	8001b76 <HAL_SPI_Transmit+0xf0>
 8001ab8:	f1b8 0f00 	cmp.w	r8, #0
 8001abc:	d05b      	beq.n	8001b76 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001abe:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ac0:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ac2:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ac4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ac8:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aca:	6620      	str	r0, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8001ad0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ad4:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ad6:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ada:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ade:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ae0:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxXferSize  = Size;
 8001ae2:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 8001ae6:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae8:	d103      	bne.n	8001af2 <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001af2:	6803      	ldr	r3, [r0, #0]
 8001af4:	065b      	lsls	r3, r3, #25
 8001af6:	d403      	bmi.n	8001b00 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001af8:	6803      	ldr	r3, [r0, #0]
 8001afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afe:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b00:	68e3      	ldr	r3, [r4, #12]
 8001b02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b06:	6863      	ldr	r3, [r4, #4]
 8001b08:	d93e      	bls.n	8001b88 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b0a:	b113      	cbz	r3, 8001b12 <HAL_SPI_Transmit+0x8c>
 8001b0c:	f1b8 0f01 	cmp.w	r8, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b12:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b16:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b18:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001b1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001b22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b9a3      	cbnz	r3, 8001b52 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b28:	463a      	mov	r2, r7
 8001b2a:	4631      	mov	r1, r6
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ff33 	bl	8001998 <SPI_EndRxTxTransaction>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d15d      	bne.n	8001bf2 <HAL_SPI_Transmit+0x16c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	b933      	cbnz	r3, 8001b48 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b48:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001b4a:	3000      	adds	r0, #0
 8001b4c:	bf18      	it	ne
 8001b4e:	2001      	movne	r0, #1
 8001b50:	e011      	b.n	8001b76 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	0798      	lsls	r0, r3, #30
 8001b58:	d505      	bpl.n	8001b66 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b5c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001b60:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b62:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b64:	e7d9      	b.n	8001b1a <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b66:	f7fe fd2b 	bl	80005c0 <HAL_GetTick>
 8001b6a:	1bc0      	subs	r0, r0, r7
 8001b6c:	42b0      	cmp	r0, r6
 8001b6e:	d3d8      	bcc.n	8001b22 <HAL_SPI_Transmit+0x9c>
 8001b70:	1c71      	adds	r1, r6, #1
 8001b72:	d0d6      	beq.n	8001b22 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001b82:	b002      	add	sp, #8
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b88:	b113      	cbz	r3, 8001b90 <HAL_SPI_Transmit+0x10a>
 8001b8a:	f1b8 0f01 	cmp.w	r8, #1
 8001b8e:	d113      	bne.n	8001bb8 <HAL_SPI_Transmit+0x132>
      if (hspi->TxXferCount > 1U)
 8001b90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d906      	bls.n	8001ba6 <HAL_SPI_Transmit+0x120>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b98:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b9c:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b9e:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001ba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ba2:	3b02      	subs	r3, #2
 8001ba4:	e006      	b.n	8001bb4 <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ba6:	782b      	ldrb	r3, [r5, #0]
 8001ba8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8001baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bac:	3301      	adds	r3, #1
 8001bae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001bb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001bb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0b3      	beq.n	8001b28 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	0792      	lsls	r2, r2, #30
 8001bc6:	d50c      	bpl.n	8001be2 <HAL_SPI_Transmit+0x15c>
        if (hspi->TxXferCount > 1U)
 8001bc8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001bca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	2a01      	cmp	r2, #1
 8001bd0:	d904      	bls.n	8001bdc <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd2:	f830 2b02 	ldrh.w	r2, [r0], #2
 8001bd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8001bda:	e7e1      	b.n	8001ba0 <HAL_SPI_Transmit+0x11a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bdc:	7802      	ldrb	r2, [r0, #0]
 8001bde:	731a      	strb	r2, [r3, #12]
 8001be0:	e7e3      	b.n	8001baa <HAL_SPI_Transmit+0x124>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be2:	f7fe fced 	bl	80005c0 <HAL_GetTick>
 8001be6:	1bc0      	subs	r0, r0, r7
 8001be8:	4286      	cmp	r6, r0
 8001bea:	d8e5      	bhi.n	8001bb8 <HAL_SPI_Transmit+0x132>
 8001bec:	1c73      	adds	r3, r6, #1
 8001bee:	d0e3      	beq.n	8001bb8 <HAL_SPI_Transmit+0x132>
 8001bf0:	e7c0      	b.n	8001b74 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	6623      	str	r3, [r4, #96]	; 0x60
 8001bf6:	e79e      	b.n	8001b36 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	e7bc      	b.n	8001b76 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	e7c0      	b.n	8001b82 <HAL_SPI_Transmit+0xfc>

08001c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c00:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c02:	69c2      	ldr	r2, [r0, #28]
{
 8001c04:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c06:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c08:	6881      	ldr	r1, [r0, #8]
 8001c0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c0c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c0e:	4301      	orrs	r1, r0
 8001c10:	6960      	ldr	r0, [r4, #20]
 8001c12:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c14:	4890      	ldr	r0, [pc, #576]	; (8001e58 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c16:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c18:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001c1a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c1c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c1e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c20:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c2c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c2e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001c30:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c32:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001c36:	4301      	orrs	r1, r0
 8001c38:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c3a:	4988      	ldr	r1, [pc, #544]	; (8001e5c <UART_SetConfig+0x25c>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d117      	bne.n	8001c70 <UART_SetConfig+0x70>
 8001c40:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <UART_SetConfig+0x260>)
 8001c42:	4988      	ldr	r1, [pc, #544]	; (8001e64 <UART_SetConfig+0x264>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	d129      	bne.n	8001ca8 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	f200 809d 	bhi.w	8001d94 <UART_SetConfig+0x194>
 8001c5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c5e:	008c      	.short	0x008c
 8001c60:	00ee00e8 	.word	0x00ee00e8
 8001c64:	00fa009b 	.word	0x00fa009b
 8001c68:	009b009b 	.word	0x009b009b
 8001c6c:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c70:	497d      	ldr	r1, [pc, #500]	; (8001e68 <UART_SetConfig+0x268>)
 8001c72:	428b      	cmp	r3, r1
 8001c74:	d106      	bne.n	8001c84 <UART_SetConfig+0x84>
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <UART_SetConfig+0x260>)
 8001c78:	497c      	ldr	r1, [pc, #496]	; (8001e6c <UART_SetConfig+0x26c>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	e7e3      	b.n	8001c4c <UART_SetConfig+0x4c>
 8001c84:	497a      	ldr	r1, [pc, #488]	; (8001e70 <UART_SetConfig+0x270>)
 8001c86:	428b      	cmp	r3, r1
 8001c88:	d11d      	bne.n	8001cc6 <UART_SetConfig+0xc6>
 8001c8a:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <UART_SetConfig+0x260>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	f000 80d9 	beq.w	8001e4c <UART_SetConfig+0x24c>
 8001c9a:	d80e      	bhi.n	8001cba <UART_SetConfig+0xba>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d067      	beq.n	8001d70 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ca0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ca4:	d076      	beq.n	8001d94 <UART_SetConfig+0x194>
 8001ca6:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d873      	bhi.n	8001d94 <UART_SetConfig+0x194>
 8001cac:	e8df f003 	tbb	[pc, r3]
 8001cb0:	72a29f99 	.word	0x72a29f99
 8001cb4:	727272b4 	.word	0x727272b4
 8001cb8:	b7          	.byte	0xb7
 8001cb9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	f000 80ba 	beq.w	8001e34 <UART_SetConfig+0x234>
 8001cc0:	2b30      	cmp	r3, #48	; 0x30
 8001cc2:	d03f      	beq.n	8001d44 <UART_SetConfig+0x144>
 8001cc4:	e7ec      	b.n	8001ca0 <UART_SetConfig+0xa0>
 8001cc6:	496b      	ldr	r1, [pc, #428]	; (8001e74 <UART_SetConfig+0x274>)
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	d10d      	bne.n	8001ce8 <UART_SetConfig+0xe8>
 8001ccc:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <UART_SetConfig+0x260>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	f000 80b8 	beq.w	8001e4c <UART_SetConfig+0x24c>
 8001cdc:	d9de      	bls.n	8001c9c <UART_SetConfig+0x9c>
 8001cde:	2b80      	cmp	r3, #128	; 0x80
 8001ce0:	f000 80a8 	beq.w	8001e34 <UART_SetConfig+0x234>
 8001ce4:	2bc0      	cmp	r3, #192	; 0xc0
 8001ce6:	e7ec      	b.n	8001cc2 <UART_SetConfig+0xc2>
 8001ce8:	4963      	ldr	r1, [pc, #396]	; (8001e78 <UART_SetConfig+0x278>)
 8001cea:	428b      	cmp	r3, r1
 8001cec:	d110      	bne.n	8001d10 <UART_SetConfig+0x110>
 8001cee:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <UART_SetConfig+0x260>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	f000 80a6 	beq.w	8001e4c <UART_SetConfig+0x24c>
 8001d00:	d9cc      	bls.n	8001c9c <UART_SetConfig+0x9c>
 8001d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d06:	f000 8095 	beq.w	8001e34 <UART_SetConfig+0x234>
 8001d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d0e:	e7d8      	b.n	8001cc2 <UART_SetConfig+0xc2>
 8001d10:	495a      	ldr	r1, [pc, #360]	; (8001e7c <UART_SetConfig+0x27c>)
 8001d12:	428b      	cmp	r3, r1
 8001d14:	d11e      	bne.n	8001d54 <UART_SetConfig+0x154>
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <UART_SetConfig+0x260>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d24:	f000 8092 	beq.w	8001e4c <UART_SetConfig+0x24c>
 8001d28:	d806      	bhi.n	8001d38 <UART_SetConfig+0x138>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d07c      	beq.n	8001e28 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d32:	d12f      	bne.n	8001d94 <UART_SetConfig+0x194>
 8001d34:	2310      	movs	r3, #16
 8001d36:	e78d      	b.n	8001c54 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d3c:	d07a      	beq.n	8001e34 <UART_SetConfig+0x234>
 8001d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d42:	d1f4      	bne.n	8001d2e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d48:	d169      	bne.n	8001e1e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d4a:	6863      	ldr	r3, [r4, #4]
 8001d4c:	0858      	lsrs	r0, r3, #1
 8001d4e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001d52:	e078      	b.n	8001e46 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d54:	494a      	ldr	r1, [pc, #296]	; (8001e80 <UART_SetConfig+0x280>)
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d124      	bne.n	8001da4 <UART_SetConfig+0x1a4>
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <UART_SetConfig+0x260>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	d070      	beq.n	8001e4c <UART_SetConfig+0x24c>
 8001d6a:	d815      	bhi.n	8001d98 <UART_SetConfig+0x198>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1de      	bne.n	8001d2e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d74:	d135      	bne.n	8001de2 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d76:	f7ff fae9 	bl	800134c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	0853      	lsrs	r3, r2, #1
 8001d7e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001d82:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d86:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001d8c:	f1a0 0210 	sub.w	r2, r0, #16
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d91a      	bls.n	8001dca <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001d94:	2001      	movs	r0, #1
 8001d96:	e020      	b.n	8001dda <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9c:	d04a      	beq.n	8001e34 <UART_SetConfig+0x234>
 8001d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001da2:	e7ce      	b.n	8001d42 <UART_SetConfig+0x142>
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <UART_SetConfig+0x284>)
 8001da6:	428b      	cmp	r3, r1
 8001da8:	d1f4      	bne.n	8001d94 <UART_SetConfig+0x194>
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <UART_SetConfig+0x260>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db8:	d048      	beq.n	8001e4c <UART_SetConfig+0x24c>
 8001dba:	f67f af6f 	bls.w	8001c9c <UART_SetConfig+0x9c>
 8001dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc2:	d037      	beq.n	8001e34 <UART_SetConfig+0x234>
 8001dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001dc8:	e77b      	b.n	8001cc2 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001dca:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dce:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	4318      	orrs	r0, r3
 8001dd6:	60d0      	str	r0, [r2, #12]
 8001dd8:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001dde:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001de2:	f7ff fab3 	bl	800134c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001dec:	e008      	b.n	8001e00 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001dee:	f7ff fabd 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 8001df2:	e7f8      	b.n	8001de6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001df4:	6863      	ldr	r3, [r4, #4]
 8001df6:	0858      	lsrs	r0, r3, #1
 8001df8:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001dfc:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e04:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e06:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001e0a:	f1a0 0210 	sub.w	r2, r0, #16
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d8c0      	bhi.n	8001d94 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	60d8      	str	r0, [r3, #12]
 8001e16:	e7df      	b.n	8001dd8 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e18:	f7ff f9c4 	bl	80011a4 <HAL_RCC_GetSysClockFreq>
 8001e1c:	e7e3      	b.n	8001de6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	0858      	lsrs	r0, r3, #1
 8001e22:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001e26:	e7eb      	b.n	8001e00 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e2c:	d1df      	bne.n	8001dee <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e2e:	f7ff fa9d 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 8001e32:	e7a2      	b.n	8001d7a <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e38:	d1dc      	bne.n	8001df4 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e3a:	6863      	ldr	r3, [r4, #4]
 8001e3c:	0858      	lsrs	r0, r3, #1
 8001e3e:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001e42:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e4a:	e79c      	b.n	8001d86 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e50:	d1e2      	bne.n	8001e18 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e52:	f7ff f9a7 	bl	80011a4 <HAL_RCC_GetSysClockFreq>
 8001e56:	e790      	b.n	8001d7a <UART_SetConfig+0x17a>
 8001e58:	efff69f3 	.word	0xefff69f3
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08003028 	.word	0x08003028
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	0800302c 	.word	0x0800302c
 8001e70:	40004800 	.word	0x40004800
 8001e74:	40004c00 	.word	0x40004c00
 8001e78:	40005000 	.word	0x40005000
 8001e7c:	40011400 	.word	0x40011400
 8001e80:	40007800 	.word	0x40007800
 8001e84:	40007c00 	.word	0x40007c00

08001e88 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e8a:	07da      	lsls	r2, r3, #31
{
 8001e8c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e8e:	d506      	bpl.n	8001e9e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e90:	6801      	ldr	r1, [r0, #0]
 8001e92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e94:	684a      	ldr	r2, [r1, #4]
 8001e96:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e9a:	4322      	orrs	r2, r4
 8001e9c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e9e:	079c      	lsls	r4, r3, #30
 8001ea0:	d506      	bpl.n	8001eb0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ea2:	6801      	ldr	r1, [r0, #0]
 8001ea4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ea6:	684a      	ldr	r2, [r1, #4]
 8001ea8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eac:	4322      	orrs	r2, r4
 8001eae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001eb0:	0759      	lsls	r1, r3, #29
 8001eb2:	d506      	bpl.n	8001ec2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eb4:	6801      	ldr	r1, [r0, #0]
 8001eb6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001eb8:	684a      	ldr	r2, [r1, #4]
 8001eba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebe:	4322      	orrs	r2, r4
 8001ec0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ec2:	071a      	lsls	r2, r3, #28
 8001ec4:	d506      	bpl.n	8001ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ec6:	6801      	ldr	r1, [r0, #0]
 8001ec8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001eca:	684a      	ldr	r2, [r1, #4]
 8001ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed0:	4322      	orrs	r2, r4
 8001ed2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ed4:	06dc      	lsls	r4, r3, #27
 8001ed6:	d506      	bpl.n	8001ee6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ed8:	6801      	ldr	r1, [r0, #0]
 8001eda:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001edc:	688a      	ldr	r2, [r1, #8]
 8001ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ee2:	4322      	orrs	r2, r4
 8001ee4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ee6:	0699      	lsls	r1, r3, #26
 8001ee8:	d506      	bpl.n	8001ef8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001eea:	6801      	ldr	r1, [r0, #0]
 8001eec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001eee:	688a      	ldr	r2, [r1, #8]
 8001ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef4:	4322      	orrs	r2, r4
 8001ef6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ef8:	065a      	lsls	r2, r3, #25
 8001efa:	d510      	bpl.n	8001f1e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001efc:	6801      	ldr	r1, [r0, #0]
 8001efe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f00:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f06:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f0a:	ea42 0204 	orr.w	r2, r2, r4
 8001f0e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f10:	d105      	bne.n	8001f1e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f12:	684a      	ldr	r2, [r1, #4]
 8001f14:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f16:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f1a:	4322      	orrs	r2, r4
 8001f1c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	d506      	bpl.n	8001f30 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f26:	6853      	ldr	r3, [r2, #4]
 8001f28:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6053      	str	r3, [r2, #4]
 8001f30:	bd10      	pop	{r4, pc}

08001f32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f36:	9d06      	ldr	r5, [sp, #24]
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460f      	mov	r7, r1
 8001f3c:	4616      	mov	r6, r2
 8001f3e:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f40:	6821      	ldr	r1, [r4, #0]
 8001f42:	69ca      	ldr	r2, [r1, #28]
 8001f44:	ea37 0302 	bics.w	r3, r7, r2
 8001f48:	bf0c      	ite	eq
 8001f4a:	2201      	moveq	r2, #1
 8001f4c:	2200      	movne	r2, #0
 8001f4e:	42b2      	cmp	r2, r6
 8001f50:	d002      	beq.n	8001f58 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001f52:	2000      	movs	r0, #0
}
 8001f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f58:	1c68      	adds	r0, r5, #1
 8001f5a:	d0f2      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5c:	f7fe fb30 	bl	80005c0 <HAL_GetTick>
 8001f60:	eba0 0008 	sub.w	r0, r0, r8
 8001f64:	4285      	cmp	r5, r0
 8001f66:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f68:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	d300      	bcc.n	8001f6e <UART_WaitOnFlagUntilTimeout+0x3c>
 8001f6c:	b97d      	cbnz	r5, 8001f8e <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f72:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f74:	6883      	ldr	r3, [r0, #8]
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001f80:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001f82:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001f84:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001f86:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f8e:	075a      	lsls	r2, r3, #29
 8001f90:	d5d6      	bpl.n	8001f40 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f92:	69c3      	ldr	r3, [r0, #28]
 8001f94:	051b      	lsls	r3, r3, #20
 8001f96:	d5d3      	bpl.n	8001f40 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f9c:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f9e:	6803      	ldr	r3, [r0, #0]
 8001fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fa4:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa6:	6883      	ldr	r3, [r0, #8]
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001fb2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fb4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001fb6:	e7e4      	b.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x50>

08001fb8 <HAL_UART_Transmit>:
{
 8001fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001fbc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc4:	2b20      	cmp	r3, #32
{
 8001fc6:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc8:	d14c      	bne.n	8002064 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8001fca:	2900      	cmp	r1, #0
 8001fcc:	d048      	beq.n	8002060 <HAL_UART_Transmit+0xa8>
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d046      	beq.n	8002060 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001fd2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d044      	beq.n	8002064 <HAL_UART_Transmit+0xac>
 8001fda:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001fde:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe6:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001fe8:	f7fe faea 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fec:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001fee:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001ff0:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001ff8:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	d103      	bne.n	8002006 <HAL_UART_Transmit+0x4e>
 8001ffe:	6923      	ldr	r3, [r4, #16]
 8002000:	b90b      	cbnz	r3, 8002006 <HAL_UART_Transmit+0x4e>
 8002002:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002004:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8002006:	2300      	movs	r3, #0
 8002008:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800200c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002010:	463b      	mov	r3, r7
 8002012:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002016:	b292      	uxth	r2, r2
 8002018:	b93a      	cbnz	r2, 800202a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800201a:	2140      	movs	r1, #64	; 0x40
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff88 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 8002022:	b940      	cbnz	r0, 8002036 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002024:	2320      	movs	r3, #32
 8002026:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002028:	e006      	b.n	8002038 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800202a:	2200      	movs	r2, #0
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff ff7f 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 8002034:	b118      	cbz	r0, 800203e <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
}
 8002038:	b003      	add	sp, #12
 800203a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800203e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002040:	b95e      	cbnz	r6, 800205a <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002042:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002046:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800204a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800204c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002058:	e7d8      	b.n	800200c <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800205a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800205e:	e7f4      	b.n	800204a <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	e7e9      	b.n	8002038 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002064:	2002      	movs	r0, #2
 8002066:	e7e7      	b.n	8002038 <HAL_UART_Transmit+0x80>

08002068 <UART_CheckIdleState>:
{
 8002068:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206a:	2600      	movs	r6, #0
{
 800206c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002070:	f7fe faa6 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002074:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002076:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	071a      	lsls	r2, r3, #28
 800207c:	d415      	bmi.n	80020aa <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	075b      	lsls	r3, r3, #29
 8002084:	d50a      	bpl.n	800209c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002090:	4620      	mov	r0, r4
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	462b      	mov	r3, r5
 8002096:	f7ff ff4c 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 800209a:	b990      	cbnz	r0, 80020c2 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800209c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800209e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80020a0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80020a2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80020a6:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80020a8:	e00c      	b.n	80020c4 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020ae:	4632      	mov	r2, r6
 80020b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ff3a 	bl	8001f32 <UART_WaitOnFlagUntilTimeout>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d0dd      	beq.n	800207e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
}
 80020c4:	b002      	add	sp, #8
 80020c6:	bd70      	pop	{r4, r5, r6, pc}

080020c8 <HAL_UART_Init>:
{
 80020c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020ca:	4604      	mov	r4, r0
 80020cc:	b340      	cbz	r0, 8002120 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80020d0:	b91b      	cbnz	r3, 80020da <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80020d2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020d6:	f000 feb3 	bl	8002e40 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020dc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020de:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80020e0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ea:	f7ff fd89 	bl	8001c00 <UART_SetConfig>
 80020ee:	2801      	cmp	r0, #1
 80020f0:	d016      	beq.n	8002120 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020f4:	b113      	cbz	r3, 80020fc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7ff fec6 	bl	8001e88 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80020fe:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
}
 8002116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800211a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800211c:	f7ff bfa4 	b.w	8002068 <UART_CheckIdleState>
}
 8002120:	2001      	movs	r0, #1
 8002122:	bd10      	pop	{r4, pc}

08002124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002126:	3b01      	subs	r3, #1
 8002128:	d101      	bne.n	800212e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
 800212c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800212e:	6902      	ldr	r2, [r0, #16]
 8002130:	2a00      	cmp	r2, #0
 8002132:	daf8      	bge.n	8002126 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002134:	6903      	ldr	r3, [r0, #16]
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <USB_CoreReset+0x2c>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800213e:	3a01      	subs	r2, #1
 8002140:	d0f3      	beq.n	800212a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002142:	6903      	ldr	r3, [r0, #16]
 8002144:	f013 0301 	ands.w	r3, r3, #1
 8002148:	d1f9      	bne.n	800213e <USB_CoreReset+0x1a>

  return HAL_OK;
 800214a:	4618      	mov	r0, r3
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	00030d41 	.word	0x00030d41

08002154 <USB_CoreInit>:
{
 8002154:	b084      	sub	sp, #16
 8002156:	b538      	push	{r3, r4, r5, lr}
 8002158:	ad05      	add	r5, sp, #20
 800215a:	4604      	mov	r4, r0
 800215c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002162:	2b01      	cmp	r3, #1
 8002164:	d126      	bne.n	80021b4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002166:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800216e:	68c3      	ldr	r3, [r0, #12]
 8002170:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002178:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800217a:	68c3      	ldr	r3, [r0, #12]
 800217c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002180:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002184:	2b01      	cmp	r3, #1
 8002186:	d103      	bne.n	8002190 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002188:	68c3      	ldr	r3, [r0, #12]
 800218a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff ffc7 	bl	8002124 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002196:	9b08      	ldr	r3, [sp, #32]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800219c:	68a3      	ldr	r3, [r4, #8]
 800219e:	f043 0306 	orr.w	r3, r3, #6
 80021a2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80021a4:	68a3      	ldr	r3, [r4, #8]
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	60a3      	str	r3, [r4, #8]
}
 80021ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021b0:	b004      	add	sp, #16
 80021b2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80021b4:	68c3      	ldr	r3, [r0, #12]
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80021bc:	f7ff ffb2 	bl	8002124 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80021c8:	e7e5      	b.n	8002196 <USB_CoreInit+0x42>

080021ca <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80021ca:	6883      	ldr	r3, [r0, #8]
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6083      	str	r3, [r0, #8]
}
 80021d2:	2000      	movs	r0, #0
 80021d4:	4770      	bx	lr

080021d6 <USB_SetCurrentMode>:
{
 80021d6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021d8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021da:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80021e0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021e2:	d108      	bne.n	80021f6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80021e4:	68c3      	ldr	r3, [r0, #12]
 80021e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021ea:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80021ec:	2032      	movs	r0, #50	; 0x32
 80021ee:	f7fe f9ed 	bl	80005cc <HAL_Delay>
  return HAL_OK;
 80021f2:	2000      	movs	r0, #0
 80021f4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80021f6:	b919      	cbnz	r1, 8002200 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80021f8:	68c3      	ldr	r3, [r0, #12]
 80021fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021fe:	e7f4      	b.n	80021ea <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
}
 8002202:	bd08      	pop	{r3, pc}

08002204 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002204:	0189      	lsls	r1, r1, #6
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <USB_FlushTxFifo+0x20>)
 8002208:	f041 0120 	orr.w	r1, r1, #32
 800220c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800220e:	3a01      	subs	r2, #1
 8002210:	d005      	beq.n	800221e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002212:	6903      	ldr	r3, [r0, #16]
 8002214:	f013 0320 	ands.w	r3, r3, #32
 8002218:	d1f9      	bne.n	800220e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800221a:	4618      	mov	r0, r3
 800221c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	00030d41 	.word	0x00030d41

08002228 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002228:	2310      	movs	r3, #16
 800222a:	4a06      	ldr	r2, [pc, #24]	; (8002244 <USB_FlushRxFifo+0x1c>)
 800222c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800222e:	3a01      	subs	r2, #1
 8002230:	d005      	beq.n	800223e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002232:	6903      	ldr	r3, [r0, #16]
 8002234:	f013 0310 	ands.w	r3, r3, #16
 8002238:	d1f9      	bne.n	800222e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800223a:	4618      	mov	r0, r3
 800223c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	00030d41 	.word	0x00030d41

08002248 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002248:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800224c:	4319      	orrs	r1, r3
 800224e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002252:	2000      	movs	r0, #0
 8002254:	4770      	bx	lr
	...

08002258 <USB_DevInit>:
{
 8002258:	b084      	sub	sp, #16
 800225a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800225e:	4604      	mov	r4, r0
 8002260:	a809      	add	r0, sp, #36	; 0x24
 8002262:	460f      	mov	r7, r1
 8002264:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800226c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800226e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8002270:	461e      	mov	r6, r3
 8002272:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002276:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002278:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 800227c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800227e:	6046      	str	r6, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002280:	d1f7      	bne.n	8002272 <USB_DevInit+0x1a>
 8002282:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002286:	2d00      	cmp	r5, #0
 8002288:	d16b      	bne.n	8002362 <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800228a:	6873      	ldr	r3, [r6, #4]
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002298:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80022aa:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022ac:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 80022ae:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80022b2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80022b6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022ba:	d159      	bne.n	8002370 <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 80022bc:	2a00      	cmp	r2, #0
 80022be:	d155      	bne.n	800236c <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80022c0:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ffc0 	bl	8002248 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80022c8:	2110      	movs	r1, #16
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff ff9a 	bl	8002204 <USB_FlushTxFifo>
 80022d0:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ffa8 	bl	8002228 <USB_FlushRxFifo>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d14d      	bne.n	8002378 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80022dc:	1c08      	adds	r0, r1, #0
 80022de:	bf18      	it	ne
 80022e0:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80022e8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80022ec:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80022f0:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80022f2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80022f6:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80022f8:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80022fa:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022fc:	42bb      	cmp	r3, r7
 80022fe:	d13d      	bne.n	800237c <USB_DevInit+0x124>
 8002300:	2100      	movs	r1, #0
 8002302:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002306:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800230a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800230e:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002310:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002314:	428b      	cmp	r3, r1
 8002316:	d144      	bne.n	80023a2 <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002318:	6933      	ldr	r3, [r6, #16]
 800231a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800231e:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002324:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002328:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800232a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800232c:	b91b      	cbnz	r3, 8002336 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800232e:	69a3      	ldr	r3, [r4, #24]
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002336:	69a2      	ldr	r2, [r4, #24]
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <USB_DevInit+0x170>)
 800233a:	4313      	orrs	r3, r2
 800233c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800233e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002340:	b11b      	cbz	r3, 800234a <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002342:	69a3      	ldr	r3, [r4, #24]
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800234a:	2d01      	cmp	r5, #1
 800234c:	d105      	bne.n	800235a <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800234e:	69a3      	ldr	r3, [r4, #24]
 8002350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	61a3      	str	r3, [r4, #24]
}
 800235a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800235e:	b004      	add	sp, #16
 8002360:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002368:	63a3      	str	r3, [r4, #56]	; 0x38
 800236a:	e79e      	b.n	80022aa <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800236c:	2101      	movs	r1, #1
 800236e:	e7a8      	b.n	80022c2 <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002370:	2903      	cmp	r1, #3
 8002372:	d0a3      	beq.n	80022bc <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002374:	2103      	movs	r1, #3
 8002376:	e7a4      	b.n	80022c2 <USB_DevInit+0x6a>
 8002378:	2001      	movs	r0, #1
 800237a:	e7b2      	b.n	80022e2 <USB_DevInit+0x8a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800237c:	f8d2 9000 	ldr.w	r9, [r2]
 8002380:	f1b9 0f00 	cmp.w	r9, #0
 8002384:	da0b      	bge.n	800239e <USB_DevInit+0x146>
      if (i == 0U)
 8002386:	b93b      	cbnz	r3, 8002398 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002388:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800238c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800238e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002390:	f8c2 8008 	str.w	r8, [r2, #8]
 8002394:	3220      	adds	r2, #32
 8002396:	e7b1      	b.n	80022fc <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002398:	f8c2 e000 	str.w	lr, [r2]
 800239c:	e7f6      	b.n	800238c <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 800239e:	6011      	str	r1, [r2, #0]
 80023a0:	e7f4      	b.n	800238c <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80023a2:	f8d2 9000 	ldr.w	r9, [r2]
 80023a6:	f1b9 0f00 	cmp.w	r9, #0
 80023aa:	da0b      	bge.n	80023c4 <USB_DevInit+0x16c>
      if (i == 0U)
 80023ac:	b939      	cbnz	r1, 80023be <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80023ae:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80023b2:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023b4:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80023b6:	f8c2 8008 	str.w	r8, [r2, #8]
 80023ba:	3220      	adds	r2, #32
 80023bc:	e7aa      	b.n	8002314 <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80023be:	f8c2 e000 	str.w	lr, [r2]
 80023c2:	e7f6      	b.n	80023b2 <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80023c4:	6017      	str	r7, [r2, #0]
 80023c6:	e7f4      	b.n	80023b2 <USB_DevInit+0x15a>
 80023c8:	803c3800 	.word	0x803c3800

080023cc <USB_DevDisconnect>:
{
 80023cc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80023ce:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80023da:	2003      	movs	r0, #3
 80023dc:	f7fe f8f6 	bl	80005cc <HAL_Delay>
}
 80023e0:	2000      	movs	r0, #0
 80023e2:	bd08      	pop	{r3, pc}

080023e4 <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init() {
 80023e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ST7735_Init();
 80023e6:	f000 fb73 	bl	8002ad0 <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <init+0x28>)
 80023ec:	ab01      	add	r3, sp, #4
 80023ee:	6810      	ldr	r0, [r2, #0]
 80023f0:	6851      	ldr	r1, [r2, #4]
 80023f2:	7a12      	ldrb	r2, [r2, #8]
 80023f4:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(&huart3, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80023f6:	a901      	add	r1, sp, #4
    const char ready[] = "Ready!\r\n";
 80023f8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	2208      	movs	r2, #8
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <init+0x2c>)
 8002402:	f7ff fdd9 	bl	8001fb8 <HAL_UART_Transmit>
}
 8002406:	b005      	add	sp, #20
 8002408:	f85d fb04 	ldr.w	pc, [sp], #4
 800240c:	0800584e 	.word	0x0800584e
 8002410:	20020044 	.word	0x20020044

08002414 <loop>:

void loop() {
 8002414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    // Check border
    ST7735_FillScreen(ST7735_BLACK);

    for(int x = 0; x < ST7735_WIDTH; x++) {
 8002418:	2400      	movs	r4, #0
    ST7735_FillScreen(ST7735_BLACK);
 800241a:	2000      	movs	r0, #0
 800241c:	f000 fc0b 	bl	8002c36 <ST7735_FillScreen>
        ST7735_DrawPixel(x, 0, ST7735_RED);
 8002420:	b2a5      	uxth	r5, r4
 8002422:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002426:	2100      	movs	r1, #0
    for(int x = 0; x < ST7735_WIDTH; x++) {
 8002428:	3401      	adds	r4, #1
        ST7735_DrawPixel(x, 0, ST7735_RED);
 800242a:	4628      	mov	r0, r5
 800242c:	f000 fb76 	bl	8002b1c <ST7735_DrawPixel>
        ST7735_DrawPixel(x, ST7735_HEIGHT-1, ST7735_RED);
 8002430:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002434:	217f      	movs	r1, #127	; 0x7f
 8002436:	4628      	mov	r0, r5
 8002438:	f000 fb70 	bl	8002b1c <ST7735_DrawPixel>
    for(int x = 0; x < ST7735_WIDTH; x++) {
 800243c:	2c80      	cmp	r4, #128	; 0x80
 800243e:	d1ef      	bne.n	8002420 <loop+0xc>
 8002440:	2600      	movs	r6, #0
    }

    for(int y = 0; y < ST7735_HEIGHT; y++) {
        ST7735_DrawPixel(0, y, ST7735_RED);
 8002442:	b2b4      	uxth	r4, r6
 8002444:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002448:	2000      	movs	r0, #0
    for(int y = 0; y < ST7735_HEIGHT; y++) {
 800244a:	3601      	adds	r6, #1
        ST7735_DrawPixel(0, y, ST7735_RED);
 800244c:	4621      	mov	r1, r4
 800244e:	f000 fb65 	bl	8002b1c <ST7735_DrawPixel>
        ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
 8002452:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002456:	4621      	mov	r1, r4
 8002458:	207f      	movs	r0, #127	; 0x7f
 800245a:	f000 fb5f 	bl	8002b1c <ST7735_DrawPixel>
    for(int y = 0; y < ST7735_HEIGHT; y++) {
 800245e:	2e80      	cmp	r6, #128	; 0x80
 8002460:	d1ef      	bne.n	8002442 <loop+0x2e>
    }

    HAL_Delay(3000);
 8002462:	f640 30b8 	movw	r0, #3000	; 0xbb8

    // Check fonts
    ST7735_FillScreen(ST7735_BLACK);
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002466:	2400      	movs	r4, #0
    HAL_Delay(3000);
 8002468:	f7fe f8b0 	bl	80005cc <HAL_Delay>
    ST7735_FillScreen(ST7735_BLACK);
 800246c:	2000      	movs	r0, #0
 800246e:	f000 fbe2 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002472:	f44f 4978 	mov.w	r9, #63488	; 0xf800
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <loop+0x224>)
    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8002478:	f44f 68fc 	mov.w	r8, #2016	; 0x7e0
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 800247c:	9402      	str	r4, [sp, #8]
 800247e:	4621      	mov	r1, r4
 8002480:	f8cd 9004 	str.w	r9, [sp, #4]
 8002484:	4620      	mov	r0, r4
 8002486:	685a      	ldr	r2, [r3, #4]
    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 8002488:	f04f 0a1f 	mov.w	sl, #31
    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800248c:	4d6b      	ldr	r5, [pc, #428]	; (800263c <loop+0x228>)
    HAL_Delay(2000);

    // Check colors
    ST7735_FillScreen(ST7735_BLACK);
    ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800248e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <loop+0x22c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f000 fb5f 	bl	8002b5a <ST7735_WriteString>
    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800249c:	f8cd 8004 	str.w	r8, [sp, #4]
 80024a0:	9402      	str	r4, [sp, #8]
 80024a2:	4620      	mov	r0, r4
 80024a4:	686b      	ldr	r3, [r5, #4]
 80024a6:	211e      	movs	r1, #30
 80024a8:	4a66      	ldr	r2, [pc, #408]	; (8002644 <loop+0x230>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	f000 fb54 	bl	8002b5a <ST7735_WriteString>
    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <loop+0x234>)
 80024b4:	9402      	str	r4, [sp, #8]
 80024b6:	2154      	movs	r1, #84	; 0x54
 80024b8:	f8cd a004 	str.w	sl, [sp, #4]
 80024bc:	4620      	mov	r0, r4
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	4a62      	ldr	r2, [pc, #392]	; (800264c <loop+0x238>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f000 fb48 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(2000);
 80024ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024ce:	f7fe f87d 	bl	80005cc <HAL_Delay>
    ST7735_FillScreen(ST7735_BLACK);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 fbaf 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80024d8:	9402      	str	r4, [sp, #8]
 80024da:	9701      	str	r7, [sp, #4]
 80024dc:	4621      	mov	r1, r4
 80024de:	686b      	ldr	r3, [r5, #4]
 80024e0:	4620      	mov	r0, r4
 80024e2:	4a5b      	ldr	r2, [pc, #364]	; (8002650 <loop+0x23c>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	f000 fb37 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 80024ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f0:	f7fe f86c 	bl	80005cc <HAL_Delay>

    ST7735_FillScreen(ST7735_BLUE);
 80024f4:	4650      	mov	r0, sl
 80024f6:	f000 fb9e 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 80024fa:	f8cd a008 	str.w	sl, [sp, #8]
 80024fe:	9401      	str	r4, [sp, #4]
 8002500:	4621      	mov	r1, r4
 8002502:	686b      	ldr	r3, [r5, #4]
 8002504:	4620      	mov	r0, r4
 8002506:	4a53      	ldr	r2, [pc, #332]	; (8002654 <loop+0x240>)
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	f000 fb25 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 8002510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002514:	f7fe f85a 	bl	80005cc <HAL_Delay>

    ST7735_FillScreen(ST7735_RED);
 8002518:	4648      	mov	r0, r9
 800251a:	f000 fb8c 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 800251e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002522:	9401      	str	r4, [sp, #4]
 8002524:	4621      	mov	r1, r4
 8002526:	686b      	ldr	r3, [r5, #4]
 8002528:	4620      	mov	r0, r4
 800252a:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <loop+0x244>)
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	682b      	ldr	r3, [r5, #0]
 8002530:	f000 fb13 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 8002534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002538:	f7fe f848 	bl	80005cc <HAL_Delay>

    ST7735_FillScreen(ST7735_GREEN);
 800253c:	4640      	mov	r0, r8
 800253e:	f000 fb7a 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8002542:	f8cd 8008 	str.w	r8, [sp, #8]
 8002546:	9401      	str	r4, [sp, #4]
 8002548:	4621      	mov	r1, r4
 800254a:	686b      	ldr	r3, [r5, #4]
 800254c:	4620      	mov	r0, r4
 800254e:	4a43      	ldr	r2, [pc, #268]	; (800265c <loop+0x248>)
    ST7735_FillScreen(ST7735_MAGENTA);
    ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
    HAL_Delay(500);

    ST7735_FillScreen(ST7735_YELLOW);
    ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8002550:	f64f 78e0 	movw	r8, #65504	; 0xffe0
    ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	682b      	ldr	r3, [r5, #0]
 8002558:	f000 faff 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 800255c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002560:	f7fe f834 	bl	80005cc <HAL_Delay>
    ST7735_FillScreen(ST7735_CYAN);
 8002564:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002568:	f000 fb65 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 800256c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002570:	9401      	str	r4, [sp, #4]
 8002572:	4621      	mov	r1, r4
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	4620      	mov	r0, r4
 8002578:	686b      	ldr	r3, [r5, #4]
 800257a:	4a39      	ldr	r2, [pc, #228]	; (8002660 <loop+0x24c>)
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	f000 faeb 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 8002584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002588:	f7fe f820 	bl	80005cc <HAL_Delay>
    ST7735_FillScreen(ST7735_MAGENTA);
 800258c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8002590:	f000 fb51 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 8002594:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002598:	9401      	str	r4, [sp, #4]
 800259a:	4621      	mov	r1, r4
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	4620      	mov	r0, r4
 80025a0:	686b      	ldr	r3, [r5, #4]
 80025a2:	4a30      	ldr	r2, [pc, #192]	; (8002664 <loop+0x250>)
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	f000 fad7 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 80025ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025b0:	f7fe f80c 	bl	80005cc <HAL_Delay>
    ST7735_FillScreen(ST7735_YELLOW);
 80025b4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025b8:	f000 fb3d 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80025bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80025c0:	9401      	str	r4, [sp, #4]
 80025c2:	4621      	mov	r1, r4
 80025c4:	686b      	ldr	r3, [r5, #4]
 80025c6:	4620      	mov	r0, r4
 80025c8:	4a27      	ldr	r2, [pc, #156]	; (8002668 <loop+0x254>)
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	f000 fac4 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 80025d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d6:	f7fd fff9 	bl	80005cc <HAL_Delay>

    ST7735_FillScreen(ST7735_WHITE);
 80025da:	4638      	mov	r0, r7
 80025dc:	f000 fb2b 	bl	8002c36 <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80025e0:	9702      	str	r7, [sp, #8]
 80025e2:	9401      	str	r4, [sp, #4]
 80025e4:	4621      	mov	r1, r4
 80025e6:	686b      	ldr	r3, [r5, #4]
 80025e8:	4620      	mov	r0, r4
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <loop+0x258>)
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	f000 fab3 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 80025f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f8:	f7fd ffe8 	bl	80005cc <HAL_Delay>


#ifdef ST7735_IS_128X128
    // Display test image 128x128
    ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)test_img_128x128);
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <loop+0x25c>)
 80025fe:	4632      	mov	r2, r6
 8002600:	4621      	mov	r1, r4
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4620      	mov	r0, r4
 8002606:	4633      	mov	r3, r6
 8002608:	f000 fb20 	bl	8002c4c <ST7735_DrawImage>
    ST7735_WriteString(0, 0, "hello Mohamed", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 800260c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002610:	9401      	str	r4, [sp, #4]
 8002612:	4621      	mov	r1, r4
 8002614:	686b      	ldr	r3, [r5, #4]
 8002616:	4620      	mov	r0, r4
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <loop+0x260>)
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	f000 fa9c 	bl	8002b5a <ST7735_WriteString>
    HAL_Delay(500);
 8002622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002626:	f7fd ffd1 	bl	80005cc <HAL_Delay>
            color565 = ((color565 & 0xFF00) >> 8) | ((color565 & 0xFF) << 8);
            ST7735_DrawPixel(x, y, color565);
        }
    }
*/
    HAL_Delay(15000);
 800262a:	f643 2098 	movw	r0, #15000	; 0x3a98
#endif // ST7735_IS_128X128

}
 800262e:	b004      	add	sp, #16
 8002630:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_Delay(15000);
 8002634:	f7fd bfca 	b.w	80005cc <HAL_Delay>
 8002638:	20020018 	.word	0x20020018
 800263c:	20020008 	.word	0x20020008
 8002640:	08005857 	.word	0x08005857
 8002644:	0800588b 	.word	0x0800588b
 8002648:	20020010 	.word	0x20020010
 800264c:	080058aa 	.word	0x080058aa
 8002650:	080058b5 	.word	0x080058b5
 8002654:	080058bb 	.word	0x080058bb
 8002658:	080058c0 	.word	0x080058c0
 800265c:	080058c4 	.word	0x080058c4
 8002660:	080058ca 	.word	0x080058ca
 8002664:	080058cf 	.word	0x080058cf
 8002668:	080058d7 	.word	0x080058d7
 800266c:	080058de 	.word	0x080058de
 8002670:	080058f2 	.word	0x080058f2
 8002674:	080058e4 	.word	0x080058e4

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b510      	push	{r4, lr}
 800267a:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267c:	2234      	movs	r2, #52	; 0x34
 800267e:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002680:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	a807      	add	r0, sp, #28
 8002684:	f000 fcbc 	bl	8003000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002688:	2214      	movs	r2, #20
 800268a:	2100      	movs	r1, #0
 800268c:	a802      	add	r0, sp, #8
 800268e:	f000 fcb7 	bl	8003000 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002692:	2100      	movs	r1, #0
 8002694:	2290      	movs	r2, #144	; 0x90
 8002696:	a814      	add	r0, sp, #80	; 0x50
 8002698:	f000 fcb2 	bl	8003000 <memset>
  HAL_PWR_EnableBkUpAccess();
 800269c:	f7fe fb7e 	bl	8000d9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a2:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 96;
 80026c6:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c8:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 96;
 80026ce:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d0:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026de:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e6:	2304      	movs	r3, #4
 80026e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026ea:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f7fe fb96 	bl	8000e1c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026f0:	f7fe fb5c 	bl	8000dac <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fa:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002700:	2103      	movs	r1, #3
 8002702:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002704:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002706:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002708:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800270a:	f7fe fd79 	bl	8001200 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <SystemClock_Config+0xb0>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002712:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002714:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002716:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002718:	f7fe fe38 	bl	800138c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800271c:	b038      	add	sp, #224	; 0xe0
 800271e:	bd10      	pop	{r4, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000
 8002728:	00200100 	.word	0x00200100

0800272c <main>:
{
 800272c:	b500      	push	{lr}
 800272e:	b08d      	sub	sp, #52	; 0x34
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2400      	movs	r4, #0
  HAL_Init();
 8002732:	f7fd ff2d 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2501      	movs	r5, #1
  SystemClock_Config();
 8002738:	f7ff ff9e 	bl	8002678 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	2214      	movs	r2, #20
 800273e:	2100      	movs	r1, #0
 8002740:	a807      	add	r0, sp, #28
 8002742:	f000 fc5d 	bl	8003000 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <main+0x1cc>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002748:	2138      	movs	r1, #56	; 0x38
 800274a:	486c      	ldr	r0, [pc, #432]	; (80028fc <main+0x1d0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800274e:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002750:	f042 0210 	orr.w	r2, r2, #16
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
 8002756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002758:	f002 0210 	and.w	r2, r2, #16
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002762:	f042 0204 	orr.w	r2, r2, #4
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
 8002768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276a:	f002 0204 	and.w	r2, r2, #4
 800276e:	9201      	str	r2, [sp, #4]
 8002770:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
 800277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002780:	9202      	str	r2, [sp, #8]
 8002782:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
 800278c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278e:	f002 0201 	and.w	r2, r2, #1
 8002792:	9203      	str	r2, [sp, #12]
 8002794:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002798:	f042 0202 	orr.w	r2, r2, #2
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a0:	f002 0202 	and.w	r2, r2, #2
 80027a4:	9204      	str	r2, [sp, #16]
 80027a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
 80027b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b2:	f002 0208 	and.w	r2, r2, #8
 80027b6:	9205      	str	r2, [sp, #20]
 80027b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	9306      	str	r3, [sp, #24]
 80027cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027ce:	f7fe fa41 	bl	8000c54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80027d8:	4849      	ldr	r0, [pc, #292]	; (8002900 <main+0x1d4>)
 80027da:	f7fe fa3b 	bl	8000c54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	4848      	ldr	r0, [pc, #288]	; (8002904 <main+0x1d8>)
 80027e4:	f7fe fa36 	bl	8000c54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027e8:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ea:	a907      	add	r1, sp, #28
 80027ec:	4843      	ldr	r0, [pc, #268]	; (80028fc <main+0x1d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027f6:	f7fe f943 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80027fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80027fe:	a907      	add	r1, sp, #28
 8002800:	4841      	ldr	r0, [pc, #260]	; (8002908 <main+0x1dc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002802:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <main+0x1e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002808:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800280a:	f7fe f939 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800280e:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	a907      	add	r1, sp, #28
 8002814:	483a      	ldr	r0, [pc, #232]	; (8002900 <main+0x1d4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002816:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281e:	f7fe f92f 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002822:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002824:	a907      	add	r1, sp, #28
 8002826:	4837      	ldr	r0, [pc, #220]	; (8002904 <main+0x1d8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002828:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002830:	f7fe f926 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002834:	a907      	add	r1, sp, #28
 8002836:	4833      	ldr	r0, [pc, #204]	; (8002904 <main+0x1d8>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002838:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800283e:	f7fe f91f 	bl	8000a80 <HAL_GPIO_Init>
  heth.Instance = ETH;
 8002842:	4833      	ldr	r0, [pc, #204]	; (8002910 <main+0x1e4>)
  heth.Init.MACAddr[2] =   0xE1;
 8002844:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 8002846:	4b33      	ldr	r3, [pc, #204]	; (8002914 <main+0x1e8>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002848:	8204      	strh	r4, [r0, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800284a:	e880 0028 	stmia.w	r0, {r3, r5}
  heth.Init.MACAddr[0] =   0x00;
 800284e:	6943      	ldr	r3, [r0, #20]
 8002850:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002852:	6943      	ldr	r3, [r0, #20]
 8002854:	705e      	strb	r6, [r3, #1]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002856:	f44f 66e0 	mov.w	r6, #1792	; 0x700
  heth.Init.MACAddr[2] =   0xE1;
 800285a:	6943      	ldr	r3, [r0, #20]
 800285c:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 800285e:	6943      	ldr	r3, [r0, #20]
 8002860:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 8002862:	6943      	ldr	r3, [r0, #20]
 8002864:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 8002866:	6943      	ldr	r3, [r0, #20]
 8002868:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800286a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800286e:	6184      	str	r4, [r0, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002870:	6203      	str	r3, [r0, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002872:	61c4      	str	r4, [r0, #28]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002874:	f7fe f80a 	bl	800088c <HAL_ETH_Init>
  hspi4.Instance = SPI4;
 8002878:	4827      	ldr	r0, [pc, #156]	; (8002918 <main+0x1ec>)
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800287a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800287e:	4927      	ldr	r1, [pc, #156]	; (800291c <main+0x1f0>)
 8002880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002884:	6104      	str	r4, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002886:	6144      	str	r4, [r0, #20]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002888:	6204      	str	r4, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800288a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800288e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	e880 004e 	stmia.w	r0, {r1, r2, r3, r6}
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002894:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi4.Init.CRCPolynomial = 7;
 8002898:	2207      	movs	r2, #7
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800289a:	6183      	str	r3, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800289c:	2308      	movs	r3, #8
  hspi4.Init.CRCPolynomial = 7;
 800289e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028a0:	61c3      	str	r3, [r0, #28]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028a2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80028a4:	f7ff f89a 	bl	80019dc <HAL_SPI_Init>
  huart3.Instance = USART3;
 80028a8:	481d      	ldr	r0, [pc, #116]	; (8002920 <main+0x1f4>)
  huart3.Init.BaudRate = 115200;
 80028aa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <main+0x1f8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028b0:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028b2:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028b4:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b6:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028bc:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 80028be:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028c2:	230c      	movs	r3, #12
 80028c4:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028c6:	f7ff fbff 	bl	80020c8 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028ca:	4817      	ldr	r0, [pc, #92]	; (8002928 <main+0x1fc>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d0:	f04f 0c06 	mov.w	ip, #6
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028d4:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028d6:	61c5      	str	r5, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028d8:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028da:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028dc:	62c5      	str	r5, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80028de:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028e0:	e880 1008 	stmia.w	r0, {r3, ip}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028e4:	2302      	movs	r3, #2
 80028e6:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028e8:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80028ea:	f7fe f9b8 	bl	8000c5e <HAL_PCD_Init>
  init();
 80028ee:	f7ff fd79 	bl	80023e4 <init>
	    loop();
 80028f2:	f7ff fd8f 	bl	8002414 <loop>
 80028f6:	e7fc      	b.n	80028f2 <main+0x1c6>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40020400 	.word	0x40020400
 8002904:	40021800 	.word	0x40021800
 8002908:	40020800 	.word	0x40020800
 800290c:	10110000 	.word	0x10110000
 8002910:	2002052c 	.word	0x2002052c
 8002914:	40028000 	.word	0x40028000
 8002918:	200204c8 	.word	0x200204c8
 800291c:	40013400 	.word	0x40013400
 8002920:	20020044 	.word	0x20020044
 8002924:	40004800 	.word	0x40004800
 8002928:	200200c4 	.word	0x200200c4

0800292c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2110      	movs	r1, #16
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <ST7735_Select+0xc>)
 8002932:	f7fe b98f 	b.w	8000c54 <HAL_GPIO_WritePin>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 800293c:	b513      	push	{r0, r1, r4, lr}
 800293e:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	2120      	movs	r1, #32
static void ST7735_WriteCommand(uint8_t cmd) {
 8002944:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <ST7735_WriteCommand+0x24>)
 800294a:	f7fe f983 	bl	8000c54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	2201      	movs	r2, #1
 8002954:	4621      	mov	r1, r4
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <ST7735_WriteCommand+0x28>)
 8002958:	f7ff f895 	bl	8001a86 <HAL_SPI_Transmit>
}
 800295c:	b002      	add	sp, #8
 800295e:	bd10      	pop	{r4, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	200204c8 	.word	0x200204c8

08002968 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4604      	mov	r4, r0
 800296c:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	2120      	movs	r1, #32
 8002972:	4806      	ldr	r0, [pc, #24]	; (800298c <ST7735_WriteData+0x24>)
 8002974:	f7fe f96e 	bl	8000c54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002978:	4621      	mov	r1, r4
 800297a:	b2aa      	uxth	r2, r5
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <ST7735_WriteData+0x28>)
}
 8002982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002986:	f7ff b87e 	b.w	8001a86 <HAL_SPI_Transmit>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	200204c8 	.word	0x200204c8

08002994 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002996:	1c46      	adds	r6, r0, #1
 8002998:	7805      	ldrb	r5, [r0, #0]
    while(numCommands--) {
 800299a:	b905      	cbnz	r5, 800299e <ST7735_ExecuteCommandList+0xa>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 800299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 800299e:	4634      	mov	r4, r6
 80029a0:	f814 0b02 	ldrb.w	r0, [r4], #2
 80029a4:	f7ff ffca 	bl	800293c <ST7735_WriteCommand>
        numArgs = *addr++;
 80029a8:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 80029aa:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 80029ae:	d004      	beq.n	80029ba <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80029b0:	4620      	mov	r0, r4
            addr += numArgs;
 80029b2:	443c      	add	r4, r7
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80029b4:	4639      	mov	r1, r7
 80029b6:	f7ff ffd7 	bl	8002968 <ST7735_WriteData>
        if(ms) {
 80029ba:	0633      	lsls	r3, r6, #24
 80029bc:	d508      	bpl.n	80029d0 <ST7735_ExecuteCommandList+0x3c>
            ms = *addr++;
 80029be:	7820      	ldrb	r0, [r4, #0]
 80029c0:	1c66      	adds	r6, r4, #1
            if(ms == 255) ms = 500;
 80029c2:	28ff      	cmp	r0, #255	; 0xff
            ms = *addr++;
 80029c4:	4634      	mov	r4, r6
            HAL_Delay(ms);
 80029c6:	bf08      	it	eq
 80029c8:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80029cc:	f7fd fdfe 	bl	80005cc <HAL_Delay>
 80029d0:	3d01      	subs	r5, #1
            ms = *addr++;
 80029d2:	4626      	mov	r6, r4
 80029d4:	b2ed      	uxtb	r5, r5
 80029d6:	e7e0      	b.n	800299a <ST7735_ExecuteCommandList+0x6>

080029d8 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80029d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029da:	4616      	mov	r6, r2
 80029dc:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80029de:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80029e0:	460d      	mov	r5, r1
 80029e2:	461c      	mov	r4, r3
    ST7735_WriteCommand(ST7735_CASET);
 80029e4:	f7ff ffaa 	bl	800293c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
    ST7735_WriteData(data, sizeof(data));
 80029e8:	2104      	movs	r1, #4
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80029ea:	2300      	movs	r3, #0
 80029ec:	3702      	adds	r7, #2
 80029ee:	3602      	adds	r6, #2
    ST7735_WriteData(data, sizeof(data));
 80029f0:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80029f4:	f88d 3004 	strb.w	r3, [sp, #4]
 80029f8:	f88d 3006 	strb.w	r3, [sp, #6]

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
    data[1] = y0 + ST7735_YSTART;
 80029fc:	3503      	adds	r5, #3
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80029fe:	f88d 7005 	strb.w	r7, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 8002a02:	3403      	adds	r4, #3
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002a04:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8002a08:	f7ff ffae 	bl	8002968 <ST7735_WriteData>
    ST7735_WriteCommand(ST7735_RASET);
 8002a0c:	202b      	movs	r0, #43	; 0x2b
 8002a0e:	f7ff ff95 	bl	800293c <ST7735_WriteCommand>
    ST7735_WriteData(data, sizeof(data));
 8002a12:	2104      	movs	r1, #4
    data[1] = y0 + ST7735_YSTART;
 8002a14:	f88d 5005 	strb.w	r5, [sp, #5]
    ST7735_WriteData(data, sizeof(data));
 8002a18:	eb0d 0001 	add.w	r0, sp, r1
    data[3] = y1 + ST7735_YSTART;
 8002a1c:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8002a20:	f7ff ffa2 	bl	8002968 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002a24:	202c      	movs	r0, #44	; 0x2c
 8002a26:	f7ff ff89 	bl	800293c <ST7735_WriteCommand>
}
 8002a2a:	b003      	add	sp, #12
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a30 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	2110      	movs	r1, #16
 8002a34:	4801      	ldr	r0, [pc, #4]	; (8002a3c <ST7735_Unselect+0xc>)
 8002a36:	f7fe b90d 	b.w	8000c54 <HAL_GPIO_WritePin>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <ST7735_FillRectangle.part.1>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002a40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a44:	461c      	mov	r4, r3
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002a46:	1883      	adds	r3, r0, r2
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002a48:	4615      	mov	r5, r2
 8002a4a:	460f      	mov	r7, r1
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002a4e:	eb01 0304 	add.w	r3, r1, r4
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002a52:	4606      	mov	r6, r0
 8002a54:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002a58:	bfc4      	itt	gt
 8002a5a:	f1c0 0580 	rsbgt	r5, r0, #128	; 0x80
 8002a5e:	b2ad      	uxthgt	r5, r5
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	bfc4      	itt	gt
 8002a64:	f1c1 0480 	rsbgt	r4, r1, #128	; 0x80
 8002a68:	b2a4      	uxthgt	r4, r4

    ST7735_Select();
 8002a6a:	f7ff ff5f 	bl	800292c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002a6e:	b2f9      	uxtb	r1, r7

    uint8_t data[] = { color >> 8, color & 0xFF };
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002a70:	4f15      	ldr	r7, [pc, #84]	; (8002ac8 <ST7735_FillRectangle.part.1+0x88>)
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002a72:	b2f0      	uxtb	r0, r6
 8002a74:	1e4b      	subs	r3, r1, #1
 8002a76:	1e42      	subs	r2, r0, #1
 8002a78:	4423      	add	r3, r4
 8002a7a:	442a      	add	r2, r5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f7ff ffaa 	bl	80029d8 <ST7735_SetAddressWindow>
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a86:	ea4f 2318 	mov.w	r3, r8, lsr #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	480f      	ldr	r0, [pc, #60]	; (8002acc <ST7735_FillRectangle.part.1+0x8c>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a8e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002a92:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002a96:	f7fe f8dd 	bl	8000c54 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002a9a:	b17c      	cbz	r4, 8002abc <ST7735_FillRectangle.part.1+0x7c>
 8002a9c:	462e      	mov	r6, r5
 8002a9e:	e008      	b.n	8002ab2 <ST7735_FillRectangle.part.1+0x72>
        for(x = w; x > 0; x--) {
 8002aa0:	3e01      	subs	r6, #1
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	a901      	add	r1, sp, #4
        for(x = w; x > 0; x--) {
 8002aaa:	b2b6      	uxth	r6, r6
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002aac:	4638      	mov	r0, r7
 8002aae:	f7fe ffea 	bl	8001a86 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002ab2:	2e00      	cmp	r6, #0
 8002ab4:	d1f4      	bne.n	8002aa0 <ST7735_FillRectangle.part.1+0x60>
    for(y = h; y > 0; y--) {
 8002ab6:	3c01      	subs	r4, #1
 8002ab8:	b2a4      	uxth	r4, r4
 8002aba:	e7ee      	b.n	8002a9a <ST7735_FillRectangle.part.1+0x5a>
        }
    }

    ST7735_Unselect();
 8002abc:	f7ff ffb8 	bl	8002a30 <ST7735_Unselect>
}
 8002ac0:	b002      	add	sp, #8
 8002ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200204c8 	.word	0x200204c8
 8002acc:	40021000 	.word	0x40021000

08002ad0 <ST7735_Init>:
void ST7735_Init() {
 8002ad0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002ad2:	4c0e      	ldr	r4, [pc, #56]	; (8002b0c <ST7735_Init+0x3c>)
    ST7735_Select();
 8002ad4:	f7ff ff2a 	bl	800292c <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2108      	movs	r1, #8
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe f8b9 	bl	8000c54 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002ae2:	2005      	movs	r0, #5
 8002ae4:	f7fd fd72 	bl	80005cc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2108      	movs	r1, #8
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7fe f8b1 	bl	8000c54 <HAL_GPIO_WritePin>
    ST7735_ExecuteCommandList(init_cmds1);
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <ST7735_Init+0x40>)
 8002af4:	f7ff ff4e 	bl	8002994 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <ST7735_Init+0x44>)
 8002afa:	f7ff ff4b 	bl	8002994 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002afe:	4806      	ldr	r0, [pc, #24]	; (8002b18 <ST7735_Init+0x48>)
 8002b00:	f7ff ff48 	bl	8002994 <ST7735_ExecuteCommandList>
}
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8002b08:	f7ff bf92 	b.w	8002a30 <ST7735_Unselect>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	0800d8f2 	.word	0x0800d8f2
 8002b14:	0800d92d 	.word	0x0800d92d
 8002b18:	0800d93a 	.word	0x0800d93a

08002b1c <ST7735_DrawPixel>:
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002b1c:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	4616      	mov	r6, r2
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002b26:	d816      	bhi.n	8002b56 <ST7735_DrawPixel+0x3a>
 8002b28:	297f      	cmp	r1, #127	; 0x7f
 8002b2a:	d814      	bhi.n	8002b56 <ST7735_DrawPixel+0x3a>
    ST7735_Select();
 8002b2c:	f7ff fefe 	bl	800292c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002b30:	b2e0      	uxtb	r0, r4
 8002b32:	b2e9      	uxtb	r1, r5
 8002b34:	1c42      	adds	r2, r0, #1
 8002b36:	1c4b      	adds	r3, r1, #1
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f7ff ff4c 	bl	80029d8 <ST7735_SetAddressWindow>
    ST7735_WriteData(data, sizeof(data));
 8002b40:	2102      	movs	r1, #2
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002b42:	0a33      	lsrs	r3, r6, #8
    ST7735_WriteData(data, sizeof(data));
 8002b44:	a801      	add	r0, sp, #4
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002b46:	f88d 6005 	strb.w	r6, [sp, #5]
 8002b4a:	f88d 3004 	strb.w	r3, [sp, #4]
    ST7735_WriteData(data, sizeof(data));
 8002b4e:	f7ff ff0b 	bl	8002968 <ST7735_WriteData>
    ST7735_Unselect();
 8002b52:	f7ff ff6d 	bl	8002a30 <ST7735_Unselect>
}
 8002b56:	b002      	add	sp, #8
 8002b58:	bd70      	pop	{r4, r5, r6, pc}

08002b5a <ST7735_WriteString>:
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b60:	b089      	sub	sp, #36	; 0x24
 8002b62:	4614      	mov	r4, r2
 8002b64:	fa5f f883 	uxtb.w	r8, r3
 8002b68:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8002b6c:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
 8002b70:	4605      	mov	r5, r0
 8002b72:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b74:	460e      	mov	r6, r1
 8002b76:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    ST7735_Select();
 8002b7a:	f7ff fed7 	bl	800292c <ST7735_Select>
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002b7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8002b82:	9401      	str	r4, [sp, #4]
 8002b84:	9305      	str	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002b86:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8002b8a:	9304      	str	r3, [sp, #16]
    while(*str) {
 8002b8c:	9b01      	ldr	r3, [sp, #4]
 8002b8e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	b934      	cbnz	r4, 8002ba4 <ST7735_WriteString+0x4a>
    ST7735_Unselect();
 8002b96:	f7ff ff4b 	bl	8002a30 <ST7735_Unselect>
}
 8002b9a:	b009      	add	sp, #36	; 0x24
 8002b9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba0:	b002      	add	sp, #8
 8002ba2:	4770      	bx	lr
        if(x + font.width >= ST7735_WIDTH) {
 8002ba4:	eb05 0308 	add.w	r3, r5, r8
 8002ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8002baa:	dd08      	ble.n	8002bbe <ST7735_WriteString+0x64>
            y += font.height;
 8002bac:	443e      	add	r6, r7
 8002bae:	b2b6      	uxth	r6, r6
            if(y + font.height >= ST7735_HEIGHT) {
 8002bb0:	19f3      	adds	r3, r6, r7
 8002bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb4:	dcef      	bgt.n	8002b96 <ST7735_WriteString+0x3c>
            if(*str == ' ') {
 8002bb6:	2c20      	cmp	r4, #32
            x = 0;
 8002bb8:	f04f 0500 	mov.w	r5, #0
            if(*str == ' ') {
 8002bbc:	d0e6      	beq.n	8002b8c <ST7735_WriteString+0x32>
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002bbe:	b2e8      	uxtb	r0, r5
 8002bc0:	1e7b      	subs	r3, r7, #1
 8002bc2:	b2f1      	uxtb	r1, r6
 8002bc4:	f108 32ff 	add.w	r2, r8, #4294967295
        b = font.data[(ch - 32) * font.height + i];
 8002bc8:	3c20      	subs	r4, #32
 8002bca:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002bce:	440b      	add	r3, r1
 8002bd0:	4402      	add	r2, r0
        b = font.data[(ch - 32) * font.height + i];
 8002bd2:	437c      	muls	r4, r7
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f7ff fefe 	bl	80029d8 <ST7735_SetAddressWindow>
 8002bdc:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
    for(i = 0; i < font.height; i++) {
 8002be0:	f04f 0b00 	mov.w	fp, #0
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	45bb      	cmp	fp, r7
 8002be8:	d302      	bcc.n	8002bf0 <ST7735_WriteString+0x96>
        x += font.width;
 8002bea:	4445      	add	r5, r8
 8002bec:	b2ad      	uxth	r5, r5
 8002bee:	e7cd      	b.n	8002b8c <ST7735_WriteString+0x32>
        b = font.data[(ch - 32) * font.height + i];
 8002bf0:	9b02      	ldr	r3, [sp, #8]
        for(j = 0; j < font.width; j++) {
 8002bf2:	2400      	movs	r4, #0
        b = font.data[(ch - 32) * font.height + i];
 8002bf4:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8002bf8:	9303      	str	r3, [sp, #12]
        for(j = 0; j < font.width; j++) {
 8002bfa:	4544      	cmp	r4, r8
 8002bfc:	d302      	bcc.n	8002c04 <ST7735_WriteString+0xaa>
    for(i = 0; i < font.height; i++) {
 8002bfe:	f10b 0b01 	add.w	fp, fp, #1
 8002c02:	e7f0      	b.n	8002be6 <ST7735_WriteString+0x8c>
            if((b << j) & 0x8000)  {
 8002c04:	9b03      	ldr	r3, [sp, #12]
                ST7735_WriteData(data, sizeof(data));
 8002c06:	a807      	add	r0, sp, #28
            if((b << j) & 0x8000)  {
 8002c08:	fa03 f104 	lsl.w	r1, r3, r4
        for(j = 0; j < font.width; j++) {
 8002c0c:	3401      	adds	r4, #1
            if((b << j) & 0x8000)  {
 8002c0e:	040b      	lsls	r3, r1, #16
                ST7735_WriteData(data, sizeof(data));
 8002c10:	f04f 0102 	mov.w	r1, #2
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002c14:	bf49      	itett	mi
 8002c16:	f89d 3010 	ldrbmi.w	r3, [sp, #16]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002c1a:	f89d 3014 	ldrbpl.w	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002c1e:	f88d 301c 	strbmi.w	r3, [sp, #28]
 8002c22:	f88d 901d 	strbmi.w	r9, [sp, #29]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002c26:	bf5c      	itt	pl
 8002c28:	f88d 301c 	strbpl.w	r3, [sp, #28]
 8002c2c:	f88d a01d 	strbpl.w	sl, [sp, #29]
                ST7735_WriteData(data, sizeof(data));
 8002c30:	f7ff fe9a 	bl	8002968 <ST7735_WriteData>
 8002c34:	e7e1      	b.n	8002bfa <ST7735_WriteString+0xa0>

08002c36 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002c36:	b507      	push	{r0, r1, r2, lr}
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	9000      	str	r0, [sp, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4608      	mov	r0, r1
 8002c42:	f7ff fefd 	bl	8002a40 <ST7735_FillRectangle.part.1>
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}
 8002c46:	b003      	add	sp, #12
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4

08002c4c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002c4c:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c52:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002c56:	4604      	mov	r4, r0
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4617      	mov	r7, r2
 8002c5c:	461e      	mov	r6, r3
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002c5e:	d81c      	bhi.n	8002c9a <ST7735_DrawImage+0x4e>
 8002c60:	297f      	cmp	r1, #127	; 0x7f
 8002c62:	d81a      	bhi.n	8002c9a <ST7735_DrawImage+0x4e>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8002c64:	1883      	adds	r3, r0, r2
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	dc17      	bgt.n	8002c9a <ST7735_DrawImage+0x4e>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8002c6a:	198b      	adds	r3, r1, r6
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	dc14      	bgt.n	8002c9a <ST7735_DrawImage+0x4e>

    ST7735_Select();
 8002c70:	f7ff fe5c 	bl	800292c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002c74:	1e73      	subs	r3, r6, #1
 8002c76:	b2e0      	uxtb	r0, r4
 8002c78:	1e7a      	subs	r2, r7, #1
 8002c7a:	b2e9      	uxtb	r1, r5
 8002c7c:	4402      	add	r2, r0
 8002c7e:	440b      	add	r3, r1
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f7ff fea8 	bl	80029d8 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002c88:	4640      	mov	r0, r8
 8002c8a:	0071      	lsls	r1, r6, #1
 8002c8c:	4379      	muls	r1, r7
 8002c8e:	f7ff fe6b 	bl	8002968 <ST7735_WriteData>
    ST7735_Unselect();
}
 8002c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ST7735_Unselect();
 8002c96:	f7ff becb 	b.w	8002a30 <ST7735_Unselect>
 8002c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002ca0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_MspInit+0x2c>)
{
 8002ca2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002cb2:	9200      	str	r2, [sp, #0]
 8002cb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc8:	b002      	add	sp, #8
 8002cca:	4770      	bx	lr
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b08d      	sub	sp, #52	; 0x34
 8002cd4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd6:	2214      	movs	r2, #20
 8002cd8:	2100      	movs	r1, #0
 8002cda:	a807      	add	r0, sp, #28
 8002cdc:	f000 f990 	bl	8003000 <memset>
  if(heth->Instance==ETH)
 8002ce0:	6822      	ldr	r2, [r4, #0]
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_ETH_MspInit+0xf8>)
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d16d      	bne.n	8002dc4 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002ce8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cf0:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf4:	a907      	add	r1, sp, #28
 8002cf6:	4835      	ldr	r0, [pc, #212]	; (8002dcc <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cfa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8002d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d02:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002d06:	9200      	str	r2, [sp, #0]
 8002d08:	9a00      	ldr	r2, [sp, #0]
 8002d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
 8002d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d14:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002d18:	9201      	str	r2, [sp, #4]
 8002d1a:	9a01      	ldr	r2, [sp, #4]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d2a:	9202      	str	r2, [sp, #8]
 8002d2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
 8002d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d38:	f002 0204 	and.w	r2, r2, #4
 8002d3c:	9203      	str	r2, [sp, #12]
 8002d3e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
 8002d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4a:	f002 0201 	and.w	r2, r2, #1
 8002d4e:	9204      	str	r2, [sp, #16]
 8002d50:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d54:	f042 0202 	orr.w	r2, r2, #2
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	f002 0202 	and.w	r2, r2, #2
 8002d60:	9205      	str	r2, [sp, #20]
 8002d62:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d76:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d78:	9306      	str	r3, [sp, #24]
 8002d7a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002d7c:	2332      	movs	r3, #50	; 0x32
 8002d7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d80:	f7fd fe7e 	bl	8000a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002d84:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	a907      	add	r1, sp, #28
 8002d88:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002d8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d92:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f7fd fe74 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	a907      	add	r1, sp, #28
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002da0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002da8:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002daa:	f7fd fe69 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002dae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db2:	a907      	add	r1, sp, #28
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002db6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dbe:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dc0:	f7fd fe5e 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002dc4:	b00d      	add	sp, #52	; 0x34
 8002dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc8:	40028000 	.word	0x40028000
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40021800 	.word	0x40021800

08002ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	2214      	movs	r2, #20
 8002de4:	2100      	movs	r1, #0
 8002de6:	a803      	add	r0, sp, #12
 8002de8:	f000 f90a 	bl	8003000 <memset>
  if(hspi->Instance==SPI4)
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_SPI_MspInit+0x5c>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d11f      	bne.n	8002e34 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002df4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df8:	a903      	add	r1, sp, #12
 8002dfa:	4810      	ldr	r0, [pc, #64]	; (8002e3c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	f042 0210 	orr.w	r2, r2, #16
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002e20:	2344      	movs	r3, #68	; 0x44
 8002e22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002e2c:	2305      	movs	r3, #5
 8002e2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e30:	f7fd fe26 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002e34:	b008      	add	sp, #32
 8002e36:	bd10      	pop	{r4, pc}
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	40021000 	.word	0x40021000

08002e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e40:	b510      	push	{r4, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e46:	2214      	movs	r2, #20
 8002e48:	2100      	movs	r1, #0
 8002e4a:	a803      	add	r0, sp, #12
 8002e4c:	f000 f8d8 	bl	8003000 <memset>
  if(huart->Instance==USART3)
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_UART_MspInit+0x60>)
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d120      	bne.n	8002e9a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e58:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5c:	a903      	add	r1, sp, #12
 8002e5e:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e62:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e74:	f042 0208 	orr.w	r2, r2, #8
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e92:	2307      	movs	r3, #7
 8002e94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	f7fd fdf3 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e9a:	b008      	add	sp, #32
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	40020c00 	.word	0x40020c00

08002ea8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	2214      	movs	r2, #20
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	a803      	add	r0, sp, #12
 8002eb4:	f000 f8a4 	bl	8003000 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebe:	d132      	bne.n	8002f26 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4c1a      	ldr	r4, [pc, #104]	; (8002f2c <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	a903      	add	r1, sp, #12
 8002ec4:	481a      	ldr	r0, [pc, #104]	; (8002f30 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6323      	str	r3, [r4, #48]	; 0x30
 8002ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ed8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002edc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f7fd fdc9 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002eee:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	a903      	add	r1, sp, #12
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ef6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f7fd fdbf 	bl	8000a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f08:	6363      	str	r3, [r4, #52]	; 0x34
 8002f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1a:	6463      	str	r3, [r4, #68]	; 0x44
 8002f1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f26:	b008      	add	sp, #32
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020000 	.word	0x40020000

08002f34 <NMI_Handler>:
 8002f34:	4770      	bx	lr

08002f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f36:	e7fe      	b.n	8002f36 <HardFault_Handler>

08002f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f38:	e7fe      	b.n	8002f38 <MemManage_Handler>

08002f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3a:	e7fe      	b.n	8002f3a <BusFault_Handler>

08002f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3c:	e7fe      	b.n	8002f3c <UsageFault_Handler>

08002f3e <SVC_Handler>:
 8002f3e:	4770      	bx	lr

08002f40 <DebugMon_Handler>:
 8002f40:	4770      	bx	lr

08002f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f42:	4770      	bx	lr

08002f44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f44:	f7fd bb30 	b.w	80005a8 <HAL_IncTick>

08002f48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SystemInit+0x18>)
 8002f4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f4e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f6a:	e003      	b.n	8002f74 <LoopCopyDataInit>

08002f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f72:	3104      	adds	r1, #4

08002f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f74:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f7c:	d3f6      	bcc.n	8002f6c <CopyDataInit>
  ldr  r2, =_sbss
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f80:	e002      	b.n	8002f88 <LoopFillZerobss>

08002f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f84:	f842 3b04 	str.w	r3, [r2], #4

08002f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f8c:	d3f9      	bcc.n	8002f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f8e:	f7ff ffdb 	bl	8002f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f92:	f000 f811 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f96:	f7ff fbc9 	bl	800272c <main>
  bx  lr    
 8002f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f9c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002fa0:	0800d990 	.word	0x0800d990
  ldr  r0, =_sdata
 8002fa4:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 8002fa8:	20020024 	.word	0x20020024
  ldr  r2, =_sbss
 8002fac:	20020024 	.word	0x20020024
  ldr  r3, = _ebss
 8002fb0:	20020574 	.word	0x20020574

08002fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC_IRQHandler>
	...

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4e0d      	ldr	r6, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1ba4      	subs	r4, r4, r6
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	42a5      	cmp	r5, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4e0b      	ldr	r6, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 f820 	bl	8003010 <_init>
 8002fd0:	1ba4      	subs	r4, r4, r6
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	42a5      	cmp	r5, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe0:	4798      	blx	r3
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fea:	4798      	blx	r3
 8002fec:	3501      	adds	r5, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	0800d988 	.word	0x0800d988
 8002ff4:	0800d988 	.word	0x0800d988
 8002ff8:	0800d988 	.word	0x0800d988
 8002ffc:	0800d98c 	.word	0x0800d98c

08003000 <memset>:
 8003000:	4402      	add	r2, r0
 8003002:	4603      	mov	r3, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
