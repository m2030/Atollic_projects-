
RTOTS_HTTP_stm32f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  0800fef8  0800fef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012b38  08012b38  00022b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012b40  08012b40  00022b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012b44  08012b44  00022b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08012b48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d804  200001e8  08012d30  000301e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001804  2000d9ec  08012d30  0003d9ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005b138  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a97d  00000000  00000000  0008b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002031b  00000000  00000000  00095ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002268  00000000  00000000  000b5fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000035b8  00000000  00000000  000b8250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00017afe  00000000  00000000  000bb808  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000d59a  00000000  00000000  000d3306  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000e08a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000741c  00000000  00000000  000e091c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .RxDecripSection 00000080  2007c000  2007c000  0003c000  2**2
                  ALLOC
 20 .RxarraySection 000017d0  2007c100  2007c100  0003c100  2**0
                  ALLOC
 21 .TxDescripSection 00000080  2007c080  2007c080  0003c080  2**2
                  ALLOC
 22 .TxarraySection 000017d0  2007d8d0  2007d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fee0 	.word	0x0800fee0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800fee0 	.word	0x0800fee0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000602:	2003      	movs	r0, #3
 8000604:	f000 f82c 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000608:	2000      	movs	r0, #0
 800060a:	f00e f927 	bl	800e85c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800060e:	f00e f833 	bl	800e678 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000612:	2000      	movs	r0, #0
 8000614:	bd08      	pop	{r3, pc}
	...

08000618 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x10>)
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_IncTick+0x14>)
 800061c:	6811      	ldr	r1, [r2, #0]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	440b      	add	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000707c 	.word	0x2000707c
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <HAL_GetTick+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000707c 	.word	0x2000707c

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b538      	push	{r3, r4, r5, lr}
 800063e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff fff6 	bl	8000630 <HAL_GetTick>
 8000644:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000646:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000648:	bf1e      	ittt	ne
 800064a:	4b04      	ldrne	r3, [pc, #16]	; (800065c <HAL_Delay+0x20>)
 800064c:	781b      	ldrbne	r3, [r3, #0]
 800064e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000650:	f7ff ffee 	bl	8000630 <HAL_GetTick>
 8000654:	1b40      	subs	r0, r0, r5
 8000656:	4284      	cmp	r4, r0
 8000658:	d8fa      	bhi.n	8000650 <HAL_Delay+0x14>
  {
  }
}
 800065a:	bd38      	pop	{r3, r4, r5, pc}
 800065c:	20000000 	.word	0x20000000

08000660 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000662:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000666:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c1b      	lsrs	r3, r3, #16
 8000672:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800067a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800067c:	60d3      	str	r3, [r2, #12]
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	68dc      	ldr	r4, [r3, #12]
 800068a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	2b04      	cmp	r3, #4
 8000696:	bf28      	it	cs
 8000698:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80006b0:	ea01 0103 	and.w	r1, r1, r3
 80006b4:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b8:	fa05 f404 	lsl.w	r4, r5, r4
 80006bc:	f104 34ff 	add.w	r4, r4, #4294967295
 80006c0:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006cc:	db07      	blt.n	80006de <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006d8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006dc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f000 000f 	and.w	r0, r0, #15
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <HAL_NVIC_SetPriority+0x6c>)
 80006e6:	541a      	strb	r2, [r3, r0]
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 001f 	and.w	r0, r0, #31
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x18>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000710:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_MPU_Disable+0x18>)
 8000716:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800071e:	2200      	movs	r2, #0
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_MPU_Disable+0x1c>)
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	e000ed90 	.word	0xe000ed90

08000730 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000732:	f040 0001 	orr.w	r0, r0, #1
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MPU_Enable+0x20>)
 8000738:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800073a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000740:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000746:	f3bf 8f6f 	isb	sy
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	e000ed90 	.word	0xe000ed90

08000754 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000754:	7843      	ldrb	r3, [r0, #1]
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_MPU_ConfigRegion+0x4c>)
{
 8000758:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800075a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800075c:	7801      	ldrb	r1, [r0, #0]
 800075e:	b1d9      	cbz	r1, 8000798 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000760:	6843      	ldr	r3, [r0, #4]
 8000762:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000764:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000766:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000768:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800076a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800076e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000770:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000772:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000776:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000778:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800077c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800077e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000782:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000784:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000788:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800078a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800078e:	7a01      	ldrb	r1, [r0, #8]
 8000790:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000794:	6113      	str	r3, [r2, #16]
 8000796:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000798:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800079a:	6111      	str	r1, [r2, #16]
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed90 	.word	0xe000ed90

080007a4 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80007a4:	2300      	movs	r3, #0
{
 80007a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007a8:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80007ac:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007ae:	6803      	ldr	r3, [r0, #0]
{
 80007b0:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80007b4:	591a      	ldr	r2, [r3, r4]
 80007b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007ba:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80007bc:	591b      	ldr	r3, [r3, r4]
 80007be:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c0:	f7ff ff3c 	bl	800063c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	9a01      	ldr	r2, [sp, #4]
 80007c8:	511a      	str	r2, [r3, r4]
}
 80007ca:	b003      	add	sp, #12
 80007cc:	bd30      	pop	{r4, r5, pc}
	...

080007d0 <ETH_MACDMAConfig>:
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80007d4:	b129      	cbz	r1, 80007e2 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80007d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007da:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80007dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e0:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007e2:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80007e4:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007e6:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80007e8:	68e0      	ldr	r0, [r4, #12]
 80007ea:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 80007ec:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007ee:	bf08      	it	eq
 80007f0:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 80007f4:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007f8:	482e      	ldr	r0, [pc, #184]	; (80008b4 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007fa:	bf18      	it	ne
 80007fc:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007fe:	4028      	ands	r0, r5
 8000800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000804:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000806:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000808:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800080a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800080c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800080e:	f7ff ff15 	bl	800063c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000812:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000814:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000816:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000818:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800081a:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800081c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800081e:	f7ff ff0d 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000822:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000824:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000826:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000828:	2500      	movs	r5, #0
 800082a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800082c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800082e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000830:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000834:	0412      	lsls	r2, r2, #16
 8000836:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800083c:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800083e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000840:	f7ff fefc 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000844:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000846:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000848:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800084a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800084c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800084e:	f7ff fef5 	bl	800063c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000852:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000854:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000858:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800085a:	f241 0518 	movw	r5, #4120	; 0x1018
 800085e:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000860:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000862:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000866:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800086a:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 800086c:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800086e:	f7ff fee5 	bl	800063c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000872:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000874:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000878:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087e:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000880:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000882:	f7ff fedb 	bl	800063c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 800088c:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800088e:	69a3      	ldr	r3, [r4, #24]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d107      	bne.n	80008a4 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000894:	f241 011c 	movw	r1, #4124	; 0x101c
 8000898:	5853      	ldr	r3, [r2, r1]
 800089a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a2:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80008a4:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80008a6:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80008a8:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80008aa:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80008ac:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ETH_MACDMAConfig+0xf4>)
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	ff20810f 	.word	0xff20810f
 80008b8:	f8de3f23 	.word	0xf8de3f23
 80008bc:	02c12080 	.word	0x02c12080
 80008c0:	40028040 	.word	0x40028040
 80008c4:	40028044 	.word	0x40028044

080008c8 <HAL_ETH_DMATxDescListInit>:
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80008ca:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008ce:	2c01      	cmp	r4, #1
 80008d0:	f04f 0402 	mov.w	r4, #2
 80008d4:	d033      	beq.n	800093e <HAL_ETH_DMATxDescListInit+0x76>
 80008d6:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008d8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008dc:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80008e0:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80008e4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008e8:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80008ec:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 80008ee:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 80008f2:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 80008f4:	429d      	cmp	r5, r3
 80008f6:	d10b      	bne.n	8000910 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008f8:	6802      	ldr	r2, [r0, #0]
 80008fa:	f241 0310 	movw	r3, #4112	; 0x1010
 80008fe:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000900:	2301      	movs	r3, #1
 8000902:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000906:	2300      	movs	r3, #0
 8000908:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800090c:	4618      	mov	r0, r3
 800090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000910:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000914:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000918:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800091c:	69c6      	ldr	r6, [r0, #28]
 800091e:	b92e      	cbnz	r6, 800092c <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000920:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000924:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000928:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800092c:	4565      	cmp	r5, ip
 800092e:	bf2c      	ite	cs
 8000930:	460e      	movcs	r6, r1
 8000932:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8000934:	3501      	adds	r5, #1
 8000936:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000938:	f844 6c34 	str.w	r6, [r4, #-52]
 800093c:	e7da      	b.n	80008f4 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 800093e:	4620      	mov	r0, r4
}
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000942 <HAL_ETH_DMARxDescListInit>:
{
 8000942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000946:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800094a:	2c01      	cmp	r4, #1
 800094c:	f04f 0402 	mov.w	r4, #2
 8000950:	d030      	beq.n	80009b4 <HAL_ETH_DMARxDescListInit+0x72>
 8000952:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000954:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000958:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800095c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000960:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000964:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8000968:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800096a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800096e:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 8000972:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8000974:	429d      	cmp	r5, r3
 8000976:	d10c      	bne.n	8000992 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000978:	6802      	ldr	r2, [r0, #0]
 800097a:	f241 030c 	movw	r3, #4108	; 0x100c
 800097e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000980:	2301      	movs	r3, #1
 8000982:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000986:	2300      	movs	r3, #0
 8000988:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800098c:	4618      	mov	r0, r3
 800098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000992:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000996:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800099a:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800099e:	4565      	cmp	r5, ip
 80009a0:	bf2c      	ite	cs
 80009a2:	4688      	movcs	r8, r1
 80009a4:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80009a6:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 80009aa:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80009ac:	f844 8c14 	str.w	r8, [r4, #-20]
 80009b0:	3420      	adds	r4, #32
 80009b2:	e7df      	b.n	8000974 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 80009b4:	4620      	mov	r0, r4
}
 80009b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080009bc <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80009bc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f04f 0302 	mov.w	r3, #2
{
 80009c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80009c8:	d066      	beq.n	8000a98 <HAL_ETH_TransmitFrame+0xdc>
 80009ca:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80009cc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80009d0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80009d4:	b929      	cbnz	r1, 80009e2 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80009d6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009da:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009de:	4610      	mov	r0, r2
 80009e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80009e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009e4:	681c      	ldr	r4, [r3, #0]
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	da06      	bge.n	80009f8 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009f0:	2300      	movs	r3, #0
 80009f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80009f6:	e7f2      	b.n	80009de <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80009f8:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80009fc:	42a1      	cmp	r1, r4
 80009fe:	d92c      	bls.n	8000a5a <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000a00:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000a04:	fb04 1412 	mls	r4, r4, r2, r1
 8000a08:	b32c      	cbz	r4, 8000a56 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000a0a:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a0c:	4c23      	ldr	r4, [pc, #140]	; (8000a9c <HAL_ETH_TransmitFrame+0xe0>)
 8000a0e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a12:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000a16:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000a18:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a22:	681d      	ldr	r5, [r3, #0]
 8000a24:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000a28:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000a2a:	b91c      	cbnz	r4, 8000a34 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000a2c:	681d      	ldr	r5, [r3, #0]
 8000a2e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000a32:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000a34:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a36:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000a38:	d104      	bne.n	8000a44 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a3a:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3c:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a3e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000a42:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a44:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000a46:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a48:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000a4c:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a4e:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a50:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8000a52:	d1e6      	bne.n	8000a22 <HAL_ETH_TransmitFrame+0x66>
 8000a54:	e00d      	b.n	8000a72 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000a56:	2a01      	cmp	r2, #1
 8000a58:	d1d8      	bne.n	8000a0c <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a5a:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a5c:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a60:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a64:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a66:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a6e:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a74:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a78:	6803      	ldr	r3, [r0, #0]
 8000a7a:	5899      	ldr	r1, [r3, r2]
 8000a7c:	0749      	lsls	r1, r1, #29
 8000a7e:	d505      	bpl.n	8000a8c <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a80:	2104      	movs	r1, #4
 8000a82:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000a84:	2100      	movs	r1, #0
 8000a86:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a8a:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a92:	2300      	movs	r3, #0
 8000a94:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a98:	4618      	mov	r0, r3
}
 8000a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9c:	fffffa0c 	.word	0xfffffa0c

08000aa0 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000aa0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	f04f 0302 	mov.w	r3, #2
{
 8000aaa:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000aac:	d03b      	beq.n	8000b26 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000aae:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000ab0:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000ab2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000ab6:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000ab8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000abc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	db01      	blt.n	8000ac8 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000ac4:	3c01      	subs	r4, #1
 8000ac6:	d106      	bne.n	8000ad6 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000ac8:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000aca:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000acc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ad0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ad4:	e027      	b.n	8000b26 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68dd      	ldr	r5, [r3, #12]
 8000ada:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ade:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000ae2:	d103      	bne.n	8000aec <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ae4:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000ae6:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000ae8:	6285      	str	r5, [r0, #40]	; 0x28
 8000aea:	e7e7      	b.n	8000abc <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000af2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000af4:	d102      	bne.n	8000afc <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000af6:	3201      	adds	r2, #1
 8000af8:	6382      	str	r2, [r0, #56]	; 0x38
 8000afa:	e7f5      	b.n	8000ae8 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000afc:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000afe:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000b00:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000b02:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000b04:	bf08      	it	eq
 8000b06:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b12:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b14:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000b16:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000b18:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b20:	2300      	movs	r3, #0
 8000b22:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd30      	pop	{r4, r5, pc}

08000b2a <HAL_ETH_TxCpltCallback>:
 8000b2a:	4770      	bx	lr

08000b2c <HAL_ETH_ErrorCallback>:
{
 8000b2c:	4770      	bx	lr

08000b2e <HAL_ETH_IRQHandler>:
{
 8000b2e:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000b30:	6802      	ldr	r2, [r0, #0]
 8000b32:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000b36:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000b38:	5995      	ldr	r5, [r2, r6]
 8000b3a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000b3e:	d021      	beq.n	8000b84 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000b40:	f00c ff9e 	bl	800da80 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	2240      	movs	r2, #64	; 0x40
 8000b48:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	f241 0514 	movw	r5, #4116	; 0x1014
 8000b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b60:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b62:	595b      	ldr	r3, [r3, r5]
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	d50c      	bpl.n	8000b82 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ffdf 	bl	8000b2c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b74:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b84:	5993      	ldr	r3, [r2, r6]
 8000b86:	07da      	lsls	r2, r3, #31
 8000b88:	d5e5      	bpl.n	8000b56 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000b8a:	f7ff ffce 	bl	8000b2a <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b8e:	2301      	movs	r3, #1
 8000b90:	6822      	ldr	r2, [r4, #0]
 8000b92:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b98:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000b9c:	e7db      	b.n	8000b56 <HAL_ETH_IRQHandler+0x28>

08000b9e <HAL_ETH_ReadPHYRegister>:
{
 8000b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ba0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ba8:	2b82      	cmp	r3, #130	; 0x82
 8000baa:	d030      	beq.n	8000c0e <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000bac:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bae:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bb0:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bb2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000bb6:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bb8:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bbc:	f003 011c 	and.w	r1, r3, #28
 8000bc0:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bc2:	8a04      	ldrh	r4, [r0, #16]
 8000bc4:	02e4      	lsls	r4, r4, #11
 8000bc6:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000bc8:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000bca:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000bce:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bd0:	f7ff fd2e 	bl	8000630 <HAL_GetTick>
 8000bd4:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bd6:	f014 0001 	ands.w	r0, r4, #1
 8000bda:	d107      	bne.n	8000bec <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bec:	f7ff fd20 	bl	8000630 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bf6:	d307      	bcc.n	8000c08 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000bf8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bfc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c00:	2300      	movs	r3, #0
 8000c02:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	691c      	ldr	r4, [r3, #16]
 8000c0c:	e7e3      	b.n	8000bd6 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000c0e:	2002      	movs	r0, #2
}
 8000c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c12 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c12:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c16:	2b42      	cmp	r3, #66	; 0x42
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c1c:	d02e      	beq.n	8000c7c <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c1e:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c20:	018c      	lsls	r4, r1, #6
 8000c22:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c24:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c28:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000c2c:	6803      	ldr	r3, [r0, #0]
 8000c2e:	f044 0403 	orr.w	r4, r4, #3
 8000c32:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c34:	f000 001c 	and.w	r0, r0, #28
 8000c38:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c3a:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c3c:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c3e:	02e4      	lsls	r4, r4, #11
 8000c40:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000c42:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000c44:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c46:	f7ff fcf3 	bl	8000630 <HAL_GetTick>
 8000c4a:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c4c:	f014 0001 	ands.w	r0, r4, #1
 8000c50:	d103      	bne.n	8000c5a <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c5a:	f7ff fce9 	bl	8000630 <HAL_GetTick>
 8000c5e:	1b80      	subs	r0, r0, r6
 8000c60:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c64:	d307      	bcc.n	8000c76 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000c66:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000c68:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000c6a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000c74:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	691c      	ldr	r4, [r3, #16]
 8000c7a:	e7e7      	b.n	8000c4c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c7c:	2002      	movs	r0, #2
}
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}

08000c80 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000c80:	2300      	movs	r3, #0
{
 8000c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000c84:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000c86:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	f000 80dc 	beq.w	8000e46 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c8e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c96:	b91b      	cbnz	r3, 8000ca0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c98:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c9c:	f00c fe62 	bl	800d964 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <HAL_ETH_Init+0x1cc>)
 8000ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cb4:	4b66      	ldr	r3, [pc, #408]	; (8000e50 <HAL_ETH_Init+0x1d0>)
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000cbc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	6a21      	ldr	r1, [r4, #32]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	f042 0201 	orr.w	r2, r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cd4:	f7ff fcac 	bl	8000630 <HAL_GetTick>
 8000cd8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	07d0      	lsls	r0, r2, #31
 8000ce4:	d41d      	bmi.n	8000d22 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000ce6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000ce8:	f000 fd74 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000cec:	4b59      	ldr	r3, [pc, #356]	; (8000e54 <HAL_ETH_Init+0x1d4>)
 8000cee:	4a5a      	ldr	r2, [pc, #360]	; (8000e58 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000cf0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000cf4:	4403      	add	r3, r0
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d822      	bhi.n	8000d40 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000cfa:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000cfe:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d04:	2100      	movs	r1, #0
 8000d06:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000d08:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d0a:	f7ff ff82 	bl	8000c12 <HAL_ETH_WritePHYRegister>
 8000d0e:	4605      	mov	r5, r0
 8000d10:	b368      	cbz	r0, 8000d6e <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000d12:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000d14:	2101      	movs	r1, #1
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fd5a 	bl	80007d0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000d1c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000d20:	e00b      	b.n	8000d3a <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d22:	f7ff fc85 	bl	8000630 <HAL_GetTick>
 8000d26:	1b40      	subs	r0, r0, r5
 8000d28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d2c:	d9d5      	bls.n	8000cda <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d2e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000d30:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d32:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HAL_ETH_Init+0x1dc>)
 8000d42:	4a47      	ldr	r2, [pc, #284]	; (8000e60 <HAL_ETH_Init+0x1e0>)
 8000d44:	4403      	add	r3, r0
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d802      	bhi.n	8000d50 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d4a:	f045 050c 	orr.w	r5, r5, #12
 8000d4e:	e7d6      	b.n	8000cfe <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_ETH_Init+0x1e4>)
 8000d52:	4a45      	ldr	r2, [pc, #276]	; (8000e68 <HAL_ETH_Init+0x1e8>)
 8000d54:	4403      	add	r3, r0
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d9d1      	bls.n	8000cfe <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <HAL_ETH_Init+0x1ec>)
 8000d5c:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <HAL_ETH_Init+0x1f0>)
 8000d5e:	4403      	add	r3, r0
 8000d60:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d62:	bf94      	ite	ls
 8000d64:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d68:	f045 0510 	orrhi.w	r5, r5, #16
 8000d6c:	e7c7      	b.n	8000cfe <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	f7ff fc64 	bl	800063c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d053      	beq.n	8000e22 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fc59 	bl	8000630 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d7e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d82:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d84:	466a      	mov	r2, sp
 8000d86:	2101      	movs	r1, #1
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff ff08 	bl	8000b9e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d8e:	f7ff fc4f 	bl	8000630 <HAL_GetTick>
 8000d92:	1b80      	subs	r0, r0, r6
 8000d94:	42b8      	cmp	r0, r7
 8000d96:	d90b      	bls.n	8000db0 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff fd18 	bl	80007d0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000da0:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000da2:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000da4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000da8:	2300      	movs	r3, #0
 8000daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000dae:	e7c4      	b.n	8000d3a <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	0759      	lsls	r1, r3, #29
 8000db4:	d5e6      	bpl.n	8000d84 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff ff28 	bl	8000c12 <HAL_ETH_WritePHYRegister>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d1a5      	bne.n	8000d12 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000dc6:	f7ff fc33 	bl	8000630 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000dca:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000dce:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000dd0:	466a      	mov	r2, sp
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fee2 	bl	8000b9e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000dda:	f7ff fc29 	bl	8000630 <HAL_GetTick>
 8000dde:	1b80      	subs	r0, r0, r6
 8000de0:	42b8      	cmp	r0, r7
 8000de2:	d8d9      	bhi.n	8000d98 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000de4:	9b00      	ldr	r3, [sp, #0]
 8000de6:	069a      	lsls	r2, r3, #26
 8000de8:	d5f2      	bpl.n	8000dd0 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000dea:	466a      	mov	r2, sp
 8000dec:	211f      	movs	r1, #31
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff fed5 	bl	8000b9e <HAL_ETH_ReadPHYRegister>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d18c      	bne.n	8000d12 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000df8:	9b00      	ldr	r3, [sp, #0]
 8000dfa:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000dfe:	bf18      	it	ne
 8000e00:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000e04:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000e06:	bf4c      	ite	mi
 8000e08:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e0a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e0e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e10:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000e12:	2100      	movs	r1, #0
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff fcdb 	bl	80007d0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e20:	e78b      	b.n	8000d3a <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000e22:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e24:	4629      	mov	r1, r5
 8000e26:	68e2      	ldr	r2, [r4, #12]
 8000e28:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000e2a:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e2c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000e30:	b292      	uxth	r2, r2
 8000e32:	f7ff feee 	bl	8000c12 <HAL_ETH_WritePHYRegister>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	f47f af6b 	bne.w	8000d12 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e3c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e40:	f7ff fbfc 	bl	800063c <HAL_Delay>
 8000e44:	e7e5      	b.n	8000e12 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000e46:	2501      	movs	r5, #1
 8000e48:	e777      	b.n	8000d3a <HAL_ETH_Init+0xba>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40013800 	.word	0x40013800
 8000e54:	feced300 	.word	0xfeced300
 8000e58:	00e4e1bf 	.word	0x00e4e1bf
 8000e5c:	fde9f140 	.word	0xfde9f140
 8000e60:	017d783f 	.word	0x017d783f
 8000e64:	fc6c7900 	.word	0xfc6c7900
 8000e68:	026259ff 	.word	0x026259ff
 8000e6c:	fa0a1f00 	.word	0xfa0a1f00
 8000e70:	02faf07f 	.word	0x02faf07f

08000e74 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000e74:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000e78:	2b01      	cmp	r3, #1
{  
 8000e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000e82:	d033      	beq.n	8000eec <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000e84:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e86:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000e88:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000e8c:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000e8e:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e90:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e92:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e94:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e98:	f042 0208 	orr.w	r2, r2, #8
 8000e9c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea2:	f7ff fbcb 	bl	800063c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000ea6:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea8:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000eae:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	f042 0204 	orr.w	r2, r2, #4
 8000eb6:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ebc:	f7ff fbbe 	bl	800063c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000ec0:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000ec2:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000ec4:	9a00      	ldr	r2, [sp, #0]
 8000ec6:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000ec8:	f7ff fc6c 	bl	80007a4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000ecc:	682a      	ldr	r2, [r5, #0]
 8000ece:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000ed2:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000ed4:	58d1      	ldr	r1, [r2, r3]
 8000ed6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000eda:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000edc:	58d1      	ldr	r1, [r2, r3]
 8000ede:	f041 0102 	orr.w	r1, r1, #2
 8000ee2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000ee4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ee8:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000eec:	b002      	add	sp, #8
 8000eee:	bd70      	pop	{r4, r5, r6, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef4:	680b      	ldr	r3, [r1, #0]
{
 8000ef6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80010bc <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4a6c      	ldr	r2, [pc, #432]	; (80010b4 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f02:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80010c0 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000f06:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f08:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000f0a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	f040 80b6 	bne.w	8001080 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	684c      	ldr	r4, [r1, #4]
 8000f16:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f1a:	f024 0c10 	bic.w	ip, r4, #16
 8000f1e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000f22:	2e01      	cmp	r6, #1
 8000f24:	d812      	bhi.n	8000f4c <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f26:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000f28:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f2a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f2e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f32:	68ce      	ldr	r6, [r1, #12]
 8000f34:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f38:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000f3a:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f3c:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000f40:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f42:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f48:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000f4a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000f4e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f54:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f58:	ea6f 0606 	mvn.w	r6, r6
 8000f5c:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f60:	688f      	ldr	r7, [r1, #8]
 8000f62:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f66:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000f6a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	d116      	bne.n	8000f9c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000f6e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f72:	f003 0b07 	and.w	fp, r3, #7
 8000f76:	f04f 0c0f 	mov.w	ip, #15
 8000f7a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000f7e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000f82:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f86:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f8a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f8e:	690f      	ldr	r7, [r1, #16]
 8000f90:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f94:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f98:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f9c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f9e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fa0:	f004 0703 	and.w	r7, r4, #3
 8000fa4:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000fa8:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000fac:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	00e6      	lsls	r6, r4, #3
 8000fb0:	d566      	bpl.n	8001080 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000fb6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fba:	f003 0e03 	and.w	lr, r3, #3
 8000fbe:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000fc6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000fd2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000fd6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000fda:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000fde:	9603      	str	r6, [sp, #12]
 8000fe0:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe2:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000fe6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fea:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fee:	4e32      	ldr	r6, [pc, #200]	; (80010b8 <HAL_GPIO_Init+0x1c8>)
 8000ff0:	42b0      	cmp	r0, r6
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0x19e>
 8000ff4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ff8:	42b0      	cmp	r0, r6
 8000ffa:	d04a      	beq.n	8001092 <HAL_GPIO_Init+0x1a2>
 8000ffc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001000:	42b0      	cmp	r0, r6
 8001002:	d048      	beq.n	8001096 <HAL_GPIO_Init+0x1a6>
 8001004:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001008:	42b0      	cmp	r0, r6
 800100a:	d046      	beq.n	800109a <HAL_GPIO_Init+0x1aa>
 800100c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001010:	42b0      	cmp	r0, r6
 8001012:	d044      	beq.n	800109e <HAL_GPIO_Init+0x1ae>
 8001014:	4548      	cmp	r0, r9
 8001016:	d044      	beq.n	80010a2 <HAL_GPIO_Init+0x1b2>
 8001018:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800101c:	42b0      	cmp	r0, r6
 800101e:	d042      	beq.n	80010a6 <HAL_GPIO_Init+0x1b6>
 8001020:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001024:	42b0      	cmp	r0, r6
 8001026:	d040      	beq.n	80010aa <HAL_GPIO_Init+0x1ba>
 8001028:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800102c:	42b0      	cmp	r0, r6
 800102e:	d03e      	beq.n	80010ae <HAL_GPIO_Init+0x1be>
 8001030:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001034:	42b0      	cmp	r0, r6
 8001036:	bf14      	ite	ne
 8001038:	260a      	movne	r6, #10
 800103a:	2609      	moveq	r6, #9
 800103c:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001044:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001048:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800104a:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800104e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001050:	bf0c      	ite	eq
 8001052:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001054:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001056:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800105a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800105c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800105e:	bf0c      	ite	eq
 8001060:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001062:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001064:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001068:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800106a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800106c:	bf0c      	ite	eq
 800106e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001070:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001072:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001074:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001076:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001078:	bf54      	ite	pl
 800107a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800107c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800107e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001080:	3301      	adds	r3, #1
 8001082:	2b10      	cmp	r3, #16
 8001084:	f47f af3f 	bne.w	8000f06 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001088:	b005      	add	sp, #20
 800108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800108e:	2600      	movs	r6, #0
 8001090:	e7d4      	b.n	800103c <HAL_GPIO_Init+0x14c>
 8001092:	2601      	movs	r6, #1
 8001094:	e7d2      	b.n	800103c <HAL_GPIO_Init+0x14c>
 8001096:	2602      	movs	r6, #2
 8001098:	e7d0      	b.n	800103c <HAL_GPIO_Init+0x14c>
 800109a:	2603      	movs	r6, #3
 800109c:	e7ce      	b.n	800103c <HAL_GPIO_Init+0x14c>
 800109e:	2604      	movs	r6, #4
 80010a0:	e7cc      	b.n	800103c <HAL_GPIO_Init+0x14c>
 80010a2:	2605      	movs	r6, #5
 80010a4:	e7ca      	b.n	800103c <HAL_GPIO_Init+0x14c>
 80010a6:	2606      	movs	r6, #6
 80010a8:	e7c8      	b.n	800103c <HAL_GPIO_Init+0x14c>
 80010aa:	2607      	movs	r6, #7
 80010ac:	e7c6      	b.n	800103c <HAL_GPIO_Init+0x14c>
 80010ae:	2608      	movs	r6, #8
 80010b0:	e7c4      	b.n	800103c <HAL_GPIO_Init+0x14c>
 80010b2:	bf00      	nop
 80010b4:	40013c00 	.word	0x40013c00
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021400 	.word	0x40021400

080010c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	b10a      	cbz	r2, 80010ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010c6:	6181      	str	r1, [r0, #24]
 80010c8:	4770      	bx	lr
 80010ca:	0409      	lsls	r1, r1, #16
 80010cc:	e7fb      	b.n	80010c6 <HAL_GPIO_WritePin+0x2>

080010ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80010ce:	6943      	ldr	r3, [r0, #20]
 80010d0:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010d2:	bf18      	it	ne
 80010d4:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d6:	6181      	str	r1, [r0, #24]
 80010d8:	4770      	bx	lr

080010da <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_EXTI_IRQHandler>:
{
 80010dc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010e0:	6959      	ldr	r1, [r3, #20]
 80010e2:	4201      	tst	r1, r0
 80010e4:	d002      	beq.n	80010ec <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010e6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e8:	f7ff fff7 	bl	80010da <HAL_GPIO_EXTI_Callback>
 80010ec:	bd08      	pop	{r3, pc}
 80010ee:	bf00      	nop
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f6:	4604      	mov	r4, r0
{
 80010f8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80010fa:	b360      	cbz	r0, 8001156 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001100:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001106:	b91b      	cbnz	r3, 8001110 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001108:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110c:	f00d fb60 	bl	800e7d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001110:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001112:	466e      	mov	r6, sp
 8001114:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001116:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800111a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 800111c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800111e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001122:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001126:	bf08      	it	eq
 8001128:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800112a:	f001 fcde 	bl	8002aea <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001136:	e895 0003 	ldmia.w	r5, {r0, r1}
 800113a:	4625      	mov	r5, r4
 800113c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001140:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001144:	f855 0b10 	ldr.w	r0, [r5], #16
 8001148:	f001 fc94 	bl	8002a74 <USB_CoreInit>
 800114c:	4606      	mov	r6, r0
 800114e:	b120      	cbz	r0, 800115a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001150:	2302      	movs	r3, #2
 8001152:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001156:	2501      	movs	r5, #1
 8001158:	e054      	b.n	8001204 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800115a:	4601      	mov	r1, r0
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	f001 fcca 	bl	8002af6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	4630      	mov	r0, r6
 8001164:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001168:	261c      	movs	r6, #28
 800116a:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800116e:	4601      	mov	r1, r0
 8001170:	b2c2      	uxtb	r2, r0
 8001172:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	4596      	cmp	lr, r2
 8001176:	d81b      	bhi.n	80011b0 <HAL_PCD_Init+0xbc>
 8001178:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800117a:	261c      	movs	r6, #28
 800117c:	4619      	mov	r1, r3
 800117e:	b2d8      	uxtb	r0, r3
 8001180:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001182:	4586      	cmp	lr, r0
 8001184:	d822      	bhi.n	80011cc <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	466e      	mov	r6, sp
 800118a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001194:	e886 0003 	stmia.w	r6, {r0, r1}
 8001198:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	f001 fceb 	bl	8002b78 <USB_DevInit>
 80011a2:	2301      	movs	r3, #1
 80011a4:	4605      	mov	r5, r0
 80011a6:	b300      	cbz	r0, 80011ea <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011a8:	2202      	movs	r2, #2
 80011aa:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80011ae:	e7d2      	b.n	8001156 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80011b0:	fb06 4302 	mla	r3, r6, r2, r4
 80011b4:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011c0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c4:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c6:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c8:	6519      	str	r1, [r3, #80]	; 0x50
 80011ca:	e7d1      	b.n	8001170 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80011cc:	fb06 4200 	mla	r2, r6, r0, r4
 80011d0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80011d4:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011dc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80011e8:	e7c9      	b.n	800117e <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80011ea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011ee:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d102      	bne.n	80011fe <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011f8:	4620      	mov	r0, r4
 80011fa:	f000 f806 	bl	800120a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80011fe:	6820      	ldr	r0, [r4, #0]
 8001200:	f001 fd74 	bl	8002cec <USB_DevDisconnect>

  return HAL_OK;
}
 8001204:	4628      	mov	r0, r5
 8001206:	b00b      	add	sp, #44	; 0x2c
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800120a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 800120a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800120c:	6802      	ldr	r2, [r0, #0]
{
 800120e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001210:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001214:	2000      	movs	r0, #0
 8001216:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800121a:	6993      	ldr	r3, [r2, #24]
 800121c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001220:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001222:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	f043 0303 	orr.w	r3, r3, #3
 800122c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800122e:	4770      	bx	lr

08001230 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001230:	4a02      	ldr	r2, [pc, #8]	; (800123c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4770      	bx	lr
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001242:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001246:	4c19      	ldr	r4, [pc, #100]	; (80012ac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff f9e6 	bl	8000630 <HAL_GetTick>
 8001264:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	03da      	lsls	r2, r3, #15
 800126a:	d50c      	bpl.n	8001286 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001272:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001274:	f7ff f9dc 	bl	8000630 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001278:	4c0c      	ldr	r4, [pc, #48]	; (80012ac <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800127a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	d50a      	bpl.n	8001298 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001282:	2000      	movs	r0, #0
 8001284:	e006      	b.n	8001294 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001286:	f7ff f9d3 	bl	8000630 <HAL_GetTick>
 800128a:	1b40      	subs	r0, r0, r5
 800128c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001290:	d9e9      	bls.n	8001266 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
}
 8001294:	b003      	add	sp, #12
 8001296:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001298:	f7ff f9ca 	bl	8000630 <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012a2:	d9eb      	bls.n	800127c <HAL_PWREx_EnableOverDrive+0x3c>
 80012a4:	e7f5      	b.n	8001292 <HAL_PWREx_EnableOverDrive+0x52>
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	4604      	mov	r4, r0
 80012b6:	b908      	cbnz	r0, 80012bc <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e03f      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012bc:	6803      	ldr	r3, [r0, #0]
 80012be:	07d8      	lsls	r0, r3, #31
 80012c0:	d410      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	0799      	lsls	r1, r3, #30
 80012c6:	d460      	bmi.n	800138a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	0719      	lsls	r1, r3, #28
 80012cc:	f100 80a5 	bmi.w	800141a <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	075a      	lsls	r2, r3, #29
 80012d4:	f100 80c6 	bmi.w	8001464 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d8:	69a0      	ldr	r0, [r4, #24]
 80012da:	2800      	cmp	r0, #0
 80012dc:	f040 8130 	bne.w	8001540 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 80012e0:	2000      	movs	r0, #0
 80012e2:	e02b      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e4:	4b94      	ldr	r3, [pc, #592]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	f002 020c 	and.w	r2, r2, #12
 80012ec:	2a04      	cmp	r2, #4
 80012ee:	d007      	beq.n	8001300 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f002 020c 	and.w	r2, r2, #12
 80012f6:	2a08      	cmp	r2, #8
 80012f8:	d10a      	bne.n	8001310 <HAL_RCC_OscConfig+0x60>
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	025a      	lsls	r2, r3, #9
 80012fe:	d507      	bpl.n	8001310 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b8d      	ldr	r3, [pc, #564]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	039b      	lsls	r3, r3, #14
 8001306:	d5dc      	bpl.n	80012c2 <HAL_RCC_OscConfig+0x12>
 8001308:	6863      	ldr	r3, [r4, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1d9      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
 800130e:	e7d3      	b.n	80012b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	6863      	ldr	r3, [r4, #4]
 8001312:	4d89      	ldr	r5, [pc, #548]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d113      	bne.n	8001342 <HAL_RCC_OscConfig+0x92>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001322:	f7ff f985 	bl	8000630 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4d84      	ldr	r5, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001328:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	682b      	ldr	r3, [r5, #0]
 800132c:	039f      	lsls	r7, r3, #14
 800132e:	d4c8      	bmi.n	80012c2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff f97e 	bl	8000630 <HAL_GetTick>
 8001334:	1b80      	subs	r0, r0, r6
 8001336:	2864      	cmp	r0, #100	; 0x64
 8001338:	d9f7      	bls.n	800132a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
}
 800133c:	b002      	add	sp, #8
 800133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	b99b      	cbnz	r3, 800136c <HAL_RCC_OscConfig+0xbc>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	602b      	str	r3, [r5, #0]
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001354:	f7ff f96c 	bl	8000630 <HAL_GetTick>
 8001358:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	0398      	lsls	r0, r3, #14
 800135e:	d5b0      	bpl.n	80012c2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff f966 	bl	8000630 <HAL_GetTick>
 8001364:	1b80      	subs	r0, r0, r6
 8001366:	2864      	cmp	r0, #100	; 0x64
 8001368:	d9f7      	bls.n	800135a <HAL_RCC_OscConfig+0xaa>
 800136a:	e7e6      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	d103      	bne.n	800137c <HAL_RCC_OscConfig+0xcc>
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	602b      	str	r3, [r5, #0]
 800137a:	e7ce      	b.n	800131a <HAL_RCC_OscConfig+0x6a>
 800137c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001388:	e7ca      	b.n	8001320 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	f012 0f0c 	tst.w	r2, #12
 8001392:	d007      	beq.n	80013a4 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f002 020c 	and.w	r2, r2, #12
 800139a:	2a08      	cmp	r2, #8
 800139c:	d111      	bne.n	80013c2 <HAL_RCC_OscConfig+0x112>
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	0259      	lsls	r1, r3, #9
 80013a2:	d40e      	bmi.n	80013c2 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	0792      	lsls	r2, r2, #30
 80013aa:	d502      	bpl.n	80013b2 <HAL_RCC_OscConfig+0x102>
 80013ac:	68e2      	ldr	r2, [r4, #12]
 80013ae:	2a01      	cmp	r2, #1
 80013b0:	d182      	bne.n	80012b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	6921      	ldr	r1, [r4, #16]
 80013b6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013ba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013be:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c0:	e782      	b.n	80012c8 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013c2:	68e3      	ldr	r3, [r4, #12]
 80013c4:	4d5c      	ldr	r5, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80013c6:	b1bb      	cbz	r3, 80013f8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013d0:	f7ff f92e 	bl	8000630 <HAL_GetTick>
 80013d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	079f      	lsls	r7, r3, #30
 80013da:	d507      	bpl.n	80013ec <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	6922      	ldr	r2, [r4, #16]
 80013e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	e76d      	b.n	80012c8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff f920 	bl	8000630 <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	2802      	cmp	r0, #2
 80013f4:	d9ef      	bls.n	80013d6 <HAL_RCC_OscConfig+0x126>
 80013f6:	e7a0      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001400:	f7ff f916 	bl	8000630 <HAL_GetTick>
 8001404:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	0798      	lsls	r0, r3, #30
 800140a:	f57f af5d 	bpl.w	80012c8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff f90f 	bl	8000630 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2802      	cmp	r0, #2
 8001416:	d9f6      	bls.n	8001406 <HAL_RCC_OscConfig+0x156>
 8001418:	e78f      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141a:	6963      	ldr	r3, [r4, #20]
 800141c:	4d46      	ldr	r5, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800141e:	b183      	cbz	r3, 8001442 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001420:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001428:	f7ff f902 	bl	8000630 <HAL_GetTick>
 800142c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001430:	079b      	lsls	r3, r3, #30
 8001432:	f53f af4d 	bmi.w	80012d0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff f8fb 	bl	8000630 <HAL_GetTick>
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f6      	bls.n	800142e <HAL_RCC_OscConfig+0x17e>
 8001440:	e77b      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001442:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800144a:	f7ff f8f1 	bl	8000630 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001452:	079f      	lsls	r7, r3, #30
 8001454:	f57f af3c 	bpl.w	80012d0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff f8ea 	bl	8000630 <HAL_GetTick>
 800145c:	1b80      	subs	r0, r0, r6
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f6      	bls.n	8001450 <HAL_RCC_OscConfig+0x1a0>
 8001462:	e76a      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 8001466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001468:	00d0      	lsls	r0, r2, #3
 800146a:	d427      	bmi.n	80014bc <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800146e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	4d2e      	ldr	r5, [pc, #184]	; (800153c <HAL_RCC_OscConfig+0x28c>)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	05d9      	lsls	r1, r3, #23
 8001486:	d51b      	bpl.n	80014c0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	68a3      	ldr	r3, [r4, #8]
 800148a:	4d2b      	ldr	r5, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 800148c:	2b01      	cmp	r3, #1
 800148e:	d127      	bne.n	80014e0 <HAL_RCC_OscConfig+0x230>
 8001490:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800149c:	f7ff f8c8 	bl	8000630 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	4f25      	ldr	r7, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80014a2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014a6:	079b      	lsls	r3, r3, #30
 80014a8:	d53f      	bpl.n	800152a <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	f43f af14 	beq.w	80012d8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x288>)
 80014b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	e70d      	b.n	80012d8 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80014bc:	2600      	movs	r6, #0
 80014be:	e7df      	b.n	8001480 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014c8:	f7ff f8b2 	bl	8000630 <HAL_GetTick>
 80014cc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	05da      	lsls	r2, r3, #23
 80014d2:	d4d9      	bmi.n	8001488 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff f8ac 	bl	8000630 <HAL_GetTick>
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	2864      	cmp	r0, #100	; 0x64
 80014dc:	d9f7      	bls.n	80014ce <HAL_RCC_OscConfig+0x21e>
 80014de:	e72c      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	b9ab      	cbnz	r3, 800150e <HAL_RCC_OscConfig+0x25e>
 80014e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	672b      	str	r3, [r5, #112]	; 0x70
 80014ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014f6:	f7ff f89b 	bl	8000630 <HAL_GetTick>
 80014fa:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014fe:	0798      	lsls	r0, r3, #30
 8001500:	d5d3      	bpl.n	80014aa <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff f895 	bl	8000630 <HAL_GetTick>
 8001506:	1bc0      	subs	r0, r0, r7
 8001508:	4540      	cmp	r0, r8
 800150a:	d9f7      	bls.n	80014fc <HAL_RCC_OscConfig+0x24c>
 800150c:	e715      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150e:	2b05      	cmp	r3, #5
 8001510:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001512:	d103      	bne.n	800151c <HAL_RCC_OscConfig+0x26c>
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	672b      	str	r3, [r5, #112]	; 0x70
 800151a:	e7b9      	b.n	8001490 <HAL_RCC_OscConfig+0x1e0>
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	672b      	str	r3, [r5, #112]	; 0x70
 8001522:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	e7b5      	b.n	8001496 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f881 	bl	8000630 <HAL_GetTick>
 800152e:	eba0 0008 	sub.w	r0, r0, r8
 8001532:	42a8      	cmp	r0, r5
 8001534:	d9b6      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1f4>
 8001536:	e700      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001540:	4d3c      	ldr	r5, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x384>)
 8001542:	68ab      	ldr	r3, [r5, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d042      	beq.n	80015d2 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 800154c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001554:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001556:	d12f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8001558:	f7ff f86a 	bl	8000630 <HAL_GetTick>
 800155c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	0199      	lsls	r1, r3, #6
 8001562:	d423      	bmi.n	80015ac <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001564:	6a22      	ldr	r2, [r4, #32]
 8001566:	69e3      	ldr	r3, [r4, #28]
 8001568:	4313      	orrs	r3, r2
 800156a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800156c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001572:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001576:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001578:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800157c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4c2d      	ldr	r4, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	0852      	lsrs	r2, r2, #1
 8001582:	3a01      	subs	r2, #1
 8001584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001588:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001590:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001592:	f7ff f84d 	bl	8000630 <HAL_GetTick>
 8001596:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	019a      	lsls	r2, r3, #6
 800159c:	f53f aea0 	bmi.w	80012e0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f846 	bl	8000630 <HAL_GetTick>
 80015a4:	1b40      	subs	r0, r0, r5
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9f6      	bls.n	8001598 <HAL_RCC_OscConfig+0x2e8>
 80015aa:	e6c6      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff f840 	bl	8000630 <HAL_GetTick>
 80015b0:	1b80      	subs	r0, r0, r6
 80015b2:	2802      	cmp	r0, #2
 80015b4:	d9d3      	bls.n	800155e <HAL_RCC_OscConfig+0x2ae>
 80015b6:	e6c0      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80015b8:	f7ff f83a 	bl	8000630 <HAL_GetTick>
 80015bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	f57f ae8d 	bpl.w	80012e0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f833 	bl	8000630 <HAL_GetTick>
 80015ca:	1b00      	subs	r0, r0, r4
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9f6      	bls.n	80015be <HAL_RCC_OscConfig+0x30e>
 80015d0:	e6b3      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80015d4:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d6:	f43f aeb1 	beq.w	800133c <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015de:	69e1      	ldr	r1, [r4, #28]
 80015e0:	428a      	cmp	r2, r1
 80015e2:	f47f ae69 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	6a21      	ldr	r1, [r4, #32]
 80015ec:	428a      	cmp	r2, r1
 80015ee:	f47f ae63 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015f2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015f8:	401a      	ands	r2, r3
 80015fa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80015fe:	f47f ae5b 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001602:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001604:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001608:	0852      	lsrs	r2, r2, #1
 800160a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001610:	f47f ae52 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001614:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001618:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800161a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800161e:	f47f ae4b 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001622:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001624:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001628:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 800162c:	bf14      	ite	ne
 800162e:	2001      	movne	r0, #1
 8001630:	2000      	moveq	r0, #0
 8001632:	e683      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	4913      	ldr	r1, [pc, #76]	; (8001688 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800163a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	688b      	ldr	r3, [r1, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x16>
 8001646:	2b08      	cmp	r3, #8
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800164c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800164e:	4810      	ldr	r0, [pc, #64]	; (8001690 <HAL_RCC_GetSysClockFreq+0x58>)
 8001650:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001652:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001654:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001656:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800165c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001664:	bf1a      	itte	ne
 8001666:	480a      	ldrne	r0, [pc, #40]	; (8001690 <HAL_RCC_GetSysClockFreq+0x58>)
 8001668:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166a:	4808      	ldreq	r0, [pc, #32]	; (800168c <HAL_RCC_GetSysClockFreq+0x54>)
 800166c:	fba1 0100 	umull	r0, r1, r1, r0
 8001670:	f7fe fe3e 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_RCC_GetSysClockFreq+0x50>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800167c:	3301      	adds	r3, #1
 800167e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001680:	fbb0 f0f3 	udiv	r0, r0, r3
 8001684:	bd08      	pop	{r3, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	007a1200 	.word	0x007a1200

08001694 <HAL_RCC_ClockConfig>:
{
 8001694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001698:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800169a:	4604      	mov	r4, r0
 800169c:	b910      	cbnz	r0, 80016a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4a46      	ldr	r2, [pc, #280]	; (80017c0 <HAL_RCC_ClockConfig+0x12c>)
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d329      	bcc.n	8001704 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	6821      	ldr	r1, [r4, #0]
 80016b2:	078f      	lsls	r7, r1, #30
 80016b4:	d431      	bmi.n	800171a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b6:	07c8      	lsls	r0, r1, #31
 80016b8:	d444      	bmi.n	8001744 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ba:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <HAL_RCC_ClockConfig+0x12c>)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	429d      	cmp	r5, r3
 80016c4:	d368      	bcc.n	8001798 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	0751      	lsls	r1, r2, #29
 80016ca:	d471      	bmi.n	80017b0 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	0713      	lsls	r3, r2, #28
 80016ce:	d507      	bpl.n	80016e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d0:	4a3c      	ldr	r2, [pc, #240]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
 80016d2:	6921      	ldr	r1, [r4, #16]
 80016d4:	6893      	ldr	r3, [r2, #8]
 80016d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e0:	f7ff ffaa 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
 80016e6:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_RCC_ClockConfig+0x134>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	40d8      	lsrs	r0, r3
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_ClockConfig+0x138>)
 80016f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_ClockConfig+0x13c>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f00d f8af 	bl	800e85c <HAL_InitTick>
  return HAL_OK;
 80016fe:	2000      	movs	r0, #0
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	430b      	orrs	r3, r1
 800170c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4299      	cmp	r1, r3
 8001716:	d1c2      	bne.n	800169e <HAL_RCC_ClockConfig+0xa>
 8001718:	e7ca      	b.n	80016b0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171a:	f011 0f04 	tst.w	r1, #4
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
 8001720:	d003      	beq.n	800172a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001728:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	070e      	lsls	r6, r1, #28
 800172c:	d503      	bpl.n	8001736 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001734:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	68a0      	ldr	r0, [r4, #8]
 800173a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800173e:	4302      	orrs	r2, r0
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	e7b8      	b.n	80016b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001744:	6861      	ldr	r1, [r4, #4]
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
 8001748:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	d0a4      	beq.n	800169e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001754:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4e1a      	ldr	r6, [pc, #104]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175c:	f022 0203 	bic.w	r2, r2, #3
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001764:	f7fe ff64 	bl	8000630 <HAL_GetTick>
 8001768:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	68b3      	ldr	r3, [r6, #8]
 800176c:	6862      	ldr	r2, [r4, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001776:	d0a0      	beq.n	80016ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7fe ff5a 	bl	8000630 <HAL_GetTick>
 800177c:	1bc0      	subs	r0, r0, r7
 800177e:	4540      	cmp	r0, r8
 8001780:	d9f3      	bls.n	800176a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
}
 8001784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001788:	2902      	cmp	r1, #2
 800178a:	d102      	bne.n	8001792 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001790:	e7df      	b.n	8001752 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	f012 0f02 	tst.w	r2, #2
 8001796:	e7dc      	b.n	8001752 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	f023 030f 	bic.w	r3, r3, #15
 800179e:	432b      	orrs	r3, r5
 80017a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	429d      	cmp	r5, r3
 80017aa:	f47f af78 	bne.w	800169e <HAL_RCC_ClockConfig+0xa>
 80017ae:	e78a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <HAL_RCC_ClockConfig+0x130>)
 80017b2:	68e0      	ldr	r0, [r4, #12]
 80017b4:	688b      	ldr	r3, [r1, #8]
 80017b6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017ba:	4303      	orrs	r3, r0
 80017bc:	608b      	str	r3, [r1, #8]
 80017be:	e785      	b.n	80016cc <HAL_RCC_ClockConfig+0x38>
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	0801297c 	.word	0x0801297c
 80017cc:	20000014 	.word	0x20000014
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_RCC_GetHCLKFreq+0x8>)
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000014 	.word	0x20000014

080017e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017ee:	6810      	ldr	r0, [r2, #0]
}
 80017f0:	40d8      	lsrs	r0, r3
 80017f2:	4770      	bx	lr
 80017f4:	40023800 	.word	0x40023800
 80017f8:	0801298c 	.word	0x0801298c
 80017fc:	20000014 	.word	0x20000014

08001800 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	4a03      	ldr	r2, [pc, #12]	; (800181c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800180e:	6810      	ldr	r0, [r2, #0]
}
 8001810:	40d8      	lsrs	r0, r3
 8001812:	4770      	bx	lr
 8001814:	40023800 	.word	0x40023800
 8001818:	0801298c 	.word	0x0801298c
 800181c:	20000014 	.word	0x20000014

08001820 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001820:	230f      	movs	r3, #15
 8001822:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_GetClockConfig+0x34>)
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001834:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800183c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001846:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_GetClockConfig+0x38>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	4770      	bx	lr
 8001854:	40023800 	.word	0x40023800
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800185c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001860:	6802      	ldr	r2, [r0, #0]
{
 8001862:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001864:	f012 0601 	ands.w	r6, r2, #1
 8001868:	d00b      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800186a:	4bba      	ldr	r3, [pc, #744]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001872:	6099      	str	r1, [r3, #8]
 8001874:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800187a:	fab6 f686 	clz	r6, r6
 800187e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001880:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001882:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001886:	d012      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001888:	49b2      	ldr	r1, [pc, #712]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800188a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800188c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001890:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001898:	bf08      	it	eq
 800189a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800189c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018a0:	bf16      	itet	ne
 80018a2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80018a6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018a8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018ae:	02d7      	lsls	r7, r2, #11
 80018b0:	d510      	bpl.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018b2:	48a8      	ldr	r0, [pc, #672]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018c2:	ea43 0301 	orr.w	r3, r3, r1
 80018c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018ca:	f000 81a9 	beq.w	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80018ce:	2900      	cmp	r1, #0
 80018d0:	bf08      	it	eq
 80018d2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80018d4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80018d8:	bf18      	it	ne
 80018da:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018dc:	0690      	lsls	r0, r2, #26
 80018de:	d531      	bpl.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	4b9c      	ldr	r3, [pc, #624]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018e2:	4f9d      	ldr	r7, [pc, #628]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fe:	f7fe fe97 	bl	8000630 <HAL_GetTick>
 8001902:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	05d9      	lsls	r1, r3, #23
 8001908:	f140 818c 	bpl.w	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800190c:	4f91      	ldr	r7, [pc, #580]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001910:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001914:	f040 8191 	bne.w	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001918:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800191a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800191e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001922:	4a8c      	ldr	r2, [pc, #560]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001924:	f040 81af 	bne.w	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001928:	6891      	ldr	r1, [r2, #8]
 800192a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800192e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001932:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001936:	4301      	orrs	r1, r0
 8001938:	6091      	str	r1, [r2, #8]
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001940:	430b      	orrs	r3, r1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	06df      	lsls	r7, r3, #27
 8001948:	d50c      	bpl.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800194a:	4a82      	ldr	r2, [pc, #520]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800194c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001950:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001954:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001958:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800195c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800195e:	4301      	orrs	r1, r0
 8001960:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001964:	0458      	lsls	r0, r3, #17
 8001966:	d508      	bpl.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001968:	497a      	ldr	r1, [pc, #488]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800196a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800196c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001970:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001974:	4302      	orrs	r2, r0
 8001976:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800197a:	0419      	lsls	r1, r3, #16
 800197c:	d508      	bpl.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800197e:	4975      	ldr	r1, [pc, #468]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001980:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001982:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001986:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800198a:	4302      	orrs	r2, r0
 800198c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001990:	03da      	lsls	r2, r3, #15
 8001992:	d508      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001994:	496f      	ldr	r1, [pc, #444]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001996:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001998:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800199c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80019a0:	4302      	orrs	r2, r0
 80019a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019a6:	039f      	lsls	r7, r3, #14
 80019a8:	d508      	bpl.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019aa:	496a      	ldr	r1, [pc, #424]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80019ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019b2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80019b6:	4302      	orrs	r2, r0
 80019b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019bc:	0658      	lsls	r0, r3, #25
 80019be:	d508      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019c0:	4964      	ldr	r1, [pc, #400]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80019c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019c8:	f022 0203 	bic.w	r2, r2, #3
 80019cc:	4302      	orrs	r2, r0
 80019ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019d2:	0619      	lsls	r1, r3, #24
 80019d4:	d508      	bpl.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019d6:	495f      	ldr	r1, [pc, #380]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80019da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019de:	f022 020c 	bic.w	r2, r2, #12
 80019e2:	4302      	orrs	r2, r0
 80019e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019e8:	05da      	lsls	r2, r3, #23
 80019ea:	d508      	bpl.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019ec:	4959      	ldr	r1, [pc, #356]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019f8:	4302      	orrs	r2, r0
 80019fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019fe:	059f      	lsls	r7, r3, #22
 8001a00:	d508      	bpl.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a02:	4954      	ldr	r1, [pc, #336]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a04:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a0e:	4302      	orrs	r2, r0
 8001a10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a14:	0558      	lsls	r0, r3, #21
 8001a16:	d508      	bpl.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a18:	494e      	ldr	r1, [pc, #312]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a24:	4302      	orrs	r2, r0
 8001a26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a2a:	0519      	lsls	r1, r3, #20
 8001a2c:	d508      	bpl.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a2e:	4949      	ldr	r1, [pc, #292]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a40:	04da      	lsls	r2, r3, #19
 8001a42:	d508      	bpl.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a44:	4943      	ldr	r1, [pc, #268]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a46:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001a48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a50:	4302      	orrs	r2, r0
 8001a52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a56:	049f      	lsls	r7, r3, #18
 8001a58:	d508      	bpl.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a5a:	493e      	ldr	r1, [pc, #248]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a66:	4302      	orrs	r2, r0
 8001a68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a6c:	0258      	lsls	r0, r3, #9
 8001a6e:	d508      	bpl.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a70:	4938      	ldr	r1, [pc, #224]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a72:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001a74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a78:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a7c:	4302      	orrs	r2, r0
 8001a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a82:	0299      	lsls	r1, r3, #10
 8001a84:	d50c      	bpl.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a86:	4833      	ldr	r0, [pc, #204]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a88:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a8a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001a8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a92:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001a96:	bf08      	it	eq
 8001a98:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001aa0:	f013 0f08 	tst.w	r3, #8
 8001aa4:	bf18      	it	ne
 8001aa6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001aa8:	035a      	lsls	r2, r3, #13
 8001aaa:	d508      	bpl.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aac:	4929      	ldr	r1, [pc, #164]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001aae:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001ab0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ab4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001abe:	021f      	lsls	r7, r3, #8
 8001ac0:	d509      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ac2:	4924      	ldr	r1, [pc, #144]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ac4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001ac8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001acc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ad6:	0158      	lsls	r0, r3, #5
 8001ad8:	d509      	bpl.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ada:	491e      	ldr	r1, [pc, #120]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001adc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001ae0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ae4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001aee:	0119      	lsls	r1, r3, #4
 8001af0:	d509      	bpl.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001af2:	4918      	ldr	r1, [pc, #96]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001af4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001af8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001afc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001b00:	4302      	orrs	r2, r0
 8001b02:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001b06:	00da      	lsls	r2, r3, #3
 8001b08:	d509      	bpl.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001b0a:	4912      	ldr	r1, [pc, #72]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b0c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001b10:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001b14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b1e:	2e01      	cmp	r6, #1
 8001b20:	f000 80b5 	beq.w	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b28:	f000 80b1 	beq.w	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b2c:	2d01      	cmp	r5, #1
 8001b2e:	d175      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b30:	4d08      	ldr	r5, [pc, #32]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fd79 	bl	8000630 <HAL_GetTick>
 8001b3e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	009f      	lsls	r7, r3, #2
 8001b44:	f100 8127 	bmi.w	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b48:	6821      	ldr	r1, [r4, #0]
 8001b4a:	030e      	lsls	r6, r1, #12
 8001b4c:	d506      	bpl.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b50:	b143      	cbz	r3, 8001b64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001b52:	e003      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	02cd      	lsls	r5, r1, #11
 8001b5e:	d51d      	bpl.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b62:	b9db      	cbnz	r3, 8001b9c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b64:	4a93      	ldr	r2, [pc, #588]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b6a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6960      	ldr	r0, [r4, #20]
 8001b7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b7e:	69a0      	ldr	r0, [r4, #24]
 8001b80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b88:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b92:	3801      	subs	r0, #1
 8001b94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b9c:	0288      	lsls	r0, r1, #10
 8001b9e:	d515      	bpl.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001ba0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ba8:	4a82      	ldr	r2, [pc, #520]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001bae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001bb2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001bb6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6960      	ldr	r0, [r4, #20]
 8001bbe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bc2:	6a20      	ldr	r0, [r4, #32]
 8001bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001bcc:	070a      	lsls	r2, r1, #28
 8001bce:	d519      	bpl.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001bd0:	4978      	ldr	r1, [pc, #480]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001bda:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be2:	4313      	orrs	r3, r2
 8001be4:	6962      	ldr	r2, [r4, #20]
 8001be6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bea:	69e2      	ldr	r2, [r4, #28]
 8001bec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001bf4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001bf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c04:	4c6b      	ldr	r4, [pc, #428]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c0e:	f7fe fd0f 	bl	8000630 <HAL_GetTick>
 8001c12:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f140 80c4 	bpl.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e009      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001c20:	2601      	movs	r6, #1
 8001c22:	e657      	b.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7fe fd04 	bl	8000630 <HAL_GetTick>
 8001c28:	eba0 0008 	sub.w	r0, r0, r8
 8001c2c:	2864      	cmp	r0, #100	; 0x64
 8001c2e:	f67f ae69 	bls.w	8001904 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
}
 8001c34:	b003      	add	sp, #12
 8001c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c40:	4293      	cmp	r3, r2
 8001c42:	f43f ae69 	beq.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c52:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c5a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	07da      	lsls	r2, r3, #31
 8001c62:	f57f ae59 	bpl.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c66:	f7fe fce3 	bl	8000630 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c6e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	079b      	lsls	r3, r3, #30
 8001c74:	f53f ae50 	bmi.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe fcda 	bl	8000630 <HAL_GetTick>
 8001c7c:	eba0 0008 	sub.w	r0, r0, r8
 8001c80:	4548      	cmp	r0, r9
 8001c82:	d9f5      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001c84:	e7d5      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c86:	6891      	ldr	r1, [r2, #8]
 8001c88:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c8c:	e654      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c8e:	4e49      	ldr	r6, [pc, #292]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c96:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c98:	f7fe fcca 	bl	8000630 <HAL_GetTick>
 8001c9c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c9e:	6833      	ldr	r3, [r6, #0]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	d472      	bmi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	07d7      	lsls	r7, r2, #31
 8001ca8:	d512      	bpl.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cac:	b983      	cbnz	r3, 8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cae:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cb2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cba:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	6861      	ldr	r1, [r4, #4]
 8001cc2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001cc6:	68a1      	ldr	r1, [r4, #8]
 8001cc8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ccc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cd0:	0316      	lsls	r6, r2, #12
 8001cd2:	d503      	bpl.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001cdc:	02d0      	lsls	r0, r2, #11
 8001cde:	d51e      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce6:	d11a      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ce8:	4932      	ldr	r1, [pc, #200]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001cea:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cee:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	6860      	ldr	r0, [r4, #4]
 8001cfe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d02:	68e0      	ldr	r0, [r4, #12]
 8001d04:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d0c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d12:	f020 001f 	bic.w	r0, r0, #31
 8001d16:	3b01      	subs	r3, #1
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d1e:	01d1      	lsls	r1, r2, #7
 8001d20:	d511      	bpl.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d22:	4924      	ldr	r1, [pc, #144]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d24:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d28:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d30:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d34:	4303      	orrs	r3, r0
 8001d36:	6860      	ldr	r0, [r4, #4]
 8001d38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d3c:	6920      	ldr	r0, [r4, #16]
 8001d3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001d42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d46:	0192      	lsls	r2, r2, #6
 8001d48:	d50d      	bpl.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d4a:	6923      	ldr	r3, [r4, #16]
 8001d4c:	6862      	ldr	r2, [r4, #4]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d54:	68e2      	ldr	r2, [r4, #12]
 8001d56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d5a:	68a2      	ldr	r2, [r4, #8]
 8001d5c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d66:	4e13      	ldr	r6, [pc, #76]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d68:	6833      	ldr	r3, [r6, #0]
 8001d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001d70:	f7fe fc5e 	bl	8000630 <HAL_GetTick>
 8001d74:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d76:	6833      	ldr	r3, [r6, #0]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	f53f aed7 	bmi.w	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d7e:	f7fe fc57 	bl	8000630 <HAL_GetTick>
 8001d82:	1bc0      	subs	r0, r0, r7
 8001d84:	2864      	cmp	r0, #100	; 0x64
 8001d86:	d9f6      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d88:	e753      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d8a:	f7fe fc51 	bl	8000630 <HAL_GetTick>
 8001d8e:	1bc0      	subs	r0, r0, r7
 8001d90:	2864      	cmp	r0, #100	; 0x64
 8001d92:	d984      	bls.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001d94:	e74d      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d96:	f7fe fc4b 	bl	8000630 <HAL_GetTick>
 8001d9a:	1b80      	subs	r0, r0, r6
 8001d9c:	2864      	cmp	r0, #100	; 0x64
 8001d9e:	f67f aecf 	bls.w	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001da2:	e746      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001da4:	f7fe fc44 	bl	8000630 <HAL_GetTick>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	2864      	cmp	r0, #100	; 0x64
 8001dac:	f67f af32 	bls.w	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001db0:	e73f      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001db8:	6802      	ldr	r2, [r0, #0]
{
 8001dba:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001dbc:	68d3      	ldr	r3, [r2, #12]
{
 8001dbe:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dc4:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe fc33 	bl	8000630 <HAL_GetTick>
 8001dca:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	d501      	bpl.n	8001dd8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001dd8:	f7fe fc2a 	bl	8000630 <HAL_GetTick>
 8001ddc:	1b40      	subs	r0, r0, r5
 8001dde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001de2:	d9f3      	bls.n	8001dcc <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001de4:	2003      	movs	r0, #3
}
 8001de6:	bd38      	pop	{r3, r4, r5, pc}

08001de8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dea:	6803      	ldr	r3, [r0, #0]
{
 8001dec:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	0652      	lsls	r2, r2, #25
 8001df2:	d501      	bpl.n	8001df8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001df4:	2000      	movs	r0, #0
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001dfe:	f7fe fc17 	bl	8000630 <HAL_GetTick>
 8001e02:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	065b      	lsls	r3, r3, #25
 8001e0a:	d4f3      	bmi.n	8001df4 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e0c:	f7fe fc10 	bl	8000630 <HAL_GetTick>
 8001e10:	1b40      	subs	r0, r0, r5
 8001e12:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e16:	d9f5      	bls.n	8001e04 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001e18:	2003      	movs	r0, #3
}
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}

08001e1c <HAL_RTC_Init>:
{
 8001e1c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b1b0      	cbz	r0, 8001e50 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e22:	7f43      	ldrb	r3, [r0, #29]
 8001e24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e28:	b913      	cbnz	r3, 8001e30 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001e2a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001e2c:	f00c fc44 	bl	800e6b8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e30:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e32:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e34:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e36:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3c:	2253      	movs	r2, #83	; 0x53
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e40:	f7ff ffd2 	bl	8001de8 <RTC_EnterInitMode>
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	b128      	cbz	r0, 8001e54 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e48:	22ff      	movs	r2, #255	; 0xff
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001e50:	2001      	movs	r0, #1
}
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e54:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e56:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e58:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e60:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e62:	6862      	ldr	r2, [r4, #4]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	432a      	orrs	r2, r5
 8001e68:	6965      	ldr	r5, [r4, #20]
 8001e6a:	432a      	orrs	r2, r5
 8001e6c:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001e6e:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e70:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e72:	68e2      	ldr	r2, [r4, #12]
 8001e74:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e7c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001e7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e86:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e8a:	f022 0208 	bic.w	r2, r2, #8
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e92:	430a      	orrs	r2, r1
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e96:	22ff      	movs	r2, #255	; 0xff
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}

08001ea0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8001ea0:	2300      	movs	r3, #0

  while(Value >= 10)
 8001ea2:	2809      	cmp	r0, #9
 8001ea4:	d803      	bhi.n	8001eae <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8001ea6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001eaa:	b2c0      	uxtb	r0, r0
 8001eac:	4770      	bx	lr
    Value -= 10;
 8001eae:	380a      	subs	r0, #10
    bcdhigh++;
 8001eb0:	3301      	adds	r3, #1
    Value -= 10;
 8001eb2:	b2c0      	uxtb	r0, r0
 8001eb4:	e7f5      	b.n	8001ea2 <RTC_ByteToBcd2+0x2>

08001eb6 <HAL_RTC_SetTime>:
{
 8001eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001eb8:	7f03      	ldrb	r3, [r0, #28]
{
 8001eba:	4606      	mov	r6, r0
 8001ebc:	460f      	mov	r7, r1
 8001ebe:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d02f      	beq.n	8001f24 <HAL_RTC_SetTime+0x6e>
 8001ec4:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ec6:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 8001ec8:	7703      	strb	r3, [r0, #28]
 8001eca:	6803      	ldr	r3, [r0, #0]
 8001ecc:	784d      	ldrb	r5, [r1, #1]
 8001ece:	7808      	ldrb	r0, [r1, #0]
 8001ed0:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ed2:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001ed4:	bb42      	cbnz	r2, 8001f28 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ed6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8001eda:	bf08      	it	eq
 8001edc:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001ede:	f7ff ffdf 	bl	8001ea0 <RTC_ByteToBcd2>
 8001ee2:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f7ff ffdb 	bl	8001ea0 <RTC_ByteToBcd2>
 8001eea:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff ffd7 	bl	8001ea0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 8001ef2:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001ef4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ef8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001efc:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f00:	6833      	ldr	r3, [r6, #0]
 8001f02:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f04:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
 8001f08:	2253      	movs	r2, #83	; 0x53
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f0c:	f7ff ff6c 	bl	8001de8 <RTC_EnterInitMode>
 8001f10:	6833      	ldr	r3, [r6, #0]
 8001f12:	4605      	mov	r5, r0
 8001f14:	b1a0      	cbz	r0, 8001f40 <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001f22:	2501      	movs	r5, #1
}
 8001f24:	4628      	mov	r0, r5
 8001f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 8001f28:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f2a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8001f2e:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 8001f32:	bf08      	it	eq
 8001f34:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8001f36:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 8001f38:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8001f3a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001f3e:	e7df      	b.n	8001f00 <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f40:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f44:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f46:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001f4a:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f52:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	4302      	orrs	r2, r0
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f64:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	069b      	lsls	r3, r3, #26
 8001f6a:	d40a      	bmi.n	8001f82 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7ff ff23 	bl	8001db8 <HAL_RTC_WaitForSynchro>
 8001f72:	b130      	cbz	r0, 8001f82 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f74:	6833      	ldr	r3, [r6, #0]
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f7a:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8001f7c:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f7e:	7773      	strb	r3, [r6, #29]
 8001f80:	e7cf      	b.n	8001f22 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f82:	6833      	ldr	r3, [r6, #0]
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001f90:	e7c8      	b.n	8001f24 <HAL_RTC_SetTime+0x6e>

08001f92 <HAL_RTC_SetDate>:
{
 8001f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001f94:	7f03      	ldrb	r3, [r0, #28]
{
 8001f96:	4605      	mov	r5, r0
 8001f98:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d030      	beq.n	8002000 <HAL_RTC_SetDate+0x6e>
 8001f9e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa0:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8001fa2:	7703      	strb	r3, [r0, #28]
 8001fa4:	784b      	ldrb	r3, [r1, #1]
 8001fa6:	78c8      	ldrb	r0, [r1, #3]
 8001fa8:	788e      	ldrb	r6, [r1, #2]
 8001faa:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d148      	bne.n	8002042 <HAL_RTC_SetDate+0xb0>
 8001fb0:	06da      	lsls	r2, r3, #27
 8001fb2:	d503      	bpl.n	8001fbc <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001fb4:	f023 0310 	bic.w	r3, r3, #16
 8001fb8:	330a      	adds	r3, #10
 8001fba:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001fbc:	f7ff ff70 	bl	8001ea0 <RTC_ByteToBcd2>
 8001fc0:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8001fc2:	7848      	ldrb	r0, [r1, #1]
 8001fc4:	f7ff ff6c 	bl	8001ea0 <RTC_ByteToBcd2>
 8001fc8:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f7ff ff68 	bl	8001ea0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001fd0:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001fd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001fd8:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fe0:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fe4:	2253      	movs	r2, #83	; 0x53
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fe8:	f7ff fefe 	bl	8001de8 <RTC_EnterInitMode>
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	4606      	mov	r6, r0
 8001ff0:	b140      	cbz	r0, 8002004 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8001ffe:	2601      	movs	r6, #1
}
 8002000:	4630      	mov	r0, r6
 8002002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002004:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002008:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800200c:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002014:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	069b      	lsls	r3, r3, #26
 800201a:	d40a      	bmi.n	8002032 <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff fecb 	bl	8001db8 <HAL_RTC_WaitForSynchro>
 8002022:	b130      	cbz	r0, 8002032 <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800202a:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 800202c:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800202e:	776b      	strb	r3, [r5, #29]
 8002030:	e7e5      	b.n	8001ffe <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002032:	682b      	ldr	r3, [r5, #0]
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002038:	2301      	movs	r3, #1
 800203a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800203c:	2300      	movs	r3, #0
 800203e:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8002040:	e7de      	b.n	8002000 <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 8002042:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002044:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002048:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800204a:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800204e:	e7c5      	b.n	8001fdc <HAL_RTC_SetDate+0x4a>

08002050 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002050:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002052:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800205a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800205e:	b2c0      	uxtb	r0, r0
 8002060:	4770      	bx	lr

08002062 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002062:	6803      	ldr	r3, [r0, #0]
 8002064:	6a98      	ldr	r0, [r3, #40]	; 0x28
{
 8002066:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002068:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800206a:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800206c:	681d      	ldr	r5, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800206e:	f3c0 000e 	ubfx	r0, r0, #0, #15
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002072:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002076:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800207a:	6088      	str	r0, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800207c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002080:	708d      	strb	r5, [r1, #2]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002082:	0c1e      	lsrs	r6, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002084:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002088:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800208c:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002090:	704c      	strb	r4, [r1, #1]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002092:	7008      	strb	r0, [r1, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002094:	730e      	strb	r6, [r1, #12]
  if(Format == RTC_FORMAT_BIN)
 8002096:	b952      	cbnz	r2, 80020ae <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002098:	f7ff ffda 	bl	8002050 <RTC_Bcd2ToByte>
 800209c:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff ffd6 	bl	8002050 <RTC_Bcd2ToByte>
 80020a4:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7ff ffd2 	bl	8002050 <RTC_Bcd2ToByte>
 80020ac:	7088      	strb	r0, [r1, #2]
}
 80020ae:	2000      	movs	r0, #0
 80020b0:	bd70      	pop	{r4, r5, r6, pc}

080020b2 <HAL_RTC_GetDate>:
{
 80020b2:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80020b4:	6803      	ldr	r3, [r0, #0]
 80020b6:	685c      	ldr	r4, [r3, #4]
 80020b8:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020bc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80020c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80020c4:	708c      	strb	r4, [r1, #2]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80020c6:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80020c8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80020cc:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80020d0:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80020d2:	704d      	strb	r5, [r1, #1]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80020d4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80020d6:	b952      	cbnz	r2, 80020ee <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80020d8:	f7ff ffba 	bl	8002050 <RTC_Bcd2ToByte>
 80020dc:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff ffb6 	bl	8002050 <RTC_Bcd2ToByte>
 80020e4:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff ffb2 	bl	8002050 <RTC_Bcd2ToByte>
 80020ec:	7088      	strb	r0, [r1, #2]
}
 80020ee:	2000      	movs	r0, #0
 80020f0:	bd38      	pop	{r3, r4, r5, pc}

080020f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f4:	4604      	mov	r4, r0
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d04e      	beq.n	8002198 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020fe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002106:	b91b      	cbnz	r3, 8002110 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002108:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210c:	f00c fae2 	bl	800e6d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002110:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002112:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002114:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002116:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800211a:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800211c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002124:	600b      	str	r3, [r1, #0]
 8002126:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800212a:	d932      	bls.n	8002192 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800212c:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800212e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002132:	bf18      	it	ne
 8002134:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002136:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002138:	b92b      	cbnz	r3, 8002146 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800213a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800213e:	bf8c      	ite	hi
 8002140:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002142:	2301      	movls	r3, #1
 8002144:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002146:	68a6      	ldr	r6, [r4, #8]
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	69a5      	ldr	r5, [r4, #24]
 800214c:	4333      	orrs	r3, r6
 800214e:	6926      	ldr	r6, [r4, #16]
 8002150:	4333      	orrs	r3, r6
 8002152:	6966      	ldr	r6, [r4, #20]
 8002154:	4333      	orrs	r3, r6
 8002156:	69e6      	ldr	r6, [r4, #28]
 8002158:	4333      	orrs	r3, r6
 800215a:	6a26      	ldr	r6, [r4, #32]
 800215c:	4333      	orrs	r3, r6
 800215e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002160:	4333      	orrs	r3, r6
 8002162:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002166:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002168:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800216a:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800216e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002176:	431a      	orrs	r2, r3
 8002178:	432a      	orrs	r2, r5
 800217a:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800217c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800217e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002180:	69cb      	ldr	r3, [r1, #28]
 8002182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002186:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002188:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800218c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002190:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002192:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002196:	e7cc      	b.n	8002132 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002198:	2001      	movs	r0, #1
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}

0800219c <HAL_TIM_Base_MspInit>:
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	6803      	ldr	r3, [r0, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_TIM_Base_Start_IT+0x28>)
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	2a06      	cmp	r2, #6
 80021b2:	d006      	beq.n	80021c2 <HAL_TIM_Base_Start_IT+0x22>
 80021b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80021c2:	2000      	movs	r0, #0
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	00010007 	.word	0x00010007

080021cc <HAL_TIM_OC_DelayElapsedCallback>:
 80021cc:	4770      	bx	lr

080021ce <HAL_TIM_IC_CaptureCallback>:
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80021d0:	4770      	bx	lr

080021d2 <HAL_TIM_TriggerCallback>:
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d4:	6803      	ldr	r3, [r0, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	0791      	lsls	r1, r2, #30
{
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021de:	d50f      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	0792      	lsls	r2, r2, #30
 80021e4:	d50c      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021e6:	f06f 0202 	mvn.w	r2, #2
 80021ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ec:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ee:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f2:	0799      	lsls	r1, r3, #30
 80021f4:	f000 8085 	beq.w	8002302 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021f8:	f7ff ffe9 	bl	80021ce <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fc:	2300      	movs	r3, #0
 80021fe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	0752      	lsls	r2, r2, #29
 8002206:	d510      	bpl.n	800222a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	0750      	lsls	r0, r2, #29
 800220c:	d50d      	bpl.n	800222a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800220e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002216:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002218:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002220:	d075      	beq.n	800230e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	f7ff ffd4 	bl	80021ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	2300      	movs	r3, #0
 8002228:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	0711      	lsls	r1, r2, #28
 8002230:	d50f      	bpl.n	8002252 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	0712      	lsls	r2, r2, #28
 8002236:	d50c      	bpl.n	8002252 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002238:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800223e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002240:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002242:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002244:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002246:	079b      	lsls	r3, r3, #30
 8002248:	d067      	beq.n	800231a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	f7ff ffc0 	bl	80021ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	2300      	movs	r3, #0
 8002250:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	06d0      	lsls	r0, r2, #27
 8002258:	d510      	bpl.n	800227c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	06d1      	lsls	r1, r2, #27
 800225e:	d50d      	bpl.n	800227c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002260:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002264:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002268:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002272:	d058      	beq.n	8002326 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002274:	f7ff ffab 	bl	80021ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002278:	2300      	movs	r3, #0
 800227a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	07d2      	lsls	r2, r2, #31
 8002282:	d508      	bpl.n	8002296 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	07d0      	lsls	r0, r2, #31
 8002288:	d505      	bpl.n	8002296 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800228a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002290:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002292:	f00c f9e9 	bl	800e668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	0611      	lsls	r1, r2, #24
 800229c:	d508      	bpl.n	80022b0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	0612      	lsls	r2, r2, #24
 80022a2:	d505      	bpl.n	80022b0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022ac:	f000 f8c3 	bl	8002436 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	05d0      	lsls	r0, r2, #23
 80022b6:	d508      	bpl.n	80022ca <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	0611      	lsls	r1, r2, #24
 80022bc:	d505      	bpl.n	80022ca <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022be:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80022c6:	f000 f8b7 	bl	8002438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	0652      	lsls	r2, r2, #25
 80022d0:	d508      	bpl.n	80022e4 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	0650      	lsls	r0, r2, #25
 80022d6:	d505      	bpl.n	80022e4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022e0:	f7ff ff77 	bl	80021d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	0691      	lsls	r1, r2, #26
 80022ea:	d522      	bpl.n	8002332 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	0692      	lsls	r2, r2, #26
 80022f0:	d51f      	bpl.n	8002332 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80022fe:	f000 b899 	b.w	8002434 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	f7ff ff63 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff ff62 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
 800230c:	e776      	b.n	80021fc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	f7ff ff5d 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff ff5c 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002318:	e785      	b.n	8002226 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	f7ff ff57 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff ff56 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002324:	e793      	b.n	800224e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	f7ff ff51 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff ff50 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002330:	e7a2      	b.n	8002278 <HAL_TIM_IRQHandler+0xa4>
 8002332:	bd10      	pop	{r4, pc}

08002334 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002334:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002336:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	4290      	cmp	r0, r2
 800233a:	d012      	beq.n	8002362 <TIM_Base_SetConfig+0x2e>
 800233c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002340:	d00f      	beq.n	8002362 <TIM_Base_SetConfig+0x2e>
 8002342:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002346:	4290      	cmp	r0, r2
 8002348:	d00b      	beq.n	8002362 <TIM_Base_SetConfig+0x2e>
 800234a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800234e:	4290      	cmp	r0, r2
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0x2e>
 8002352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002356:	4290      	cmp	r0, r2
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0x2e>
 800235a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800235e:	4290      	cmp	r0, r2
 8002360:	d119      	bne.n	8002396 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002362:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002368:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <TIM_Base_SetConfig+0xc4>)
 800236c:	4290      	cmp	r0, r2
 800236e:	d029      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 8002370:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002374:	d026      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 8002376:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800237a:	4290      	cmp	r0, r2
 800237c:	d022      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 800237e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002382:	4290      	cmp	r0, r2
 8002384:	d01e      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 8002386:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800238a:	4290      	cmp	r0, r2
 800238c:	d01a      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 800238e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002392:	4290      	cmp	r0, r2
 8002394:	d016      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 8002396:	4a19      	ldr	r2, [pc, #100]	; (80023fc <TIM_Base_SetConfig+0xc8>)
 8002398:	4290      	cmp	r0, r2
 800239a:	d013      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 800239c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d00f      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 80023a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a8:	4290      	cmp	r0, r2
 80023aa:	d00b      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 80023ac:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023b0:	4290      	cmp	r0, r2
 80023b2:	d007      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 80023b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b8:	4290      	cmp	r0, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0x90>
 80023bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c0:	4290      	cmp	r0, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c8:	68ca      	ldr	r2, [r1, #12]
 80023ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	694a      	ldr	r2, [r1, #20]
 80023ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80023d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d6:	688b      	ldr	r3, [r1, #8]
 80023d8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023da:	680b      	ldr	r3, [r1, #0]
 80023dc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <TIM_Base_SetConfig+0xc4>)
 80023e0:	4298      	cmp	r0, r3
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0xb8>
 80023e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e8:	4298      	cmp	r0, r3
 80023ea:	d101      	bne.n	80023f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	690b      	ldr	r3, [r1, #16]
 80023ee:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	2301      	movs	r3, #1
 80023f2:	6143      	str	r3, [r0, #20]
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40014000 	.word	0x40014000

08002400 <HAL_TIM_Base_Init>:
{
 8002400:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002402:	4604      	mov	r4, r0
 8002404:	b1a0      	cbz	r0, 8002430 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800240a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800240e:	b91b      	cbnz	r3, 8002418 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002414:	f7ff fec2 	bl	800219c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800241e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002422:	f7ff ff87 	bl	8002334 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002426:	2301      	movs	r3, #1
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800242a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800242e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd10      	pop	{r4, pc}

08002434 <HAL_TIMEx_CommutCallback>:
 8002434:	4770      	bx	lr

08002436 <HAL_TIMEx_BreakCallback>:
 8002436:	4770      	bx	lr

08002438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002438:	4770      	bx	lr
	...

0800243c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243e:	69c2      	ldr	r2, [r0, #28]
{
 8002440:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002442:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002444:	6881      	ldr	r1, [r0, #8]
 8002446:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002448:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800244a:	4301      	orrs	r1, r0
 800244c:	6960      	ldr	r0, [r4, #20]
 800244e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002450:	4890      	ldr	r0, [pc, #576]	; (8002694 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002452:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002454:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002456:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002458:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800245a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800245c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002464:	4301      	orrs	r1, r0
 8002466:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002468:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246a:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800246c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246e:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8002472:	4301      	orrs	r1, r0
 8002474:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002476:	4988      	ldr	r1, [pc, #544]	; (8002698 <UART_SetConfig+0x25c>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d117      	bne.n	80024ac <UART_SetConfig+0x70>
 800247c:	4b87      	ldr	r3, [pc, #540]	; (800269c <UART_SetConfig+0x260>)
 800247e:	4988      	ldr	r1, [pc, #544]	; (80026a0 <UART_SetConfig+0x264>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002488:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	d129      	bne.n	80024e4 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8002490:	2b08      	cmp	r3, #8
 8002492:	f200 809d 	bhi.w	80025d0 <UART_SetConfig+0x194>
 8002496:	e8df f013 	tbh	[pc, r3, lsl #1]
 800249a:	008c      	.short	0x008c
 800249c:	00ee00e8 	.word	0x00ee00e8
 80024a0:	00fa009b 	.word	0x00fa009b
 80024a4:	009b009b 	.word	0x009b009b
 80024a8:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ac:	497d      	ldr	r1, [pc, #500]	; (80026a4 <UART_SetConfig+0x268>)
 80024ae:	428b      	cmp	r3, r1
 80024b0:	d106      	bne.n	80024c0 <UART_SetConfig+0x84>
 80024b2:	4b7a      	ldr	r3, [pc, #488]	; (800269c <UART_SetConfig+0x260>)
 80024b4:	497c      	ldr	r1, [pc, #496]	; (80026a8 <UART_SetConfig+0x26c>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	e7e3      	b.n	8002488 <UART_SetConfig+0x4c>
 80024c0:	497a      	ldr	r1, [pc, #488]	; (80026ac <UART_SetConfig+0x270>)
 80024c2:	428b      	cmp	r3, r1
 80024c4:	d11d      	bne.n	8002502 <UART_SetConfig+0xc6>
 80024c6:	4b75      	ldr	r3, [pc, #468]	; (800269c <UART_SetConfig+0x260>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	f000 80d9 	beq.w	8002688 <UART_SetConfig+0x24c>
 80024d6:	d80e      	bhi.n	80024f6 <UART_SetConfig+0xba>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d067      	beq.n	80025ac <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024e0:	d076      	beq.n	80025d0 <UART_SetConfig+0x194>
 80024e2:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d873      	bhi.n	80025d0 <UART_SetConfig+0x194>
 80024e8:	e8df f003 	tbb	[pc, r3]
 80024ec:	72a29f99 	.word	0x72a29f99
 80024f0:	727272b4 	.word	0x727272b4
 80024f4:	b7          	.byte	0xb7
 80024f5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f000 80ba 	beq.w	8002670 <UART_SetConfig+0x234>
 80024fc:	2b30      	cmp	r3, #48	; 0x30
 80024fe:	d03f      	beq.n	8002580 <UART_SetConfig+0x144>
 8002500:	e7ec      	b.n	80024dc <UART_SetConfig+0xa0>
 8002502:	496b      	ldr	r1, [pc, #428]	; (80026b0 <UART_SetConfig+0x274>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d10d      	bne.n	8002524 <UART_SetConfig+0xe8>
 8002508:	4b64      	ldr	r3, [pc, #400]	; (800269c <UART_SetConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	f000 80b8 	beq.w	8002688 <UART_SetConfig+0x24c>
 8002518:	d9de      	bls.n	80024d8 <UART_SetConfig+0x9c>
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	f000 80a8 	beq.w	8002670 <UART_SetConfig+0x234>
 8002520:	2bc0      	cmp	r3, #192	; 0xc0
 8002522:	e7ec      	b.n	80024fe <UART_SetConfig+0xc2>
 8002524:	4963      	ldr	r1, [pc, #396]	; (80026b4 <UART_SetConfig+0x278>)
 8002526:	428b      	cmp	r3, r1
 8002528:	d110      	bne.n	800254c <UART_SetConfig+0x110>
 800252a:	4b5c      	ldr	r3, [pc, #368]	; (800269c <UART_SetConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	f000 80a6 	beq.w	8002688 <UART_SetConfig+0x24c>
 800253c:	d9cc      	bls.n	80024d8 <UART_SetConfig+0x9c>
 800253e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002542:	f000 8095 	beq.w	8002670 <UART_SetConfig+0x234>
 8002546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800254a:	e7d8      	b.n	80024fe <UART_SetConfig+0xc2>
 800254c:	495a      	ldr	r1, [pc, #360]	; (80026b8 <UART_SetConfig+0x27c>)
 800254e:	428b      	cmp	r3, r1
 8002550:	d11e      	bne.n	8002590 <UART_SetConfig+0x154>
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <UART_SetConfig+0x260>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	f000 8092 	beq.w	8002688 <UART_SetConfig+0x24c>
 8002564:	d806      	bhi.n	8002574 <UART_SetConfig+0x138>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d07c      	beq.n	8002664 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800256e:	d12f      	bne.n	80025d0 <UART_SetConfig+0x194>
 8002570:	2310      	movs	r3, #16
 8002572:	e78d      	b.n	8002490 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002578:	d07a      	beq.n	8002670 <UART_SetConfig+0x234>
 800257a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800257e:	d1f4      	bne.n	800256a <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002580:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002584:	d169      	bne.n	800265a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002586:	6863      	ldr	r3, [r4, #4]
 8002588:	0858      	lsrs	r0, r3, #1
 800258a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800258e:	e078      	b.n	8002682 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002590:	494a      	ldr	r1, [pc, #296]	; (80026bc <UART_SetConfig+0x280>)
 8002592:	428b      	cmp	r3, r1
 8002594:	d124      	bne.n	80025e0 <UART_SetConfig+0x1a4>
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <UART_SetConfig+0x260>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d070      	beq.n	8002688 <UART_SetConfig+0x24c>
 80025a6:	d815      	bhi.n	80025d4 <UART_SetConfig+0x198>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1de      	bne.n	800256a <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025b0:	d135      	bne.n	800261e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b2:	f7ff f915 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b6:	6862      	ldr	r2, [r4, #4]
 80025b8:	0853      	lsrs	r3, r2, #1
 80025ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80025be:	fbb0 f0f2 	udiv	r0, r0, r2
 80025c2:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025c4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80025c8:	f1a0 0210 	sub.w	r2, r0, #16
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d91a      	bls.n	8002606 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
 80025d2:	e020      	b.n	8002616 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d04a      	beq.n	8002670 <UART_SetConfig+0x234>
 80025da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025de:	e7ce      	b.n	800257e <UART_SetConfig+0x142>
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <UART_SetConfig+0x284>)
 80025e2:	428b      	cmp	r3, r1
 80025e4:	d1f4      	bne.n	80025d0 <UART_SetConfig+0x194>
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <UART_SetConfig+0x260>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f4:	d048      	beq.n	8002688 <UART_SetConfig+0x24c>
 80025f6:	f67f af6f 	bls.w	80024d8 <UART_SetConfig+0x9c>
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fe:	d037      	beq.n	8002670 <UART_SetConfig+0x234>
 8002600:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002604:	e77b      	b.n	80024fe <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002606:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800260a:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	4318      	orrs	r0, r3
 8002612:	60d0      	str	r0, [r2, #12]
 8002614:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800261a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800261c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800261e:	f7ff f8df 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002628:	e008      	b.n	800263c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 800262a:	f7ff f8e9 	bl	8001800 <HAL_RCC_GetPCLK2Freq>
 800262e:	e7f8      	b.n	8002622 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002630:	6863      	ldr	r3, [r4, #4]
 8002632:	0858      	lsrs	r0, r3, #1
 8002634:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002638:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800263c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002640:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002642:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002646:	f1a0 0210 	sub.w	r2, r0, #16
 800264a:	429a      	cmp	r2, r3
 800264c:	d8c0      	bhi.n	80025d0 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	60d8      	str	r0, [r3, #12]
 8002652:	e7df      	b.n	8002614 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002654:	f7fe fff0 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 8002658:	e7e3      	b.n	8002622 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	0858      	lsrs	r0, r3, #1
 800265e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002662:	e7eb      	b.n	800263c <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002664:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002668:	d1df      	bne.n	800262a <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 800266a:	f7ff f8c9 	bl	8001800 <HAL_RCC_GetPCLK2Freq>
 800266e:	e7a2      	b.n	80025b6 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002670:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002674:	d1dc      	bne.n	8002630 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002676:	6863      	ldr	r3, [r4, #4]
 8002678:	0858      	lsrs	r0, r3, #1
 800267a:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800267e:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002682:	fbb0 f0f3 	udiv	r0, r0, r3
 8002686:	e79c      	b.n	80025c2 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002688:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800268c:	d1e2      	bne.n	8002654 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 800268e:	f7fe ffd3 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 8002692:	e790      	b.n	80025b6 <UART_SetConfig+0x17a>
 8002694:	efff69f3 	.word	0xefff69f3
 8002698:	40011000 	.word	0x40011000
 800269c:	40023800 	.word	0x40023800
 80026a0:	0800ff30 	.word	0x0800ff30
 80026a4:	40004400 	.word	0x40004400
 80026a8:	0800ff34 	.word	0x0800ff34
 80026ac:	40004800 	.word	0x40004800
 80026b0:	40004c00 	.word	0x40004c00
 80026b4:	40005000 	.word	0x40005000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	40007800 	.word	0x40007800
 80026c0:	40007c00 	.word	0x40007c00

080026c4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026c6:	07da      	lsls	r2, r3, #31
{
 80026c8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026ca:	d506      	bpl.n	80026da <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026cc:	6801      	ldr	r1, [r0, #0]
 80026ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80026d6:	4322      	orrs	r2, r4
 80026d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026da:	079c      	lsls	r4, r3, #30
 80026dc:	d506      	bpl.n	80026ec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026de:	6801      	ldr	r1, [r0, #0]
 80026e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80026e2:	684a      	ldr	r2, [r1, #4]
 80026e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026e8:	4322      	orrs	r2, r4
 80026ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	d506      	bpl.n	80026fe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026f0:	6801      	ldr	r1, [r0, #0]
 80026f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80026f4:	684a      	ldr	r2, [r1, #4]
 80026f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026fa:	4322      	orrs	r2, r4
 80026fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026fe:	071a      	lsls	r2, r3, #28
 8002700:	d506      	bpl.n	8002710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002702:	6801      	ldr	r1, [r0, #0]
 8002704:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002706:	684a      	ldr	r2, [r1, #4]
 8002708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270c:	4322      	orrs	r2, r4
 800270e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002710:	06dc      	lsls	r4, r3, #27
 8002712:	d506      	bpl.n	8002722 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002714:	6801      	ldr	r1, [r0, #0]
 8002716:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002718:	688a      	ldr	r2, [r1, #8]
 800271a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800271e:	4322      	orrs	r2, r4
 8002720:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002722:	0699      	lsls	r1, r3, #26
 8002724:	d506      	bpl.n	8002734 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002726:	6801      	ldr	r1, [r0, #0]
 8002728:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800272a:	688a      	ldr	r2, [r1, #8]
 800272c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002730:	4322      	orrs	r2, r4
 8002732:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002734:	065a      	lsls	r2, r3, #25
 8002736:	d510      	bpl.n	800275a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002738:	6801      	ldr	r1, [r0, #0]
 800273a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800273c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800273e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002742:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002746:	ea42 0204 	orr.w	r2, r2, r4
 800274a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800274c:	d105      	bne.n	800275a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800274e:	684a      	ldr	r2, [r1, #4]
 8002750:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002752:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002756:	4322      	orrs	r2, r4
 8002758:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	d506      	bpl.n	800276c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800275e:	6802      	ldr	r2, [r0, #0]
 8002760:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002762:	6853      	ldr	r3, [r2, #4]
 8002764:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002768:	430b      	orrs	r3, r1
 800276a:	6053      	str	r3, [r2, #4]
 800276c:	bd10      	pop	{r4, pc}

0800276e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800276e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002772:	9d06      	ldr	r5, [sp, #24]
 8002774:	4604      	mov	r4, r0
 8002776:	460f      	mov	r7, r1
 8002778:	4616      	mov	r6, r2
 800277a:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277c:	6821      	ldr	r1, [r4, #0]
 800277e:	69ca      	ldr	r2, [r1, #28]
 8002780:	ea37 0302 	bics.w	r3, r7, r2
 8002784:	bf0c      	ite	eq
 8002786:	2201      	moveq	r2, #1
 8002788:	2200      	movne	r2, #0
 800278a:	42b2      	cmp	r2, r6
 800278c:	d002      	beq.n	8002794 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002794:	1c68      	adds	r0, r5, #1
 8002796:	d0f2      	beq.n	800277e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002798:	f7fd ff4a 	bl	8000630 <HAL_GetTick>
 800279c:	eba0 0008 	sub.w	r0, r0, r8
 80027a0:	4285      	cmp	r5, r0
 80027a2:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a4:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	d300      	bcc.n	80027aa <UART_WaitOnFlagUntilTimeout+0x3c>
 80027a8:	b97d      	cbnz	r5, 80027ca <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027ae:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	6883      	ldr	r3, [r0, #8]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80027b8:	2320      	movs	r3, #32
 80027ba:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80027bc:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80027be:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80027c2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80027c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027ca:	075a      	lsls	r2, r3, #29
 80027cc:	d5d6      	bpl.n	800277c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027ce:	69c3      	ldr	r3, [r0, #28]
 80027d0:	051b      	lsls	r3, r3, #20
 80027d2:	d5d3      	bpl.n	800277c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027da:	6803      	ldr	r3, [r0, #0]
 80027dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027e0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	6883      	ldr	r3, [r0, #8]
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80027ea:	2320      	movs	r3, #32
 80027ec:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80027ee:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027f0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80027f2:	e7e4      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x50>

080027f4 <HAL_UART_Transmit>:
{
 80027f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027f8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027fa:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80027fc:	4604      	mov	r4, r0
 80027fe:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	2b20      	cmp	r3, #32
{
 8002802:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	d14c      	bne.n	80028a0 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8002806:	2900      	cmp	r1, #0
 8002808:	d048      	beq.n	800289c <HAL_UART_Transmit+0xa8>
 800280a:	2a00      	cmp	r2, #0
 800280c:	d046      	beq.n	800289c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800280e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002812:	2b01      	cmp	r3, #1
 8002814:	d044      	beq.n	80028a0 <HAL_UART_Transmit+0xac>
 8002816:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800281a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002820:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002824:	f7fd ff04 	bl	8000630 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800282a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800282c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002834:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	d103      	bne.n	8002842 <HAL_UART_Transmit+0x4e>
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	b90b      	cbnz	r3, 8002842 <HAL_UART_Transmit+0x4e>
 800283e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002840:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8002842:	2300      	movs	r3, #0
 8002844:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8002848:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002852:	b292      	uxth	r2, r2
 8002854:	b93a      	cbnz	r2, 8002866 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff ff88 	bl	800276e <UART_WaitOnFlagUntilTimeout>
 800285e:	b940      	cbnz	r0, 8002872 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002860:	2320      	movs	r3, #32
 8002862:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002864:	e006      	b.n	8002874 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	2200      	movs	r2, #0
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff7f 	bl	800276e <UART_WaitOnFlagUntilTimeout>
 8002870:	b118      	cbz	r0, 800287a <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8002872:	2003      	movs	r0, #3
}
 8002874:	b003      	add	sp, #12
 8002876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800287a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800287c:	b95e      	cbnz	r6, 8002896 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002886:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002888:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800288c:	3b01      	subs	r3, #1
 800288e:	b29b      	uxth	r3, r3
 8002890:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002894:	e7d8      	b.n	8002848 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002896:	f816 3b01 	ldrb.w	r3, [r6], #1
 800289a:	e7f4      	b.n	8002886 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	e7e9      	b.n	8002874 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80028a0:	2002      	movs	r0, #2
 80028a2:	e7e7      	b.n	8002874 <HAL_UART_Transmit+0x80>

080028a4 <HAL_UART_Receive>:
{
 80028a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80028a8:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80028aa:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80028ac:	4604      	mov	r4, r0
 80028ae:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b0:	2b20      	cmp	r3, #32
{
 80028b2:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b4:	d164      	bne.n	8002980 <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 80028b6:	2900      	cmp	r1, #0
 80028b8:	d060      	beq.n	800297c <HAL_UART_Receive+0xd8>
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d05e      	beq.n	800297c <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 80028be:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d05c      	beq.n	8002980 <HAL_UART_Receive+0xdc>
 80028c6:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c8:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80028ca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ce:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028d2:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80028d4:	f7fd feac 	bl	8000630 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80028d8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80028da:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80028dc:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80028e4:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80028e8:	d11c      	bne.n	8002924 <HAL_UART_Receive+0x80>
 80028ea:	6922      	ldr	r2, [r4, #16]
 80028ec:	b9c2      	cbnz	r2, 8002920 <HAL_UART_Receive+0x7c>
 80028ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 80028fa:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fe:	d122      	bne.n	8002946 <HAL_UART_Receive+0xa2>
 8002900:	6923      	ldr	r3, [r4, #16]
 8002902:	bb03      	cbnz	r3, 8002946 <HAL_UART_Receive+0xa2>
 8002904:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8002906:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8002908:	2300      	movs	r3, #0
 800290a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 800290e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002912:	b280      	uxth	r0, r0
 8002914:	b9c8      	cbnz	r0, 800294a <HAL_UART_Receive+0xa6>
    huart->RxState = HAL_UART_STATE_READY;
 8002916:	2320      	movs	r3, #32
 8002918:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800291a:	b003      	add	sp, #12
 800291c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	e7e6      	b.n	80028f2 <HAL_UART_Receive+0x4e>
 8002924:	b923      	cbnz	r3, 8002930 <HAL_UART_Receive+0x8c>
 8002926:	6922      	ldr	r2, [r4, #16]
 8002928:	2a00      	cmp	r2, #0
 800292a:	d0f9      	beq.n	8002920 <HAL_UART_Receive+0x7c>
 800292c:	227f      	movs	r2, #127	; 0x7f
 800292e:	e7e0      	b.n	80028f2 <HAL_UART_Receive+0x4e>
 8002930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002934:	d104      	bne.n	8002940 <HAL_UART_Receive+0x9c>
 8002936:	6922      	ldr	r2, [r4, #16]
 8002938:	2a00      	cmp	r2, #0
 800293a:	d0f7      	beq.n	800292c <HAL_UART_Receive+0x88>
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	e7d8      	b.n	80028f2 <HAL_UART_Receive+0x4e>
 8002940:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8002944:	e7d7      	b.n	80028f6 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 8002946:	2600      	movs	r6, #0
 8002948:	e7de      	b.n	8002908 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	f8cd 9000 	str.w	r9, [sp]
 800294e:	4643      	mov	r3, r8
 8002950:	2200      	movs	r2, #0
 8002952:	2120      	movs	r1, #32
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff ff0a 	bl	800276e <UART_WaitOnFlagUntilTimeout>
 800295a:	b998      	cbnz	r0, 8002984 <HAL_UART_Receive+0xe0>
 800295c:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8002962:	b945      	cbnz	r5, 8002976 <HAL_UART_Receive+0xd2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002964:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8002968:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8002974:	e7cb      	b.n	800290e <HAL_UART_Receive+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002976:	f805 3b01 	strb.w	r3, [r5], #1
 800297a:	e7f5      	b.n	8002968 <HAL_UART_Receive+0xc4>
      return  HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e7cc      	b.n	800291a <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8002980:	2002      	movs	r0, #2
 8002982:	e7ca      	b.n	800291a <HAL_UART_Receive+0x76>
        return HAL_TIMEOUT;
 8002984:	2003      	movs	r0, #3
 8002986:	e7c8      	b.n	800291a <HAL_UART_Receive+0x76>

08002988 <UART_CheckIdleState>:
{
 8002988:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	2600      	movs	r6, #0
{
 800298c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002990:	f7fd fe4e 	bl	8000630 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002994:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002996:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	071a      	lsls	r2, r3, #28
 800299c:	d415      	bmi.n	80029ca <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	075b      	lsls	r3, r3, #29
 80029a4:	d50a      	bpl.n	80029bc <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029b0:	4620      	mov	r0, r4
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	462b      	mov	r3, r5
 80029b6:	f7ff feda 	bl	800276e <UART_WaitOnFlagUntilTimeout>
 80029ba:	b990      	cbnz	r0, 80029e2 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80029be:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029c0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80029c2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80029c6:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80029c8:	e00c      	b.n	80029e4 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ce:	4632      	mov	r2, r6
 80029d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4603      	mov	r3, r0
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fec8 	bl	800276e <UART_WaitOnFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d0dd      	beq.n	800299e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80029e2:	2003      	movs	r0, #3
}
 80029e4:	b002      	add	sp, #8
 80029e6:	bd70      	pop	{r4, r5, r6, pc}

080029e8 <HAL_UART_Init>:
{
 80029e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029ea:	4604      	mov	r4, r0
 80029ec:	b340      	cbz	r0, 8002a40 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80029f0:	b91b      	cbnz	r3, 80029fa <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80029f2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80029f6:	f00b feb7 	bl	800e768 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029fe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002a00:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a0a:	f7ff fd17 	bl	800243c <UART_SetConfig>
 8002a0e:	2801      	cmp	r0, #1
 8002a10:	d016      	beq.n	8002a40 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a14:	b113      	cbz	r3, 8002a1c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff fe54 	bl	80026c4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002a1e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
}
 8002a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002a3a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002a3c:	f7ff bfa4 	b.w	8002988 <UART_CheckIdleState>
}
 8002a40:	2001      	movs	r0, #1
 8002a42:	bd10      	pop	{r4, pc}

08002a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002a46:	3b01      	subs	r3, #1
 8002a48:	d101      	bne.n	8002a4e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a4e:	6902      	ldr	r2, [r0, #16]
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	daf8      	bge.n	8002a46 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a54:	6903      	ldr	r3, [r0, #16]
 8002a56:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <USB_CoreReset+0x2c>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	d0f3      	beq.n	8002a4a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a62:	6903      	ldr	r3, [r0, #16]
 8002a64:	f013 0301 	ands.w	r3, r3, #1
 8002a68:	d1f9      	bne.n	8002a5e <USB_CoreReset+0x1a>

  return HAL_OK;
 8002a6a:	4618      	mov	r0, r3
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	00030d41 	.word	0x00030d41

08002a74 <USB_CoreInit>:
{
 8002a74:	b084      	sub	sp, #16
 8002a76:	b538      	push	{r3, r4, r5, lr}
 8002a78:	ad05      	add	r5, sp, #20
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d126      	bne.n	8002ad4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a86:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a8e:	68c3      	ldr	r3, [r0, #12]
 8002a90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a98:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a9a:	68c3      	ldr	r3, [r0, #12]
 8002a9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002aa0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d103      	bne.n	8002ab0 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002aa8:	68c3      	ldr	r3, [r0, #12]
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff ffc7 	bl	8002a44 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002ab6:	9b08      	ldr	r3, [sp, #32]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	f043 0306 	orr.w	r3, r3, #6
 8002ac2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ac4:	68a3      	ldr	r3, [r4, #8]
 8002ac6:	f043 0320 	orr.w	r3, r3, #32
 8002aca:	60a3      	str	r3, [r4, #8]
}
 8002acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ad0:	b004      	add	sp, #16
 8002ad2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ad4:	68c3      	ldr	r3, [r0, #12]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002adc:	f7ff ffb2 	bl	8002a44 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ae8:	e7e5      	b.n	8002ab6 <USB_CoreInit+0x42>

08002aea <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002aea:	6883      	ldr	r3, [r0, #8]
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6083      	str	r3, [r0, #8]
}
 8002af2:	2000      	movs	r0, #0
 8002af4:	4770      	bx	lr

08002af6 <USB_SetCurrentMode>:
{
 8002af6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002af8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002afa:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002afc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002b00:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002b02:	d108      	bne.n	8002b16 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b04:	68c3      	ldr	r3, [r0, #12]
 8002b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b0a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002b0c:	2032      	movs	r0, #50	; 0x32
 8002b0e:	f7fd fd95 	bl	800063c <HAL_Delay>
  return HAL_OK;
 8002b12:	2000      	movs	r0, #0
 8002b14:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002b16:	b919      	cbnz	r1, 8002b20 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b18:	68c3      	ldr	r3, [r0, #12]
 8002b1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b1e:	e7f4      	b.n	8002b0a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
}
 8002b22:	bd08      	pop	{r3, pc}

08002b24 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002b24:	0189      	lsls	r1, r1, #6
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <USB_FlushTxFifo+0x20>)
 8002b28:	f041 0120 	orr.w	r1, r1, #32
 8002b2c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	d005      	beq.n	8002b3e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002b32:	6903      	ldr	r3, [r0, #16]
 8002b34:	f013 0320 	ands.w	r3, r3, #32
 8002b38:	d1f9      	bne.n	8002b2e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	00030d41 	.word	0x00030d41

08002b48 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002b48:	2310      	movs	r3, #16
 8002b4a:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <USB_FlushRxFifo+0x1c>)
 8002b4c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	d005      	beq.n	8002b5e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002b52:	6903      	ldr	r3, [r0, #16]
 8002b54:	f013 0310 	ands.w	r3, r3, #16
 8002b58:	d1f9      	bne.n	8002b4e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b5e:	2003      	movs	r0, #3
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	00030d41 	.word	0x00030d41

08002b68 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002b68:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b6c:	4319      	orrs	r1, r3
 8002b6e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	4770      	bx	lr
	...

08002b78 <USB_DevInit>:
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b7e:	4604      	mov	r4, r0
 8002b80:	a809      	add	r0, sp, #36	; 0x24
 8002b82:	460f      	mov	r7, r1
 8002b84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002b8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8002b90:	461e      	mov	r6, r3
 8002b92:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002b96:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002b98:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002b9c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002b9e:	6046      	str	r6, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002ba0:	d1f7      	bne.n	8002b92 <USB_DevInit+0x1a>
 8002ba2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	d16b      	bne.n	8002c82 <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002baa:	6873      	ldr	r3, [r6, #4]
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002bca:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bcc:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 8002bce:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002bd2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002bd6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bda:	d159      	bne.n	8002c90 <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d155      	bne.n	8002c8c <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002be0:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ffc0 	bl	8002b68 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002be8:	2110      	movs	r1, #16
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff ff9a 	bl	8002b24 <USB_FlushTxFifo>
 8002bf0:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ffa8 	bl	8002b48 <USB_FlushRxFifo>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d14d      	bne.n	8002c98 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002bfc:	1c08      	adds	r0, r1, #0
 8002bfe:	bf18      	it	ne
 8002c00:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002c08:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c0c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002c10:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002c12:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8002c16:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c18:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c1a:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c1c:	42bb      	cmp	r3, r7
 8002c1e:	d13d      	bne.n	8002c9c <USB_DevInit+0x124>
 8002c20:	2100      	movs	r1, #0
 8002c22:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002c26:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002c2a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c2e:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c30:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c34:	428b      	cmp	r3, r1
 8002c36:	d144      	bne.n	8002cc2 <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c38:	6933      	ldr	r3, [r6, #16]
 8002c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3e:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c44:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002c48:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c4c:	b91b      	cbnz	r3, 8002c56 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c4e:	69a3      	ldr	r3, [r4, #24]
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c56:	69a2      	ldr	r2, [r4, #24]
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <USB_DevInit+0x170>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c60:	b11b      	cbz	r3, 8002c6a <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c62:	69a3      	ldr	r3, [r4, #24]
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002c6a:	2d01      	cmp	r5, #1
 8002c6c:	d105      	bne.n	8002c7a <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c6e:	69a3      	ldr	r3, [r4, #24]
 8002c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	61a3      	str	r3, [r4, #24]
}
 8002c7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c7e:	b004      	add	sp, #16
 8002c80:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c88:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c8a:	e79e      	b.n	8002bca <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	e7a8      	b.n	8002be2 <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002c90:	2903      	cmp	r1, #3
 8002c92:	d0a3      	beq.n	8002bdc <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c94:	2103      	movs	r1, #3
 8002c96:	e7a4      	b.n	8002be2 <USB_DevInit+0x6a>
 8002c98:	2001      	movs	r0, #1
 8002c9a:	e7b2      	b.n	8002c02 <USB_DevInit+0x8a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c9c:	f8d2 9000 	ldr.w	r9, [r2]
 8002ca0:	f1b9 0f00 	cmp.w	r9, #0
 8002ca4:	da0b      	bge.n	8002cbe <USB_DevInit+0x146>
      if (i == 0U)
 8002ca6:	b93b      	cbnz	r3, 8002cb8 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ca8:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002cac:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cae:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002cb0:	f8c2 8008 	str.w	r8, [r2, #8]
 8002cb4:	3220      	adds	r2, #32
 8002cb6:	e7b1      	b.n	8002c1c <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cb8:	f8c2 e000 	str.w	lr, [r2]
 8002cbc:	e7f6      	b.n	8002cac <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002cbe:	6011      	str	r1, [r2, #0]
 8002cc0:	e7f4      	b.n	8002cac <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002cc2:	f8d2 9000 	ldr.w	r9, [r2]
 8002cc6:	f1b9 0f00 	cmp.w	r9, #0
 8002cca:	da0b      	bge.n	8002ce4 <USB_DevInit+0x16c>
      if (i == 0U)
 8002ccc:	b939      	cbnz	r1, 8002cde <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002cce:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002cd2:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cd4:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002cd6:	f8c2 8008 	str.w	r8, [r2, #8]
 8002cda:	3220      	adds	r2, #32
 8002cdc:	e7aa      	b.n	8002c34 <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002cde:	f8c2 e000 	str.w	lr, [r2]
 8002ce2:	e7f6      	b.n	8002cd2 <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ce4:	6017      	str	r7, [r2, #0]
 8002ce6:	e7f4      	b.n	8002cd2 <USB_DevInit+0x15a>
 8002ce8:	803c3800 	.word	0x803c3800

08002cec <USB_DevDisconnect>:
{
 8002cec:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	f7fd fc9e 	bl	800063c <HAL_Delay>
}
 8002d00:	2000      	movs	r0, #0
 8002d02:	bd08      	pop	{r3, pc}

08002d04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d04:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002d06:	f001 fab7 	bl	8004278 <vTaskStartScheduler>
  
  return osOK;
}
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	bd08      	pop	{r3, pc}

08002d0e <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8002d12:	b10b      	cbz	r3, 8002d18 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8002d14:	f001 baf6 	b.w	8004304 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8002d18:	f001 baee 	b.w	80042f8 <xTaskGetTickCount>

08002d1c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d20:	6946      	ldr	r6, [r0, #20]
{
 8002d22:	460b      	mov	r3, r1
 8002d24:	b086      	sub	sp, #24
 8002d26:	6840      	ldr	r0, [r0, #4]
 8002d28:	6829      	ldr	r1, [r5, #0]
 8002d2a:	692a      	ldr	r2, [r5, #16]
 8002d2c:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d30:	b176      	cbz	r6, 8002d50 <osThreadCreate+0x34>
 8002d32:	69ad      	ldr	r5, [r5, #24]
 8002d34:	b165      	cbz	r5, 8002d50 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8002d36:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d38:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 8002d3a:	bf14      	ite	ne
 8002d3c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d3e:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d40:	e88d 0050 	stmia.w	sp, {r4, r6}
 8002d44:	f001 fa35 	bl	80041b2 <xTaskCreateStatic>
 8002d48:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d4a:	9805      	ldr	r0, [sp, #20]
}
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002d50:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d52:	ad05      	add	r5, sp, #20
 8002d54:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8002d56:	bf14      	ite	ne
 8002d58:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d5a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d5c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002d60:	f001 fa5c 	bl	800421c <xTaskCreate>
 8002d64:	2801      	cmp	r0, #1
 8002d66:	d0f0      	beq.n	8002d4a <osThreadCreate+0x2e>
      return NULL;
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e7ef      	b.n	8002d4c <osThreadCreate+0x30>

08002d6c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	bf08      	it	eq
 8002d70:	2001      	moveq	r0, #1
{
 8002d72:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d74:	f001 fbdc 	bl	8004530 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d78:	2000      	movs	r0, #0
 8002d7a:	bd08      	pop	{r3, pc}

08002d7c <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002d7c:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002d7e:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8002d80:	b109      	cbz	r1, 8002d86 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002d82:	f000 be06 	b.w	8003992 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002d86:	f000 bdf9 	b.w	800397c <xQueueCreateMutex>
	...

08002d8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002d8c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002d8e:	2400      	movs	r4, #0
 8002d90:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002d92:	b1e0      	cbz	r0, 8002dce <osMutexWait+0x42>
 8002d94:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002d98:	b1a3      	cbz	r3, 8002dc4 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002d9a:	aa01      	add	r2, sp, #4
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	f001 f83f 	bl	8003e20 <xQueueReceiveFromISR>
 8002da2:	2801      	cmp	r0, #1
 8002da4:	d002      	beq.n	8002dac <osMutexWait+0x20>
      return osErrorOS;
 8002da6:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002da8:	b002      	add	sp, #8
 8002daa:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002dac:	9b01      	ldr	r3, [sp, #4]
 8002dae:	b13b      	cbz	r3, 8002dc0 <osMutexWait+0x34>
 8002db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <osMutexWait+0x48>)
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
  return osOK;
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e7f1      	b.n	8002da8 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002dc4:	f000 ff64 	bl	8003c90 <xQueueSemaphoreTake>
 8002dc8:	2801      	cmp	r0, #1
 8002dca:	d1ec      	bne.n	8002da6 <osMutexWait+0x1a>
 8002dcc:	e7f8      	b.n	8002dc0 <osMutexWait+0x34>
    return osErrorParameter;
 8002dce:	2080      	movs	r0, #128	; 0x80
 8002dd0:	e7ea      	b.n	8002da8 <osMutexWait+0x1c>
 8002dd2:	bf00      	nop
 8002dd4:	e000ed04 	.word	0xe000ed04

08002dd8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002dda:	6844      	ldr	r4, [r0, #4]
{ 
 8002ddc:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8002dde:	b16c      	cbz	r4, 8002dfc <osSemaphoreCreate+0x24>
    if (count == 1) {
 8002de0:	2901      	cmp	r1, #1
 8002de2:	d11b      	bne.n	8002e1c <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002de4:	2303      	movs	r3, #3
 8002de6:	2200      	movs	r2, #0
 8002de8:	4628      	mov	r0, r5
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4623      	mov	r3, r4
 8002df0:	f000 fc82 	bl	80036f8 <xQueueGenericCreateStatic>
 8002df4:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002df6:	4628      	mov	r0, r5
 8002df8:	b003      	add	sp, #12
 8002dfa:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8002dfc:	2901      	cmp	r1, #1
 8002dfe:	d10f      	bne.n	8002e20 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8002e00:	4628      	mov	r0, r5
 8002e02:	2203      	movs	r2, #3
 8002e04:	4621      	mov	r1, r4
 8002e06:	f000 fccb 	bl	80037a0 <xQueueGenericCreate>
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d0f2      	beq.n	8002df6 <osSemaphoreCreate+0x1e>
 8002e10:	4623      	mov	r3, r4
 8002e12:	4622      	mov	r2, r4
 8002e14:	4621      	mov	r1, r4
 8002e16:	f000 fce9 	bl	80037ec <xQueueGenericSend>
 8002e1a:	e7ec      	b.n	8002df6 <osSemaphoreCreate+0x1e>
      return NULL;
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	e7ea      	b.n	8002df6 <osSemaphoreCreate+0x1e>
 8002e20:	4625      	mov	r5, r4
 8002e22:	e7e8      	b.n	8002df6 <osSemaphoreCreate+0x1e>

08002e24 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002e24:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002e26:	2400      	movs	r4, #0
 8002e28:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002e2a:	b1e0      	cbz	r0, 8002e66 <osSemaphoreWait+0x42>
 8002e2c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002e30:	b1a3      	cbz	r3, 8002e5c <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002e32:	aa01      	add	r2, sp, #4
 8002e34:	4621      	mov	r1, r4
 8002e36:	f000 fff3 	bl	8003e20 <xQueueReceiveFromISR>
 8002e3a:	2801      	cmp	r0, #1
 8002e3c:	d002      	beq.n	8002e44 <osSemaphoreWait+0x20>
      return osErrorOS;
 8002e3e:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002e40:	b002      	add	sp, #8
 8002e42:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002e44:	9b01      	ldr	r3, [sp, #4]
 8002e46:	b13b      	cbz	r3, 8002e58 <osSemaphoreWait+0x34>
 8002e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <osSemaphoreWait+0x48>)
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
  return osOK;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e7f1      	b.n	8002e40 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002e5c:	f000 ff18 	bl	8003c90 <xQueueSemaphoreTake>
 8002e60:	2801      	cmp	r0, #1
 8002e62:	d1ec      	bne.n	8002e3e <osSemaphoreWait+0x1a>
 8002e64:	e7f8      	b.n	8002e58 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8002e66:	2080      	movs	r0, #128	; 0x80
 8002e68:	e7ea      	b.n	8002e40 <osSemaphoreWait+0x1c>
 8002e6a:	bf00      	nop
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002e70:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002e72:	2400      	movs	r4, #0
 8002e74:	9401      	str	r4, [sp, #4]
 8002e76:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8002e7a:	b193      	cbz	r3, 8002ea2 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002e7c:	a901      	add	r1, sp, #4
 8002e7e:	f000 fe00 	bl	8003a82 <xQueueGiveFromISR>
 8002e82:	2801      	cmp	r0, #1
 8002e84:	d113      	bne.n	8002eae <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	b913      	cbnz	r3, 8002e90 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8002e8a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <osSemaphoreRelease+0x44>)
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	e7f3      	b.n	8002e8a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f000 fca1 	bl	80037ec <xQueueGenericSend>
 8002eaa:	2801      	cmp	r0, #1
 8002eac:	d0ed      	beq.n	8002e8a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8002eae:	20ff      	movs	r0, #255	; 0xff
 8002eb0:	e7ec      	b.n	8002e8c <osSemaphoreRelease+0x1c>
 8002eb2:	bf00      	nop
 8002eb4:	e000ed04 	.word	0xe000ed04

08002eb8 <osMutexRelease>:
 8002eb8:	f7ff bfda 	b.w	8002e70 <osSemaphoreRelease>

08002ebc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002ebc:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002ebe:	6882      	ldr	r2, [r0, #8]
 8002ec0:	b14a      	cbz	r2, 8002ed6 <osMessageCreate+0x1a>
 8002ec2:	68c3      	ldr	r3, [r0, #12]
 8002ec4:	b13b      	cbz	r3, 8002ed6 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	9100      	str	r1, [sp, #0]
 8002eca:	c803      	ldmia	r0, {r0, r1}
 8002ecc:	f000 fc14 	bl	80036f8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002ed0:	b003      	add	sp, #12
 8002ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	c803      	ldmia	r0, {r0, r1}
}
 8002eda:	b003      	add	sp, #12
 8002edc:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ee0:	f000 bc5e 	b.w	80037a0 <xQueueGenericCreate>

08002ee4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8002ee6:	2400      	movs	r4, #0
{
 8002ee8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002eea:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8002eec:	42a2      	cmp	r2, r4
 8002eee:	bf08      	it	eq
 8002ef0:	2201      	moveq	r2, #1
 8002ef2:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8002ef6:	b1ab      	cbz	r3, 8002f24 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002ef8:	4623      	mov	r3, r4
 8002efa:	aa03      	add	r2, sp, #12
 8002efc:	a901      	add	r1, sp, #4
 8002efe:	f000 fd56 	bl	80039ae <xQueueGenericSendFromISR>
 8002f02:	2801      	cmp	r0, #1
 8002f04:	d002      	beq.n	8002f0c <osMessagePut+0x28>
      return osErrorOS;
 8002f06:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002f0c:	9b03      	ldr	r3, [sp, #12]
 8002f0e:	b13b      	cbz	r3, 8002f20 <osMessagePut+0x3c>
 8002f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <osMessagePut+0x4c>)
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
  return osOK;
 8002f20:	2000      	movs	r0, #0
 8002f22:	e7f1      	b.n	8002f08 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002f24:	a901      	add	r1, sp, #4
 8002f26:	f000 fc61 	bl	80037ec <xQueueGenericSend>
 8002f2a:	2801      	cmp	r0, #1
 8002f2c:	d1eb      	bne.n	8002f06 <osMessagePut+0x22>
 8002f2e:	e7f7      	b.n	8002f20 <osMessagePut+0x3c>
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002f36:	2600      	movs	r6, #0
{
 8002f38:	b085      	sub	sp, #20
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4617      	mov	r7, r2
 8002f3e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002f40:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002f42:	9602      	str	r6, [sp, #8]
 8002f44:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8002f46:	b911      	cbnz	r1, 8002f4e <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8002f48:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	e016      	b.n	8002f7c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 8002f4e:	9600      	str	r6, [sp, #0]
 8002f50:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8002f54:	b1cb      	cbz	r3, 8002f8a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002f56:	466a      	mov	r2, sp
 8002f58:	a902      	add	r1, sp, #8
 8002f5a:	f000 ff61 	bl	8003e20 <xQueueReceiveFromISR>
 8002f5e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8002f60:	bf0a      	itet	eq
 8002f62:	2310      	moveq	r3, #16
      event.status = osOK;
 8002f64:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8002f66:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002f68:	9b00      	ldr	r3, [sp, #0]
 8002f6a:	b13b      	cbz	r3, 8002f7c <osMessageGet+0x48>
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <osMessageGet+0x70>)
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8002f7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f84:	4620      	mov	r0, r4
 8002f86:	b005      	add	sp, #20
 8002f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002f8a:	a902      	add	r1, sp, #8
 8002f8c:	f000 fdd6 	bl	8003b3c <xQueueReceive>
 8002f90:	2801      	cmp	r0, #1
 8002f92:	d101      	bne.n	8002f98 <osMessageGet+0x64>
      event.status = osEventMessage;
 8002f94:	2310      	movs	r3, #16
 8002f96:	e7d8      	b.n	8002f4a <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002f98:	2f00      	cmp	r7, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	2340      	movne	r3, #64	; 0x40
 8002fa0:	e7d3      	b.n	8002f4a <osMessageGet+0x16>
 8002fa2:	bf00      	nop
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fb8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fba:	6003      	str	r3, [r0, #0]
 8002fbc:	4770      	bx	lr

08002fbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6103      	str	r3, [r0, #16]
 8002fc2:	4770      	bx	lr

08002fc4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fc4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fc6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002fc8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fd0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002fd2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002fd4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	6003      	str	r3, [r0, #0]
 8002fda:	4770      	bx	lr

08002fdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fdc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fde:	1c53      	adds	r3, r2, #1
{
 8002fe0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002fe2:	d10a      	bne.n	8002ffa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fe4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fea:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fec:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fee:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002ff0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002ff2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	6003      	str	r3, [r0, #0]
 8002ff8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ffa:	f100 0308 	add.w	r3, r0, #8
 8002ffe:	685c      	ldr	r4, [r3, #4]
 8003000:	6825      	ldr	r5, [r4, #0]
 8003002:	42aa      	cmp	r2, r5
 8003004:	d3ef      	bcc.n	8002fe6 <vListInsert+0xa>
 8003006:	4623      	mov	r3, r4
 8003008:	e7f9      	b.n	8002ffe <vListInsert+0x22>

0800300a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800300a:	6841      	ldr	r1, [r0, #4]
 800300c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800300e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003010:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003012:	6882      	ldr	r2, [r0, #8]
 8003014:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800301a:	bf08      	it	eq
 800301c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800301e:	2200      	movs	r2, #0
 8003020:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	3a01      	subs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003028:	6818      	ldr	r0, [r3, #0]
}
 800302a:	4770      	bx	lr

0800302c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800302c:	2300      	movs	r3, #0
{
 800302e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003030:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <prvTaskExitError+0x44>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	d00a      	beq.n	8003050 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	b672      	cpsid	i
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	b662      	cpsie	i
 800304e:	e7fe      	b.n	800304e <prvTaskExitError+0x22>
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	b672      	cpsid	i
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0fc      	beq.n	8003064 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800306a:	b002      	add	sp, #8
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000008 	.word	0x20000008

08003074 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <prvPortStartFirstTask+0x24>)
 8003076:	6800      	ldr	r0, [r0, #0]
 8003078:	6800      	ldr	r0, [r0, #0]
 800307a:	f380 8808 	msr	MSP, r0
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f380 8814 	msr	CONTROL, r0
 8003086:	b662      	cpsie	i
 8003088:	b661      	cpsie	f
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	df00      	svc	0
 8003094:	bf00      	nop
 8003096:	0000      	.short	0x0000
 8003098:	e000ed08 	.word	0xe000ed08

0800309c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800309c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030ac <vPortEnableVFP+0x10>
 80030a0:	6801      	ldr	r1, [r0, #0]
 80030a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030a6:	6001      	str	r1, [r0, #0]
 80030a8:	4770      	bx	lr
 80030aa:	0000      	.short	0x0000
 80030ac:	e000ed88 	.word	0xe000ed88

080030b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030b4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030b8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80030bc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030be:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030c2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030c4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80030c6:	f06f 0302 	mvn.w	r3, #2
 80030ca:	6203      	str	r3, [r0, #32]
}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	0800302d 	.word	0x0800302d
	...

080030e0 <SVC_Handler>:
	__asm volatile (
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <pxCurrentTCBConst2>)
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	6808      	ldr	r0, [r1, #0]
 80030e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ea:	f380 8809 	msr	PSP, r0
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f380 8811 	msr	BASEPRI, r0
 80030fa:	4770      	bx	lr
 80030fc:	f3af 8000 	nop.w

08003100 <pxCurrentTCBConst2>:
 8003100:	20006624 	.word	0x20006624

08003104 <vPortEnterCritical>:
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	b672      	cpsid	i
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	b662      	cpsie	i
	uxCriticalNesting++;
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <vPortEnterCritical+0x44>)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800311e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003122:	d10f      	bne.n	8003144 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <vPortEnterCritical+0x48>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f013 0fff 	tst.w	r3, #255	; 0xff
 800312c:	d00a      	beq.n	8003144 <vPortEnterCritical+0x40>
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	b672      	cpsid	i
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	b662      	cpsie	i
 8003142:	e7fe      	b.n	8003142 <vPortEnterCritical+0x3e>
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000008 	.word	0x20000008
 800314c:	e000ed04 	.word	0xe000ed04

08003150 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <vPortExitCritical+0x28>)
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	b953      	cbnz	r3, 800316c <vPortExitCritical+0x1c>
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	b672      	cpsid	i
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	b662      	cpsie	i
 800316a:	e7fe      	b.n	800316a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800316c:	3b01      	subs	r3, #1
 800316e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003170:	b90b      	cbnz	r3, 8003176 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	4770      	bx	lr
 8003178:	20000008 	.word	0x20000008
 800317c:	00000000 	.word	0x00000000

08003180 <PendSV_Handler>:
	__asm volatile
 8003180:	f3ef 8009 	mrs	r0, PSP
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <pxCurrentTCBConst>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f01e 0f10 	tst.w	lr, #16
 8003190:	bf08      	it	eq
 8003192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319a:	6010      	str	r0, [r2, #0]
 800319c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031a4:	b672      	cpsid	i
 80031a6:	f380 8811 	msr	BASEPRI, r0
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	b662      	cpsie	i
 80031b4:	f001 f9e2 	bl	800457c <vTaskSwitchContext>
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f380 8811 	msr	BASEPRI, r0
 80031c0:	bc09      	pop	{r0, r3}
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6808      	ldr	r0, [r1, #0]
 80031c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ca:	f01e 0f10 	tst.w	lr, #16
 80031ce:	bf08      	it	eq
 80031d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031d4:	f380 8809 	msr	PSP, r0
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <pxCurrentTCBConst>:
 80031e0:	20006624 	.word	0x20006624

080031e4 <SysTick_Handler>:
{
 80031e4:	b508      	push	{r3, lr}
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	b672      	cpsid	i
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80031fa:	f001 f88b 	bl	8004314 <xTaskIncrementTick>
 80031fe:	b118      	cbz	r0, 8003208 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	4b02      	ldr	r3, [pc, #8]	; (8003210 <SysTick_Handler+0x2c>)
 8003206:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003208:	2300      	movs	r3, #0
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	bd08      	pop	{r3, pc}
 8003210:	e000ed04 	.word	0xe000ed04

08003214 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003214:	2300      	movs	r3, #0
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003218:	4908      	ldr	r1, [pc, #32]	; (800323c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800321a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800321c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800321e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <vPortSetupTimerInterrupt+0x2c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fbb3 f3f1 	udiv	r3, r3, r1
 800322a:	4906      	ldr	r1, [pc, #24]	; (8003244 <vPortSetupTimerInterrupt+0x30>)
 800322c:	3b01      	subs	r3, #1
 800322e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003230:	2307      	movs	r3, #7
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010
 800323c:	e000e018 	.word	0xe000e018
 8003240:	20000014 	.word	0x20000014
 8003244:	e000e014 	.word	0xe000e014

08003248 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <xPortStartScheduler+0xb4>)
{
 800324a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800324c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800324e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003258:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003262:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003266:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800326a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800326c:	2207      	movs	r2, #7
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <xPortStartScheduler+0xbc>)
 8003270:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003272:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003276:	1e54      	subs	r4, r2, #1
 8003278:	0600      	lsls	r0, r0, #24
 800327a:	d40f      	bmi.n	800329c <xPortStartScheduler+0x54>
 800327c:	b101      	cbz	r1, 8003280 <xPortStartScheduler+0x38>
 800327e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2a03      	cmp	r2, #3
 8003284:	d013      	beq.n	80032ae <xPortStartScheduler+0x66>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	b672      	cpsid	i
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	b662      	cpsie	i
 800329a:	e7fe      	b.n	800329a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800329c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80032a0:	2101      	movs	r1, #1
 80032a2:	0052      	lsls	r2, r2, #1
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f88d 2003 	strb.w	r2, [sp, #3]
 80032aa:	4622      	mov	r2, r4
 80032ac:	e7e1      	b.n	8003272 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032ae:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 80032b0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80032b6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032b8:	9b01      	ldr	r3, [sp, #4]
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <xPortStartScheduler+0xb4>)
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <xPortStartScheduler+0xc0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80032c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80032d0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80032d2:	f7ff ff9f 	bl	8003214 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <xPortStartScheduler+0xc4>)
 80032d8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80032da:	f7ff fedf 	bl	800309c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <xPortStartScheduler+0xc8>)
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80032e6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80032e8:	f7ff fec4 	bl	8003074 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80032ec:	f001 f946 	bl	800457c <vTaskSwitchContext>
	prvTaskExitError();
 80032f0:	f7ff fe9c 	bl	800302c <prvTaskExitError>
}
 80032f4:	4620      	mov	r0, r4
 80032f6:	b002      	add	sp, #8
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e400 	.word	0xe000e400
 8003300:	20000204 	.word	0x20000204
 8003304:	20000208 	.word	0x20000208
 8003308:	e000ed20 	.word	0xe000ed20
 800330c:	20000008 	.word	0x20000008
 8003310:	e000ef34 	.word	0xe000ef34

08003314 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003314:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d910      	bls.n	800333e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <vPortValidateInterruptPriority+0x54>)
 800331e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003320:	4a12      	ldr	r2, [pc, #72]	; (800336c <vPortValidateInterruptPriority+0x58>)
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d90a      	bls.n	800333e <vPortValidateInterruptPriority+0x2a>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	b672      	cpsid	i
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	b662      	cpsie	i
 800333c:	e7fe      	b.n	800333c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <vPortValidateInterruptPriority+0x5c>)
 8003340:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <vPortValidateInterruptPriority+0x60>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800334a:	4293      	cmp	r3, r2
 800334c:	d90a      	bls.n	8003364 <vPortValidateInterruptPriority+0x50>
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	b672      	cpsid	i
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	b662      	cpsie	i
 8003362:	e7fe      	b.n	8003362 <vPortValidateInterruptPriority+0x4e>
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e3f0 	.word	0xe000e3f0
 800336c:	20000204 	.word	0x20000204
 8003370:	e000ed0c 	.word	0xe000ed0c
 8003374:	20000208 	.word	0x20000208

08003378 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <prvInsertBlockIntoFreeList+0x40>)
{
 800337a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4282      	cmp	r2, r0
 8003380:	d318      	bcc.n	80033b4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003382:	685c      	ldr	r4, [r3, #4]
 8003384:	1919      	adds	r1, r3, r4
 8003386:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003388:	bf01      	itttt	eq
 800338a:	6841      	ldreq	r1, [r0, #4]
 800338c:	4618      	moveq	r0, r3
 800338e:	1909      	addeq	r1, r1, r4
 8003390:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003392:	6844      	ldr	r4, [r0, #4]
 8003394:	1901      	adds	r1, r0, r4
 8003396:	428a      	cmp	r2, r1
 8003398:	d107      	bne.n	80033aa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <prvInsertBlockIntoFreeList+0x44>)
 800339c:	6809      	ldr	r1, [r1, #0]
 800339e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033a0:	bf1f      	itttt	ne
 80033a2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033a4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033a6:	1909      	addne	r1, r1, r4
 80033a8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033aa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033ac:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033ae:	bf18      	it	ne
 80033b0:	6018      	strne	r0, [r3, #0]
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	4613      	mov	r3, r2
 80033b6:	e7e1      	b.n	800337c <prvInsertBlockIntoFreeList+0x4>
 80033b8:	2000661c 	.word	0x2000661c
 80033bc:	2000020c 	.word	0x2000020c

080033c0 <pvPortMalloc>:
{
 80033c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80033c6:	f000 ff8f 	bl	80042e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80033ca:	4940      	ldr	r1, [pc, #256]	; (80034cc <pvPortMalloc+0x10c>)
 80033cc:	4d40      	ldr	r5, [pc, #256]	; (80034d0 <pvPortMalloc+0x110>)
 80033ce:	680b      	ldr	r3, [r1, #0]
 80033d0:	bb0b      	cbnz	r3, 8003416 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80033d2:	4a40      	ldr	r2, [pc, #256]	; (80034d4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033d4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033d6:	4e40      	ldr	r6, [pc, #256]	; (80034d8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033d8:	bf1b      	ittet	ne
 80033da:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033dc:	f502 43c8 	addne.w	r3, r2, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033e0:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e4:	f020 0007 	bicne.w	r0, r0, #7
 80033e8:	bf1c      	itt	ne
 80033ea:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033ec:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80033ee:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033f0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033f2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033f4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80033f6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033f8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80033fc:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80033fe:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003400:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8003402:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003404:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003406:	4b35      	ldr	r3, [pc, #212]	; (80034dc <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003408:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800340a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <pvPortMalloc+0x120>)
 800340e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003414:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003416:	682f      	ldr	r7, [r5, #0]
 8003418:	4227      	tst	r7, r4
 800341a:	d116      	bne.n	800344a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800341c:	2c00      	cmp	r4, #0
 800341e:	d042      	beq.n	80034a6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8003420:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003424:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003426:	bf1c      	itt	ne
 8003428:	f023 0307 	bicne.w	r3, r3, #7
 800342c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800342e:	b163      	cbz	r3, 800344a <pvPortMalloc+0x8a>
 8003430:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <pvPortMalloc+0x120>)
 8003432:	6816      	ldr	r6, [r2, #0]
 8003434:	4690      	mov	r8, r2
 8003436:	42b3      	cmp	r3, r6
 8003438:	d807      	bhi.n	800344a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800343a:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <pvPortMalloc+0x118>)
 800343c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800343e:	6868      	ldr	r0, [r5, #4]
 8003440:	4283      	cmp	r3, r0
 8003442:	d804      	bhi.n	800344e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003444:	6809      	ldr	r1, [r1, #0]
 8003446:	428d      	cmp	r5, r1
 8003448:	d107      	bne.n	800345a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800344a:	2400      	movs	r4, #0
 800344c:	e02b      	b.n	80034a6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800344e:	682c      	ldr	r4, [r5, #0]
 8003450:	2c00      	cmp	r4, #0
 8003452:	d0f7      	beq.n	8003444 <pvPortMalloc+0x84>
 8003454:	462a      	mov	r2, r5
 8003456:	4625      	mov	r5, r4
 8003458:	e7f1      	b.n	800343e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800345a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800345c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800345e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003460:	1ac2      	subs	r2, r0, r3
 8003462:	2a10      	cmp	r2, #16
 8003464:	d911      	bls.n	800348a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003466:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003468:	0741      	lsls	r1, r0, #29
 800346a:	d00a      	beq.n	8003482 <pvPortMalloc+0xc2>
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	b672      	cpsid	i
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	b662      	cpsie	i
 8003480:	e7fe      	b.n	8003480 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003482:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003484:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003486:	f7ff ff77 	bl	8003378 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800348a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800348c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800348e:	4913      	ldr	r1, [pc, #76]	; (80034dc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003490:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003492:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003494:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003496:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003498:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800349c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800349e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034a0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034a2:	bf38      	it	cc
 80034a4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80034a6:	f000 ffc9 	bl	800443c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034aa:	0763      	lsls	r3, r4, #29
 80034ac:	d00a      	beq.n	80034c4 <pvPortMalloc+0x104>
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	b672      	cpsid	i
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	b662      	cpsie	i
 80034c2:	e7fe      	b.n	80034c2 <pvPortMalloc+0x102>
}
 80034c4:	4620      	mov	r0, r4
 80034c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ca:	bf00      	nop
 80034cc:	2000020c 	.word	0x2000020c
 80034d0:	20006610 	.word	0x20006610
 80034d4:	20000210 	.word	0x20000210
 80034d8:	2000661c 	.word	0x2000661c
 80034dc:	20006618 	.word	0x20006618
 80034e0:	20006614 	.word	0x20006614

080034e4 <vPortFree>:
{
 80034e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80034e6:	4604      	mov	r4, r0
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d032      	beq.n	8003552 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <vPortFree+0x70>)
 80034ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	4213      	tst	r3, r2
 80034f6:	d10a      	bne.n	800350e <vPortFree+0x2a>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	b672      	cpsid	i
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	b662      	cpsie	i
 800350c:	e7fe      	b.n	800350c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800350e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003512:	b151      	cbz	r1, 800352a <vPortFree+0x46>
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	b672      	cpsid	i
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	b662      	cpsie	i
 8003528:	e7fe      	b.n	8003528 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800352a:	ea23 0302 	bic.w	r3, r3, r2
 800352e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003532:	f000 fed9 	bl	80042e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <vPortFree+0x74>)
 8003538:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800353c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003540:	6811      	ldr	r1, [r2, #0]
 8003542:	440b      	add	r3, r1
 8003544:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003546:	f7ff ff17 	bl	8003378 <prvInsertBlockIntoFreeList>
}
 800354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800354e:	f000 bf75 	b.w	800443c <xTaskResumeAll>
 8003552:	bd10      	pop	{r4, pc}
 8003554:	20006610 	.word	0x20006610
 8003558:	20006614 	.word	0x20006614

0800355c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003560:	f7ff fdd0 	bl	8003104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003564:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003566:	f7ff fdf3 	bl	8003150 <vPortExitCritical>

	return xReturn;
}
 800356a:	fab4 f084 	clz	r0, r4
 800356e:	0940      	lsrs	r0, r0, #5
 8003570:	bd10      	pop	{r4, pc}

08003572 <prvCopyDataToQueue>:
{
 8003572:	b570      	push	{r4, r5, r6, lr}
 8003574:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003576:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003578:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800357c:	b942      	cbnz	r2, 8003590 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800357e:	6805      	ldr	r5, [r0, #0]
 8003580:	b99d      	cbnz	r5, 80035aa <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003582:	6880      	ldr	r0, [r0, #8]
 8003584:	f001 f94c 	bl	8004820 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003588:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800358a:	3601      	adds	r6, #1
 800358c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800358e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003590:	b96d      	cbnz	r5, 80035ae <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003592:	6840      	ldr	r0, [r0, #4]
 8003594:	f00b fa89 	bl	800eaaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800359c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800359e:	68a2      	ldr	r2, [r4, #8]
 80035a0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035a2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035a4:	d301      	bcc.n	80035aa <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80035aa:	2000      	movs	r0, #0
 80035ac:	e7ed      	b.n	800358a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035ae:	68c0      	ldr	r0, [r0, #12]
 80035b0:	f00b fa7b 	bl	800eaaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035b6:	68e2      	ldr	r2, [r4, #12]
 80035b8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ba:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035bc:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035be:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035c0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035c2:	bf3e      	ittt	cc
 80035c4:	68a2      	ldrcc	r2, [r4, #8]
 80035c6:	189b      	addcc	r3, r3, r2
 80035c8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80035ca:	2d02      	cmp	r5, #2
 80035cc:	d1ed      	bne.n	80035aa <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ce:	b10e      	cbz	r6, 80035d4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80035d0:	3e01      	subs	r6, #1
 80035d2:	e7ea      	b.n	80035aa <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80035d4:	4630      	mov	r0, r6
 80035d6:	e7d8      	b.n	800358a <prvCopyDataToQueue+0x18>

080035d8 <prvCopyDataFromQueue>:
{
 80035d8:	4603      	mov	r3, r0
 80035da:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80035de:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035e0:	b162      	cbz	r2, 80035fc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035e4:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035e8:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ea:	60d9      	str	r1, [r3, #12]
}
 80035ec:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035f0:	bf24      	itt	cs
 80035f2:	6819      	ldrcs	r1, [r3, #0]
 80035f4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035f6:	68d9      	ldr	r1, [r3, #12]
 80035f8:	f00b ba57 	b.w	800eaaa <memcpy>
}
 80035fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003600:	4770      	bx	lr

08003602 <prvUnlockQueue>:
{
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003606:	f7ff fd7d 	bl	8003104 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800360a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800360e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003612:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003614:	2d00      	cmp	r5, #0
 8003616:	dc14      	bgt.n	8003642 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003618:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800361e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003622:	f7ff fd95 	bl	8003150 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003626:	f7ff fd6d 	bl	8003104 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800362a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800362e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003630:	2d00      	cmp	r5, #0
 8003632:	dc12      	bgt.n	800365a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003634:	23ff      	movs	r3, #255	; 0xff
 8003636:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800363a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800363e:	f7ff bd87 	b.w	8003150 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0e7      	beq.n	8003618 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003648:	4630      	mov	r0, r6
 800364a:	f000 ffef 	bl	800462c <xTaskRemoveFromEventList>
 800364e:	b108      	cbz	r0, 8003654 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003650:	f001 f87c 	bl	800474c <vTaskMissedYield>
 8003654:	3d01      	subs	r5, #1
 8003656:	b26d      	sxtb	r5, r5
 8003658:	e7dc      	b.n	8003614 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0e9      	beq.n	8003634 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003660:	4630      	mov	r0, r6
 8003662:	f000 ffe3 	bl	800462c <xTaskRemoveFromEventList>
 8003666:	b108      	cbz	r0, 800366c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003668:	f001 f870 	bl	800474c <vTaskMissedYield>
 800366c:	3d01      	subs	r5, #1
 800366e:	b26d      	sxtb	r5, r5
 8003670:	e7de      	b.n	8003630 <prvUnlockQueue+0x2e>
	...

08003674 <xQueueGenericReset>:
{
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003678:	4604      	mov	r4, r0
 800367a:	b950      	cbnz	r0, 8003692 <xQueueGenericReset+0x1e>
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	b672      	cpsid	i
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	b662      	cpsie	i
 8003690:	e7fe      	b.n	8003690 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8003692:	f7ff fd37 	bl	8003104 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003696:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800369e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a2:	1a1b      	subs	r3, r3, r0
 80036a4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a6:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036aa:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036ac:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ae:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80036b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80036b8:	b995      	cbnz	r5, 80036e0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b163      	cbz	r3, 80036d8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036be:	f104 0010 	add.w	r0, r4, #16
 80036c2:	f000 ffb3 	bl	800462c <xTaskRemoveFromEventList>
 80036c6:	b138      	cbz	r0, 80036d8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80036c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <xQueueGenericReset+0x80>)
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80036d8:	f7ff fd3a 	bl	8003150 <vPortExitCritical>
}
 80036dc:	2001      	movs	r0, #1
 80036de:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e0:	f104 0010 	add.w	r0, r4, #16
 80036e4:	f7ff fc60 	bl	8002fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036ec:	f7ff fc5c 	bl	8002fa8 <vListInitialise>
 80036f0:	e7f2      	b.n	80036d8 <xQueueGenericReset+0x64>
 80036f2:	bf00      	nop
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <xQueueGenericCreateStatic>:
	{
 80036f8:	b513      	push	{r0, r1, r4, lr}
 80036fa:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036fc:	b950      	cbnz	r0, 8003714 <xQueueGenericCreateStatic+0x1c>
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	b672      	cpsid	i
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	b662      	cpsie	i
 8003712:	e7fe      	b.n	8003712 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8003714:	b953      	cbnz	r3, 800372c <xQueueGenericCreateStatic+0x34>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	b672      	cpsid	i
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	b662      	cpsie	i
 800372a:	e7fe      	b.n	800372a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800372c:	b15a      	cbz	r2, 8003746 <xQueueGenericCreateStatic+0x4e>
 800372e:	bb09      	cbnz	r1, 8003774 <xQueueGenericCreateStatic+0x7c>
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	b672      	cpsid	i
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	b662      	cpsie	i
 8003744:	e7fe      	b.n	8003744 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003746:	b1a9      	cbz	r1, 8003774 <xQueueGenericCreateStatic+0x7c>
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	b672      	cpsid	i
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	b662      	cpsie	i
 800375c:	e7fe      	b.n	800375c <xQueueGenericCreateStatic+0x64>
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	b672      	cpsid	i
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	b662      	cpsie	i
 8003772:	e7fe      	b.n	8003772 <xQueueGenericCreateStatic+0x7a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003774:	2348      	movs	r3, #72	; 0x48
 8003776:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	2b48      	cmp	r3, #72	; 0x48
 800377c:	d1ef      	bne.n	800375e <xQueueGenericCreateStatic+0x66>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800377e:	2900      	cmp	r1, #0
 8003780:	bf08      	it	eq
 8003782:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003784:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003786:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 8003788:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800378a:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800378c:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800378e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003792:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003794:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003796:	f7ff ff6d 	bl	8003674 <xQueueGenericReset>
	}
 800379a:	4620      	mov	r0, r4
 800379c:	b002      	add	sp, #8
 800379e:	bd10      	pop	{r4, pc}

080037a0 <xQueueGenericCreate>:
	{
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037a4:	4606      	mov	r6, r0
 80037a6:	b950      	cbnz	r0, 80037be <xQueueGenericCreate+0x1e>
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	b672      	cpsid	i
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	b662      	cpsie	i
 80037bc:	e7fe      	b.n	80037bc <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037be:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037c0:	3048      	adds	r0, #72	; 0x48
 80037c2:	f7ff fdfd 	bl	80033c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80037c6:	4604      	mov	r4, r0
 80037c8:	b150      	cbz	r0, 80037e0 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80037d0:	b945      	cbnz	r5, 80037e4 <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037d2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80037d4:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037d6:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80037d8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff4a 	bl	8003674 <xQueueGenericReset>
	}
 80037e0:	4620      	mov	r0, r4
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037e4:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037e8:	6003      	str	r3, [r0, #0]
 80037ea:	e7f3      	b.n	80037d4 <xQueueGenericCreate+0x34>

080037ec <xQueueGenericSend>:
{
 80037ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f0:	4689      	mov	r9, r1
 80037f2:	9201      	str	r2, [sp, #4]
 80037f4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80037f6:	4604      	mov	r4, r0
 80037f8:	b950      	cbnz	r0, 8003810 <xQueueGenericSend+0x24>
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	b672      	cpsid	i
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	b662      	cpsie	i
 800380e:	e7fe      	b.n	800380e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003810:	2900      	cmp	r1, #0
 8003812:	f040 808c 	bne.w	800392e <xQueueGenericSend+0x142>
 8003816:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8088 	beq.w	800392e <xQueueGenericSend+0x142>
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	b672      	cpsid	i
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	b662      	cpsie	i
 8003832:	e7fe      	b.n	8003832 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003834:	9e01      	ldr	r6, [sp, #4]
 8003836:	2e00      	cmp	r6, #0
 8003838:	f000 8084 	beq.w	8003944 <xQueueGenericSend+0x158>
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	b672      	cpsid	i
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	b662      	cpsie	i
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003852:	9d01      	ldr	r5, [sp, #4]
 8003854:	b91d      	cbnz	r5, 800385e <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8003856:	f7ff fc7b 	bl	8003150 <vPortExitCritical>
			return errQUEUE_FULL;
 800385a:	2000      	movs	r0, #0
 800385c:	e058      	b.n	8003910 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 800385e:	b916      	cbnz	r6, 8003866 <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003860:	a802      	add	r0, sp, #8
 8003862:	f000 ff27 	bl	80046b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003866:	f7ff fc73 	bl	8003150 <vPortExitCritical>
		vTaskSuspendAll();
 800386a:	f000 fd3d 	bl	80042e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800386e:	f7ff fc49 	bl	8003104 <vPortEnterCritical>
 8003872:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003876:	2bff      	cmp	r3, #255	; 0xff
 8003878:	d101      	bne.n	800387e <xQueueGenericSend+0x92>
 800387a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800387e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003882:	2bff      	cmp	r3, #255	; 0xff
 8003884:	d101      	bne.n	800388a <xQueueGenericSend+0x9e>
 8003886:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800388a:	f7ff fc61 	bl	8003150 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800388e:	a901      	add	r1, sp, #4
 8003890:	a802      	add	r0, sp, #8
 8003892:	f000 ff1b 	bl	80046cc <xTaskCheckForTimeOut>
 8003896:	2800      	cmp	r0, #0
 8003898:	d143      	bne.n	8003922 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800389a:	f7ff fc33 	bl	8003104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800389e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80038a0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f7ff fc55 	bl	8003150 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038a6:	42ae      	cmp	r6, r5
 80038a8:	d135      	bne.n	8003916 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038aa:	9901      	ldr	r1, [sp, #4]
 80038ac:	f104 0010 	add.w	r0, r4, #16
 80038b0:	f000 fea0 	bl	80045f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7ff fea4 	bl	8003602 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038ba:	f000 fdbf 	bl	800443c <xTaskResumeAll>
 80038be:	b938      	cbnz	r0, 80038d0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80038c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038c4:	f8ca 3000 	str.w	r3, [sl]
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80038d2:	f7ff fc17 	bl	8003104 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d301      	bcc.n	80038e2 <xQueueGenericSend+0xf6>
 80038de:	2f02      	cmp	r7, #2
 80038e0:	d1b7      	bne.n	8003852 <xQueueGenericSend+0x66>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038e2:	463a      	mov	r2, r7
 80038e4:	4649      	mov	r1, r9
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff fe43 	bl	8003572 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038ee:	b11b      	cbz	r3, 80038f8 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038f4:	f000 fe9a 	bl	800462c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80038f8:	b138      	cbz	r0, 800390a <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	4b19      	ldr	r3, [pc, #100]	; (8003964 <xQueueGenericSend+0x178>)
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800390a:	f7ff fc21 	bl	8003150 <vPortExitCritical>
				return pdPASS;
 800390e:	2001      	movs	r0, #1
}
 8003910:	b004      	add	sp, #16
 8003912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff fe73 	bl	8003602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800391c:	f000 fd8e 	bl	800443c <xTaskResumeAll>
 8003920:	e7d6      	b.n	80038d0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff fe6d 	bl	8003602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003928:	f000 fd88 	bl	800443c <xTaskResumeAll>
 800392c:	e795      	b.n	800385a <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800392e:	2f02      	cmp	r7, #2
 8003930:	d102      	bne.n	8003938 <xQueueGenericSend+0x14c>
 8003932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10a      	bne.n	800394e <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003938:	f000 ff0e 	bl	8004758 <xTaskGetSchedulerState>
 800393c:	2800      	cmp	r0, #0
 800393e:	f43f af79 	beq.w	8003834 <xQueueGenericSend+0x48>
 8003942:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003944:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003948:	f8df a018 	ldr.w	sl, [pc, #24]	; 8003964 <xQueueGenericSend+0x178>
 800394c:	e7c1      	b.n	80038d2 <xQueueGenericSend+0xe6>
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	b672      	cpsid	i
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	b662      	cpsie	i
 8003962:	e7fe      	b.n	8003962 <xQueueGenericSend+0x176>
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003968:	b138      	cbz	r0, 800397a <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800396e:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003970:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003972:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003974:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003976:	f7ff bf39 	b.w	80037ec <xQueueGenericSend>
 800397a:	4770      	bx	lr

0800397c <xQueueCreateMutex>:
	{
 800397c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800397e:	4602      	mov	r2, r0
 8003980:	2100      	movs	r1, #0
 8003982:	2001      	movs	r0, #1
 8003984:	f7ff ff0c 	bl	80037a0 <xQueueGenericCreate>
 8003988:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800398a:	f7ff ffed 	bl	8003968 <prvInitialiseMutex>
	}
 800398e:	4620      	mov	r0, r4
 8003990:	bd10      	pop	{r4, pc}

08003992 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003992:	2200      	movs	r2, #0
 8003994:	460b      	mov	r3, r1
	{
 8003996:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003998:	4611      	mov	r1, r2
 800399a:	9000      	str	r0, [sp, #0]
 800399c:	2001      	movs	r0, #1
 800399e:	f7ff feab 	bl	80036f8 <xQueueGenericCreateStatic>
 80039a2:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80039a4:	f7ff ffe0 	bl	8003968 <prvInitialiseMutex>
	}
 80039a8:	4620      	mov	r0, r4
 80039aa:	b002      	add	sp, #8
 80039ac:	bd10      	pop	{r4, pc}

080039ae <xQueueGenericSendFromISR>:
{
 80039ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b2:	4688      	mov	r8, r1
 80039b4:	4691      	mov	r9, r2
 80039b6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80039b8:	4604      	mov	r4, r0
 80039ba:	b950      	cbnz	r0, 80039d2 <xQueueGenericSendFromISR+0x24>
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	b672      	cpsid	i
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	b662      	cpsie	i
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d2:	bb19      	cbnz	r1, 8003a1c <xQueueGenericSendFromISR+0x6e>
 80039d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039d6:	b30b      	cbz	r3, 8003a1c <xQueueGenericSendFromISR+0x6e>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	b672      	cpsid	i
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	b662      	cpsie	i
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039f2:	f000 fe1b 	bl	800462c <xTaskRemoveFromEventList>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d036      	beq.n	8003a68 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 80039fa:	f1b9 0f00 	cmp.w	r9, #0
 80039fe:	d033      	beq.n	8003a68 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a00:	2001      	movs	r0, #1
 8003a02:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003a06:	f386 8811 	msr	BASEPRI, r6
}
 8003a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a0e:	3501      	adds	r5, #1
 8003a10:	b26d      	sxtb	r5, r5
 8003a12:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003a16:	e027      	b.n	8003a68 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8003a18:	2000      	movs	r0, #0
 8003a1a:	e7f4      	b.n	8003a06 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a1c:	2f02      	cmp	r7, #2
 8003a1e:	d102      	bne.n	8003a26 <xQueueGenericSendFromISR+0x78>
 8003a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d122      	bne.n	8003a6c <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a26:	f7ff fc75 	bl	8003314 <vPortValidateInterruptPriority>
	__asm volatile
 8003a2a:	f3ef 8611 	mrs	r6, BASEPRI
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	b672      	cpsid	i
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d301      	bcc.n	8003a4e <xQueueGenericSendFromISR+0xa0>
 8003a4a:	2f02      	cmp	r7, #2
 8003a4c:	d1e4      	bne.n	8003a18 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a4e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a52:	463a      	mov	r2, r7
 8003a54:	4641      	mov	r1, r8
 8003a56:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a58:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a5a:	f7ff fd8a 	bl	8003572 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003a5e:	1c6b      	adds	r3, r5, #1
 8003a60:	d1d5      	bne.n	8003a0e <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1c2      	bne.n	80039ee <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8003a68:	2001      	movs	r0, #1
 8003a6a:	e7cc      	b.n	8003a06 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	b672      	cpsid	i
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	b662      	cpsie	i
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericSendFromISR+0xd2>

08003a82 <xQueueGiveFromISR>:
{
 8003a82:	b570      	push	{r4, r5, r6, lr}
 8003a84:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003a86:	4604      	mov	r4, r0
 8003a88:	b950      	cbnz	r0, 8003aa0 <xQueueGiveFromISR+0x1e>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	b672      	cpsid	i
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	b662      	cpsie	i
 8003a9e:	e7fe      	b.n	8003a9e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003aa0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003aa2:	b153      	cbz	r3, 8003aba <xQueueGiveFromISR+0x38>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	b672      	cpsid	i
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	b662      	cpsie	i
 8003ab8:	e7fe      	b.n	8003ab8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	b913      	cbnz	r3, 8003ac4 <xQueueGiveFromISR+0x42>
 8003abe:	6883      	ldr	r3, [r0, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d130      	bne.n	8003b26 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac4:	f7ff fc26 	bl	8003314 <vPortValidateInterruptPriority>
	__asm volatile
 8003ac8:	f3ef 8611 	mrs	r6, BASEPRI
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	b672      	cpsid	i
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d301      	bcc.n	8003aec <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e014      	b.n	8003b16 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003af0:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8003af2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003af4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	d110      	bne.n	8003b1c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afc:	b90b      	cbnz	r3, 8003b02 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8003afe:	2001      	movs	r0, #1
 8003b00:	e009      	b.n	8003b16 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b06:	f000 fd91 	bl	800462c <xTaskRemoveFromEventList>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0f7      	beq.n	8003afe <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8003b0e:	2d00      	cmp	r5, #0
 8003b10:	d0f5      	beq.n	8003afe <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b12:	2001      	movs	r0, #1
 8003b14:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003b16:	f386 8811 	msr	BASEPRI, r6
}
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b24:	e7eb      	b.n	8003afe <xQueueGiveFromISR+0x7c>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	b672      	cpsid	i
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	b662      	cpsie	i
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGiveFromISR+0xb8>

08003b3c <xQueueReceive>:
{
 8003b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b40:	b085      	sub	sp, #20
 8003b42:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 8003b44:	4604      	mov	r4, r0
{
 8003b46:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003b48:	b950      	cbnz	r0, 8003b60 <xQueueReceive+0x24>
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	b672      	cpsid	i
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	b662      	cpsie	i
 8003b5e:	e7fe      	b.n	8003b5e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b60:	2900      	cmp	r1, #0
 8003b62:	f040 808a 	bne.w	8003c7a <xQueueReceive+0x13e>
 8003b66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8086 	beq.w	8003c7a <xQueueReceive+0x13e>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	b672      	cpsid	i
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	b662      	cpsie	i
 8003b82:	e7fe      	b.n	8003b82 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b84:	9e01      	ldr	r6, [sp, #4]
 8003b86:	2e00      	cmp	r6, #0
 8003b88:	d07c      	beq.n	8003c84 <xQueueReceive+0x148>
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	b672      	cpsid	i
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	b662      	cpsie	i
 8003b9e:	e7fe      	b.n	8003b9e <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba0:	9d01      	ldr	r5, [sp, #4]
 8003ba2:	b91d      	cbnz	r5, 8003bac <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8003ba4:	f7ff fad4 	bl	8003150 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003ba8:	2000      	movs	r0, #0
 8003baa:	e052      	b.n	8003c52 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8003bac:	b916      	cbnz	r6, 8003bb4 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bae:	a802      	add	r0, sp, #8
 8003bb0:	f000 fd80 	bl	80046b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003bb4:	f7ff facc 	bl	8003150 <vPortExitCritical>
		vTaskSuspendAll();
 8003bb8:	f000 fb96 	bl	80042e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bbc:	f7ff faa2 	bl	8003104 <vPortEnterCritical>
 8003bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003bc4:	2bff      	cmp	r3, #255	; 0xff
 8003bc6:	d101      	bne.n	8003bcc <xQueueReceive+0x90>
 8003bc8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003bcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003bd0:	2bff      	cmp	r3, #255	; 0xff
 8003bd2:	d101      	bne.n	8003bd8 <xQueueReceive+0x9c>
 8003bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bd8:	f7ff faba 	bl	8003150 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bdc:	a901      	add	r1, sp, #4
 8003bde:	a802      	add	r0, sp, #8
 8003be0:	f000 fd74 	bl	80046cc <xTaskCheckForTimeOut>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d13d      	bne.n	8003c64 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7ff fcb7 	bl	800355c <prvIsQueueEmpty>
 8003bee:	b398      	cbz	r0, 8003c58 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bf0:	9901      	ldr	r1, [sp, #4]
 8003bf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bf6:	f000 fcfd 	bl	80045f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff fd01 	bl	8003602 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c00:	f000 fc1c 	bl	800443c <xTaskResumeAll>
 8003c04:	b938      	cbnz	r0, 8003c16 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003c18:	f7ff fa74 	bl	8003104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	d0be      	beq.n	8003ba0 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c22:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c24:	4641      	mov	r1, r8
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff fcd6 	bl	80035d8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c2c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c2e:	6923      	ldr	r3, [r4, #16]
 8003c30:	b163      	cbz	r3, 8003c4c <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c32:	f104 0010 	add.w	r0, r4, #16
 8003c36:	f000 fcf9 	bl	800462c <xTaskRemoveFromEventList>
 8003c3a:	b138      	cbz	r0, 8003c4c <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8003c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <xQueueReceive+0x150>)
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003c4c:	f7ff fa80 	bl	8003150 <vPortExitCritical>
				return pdPASS;
 8003c50:	2001      	movs	r0, #1
}
 8003c52:	b005      	add	sp, #20
 8003c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7ff fcd2 	bl	8003602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c5e:	f000 fbed 	bl	800443c <xTaskResumeAll>
 8003c62:	e7d8      	b.n	8003c16 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff fccc 	bl	8003602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6a:	f000 fbe7 	bl	800443c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f7ff fc74 	bl	800355c <prvIsQueueEmpty>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d0ce      	beq.n	8003c16 <xQueueReceive+0xda>
 8003c78:	e796      	b.n	8003ba8 <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7a:	f000 fd6d 	bl	8004758 <xTaskGetSchedulerState>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d080      	beq.n	8003b84 <xQueueReceive+0x48>
 8003c82:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003c84:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003c86:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8003c8c <xQueueReceive+0x150>
 8003c8a:	e7c5      	b.n	8003c18 <xQueueReceive+0xdc>
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueSemaphoreTake>:
{
 8003c90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8003c94:	4604      	mov	r4, r0
{
 8003c96:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003c98:	b950      	cbnz	r0, 8003cb0 <xQueueSemaphoreTake+0x20>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	e7fe      	b.n	8003cae <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cb0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003cb2:	b155      	cbz	r5, 8003cca <xQueueSemaphoreTake+0x3a>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	b672      	cpsid	i
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	b662      	cpsie	i
 8003cc8:	e7fe      	b.n	8003cc8 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cca:	f000 fd45 	bl	8004758 <xTaskGetSchedulerState>
 8003cce:	b918      	cbnz	r0, 8003cd8 <xQueueSemaphoreTake+0x48>
 8003cd0:	9d01      	ldr	r5, [sp, #4]
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	f040 8097 	bne.w	8003e06 <xQueueSemaphoreTake+0x176>
 8003cd8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003cda:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003cdc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003e1c <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 8003ce0:	f7ff fa10 	bl	8003104 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ce4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ce6:	b1e3      	cbz	r3, 8003d22 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	b913      	cbnz	r3, 8003cf6 <xQueueSemaphoreTake+0x66>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003cf0:	f000 fe46 	bl	8004980 <pvTaskIncrementMutexHeldCount>
 8003cf4:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	b163      	cbz	r3, 8003d14 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfa:	f104 0010 	add.w	r0, r4, #16
 8003cfe:	f000 fc95 	bl	800462c <xTaskRemoveFromEventList>
 8003d02:	b138      	cbz	r0, 8003d14 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 8003d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d08:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <xQueueSemaphoreTake+0x18c>)
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8003d14:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8003d16:	f7ff fa1b 	bl	8003150 <vPortExitCritical>
}
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	b004      	add	sp, #16
 8003d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	b973      	cbnz	r3, 8003d44 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d26:	b155      	cbz	r5, 8003d3e <xQueueSemaphoreTake+0xae>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	b672      	cpsid	i
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	b662      	cpsie	i
 8003d3c:	e7fe      	b.n	8003d3c <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 8003d3e:	f7ff fa07 	bl	8003150 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003d42:	e7ea      	b.n	8003d1a <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 8003d44:	b916      	cbnz	r6, 8003d4c <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d46:	a802      	add	r0, sp, #8
 8003d48:	f000 fcb4 	bl	80046b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003d4c:	f7ff fa00 	bl	8003150 <vPortExitCritical>
		vTaskSuspendAll();
 8003d50:	f000 faca 	bl	80042e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d54:	f7ff f9d6 	bl	8003104 <vPortEnterCritical>
 8003d58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	d101      	bne.n	8003d64 <xQueueSemaphoreTake+0xd4>
 8003d60:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003d64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d68:	2bff      	cmp	r3, #255	; 0xff
 8003d6a:	d101      	bne.n	8003d70 <xQueueSemaphoreTake+0xe0>
 8003d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d70:	f7ff f9ee 	bl	8003150 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d74:	a901      	add	r1, sp, #4
 8003d76:	a802      	add	r0, sp, #8
 8003d78:	f000 fca8 	bl	80046cc <xTaskCheckForTimeOut>
 8003d7c:	bb40      	cbnz	r0, 8003dd0 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff fbec 	bl	800355c <prvIsQueueEmpty>
 8003d84:	b1f0      	cbz	r0, 8003dc4 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	b93b      	cbnz	r3, 8003d9a <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 8003d8a:	f7ff f9bb 	bl	8003104 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d8e:	68a0      	ldr	r0, [r4, #8]
 8003d90:	f000 fcf2 	bl	8004778 <xTaskPriorityInherit>
 8003d94:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003d96:	f7ff f9db 	bl	8003150 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d9a:	9901      	ldr	r1, [sp, #4]
 8003d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003da0:	f000 fc28 	bl	80045f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff fc2c 	bl	8003602 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003daa:	f000 fb47 	bl	800443c <xTaskResumeAll>
 8003dae:	b938      	cbnz	r0, 8003dc0 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 8003db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003db4:	f8c8 3000 	str.w	r3, [r8]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	2601      	movs	r6, #1
 8003dc2:	e78d      	b.n	8003ce0 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f7ff fc1c 	bl	8003602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dca:	f000 fb37 	bl	800443c <xTaskResumeAll>
 8003dce:	e7f7      	b.n	8003dc0 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7ff fc16 	bl	8003602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dd6:	f000 fb31 	bl	800443c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff fbbe 	bl	800355c <prvIsQueueEmpty>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d0ed      	beq.n	8003dc0 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	d098      	beq.n	8003d1a <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 8003de8:	f7ff f98c 	bl	8003104 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003dee:	b119      	cbz	r1, 8003df8 <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003df8:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8003dfa:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003dfc:	f000 fd64 	bl	80048c8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003e00:	f7ff f9a6 	bl	8003150 <vPortExitCritical>
 8003e04:	e789      	b.n	8003d1a <xQueueSemaphoreTake+0x8a>
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	b672      	cpsid	i
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	b662      	cpsie	i
 8003e1a:	e7fe      	b.n	8003e1a <xQueueSemaphoreTake+0x18a>
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <xQueueReceiveFromISR>:
{
 8003e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e24:	4689      	mov	r9, r1
 8003e26:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b950      	cbnz	r0, 8003e42 <xQueueReceiveFromISR+0x22>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	b672      	cpsid	i
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	b662      	cpsie	i
 8003e40:	e7fe      	b.n	8003e40 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e42:	bb81      	cbnz	r1, 8003ea6 <xQueueReceiveFromISR+0x86>
 8003e44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e46:	b373      	cbz	r3, 8003ea6 <xQueueReceiveFromISR+0x86>
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	b672      	cpsid	i
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	b662      	cpsie	i
 8003e5c:	e7fe      	b.n	8003e5c <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e5e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e62:	4649      	mov	r1, r9
 8003e64:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e66:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e68:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e6a:	f7ff fbb5 	bl	80035d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e6e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003e70:	1c73      	adds	r3, r6, #1
 8003e72:	d113      	bne.n	8003e9c <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e74:	692b      	ldr	r3, [r5, #16]
 8003e76:	b90b      	cbnz	r3, 8003e7c <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8003e78:	2001      	movs	r0, #1
 8003e7a:	e00b      	b.n	8003e94 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7c:	f105 0010 	add.w	r0, r5, #16
 8003e80:	f000 fbd4 	bl	800462c <xTaskRemoveFromEventList>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d0f7      	beq.n	8003e78 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8003e88:	f1b8 0f00 	cmp.w	r8, #0
 8003e8c:	d0f4      	beq.n	8003e78 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003e94:	f387 8811 	msr	BASEPRI, r7
}
 8003e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	b276      	sxtb	r6, r6
 8003ea0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003ea4:	e7e8      	b.n	8003e78 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ea6:	f7ff fa35 	bl	8003314 <vPortValidateInterruptPriority>
	__asm volatile
 8003eaa:	f3ef 8711 	mrs	r7, BASEPRI
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	b672      	cpsid	i
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ec2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	d1ca      	bne.n	8003e5e <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8003ec8:	4620      	mov	r0, r4
 8003eca:	e7e3      	b.n	8003e94 <xQueueReceiveFromISR+0x74>

08003ecc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ed2:	f7ff f917 	bl	8003104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003ed8:	4c2d      	ldr	r4, [pc, #180]	; (8003f90 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4f2d      	ldr	r7, [pc, #180]	; (8003f94 <prvAddNewTaskToReadyList+0xc8>)
 8003ede:	3201      	adds	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003ee2:	6825      	ldr	r5, [r4, #0]
 8003ee4:	2d00      	cmp	r5, #0
 8003ee6:	d145      	bne.n	8003f74 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ee8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d11c      	bne.n	8003f2a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ef0:	1978      	adds	r0, r7, r5
 8003ef2:	3514      	adds	r5, #20
 8003ef4:	f7ff f858 	bl	8002fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ef8:	2d8c      	cmp	r5, #140	; 0x8c
 8003efa:	d1f9      	bne.n	8003ef0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003efc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003fc0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003f00:	4d25      	ldr	r5, [pc, #148]	; (8003f98 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003f02:	4640      	mov	r0, r8
 8003f04:	f7ff f850 	bl	8002fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7ff f84d 	bl	8002fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f0e:	4823      	ldr	r0, [pc, #140]	; (8003f9c <prvAddNewTaskToReadyList+0xd0>)
 8003f10:	f7ff f84a 	bl	8002fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f14:	4822      	ldr	r0, [pc, #136]	; (8003fa0 <prvAddNewTaskToReadyList+0xd4>)
 8003f16:	f7ff f847 	bl	8002fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f1a:	4822      	ldr	r0, [pc, #136]	; (8003fa4 <prvAddNewTaskToReadyList+0xd8>)
 8003f1c:	f7ff f844 	bl	8002fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <prvAddNewTaskToReadyList+0xdc>)
 8003f22:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f26:	4b21      	ldr	r3, [pc, #132]	; (8003fac <prvAddNewTaskToReadyList+0xe0>)
 8003f28:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003f2c:	4921      	ldr	r1, [pc, #132]	; (8003fb4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003f2e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003f30:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003f32:	3301      	adds	r3, #1
 8003f34:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003f36:	2301      	movs	r3, #1
 8003f38:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	4303      	orrs	r3, r0
 8003f3e:	2014      	movs	r0, #20
 8003f40:	600b      	str	r3, [r1, #0]
 8003f42:	1d31      	adds	r1, r6, #4
 8003f44:	fb00 7002 	mla	r0, r0, r2, r7
 8003f48:	f7ff f83c 	bl	8002fc4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003f4c:	f7ff f900 	bl	8003150 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <prvAddNewTaskToReadyList+0xec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b163      	cbz	r3, 8003f70 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d207      	bcs.n	8003f70 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <prvAddNewTaskToReadyList+0xf0>)
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <prvAddNewTaskToReadyList+0xec>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1d6      	bne.n	8003f2a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d8d1      	bhi.n	8003f2a <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8003f86:	6026      	str	r6, [r4, #0]
 8003f88:	e7cf      	b.n	8003f2a <prvAddNewTaskToReadyList+0x5e>
 8003f8a:	bf00      	nop
 8003f8c:	200066bc 	.word	0x200066bc
 8003f90:	20006624 	.word	0x20006624
 8003f94:	20006630 	.word	0x20006630
 8003f98:	200066e8 	.word	0x200066e8
 8003f9c:	20006704 	.word	0x20006704
 8003fa0:	20006730 	.word	0x20006730
 8003fa4:	2000671c 	.word	0x2000671c
 8003fa8:	20006628 	.word	0x20006628
 8003fac:	2000662c 	.word	0x2000662c
 8003fb0:	200066cc 	.word	0x200066cc
 8003fb4:	200066d0 	.word	0x200066d0
 8003fb8:	20006718 	.word	0x20006718
 8003fbc:	e000ed04 	.word	0xe000ed04
 8003fc0:	200066d4 	.word	0x200066d4

08003fc4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc4:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <prvResetNextTaskUnblockTime+0x1c>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvResetNextTaskUnblockTime+0x20>)
 8003fcc:	b919      	cbnz	r1, 8003fd6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fda:	68d2      	ldr	r2, [r2, #12]
 8003fdc:	6852      	ldr	r2, [r2, #4]
 8003fde:	e7f8      	b.n	8003fd2 <prvResetNextTaskUnblockTime+0xe>
 8003fe0:	20006628 	.word	0x20006628
 8003fe4:	200066fc 	.word	0x200066fc

08003fe8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ff2:	4680      	mov	r8, r0
 8003ff4:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ff6:	3a01      	subs	r2, #1
 8003ff8:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ffc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004000:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8004004:	b391      	cbz	r1, 800406c <prvInitialiseNewTask.isra.2+0x84>
 8004006:	1e4b      	subs	r3, r1, #1
 8004008:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800400c:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800400e:	7858      	ldrb	r0, [r3, #1]
 8004010:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8004014:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004018:	b108      	cbz	r0, 800401e <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401a:	428b      	cmp	r3, r1
 800401c:	d1f7      	bne.n	800400e <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800401e:	2300      	movs	r3, #0
 8004020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004024:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8004026:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800402a:	1d20      	adds	r0, r4, #4
 800402c:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800402e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8004032:	bf28      	it	cs
 8004034:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004036:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004038:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800403e:	f7fe ffbe 	bl	8002fbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004042:	f104 0018 	add.w	r0, r4, #24
 8004046:	f7fe ffba 	bl	8002fbe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800404a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800404e:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004050:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004054:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004056:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004058:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800405a:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800405e:	f7ff f827 	bl	80030b0 <pxPortInitialiseStack>
 8004062:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004064:	b107      	cbz	r7, 8004068 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004066:	603c      	str	r4, [r7, #0]
 8004068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800406c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8004070:	e7d8      	b.n	8004024 <prvInitialiseNewTask.isra.2+0x3c>

08004072 <prvDeleteTCB>:
	{
 8004072:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004074:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8004078:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800407a:	b93b      	cbnz	r3, 800408c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800407c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800407e:	f7ff fa31 	bl	80034e4 <vPortFree>
				vPortFree( pxTCB );
 8004082:	4620      	mov	r0, r4
	}
 8004084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004088:	f7ff ba2c 	b.w	80034e4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800408c:	2b01      	cmp	r3, #1
 800408e:	d0f9      	beq.n	8004084 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004090:	2b02      	cmp	r3, #2
 8004092:	d00a      	beq.n	80040aa <prvDeleteTCB+0x38>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	b672      	cpsid	i
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	b662      	cpsie	i
 80040a8:	e7fe      	b.n	80040a8 <prvDeleteTCB+0x36>
 80040aa:	bd10      	pop	{r4, pc}

080040ac <prvIdleTask>:
{
 80040ac:	b580      	push	{r7, lr}
				taskYIELD();
 80040ae:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800410c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b2:	4f12      	ldr	r7, [pc, #72]	; (80040fc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b4:	4c12      	ldr	r4, [pc, #72]	; (8004100 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80040b6:	4d13      	ldr	r5, [pc, #76]	; (8004104 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	b963      	cbnz	r3, 80040d6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <prvIdleTask+0x5c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d9f8      	bls.n	80040b6 <prvIdleTask+0xa>
				taskYIELD();
 80040c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040c8:	f8c8 3000 	str.w	r3, [r8]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	e7ee      	b.n	80040b4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80040d6:	f7ff f815 	bl	8003104 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040de:	1d30      	adds	r0, r6, #4
 80040e0:	f7fe ff93 	bl	800300a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80040f0:	f7ff f82e 	bl	8003150 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80040f4:	4630      	mov	r0, r6
 80040f6:	f7ff ffbc 	bl	8004072 <prvDeleteTCB>
 80040fa:	e7dd      	b.n	80040b8 <prvIdleTask+0xc>
 80040fc:	20006730 	.word	0x20006730
 8004100:	200066c0 	.word	0x200066c0
 8004104:	200066bc 	.word	0x200066bc
 8004108:	20006630 	.word	0x20006630
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8004114:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004116:	4e1b      	ldr	r6, [pc, #108]	; (8004184 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8004118:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800411a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800411c:	6830      	ldr	r0, [r6, #0]
 800411e:	3004      	adds	r0, #4
 8004120:	f7fe ff73 	bl	800300a <uxListRemove>
 8004124:	4633      	mov	r3, r6
 8004126:	b940      	cbnz	r0, 800413a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004128:	6831      	ldr	r1, [r6, #0]
 800412a:	2001      	movs	r0, #1
 800412c:	4e16      	ldr	r6, [pc, #88]	; (8004188 <prvAddCurrentTaskToDelayedList+0x78>)
 800412e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004130:	6832      	ldr	r2, [r6, #0]
 8004132:	4088      	lsls	r0, r1
 8004134:	ea22 0200 	bic.w	r2, r2, r0
 8004138:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800413a:	1c62      	adds	r2, r4, #1
 800413c:	d107      	bne.n	800414e <prvAddCurrentTaskToDelayedList+0x3e>
 800413e:	b137      	cbz	r7, 800414e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	4812      	ldr	r0, [pc, #72]	; (800418c <prvAddCurrentTaskToDelayedList+0x7c>)
 8004144:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414a:	f7fe bf3b 	b.w	8002fc4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800414e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004150:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004152:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004154:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004156:	d907      	bls.n	8004168 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004158:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <prvAddCurrentTaskToDelayedList+0x80>)
 800415a:	6810      	ldr	r0, [r2, #0]
 800415c:	6819      	ldr	r1, [r3, #0]
}
 800415e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004162:	3104      	adds	r1, #4
 8004164:	f7fe bf3a 	b.w	8002fdc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004168:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <prvAddCurrentTaskToDelayedList+0x84>)
 800416a:	6810      	ldr	r0, [r2, #0]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	3104      	adds	r1, #4
 8004170:	f7fe ff34 	bl	8002fdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <prvAddCurrentTaskToDelayedList+0x88>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4294      	cmp	r4, r2
 800417a:	d200      	bcs.n	800417e <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800417c:	601c      	str	r4, [r3, #0]
 800417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004180:	20006744 	.word	0x20006744
 8004184:	20006624 	.word	0x20006624
 8004188:	200066d0 	.word	0x200066d0
 800418c:	2000671c 	.word	0x2000671c
 8004190:	2000662c 	.word	0x2000662c
 8004194:	20006628 	.word	0x20006628
 8004198:	200066fc 	.word	0x200066fc

0800419c <prvTaskIsTaskSuspended.part.0>:
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	b672      	cpsid	i
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	b662      	cpsie	i
 80041b0:	e7fe      	b.n	80041b0 <prvTaskIsTaskSuspended.part.0+0x14>

080041b2 <xTaskCreateStatic>:
	{
 80041b2:	b570      	push	{r4, r5, r6, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80041b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80041ba:	b90d      	cbnz	r5, 80041c0 <xTaskCreateStatic+0xe>
 80041bc:	f7ff ffee 	bl	800419c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 80041c0:	b954      	cbnz	r4, 80041d8 <xTaskCreateStatic+0x26>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	b672      	cpsid	i
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	b662      	cpsie	i
 80041d6:	e7fe      	b.n	80041d6 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 80041d8:	2654      	movs	r6, #84	; 0x54
 80041da:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041dc:	9e05      	ldr	r6, [sp, #20]
 80041de:	2e54      	cmp	r6, #84	; 0x54
 80041e0:	d00a      	beq.n	80041f8 <xTaskCreateStatic+0x46>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	b672      	cpsid	i
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	b662      	cpsie	i
 80041f6:	e7fe      	b.n	80041f6 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041f8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041fa:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041fc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041fe:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004202:	ad04      	add	r5, sp, #16
 8004204:	9402      	str	r4, [sp, #8]
 8004206:	9501      	str	r5, [sp, #4]
 8004208:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800420a:	9500      	str	r5, [sp, #0]
 800420c:	f7ff feec 	bl	8003fe8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff fe5b 	bl	8003ecc <prvAddNewTaskToReadyList>
	}
 8004216:	9804      	ldr	r0, [sp, #16]
 8004218:	b006      	add	sp, #24
 800421a:	bd70      	pop	{r4, r5, r6, pc}

0800421c <xTaskCreate>:
	{
 800421c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004220:	4607      	mov	r7, r0
 8004222:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004224:	0090      	lsls	r0, r2, #2
	{
 8004226:	4688      	mov	r8, r1
 8004228:	4616      	mov	r6, r2
 800422a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800422c:	f7ff f8c8 	bl	80033c0 <pvPortMalloc>
			if( pxStack != NULL )
 8004230:	4605      	mov	r5, r0
 8004232:	b1e8      	cbz	r0, 8004270 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004234:	2054      	movs	r0, #84	; 0x54
 8004236:	f7ff f8c3 	bl	80033c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800423a:	4604      	mov	r4, r0
 800423c:	b1a8      	cbz	r0, 800426a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800423e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8004240:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004242:	4632      	mov	r2, r6
 8004244:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004246:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	9002      	str	r0, [sp, #8]
 800424e:	4638      	mov	r0, r7
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	464b      	mov	r3, r9
 8004258:	f7ff fec6 	bl	8003fe8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff fe35 	bl	8003ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004262:	2001      	movs	r0, #1
	}
 8004264:	b005      	add	sp, #20
 8004266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800426a:	4628      	mov	r0, r5
 800426c:	f7ff f93a 	bl	80034e4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004274:	e7f6      	b.n	8004264 <xTaskCreate+0x48>
	...

08004278 <vTaskStartScheduler>:
{
 8004278:	b510      	push	{r4, lr}
 800427a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800427e:	aa07      	add	r2, sp, #28
 8004280:	a906      	add	r1, sp, #24
 8004282:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004284:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004286:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004288:	f009 fcb0 	bl	800dbec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800428c:	9b05      	ldr	r3, [sp, #20]
 800428e:	9400      	str	r4, [sp, #0]
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	9b06      	ldr	r3, [sp, #24]
 8004294:	9a07      	ldr	r2, [sp, #28]
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	4623      	mov	r3, r4
 800429a:	490e      	ldr	r1, [pc, #56]	; (80042d4 <vTaskStartScheduler+0x5c>)
 800429c:	480e      	ldr	r0, [pc, #56]	; (80042d8 <vTaskStartScheduler+0x60>)
 800429e:	f7ff ff88 	bl	80041b2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80042a2:	b1a0      	cbz	r0, 80042ce <vTaskStartScheduler+0x56>
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	b672      	cpsid	i
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <vTaskStartScheduler+0x64>)
 80042be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042c0:	2201      	movs	r2, #1
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <vTaskStartScheduler+0x68>)
 80042c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <vTaskStartScheduler+0x6c>)
 80042c8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80042ca:	f7fe ffbd 	bl	8003248 <xPortStartScheduler>
}
 80042ce:	b008      	add	sp, #32
 80042d0:	bd10      	pop	{r4, pc}
 80042d2:	bf00      	nop
 80042d4:	0800ff41 	.word	0x0800ff41
 80042d8:	080040ad 	.word	0x080040ad
 80042dc:	200066fc 	.word	0x200066fc
 80042e0:	20006718 	.word	0x20006718
 80042e4:	20006744 	.word	0x20006744

080042e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80042e8:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <vTaskSuspendAll+0xc>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200066c8 	.word	0x200066c8

080042f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80042f8:	4b01      	ldr	r3, [pc, #4]	; (8004300 <xTaskGetTickCount+0x8>)
 80042fa:	6818      	ldr	r0, [r3, #0]
}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20006744 	.word	0x20006744

08004304 <xTaskGetTickCountFromISR>:
{
 8004304:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004306:	f7ff f805 	bl	8003314 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800430a:	4b01      	ldr	r3, [pc, #4]	; (8004310 <xTaskGetTickCountFromISR+0xc>)
 800430c:	6818      	ldr	r0, [r3, #0]
}
 800430e:	bd08      	pop	{r3, pc}
 8004310:	20006744 	.word	0x20006744

08004314 <xTaskIncrementTick>:
{
 8004314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <xTaskIncrementTick+0xfc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d16f      	bne.n	8004400 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004320:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <xTaskIncrementTick+0x100>)
 8004322:	681c      	ldr	r4, [r3, #0]
 8004324:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004326:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004328:	b9cc      	cbnz	r4, 800435e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <xTaskIncrementTick+0x104>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	b152      	cbz	r2, 8004348 <xTaskIncrementTick+0x34>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	b672      	cpsid	i
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	b662      	cpsie	i
 8004346:	e7fe      	b.n	8004346 <xTaskIncrementTick+0x32>
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <xTaskIncrementTick+0x108>)
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	6810      	ldr	r0, [r2, #0]
 800434e:	6018      	str	r0, [r3, #0]
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	4a33      	ldr	r2, [pc, #204]	; (8004420 <xTaskIncrementTick+0x10c>)
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	f7ff fe33 	bl	8003fc4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800435e:	4d31      	ldr	r5, [pc, #196]	; (8004424 <xTaskIncrementTick+0x110>)
 8004360:	f04f 0b00 	mov.w	fp, #0
 8004364:	4f30      	ldr	r7, [pc, #192]	; (8004428 <xTaskIncrementTick+0x114>)
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	429c      	cmp	r4, r3
 800436a:	d30a      	bcc.n	8004382 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8004418 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8004370:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004438 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004374:	f8da 2000 	ldr.w	r2, [sl]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	b9a2      	cbnz	r2, 80043a6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <xTaskIncrementTick+0x118>)
 8004386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004388:	2214      	movs	r2, #20
 800438a:	434a      	muls	r2, r1
 800438c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800438e:	2a02      	cmp	r2, #2
 8004390:	bf28      	it	cs
 8004392:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <xTaskIncrementTick+0x11c>)
 8004398:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800439a:	2a00      	cmp	r2, #0
}
 800439c:	bf0c      	ite	eq
 800439e:	4658      	moveq	r0, fp
 80043a0:	2001      	movne	r0, #1
 80043a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a6:	f8da 2000 	ldr.w	r2, [sl]
 80043aa:	68d2      	ldr	r2, [r2, #12]
 80043ac:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ae:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80043b0:	428c      	cmp	r4, r1
 80043b2:	d201      	bcs.n	80043b8 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 80043b4:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043b6:	e7e4      	b.n	8004382 <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b8:	f106 0804 	add.w	r8, r6, #4
 80043bc:	4640      	mov	r0, r8
 80043be:	f7fe fe24 	bl	800300a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80043c4:	b119      	cbz	r1, 80043ce <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c6:	f106 0018 	add.w	r0, r6, #24
 80043ca:	f7fe fe1e 	bl	800300a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ce:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	f8d9 3000 	ldr.w	r3, [r9]
 80043d6:	f04f 0e14 	mov.w	lr, #20
 80043da:	fa02 f100 	lsl.w	r1, r2, r0
 80043de:	4319      	orrs	r1, r3
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <xTaskIncrementTick+0x118>)
 80043e2:	f8c9 1000 	str.w	r1, [r9]
 80043e6:	4641      	mov	r1, r8
 80043e8:	fb0e 3000 	mla	r0, lr, r0, r3
 80043ec:	f7fe fdea 	bl	8002fc4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f0:	6838      	ldr	r0, [r7, #0]
 80043f2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80043f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80043f6:	4291      	cmp	r1, r2
 80043f8:	bf28      	it	cs
 80043fa:	f04f 0b01 	movcs.w	fp, #1
 80043fe:	e7b9      	b.n	8004374 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8004402:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e7c3      	b.n	8004396 <xTaskIncrementTick+0x82>
 800440e:	bf00      	nop
 8004410:	200066c8 	.word	0x200066c8
 8004414:	20006744 	.word	0x20006744
 8004418:	20006628 	.word	0x20006628
 800441c:	2000662c 	.word	0x2000662c
 8004420:	20006700 	.word	0x20006700
 8004424:	200066fc 	.word	0x200066fc
 8004428:	20006624 	.word	0x20006624
 800442c:	20006630 	.word	0x20006630
 8004430:	20006748 	.word	0x20006748
 8004434:	200066c4 	.word	0x200066c4
 8004438:	200066d0 	.word	0x200066d0

0800443c <xTaskResumeAll>:
{
 800443c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004440:	4c32      	ldr	r4, [pc, #200]	; (800450c <xTaskResumeAll+0xd0>)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	b953      	cbnz	r3, 800445c <xTaskResumeAll+0x20>
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	b672      	cpsid	i
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	b662      	cpsie	i
 800445a:	e7fe      	b.n	800445a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800445c:	f7fe fe52 	bl	8003104 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004466:	6824      	ldr	r4, [r4, #0]
 8004468:	b12c      	cbz	r4, 8004476 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800446a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800446c:	f7fe fe70 	bl	8003150 <vPortExitCritical>
}
 8004470:	4620      	mov	r0, r4
 8004472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <xTaskResumeAll+0xd4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f5      	beq.n	800446a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800447e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004528 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8004482:	4f24      	ldr	r7, [pc, #144]	; (8004514 <xTaskResumeAll+0xd8>)
 8004484:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800452c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004488:	f8d9 3000 	ldr.w	r3, [r9]
 800448c:	b9e3      	cbnz	r3, 80044c8 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800448e:	b10c      	cbz	r4, 8004494 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8004490:	f7ff fd98 	bl	8003fc4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004494:	4d20      	ldr	r5, [pc, #128]	; (8004518 <xTaskResumeAll+0xdc>)
 8004496:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004498:	b144      	cbz	r4, 80044ac <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800449a:	4e20      	ldr	r6, [pc, #128]	; (800451c <xTaskResumeAll+0xe0>)
 800449c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800449e:	f7ff ff39 	bl	8004314 <xTaskIncrementTick>
 80044a2:	b100      	cbz	r0, 80044a6 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 80044a4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044a6:	3c01      	subs	r4, #1
 80044a8:	d1f9      	bne.n	800449e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80044aa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <xTaskResumeAll+0xe0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0da      	beq.n	800446a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80044b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <xTaskResumeAll+0xe4>)
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80044c4:	2401      	movs	r4, #1
 80044c6:	e7d1      	b.n	800446c <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80044cc:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d2:	f104 0018 	add.w	r0, r4, #24
 80044d6:	f7fe fd98 	bl	800300a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044da:	4630      	mov	r0, r6
 80044dc:	f7fe fd95 	bl	800300a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	2014      	movs	r0, #20
 80044e6:	fa05 f302 	lsl.w	r3, r5, r2
 80044ea:	fb00 8002 	mla	r0, r0, r2, r8
 80044ee:	430b      	orrs	r3, r1
 80044f0:	4631      	mov	r1, r6
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	f7fe fd66 	bl	8002fc4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <xTaskResumeAll+0xe8>)
 80044fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d3c1      	bcc.n	8004488 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <xTaskResumeAll+0xe0>)
 8004506:	601d      	str	r5, [r3, #0]
 8004508:	e7be      	b.n	8004488 <xTaskResumeAll+0x4c>
 800450a:	bf00      	nop
 800450c:	200066c8 	.word	0x200066c8
 8004510:	200066bc 	.word	0x200066bc
 8004514:	200066d0 	.word	0x200066d0
 8004518:	200066c4 	.word	0x200066c4
 800451c:	20006748 	.word	0x20006748
 8004520:	e000ed04 	.word	0xe000ed04
 8004524:	20006624 	.word	0x20006624
 8004528:	20006704 	.word	0x20006704
 800452c:	20006630 	.word	0x20006630

08004530 <vTaskDelay>:
	{
 8004530:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004532:	b940      	cbnz	r0, 8004546 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <vTaskDelay+0x44>)
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <vTaskDelay+0x48>)
 8004548:	6819      	ldr	r1, [r3, #0]
 800454a:	b151      	cbz	r1, 8004562 <vTaskDelay+0x32>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	b672      	cpsid	i
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	b662      	cpsie	i
 8004560:	e7fe      	b.n	8004560 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004562:	f7ff fec1 	bl	80042e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004566:	f7ff fdd3 	bl	8004110 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800456a:	f7ff ff67 	bl	800443c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800456e:	2800      	cmp	r0, #0
 8004570:	d0e0      	beq.n	8004534 <vTaskDelay+0x4>
 8004572:	bd08      	pop	{r3, pc}
 8004574:	e000ed04 	.word	0xe000ed04
 8004578:	200066c8 	.word	0x200066c8

0800457c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <vTaskSwitchContext+0x64>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <vTaskSwitchContext+0x68>)
{
 8004582:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004584:	b112      	cbz	r2, 800458c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004586:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800458c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <vTaskSwitchContext+0x6c>)
 8004590:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2214      	movs	r2, #20
 800459a:	4914      	ldr	r1, [pc, #80]	; (80045ec <vTaskSwitchContext+0x70>)
 800459c:	f1c3 031f 	rsb	r3, r3, #31
 80045a0:	435a      	muls	r2, r3
 80045a2:	588c      	ldr	r4, [r1, r2]
 80045a4:	1888      	adds	r0, r1, r2
 80045a6:	b954      	cbnz	r4, 80045be <vTaskSwitchContext+0x42>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	e7fe      	b.n	80045bc <vTaskSwitchContext+0x40>
 80045be:	6844      	ldr	r4, [r0, #4]
 80045c0:	3208      	adds	r2, #8
 80045c2:	6864      	ldr	r4, [r4, #4]
 80045c4:	440a      	add	r2, r1
 80045c6:	4294      	cmp	r4, r2
 80045c8:	6044      	str	r4, [r0, #4]
 80045ca:	bf04      	itt	eq
 80045cc:	6862      	ldreq	r2, [r4, #4]
 80045ce:	6042      	streq	r2, [r0, #4]
 80045d0:	2214      	movs	r2, #20
 80045d2:	fb02 1303 	mla	r3, r2, r3, r1
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <vTaskSwitchContext+0x74>)
 80045dc:	e7d4      	b.n	8004588 <vTaskSwitchContext+0xc>
 80045de:	bf00      	nop
 80045e0:	200066c8 	.word	0x200066c8
 80045e4:	20006748 	.word	0x20006748
 80045e8:	200066d0 	.word	0x200066d0
 80045ec:	20006630 	.word	0x20006630
 80045f0:	20006624 	.word	0x20006624

080045f4 <vTaskPlaceOnEventList>:
{
 80045f4:	b510      	push	{r4, lr}
 80045f6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80045f8:	b950      	cbnz	r0, 8004610 <vTaskPlaceOnEventList+0x1c>
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	b672      	cpsid	i
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	b662      	cpsie	i
 800460e:	e7fe      	b.n	800460e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <vTaskPlaceOnEventList+0x34>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	3118      	adds	r1, #24
 8004616:	f7fe fce1 	bl	8002fdc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800461a:	4620      	mov	r0, r4
 800461c:	2101      	movs	r1, #1
}
 800461e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004622:	f7ff bd75 	b.w	8004110 <prvAddCurrentTaskToDelayedList>
 8004626:	bf00      	nop
 8004628:	20006624 	.word	0x20006624

0800462c <xTaskRemoveFromEventList>:
{
 800462c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462e:	68c3      	ldr	r3, [r0, #12]
 8004630:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004632:	b954      	cbnz	r4, 800464a <xTaskRemoveFromEventList+0x1e>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	b672      	cpsid	i
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	b662      	cpsie	i
 8004648:	e7fe      	b.n	8004648 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800464a:	f104 0518 	add.w	r5, r4, #24
 800464e:	4628      	mov	r0, r5
 8004650:	f7fe fcdb 	bl	800300a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <xTaskRemoveFromEventList+0x70>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b9db      	cbnz	r3, 8004692 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800465a:	1d25      	adds	r5, r4, #4
 800465c:	4628      	mov	r0, r5
 800465e:	f7fe fcd4 	bl	800300a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004662:	490f      	ldr	r1, [pc, #60]	; (80046a0 <xTaskRemoveFromEventList+0x74>)
 8004664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004666:	2301      	movs	r3, #1
 8004668:	6808      	ldr	r0, [r1, #0]
 800466a:	4093      	lsls	r3, r2
 800466c:	4303      	orrs	r3, r0
 800466e:	2014      	movs	r0, #20
 8004670:	600b      	str	r3, [r1, #0]
 8004672:	4629      	mov	r1, r5
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <xTaskRemoveFromEventList+0x78>)
 8004676:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800467a:	f7fe fca3 	bl	8002fc4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <xTaskRemoveFromEventList+0x7c>)
 8004680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d906      	bls.n	8004698 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800468a:	2001      	movs	r0, #1
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <xTaskRemoveFromEventList+0x80>)
 800468e:	6018      	str	r0, [r3, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004692:	4629      	mov	r1, r5
 8004694:	4806      	ldr	r0, [pc, #24]	; (80046b0 <xTaskRemoveFromEventList+0x84>)
 8004696:	e7f0      	b.n	800467a <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8004698:	2000      	movs	r0, #0
}
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200066c8 	.word	0x200066c8
 80046a0:	200066d0 	.word	0x200066d0
 80046a4:	20006630 	.word	0x20006630
 80046a8:	20006624 	.word	0x20006624
 80046ac:	20006748 	.word	0x20006748
 80046b0:	20006704 	.word	0x20006704

080046b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <vTaskInternalSetTimeOutState+0x10>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <vTaskInternalSetTimeOutState+0x14>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6043      	str	r3, [r0, #4]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20006700 	.word	0x20006700
 80046c8:	20006744 	.word	0x20006744

080046cc <xTaskCheckForTimeOut>:
{
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80046d0:	4605      	mov	r5, r0
 80046d2:	b950      	cbnz	r0, 80046ea <xTaskCheckForTimeOut+0x1e>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	b672      	cpsid	i
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	b662      	cpsie	i
 80046e8:	e7fe      	b.n	80046e8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80046ea:	b951      	cbnz	r1, 8004702 <xTaskCheckForTimeOut+0x36>
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	b672      	cpsid	i
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	b662      	cpsie	i
 8004700:	e7fe      	b.n	8004700 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004702:	f7fe fcff 	bl	8003104 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004708:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800470a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	1c58      	adds	r0, r3, #1
 8004710:	d00e      	beq.n	8004730 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004712:	480d      	ldr	r0, [pc, #52]	; (8004748 <xTaskCheckForTimeOut+0x7c>)
 8004714:	682e      	ldr	r6, [r5, #0]
 8004716:	6800      	ldr	r0, [r0, #0]
 8004718:	4286      	cmp	r6, r0
 800471a:	d001      	beq.n	8004720 <xTaskCheckForTimeOut+0x54>
 800471c:	428a      	cmp	r2, r1
 800471e:	d20e      	bcs.n	800473e <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004720:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004722:	429a      	cmp	r2, r3
 8004724:	d209      	bcs.n	800473a <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8004726:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004728:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800472a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800472c:	f7ff ffc2 	bl	80046b4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004730:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004732:	f7fe fd0d 	bl	8003150 <vPortExitCritical>
}
 8004736:	4620      	mov	r0, r4
 8004738:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800473e:	2401      	movs	r4, #1
 8004740:	e7f7      	b.n	8004732 <xTaskCheckForTimeOut+0x66>
 8004742:	bf00      	nop
 8004744:	20006744 	.word	0x20006744
 8004748:	20006700 	.word	0x20006700

0800474c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800474c:	2201      	movs	r2, #1
 800474e:	4b01      	ldr	r3, [pc, #4]	; (8004754 <vTaskMissedYield+0x8>)
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	4770      	bx	lr
 8004754:	20006748 	.word	0x20006748

08004758 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <xTaskGetSchedulerState+0x18>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b133      	cbz	r3, 800476c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <xTaskGetSchedulerState+0x1c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004764:	bf0c      	ite	eq
 8004766:	2002      	moveq	r0, #2
 8004768:	2000      	movne	r0, #0
 800476a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800476c:	2001      	movs	r0, #1
	}
 800476e:	4770      	bx	lr
 8004770:	20006718 	.word	0x20006718
 8004774:	200066c8 	.word	0x200066c8

08004778 <xTaskPriorityInherit>:
	{
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800477c:	4604      	mov	r4, r0
 800477e:	2800      	cmp	r0, #0
 8004780:	d035      	beq.n	80047ee <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <xTaskPriorityInherit+0x9c>)
 8004784:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004786:	6811      	ldr	r1, [r2, #0]
 8004788:	4617      	mov	r7, r2
 800478a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800478c:	428b      	cmp	r3, r1
 800478e:	d237      	bcs.n	8004800 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004790:	6982      	ldr	r2, [r0, #24]
 8004792:	2a00      	cmp	r2, #0
 8004794:	db04      	blt.n	80047a0 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800479a:	f1c2 0207 	rsb	r2, r2, #7
 800479e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047a0:	4d1d      	ldr	r5, [pc, #116]	; (8004818 <xTaskPriorityInherit+0xa0>)
 80047a2:	2614      	movs	r6, #20
 80047a4:	6962      	ldr	r2, [r4, #20]
 80047a6:	fb06 5303 	mla	r3, r6, r3, r5
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d122      	bne.n	80047f4 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ae:	f104 0804 	add.w	r8, r4, #4
 80047b2:	4640      	mov	r0, r8
 80047b4:	f7fe fc29 	bl	800300a <uxListRemove>
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <xTaskPriorityInherit+0xa4>)
 80047ba:	b948      	cbnz	r0, 80047d0 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80047bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80047be:	4346      	muls	r6, r0
 80047c0:	59aa      	ldr	r2, [r5, r6]
 80047c2:	b92a      	cbnz	r2, 80047d0 <xTaskPriorityInherit+0x58>
 80047c4:	2101      	movs	r1, #1
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4081      	lsls	r1, r0
 80047ca:	ea22 0201 	bic.w	r2, r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d0:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047d2:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047d6:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047d8:	2401      	movs	r4, #1
 80047da:	fa04 f002 	lsl.w	r0, r4, r2
 80047de:	4308      	orrs	r0, r1
 80047e0:	4641      	mov	r1, r8
 80047e2:	6018      	str	r0, [r3, #0]
 80047e4:	2014      	movs	r0, #20
 80047e6:	fb00 5002 	mla	r0, r0, r2, r5
 80047ea:	f7fe fbeb 	bl	8002fc4 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80047ee:	4620      	mov	r0, r4
	}
 80047f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047f4:	683b      	ldr	r3, [r7, #0]
				xReturn = pdTRUE;
 80047f6:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8004804:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004806:	42a0      	cmp	r0, r4
 8004808:	bf2c      	ite	cs
 800480a:	2000      	movcs	r0, #0
 800480c:	2001      	movcc	r0, #1
 800480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004812:	bf00      	nop
 8004814:	20006624 	.word	0x20006624
 8004818:	20006630 	.word	0x20006630
 800481c:	200066d0 	.word	0x200066d0

08004820 <xTaskPriorityDisinherit>:
	{
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004822:	4604      	mov	r4, r0
 8004824:	b908      	cbnz	r0, 800482a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004826:	2000      	movs	r0, #0
 8004828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <xTaskPriorityDisinherit+0x9c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4298      	cmp	r0, r3
 8004830:	d00a      	beq.n	8004848 <xTaskPriorityDisinherit+0x28>
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	b672      	cpsid	i
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	b662      	cpsie	i
 8004846:	e7fe      	b.n	8004846 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8004848:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800484a:	b953      	cbnz	r3, 8004862 <xTaskPriorityDisinherit+0x42>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	b672      	cpsid	i
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	b662      	cpsie	i
 8004860:	e7fe      	b.n	8004860 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004862:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004864:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004866:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004868:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800486a:	4291      	cmp	r1, r2
 800486c:	d0db      	beq.n	8004826 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1d9      	bne.n	8004826 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004872:	1d05      	adds	r5, r0, #4
 8004874:	4e12      	ldr	r6, [pc, #72]	; (80048c0 <xTaskPriorityDisinherit+0xa0>)
 8004876:	4628      	mov	r0, r5
 8004878:	f7fe fbc7 	bl	800300a <uxListRemove>
 800487c:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <xTaskPriorityDisinherit+0xa4>)
 800487e:	b950      	cbnz	r0, 8004896 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004880:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004882:	2114      	movs	r1, #20
 8004884:	4379      	muls	r1, r7
 8004886:	5873      	ldr	r3, [r6, r1]
 8004888:	b92b      	cbnz	r3, 8004896 <xTaskPriorityDisinherit+0x76>
 800488a:	2001      	movs	r0, #1
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	40b8      	lsls	r0, r7
 8004890:	ea23 0300 	bic.w	r3, r3, r0
 8004894:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004896:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004898:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800489c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80048a0:	2401      	movs	r4, #1
 80048a2:	6811      	ldr	r1, [r2, #0]
 80048a4:	fa04 f003 	lsl.w	r0, r4, r3
 80048a8:	4308      	orrs	r0, r1
 80048aa:	4629      	mov	r1, r5
 80048ac:	6010      	str	r0, [r2, #0]
 80048ae:	2014      	movs	r0, #20
 80048b0:	fb00 6003 	mla	r0, r0, r3, r6
 80048b4:	f7fe fb86 	bl	8002fc4 <vListInsertEnd>
					xReturn = pdTRUE;
 80048b8:	4620      	mov	r0, r4
	}
 80048ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048bc:	20006624 	.word	0x20006624
 80048c0:	20006630 	.word	0x20006630
 80048c4:	200066d0 	.word	0x200066d0

080048c8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80048ca:	4604      	mov	r4, r0
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d04f      	beq.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 80048d0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80048d2:	b952      	cbnz	r2, 80048ea <vTaskPriorityDisinheritAfterTimeout+0x22>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	b672      	cpsid	i
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	b662      	cpsie	i
 80048e8:	e7fe      	b.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80048ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048ec:	4299      	cmp	r1, r3
 80048ee:	bf38      	it	cc
 80048f0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80048f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d03b      	beq.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048f8:	2a01      	cmp	r2, #1
 80048fa:	d139      	bne.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 80048fc:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	4290      	cmp	r0, r2
 8004902:	d10a      	bne.n	800491a <vTaskPriorityDisinheritAfterTimeout+0x52>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	b672      	cpsid	i
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	b662      	cpsie	i
 8004918:	e7fe      	b.n	8004918 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800491a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800491c:	2614      	movs	r6, #20
 800491e:	4d16      	ldr	r5, [pc, #88]	; (8004978 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004920:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8004922:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004924:	fb06 5303 	mla	r3, r6, r3, r5
 8004928:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	bfa4      	itt	ge
 800492c:	f1c1 0107 	rsbge	r1, r1, #7
 8004930:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004932:	429a      	cmp	r2, r3
 8004934:	d11c      	bne.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004936:	1d07      	adds	r7, r0, #4
 8004938:	4638      	mov	r0, r7
 800493a:	f7fe fb66 	bl	800300a <uxListRemove>
 800493e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004940:	4c0e      	ldr	r4, [pc, #56]	; (800497c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8004942:	b940      	cbnz	r0, 8004956 <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004944:	4356      	muls	r6, r2
 8004946:	59ab      	ldr	r3, [r5, r6]
 8004948:	b92b      	cbnz	r3, 8004956 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800494a:	2101      	movs	r1, #1
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	4091      	lsls	r1, r2
 8004950:	ea23 0301 	bic.w	r3, r3, r1
 8004954:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8004956:	2301      	movs	r3, #1
 8004958:	6821      	ldr	r1, [r4, #0]
 800495a:	2014      	movs	r0, #20
 800495c:	4093      	lsls	r3, r2
 800495e:	fb00 5002 	mla	r0, r0, r2, r5
 8004962:	430b      	orrs	r3, r1
 8004964:	4639      	mov	r1, r7
 8004966:	6023      	str	r3, [r4, #0]
	}
 8004968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800496c:	f7fe bb2a 	b.w	8002fc4 <vListInsertEnd>
 8004970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004972:	bf00      	nop
 8004974:	20006624 	.word	0x20006624
 8004978:	20006630 	.word	0x20006630
 800497c:	200066d0 	.word	0x200066d0

08004980 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <pvTaskIncrementMutexHeldCount+0x14>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	b11a      	cbz	r2, 800498e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800498a:	3201      	adds	r2, #1
 800498c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800498e:	6818      	ldr	r0, [r3, #0]
	}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20006624 	.word	0x20006624

08004998 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8004998:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800499a:	482b      	ldr	r0, [pc, #172]	; (8004a48 <tcpip_thread+0xb0>)
 800499c:	f008 fee1 	bl	800d762 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <tcpip_thread+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b113      	cbz	r3, 80049ac <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 80049a6:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <tcpip_thread+0xb8>)
 80049a8:	6810      	ldr	r0, [r2, #0]
 80049aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80049ac:	4d26      	ldr	r5, [pc, #152]	; (8004a48 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80049ae:	4f29      	ldr	r7, [pc, #164]	; (8004a54 <tcpip_thread+0xbc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80049b0:	4e29      	ldr	r6, [pc, #164]	; (8004a58 <tcpip_thread+0xc0>)
  sleeptime = sys_timeouts_sleeptime();
 80049b2:	f008 fae7 	bl	800cf84 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80049b6:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80049b8:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80049ba:	d113      	bne.n	80049e4 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 80049bc:	4628      	mov	r0, r5
 80049be:	f008 fed5 	bl	800d76c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80049c2:	2200      	movs	r2, #0
 80049c4:	a901      	add	r1, sp, #4
 80049c6:	4638      	mov	r0, r7
 80049c8:	f008 fe88 	bl	800d6dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80049cc:	4628      	mov	r0, r5
 80049ce:	f008 fec8 	bl	800d762 <sys_mutex_lock>
    if (msg == NULL) {
 80049d2:	9c01      	ldr	r4, [sp, #4]
 80049d4:	b9cc      	cbnz	r4, 8004a0a <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80049d6:	4633      	mov	r3, r6
 80049d8:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80049da:	4920      	ldr	r1, [pc, #128]	; (8004a5c <tcpip_thread+0xc4>)
 80049dc:	4820      	ldr	r0, [pc, #128]	; (8004a60 <tcpip_thread+0xc8>)
 80049de:	f00a f891 	bl	800eb04 <iprintf>
 80049e2:	e7e6      	b.n	80049b2 <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 80049e4:	b910      	cbnz	r0, 80049ec <tcpip_thread+0x54>
    sys_check_timeouts();
 80049e6:	f008 faab 	bl	800cf40 <sys_check_timeouts>
 80049ea:	e7e2      	b.n	80049b2 <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 80049ec:	4628      	mov	r0, r5
 80049ee:	f008 febd 	bl	800d76c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80049f2:	4622      	mov	r2, r4
 80049f4:	a901      	add	r1, sp, #4
 80049f6:	4638      	mov	r0, r7
 80049f8:	f008 fe70 	bl	800d6dc <sys_arch_mbox_fetch>
 80049fc:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80049fe:	4628      	mov	r0, r5
 8004a00:	f008 feaf 	bl	800d762 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8004a04:	3401      	adds	r4, #1
 8004a06:	d0ee      	beq.n	80049e6 <tcpip_thread+0x4e>
 8004a08:	e7e3      	b.n	80049d2 <tcpip_thread+0x3a>
  switch (msg->type) {
 8004a0a:	7823      	ldrb	r3, [r4, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d011      	beq.n	8004a34 <tcpip_thread+0x9c>
 8004a10:	d304      	bcc.n	8004a1c <tcpip_thread+0x84>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d014      	beq.n	8004a40 <tcpip_thread+0xa8>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004a16:	4633      	mov	r3, r6
 8004a18:	22cf      	movs	r2, #207	; 0xcf
 8004a1a:	e7de      	b.n	80049da <tcpip_thread+0x42>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8004a1c:	1d20      	adds	r0, r4, #4
 8004a1e:	c80b      	ldmia	r0, {r0, r1, r3}
 8004a20:	4798      	blx	r3
 8004a22:	b110      	cbz	r0, 8004a2a <tcpip_thread+0x92>
        pbuf_free(msg->msg.inp.p);
 8004a24:	6860      	ldr	r0, [r4, #4]
 8004a26:	f004 f971 	bl	8008d0c <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004a2e:	f003 ff17 	bl	8008860 <memp_free>
 8004a32:	e7be      	b.n	80049b2 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004a34:	68a0      	ldr	r0, [r4, #8]
 8004a36:	6863      	ldr	r3, [r4, #4]
 8004a38:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	2008      	movs	r0, #8
 8004a3e:	e7f6      	b.n	8004a2e <tcpip_thread+0x96>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	68a0      	ldr	r0, [r4, #8]
 8004a44:	4798      	blx	r3
 8004a46:	e7b4      	b.n	80049b2 <tcpip_thread+0x1a>
 8004a48:	20007080 	.word	0x20007080
 8004a4c:	2000674c 	.word	0x2000674c
 8004a50:	20006750 	.word	0x20006750
 8004a54:	20006754 	.word	0x20006754
 8004a58:	0800ffa4 	.word	0x0800ffa4
 8004a5c:	0800ffd4 	.word	0x0800ffd4
 8004a60:	0800fff2 	.word	0x0800fff2

08004a64 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8004a68:	4810      	ldr	r0, [pc, #64]	; (8004aac <tcpip_try_callback+0x48>)
{
 8004a6a:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8004a6c:	f008 fe58 	bl	800d720 <sys_mbox_valid>
 8004a70:	b930      	cbnz	r0, 8004a80 <tcpip_try_callback+0x1c>
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <tcpip_try_callback+0x4c>)
 8004a74:	f240 125d 	movw	r2, #349	; 0x15d
 8004a78:	490e      	ldr	r1, [pc, #56]	; (8004ab4 <tcpip_try_callback+0x50>)
 8004a7a:	480f      	ldr	r0, [pc, #60]	; (8004ab8 <tcpip_try_callback+0x54>)
 8004a7c:	f00a f842 	bl	800eb04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8004a80:	2008      	movs	r0, #8
 8004a82:	f003 fed1 	bl	8008828 <memp_malloc>
  if (msg == NULL) {
 8004a86:	4604      	mov	r4, r0
 8004a88:	b160      	cbz	r0, 8004aa4 <tcpip_try_callback+0x40>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8004a8a:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
 8004a8c:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8004a8e:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8004a90:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8004a92:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8004a94:	4805      	ldr	r0, [pc, #20]	; (8004aac <tcpip_try_callback+0x48>)
 8004a96:	f008 fe17 	bl	800d6c8 <sys_mbox_trypost>
 8004a9a:	b128      	cbz	r0, 8004aa8 <tcpip_try_callback+0x44>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	2008      	movs	r0, #8
 8004aa0:	f003 fede 	bl	8008860 <memp_free>
    return ERR_MEM;
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
}
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	bf00      	nop
 8004aac:	20006754 	.word	0x20006754
 8004ab0:	0800ffa4 	.word	0x0800ffa4
 8004ab4:	0800ff97 	.word	0x0800ff97
 8004ab8:	0800fff2 	.word	0x0800fff2

08004abc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8004abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004abe:	4605      	mov	r5, r0
 8004ac0:	460c      	mov	r4, r1
  lwip_init();
 8004ac2:	f000 ffc6 	bl	8005a52 <lwip_init>

  tcpip_init_done = initfunc;
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8004ac8:	2106      	movs	r1, #6
 8004aca:	4812      	ldr	r0, [pc, #72]	; (8004b14 <tcpip_init+0x58>)
  tcpip_init_done = initfunc;
 8004acc:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <tcpip_init+0x5c>)
 8004ad0:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8004ad2:	f008 fde7 	bl	800d6a4 <sys_mbox_new>
 8004ad6:	b130      	cbz	r0, 8004ae6 <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <tcpip_init+0x60>)
 8004ada:	f240 2261 	movw	r2, #609	; 0x261
 8004ade:	4910      	ldr	r1, [pc, #64]	; (8004b20 <tcpip_init+0x64>)
 8004ae0:	4810      	ldr	r0, [pc, #64]	; (8004b24 <tcpip_init+0x68>)
 8004ae2:	f00a f80f 	bl	800eb04 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8004ae6:	4810      	ldr	r0, [pc, #64]	; (8004b28 <tcpip_init+0x6c>)
 8004ae8:	f008 fe2c 	bl	800d744 <sys_mutex_new>
 8004aec:	b130      	cbz	r0, 8004afc <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <tcpip_init+0x60>)
 8004af0:	f240 2265 	movw	r2, #613	; 0x265
 8004af4:	490d      	ldr	r1, [pc, #52]	; (8004b2c <tcpip_init+0x70>)
 8004af6:	480b      	ldr	r0, [pc, #44]	; (8004b24 <tcpip_init+0x68>)
 8004af8:	f00a f804 	bl	800eb04 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b02:	490b      	ldr	r1, [pc, #44]	; (8004b30 <tcpip_init+0x74>)
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	480b      	ldr	r0, [pc, #44]	; (8004b34 <tcpip_init+0x78>)
 8004b08:	f008 fe33 	bl	800d772 <sys_thread_new>
}
 8004b0c:	b003      	add	sp, #12
 8004b0e:	bd30      	pop	{r4, r5, pc}
 8004b10:	2000674c 	.word	0x2000674c
 8004b14:	20006754 	.word	0x20006754
 8004b18:	20006750 	.word	0x20006750
 8004b1c:	0800ffa4 	.word	0x0800ffa4
 8004b20:	0800ff46 	.word	0x0800ff46
 8004b24:	0800fff2 	.word	0x0800fff2
 8004b28:	20007080 	.word	0x20007080
 8004b2c:	0800ff69 	.word	0x0800ff69
 8004b30:	08004999 	.word	0x08004999
 8004b34:	0800ff8a 	.word	0x0800ff8a

08004b38 <httpc_tcp_sent>:
  /* nothing to do here for now */
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(len);
  return ERR_OK;
}
 8004b38:	2000      	movs	r0, #0
 8004b3a:	4770      	bx	lr

08004b3c <httpc_get_internal_addr>:
}

/** Start the http request when the server IP addr is known */
static err_t
httpc_get_internal_addr(httpc_state_t* req, const ip_addr_t *ipaddr)
{
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	460d      	mov	r5, r1
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 8004b40:	4604      	mov	r4, r0
 8004b42:	b930      	cbnz	r0, 8004b52 <httpc_get_internal_addr+0x16>
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <httpc_get_internal_addr+0x30>)
 8004b46:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004b4a:	4909      	ldr	r1, [pc, #36]	; (8004b70 <httpc_get_internal_addr+0x34>)
 8004b4c:	4809      	ldr	r0, [pc, #36]	; (8004b74 <httpc_get_internal_addr+0x38>)
 8004b4e:	f009 ffd9 	bl	800eb04 <iprintf>

  if (&req->remote_addr != ipaddr) {
 8004b52:	1d21      	adds	r1, r4, #4
    /* fill in remote addr if called externally */
    req->remote_addr = *ipaddr;
  }

  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8004b54:	8922      	ldrh	r2, [r4, #8]
 8004b56:	6820      	ldr	r0, [r4, #0]
  if (&req->remote_addr != ipaddr) {
 8004b58:	42a9      	cmp	r1, r5
    req->remote_addr = *ipaddr;
 8004b5a:	bf1c      	itt	ne
 8004b5c:	682b      	ldrne	r3, [r5, #0]
 8004b5e:	6063      	strne	r3, [r4, #4]
  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <httpc_get_internal_addr+0x3c>)
  if (err == ERR_OK) {
    return ERR_OK;
  }
  LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("tcp_connect failed: %d\n", (int)err));
  return err;
}
 8004b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8004b66:	f004 be75 	b.w	8009854 <tcp_connect>
 8004b6a:	bf00      	nop
 8004b6c:	08010176 	.word	0x08010176
 8004b70:	080101b2 	.word	0x080101b2
 8004b74:	0800fff2 	.word	0x0800fff2
 8004b78:	08004e8f 	.word	0x08004e8f

08004b7c <httpc_free_state>:
{
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4605      	mov	r5, r0
  if (req->request != NULL) {
 8004b80:	6900      	ldr	r0, [r0, #16]
 8004b82:	b118      	cbz	r0, 8004b8c <httpc_free_state+0x10>
    pbuf_free(req->request);
 8004b84:	f004 f8c2 	bl	8008d0c <pbuf_free>
    req->request = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	612b      	str	r3, [r5, #16]
  if (req->rx_hdrs != NULL) {
 8004b8c:	6968      	ldr	r0, [r5, #20]
 8004b8e:	b118      	cbz	r0, 8004b98 <httpc_free_state+0x1c>
    pbuf_free(req->rx_hdrs);
 8004b90:	f004 f8bc 	bl	8008d0c <pbuf_free>
    req->rx_hdrs = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	616b      	str	r3, [r5, #20]
  tpcb = req->pcb;
 8004b98:	682c      	ldr	r4, [r5, #0]
  mem_free(req);
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f003 fbb2 	bl	8008304 <mem_free>
  if (tpcb != NULL) {
 8004ba0:	b90c      	cbnz	r4, 8004ba6 <httpc_free_state+0x2a>
  return ERR_OK;
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
    altcp_arg(tpcb, NULL);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f004 fdab 	bl	8009704 <tcp_arg>
    altcp_recv(tpcb, NULL);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f004 fdab 	bl	800970c <tcp_recv>
    altcp_err(tpcb, NULL);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f004 fdd7 	bl	800976c <tcp_err>
    altcp_poll(tpcb, NULL, 0);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	f004 fdea 	bl	800979c <tcp_poll>
    altcp_sent(tpcb, NULL);
 8004bc8:	4620      	mov	r0, r4
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f004 fdb6 	bl	800973c <tcp_sent>
    r = altcp_close(tpcb);
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f005 f9bb 	bl	8009f4c <tcp_close>
    if (r != ERR_OK) {
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0e3      	beq.n	8004ba2 <httpc_free_state+0x26>
      altcp_abort(tpcb);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f004 fff0 	bl	8009bc0 <tcp_abort>
      return ERR_ABRT;
 8004be0:	f06f 000c 	mvn.w	r0, #12
}
 8004be4:	bd38      	pop	{r3, r4, r5, pc}

08004be6 <httpc_close>:
{
 8004be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (req != NULL) {
 8004be8:	4604      	mov	r4, r0
 8004bea:	b170      	cbz	r0, 8004c0a <httpc_close+0x24>
    if (req->conn_settings != NULL) {
 8004bec:	6a00      	ldr	r0, [r0, #32]
 8004bee:	b130      	cbz	r0, 8004bfe <httpc_close+0x18>
      if (req->conn_settings->result_fn != NULL) {
 8004bf0:	6885      	ldr	r5, [r0, #8]
 8004bf2:	b125      	cbz	r5, 8004bfe <httpc_close+0x18>
        req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bfa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004bfc:	47a8      	blx	r5
    return httpc_free_state(req);
 8004bfe:	4620      	mov	r0, r4
}
 8004c00:	b003      	add	sp, #12
 8004c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return httpc_free_state(req);
 8004c06:	f7ff bfb9 	b.w	8004b7c <httpc_free_state>
}
 8004c0a:	b003      	add	sp, #12
 8004c0c:	bd30      	pop	{r4, r5, pc}

08004c0e <httpc_tcp_err>:
{
 8004c0e:	460b      	mov	r3, r1
  if (req != NULL) {
 8004c10:	b120      	cbz	r0, 8004c1c <httpc_tcp_err+0xe>
    req->pcb = NULL;
 8004c12:	2200      	movs	r2, #0
    httpc_close(req, HTTPC_RESULT_ERR_CLOSED, 0, err);
 8004c14:	2104      	movs	r1, #4
    req->pcb = NULL;
 8004c16:	6002      	str	r2, [r0, #0]
    httpc_close(req, HTTPC_RESULT_ERR_CLOSED, 0, err);
 8004c18:	f7ff bfe5 	b.w	8004be6 <httpc_close>
 8004c1c:	4770      	bx	lr
	...

08004c20 <httpc_tcp_recv>:
{
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	b089      	sub	sp, #36	; 0x24
 8004c26:	4604      	mov	r4, r0
 8004c28:	468a      	mov	sl, r1
  if (p == NULL) {
 8004c2a:	4615      	mov	r5, r2
{
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  if (p == NULL) {
 8004c32:	b9aa      	cbnz	r2, 8004c60 <httpc_tcp_recv+0x40>
    if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d10f      	bne.n	8004c58 <httpc_tcp_recv+0x38>
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 8004c38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004c3a:	1c4b      	adds	r3, r1, #1
 8004c3c:	d00e      	beq.n	8004c5c <httpc_tcp_recv+0x3c>
 8004c3e:	6a85      	ldr	r5, [r0, #40]	; 0x28
      result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	bf14      	ite	ne
 8004c44:	2109      	movne	r1, #9
 8004c46:	2100      	moveq	r1, #0
    return httpc_close(req, result, req->rx_status, ERR_OK);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	8b62      	ldrh	r2, [r4, #26]
              return httpc_close(req, HTTPC_RESULT_LOCAL_ABORT, req->rx_status, err);
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ffca 	bl	8004be6 <httpc_close>
}
 8004c52:	b009      	add	sp, #36	; 0x24
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      result = HTTPC_RESULT_ERR_CLOSED;
 8004c58:	2104      	movs	r1, #4
 8004c5a:	e7f5      	b.n	8004c48 <httpc_tcp_recv+0x28>
      result = HTTPC_RESULT_OK;
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	e7f3      	b.n	8004c48 <httpc_tcp_recv+0x28>
  if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	f000 80d2 	beq.w	8004e0a <httpc_tcp_recv+0x1ea>
    if (req->rx_hdrs == NULL) {
 8004c66:	6940      	ldr	r0, [r0, #20]
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f040 80ba 	bne.w	8004de2 <httpc_tcp_recv+0x1c2>
      req->rx_hdrs = p;
 8004c6e:	6162      	str	r2, [r4, #20]
    if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8004c70:	f894 8030 	ldrb.w	r8, [r4, #48]	; 0x30
 8004c74:	f1b8 0f00 	cmp.w	r8, #0
 8004c78:	d15e      	bne.n	8004d38 <httpc_tcp_recv+0x118>
      err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status, &status_str_off);
 8004c7a:	6967      	ldr	r7, [r4, #20]
  if (end1 != 0xFFFF) {
 8004c7c:	f64f 7bff 	movw	fp, #65535	; 0xffff
  u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8004c80:	4643      	mov	r3, r8
 8004c82:	2202      	movs	r2, #2
 8004c84:	496c      	ldr	r1, [pc, #432]	; (8004e38 <httpc_tcp_recv+0x218>)
 8004c86:	4638      	mov	r0, r7
 8004c88:	f004 fbf5 	bl	8009476 <pbuf_memfind>
  if (end1 != 0xFFFF) {
 8004c8c:	4558      	cmp	r0, fp
  u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8004c8e:	4606      	mov	r6, r0
  if (end1 != 0xFFFF) {
 8004c90:	d052      	beq.n	8004d38 <httpc_tcp_recv+0x118>
    space1 = pbuf_memfind(p, " ", 1, 0);
 8004c92:	4643      	mov	r3, r8
 8004c94:	2201      	movs	r2, #1
 8004c96:	4969      	ldr	r1, [pc, #420]	; (8004e3c <httpc_tcp_recv+0x21c>)
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f004 fbec 	bl	8009476 <pbuf_memfind>
    if (space1 != 0xFFFF) {
 8004c9e:	4558      	cmp	r0, fp
    space1 = pbuf_memfind(p, " ", 1, 0);
 8004ca0:	4681      	mov	r9, r0
    if (space1 != 0xFFFF) {
 8004ca2:	d049      	beq.n	8004d38 <httpc_tcp_recv+0x118>
      if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0)  && (pbuf_get_at(p, 6) == '.')) {
 8004ca4:	2305      	movs	r3, #5
 8004ca6:	4a66      	ldr	r2, [pc, #408]	; (8004e40 <httpc_tcp_recv+0x220>)
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4638      	mov	r0, r7
 8004cac:	f004 fbb2 	bl	8009414 <pbuf_memcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d141      	bne.n	8004d38 <httpc_tcp_recv+0x118>
 8004cb4:	2106      	movs	r1, #6
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f004 fb95 	bl	80093e6 <pbuf_get_at>
 8004cbc:	282e      	cmp	r0, #46	; 0x2e
 8004cbe:	d13b      	bne.n	8004d38 <httpc_tcp_recv+0x118>
        u16_t version = pbuf_get_at(p, 5) - '0';
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f004 fb8f 	bl	80093e6 <pbuf_get_at>
 8004cc8:	3830      	subs	r0, #48	; 0x30
        version |= pbuf_get_at(p, 7) - '0';
 8004cca:	2107      	movs	r1, #7
        u16_t version = pbuf_get_at(p, 5) - '0';
 8004ccc:	fa1f f880 	uxth.w	r8, r0
        version |= pbuf_get_at(p, 7) - '0';
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f004 fb88 	bl	80093e6 <pbuf_get_at>
 8004cd6:	3830      	subs	r0, #48	; 0x30
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4958      	ldr	r1, [pc, #352]	; (8004e3c <httpc_tcp_recv+0x21c>)
        version |= pbuf_get_at(p, 7) - '0';
 8004cdc:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8004ce0:	f109 0801 	add.w	r8, r9, #1
 8004ce4:	fa1f f888 	uxth.w	r8, r8
        *http_version = version;
 8004ce8:	8320      	strh	r0, [r4, #24]
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8004cea:	4638      	mov	r0, r7
 8004cec:	4643      	mov	r3, r8
 8004cee:	f004 fbc2 	bl	8009476 <pbuf_memfind>
        if (space2 != 0xFFFF) {
 8004cf2:	4558      	cmp	r0, fp
        memset(status_num, 0, sizeof(status_num));
 8004cf4:	f04f 0300 	mov.w	r3, #0
        if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 8004cf8:	a904      	add	r1, sp, #16
          status_num_len = space2 - space1 - 1;
 8004cfa:	bf14      	ite	ne
 8004cfc:	eba0 0909 	subne.w	r9, r0, r9
          status_num_len = end1 - space1 - 1;
 8004d00:	eba6 0909 	subeq.w	r9, r6, r9
        memset(status_num, 0, sizeof(status_num));
 8004d04:	9304      	str	r3, [sp, #16]
        if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 8004d06:	4638      	mov	r0, r7
          status_num_len = end1 - space1 - 1;
 8004d08:	f109 39ff 	add.w	r9, r9, #4294967295
        memset(status_num, 0, sizeof(status_num));
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	f8ad 3018 	strh.w	r3, [sp, #24]
        if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 8004d12:	4643      	mov	r3, r8
 8004d14:	fa1f f289 	uxth.w	r2, r9
 8004d18:	f004 fa54 	bl	80091c4 <pbuf_copy_partial>
 8004d1c:	4581      	cmp	r9, r0
 8004d1e:	d10b      	bne.n	8004d38 <httpc_tcp_recv+0x118>
          int status = atoi(status_num);
 8004d20:	a804      	add	r0, sp, #16
 8004d22:	f009 fe66 	bl	800e9f2 <atoi>
          if ((status > 0) && (status <= 0xFFFF)) {
 8004d26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004d2a:	1e42      	subs	r2, r0, #1
 8004d2c:	429a      	cmp	r2, r3
        req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8004d2e:	bf9e      	ittt	ls
 8004d30:	2301      	movls	r3, #1
            *http_status = (u16_t)status;
 8004d32:	8360      	strhls	r0, [r4, #26]
        req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8004d34:	f884 3030 	strbls.w	r3, [r4, #48]	; 0x30
    if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8004d38:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d164      	bne.n	8004e0a <httpc_tcp_recv+0x1ea>
      err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 8004d40:	6967      	ldr	r7, [r4, #20]
  u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8004d42:	2300      	movs	r3, #0
 8004d44:	2204      	movs	r2, #4
 8004d46:	493f      	ldr	r1, [pc, #252]	; (8004e44 <httpc_tcp_recv+0x224>)
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f004 fb94 	bl	8009476 <pbuf_memfind>
  if (end1 < (0xFFFF - 2)) {
 8004d4e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004d52:	4298      	cmp	r0, r3
 8004d54:	d859      	bhi.n	8004e0a <httpc_tcp_recv+0x1ea>
    *content_length = HTTPC_CONTENT_LEN_INVALID;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
    *total_header_len = end1 + 4;
 8004d5a:	3004      	adds	r0, #4
    if (content_len_hdr != 0xFFFF) {
 8004d5c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8004d60:	2210      	movs	r2, #16
    *content_length = HTTPC_CONTENT_LEN_INVALID;
 8004d62:	62e3      	str	r3, [r4, #44]	; 0x2c
    *total_header_len = end1 + 4;
 8004d64:	b285      	uxth	r5, r0
    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8004d66:	2300      	movs	r3, #0
 8004d68:	4937      	ldr	r1, [pc, #220]	; (8004e48 <httpc_tcp_recv+0x228>)
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f004 fb83 	bl	8009476 <pbuf_memfind>
    if (content_len_hdr != 0xFFFF) {
 8004d70:	42b0      	cmp	r0, r6
    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8004d72:	4680      	mov	r8, r0
    if (content_len_hdr != 0xFFFF) {
 8004d74:	d022      	beq.n	8004dbc <httpc_tcp_recv+0x19c>
      u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8004d76:	4603      	mov	r3, r0
 8004d78:	2202      	movs	r2, #2
 8004d7a:	492f      	ldr	r1, [pc, #188]	; (8004e38 <httpc_tcp_recv+0x218>)
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f004 fb7a 	bl	8009476 <pbuf_memfind>
      if (content_len_line_end != 0xFFFF) {
 8004d82:	42b0      	cmp	r0, r6
 8004d84:	d01a      	beq.n	8004dbc <httpc_tcp_recv+0x19c>
        u16_t content_len_num_len = (u16_t)(content_len_line_end - content_len_hdr - 16);
 8004d86:	f5c8 467f 	rsb	r6, r8, #65280	; 0xff00
        memset(content_len_num, 0, sizeof(content_len_num));
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	2100      	movs	r1, #0
        u16_t content_len_num_len = (u16_t)(content_len_line_end - content_len_hdr - 16);
 8004d8e:	36f0      	adds	r6, #240	; 0xf0
 8004d90:	4430      	add	r0, r6
 8004d92:	b286      	uxth	r6, r0
        memset(content_len_num, 0, sizeof(content_len_num));
 8004d94:	eb0d 0002 	add.w	r0, sp, r2
 8004d98:	f009 feac 	bl	800eaf4 <memset>
        if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16) == content_len_num_len) {
 8004d9c:	f108 0310 	add.w	r3, r8, #16
 8004da0:	4632      	mov	r2, r6
 8004da2:	a904      	add	r1, sp, #16
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4638      	mov	r0, r7
 8004da8:	f004 fa0c 	bl	80091c4 <pbuf_copy_partial>
 8004dac:	4286      	cmp	r6, r0
 8004dae:	d105      	bne.n	8004dbc <httpc_tcp_recv+0x19c>
          int len = atoi(content_len_num);
 8004db0:	a804      	add	r0, sp, #16
 8004db2:	f009 fe1e 	bl	800e9f2 <atoi>
          if ((len >= 0) && ((u32_t)len < HTTPC_CONTENT_LEN_INVALID)) {
 8004db6:	2800      	cmp	r0, #0
 8004db8:	db00      	blt.n	8004dbc <httpc_tcp_recv+0x19c>
            *content_length = (u32_t)len;
 8004dba:	62e0      	str	r0, [r4, #44]	; 0x2c
        altcp_recved(pcb, total_header_len);
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f004 fc2a 	bl	8009618 <tcp_recved>
        if (req->conn_settings) {
 8004dc4:	6a23      	ldr	r3, [r4, #32]
 8004dc6:	b983      	cbnz	r3, 8004dea <httpc_tcp_recv+0x1ca>
        q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8004dc8:	4629      	mov	r1, r5
 8004dca:	6960      	ldr	r0, [r4, #20]
 8004dcc:	f004 f8f4 	bl	8008fb8 <pbuf_free_header>
        req->rx_hdrs = NULL;
 8004dd0:	2300      	movs	r3, #0
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8004dd2:	4605      	mov	r5, r0
        req->rx_hdrs = NULL;
 8004dd4:	6163      	str	r3, [r4, #20]
        req->parse_state = HTTPC_PARSE_RX_DATA;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8004ddc:	b9c8      	cbnz	r0, 8004e12 <httpc_tcp_recv+0x1f2>
  return ERR_OK;
 8004dde:	2000      	movs	r0, #0
 8004de0:	e737      	b.n	8004c52 <httpc_tcp_recv+0x32>
      pbuf_cat(req->rx_hdrs, p);
 8004de2:	4611      	mov	r1, r2
 8004de4:	f004 f924 	bl	8009030 <pbuf_cat>
 8004de8:	e742      	b.n	8004c70 <httpc_tcp_recv+0x50>
          if (req->conn_settings->headers_done_fn) {
 8004dea:	68de      	ldr	r6, [r3, #12]
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	d0eb      	beq.n	8004dc8 <httpc_tcp_recv+0x1a8>
            err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs, total_header_len, req->hdr_content_len);
 8004df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004df2:	4620      	mov	r0, r4
 8004df4:	6962      	ldr	r2, [r4, #20]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	462b      	mov	r3, r5
 8004dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004dfc:	47b0      	blx	r6
            if (err != ERR_OK) {
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0e1      	beq.n	8004dc8 <httpc_tcp_recv+0x1a8>
              return httpc_close(req, HTTPC_RESULT_LOCAL_ABORT, req->rx_status, err);
 8004e04:	8b62      	ldrh	r2, [r4, #26]
 8004e06:	2108      	movs	r1, #8
 8004e08:	e720      	b.n	8004c4c <httpc_tcp_recv+0x2c>
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8004e0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d1e5      	bne.n	8004dde <httpc_tcp_recv+0x1be>
    req->rx_content_len += p->tot_len;
 8004e12:	8929      	ldrh	r1, [r5, #8]
 8004e14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (req->recv_fn != NULL) {
 8004e16:	69e6      	ldr	r6, [r4, #28]
    req->rx_content_len += p->tot_len;
 8004e18:	440b      	add	r3, r1
 8004e1a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (req->recv_fn != NULL) {
 8004e1c:	b12e      	cbz	r6, 8004e2a <httpc_tcp_recv+0x20a>
      return req->recv_fn(req->callback_arg, pcb, p, r);
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	462a      	mov	r2, r5
 8004e22:	4651      	mov	r1, sl
 8004e24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e26:	47b0      	blx	r6
 8004e28:	e713      	b.n	8004c52 <httpc_tcp_recv+0x32>
      altcp_recved(pcb, p->tot_len);
 8004e2a:	4650      	mov	r0, sl
 8004e2c:	f004 fbf4 	bl	8009618 <tcp_recved>
      pbuf_free(p);
 8004e30:	4628      	mov	r0, r5
 8004e32:	f003 ff6b 	bl	8008d0c <pbuf_free>
 8004e36:	e7d2      	b.n	8004dde <httpc_tcp_recv+0x1be>
 8004e38:	08010160 	.word	0x08010160
 8004e3c:	08012b08 	.word	0x08012b08
 8004e40:	080101ca 	.word	0x080101ca
 8004e44:	0801015e 	.word	0x0801015e
 8004e48:	080101d0 	.word	0x080101d0

08004e4c <httpc_dns_found>:
/** DNS callback
 * If ipaddr is non-NULL, resolving succeeded and the request can be sent, otherwise it failed.
 */
static void
httpc_dns_found(const char* hostname, const ip_addr_t *ipaddr, void *arg)
{
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4614      	mov	r4, r2
  err_t err;
  httpc_result_t result;

  LWIP_UNUSED_ARG(hostname);

  if (ipaddr != NULL) {
 8004e50:	b159      	cbz	r1, 8004e6a <httpc_dns_found+0x1e>
    err = httpc_get_internal_addr(req, ipaddr);
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7ff fe72 	bl	8004b3c <httpc_get_internal_addr>
    if (err == ERR_OK) {
 8004e58:	4603      	mov	r3, r0
 8004e5a:	b150      	cbz	r0, 8004e72 <httpc_dns_found+0x26>
      return;
    }
    result = HTTPC_RESULT_ERR_CONNECT;
 8004e5c:	2102      	movs	r1, #2
    LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("httpc_dns_found: failed to resolve hostname: %s\n",
      hostname));
    result = HTTPC_RESULT_ERR_HOSTNAME;
    err = ERR_ARG;
  }
  httpc_close(req, result, 0, err);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	2200      	movs	r2, #0
}
 8004e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  httpc_close(req, result, 0, err);
 8004e66:	f7ff bebe 	b.w	8004be6 <httpc_close>
    result = HTTPC_RESULT_ERR_HOSTNAME;
 8004e6a:	2103      	movs	r1, #3
    err = ERR_ARG;
 8004e6c:	f06f 030f 	mvn.w	r3, #15
 8004e70:	e7f5      	b.n	8004e5e <httpc_dns_found+0x12>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <httpc_tcp_poll>:
  if (req != NULL) {
 8004e74:	b148      	cbz	r0, 8004e8a <httpc_tcp_poll+0x16>
    if (req->timeout_ticks) {
 8004e76:	68c3      	ldr	r3, [r0, #12]
 8004e78:	b10b      	cbz	r3, 8004e7e <httpc_tcp_poll+0xa>
      req->timeout_ticks--;
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60c3      	str	r3, [r0, #12]
    if (!req->timeout_ticks) {
 8004e7e:	68c3      	ldr	r3, [r0, #12]
 8004e80:	b91b      	cbnz	r3, 8004e8a <httpc_tcp_poll+0x16>
      return httpc_close(req, HTTPC_RESULT_ERR_TIMEOUT, 0, ERR_OK);
 8004e82:	461a      	mov	r2, r3
 8004e84:	2105      	movs	r1, #5
 8004e86:	f7ff beae 	b.w	8004be6 <httpc_close>
}
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	4770      	bx	lr

08004e8e <httpc_tcp_connected>:
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8004e8e:	6901      	ldr	r1, [r0, #16]
 8004e90:	2301      	movs	r3, #1
 8004e92:	894a      	ldrh	r2, [r1, #10]
 8004e94:	6849      	ldr	r1, [r1, #4]
 8004e96:	3a01      	subs	r2, #1
{
 8004e98:	b570      	push	{r4, r5, r6, lr}
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8004e9a:	b292      	uxth	r2, r2
{
 8004e9c:	4604      	mov	r4, r0
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	f006 ffca 	bl	800be38 <tcp_write>
  if (r != ERR_OK) {
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	b138      	cbz	r0, 8004eb8 <httpc_tcp_connected+0x2a>
     return httpc_close(req, HTTPC_RESULT_ERR_MEM, 0, r);
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4620      	mov	r0, r4
 8004eae:	2107      	movs	r1, #7
}
 8004eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     return httpc_close(req, HTTPC_RESULT_ERR_MEM, 0, r);
 8004eb4:	f7ff be97 	b.w	8004be6 <httpc_close>
  pbuf_free(req->request);
 8004eb8:	6920      	ldr	r0, [r4, #16]
 8004eba:	f003 ff27 	bl	8008d0c <pbuf_free>
  req->request = NULL;
 8004ebe:	6125      	str	r5, [r4, #16]
  altcp_output(req->pcb);
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	f007 fd1f 	bl	800c904 <tcp_output>
}
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ecc <httpc_create_request_string.isra.0.constprop.5>:
  }
  return err;
}

static int
httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int server_port, const char* uri,
 8004ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004edc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004f6c <httpc_create_request_string.isra.0.constprop.5+0xa0>
                            int use_host, char *buffer, size_t buffer_size)
{
  if (settings->use_proxy) {
 8004ee0:	b318      	cbz	r0, 8004f2a <httpc_create_request_string.isra.0.constprop.5+0x5e>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8004ee2:	b931      	cbnz	r1, 8004ef2 <httpc_create_request_string.isra.0.constprop.5+0x26>
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <httpc_create_request_string.isra.0.constprop.5+0x88>)
 8004ee6:	f240 12eb 	movw	r2, #491	; 0x1eb
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <httpc_create_request_string.isra.0.constprop.5+0x8c>)
 8004eec:	481b      	ldr	r0, [pc, #108]	; (8004f5c <httpc_create_request_string.isra.0.constprop.5+0x90>)
 8004eee:	f009 fe09 	bl	800eb04 <iprintf>
    if (server_port != HTTP_DEFAULT_PORT) {
 8004ef2:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8004ef6:	d00e      	beq.n	8004f16 <httpc_create_request_string.isra.0.constprop.5+0x4a>
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_PORT_FORMAT(server_name, server_port, uri, server_name));
 8004ef8:	9403      	str	r4, [sp, #12]
 8004efa:	4623      	mov	r3, r4
 8004efc:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f00:	4631      	mov	r1, r6
 8004f02:	9701      	str	r7, [sp, #4]
 8004f04:	4628      	mov	r0, r5
 8004f06:	f8cd 9000 	str.w	r9, [sp]
 8004f0a:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <httpc_create_request_string.isra.0.constprop.5+0x94>)
 8004f0c:	f009 fe4c 	bl	800eba8 <sniprintf>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
  } else {
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_FORMAT(uri));
  }
}
 8004f10:	b005      	add	sp, #20
 8004f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 8004f16:	9402      	str	r4, [sp, #8]
 8004f18:	4623      	mov	r3, r4
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <httpc_create_request_string.isra.0.constprop.5+0x98>)
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	e88d 0180 	stmia.w	sp, {r7, r8}
 8004f24:	f009 fe40 	bl	800eba8 <sniprintf>
 8004f28:	e7f2      	b.n	8004f10 <httpc_create_request_string.isra.0.constprop.5+0x44>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8004f2a:	b931      	cbnz	r1, 8004f3a <httpc_create_request_string.isra.0.constprop.5+0x6e>
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <httpc_create_request_string.isra.0.constprop.5+0x88>)
 8004f2e:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8004f32:	4909      	ldr	r1, [pc, #36]	; (8004f58 <httpc_create_request_string.isra.0.constprop.5+0x8c>)
 8004f34:	4809      	ldr	r0, [pc, #36]	; (8004f5c <httpc_create_request_string.isra.0.constprop.5+0x90>)
 8004f36:	f009 fde5 	bl	800eb04 <iprintf>
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <httpc_create_request_string.isra.0.constprop.5+0x9c>)
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	940d      	str	r4, [sp, #52]	; 0x34
 8004f44:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 8004f48:	b005      	add	sp, #20
 8004f4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8004f4e:	f009 be2b 	b.w	800eba8 <sniprintf>
 8004f52:	bf00      	nop
 8004f54:	08010176 	.word	0x08010176
 8004f58:	0801001a 	.word	0x0801001a
 8004f5c:	0800fff2 	.word	0x0800fff2
 8004f60:	0801002e 	.word	0x0801002e
 8004f64:	080100be 	.word	0x080100be
 8004f68:	08010115 	.word	0x08010115
 8004f6c:	08010088 	.word	0x08010088

08004f70 <httpc_init_connection_common.constprop.4>:

/** Initialize the connection struct */
static err_t
httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	b085      	sub	sp, #20
 8004f76:	461f      	mov	r7, r3
 8004f78:	4681      	mov	r9, r0
 8004f7a:	460e      	mov	r6, r1
  httpc_state_t *req;
#if HTTPC_DEBUG_REQUEST
  size_t server_name_len, uri_len;
#endif

  LWIP_ASSERT("uri != NULL", uri != NULL);
 8004f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
 8004f7e:	4692      	mov	sl, r2
  LWIP_ASSERT("uri != NULL", uri != NULL);
 8004f80:	b933      	cbnz	r3, 8004f90 <httpc_init_connection_common.constprop.4+0x20>
 8004f82:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <httpc_init_connection_common.constprop.4+0x100>)
 8004f84:	f240 2206 	movw	r2, #518	; 0x206
 8004f88:	493a      	ldr	r1, [pc, #232]	; (8005074 <httpc_init_connection_common.constprop.4+0x104>)
 8004f8a:	483b      	ldr	r0, [pc, #236]	; (8005078 <httpc_init_connection_common.constprop.4+0x108>)
 8004f8c:	f009 fdba 	bl	800eb04 <iprintf>

  /* get request len */
  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8004f90:	2500      	movs	r5, #0
 8004f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f94:	79b0      	ldrb	r0, [r6, #6]
 8004f96:	463a      	mov	r2, r7
 8004f98:	9501      	str	r5, [sp, #4]
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	9500      	str	r5, [sp, #0]
 8004f9e:	9703      	str	r7, [sp, #12]
 8004fa0:	f7ff ff94 	bl	8004ecc <httpc_create_request_string.isra.0.constprop.5>
  if ((req_len < 0) || (req_len > 0xFFFF)) {
 8004fa4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8004fa8:	4680      	mov	r8, r0
  if ((req_len < 0) || (req_len > 0xFFFF)) {
 8004faa:	4298      	cmp	r0, r3
 8004fac:	d850      	bhi.n	8005050 <httpc_init_connection_common.constprop.4+0xe0>
  mem_alloc_len = (mem_size_t)alloc_len;
  if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
    return ERR_VAL;
  }

  req = (httpc_state_t*)mem_malloc((mem_size_t)alloc_len);
 8004fae:	2034      	movs	r0, #52	; 0x34
 8004fb0:	f003 fb30 	bl	8008614 <mem_malloc>
  if(req == NULL) {
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d056      	beq.n	8005068 <httpc_init_connection_common.constprop.4+0xf8>
    return ERR_MEM;
  }
  memset(req, 0, sizeof(httpc_state_t));
 8004fba:	4629      	mov	r1, r5
 8004fbc:	2234      	movs	r2, #52	; 0x34
 8004fbe:	f009 fd99 	bl	800eaf4 <memset>
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 8004fc2:	f108 0b01 	add.w	fp, r8, #1
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8004fc6:	231e      	movs	r3, #30
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004fce:	fa1f f18b 	uxth.w	r1, fp
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8004fd2:	60e3      	str	r3, [r4, #12]
 8004fd4:	f04f 35ff 	mov.w	r5, #4294967295
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 8004fd8:	f003 ff00 	bl	8008ddc <pbuf_alloc>
 8004fdc:	6120      	str	r0, [r4, #16]
  if (req->request == NULL) {
 8004fde:	b930      	cbnz	r0, 8004fee <httpc_init_connection_common.constprop.4+0x7e>
  req->uri = req->server_name + server_name_len + 1;
  memcpy(req->uri, uri, uri_len + 1);
#endif
  req->pcb = altcp_new(settings->altcp_allocator);
  if(req->pcb == NULL) {
    httpc_free_state(req);
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7ff fdcb 	bl	8004b7c <httpc_free_state>
  req->conn_settings = settings;
  req->callback_arg = callback_arg;

  *connection = req;
  return ERR_OK;
}
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	b005      	add	sp, #20
 8004fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (req->request->next != NULL) {
 8004fee:	6803      	ldr	r3, [r0, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f5      	bne.n	8004fe0 <httpc_init_connection_common.constprop.4+0x70>
  req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8004ff4:	62e5      	str	r5, [r4, #44]	; 0x2c
  req->pcb = altcp_new(settings->altcp_allocator);
 8004ff6:	f004 fef5 	bl	8009de4 <tcp_new>
 8004ffa:	6020      	str	r0, [r4, #0]
  if(req->pcb == NULL) {
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d0ef      	beq.n	8004fe0 <httpc_init_connection_common.constprop.4+0x70>
  req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8005000:	79b3      	ldrb	r3, [r6, #6]
 8005002:	b103      	cbz	r3, 8005006 <httpc_init_connection_common.constprop.4+0x96>
 8005004:	88b7      	ldrh	r7, [r6, #4]
  altcp_arg(req->pcb, req);
 8005006:	4621      	mov	r1, r4
  req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8005008:	8127      	strh	r7, [r4, #8]
  altcp_arg(req->pcb, req);
 800500a:	f004 fb7b 	bl	8009704 <tcp_arg>
  altcp_recv(req->pcb, httpc_tcp_recv);
 800500e:	491b      	ldr	r1, [pc, #108]	; (800507c <httpc_init_connection_common.constprop.4+0x10c>)
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	f004 fb7b 	bl	800970c <tcp_recv>
  altcp_err(req->pcb, httpc_tcp_err);
 8005016:	491a      	ldr	r1, [pc, #104]	; (8005080 <httpc_init_connection_common.constprop.4+0x110>)
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	f004 fba7 	bl	800976c <tcp_err>
  altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 800501e:	2201      	movs	r2, #1
 8005020:	4918      	ldr	r1, [pc, #96]	; (8005084 <httpc_init_connection_common.constprop.4+0x114>)
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	f004 fbba 	bl	800979c <tcp_poll>
  altcp_sent(req->pcb, httpc_tcp_sent);
 8005028:	4917      	ldr	r1, [pc, #92]	; (8005088 <httpc_init_connection_common.constprop.4+0x118>)
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	f004 fb86 	bl	800973c <tcp_sent>
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8005030:	f8cd b004 	str.w	fp, [sp, #4]
    (char *)req->request->payload, req_len + 1);
 8005034:	6923      	ldr	r3, [r4, #16]
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8005036:	4651      	mov	r1, sl
 8005038:	79b0      	ldrb	r0, [r6, #6]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	9a03      	ldr	r2, [sp, #12]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005042:	f7ff ff43 	bl	8004ecc <httpc_create_request_string.isra.0.constprop.5>
  if (req_len2 != req_len) {
 8005046:	4580      	cmp	r8, r0
 8005048:	d005      	beq.n	8005056 <httpc_init_connection_common.constprop.4+0xe6>
    httpc_free_state(req);
 800504a:	4620      	mov	r0, r4
 800504c:	f7ff fd96 	bl	8004b7c <httpc_free_state>
    return ERR_VAL;
 8005050:	f06f 0505 	mvn.w	r5, #5
 8005054:	e7c7      	b.n	8004fe6 <httpc_init_connection_common.constprop.4+0x76>
  req->recv_fn = recv_fn;
 8005056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return ERR_OK;
 8005058:	2500      	movs	r5, #0
  req->conn_settings = settings;
 800505a:	6226      	str	r6, [r4, #32]
  req->recv_fn = recv_fn;
 800505c:	61e3      	str	r3, [r4, #28]
  req->callback_arg = callback_arg;
 800505e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005060:	6263      	str	r3, [r4, #36]	; 0x24
  *connection = req;
 8005062:	f8c9 4000 	str.w	r4, [r9]
 8005066:	e7be      	b.n	8004fe6 <httpc_init_connection_common.constprop.4+0x76>
    return ERR_MEM;
 8005068:	f04f 35ff 	mov.w	r5, #4294967295
 800506c:	e7bb      	b.n	8004fe6 <httpc_init_connection_common.constprop.4+0x76>
 800506e:	bf00      	nop
 8005070:	08010176 	.word	0x08010176
 8005074:	080101be 	.word	0x080101be
 8005078:	0800fff2 	.word	0x0800fff2
 800507c:	08004c21 	.word	0x08004c21
 8005080:	08004c0f 	.word	0x08004c0f
 8005084:	08004e75 	.word	0x08004e75
 8005088:	08004b39 	.word	0x08004b39

0800508c <httpc_get_file_dns>:
 *         or an error code
 */
err_t
httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
                   altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
{
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	461e      	mov	r6, r3
  err_t err;
  httpc_state_t* req;

  LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8005094:	4604      	mov	r4, r0
{
 8005096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005098:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 800509a:	b108      	cbz	r0, 80050a0 <httpc_get_file_dns+0x14>
 800509c:	b102      	cbz	r2, 80050a0 <httpc_get_file_dns+0x14>
 800509e:	b963      	cbnz	r3, 80050ba <httpc_get_file_dns+0x2e>
 80050a0:	f06f 050f 	mvn.w	r5, #15
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <httpc_get_file_dns+0x9c>)
 80050a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80050aa:	4920      	ldr	r1, [pc, #128]	; (800512c <httpc_get_file_dns+0xa0>)
 80050ac:	4820      	ldr	r0, [pc, #128]	; (8005130 <httpc_get_file_dns+0xa4>)
 80050ae:	f009 fd29 	bl	800eb04 <iprintf>

  if (connection != NULL) {
    *connection = req;
  }
  return ERR_OK;
}
 80050b2:	4628      	mov	r0, r5
 80050b4:	b006      	add	sp, #24
 80050b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 80050ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80050bc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80050c0:	9002      	str	r0, [sp, #8]
 80050c2:	460b      	mov	r3, r1
 80050c4:	4622      	mov	r2, r4
 80050c6:	4631      	mov	r1, r6
 80050c8:	a805      	add	r0, sp, #20
 80050ca:	f7ff ff51 	bl	8004f70 <httpc_init_connection_common.constprop.4>
  if (err != ERR_OK) {
 80050ce:	4605      	mov	r5, r0
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1ee      	bne.n	80050b2 <httpc_get_file_dns+0x26>
  if (settings->use_proxy) {
 80050d4:	79b3      	ldrb	r3, [r6, #6]
 80050d6:	b153      	cbz	r3, 80050ee <httpc_get_file_dns+0x62>
    err = httpc_get_internal_addr(req, &settings->proxy_addr);
 80050d8:	4631      	mov	r1, r6
 80050da:	9805      	ldr	r0, [sp, #20]
    err = httpc_get_internal_addr(req, &req->remote_addr);
 80050dc:	f7ff fd2e 	bl	8004b3c <httpc_get_internal_addr>
 80050e0:	4604      	mov	r4, r0
  if(err != ERR_OK) {
 80050e2:	b1e0      	cbz	r0, 800511e <httpc_get_file_dns+0x92>
    httpc_free_state(req);
 80050e4:	9805      	ldr	r0, [sp, #20]
    return err;
 80050e6:	4625      	mov	r5, r4
    httpc_free_state(req);
 80050e8:	f7ff fd48 	bl	8004b7c <httpc_free_state>
    return err;
 80050ec:	e7e1      	b.n	80050b2 <httpc_get_file_dns+0x26>
    err = httpc_get_internal_dns(req, server_name);
 80050ee:	9e05      	ldr	r6, [sp, #20]
  LWIP_ASSERT("req != NULL", req != NULL);
 80050f0:	b936      	cbnz	r6, 8005100 <httpc_get_file_dns+0x74>
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <httpc_get_file_dns+0x9c>)
 80050f4:	f240 12d5 	movw	r2, #469	; 0x1d5
 80050f8:	490e      	ldr	r1, [pc, #56]	; (8005134 <httpc_get_file_dns+0xa8>)
 80050fa:	480d      	ldr	r0, [pc, #52]	; (8005130 <httpc_get_file_dns+0xa4>)
 80050fc:	f009 fd02 	bl	800eb04 <iprintf>
  err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8005100:	f106 0804 	add.w	r8, r6, #4
 8005104:	4620      	mov	r0, r4
 8005106:	4633      	mov	r3, r6
 8005108:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <httpc_get_file_dns+0xac>)
 800510a:	4641      	mov	r1, r8
 800510c:	f000 fc9a 	bl	8005a44 <dns_gethostbyname>
  if (err == ERR_OK) {
 8005110:	4604      	mov	r4, r0
 8005112:	b910      	cbnz	r0, 800511a <httpc_get_file_dns+0x8e>
    err = httpc_get_internal_addr(req, &req->remote_addr);
 8005114:	4641      	mov	r1, r8
 8005116:	4630      	mov	r0, r6
 8005118:	e7e0      	b.n	80050dc <httpc_get_file_dns+0x50>
  } else if (err == ERR_INPROGRESS) {
 800511a:	1d43      	adds	r3, r0, #5
 800511c:	d1e2      	bne.n	80050e4 <httpc_get_file_dns+0x58>
  if (connection != NULL) {
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0c7      	beq.n	80050b2 <httpc_get_file_dns+0x26>
    *connection = req;
 8005122:	9b05      	ldr	r3, [sp, #20]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	e7c4      	b.n	80050b2 <httpc_get_file_dns+0x26>
 8005128:	08010176 	.word	0x08010176
 800512c:	08010163 	.word	0x08010163
 8005130:	0800fff2 	.word	0x0800fff2
 8005134:	080101b2 	.word	0x080101b2
 8005138:	08004e4d 	.word	0x08004e4d

0800513c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800513c:	ba40      	rev16	r0, r0
}
 800513e:	b280      	uxth	r0, r0
 8005140:	4770      	bx	lr

08005142 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8005142:	ba00      	rev	r0, r0
 8005144:	4770      	bx	lr

08005146 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8005146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005148:	4605      	mov	r5, r0
  char c1, c2;

  do {
    c1 = *str1++;
 800514a:	f815 4b01 	ldrb.w	r4, [r5], #1
    c2 = *str2++;
 800514e:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 8005152:	429c      	cmp	r4, r3
 8005154:	d009      	beq.n	800516a <lwip_strnicmp+0x24>
      char c1_upc = c1 | 0x20;
 8005156:	f044 0620 	orr.w	r6, r4, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800515a:	f1a6 0761 	sub.w	r7, r6, #97	; 0x61
 800515e:	2f19      	cmp	r7, #25
 8005160:	d80a      	bhi.n	8005178 <lwip_strnicmp+0x32>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8005162:	f043 0320 	orr.w	r3, r3, #32
 8005166:	429e      	cmp	r6, r3
 8005168:	d106      	bne.n	8005178 <lwip_strnicmp+0x32>
 800516a:	1b53      	subs	r3, r2, r5
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 800516c:	18c3      	adds	r3, r0, r3
 800516e:	d005      	beq.n	800517c <lwip_strnicmp+0x36>
 8005170:	2c00      	cmp	r4, #0
 8005172:	d1ea      	bne.n	800514a <lwip_strnicmp+0x4>
  return 0;
 8005174:	4620      	mov	r0, r4
 8005176:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8005178:	2001      	movs	r0, #1
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0;
 800517c:	4618      	mov	r0, r3
}
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005180 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8005184:	f44f 7688 	mov.w	r6, #272	; 0x110
{
 8005188:	4604      	mov	r4, r0
 800518a:	4688      	mov	r8, r1
 800518c:	2500      	movs	r5, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800518e:	4346      	muls	r6, r0
 8005190:	3610      	adds	r6, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8005192:	4f1f      	ldr	r7, [pc, #124]	; (8005210 <dns_call_found+0x90>)
 8005194:	59eb      	ldr	r3, [r5, r7]
 8005196:	b153      	cbz	r3, 80051ae <dns_call_found+0x2e>
 8005198:	197a      	adds	r2, r7, r5
 800519a:	7a11      	ldrb	r1, [r2, #8]
 800519c:	42a1      	cmp	r1, r4
 800519e:	d106      	bne.n	80051ae <dns_call_found+0x2e>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80051a0:	481c      	ldr	r0, [pc, #112]	; (8005214 <dns_call_found+0x94>)
 80051a2:	4641      	mov	r1, r8
 80051a4:	6852      	ldr	r2, [r2, #4]
 80051a6:	4430      	add	r0, r6
 80051a8:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	51eb      	str	r3, [r5, r7]
 80051ae:	350c      	adds	r5, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80051b0:	2d30      	cmp	r5, #48	; 0x30
 80051b2:	d1ee      	bne.n	8005192 <dns_call_found+0x12>
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <dns_call_found+0x94>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80051b6:	f44f 7188 	mov.w	r1, #272	; 0x110
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80051ba:	2200      	movs	r2, #0
 80051bc:	4618      	mov	r0, r3
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80051be:	fb01 3104 	mla	r1, r1, r4, r3
    if (i == idx) {
 80051c2:	b2d5      	uxtb	r5, r2
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	d01c      	beq.n	8005202 <dns_call_found+0x82>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80051c8:	7a9d      	ldrb	r5, [r3, #10]
 80051ca:	2d02      	cmp	r5, #2
 80051cc:	d119      	bne.n	8005202 <dns_call_found+0x82>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80051ce:	7bdf      	ldrb	r7, [r3, #15]
 80051d0:	7bce      	ldrb	r6, [r1, #15]
 80051d2:	42b7      	cmp	r7, r6
 80051d4:	d115      	bne.n	8005202 <dns_call_found+0x82>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80051d6:	2304      	movs	r3, #4
 80051d8:	73cb      	strb	r3, [r1, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80051da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80051de:	fb03 0404 	mla	r4, r3, r4, r0
 80051e2:	7be3      	ldrb	r3, [r4, #15]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d80a      	bhi.n	80051fe <dns_call_found+0x7e>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80051e8:	4d0b      	ldr	r5, [pc, #44]	; (8005218 <dns_call_found+0x98>)
 80051ea:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80051ee:	f008 f985 	bl	800d4fc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80051f2:	7be3      	ldrb	r3, [r4, #15]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80051fa:	2304      	movs	r3, #4
 80051fc:	73e3      	strb	r3, [r4, #15]
 80051fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005202:	3201      	adds	r2, #1
 8005204:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8005208:	2a04      	cmp	r2, #4
 800520a:	d1da      	bne.n	80051c2 <dns_call_found+0x42>
 800520c:	e7e5      	b.n	80051da <dns_call_found+0x5a>
 800520e:	bf00      	nop
 8005210:	2000676c 	.word	0x2000676c
 8005214:	200067a8 	.word	0x200067a8
 8005218:	2000675c 	.word	0x2000675c

0800521c <dns_send>:
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800521c:	4a55      	ldr	r2, [pc, #340]	; (8005374 <dns_send+0x158>)
 800521e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005222:	fb03 2300 	mla	r3, r3, r0, r2
 8005226:	7adb      	ldrb	r3, [r3, #11]
 8005228:	2b01      	cmp	r3, #1
{
 800522a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522e:	4606      	mov	r6, r0
 8005230:	b087      	sub	sp, #28
 8005232:	4690      	mov	r8, r2
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8005234:	d906      	bls.n	8005244 <dns_send+0x28>
 8005236:	4b50      	ldr	r3, [pc, #320]	; (8005378 <dns_send+0x15c>)
 8005238:	f240 22fa 	movw	r2, #762	; 0x2fa
 800523c:	494f      	ldr	r1, [pc, #316]	; (800537c <dns_send+0x160>)
 800523e:	4850      	ldr	r0, [pc, #320]	; (8005380 <dns_send+0x164>)
 8005240:	f009 fc60 	bl	800eb04 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8005244:	f44f 7488 	mov.w	r4, #272	; 0x110
 8005248:	4b4e      	ldr	r3, [pc, #312]	; (8005384 <dns_send+0x168>)
 800524a:	4374      	muls	r4, r6
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	eb08 0704 	add.w	r7, r8, r4
 8005252:	7afa      	ldrb	r2, [r7, #11]
 8005254:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8005258:	b94d      	cbnz	r5, 800526e <dns_send+0x52>
    return ERR_OK;
 800525a:	462c      	mov	r4, r5
    dns_call_found(idx, NULL);
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ff8e 	bl	8005180 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8005264:	72bd      	strb	r5, [r7, #10]
}
 8005266:	4620      	mov	r0, r4
 8005268:	b007      	add	sp, #28
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800526e:	3410      	adds	r4, #16
 8005270:	4444      	add	r4, r8
 8005272:	4620      	mov	r0, r4
 8005274:	f7fa ffe4 	bl	8000240 <strlen>
 8005278:	f100 0112 	add.w	r1, r0, #18
 800527c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005280:	2036      	movs	r0, #54	; 0x36
 8005282:	b289      	uxth	r1, r1
 8005284:	f003 fdaa 	bl	8008ddc <pbuf_alloc>
  if (p != NULL) {
 8005288:	4605      	mov	r5, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d06f      	beq.n	800536e <dns_send+0x152>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800528e:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
 8005290:	8938      	ldrh	r0, [r7, #8]
    --hostname;
 8005292:	3c01      	subs	r4, #1
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 800529a:	f7ff ff4f 	bl	800513c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 800529e:	2301      	movs	r3, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80052a0:	220c      	movs	r2, #12
    hdr.id = lwip_htons(entry->txid);
 80052a2:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80052a6:	4628      	mov	r0, r5
    hdr.flags1 = DNS_FLAG1_RD;
 80052a8:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 80052ac:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80052b0:	eb0d 0102 	add.w	r1, sp, r2
    hdr.numquestions = PP_HTONS(1);
 80052b4:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80052b8:	f003 ffca 	bl	8009250 <pbuf_take>
    query_idx = SIZEOF_DNS_HDR;
 80052bc:	230c      	movs	r3, #12
      ++hostname;
 80052be:	f104 0b01 	add.w	fp, r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80052c2:	46d9      	mov	r9, fp
 80052c4:	4649      	mov	r1, r9
 80052c6:	eba9 0a0b 	sub.w	sl, r9, fp
 80052ca:	464c      	mov	r4, r9
 80052cc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80052d0:	fa5f f28a 	uxtb.w	r2, sl
 80052d4:	282e      	cmp	r0, #46	; 0x2e
 80052d6:	d10c      	bne.n	80052f2 <dns_send+0xd6>
      if (query_idx + n + 1 > 0xFFFF) {
 80052d8:	189f      	adds	r7, r3, r2
 80052da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
      copy_len = (u16_t)(hostname - hostname_part);
 80052de:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 80052e2:	428f      	cmp	r7, r1
 80052e4:	dd09      	ble.n	80052fa <dns_send+0xde>
  pbuf_free(p);
 80052e6:	4628      	mov	r0, r5
  return ERR_VAL;
 80052e8:	f06f 0405 	mvn.w	r4, #5
  pbuf_free(p);
 80052ec:	f003 fd0e 	bl	8008d0c <pbuf_free>
  return ERR_VAL;
 80052f0:	e7b9      	b.n	8005266 <dns_send+0x4a>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0f0      	beq.n	80052d8 <dns_send+0xbc>
 80052f6:	4689      	mov	r9, r1
 80052f8:	e7e4      	b.n	80052c4 <dns_send+0xa8>
      pbuf_put_at(p, query_idx, n);
 80052fa:	4619      	mov	r1, r3
 80052fc:	4628      	mov	r0, r5
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	f004 f878 	bl	80093f4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8005304:	9b01      	ldr	r3, [sp, #4]
      query_idx = (u16_t)(query_idx + n + 1);
 8005306:	b2bf      	uxth	r7, r7
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8005308:	4652      	mov	r2, sl
 800530a:	4659      	mov	r1, fp
 800530c:	3301      	adds	r3, #1
 800530e:	4628      	mov	r0, r5
 8005310:	b29b      	uxth	r3, r3
 8005312:	f003 fffd 	bl	8009310 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8005316:	1c7b      	adds	r3, r7, #1
    } while (*hostname != 0);
 8005318:	f899 2000 	ldrb.w	r2, [r9]
      query_idx = (u16_t)(query_idx + n + 1);
 800531c:	b29b      	uxth	r3, r3
    } while (*hostname != 0);
 800531e:	2a00      	cmp	r2, #0
 8005320:	d1cd      	bne.n	80052be <dns_send+0xa2>
    pbuf_put_at(p, query_idx, 0);
 8005322:	4619      	mov	r1, r3
 8005324:	4628      	mov	r0, r5
 8005326:	f004 f865 	bl	80093f4 <pbuf_put_at>
    query_idx++;
 800532a:	3702      	adds	r7, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800532c:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8005330:	a902      	add	r1, sp, #8
 8005332:	2204      	movs	r2, #4
 8005334:	4628      	mov	r0, r5
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8005336:	f8ad 3008 	strh.w	r3, [sp, #8]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800533a:	f8ad 300a 	strh.w	r3, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800533e:	b2bb      	uxth	r3, r7
 8005340:	f003 ffe6 	bl	8009310 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8005344:	f44f 7388 	mov.w	r3, #272	; 0x110
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8005348:	9900      	ldr	r1, [sp, #0]
      dst = &dns_servers[entry->server_idx];
 800534a:	fb03 8606 	mla	r6, r3, r6, r8
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800534e:	480e      	ldr	r0, [pc, #56]	; (8005388 <dns_send+0x16c>)
 8005350:	2335      	movs	r3, #53	; 0x35
 8005352:	7bf4      	ldrb	r4, [r6, #15]
      dst = &dns_servers[entry->server_idx];
 8005354:	7af2      	ldrb	r2, [r6, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8005356:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800535a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800535e:	4629      	mov	r1, r5
 8005360:	f008 f842 	bl	800d3e8 <udp_sendto>
 8005364:	4604      	mov	r4, r0
    pbuf_free(p);
 8005366:	4628      	mov	r0, r5
 8005368:	f003 fcd0 	bl	8008d0c <pbuf_free>
 800536c:	e77b      	b.n	8005266 <dns_send+0x4a>
    err = ERR_MEM;
 800536e:	f04f 34ff 	mov.w	r4, #4294967295
 8005372:	e778      	b.n	8005266 <dns_send+0x4a>
 8005374:	200067a8 	.word	0x200067a8
 8005378:	0801021a 	.word	0x0801021a
 800537c:	08010249 	.word	0x08010249
 8005380:	0800fff2 	.word	0x0800fff2
 8005384:	200067a0 	.word	0x200067a0
 8005388:	2000675c 	.word	0x2000675c

0800538c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800538c:	2803      	cmp	r0, #3
{
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8005392:	d906      	bls.n	80053a2 <dns_check_entry+0x16>
 8005394:	4b34      	ldr	r3, [pc, #208]	; (8005468 <dns_check_entry+0xdc>)
 8005396:	f240 421c 	movw	r2, #1052	; 0x41c
 800539a:	4934      	ldr	r1, [pc, #208]	; (800546c <dns_check_entry+0xe0>)
 800539c:	4834      	ldr	r0, [pc, #208]	; (8005470 <dns_check_entry+0xe4>)
 800539e:	f009 fbb1 	bl	800eb04 <iprintf>

  switch (entry->state) {
 80053a2:	4d34      	ldr	r5, [pc, #208]	; (8005474 <dns_check_entry+0xe8>)
 80053a4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80053a8:	fb03 5204 	mla	r2, r3, r4, r5
 80053ac:	7a92      	ldrb	r2, [r2, #10]
 80053ae:	2a03      	cmp	r2, #3
 80053b0:	d84c      	bhi.n	800544c <dns_check_entry+0xc0>
 80053b2:	e8df f002 	tbb	[pc, r2]
 80053b6:	0245      	.short	0x0245
 80053b8:	3c23      	.short	0x3c23
  txid = (u16_t)DNS_RAND_TXID();
 80053ba:	f009 fbbb 	bl	800eb34 <rand>
 80053be:	2300      	movs	r3, #0
 80053c0:	b280      	uxth	r0, r0
 80053c2:	18ea      	adds	r2, r5, r3
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80053c4:	7a91      	ldrb	r1, [r2, #10]
 80053c6:	2902      	cmp	r1, #2
 80053c8:	d102      	bne.n	80053d0 <dns_check_entry+0x44>
 80053ca:	8912      	ldrh	r2, [r2, #8]
 80053cc:	4282      	cmp	r2, r0
 80053ce:	d0f4      	beq.n	80053ba <dns_check_entry+0x2e>
 80053d0:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80053d4:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80053d8:	d1f3      	bne.n	80053c2 <dns_check_entry+0x36>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80053da:	f44f 7388 	mov.w	r3, #272	; 0x110
      entry->state = DNS_STATE_ASKING;
      entry->server_idx = 0;
      entry->tmr = 1;
 80053de:	2201      	movs	r2, #1
      entry->txid = dns_create_txid();
 80053e0:	fb03 5504 	mla	r5, r3, r4, r5
      entry->state = DNS_STATE_ASKING;
 80053e4:	2302      	movs	r3, #2
 80053e6:	72ab      	strb	r3, [r5, #10]
      entry->server_idx = 0;
 80053e8:	2300      	movs	r3, #0
      entry->txid = dns_create_txid();
 80053ea:	8128      	strh	r0, [r5, #8]
      entry->server_idx = 0;
 80053ec:	72eb      	strb	r3, [r5, #11]
      entry->tmr = 1;
 80053ee:	732a      	strb	r2, [r5, #12]
      entry->retries = 0;
 80053f0:	736b      	strb	r3, [r5, #13]
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80053f2:	4620      	mov	r0, r4
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 80053f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err = dns_send(i);
 80053f8:	f7ff bf10 	b.w	800521c <dns_send>
      if (--entry->tmr == 0) {
 80053fc:	fb03 5304 	mla	r3, r3, r4, r5
 8005400:	7b1a      	ldrb	r2, [r3, #12]
 8005402:	3a01      	subs	r2, #1
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	731a      	strb	r2, [r3, #12]
 8005408:	b9d2      	cbnz	r2, 8005440 <dns_check_entry+0xb4>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800540a:	7b5a      	ldrb	r2, [r3, #13]
 800540c:	3201      	adds	r2, #1
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	2a0b      	cmp	r2, #11
 8005412:	735a      	strb	r2, [r3, #13]
 8005414:	d109      	bne.n	800542a <dns_check_entry+0x9e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8005416:	7ada      	ldrb	r2, [r3, #11]
 8005418:	b912      	cbnz	r2, 8005420 <dns_check_entry+0x94>
 800541a:	4917      	ldr	r1, [pc, #92]	; (8005478 <dns_check_entry+0xec>)
 800541c:	6849      	ldr	r1, [r1, #4]
 800541e:	b9f1      	cbnz	r1, 800545e <dns_check_entry+0xd2>
            dns_call_found(i, NULL);
 8005420:	2100      	movs	r1, #0
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff feac 	bl	8005180 <dns_call_found>
 8005428:	e004      	b.n	8005434 <dns_check_entry+0xa8>
          entry->tmr = entry->retries;
 800542a:	731a      	strb	r2, [r3, #12]
 800542c:	e7e1      	b.n	80053f2 <dns_check_entry+0x66>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800542e:	4363      	muls	r3, r4
 8005430:	58ea      	ldr	r2, [r5, r3]
 8005432:	b932      	cbnz	r2, 8005442 <dns_check_entry+0xb6>
            entry->state = DNS_STATE_UNUSED;
 8005434:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005438:	fb03 5404 	mla	r4, r3, r4, r5
 800543c:	2300      	movs	r3, #0
 800543e:	72a3      	strb	r3, [r4, #10]
 8005440:	bd70      	pop	{r4, r5, r6, pc}
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8005442:	3a01      	subs	r2, #1
 8005444:	50ea      	str	r2, [r5, r3]
 8005446:	2a00      	cmp	r2, #0
 8005448:	d0f4      	beq.n	8005434 <dns_check_entry+0xa8>
 800544a:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <dns_check_entry+0xdc>)
 800544e:	f240 425b 	movw	r2, #1115	; 0x45b
 8005452:	490a      	ldr	r1, [pc, #40]	; (800547c <dns_check_entry+0xf0>)
 8005454:	4806      	ldr	r0, [pc, #24]	; (8005470 <dns_check_entry+0xe4>)
}
 8005456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800545a:	f009 bb53 	b.w	800eb04 <iprintf>
            entry->server_idx++;
 800545e:	2101      	movs	r1, #1
            entry->retries = 0;
 8005460:	735a      	strb	r2, [r3, #13]
            entry->server_idx++;
 8005462:	72d9      	strb	r1, [r3, #11]
            entry->tmr = 1;
 8005464:	7319      	strb	r1, [r3, #12]
 8005466:	e7c4      	b.n	80053f2 <dns_check_entry+0x66>
 8005468:	0801021a 	.word	0x0801021a
 800546c:	080101e1 	.word	0x080101e1
 8005470:	0800fff2 	.word	0x0800fff2
 8005474:	200067a8 	.word	0x200067a8
 8005478:	200067a0 	.word	0x200067a0
 800547c:	080101fb 	.word	0x080101fb

08005480 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	4698      	mov	r8, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8005486:	8913      	ldrh	r3, [r2, #8]
{
 8005488:	b08d      	sub	sp, #52	; 0x34
 800548a:	4615      	mov	r5, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800548c:	2b0f      	cmp	r3, #15
 800548e:	f240 817c 	bls.w	800578a <dns_recv+0x30a>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8005492:	2300      	movs	r3, #0
 8005494:	220c      	movs	r2, #12
 8005496:	a906      	add	r1, sp, #24
 8005498:	4628      	mov	r0, r5
 800549a:	f003 fe93 	bl	80091c4 <pbuf_copy_partial>
 800549e:	280c      	cmp	r0, #12
 80054a0:	4604      	mov	r4, r0
 80054a2:	f040 8172 	bne.w	800578a <dns_recv+0x30a>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 80054a6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80054aa:	2600      	movs	r6, #0
 80054ac:	f7ff fe46 	bl	800513c <lwip_htons>
 80054b0:	4bb8      	ldr	r3, [pc, #736]	; (8005794 <dns_recv+0x314>)
 80054b2:	4699      	mov	r9, r3
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
      struct dns_table_entry *entry = &dns_table[i];
      if ((entry->state == DNS_STATE_ASKING) &&
 80054b4:	7a9a      	ldrb	r2, [r3, #10]
 80054b6:	fa5f fa86 	uxtb.w	sl, r6
 80054ba:	2a02      	cmp	r2, #2
 80054bc:	f040 815f 	bne.w	800577e <dns_recv+0x2fe>
 80054c0:	891a      	ldrh	r2, [r3, #8]
 80054c2:	4282      	cmp	r2, r0
 80054c4:	f040 815b 	bne.w	800577e <dns_recv+0x2fe>
          (entry->txid == txid)) {

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 80054c8:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80054cc:	f7ff fe36 	bl	800513c <lwip_htons>
 80054d0:	4683      	mov	fp, r0
        nanswers   = lwip_htons(hdr.numanswers);
 80054d2:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80054d6:	f7ff fe31 	bl	800513c <lwip_htons>

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80054da:	f99d 301a 	ldrsb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 80054de:	4607      	mov	r7, r0
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f280 8152 	bge.w	800578a <dns_recv+0x30a>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 80054e6:	f1bb 0f01 	cmp.w	fp, #1
 80054ea:	f040 814e 	bne.w	800578a <dns_recv+0x30a>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 80054ee:	f44f 7188 	mov.w	r1, #272	; 0x110
 80054f2:	4ba9      	ldr	r3, [pc, #676]	; (8005798 <dns_recv+0x318>)
 80054f4:	fb01 f206 	mul.w	r2, r1, r6
 80054f8:	f8d8 1000 	ldr.w	r1, [r8]
 80054fc:	9302      	str	r3, [sp, #8]
 80054fe:	9200      	str	r2, [sp, #0]
 8005500:	444a      	add	r2, r9
 8005502:	7ad2      	ldrb	r2, [r2, #11]
 8005504:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005508:	4291      	cmp	r1, r2
 800550a:	f040 813e 	bne.w	800578a <dns_recv+0x30a>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800550e:	9b00      	ldr	r3, [sp, #0]
 8005510:	f103 0810 	add.w	r8, r3, #16
 8005514:	44c8      	add	r8, r9
    n = pbuf_try_get_at(p, response_offset);
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f003 ff51 	bl	80093c0 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800551e:	2800      	cmp	r0, #0
 8005520:	f2c0 8133 	blt.w	800578a <dns_recv+0x30a>
 8005524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005528:	429c      	cmp	r4, r3
 800552a:	f000 812e 	beq.w	800578a <dns_recv+0x30a>
    if ((n & 0xc0) == 0xc0) {
 800552e:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 8005532:	3401      	adds	r4, #1
    if ((n & 0xc0) == 0xc0) {
 8005534:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 8005536:	b2a4      	uxth	r4, r4
    if ((n & 0xc0) == 0xc0) {
 8005538:	f000 8127 	beq.w	800578a <dns_recv+0x30a>
 800553c:	eb08 0b00 	add.w	fp, r8, r0
      while (n > 0) {
 8005540:	45c3      	cmp	fp, r8
 8005542:	f040 80bf 	bne.w	80056c4 <dns_recv+0x244>
    n = pbuf_try_get_at(p, response_offset);
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f003 ff39 	bl	80093c0 <pbuf_try_get_at>
    if (n < 0) {
 800554e:	2800      	cmp	r0, #0
      ++query;
 8005550:	f10b 0801 	add.w	r8, fp, #1
    if (n < 0) {
 8005554:	f2c0 8119 	blt.w	800578a <dns_recv+0x30a>
  } while (n != 0);
 8005558:	d1dd      	bne.n	8005516 <dns_recv+0x96>
  if (response_offset == 0xFFFF) {
 800555a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800555e:	429c      	cmp	r4, r3
 8005560:	f000 8113 	beq.w	800578a <dns_recv+0x30a>
  return (u16_t)(response_offset + 1);
 8005564:	f104 0801 	add.w	r8, r4, #1
 8005568:	fa1f f888 	uxth.w	r8, r8
        if (res_idx == 0xFFFF) {
 800556c:	4598      	cmp	r8, r3
 800556e:	f000 810c 	beq.w	800578a <dns_recv+0x30a>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8005572:	4643      	mov	r3, r8
 8005574:	2204      	movs	r2, #4
 8005576:	a904      	add	r1, sp, #16
 8005578:	4628      	mov	r0, r5
 800557a:	f003 fe23 	bl	80091c4 <pbuf_copy_partial>
 800557e:	2804      	cmp	r0, #4
 8005580:	f040 8103 	bne.w	800578a <dns_recv+0x30a>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8005584:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	f040 80fd 	bne.w	800578a <dns_recv+0x30a>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8005590:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	f040 80f7 	bne.w	800578a <dns_recv+0x30a>
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800559c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80055a0:	4598      	cmp	r8, r3
 80055a2:	f200 80f2 	bhi.w	800578a <dns_recv+0x30a>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80055a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80055aa:	3405      	adds	r4, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80055ac:	071b      	lsls	r3, r3, #28
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80055ae:	b2a4      	uxth	r4, r4
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80055b0:	f040 80b2 	bne.w	8005718 <dns_recv+0x298>
  if (offset == 0xFFFF) {
 80055b4:	f64f 7bff 	movw	fp, #65535	; 0xffff
            dns_check_entry(i);

            goto ignore_packet;
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80055b8:	2f00      	cmp	r7, #0
 80055ba:	f000 80b3 	beq.w	8005724 <dns_recv+0x2a4>
 80055be:	892b      	ldrh	r3, [r5, #8]
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	f240 80af 	bls.w	8005724 <dns_recv+0x2a4>
    n = pbuf_try_get_at(p, offset++);
 80055c6:	4621      	mov	r1, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	f104 0801 	add.w	r8, r4, #1
 80055ce:	f003 fef7 	bl	80093c0 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 80055d2:	1e04      	subs	r4, r0, #0
    n = pbuf_try_get_at(p, offset++);
 80055d4:	fa1f f888 	uxth.w	r8, r8
    if ((n < 0) || (offset == 0)) {
 80055d8:	f2c0 80d7 	blt.w	800578a <dns_recv+0x30a>
 80055dc:	f1b8 0f00 	cmp.w	r8, #0
 80055e0:	f000 80d3 	beq.w	800578a <dns_recv+0x30a>
    if ((n & 0xc0) == 0xc0) {
 80055e4:	f004 03c0 	and.w	r3, r4, #192	; 0xc0
 80055e8:	2bc0      	cmp	r3, #192	; 0xc0
 80055ea:	f000 80b7 	beq.w	800575c <dns_recv+0x2dc>
      if (offset + n >= p->tot_len) {
 80055ee:	4444      	add	r4, r8
 80055f0:	892b      	ldrh	r3, [r5, #8]
 80055f2:	429c      	cmp	r4, r3
 80055f4:	f280 80c9 	bge.w	800578a <dns_recv+0x30a>
      offset = (u16_t)(offset + n);
 80055f8:	b2a4      	uxth	r4, r4
    n = pbuf_try_get_at(p, offset);
 80055fa:	4628      	mov	r0, r5
 80055fc:	4621      	mov	r1, r4
 80055fe:	f003 fedf 	bl	80093c0 <pbuf_try_get_at>
    if (n < 0) {
 8005602:	2800      	cmp	r0, #0
 8005604:	f2c0 80c1 	blt.w	800578a <dns_recv+0x30a>
  } while (n != 0);
 8005608:	d1dd      	bne.n	80055c6 <dns_recv+0x146>
  if (offset == 0xFFFF) {
 800560a:	455c      	cmp	r4, fp
 800560c:	f000 80bd 	beq.w	800578a <dns_recv+0x30a>
  return (u16_t)(offset + 1);
 8005610:	f104 0801 	add.w	r8, r4, #1
 8005614:	fa1f f888 	uxth.w	r8, r8
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
            if (res_idx == 0xFFFF) {
 8005618:	45d8      	cmp	r8, fp
 800561a:	f000 80b6 	beq.w	800578a <dns_recv+0x30a>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800561e:	4643      	mov	r3, r8
 8005620:	220a      	movs	r2, #10
 8005622:	a909      	add	r1, sp, #36	; 0x24
 8005624:	4628      	mov	r0, r5
 8005626:	f003 fdcd 	bl	80091c4 <pbuf_copy_partial>
 800562a:	280a      	cmp	r0, #10
 800562c:	f040 80ad 	bne.w	800578a <dns_recv+0x30a>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8005630:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8005634:	4598      	cmp	r8, r3
 8005636:	f200 80a8 	bhi.w	800578a <dns_recv+0x30a>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800563a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800563e:	340b      	adds	r4, #11
 8005640:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8005644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8005648:	b2a4      	uxth	r4, r4
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800564a:	f040 8089 	bne.w	8005760 <dns_recv+0x2e0>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800564e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	f040 8083 	bne.w	8005760 <dns_recv+0x2e0>
 800565a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800565e:	d17f      	bne.n	8005760 <dns_recv+0x2e0>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8005660:	4623      	mov	r3, r4
 8005662:	2204      	movs	r2, #4
 8005664:	a905      	add	r1, sp, #20
 8005666:	4628      	mov	r0, r5
 8005668:	f003 fdac 	bl	80091c4 <pbuf_copy_partial>
 800566c:	2804      	cmp	r0, #4
 800566e:	f040 808c 	bne.w	800578a <dns_recv+0x30a>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8005672:	f44f 7788 	mov.w	r7, #272	; 0x110
 8005676:	4c47      	ldr	r4, [pc, #284]	; (8005794 <dns_recv+0x314>)
 8005678:	9b05      	ldr	r3, [sp, #20]
                  pbuf_free(p);
 800567a:	4628      	mov	r0, r5
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800567c:	4377      	muls	r7, r6
 800567e:	eb04 0807 	add.w	r8, r4, r7
 8005682:	f8c8 3004 	str.w	r3, [r8, #4]
                  pbuf_free(p);
 8005686:	f003 fb41 	bl	8008d0c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800568a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800568c:	f7ff fd59 	bl	8005142 <lwip_htonl>
  entry->state = DNS_STATE_DONE;
 8005690:	2303      	movs	r3, #3
  dns_call_found(idx, &entry->ipaddr);
 8005692:	9900      	ldr	r1, [sp, #0]
  entry->state = DNS_STATE_DONE;
 8005694:	f888 300a 	strb.w	r3, [r8, #10]
  if (entry->ttl > DNS_MAX_TTL) {
 8005698:	4b40      	ldr	r3, [pc, #256]	; (800579c <dns_recv+0x31c>)
  dns_call_found(idx, &entry->ipaddr);
 800569a:	3104      	adds	r1, #4
  entry->ttl = ttl;
 800569c:	51e0      	str	r0, [r4, r7]
  if (entry->ttl > DNS_MAX_TTL) {
 800569e:	4298      	cmp	r0, r3
  dns_call_found(idx, &entry->ipaddr);
 80056a0:	4421      	add	r1, r4
 80056a2:	4650      	mov	r0, sl
    entry->ttl = DNS_MAX_TTL;
 80056a4:	bf88      	it	hi
 80056a6:	51e3      	strhi	r3, [r4, r7]
  dns_call_found(idx, &entry->ipaddr);
 80056a8:	f7ff fd6a 	bl	8005180 <dns_call_found>
  if (entry->ttl == 0) {
 80056ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80056b0:	435e      	muls	r6, r3
 80056b2:	59a2      	ldr	r2, [r4, r6]
 80056b4:	19a3      	adds	r3, r4, r6
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	d141      	bne.n	800573e <dns_recv+0x2be>
    if (entry->state == DNS_STATE_DONE) {
 80056ba:	7a99      	ldrb	r1, [r3, #10]
 80056bc:	2903      	cmp	r1, #3
 80056be:	d13e      	bne.n	800573e <dns_recv+0x2be>
      entry->state = DNS_STATE_UNUSED;
 80056c0:	729a      	strb	r2, [r3, #10]
 80056c2:	e03c      	b.n	800573e <dns_recv+0x2be>
        int c = pbuf_try_get_at(p, response_offset);
 80056c4:	4621      	mov	r1, r4
 80056c6:	4628      	mov	r0, r5
 80056c8:	f003 fe7a 	bl	80093c0 <pbuf_try_get_at>
        if (c < 0) {
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	db5b      	blt.n	800578a <dns_recv+0x30a>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80056d2:	f818 2b01 	ldrb.w	r2, [r8], #1
 80056d6:	9203      	str	r2, [sp, #12]
 80056d8:	f009 f9b8 	bl	800ea4c <__locale_ctype_ptr>
 80056dc:	9a03      	ldr	r2, [sp, #12]
 80056de:	4410      	add	r0, r2
 80056e0:	7843      	ldrb	r3, [r0, #1]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	bf08      	it	eq
 80056ea:	3220      	addeq	r2, #32
 80056ec:	9203      	str	r2, [sp, #12]
 80056ee:	f009 f9ad 	bl	800ea4c <__locale_ctype_ptr>
 80056f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056f6:	9a03      	ldr	r2, [sp, #12]
 80056f8:	4418      	add	r0, r3
 80056fa:	7841      	ldrb	r1, [r0, #1]
 80056fc:	f001 0103 	and.w	r1, r1, #3
 8005700:	2901      	cmp	r1, #1
 8005702:	bf08      	it	eq
 8005704:	3320      	addeq	r3, #32
 8005706:	429a      	cmp	r2, r3
 8005708:	d13f      	bne.n	800578a <dns_recv+0x30a>
        if (response_offset == 0xFFFF) {
 800570a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800570e:	429c      	cmp	r4, r3
 8005710:	d03b      	beq.n	800578a <dns_recv+0x30a>
        response_offset++;
 8005712:	3401      	adds	r4, #1
 8005714:	b2a4      	uxth	r4, r4
 8005716:	e713      	b.n	8005540 <dns_recv+0xc0>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8005718:	f44f 7388 	mov.w	r3, #272	; 0x110
 800571c:	fb03 9306 	mla	r3, r3, r6, r9
 8005720:	7ada      	ldrb	r2, [r3, #11]
 8005722:	b17a      	cbz	r2, 8005744 <dns_recv+0x2c4>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8005724:	4628      	mov	r0, r5
 8005726:	f003 faf1 	bl	8008d0c <pbuf_free>
        dns_call_found(i, NULL);
 800572a:	2100      	movs	r1, #0
 800572c:	4650      	mov	r0, sl
 800572e:	f7ff fd27 	bl	8005180 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8005732:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005736:	fb03 9606 	mla	r6, r3, r6, r9
 800573a:	2300      	movs	r3, #0
 800573c:	72b3      	strb	r3, [r6, #10]

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
  return;
}
 800573e:	b00d      	add	sp, #52	; 0x34
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8005744:	9a02      	ldr	r2, [sp, #8]
 8005746:	6852      	ldr	r2, [r2, #4]
 8005748:	2a00      	cmp	r2, #0
 800574a:	d0eb      	beq.n	8005724 <dns_recv+0x2a4>
            entry->retries = DNS_MAX_RETRIES-1;
 800574c:	220a      	movs	r2, #10
            dns_check_entry(i);
 800574e:	4650      	mov	r0, sl
            entry->retries = DNS_MAX_RETRIES-1;
 8005750:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8005752:	2201      	movs	r2, #1
 8005754:	731a      	strb	r2, [r3, #12]
            dns_check_entry(i);
 8005756:	f7ff fe19 	bl	800538c <dns_check_entry>
            goto ignore_packet;
 800575a:	e016      	b.n	800578a <dns_recv+0x30a>
    n = pbuf_try_get_at(p, offset++);
 800575c:	4644      	mov	r4, r8
 800575e:	e754      	b.n	800560a <dns_recv+0x18a>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8005760:	f7ff fcec 	bl	800513c <lwip_htons>
 8005764:	4420      	add	r0, r4
 8005766:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800576a:	da0e      	bge.n	800578a <dns_recv+0x30a>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800576c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8005770:	3f01      	subs	r7, #1
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8005772:	f7ff fce3 	bl	800513c <lwip_htons>
 8005776:	4404      	add	r4, r0
            --nanswers;
 8005778:	b2bf      	uxth	r7, r7
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800577a:	b2a4      	uxth	r4, r4
 800577c:	e71c      	b.n	80055b8 <dns_recv+0x138>
 800577e:	3601      	adds	r6, #1
 8005780:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8005784:	2e04      	cmp	r6, #4
 8005786:	f47f ae95 	bne.w	80054b4 <dns_recv+0x34>
  pbuf_free(p);
 800578a:	4628      	mov	r0, r5
 800578c:	f003 fabe 	bl	8008d0c <pbuf_free>
  return;
 8005790:	e7d5      	b.n	800573e <dns_recv+0x2be>
 8005792:	bf00      	nop
 8005794:	200067a8 	.word	0x200067a8
 8005798:	200067a0 	.word	0x200067a0
 800579c:	00093a80 	.word	0x00093a80

080057a0 <dns_init>:
{
 80057a0:	4770      	bx	lr
	...

080057a4 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80057a4:	2801      	cmp	r0, #1
 80057a6:	d804      	bhi.n	80057b2 <dns_setserver+0xe>
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <dns_setserver+0x18>)
    if (dnsserver != NULL) {
 80057aa:	b119      	cbz	r1, 80057b4 <dns_setserver+0x10>
      dns_servers[numdns] = (*dnsserver);
 80057ac:	680a      	ldr	r2, [r1, #0]
      dns_servers[numdns] = *IP_ADDR_ANY;
 80057ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80057b2:	4770      	bx	lr
 80057b4:	4a02      	ldr	r2, [pc, #8]	; (80057c0 <dns_setserver+0x1c>)
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	e7f9      	b.n	80057ae <dns_setserver+0xa>
 80057ba:	bf00      	nop
 80057bc:	200067a0 	.word	0x200067a0
 80057c0:	080108a4 	.word	0x080108a4

080057c4 <dns_tmr>:
{
 80057c4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80057c6:	2000      	movs	r0, #0
 80057c8:	f7ff fde0 	bl	800538c <dns_check_entry>
 80057cc:	2001      	movs	r0, #1
 80057ce:	f7ff fddd 	bl	800538c <dns_check_entry>
 80057d2:	2002      	movs	r0, #2
 80057d4:	f7ff fdda 	bl	800538c <dns_check_entry>
 80057d8:	2003      	movs	r0, #3
}
 80057da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80057de:	f7ff bdd5 	b.w	800538c <dns_check_entry>
	...

080057e4 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80057e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	4605      	mov	r5, r0
 80057ea:	4692      	mov	sl, r2
 80057ec:	469b      	mov	fp, r3
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80057ee:	460f      	mov	r7, r1
 80057f0:	2900      	cmp	r1, #0
 80057f2:	f000 80e0 	beq.w	80059b6 <dns_gethostbyname_addrtype+0x1d2>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f000 80dd 	beq.w	80059b6 <dns_gethostbyname_addrtype+0x1d2>
      (!hostname) || (!hostname[0])) {
 80057fc:	7803      	ldrb	r3, [r0, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80d9 	beq.w	80059b6 <dns_gethostbyname_addrtype+0x1d2>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8005804:	f7fa fd1c 	bl	8000240 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8005808:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 800580a:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800580c:	f200 80d3 	bhi.w	80059b6 <dns_gethostbyname_addrtype+0x1d2>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8005810:	4639      	mov	r1, r7
 8005812:	4628      	mov	r0, r5
 8005814:	f002 f86c 	bl	80078f0 <ip4addr_aton>
 8005818:	2800      	cmp	r0, #0
 800581a:	f040 80cf 	bne.w	80059bc <dns_gethostbyname_addrtype+0x1d8>
 800581e:	4c80      	ldr	r4, [pc, #512]	; (8005a20 <dns_gethostbyname_addrtype+0x23c>)
 8005820:	4606      	mov	r6, r0
 8005822:	46a0      	mov	r8, r4
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8005824:	f818 3c06 	ldrb.w	r3, [r8, #-6]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d110      	bne.n	800584e <dns_gethostbyname_addrtype+0x6a>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800582c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005830:	4641      	mov	r1, r8
 8005832:	4628      	mov	r0, r5
 8005834:	f7ff fc87 	bl	8005146 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8005838:	b948      	cbnz	r0, 800584e <dns_gethostbyname_addrtype+0x6a>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800583a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800583e:	4a79      	ldr	r2, [pc, #484]	; (8005a24 <dns_gethostbyname_addrtype+0x240>)
 8005840:	fb03 2606 	mla	r6, r3, r6, r2
 8005844:	6873      	ldr	r3, [r6, #4]
 8005846:	603b      	str	r3, [r7, #0]
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8005848:	b003      	add	sp, #12
 800584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584e:	3601      	adds	r6, #1
 8005850:	f508 7888 	add.w	r8, r8, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8005854:	2e04      	cmp	r6, #4
 8005856:	d1e5      	bne.n	8005824 <dns_gethostbyname_addrtype+0x40>
    if (ip_addr_isany_val(dns_servers[0])) {
 8005858:	4b73      	ldr	r3, [pc, #460]	; (8005a28 <dns_gethostbyname_addrtype+0x244>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80af 	beq.w	80059c0 <dns_gethostbyname_addrtype+0x1dc>
 8005862:	2600      	movs	r6, #0
        if (dns_requests[r].found == 0) {
 8005864:	4f71      	ldr	r7, [pc, #452]	; (8005a2c <dns_gethostbyname_addrtype+0x248>)
 8005866:	f04f 080c 	mov.w	r8, #12
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800586a:	f814 2c06 	ldrb.w	r2, [r4, #-6]
 800586e:	b2f3      	uxtb	r3, r6
 8005870:	2a02      	cmp	r2, #2
 8005872:	d051      	beq.n	8005918 <dns_gethostbyname_addrtype+0x134>
 8005874:	3601      	adds	r6, #1
 8005876:	f504 7488 	add.w	r4, r4, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800587a:	2e04      	cmp	r6, #4
 800587c:	d1f5      	bne.n	800586a <dns_gethostbyname_addrtype+0x86>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800587e:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <dns_gethostbyname_addrtype+0x24c>)
 8005880:	2400      	movs	r4, #0
 8005882:	4a68      	ldr	r2, [pc, #416]	; (8005a24 <dns_gethostbyname_addrtype+0x240>)
 8005884:	7819      	ldrb	r1, [r3, #0]
 8005886:	46a6      	mov	lr, r4
 8005888:	4610      	mov	r0, r2
 800588a:	4698      	mov	r8, r3
    if (entry->state == DNS_STATE_UNUSED) {
 800588c:	7a93      	ldrb	r3, [r2, #10]
 800588e:	b2e7      	uxtb	r7, r4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d15c      	bne.n	800594e <dns_gethostbyname_addrtype+0x16a>
    entry = &dns_table[i];
 8005894:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005898:	463e      	mov	r6, r7
 800589a:	fb03 0404 	mla	r4, r3, r4, r0
 800589e:	2700      	movs	r7, #0
    if (dns_requests[r].found == NULL) {
 80058a0:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <dns_gethostbyname_addrtype+0x248>)
 80058a2:	f04f 0e0c 	mov.w	lr, #12
 80058a6:	fb0e f007 	mul.w	r0, lr, r7
 80058aa:	5883      	ldr	r3, [r0, r2]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d168      	bne.n	8005982 <dns_gethostbyname_addrtype+0x19e>
  req->dns_table_idx = i;
 80058b0:	eb02 0e00 	add.w	lr, r2, r0
  entry->state = DNS_STATE_NEW;
 80058b4:	f04f 0c01 	mov.w	ip, #1
  req->found = found;
 80058b8:	f842 a000 	str.w	sl, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 80058bc:	464a      	mov	r2, r9
  entry->seqno = dns_seqno;
 80058be:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 80058c0:	f104 0010 	add.w	r0, r4, #16
  req->dns_table_idx = i;
 80058c4:	f88e 6008 	strb.w	r6, [lr, #8]
  MEMCPY(entry->name, name, namelen);
 80058c8:	4629      	mov	r1, r5
  entry->state = DNS_STATE_NEW;
 80058ca:	f884 c00a 	strb.w	ip, [r4, #10]
  entry->name[namelen] = 0;
 80058ce:	44a1      	add	r9, r4
  req->arg   = callback_arg;
 80058d0:	f8ce b004 	str.w	fp, [lr, #4]
 80058d4:	9301      	str	r3, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 80058d6:	f009 f8e8 	bl	800eaaa <memcpy>
  entry->name[namelen] = 0;
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	f889 3010 	strb.w	r3, [r9, #16]
 80058e0:	4699      	mov	r9, r3
    if (dns_pcbs[i] == NULL) {
 80058e2:	4b54      	ldr	r3, [pc, #336]	; (8005a34 <dns_gethostbyname_addrtype+0x250>)
 80058e4:	469a      	mov	sl, r3
 80058e6:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80058ea:	fa5f f589 	uxtb.w	r5, r9
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d069      	beq.n	80059c6 <dns_gethostbyname_addrtype+0x1e2>
 80058f2:	f109 0901 	add.w	r9, r9, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80058f6:	f1b9 0f04 	cmp.w	r9, #4
 80058fa:	d1f4      	bne.n	80058e6 <dns_gethostbyname_addrtype+0x102>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80058fc:	4a4e      	ldr	r2, [pc, #312]	; (8005a38 <dns_gethostbyname_addrtype+0x254>)
 80058fe:	2304      	movs	r3, #4
 8005900:	7815      	ldrb	r5, [r2, #0]
 8005902:	3501      	adds	r5, #1
 8005904:	b2ed      	uxtb	r5, r5
      idx = 0;
 8005906:	2d04      	cmp	r5, #4
 8005908:	bf28      	it	cs
 800590a:	2500      	movcs	r5, #0
    if (dns_pcbs[idx] != NULL) {
 800590c:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8005910:	2900      	cmp	r1, #0
 8005912:	d03f      	beq.n	8005994 <dns_gethostbyname_addrtype+0x1b0>
      dns_last_pcb_idx = idx;
 8005914:	7015      	strb	r5, [r2, #0]
 8005916:	e078      	b.n	8005a0a <dns_gethostbyname_addrtype+0x226>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8005918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	f7ff fc10 	bl	8005146 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8005926:	2800      	cmp	r0, #0
 8005928:	d1a4      	bne.n	8005874 <dns_gethostbyname_addrtype+0x90>
 800592a:	9b01      	ldr	r3, [sp, #4]
        if (dns_requests[r].found == 0) {
 800592c:	fb08 f200 	mul.w	r2, r8, r0
 8005930:	59d1      	ldr	r1, [r2, r7]
 8005932:	b941      	cbnz	r1, 8005946 <dns_gethostbyname_addrtype+0x162>
          dns_requests[r].found = found;
 8005934:	18b9      	adds	r1, r7, r2
 8005936:	f847 a002 	str.w	sl, [r7, r2]
          dns_requests[r].arg = callback_arg;
 800593a:	f8c1 b004 	str.w	fp, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 800593e:	720b      	strb	r3, [r1, #8]
  return ERR_INPROGRESS;
 8005940:	f06f 0004 	mvn.w	r0, #4
 8005944:	e780      	b.n	8005848 <dns_gethostbyname_addrtype+0x64>
 8005946:	3001      	adds	r0, #1
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8005948:	2804      	cmp	r0, #4
 800594a:	d1ef      	bne.n	800592c <dns_gethostbyname_addrtype+0x148>
 800594c:	e792      	b.n	8005874 <dns_gethostbyname_addrtype+0x90>
    if (entry->state == DNS_STATE_DONE) {
 800594e:	2b03      	cmp	r3, #3
 8005950:	d106      	bne.n	8005960 <dns_gethostbyname_addrtype+0x17c>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8005952:	7b93      	ldrb	r3, [r2, #14]
 8005954:	1acb      	subs	r3, r1, r3
 8005956:	b2db      	uxtb	r3, r3
      if (age > lseq) {
 8005958:	4573      	cmp	r3, lr
 800595a:	bf84      	itt	hi
 800595c:	463e      	movhi	r6, r7
 800595e:	469e      	movhi	lr, r3
 8005960:	3401      	adds	r4, #1
 8005962:	f502 7288 	add.w	r2, r2, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8005966:	2c04      	cmp	r4, #4
 8005968:	d190      	bne.n	800588c <dns_gethostbyname_addrtype+0xa8>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800596a:	2e04      	cmp	r6, #4
 800596c:	d006      	beq.n	800597c <dns_gethostbyname_addrtype+0x198>
 800596e:	f44f 7488 	mov.w	r4, #272	; 0x110
 8005972:	fb04 0406 	mla	r4, r4, r6, r0
 8005976:	7aa3      	ldrb	r3, [r4, #10]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d090      	beq.n	800589e <dns_gethostbyname_addrtype+0xba>
      return ERR_MEM;
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e762      	b.n	8005848 <dns_gethostbyname_addrtype+0x64>
 8005982:	3701      	adds	r7, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8005984:	2f04      	cmp	r7, #4
 8005986:	d18e      	bne.n	80058a6 <dns_gethostbyname_addrtype+0xc2>
 8005988:	e7f8      	b.n	800597c <dns_gethostbyname_addrtype+0x198>
  udp_recv(pcb, dns_recv, NULL);
 800598a:	492c      	ldr	r1, [pc, #176]	; (8005a3c <dns_gethostbyname_addrtype+0x258>)
 800598c:	4658      	mov	r0, fp
 800598e:	f007 fda3 	bl	800d4d8 <udp_recv>
 8005992:	e032      	b.n	80059fa <dns_gethostbyname_addrtype+0x216>
 8005994:	3b01      	subs	r3, #1
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8005996:	3501      	adds	r5, #1
 8005998:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800599c:	b2ed      	uxtb	r5, r5
 800599e:	d1b2      	bne.n	8005906 <dns_gethostbyname_addrtype+0x122>
  return DNS_MAX_SOURCE_PORTS;
 80059a0:	2504      	movs	r5, #4
 80059a2:	e032      	b.n	8005a0a <dns_gethostbyname_addrtype+0x226>
  dns_seqno++;
 80059a4:	f898 3000 	ldrb.w	r3, [r8]
  dns_check_entry(i);
 80059a8:	4630      	mov	r0, r6
  dns_seqno++;
 80059aa:	3301      	adds	r3, #1
 80059ac:	f888 3000 	strb.w	r3, [r8]
  dns_check_entry(i);
 80059b0:	f7ff fcec 	bl	800538c <dns_check_entry>
 80059b4:	e7c4      	b.n	8005940 <dns_gethostbyname_addrtype+0x15c>
    return ERR_ARG;
 80059b6:	f06f 000f 	mvn.w	r0, #15
 80059ba:	e745      	b.n	8005848 <dns_gethostbyname_addrtype+0x64>
      return ERR_OK;
 80059bc:	2000      	movs	r0, #0
 80059be:	e743      	b.n	8005848 <dns_gethostbyname_addrtype+0x64>
      return ERR_VAL;
 80059c0:	f06f 0005 	mvn.w	r0, #5
 80059c4:	e740      	b.n	8005848 <dns_gethostbyname_addrtype+0x64>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80059c6:	202e      	movs	r0, #46	; 0x2e
 80059c8:	f007 fdcc 	bl	800d564 <udp_new_ip_type>
  if (pcb == NULL) {
 80059cc:	4683      	mov	fp, r0
 80059ce:	b1a0      	cbz	r0, 80059fa <dns_gethostbyname_addrtype+0x216>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80059d0:	f009 f8b0 	bl	800eb34 <rand>
 80059d4:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80059d6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80059da:	d3f9      	bcc.n	80059d0 <dns_gethostbyname_addrtype+0x1ec>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80059dc:	4918      	ldr	r1, [pc, #96]	; (8005a40 <dns_gethostbyname_addrtype+0x25c>)
 80059de:	4658      	mov	r0, fp
 80059e0:	f007 fbc2 	bl	800d168 <udp_bind>
  } while (err == ERR_USE);
 80059e4:	f110 0f08 	cmn.w	r0, #8
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80059e8:	4602      	mov	r2, r0
  } while (err == ERR_USE);
 80059ea:	d0f1      	beq.n	80059d0 <dns_gethostbyname_addrtype+0x1ec>
  if (err != ERR_OK) {
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d0cc      	beq.n	800598a <dns_gethostbyname_addrtype+0x1a6>
    udp_remove(pcb);
 80059f0:	4658      	mov	r0, fp
    return NULL;
 80059f2:	f04f 0b00 	mov.w	fp, #0
    udp_remove(pcb);
 80059f6:	f007 fd81 	bl	800d4fc <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 80059fa:	f84a b029 	str.w	fp, [sl, r9, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80059fe:	f1bb 0f00 	cmp.w	fp, #0
 8005a02:	f43f af7b 	beq.w	80058fc <dns_gethostbyname_addrtype+0x118>
      dns_last_pcb_idx = i;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <dns_gethostbyname_addrtype+0x254>)
 8005a08:	701d      	strb	r5, [r3, #0]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8005a0a:	2d04      	cmp	r5, #4
  entry->pcb_idx = dns_alloc_pcb();
 8005a0c:	73e5      	strb	r5, [r4, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8005a0e:	d1c9      	bne.n	80059a4 <dns_gethostbyname_addrtype+0x1c0>
    req->found = NULL;
 8005a10:	230c      	movs	r3, #12
    entry->state = DNS_STATE_UNUSED;
 8005a12:	2200      	movs	r2, #0
    req->found = NULL;
 8005a14:	435f      	muls	r7, r3
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <dns_gethostbyname_addrtype+0x248>)
    entry->state = DNS_STATE_UNUSED;
 8005a18:	72a2      	strb	r2, [r4, #10]
    req->found = NULL;
 8005a1a:	51da      	str	r2, [r3, r7]
 8005a1c:	e7ae      	b.n	800597c <dns_gethostbyname_addrtype+0x198>
 8005a1e:	bf00      	nop
 8005a20:	200067b8 	.word	0x200067b8
 8005a24:	200067a8 	.word	0x200067a8
 8005a28:	200067a0 	.word	0x200067a0
 8005a2c:	2000676c 	.word	0x2000676c
 8005a30:	2000679c 	.word	0x2000679c
 8005a34:	2000675c 	.word	0x2000675c
 8005a38:	20006758 	.word	0x20006758
 8005a3c:	08005481 	.word	0x08005481
 8005a40:	080108a4 	.word	0x080108a4

08005a44 <dns_gethostbyname>:
{
 8005a44:	b513      	push	{r0, r1, r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8005a46:	2400      	movs	r4, #0
 8005a48:	9400      	str	r4, [sp, #0]
 8005a4a:	f7ff fecb 	bl	80057e4 <dns_gethostbyname_addrtype>
}
 8005a4e:	b002      	add	sp, #8
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005a52:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8005a54:	f007 fe6a 	bl	800d72c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8005a58:	f002 fc20 	bl	800829c <mem_init>
  memp_init();
 8005a5c:	f002 fed6 	bl	800880c <memp_init>
  pbuf_init();
  netif_init();
 8005a60:	f002 ff76 	bl	8008950 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005a64:	f007 faa0 	bl	800cfa8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005a68:	f003 fd7c 	bl	8009564 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8005a6c:	f7ff fe98 	bl	80057a0 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005a74:	f007 ba52 	b.w	800cf1c <sys_timeouts_init>

08005a78 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8005a78:	7943      	ldrb	r3, [r0, #5]
 8005a7a:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8005a7c:	bf1f      	itttt	ne
 8005a7e:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8005a80:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8005a82:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8005a84:	8103      	strhne	r3, [r0, #8]
 8005a86:	4770      	bx	lr

08005a88 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005a8a:	1c85      	adds	r5, r0, #2
{
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	460e      	mov	r6, r1
 8005a90:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005a92:	2d44      	cmp	r5, #68	; 0x44
 8005a94:	d906      	bls.n	8005aa4 <dhcp_option_short+0x1c>
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <dhcp_option_short+0x2c>)
 8005a98:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8005a9c:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <dhcp_option_short+0x30>)
 8005a9e:	4807      	ldr	r0, [pc, #28]	; (8005abc <dhcp_option_short+0x34>)
 8005aa0:	f009 f830 	bl	800eb04 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005aa4:	0a3b      	lsrs	r3, r7, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 8005aa6:	b2a8      	uxth	r0, r5
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005aa8:	5533      	strb	r3, [r6, r4]
 8005aaa:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8005aac:	b2a4      	uxth	r4, r4
 8005aae:	5537      	strb	r7, [r6, r4]
}
 8005ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0801040d 	.word	0x0801040d
 8005ab8:	08010442 	.word	0x08010442
 8005abc:	0800fff2 	.word	0x0800fff2

08005ac0 <dhcp_option>:
{
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005ac4:	3302      	adds	r3, #2
{
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005aca:	4403      	add	r3, r0
{
 8005acc:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005ace:	2b44      	cmp	r3, #68	; 0x44
 8005ad0:	d906      	bls.n	8005ae0 <dhcp_option+0x20>
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <dhcp_option+0x30>)
 8005ad4:	f240 529a 	movw	r2, #1434	; 0x59a
 8005ad8:	4906      	ldr	r1, [pc, #24]	; (8005af4 <dhcp_option+0x34>)
 8005ada:	4807      	ldr	r0, [pc, #28]	; (8005af8 <dhcp_option+0x38>)
 8005adc:	f009 f812 	bl	800eb04 <iprintf>
  options[options_out_len++] = option_type;
 8005ae0:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8005ae2:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8005ae4:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8005ae6:	b29b      	uxth	r3, r3
}
 8005ae8:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8005aea:	54ee      	strb	r6, [r5, r3]
}
 8005aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0801040d 	.word	0x0801040d
 8005af4:	0801035c 	.word	0x0801035c
 8005af8:	0800fff2 	.word	0x0800fff2

08005afc <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005afc:	2843      	cmp	r0, #67	; 0x43
{
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005b06:	d906      	bls.n	8005b16 <dhcp_option_byte+0x1a>
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <dhcp_option_byte+0x24>)
 8005b0a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8005b0e:	4905      	ldr	r1, [pc, #20]	; (8005b24 <dhcp_option_byte+0x28>)
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <dhcp_option_byte+0x2c>)
 8005b12:	f008 fff7 	bl	800eb04 <iprintf>
  options[options_out_len++] = value;
 8005b16:	1c60      	adds	r0, r4, #1
 8005b18:	552e      	strb	r6, [r5, r4]
}
 8005b1a:	b280      	uxth	r0, r0
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	bf00      	nop
 8005b20:	0801040d 	.word	0x0801040d
 8005b24:	0801039e 	.word	0x0801039e
 8005b28:	0800fff2 	.word	0x0800fff2

08005b2c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005b2e:	1d07      	adds	r7, r0, #4
{
 8005b30:	4604      	mov	r4, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005b36:	2f44      	cmp	r7, #68	; 0x44
 8005b38:	d906      	bls.n	8005b48 <dhcp_option_long+0x1c>
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <dhcp_option_long+0x3c>)
 8005b3c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8005b40:	490a      	ldr	r1, [pc, #40]	; (8005b6c <dhcp_option_long+0x40>)
 8005b42:	480b      	ldr	r0, [pc, #44]	; (8005b70 <dhcp_option_long+0x44>)
 8005b44:	f008 ffde 	bl	800eb04 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005b48:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005b4a:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005b4c:	552b      	strb	r3, [r5, r4]
 8005b4e:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8005b50:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	54ea      	strb	r2, [r5, r3]
 8005b56:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005b58:	3403      	adds	r4, #3
 8005b5a:	0a32      	lsrs	r2, r6, #8
 8005b5c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005b5e:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005b60:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005b62:	552e      	strb	r6, [r5, r4]
}
 8005b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	0801040d 	.word	0x0801040d
 8005b6c:	080103d3 	.word	0x080103d3
 8005b70:	0800fff2 	.word	0x0800fff2

08005b74 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	460e      	mov	r6, r1
 8005b7a:	4690      	mov	r8, r2
 8005b7c:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b950      	cbnz	r0, 8005b98 <dhcp_create_msg+0x24>
 8005b82:	462f      	mov	r7, r5
 8005b84:	4b3f      	ldr	r3, [pc, #252]	; (8005c84 <dhcp_create_msg+0x110>)
 8005b86:	f240 7269 	movw	r2, #1897	; 0x769
 8005b8a:	493f      	ldr	r1, [pc, #252]	; (8005c88 <dhcp_create_msg+0x114>)
 8005b8c:	483f      	ldr	r0, [pc, #252]	; (8005c8c <dhcp_create_msg+0x118>)
 8005b8e:	f008 ffb9 	bl	800eb04 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8005b92:	4638      	mov	r0, r7
 8005b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8005b98:	b941      	cbnz	r1, 8005bac <dhcp_create_msg+0x38>
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <dhcp_create_msg+0x110>)
 8005b9c:	f240 726a 	movw	r2, #1898	; 0x76a
 8005ba0:	493b      	ldr	r1, [pc, #236]	; (8005c90 <dhcp_create_msg+0x11c>)
 8005ba2:	4637      	mov	r7, r6
 8005ba4:	4839      	ldr	r0, [pc, #228]	; (8005c8c <dhcp_create_msg+0x118>)
 8005ba6:	f008 ffad 	bl	800eb04 <iprintf>
 8005baa:	e7f2      	b.n	8005b92 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8005bac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005bb0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005bb4:	2036      	movs	r0, #54	; 0x36
 8005bb6:	f003 f911 	bl	8008ddc <pbuf_alloc>
  if (p_out == NULL) {
 8005bba:	4607      	mov	r7, r0
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d0e8      	beq.n	8005b92 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8005bc0:	8943      	ldrh	r3, [r0, #10]
 8005bc2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005bc6:	d206      	bcs.n	8005bd6 <dhcp_create_msg+0x62>
 8005bc8:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <dhcp_create_msg+0x110>)
 8005bca:	f240 7272 	movw	r2, #1906	; 0x772
 8005bce:	4931      	ldr	r1, [pc, #196]	; (8005c94 <dhcp_create_msg+0x120>)
 8005bd0:	482e      	ldr	r0, [pc, #184]	; (8005c8c <dhcp_create_msg+0x118>)
 8005bd2:	f008 ff97 	bl	800eb04 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8005bd6:	f1b8 0f03 	cmp.w	r8, #3
 8005bda:	d102      	bne.n	8005be2 <dhcp_create_msg+0x6e>
 8005bdc:	7973      	ldrb	r3, [r6, #5]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d107      	bne.n	8005bf2 <dhcp_create_msg+0x7e>
    if (dhcp->tries == 0) {
 8005be2:	79b3      	ldrb	r3, [r6, #6]
 8005be4:	4c2c      	ldr	r4, [pc, #176]	; (8005c98 <dhcp_create_msg+0x124>)
 8005be6:	b913      	cbnz	r3, 8005bee <dhcp_create_msg+0x7a>
      xid = LWIP_RAND();
 8005be8:	f008 ffa4 	bl	800eb34 <rand>
 8005bec:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8005bf2:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8005bf4:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f008 ff7a 	bl	800eaf4 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8005c00:	2301      	movs	r3, #1
 8005c02:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8005c04:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8005c06:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8005c0a:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005c0c:	6830      	ldr	r0, [r6, #0]
 8005c0e:	f7ff fa98 	bl	8005142 <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005c12:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005c16:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005c18:	d00a      	beq.n	8005c30 <dhcp_create_msg+0xbc>
 8005c1a:	f1a8 0307 	sub.w	r3, r8, #7
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d906      	bls.n	8005c30 <dhcp_create_msg+0xbc>
 8005c22:	f1b8 0f03 	cmp.w	r8, #3
 8005c26:	d105      	bne.n	8005c34 <dhcp_create_msg+0xc0>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005c28:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8005c2a:	3b04      	subs	r3, #4
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d801      	bhi.n	8005c34 <dhcp_create_msg+0xc0>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8005c30:	686b      	ldr	r3, [r5, #4]
 8005c32:	60e3      	str	r3, [r4, #12]
 8005c34:	f105 0326 	add.w	r3, r5, #38	; 0x26
 8005c38:	f104 021c 	add.w	r2, r4, #28
 8005c3c:	352c      	adds	r5, #44	; 0x2c
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005c3e:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005c42:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005c44:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005c48:	d1f9      	bne.n	8005c3e <dhcp_create_msg+0xca>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005c4a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8005c4e:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005c50:	34f0      	adds	r4, #240	; 0xf0
 8005c52:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005c54:	f804 2c03 	strb.w	r2, [r4, #-3]
 8005c58:	2253      	movs	r2, #83	; 0x53
 8005c5a:	f804 3c04 	strb.w	r3, [r4, #-4]
 8005c5e:	f804 2c02 	strb.w	r2, [r4, #-2]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005c62:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005c64:	f804 3c01 	strb.w	r3, [r4, #-1]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005c68:	4621      	mov	r1, r4
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f7ff ff28 	bl	8005ac0 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8005c70:	4642      	mov	r2, r8
 8005c72:	4621      	mov	r1, r4
 8005c74:	f7ff ff42 	bl	8005afc <dhcp_option_byte>
  if (options_out_len) {
 8005c78:	f1b9 0f00 	cmp.w	r9, #0
 8005c7c:	d089      	beq.n	8005b92 <dhcp_create_msg+0x1e>
    *options_out_len = options_out_len_loc;
 8005c7e:	f8a9 0000 	strh.w	r0, [r9]
 8005c82:	e786      	b.n	8005b92 <dhcp_create_msg+0x1e>
 8005c84:	0801040d 	.word	0x0801040d
 8005c88:	08010292 	.word	0x08010292
 8005c8c:	0800fff2 	.word	0x0800fff2
 8005c90:	080102b1 	.word	0x080102b1
 8005c94:	080102cf 	.word	0x080102cf
 8005c98:	20006bf0 	.word	0x20006bf0

08005c9c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8005c9c:	b410      	push	{r4}
  options[options_out_len++] = DHCP_OPTION_END;
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	24ff      	movs	r4, #255	; 0xff
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	540c      	strb	r4, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8005ca6:	2000      	movs	r0, #0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005ca8:	2b43      	cmp	r3, #67	; 0x43
 8005caa:	d907      	bls.n	8005cbc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005cac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8005cb0:	4610      	mov	r0, r2
}
 8005cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005cb6:	b289      	uxth	r1, r1
 8005cb8:	f003 b926 	b.w	8008f08 <pbuf_realloc>
    options[options_out_len++] = 0;
 8005cbc:	1c5c      	adds	r4, r3, #1
 8005cbe:	54c8      	strb	r0, [r1, r3]
 8005cc0:	b2a3      	uxth	r3, r4
 8005cc2:	e7f1      	b.n	8005ca8 <dhcp_option_trailer+0xc>

08005cc4 <dhcp_reboot>:
{
 8005cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005cc8:	6a05      	ldr	r5, [r0, #32]
{
 8005cca:	b085      	sub	sp, #20
 8005ccc:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8005cce:	2103      	movs	r1, #3
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fed1 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005cd6:	f10d 030e 	add.w	r3, sp, #14
 8005cda:	2203      	movs	r2, #3
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4640      	mov	r0, r8
 8005ce0:	f7ff ff48 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d066      	beq.n	8005db8 <dhcp_reboot+0xf4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005cea:	6844      	ldr	r4, [r0, #4]
 8005cec:	2302      	movs	r3, #2
 8005cee:	2239      	movs	r2, #57	; 0x39
 8005cf0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005cf4:	34f0      	adds	r4, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005cf6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005dc8 <dhcp_reboot+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	f7ff fee0 	bl	8005ac0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005d00:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d04:	4621      	mov	r1, r4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005d06:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005d0a:	f7ff febd 	bl	8005a88 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005d0e:	2304      	movs	r3, #4
 8005d10:	2232      	movs	r2, #50	; 0x32
 8005d12:	4621      	mov	r1, r4
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8005d14:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005d18:	f7ff fed2 	bl	8005ac0 <dhcp_option>
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005d22:	69e8      	ldr	r0, [r5, #28]
 8005d24:	f7ff fa0d 	bl	8005142 <lwip_htonl>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4638      	mov	r0, r7
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005d2e:	2700      	movs	r7, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005d30:	f7ff fefc 	bl	8005b2c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005d34:	2304      	movs	r3, #4
 8005d36:	2237      	movs	r2, #55	; 0x37
 8005d38:	4621      	mov	r1, r4
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005d3a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005d3e:	f7ff febf 	bl	8005ac0 <dhcp_option>
 8005d42:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005d46:	f819 2007 	ldrb.w	r2, [r9, r7]
 8005d4a:	3701      	adds	r7, #1
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005d52:	f7ff fed3 	bl	8005afc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005d56:	2f04      	cmp	r7, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005d58:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005d5c:	d1f3      	bne.n	8005d46 <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4632      	mov	r2, r6
 8005d62:	f7ff ff9b 	bl	8005c9c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8005d66:	4816      	ldr	r0, [pc, #88]	; (8005dc0 <dhcp_reboot+0xfc>)
 8005d68:	f8cd 8000 	str.w	r8, [sp]
 8005d6c:	2343      	movs	r3, #67	; 0x43
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <dhcp_reboot+0x100>)
 8005d70:	4631      	mov	r1, r6
 8005d72:	6800      	ldr	r0, [r0, #0]
 8005d74:	f007 faf8 	bl	800d368 <udp_sendto_if>
 8005d78:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f002 ffc6 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 8005d80:	79ab      	ldrb	r3, [r5, #6]
}
 8005d82:	4620      	mov	r0, r4
  if (dhcp->tries < 255) {
 8005d84:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005d86:	bf1c      	itt	ne
 8005d88:	3301      	addne	r3, #1
 8005d8a:	71ab      	strbne	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005d8c:	79ab      	ldrb	r3, [r5, #6]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	bf96      	itet	ls
 8005d92:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005d96:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8005d9a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005d9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8005da2:	bf9c      	itt	ls
 8005da4:	00db      	lslls	r3, r3, #3
 8005da6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005da8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005dac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005db0:	812b      	strh	r3, [r5, #8]
}
 8005db2:	b005      	add	sp, #20
 8005db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 8005db8:	f04f 34ff 	mov.w	r4, #4294967295
 8005dbc:	e7e0      	b.n	8005d80 <dhcp_reboot+0xbc>
 8005dbe:	bf00      	nop
 8005dc0:	20006be8 	.word	0x20006be8
 8005dc4:	080108a8 	.word	0x080108a8
 8005dc8:	08010333 	.word	0x08010333

08005dcc <dhcp_select>:
{
 8005dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005dd0:	4607      	mov	r7, r0
{
 8005dd2:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8005dd4:	b960      	cbnz	r0, 8005df0 <dhcp_select+0x24>
 8005dd6:	f06f 050f 	mvn.w	r5, #15
 8005dda:	4b52      	ldr	r3, [pc, #328]	; (8005f24 <dhcp_select+0x158>)
 8005ddc:	f240 1277 	movw	r2, #375	; 0x177
 8005de0:	4951      	ldr	r1, [pc, #324]	; (8005f28 <dhcp_select+0x15c>)
 8005de2:	4852      	ldr	r0, [pc, #328]	; (8005f2c <dhcp_select+0x160>)
 8005de4:	f008 fe8e 	bl	800eb04 <iprintf>
}
 8005de8:	4628      	mov	r0, r5
 8005dea:	b005      	add	sp, #20
 8005dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8005df0:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8005df2:	b94c      	cbnz	r4, 8005e08 <dhcp_select+0x3c>
 8005df4:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <dhcp_select+0x158>)
 8005df6:	f240 1279 	movw	r2, #377	; 0x179
 8005dfa:	494d      	ldr	r1, [pc, #308]	; (8005f30 <dhcp_select+0x164>)
 8005dfc:	f06f 0505 	mvn.w	r5, #5
 8005e00:	484a      	ldr	r0, [pc, #296]	; (8005f2c <dhcp_select+0x160>)
 8005e02:	f008 fe7f 	bl	800eb04 <iprintf>
 8005e06:	e7ef      	b.n	8005de8 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fe34 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8005e10:	f10d 030e 	add.w	r3, sp, #14
 8005e14:	2203      	movs	r2, #3
 8005e16:	4621      	mov	r1, r4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff feab 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 8005e1e:	4606      	mov	r6, r0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d07b      	beq.n	8005f1c <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e24:	6845      	ldr	r5, [r0, #4]
 8005e26:	2302      	movs	r3, #2
 8005e28:	2239      	movs	r2, #57	; 0x39
 8005e2a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005e2e:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005e30:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005f40 <dhcp_select+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e34:	4629      	mov	r1, r5
 8005e36:	f7ff fe43 	bl	8005ac0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e3c:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e3e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e42:	f7ff fe21 	bl	8005a88 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005e46:	2304      	movs	r3, #4
 8005e48:	2232      	movs	r2, #50	; 0x32
 8005e4a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e4c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8005e50:	f7ff fe36 	bl	8005ac0 <dhcp_option>
 8005e54:	4680      	mov	r8, r0
 8005e56:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005e5a:	69e0      	ldr	r0, [r4, #28]
 8005e5c:	f7ff f971 	bl	8005142 <lwip_htonl>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4602      	mov	r2, r0
 8005e64:	4640      	mov	r0, r8
 8005e66:	f7ff fe61 	bl	8005b2c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	2236      	movs	r2, #54	; 0x36
 8005e6e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005e70:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8005e74:	f7ff fe24 	bl	8005ac0 <dhcp_option>
 8005e78:	4680      	mov	r8, r0
 8005e7a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005e7e:	69a0      	ldr	r0, [r4, #24]
 8005e80:	f7ff f95f 	bl	8005142 <lwip_htonl>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4602      	mov	r2, r0
 8005e88:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e8a:	f04f 0800 	mov.w	r8, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005e8e:	f7ff fe4d 	bl	8005b2c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e92:	2304      	movs	r3, #4
 8005e94:	2237      	movs	r2, #55	; 0x37
 8005e96:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8005e98:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e9c:	f7ff fe10 	bl	8005ac0 <dhcp_option>
 8005ea0:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005ea4:	f819 2008 	ldrb.w	r2, [r9, r8]
 8005ea8:	f108 0801 	add.w	r8, r8, #1
 8005eac:	4629      	mov	r1, r5
 8005eae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005eb2:	f7ff fe23 	bl	8005afc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005eb6:	f1b8 0f04 	cmp.w	r8, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005eba:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005ebe:	d1f1      	bne.n	8005ea4 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	f7ff feea 	bl	8005c9c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <dhcp_select+0x168>)
 8005eca:	481b      	ldr	r0, [pc, #108]	; (8005f38 <dhcp_select+0x16c>)
 8005ecc:	4631      	mov	r1, r6
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	2343      	movs	r3, #67	; 0x43
 8005ed2:	9700      	str	r7, [sp, #0]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <dhcp_select+0x170>)
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	f007 f9ac 	bl	800d234 <udp_sendto_if_src>
 8005edc:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f002 ff14 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 8005ee4:	79a3      	ldrb	r3, [r4, #6]
 8005ee6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005ee8:	bf1c      	itt	ne
 8005eea:	3301      	addne	r3, #1
 8005eec:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005eee:	79a2      	ldrb	r2, [r4, #6]
 8005ef0:	2a05      	cmp	r2, #5
 8005ef2:	bf97      	itett	ls
 8005ef4:	2301      	movls	r3, #1
 8005ef6:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8005efa:	4093      	lslls	r3, r2
 8005efc:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005f00:	bf98      	it	ls
 8005f02:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005f0a:	bf9c      	itt	ls
 8005f0c:	00db      	lslls	r3, r3, #3
 8005f0e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f18:	8123      	strh	r3, [r4, #8]
  return result;
 8005f1a:	e765      	b.n	8005de8 <dhcp_select+0x1c>
    result = ERR_MEM;
 8005f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f20:	e7e0      	b.n	8005ee4 <dhcp_select+0x118>
 8005f22:	bf00      	nop
 8005f24:	0801040d 	.word	0x0801040d
 8005f28:	08010504 	.word	0x08010504
 8005f2c:	0800fff2 	.word	0x0800fff2
 8005f30:	0801051f 	.word	0x0801051f
 8005f34:	080108a4 	.word	0x080108a4
 8005f38:	20006be8 	.word	0x20006be8
 8005f3c:	080108a8 	.word	0x080108a8
 8005f40:	08010333 	.word	0x08010333

08005f44 <dhcp_discover>:
{
 8005f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005f48:	6a04      	ldr	r4, [r0, #32]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005f4a:	2600      	movs	r6, #0
{
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005f50:	2106      	movs	r1, #6
 8005f52:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005f54:	61e6      	str	r6, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005f56:	f7ff fd8f 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8005f5a:	f10d 030e 	add.w	r3, sp, #14
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fe06 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 8005f68:	4607      	mov	r7, r0
 8005f6a:	b3c0      	cbz	r0, 8005fde <dhcp_discover+0x9a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005f6c:	6845      	ldr	r5, [r0, #4]
 8005f6e:	2302      	movs	r3, #2
 8005f70:	2239      	movs	r2, #57	; 0x39
 8005f72:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005f76:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005f78:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8006028 <dhcp_discover+0xe4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f7ff fd9f 	bl	8005ac0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005f82:	f8b8 2024 	ldrh.w	r2, [r8, #36]	; 0x24
 8005f86:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005f88:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005f8c:	f7ff fd7c 	bl	8005a88 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005f90:	2304      	movs	r3, #4
 8005f92:	2237      	movs	r2, #55	; 0x37
 8005f94:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005f96:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005f9a:	f7ff fd91 	bl	8005ac0 <dhcp_option>
 8005f9e:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005fa2:	f819 2006 	ldrb.w	r2, [r9, r6]
 8005fa6:	3601      	adds	r6, #1
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005fae:	f7ff fda5 	bl	8005afc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005fb2:	2e04      	cmp	r6, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005fb4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005fb8:	d1f3      	bne.n	8005fa2 <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005fba:	463a      	mov	r2, r7
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7ff fe6d 	bl	8005c9c <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005fc2:	4b16      	ldr	r3, [pc, #88]	; (800601c <dhcp_discover+0xd8>)
 8005fc4:	4816      	ldr	r0, [pc, #88]	; (8006020 <dhcp_discover+0xdc>)
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	2343      	movs	r3, #67	; 0x43
 8005fcc:	f8cd 8000 	str.w	r8, [sp]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <dhcp_discover+0xe0>)
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	f007 f92e 	bl	800d234 <udp_sendto_if_src>
    pbuf_free(p_out);
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f002 fe97 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 8005fde:	79a3      	ldrb	r3, [r4, #6]
}
 8005fe0:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8005fe2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005fe4:	bf1c      	itt	ne
 8005fe6:	3301      	addne	r3, #1
 8005fe8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005fea:	79a2      	ldrb	r2, [r4, #6]
 8005fec:	2a05      	cmp	r2, #5
 8005fee:	bf97      	itett	ls
 8005ff0:	2301      	movls	r3, #1
 8005ff2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8005ff6:	4093      	lslls	r3, r2
 8005ff8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005ffc:	bf98      	it	ls
 8005ffe:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006002:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006006:	bf9c      	itt	ls
 8006008:	00db      	lslls	r3, r3, #3
 800600a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800600c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006010:	fb93 f3f2 	sdiv	r3, r3, r2
 8006014:	8123      	strh	r3, [r4, #8]
}
 8006016:	b005      	add	sp, #20
 8006018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800601c:	080108a4 	.word	0x080108a4
 8006020:	20006be8 	.word	0x20006be8
 8006024:	080108a8 	.word	0x080108a8
 8006028:	08010333 	.word	0x08010333

0800602c <dhcp_check>:
{
 800602c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800602e:	6a04      	ldr	r4, [r0, #32]
{
 8006030:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8006032:	2108      	movs	r1, #8
 8006034:	4620      	mov	r0, r4
 8006036:	f7ff fd1f 	bl	8005a78 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800603a:	2200      	movs	r2, #0
 800603c:	f104 011c 	add.w	r1, r4, #28
 8006040:	4628      	mov	r0, r5
 8006042:	f001 f86f 	bl	8007124 <etharp_query>
  if (dhcp->tries < 255) {
 8006046:	79a3      	ldrb	r3, [r4, #6]
 8006048:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800604a:	bf1c      	itt	ne
 800604c:	3301      	addne	r3, #1
 800604e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006050:	2301      	movs	r3, #1
 8006052:	8123      	strh	r3, [r4, #8]
 8006054:	bd38      	pop	{r3, r4, r5, pc}
	...

08006058 <dhcp_bind>:
{
 8006058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800605a:	4605      	mov	r5, r0
 800605c:	b940      	cbnz	r0, 8006070 <dhcp_bind+0x18>
 800605e:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <dhcp_bind+0xf0>)
 8006060:	f240 4215 	movw	r2, #1045	; 0x415
 8006064:	4939      	ldr	r1, [pc, #228]	; (800614c <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006066:	483a      	ldr	r0, [pc, #232]	; (8006150 <dhcp_bind+0xf8>)
 8006068:	f008 fd4c 	bl	800eb04 <iprintf>
}
 800606c:	b003      	add	sp, #12
 800606e:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8006070:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006072:	b924      	cbnz	r4, 800607e <dhcp_bind+0x26>
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <dhcp_bind+0xf0>)
 8006076:	f240 4217 	movw	r2, #1047	; 0x417
 800607a:	4936      	ldr	r1, [pc, #216]	; (8006154 <dhcp_bind+0xfc>)
 800607c:	e7f3      	b.n	8006066 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8006082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	d00b      	beq.n	80060a0 <dhcp_bind+0x48>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006088:	223c      	movs	r2, #60	; 0x3c
 800608a:	331e      	adds	r3, #30
 800608c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006094:	4293      	cmp	r3, r2
 8006096:	bf28      	it	cs
 8006098:	4613      	movcs	r3, r2
    if (dhcp->t0_timeout == 0) {
 800609a:	2b00      	cmp	r3, #0
 800609c:	d041      	beq.n	8006122 <dhcp_bind+0xca>
      dhcp->t0_timeout = 1;
 800609e:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80060a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060a2:	1c58      	adds	r0, r3, #1
 80060a4:	d00d      	beq.n	80060c2 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80060a6:	223c      	movs	r2, #60	; 0x3c
 80060a8:	331e      	adds	r3, #30
 80060aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bf28      	it	cs
 80060b6:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d034      	beq.n	8006126 <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 80060bc:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80060be:	8963      	ldrh	r3, [r4, #10]
 80060c0:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80060c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	d00c      	beq.n	80060e2 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80060c8:	223c      	movs	r2, #60	; 0x3c
 80060ca:	331e      	adds	r3, #30
 80060cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bf28      	it	cs
 80060d8:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 80060da:	b333      	cbz	r3, 800612a <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 80060dc:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	8962      	ldrh	r2, [r4, #10]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <dhcp_bind+0x98>
 80060ea:	b10b      	cbz	r3, 80060f0 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 80060f0:	79e3      	ldrb	r3, [r4, #7]
 80060f2:	b1e3      	cbz	r3, 800612e <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80060f4:	6a23      	ldr	r3, [r4, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80060f6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80060f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060fa:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80060fc:	b92b      	cbnz	r3, 800610a <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80060fe:	69e3      	ldr	r3, [r4, #28]
 8006100:	9a00      	ldr	r2, [sp, #0]
 8006102:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8006104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006108:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800610a:	4620      	mov	r0, r4
 800610c:	210a      	movs	r1, #10
 800610e:	f7ff fcb3 	bl	8005a78 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8006112:	ab01      	add	r3, sp, #4
 8006114:	466a      	mov	r2, sp
 8006116:	f104 011c 	add.w	r1, r4, #28
 800611a:	4628      	mov	r0, r5
 800611c:	f002 fc1a 	bl	8008954 <netif_set_addr>
 8006120:	e7a4      	b.n	800606c <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	e7bb      	b.n	800609e <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8006126:	2301      	movs	r3, #1
 8006128:	e7c8      	b.n	80060bc <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	e7d6      	b.n	80060dc <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800612e:	7f23      	ldrb	r3, [r4, #28]
    if (first_octet <= 127) {
 8006130:	061a      	lsls	r2, r3, #24
 8006132:	d401      	bmi.n	8006138 <dhcp_bind+0xe0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8006134:	23ff      	movs	r3, #255	; 0xff
 8006136:	e7de      	b.n	80060f6 <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8006138:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800613a:	bf8c      	ite	hi
 800613c:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006140:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8006144:	e7d7      	b.n	80060f6 <dhcp_bind+0x9e>
 8006146:	bf00      	nop
 8006148:	0801040d 	.word	0x0801040d
 800614c:	08010261 	.word	0x08010261
 8006150:	0800fff2 	.word	0x0800fff2
 8006154:	0801027a 	.word	0x0801027a

08006158 <dhcp_inc_pcb_refcount>:
{
 8006158:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800615a:	4d15      	ldr	r5, [pc, #84]	; (80061b0 <dhcp_inc_pcb_refcount+0x58>)
 800615c:	782b      	ldrb	r3, [r5, #0]
 800615e:	b9f3      	cbnz	r3, 800619e <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8006160:	4c14      	ldr	r4, [pc, #80]	; (80061b4 <dhcp_inc_pcb_refcount+0x5c>)
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	b12b      	cbz	r3, 8006172 <dhcp_inc_pcb_refcount+0x1a>
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <dhcp_inc_pcb_refcount+0x60>)
 8006168:	22e5      	movs	r2, #229	; 0xe5
 800616a:	4914      	ldr	r1, [pc, #80]	; (80061bc <dhcp_inc_pcb_refcount+0x64>)
 800616c:	4814      	ldr	r0, [pc, #80]	; (80061c0 <dhcp_inc_pcb_refcount+0x68>)
 800616e:	f008 fcc9 	bl	800eb04 <iprintf>
    dhcp_pcb = udp_new();
 8006172:	f007 f9e9 	bl	800d548 <udp_new>
 8006176:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 8006178:	b1b0      	cbz	r0, 80061a8 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800617a:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800617c:	4911      	ldr	r1, [pc, #68]	; (80061c4 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800617e:	f042 0220 	orr.w	r2, r2, #32
 8006182:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8006184:	2244      	movs	r2, #68	; 0x44
 8006186:	f006 ffef 	bl	800d168 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800618a:	2243      	movs	r2, #67	; 0x43
 800618c:	490d      	ldr	r1, [pc, #52]	; (80061c4 <dhcp_inc_pcb_refcount+0x6c>)
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	f007 f966 	bl	800d460 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8006194:	2200      	movs	r2, #0
 8006196:	490c      	ldr	r1, [pc, #48]	; (80061c8 <dhcp_inc_pcb_refcount+0x70>)
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	f007 f99d 	bl	800d4d8 <udp_recv>
  dhcp_pcb_refcount++;
 800619e:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 80061a0:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80061a2:	3301      	adds	r3, #1
 80061a4:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	20006bec 	.word	0x20006bec
 80061b4:	20006be8 	.word	0x20006be8
 80061b8:	0801040d 	.word	0x0801040d
 80061bc:	08010337 	.word	0x08010337
 80061c0:	0800fff2 	.word	0x0800fff2
 80061c4:	080108a4 	.word	0x080108a4
 80061c8:	080062a9 	.word	0x080062a9

080061cc <dhcp_dec_pcb_refcount>:
{
 80061cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80061ce:	4d0a      	ldr	r5, [pc, #40]	; (80061f8 <dhcp_dec_pcb_refcount+0x2c>)
 80061d0:	782b      	ldrb	r3, [r5, #0]
 80061d2:	b92b      	cbnz	r3, 80061e0 <dhcp_dec_pcb_refcount+0x14>
 80061d4:	4b09      	ldr	r3, [pc, #36]	; (80061fc <dhcp_dec_pcb_refcount+0x30>)
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	4909      	ldr	r1, [pc, #36]	; (8006200 <dhcp_dec_pcb_refcount+0x34>)
 80061da:	480a      	ldr	r0, [pc, #40]	; (8006204 <dhcp_dec_pcb_refcount+0x38>)
 80061dc:	f008 fc92 	bl	800eb04 <iprintf>
  dhcp_pcb_refcount--;
 80061e0:	782c      	ldrb	r4, [r5, #0]
 80061e2:	3c01      	subs	r4, #1
 80061e4:	b2e4      	uxtb	r4, r4
 80061e6:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 80061e8:	b924      	cbnz	r4, 80061f4 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 80061ea:	4d07      	ldr	r5, [pc, #28]	; (8006208 <dhcp_dec_pcb_refcount+0x3c>)
 80061ec:	6828      	ldr	r0, [r5, #0]
 80061ee:	f007 f985 	bl	800d4fc <udp_remove>
    dhcp_pcb = NULL;
 80061f2:	602c      	str	r4, [r5, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	20006bec 	.word	0x20006bec
 80061fc:	0801040d 	.word	0x0801040d
 8006200:	0801030f 	.word	0x0801030f
 8006204:	0800fff2 	.word	0x0800fff2
 8006208:	20006be8 	.word	0x20006be8

0800620c <dhcp_handle_ack.isra.2>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800620c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800620e:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006210:	4d23      	ldr	r5, [pc, #140]	; (80062a0 <dhcp_handle_ack.isra.2+0x94>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8006212:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006214:	6203      	str	r3, [r0, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006216:	6243      	str	r3, [r0, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006218:	78eb      	ldrb	r3, [r5, #3]
 800621a:	b113      	cbz	r3, 8006222 <dhcp_handle_ack.isra.2+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8006222:	792b      	ldrb	r3, [r5, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d033      	beq.n	8006290 <dhcp_handle_ack.isra.2+0x84>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 800622a:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800622c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800622e:	796b      	ldrb	r3, [r5, #5]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d030      	beq.n	8006296 <dhcp_handle_ack.isra.2+0x8a>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8006234:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 8006236:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006238:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800623a:	690b      	ldr	r3, [r1, #16]
 800623c:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800623e:	79ab      	ldrb	r3, [r5, #6]
 8006240:	b12b      	cbz	r3, 800624e <dhcp_handle_ack.isra.2+0x42>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006242:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 8006244:	6998      	ldr	r0, [r3, #24]
 8006246:	f7fe ff7c 	bl	8005142 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800624a:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800624c:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800624e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8006250:	79eb      	ldrb	r3, [r5, #7]
 8006252:	b123      	cbz	r3, 800625e <dhcp_handle_ack.isra.2+0x52>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8006254:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 8006256:	69d8      	ldr	r0, [r3, #28]
 8006258:	f7fe ff73 	bl	8005142 <lwip_htonl>
 800625c:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800625e:	7a2b      	ldrb	r3, [r5, #8]
 8006260:	b1a3      	cbz	r3, 800628c <dhcp_handle_ack.isra.2+0x80>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8006262:	4e10      	ldr	r6, [pc, #64]	; (80062a4 <dhcp_handle_ack.isra.2+0x98>)
 8006264:	ac02      	add	r4, sp, #8
 8006266:	6a30      	ldr	r0, [r6, #32]
 8006268:	f7fe ff6b 	bl	8005142 <lwip_htonl>
 800626c:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 8006270:	2000      	movs	r0, #0
 8006272:	4621      	mov	r1, r4
 8006274:	f7ff fa96 	bl	80057a4 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8006278:	7a6b      	ldrb	r3, [r5, #9]
 800627a:	b13b      	cbz	r3, 800628c <dhcp_handle_ack.isra.2+0x80>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800627c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800627e:	f7fe ff60 	bl	8005142 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8006282:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8006284:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8006286:	2001      	movs	r0, #1
 8006288:	f7ff fa8c 	bl	80057a4 <dns_setserver>
}
 800628c:	b002      	add	sp, #8
 800628e:	bd70      	pop	{r4, r5, r6, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8006290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	e7ca      	b.n	800622c <dhcp_handle_ack.isra.2+0x20>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006298:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	e7cb      	b.n	8006238 <dhcp_handle_ack.isra.2+0x2c>
 80062a0:	2000709c 	.word	0x2000709c
 80062a4:	200070a8 	.word	0x200070a8

080062a8 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 80062a8:	4bad      	ldr	r3, [pc, #692]	; (8006560 <dhcp_recv+0x2b8>)
{
 80062aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80062ae:	685f      	ldr	r7, [r3, #4]
{
 80062b0:	b08b      	sub	sp, #44	; 0x2c
 80062b2:	4692      	mov	sl, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	9301      	str	r3, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03c      	beq.n	8006336 <dhcp_recv+0x8e>
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d039      	beq.n	8006336 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80062c2:	8953      	ldrh	r3, [r2, #10]
 80062c4:	2b2b      	cmp	r3, #43	; 0x2b
 80062c6:	d936      	bls.n	8006336 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80062c8:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80062ca:	7813      	ldrb	r3, [r2, #0]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d132      	bne.n	8006336 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80062d0:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 80062d4:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80062d8:	f102 011c 	add.w	r1, r2, #28
 80062dc:	2300      	movs	r3, #0
 80062de:	b2dd      	uxtb	r5, r3
 80062e0:	42ac      	cmp	r4, r5
 80062e2:	d901      	bls.n	80062e8 <dhcp_recv+0x40>
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d11f      	bne.n	8006328 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80062e8:	6850      	ldr	r0, [r2, #4]
 80062ea:	f7fe ff2a 	bl	8005142 <lwip_htonl>
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4298      	cmp	r0, r3
 80062f4:	d11f      	bne.n	8006336 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 80062f6:	4b9b      	ldr	r3, [pc, #620]	; (8006564 <dhcp_recv+0x2bc>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 80062fe:	f8ba 100a 	ldrh.w	r1, [sl, #10]
  dhcp_clear_all_options(dhcp);
 8006302:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8006304:	292b      	cmp	r1, #43	; 0x2b
 8006306:	d916      	bls.n	8006336 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 8006308:	f8ba 9008 	ldrh.w	r9, [sl, #8]
  options_idx = DHCP_OPTIONS_OFS;
 800630c:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8006310:	9204      	str	r2, [sp, #16]
 8006312:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 8006314:	46d0      	mov	r8, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8006316:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800631a:	455b      	cmp	r3, fp
 800631c:	d911      	bls.n	8006342 <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 800631e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006322:	465d      	mov	r5, fp
 8006324:	9305      	str	r3, [sp, #20]
 8006326:	e150      	b.n	80065ca <dhcp_recv+0x322>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006328:	f810 6b01 	ldrb.w	r6, [r0], #1
 800632c:	3301      	adds	r3, #1
 800632e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006332:	42ae      	cmp	r6, r5
 8006334:	d0d3      	beq.n	80062de <dhcp_recv+0x36>
  pbuf_free(p);
 8006336:	4650      	mov	r0, sl
 8006338:	f002 fce8 	bl	8008d0c <pbuf_free>
}
 800633c:	b00b      	add	sp, #44	; 0x2c
 800633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 8006342:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006346:	eba9 0903 	sub.w	r9, r9, r3
    q = q->next;
 800634a:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 800634e:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006352:	fa1f f989 	uxth.w	r9, r9
  while ((q != NULL) && (options_idx >= q->len)) {
 8006356:	f1b8 0f00 	cmp.w	r8, #0
 800635a:	d1dc      	bne.n	8006316 <dhcp_recv+0x6e>
 800635c:	e7eb      	b.n	8006336 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 800635e:	1cab      	adds	r3, r5, #2
 8006360:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8006362:	429d      	cmp	r5, r3
    u16_t val_offset = (u16_t)(offset + 2);
 8006364:	9302      	str	r3, [sp, #8]
    if (val_offset < offset) {
 8006366:	d8e6      	bhi.n	8006336 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 8006368:	1c69      	adds	r1, r5, #1
 800636a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800636e:	4299      	cmp	r1, r3
 8006370:	da28      	bge.n	80063c4 <dhcp_recv+0x11c>
      len = options[offset + 1];
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	442b      	add	r3, r5
 8006376:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8006378:	2a33      	cmp	r2, #51	; 0x33
 800637a:	d067      	beq.n	800644c <dhcp_recv+0x1a4>
 800637c:	d82a      	bhi.n	80063d4 <dhcp_recv+0x12c>
 800637e:	2a01      	cmp	r2, #1
 8006380:	d041      	beq.n	8006406 <dhcp_recv+0x15e>
 8006382:	d306      	bcc.n	8006392 <dhcp_recv+0xea>
 8006384:	2a03      	cmp	r2, #3
 8006386:	d045      	beq.n	8006414 <dhcp_recv+0x16c>
 8006388:	2a06      	cmp	r2, #6
 800638a:	d04b      	beq.n	8006424 <dhcp_recv+0x17c>
    if (op == DHCP_OPTION_PAD) {
 800638c:	2a00      	cmp	r2, #0
 800638e:	f040 80ce 	bne.w	800652e <dhcp_recv+0x286>
      offset++;
 8006392:	b28d      	uxth	r5, r1
    if (offset >= q->len) {
 8006394:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006398:	42ab      	cmp	r3, r5
 800639a:	f200 8116 	bhi.w	80065ca <dhcp_recv+0x322>
      offset = (u16_t)(offset - q->len);
 800639e:	1aed      	subs	r5, r5, r3
      offset_max = (u16_t)(offset_max - q->len);
 80063a0:	eba9 0903 	sub.w	r9, r9, r3
      offset = (u16_t)(offset - q->len);
 80063a4:	b2ad      	uxth	r5, r5
      offset_max = (u16_t)(offset_max - q->len);
 80063a6:	fa1f f989 	uxth.w	r9, r9
      if (offset < offset_max) {
 80063aa:	454d      	cmp	r5, r9
 80063ac:	d2c3      	bcs.n	8006336 <dhcp_recv+0x8e>
        q = q->next;
 80063ae:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80063b2:	f1b8 0f00 	cmp.w	r8, #0
 80063b6:	f040 8105 	bne.w	80065c4 <dhcp_recv+0x31c>
 80063ba:	4b6b      	ldr	r3, [pc, #428]	; (8006568 <dhcp_recv+0x2c0>)
 80063bc:	f240 629d 	movw	r2, #1693	; 0x69d
 80063c0:	496a      	ldr	r1, [pc, #424]	; (800656c <dhcp_recv+0x2c4>)
 80063c2:	e035      	b.n	8006430 <dhcp_recv+0x188>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80063c4:	f8d8 3000 	ldr.w	r3, [r8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8161 	beq.w	8006690 <dhcp_recv+0x3e8>
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	e7d1      	b.n	8006378 <dhcp_recv+0xd0>
    switch (op) {
 80063d4:	2a36      	cmp	r2, #54	; 0x36
 80063d6:	d04e      	beq.n	8006476 <dhcp_recv+0x1ce>
 80063d8:	d80a      	bhi.n	80063f0 <dhcp_recv+0x148>
 80063da:	2a34      	cmp	r2, #52	; 0x34
 80063dc:	d03c      	beq.n	8006458 <dhcp_recv+0x1b0>
 80063de:	2a35      	cmp	r2, #53	; 0x35
 80063e0:	d1d4      	bne.n	800638c <dhcp_recv+0xe4>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	f000 809d 	beq.w	8006522 <dhcp_recv+0x27a>
 80063e8:	4b5f      	ldr	r3, [pc, #380]	; (8006568 <dhcp_recv+0x2c0>)
 80063ea:	f240 6255 	movw	r2, #1621	; 0x655
 80063ee:	e038      	b.n	8006462 <dhcp_recv+0x1ba>
    switch (op) {
 80063f0:	2a3a      	cmp	r2, #58	; 0x3a
 80063f2:	d046      	beq.n	8006482 <dhcp_recv+0x1da>
 80063f4:	2a3b      	cmp	r2, #59	; 0x3b
 80063f6:	d1c9      	bne.n	800638c <dhcp_recv+0xe4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	f000 8095 	beq.w	8006528 <dhcp_recv+0x280>
 80063fe:	4b5a      	ldr	r3, [pc, #360]	; (8006568 <dhcp_recv+0x2c0>)
 8006400:	f240 6261 	movw	r2, #1633	; 0x661
 8006404:	e004      	b.n	8006410 <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006406:	2b04      	cmp	r3, #4
 8006408:	d041      	beq.n	800648e <dhcp_recv+0x1e6>
 800640a:	4b57      	ldr	r3, [pc, #348]	; (8006568 <dhcp_recv+0x2c0>)
 800640c:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006410:	4957      	ldr	r1, [pc, #348]	; (8006570 <dhcp_recv+0x2c8>)
 8006412:	e00d      	b.n	8006430 <dhcp_recv+0x188>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006414:	2b03      	cmp	r3, #3
 8006416:	d876      	bhi.n	8006506 <dhcp_recv+0x25e>
 8006418:	4b53      	ldr	r3, [pc, #332]	; (8006568 <dhcp_recv+0x2c0>)
 800641a:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800641e:	4955      	ldr	r1, [pc, #340]	; (8006574 <dhcp_recv+0x2cc>)
 8006420:	e006      	b.n	8006430 <dhcp_recv+0x188>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8006422:	2300      	movs	r3, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8006424:	0799      	lsls	r1, r3, #30
 8006426:	d007      	beq.n	8006438 <dhcp_recv+0x190>
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <dhcp_recv+0x2c0>)
 800642a:	f240 6239 	movw	r2, #1593	; 0x639
 800642e:	4952      	ldr	r1, [pc, #328]	; (8006578 <dhcp_recv+0x2d0>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006430:	4852      	ldr	r0, [pc, #328]	; (800657c <dhcp_recv+0x2d4>)
 8006432:	f008 fb67 	bl	800eb04 <iprintf>
 8006436:	e77e      	b.n	8006336 <dhcp_recv+0x8e>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8006438:	2b08      	cmp	r3, #8
 800643a:	461c      	mov	r4, r3
 800643c:	bf28      	it	cs
 800643e:	2408      	movcs	r4, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006440:	429c      	cmp	r4, r3
 8006442:	d963      	bls.n	800650c <dhcp_recv+0x264>
 8006444:	4b48      	ldr	r3, [pc, #288]	; (8006568 <dhcp_recv+0x2c0>)
 8006446:	f240 623c 	movw	r2, #1596	; 0x63c
 800644a:	e7e8      	b.n	800641e <dhcp_recv+0x176>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800644c:	2b04      	cmp	r3, #4
 800644e:	d05f      	beq.n	8006510 <dhcp_recv+0x268>
 8006450:	4b45      	ldr	r3, [pc, #276]	; (8006568 <dhcp_recv+0x2c0>)
 8006452:	f240 6241 	movw	r2, #1601	; 0x641
 8006456:	e7db      	b.n	8006410 <dhcp_recv+0x168>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006458:	2b01      	cmp	r3, #1
 800645a:	d004      	beq.n	8006466 <dhcp_recv+0x1be>
 800645c:	4b42      	ldr	r3, [pc, #264]	; (8006568 <dhcp_recv+0x2c0>)
 800645e:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006462:	4947      	ldr	r1, [pc, #284]	; (8006580 <dhcp_recv+0x2d8>)
 8006464:	e7e4      	b.n	8006430 <dhcp_recv+0x188>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8006466:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800646a:	d054      	beq.n	8006516 <dhcp_recv+0x26e>
 800646c:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <dhcp_recv+0x2c0>)
 800646e:	f240 6251 	movw	r2, #1617	; 0x651
 8006472:	4944      	ldr	r1, [pc, #272]	; (8006584 <dhcp_recv+0x2dc>)
 8006474:	e7dc      	b.n	8006430 <dhcp_recv+0x188>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006476:	2b04      	cmp	r3, #4
 8006478:	d050      	beq.n	800651c <dhcp_recv+0x274>
 800647a:	4b3b      	ldr	r3, [pc, #236]	; (8006568 <dhcp_recv+0x2c0>)
 800647c:	f240 6259 	movw	r2, #1625	; 0x659
 8006480:	e7c6      	b.n	8006410 <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006482:	2b04      	cmp	r3, #4
 8006484:	d04d      	beq.n	8006522 <dhcp_recv+0x27a>
 8006486:	4b38      	ldr	r3, [pc, #224]	; (8006568 <dhcp_recv+0x2c0>)
 8006488:	f240 625d 	movw	r2, #1629	; 0x65d
 800648c:	e7c0      	b.n	8006410 <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800648e:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8006490:	2606      	movs	r6, #6
      if (offset + len + 2 > 0xFFFF) {
 8006492:	441d      	add	r5, r3
 8006494:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8006498:	4295      	cmp	r5, r2
 800649a:	f73f af4c 	bgt.w	8006336 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 800649e:	9a02      	ldr	r2, [sp, #8]
 80064a0:	18d5      	adds	r5, r2, r3
 80064a2:	b2ad      	uxth	r5, r5
      if (decode_len > 0) {
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	f43f af75 	beq.w	8006394 <dhcp_recv+0xec>
        u32_t value = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	9a03      	ldr	r2, [sp, #12]
 80064ae:	9309      	str	r3, [sp, #36]	; 0x24
 80064b0:	1e73      	subs	r3, r6, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	9306      	str	r3, [sp, #24]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80064b6:	2e09      	cmp	r6, #9
 80064b8:	d906      	bls.n	80064c8 <dhcp_recv+0x220>
 80064ba:	4b2b      	ldr	r3, [pc, #172]	; (8006568 <dhcp_recv+0x2c0>)
 80064bc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80064c0:	4931      	ldr	r1, [pc, #196]	; (8006588 <dhcp_recv+0x2e0>)
 80064c2:	482e      	ldr	r0, [pc, #184]	; (800657c <dhcp_recv+0x2d4>)
 80064c4:	f008 fb1e 	bl	800eb04 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80064ce:	9206      	str	r2, [sp, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f47f af5f 	bne.w	8006394 <dhcp_recv+0xec>
          copy_len = LWIP_MIN(decode_len, 4);
 80064d6:	2c03      	cmp	r4, #3
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80064d8:	a909      	add	r1, sp, #36	; 0x24
 80064da:	4640      	mov	r0, r8
 80064dc:	bf94      	ite	ls
 80064de:	4623      	movls	r3, r4
 80064e0:	2304      	movhi	r3, #4
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	9a07      	ldr	r2, [sp, #28]
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	f002 fe6c 	bl	80091c4 <pbuf_copy_partial>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	4283      	cmp	r3, r0
 80064f0:	f47f af21 	bne.w	8006336 <dhcp_recv+0x8e>
          if (decode_len > 4) {
 80064f4:	2c04      	cmp	r4, #4
 80064f6:	d94d      	bls.n	8006594 <dhcp_recv+0x2ec>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80064f8:	07a2      	lsls	r2, r4, #30
 80064fa:	d01c      	beq.n	8006536 <dhcp_recv+0x28e>
 80064fc:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <dhcp_recv+0x2c0>)
 80064fe:	f240 6281 	movw	r2, #1665	; 0x681
 8006502:	4922      	ldr	r1, [pc, #136]	; (800658c <dhcp_recv+0x2e4>)
 8006504:	e794      	b.n	8006430 <dhcp_recv+0x188>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8006506:	2607      	movs	r6, #7
        decode_len = 4; /* only copy the first given router */
 8006508:	2404      	movs	r4, #4
 800650a:	e7c2      	b.n	8006492 <dhcp_recv+0x1ea>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800650c:	2608      	movs	r6, #8
 800650e:	e7c0      	b.n	8006492 <dhcp_recv+0x1ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006510:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8006512:	2603      	movs	r6, #3
 8006514:	e7bd      	b.n	8006492 <dhcp_recv+0x1ea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8006516:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8006518:	2600      	movs	r6, #0
 800651a:	e7ba      	b.n	8006492 <dhcp_recv+0x1ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800651c:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800651e:	2602      	movs	r6, #2
 8006520:	e7b7      	b.n	8006492 <dhcp_recv+0x1ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006522:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8006524:	461e      	mov	r6, r3
 8006526:	e7b4      	b.n	8006492 <dhcp_recv+0x1ea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006528:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800652a:	2605      	movs	r6, #5
 800652c:	e7b1      	b.n	8006492 <dhcp_recv+0x1ea>
    if (op == DHCP_OPTION_PAD) {
 800652e:	f04f 36ff 	mov.w	r6, #4294967295
 8006532:	2400      	movs	r4, #0
 8006534:	e7ad      	b.n	8006492 <dhcp_recv+0x1ea>
            dhcp_got_option(dhcp, decode_idx);
 8006536:	2301      	movs	r3, #1
 8006538:	9a06      	ldr	r2, [sp, #24]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800653a:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 800653c:	3c04      	subs	r4, #4
            dhcp_got_option(dhcp, decode_idx);
 800653e:	7013      	strb	r3, [r2, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8006540:	f7fe fdff 	bl	8005142 <lwip_htonl>
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <dhcp_recv+0x2e8>)
            if (next_val_offset < val_offset) {
 8006546:	9a02      	ldr	r2, [sp, #8]
            decode_len = (u8_t)(decode_len - 4);
 8006548:	b2e4      	uxtb	r4, r4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800654a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
            next_val_offset = (u16_t)(val_offset + 4);
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	3304      	adds	r3, #4
 8006552:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 8006554:	429a      	cmp	r2, r3
 8006556:	f63f aeee 	bhi.w	8006336 <dhcp_recv+0x8e>
            decode_idx++;
 800655a:	3601      	adds	r6, #1
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	e7aa      	b.n	80064b6 <dhcp_recv+0x20e>
 8006560:	20007084 	.word	0x20007084
 8006564:	2000709c 	.word	0x2000709c
 8006568:	0801040d 	.word	0x0801040d
 800656c:	080104f1 	.word	0x080104f1
 8006570:	0801047d 	.word	0x0801047d
 8006574:	08010486 	.word	0x08010486
 8006578:	080104d0 	.word	0x080104d0
 800657c:	0800fff2 	.word	0x0800fff2
 8006580:	08010498 	.word	0x08010498
 8006584:	080104a1 	.word	0x080104a1
 8006588:	080104b8 	.word	0x080104b8
 800658c:	080104c9 	.word	0x080104c9
 8006590:	200070a8 	.word	0x200070a8
          } else if (decode_len == 4) {
 8006594:	d10b      	bne.n	80065ae <dhcp_recv+0x306>
            value = lwip_ntohl(value);
 8006596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006598:	f7fe fdd3 	bl	8005142 <lwip_htonl>
 800659c:	9009      	str	r0, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
 800659e:	2301      	movs	r3, #1
 80065a0:	9a03      	ldr	r2, [sp, #12]
 80065a2:	5593      	strb	r3, [r2, r6]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80065a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a6:	4b5b      	ldr	r3, [pc, #364]	; (8006714 <dhcp_recv+0x46c>)
 80065a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065ac:	e6f2      	b.n	8006394 <dhcp_recv+0xec>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80065ae:	2c01      	cmp	r4, #1
 80065b0:	d004      	beq.n	80065bc <dhcp_recv+0x314>
 80065b2:	4b59      	ldr	r3, [pc, #356]	; (8006718 <dhcp_recv+0x470>)
 80065b4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80065b8:	4958      	ldr	r1, [pc, #352]	; (800671c <dhcp_recv+0x474>)
 80065ba:	e739      	b.n	8006430 <dhcp_recv+0x188>
            value = ((u8_t *)&value)[0];
 80065bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	e7ec      	b.n	800659e <dhcp_recv+0x2f6>
        options = (u8_t *)q->payload;
 80065c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065c8:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80065ca:	454d      	cmp	r5, r9
 80065cc:	d204      	bcs.n	80065d8 <dhcp_recv+0x330>
 80065ce:	9b05      	ldr	r3, [sp, #20]
 80065d0:	5d5a      	ldrb	r2, [r3, r5]
 80065d2:	2aff      	cmp	r2, #255	; 0xff
 80065d4:	f47f aec3 	bne.w	800635e <dhcp_recv+0xb6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d07a      	beq.n	80066d6 <dhcp_recv+0x42e>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065e0:	4b4c      	ldr	r3, [pc, #304]	; (8006714 <dhcp_recv+0x46c>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065e2:	2200      	movs	r2, #0
 80065e4:	9903      	ldr	r1, [sp, #12]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065e6:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80065e8:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d00c      	beq.n	8006608 <dhcp_recv+0x360>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d106      	bne.n	8006600 <dhcp_recv+0x358>
    parse_sname_as_options = 0;
 80065f2:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80065f4:	f04f 096c 	mov.w	r9, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80065f8:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 80065fc:	9304      	str	r3, [sp, #16]
 80065fe:	e689      	b.n	8006314 <dhcp_recv+0x6c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8006600:	2b03      	cmp	r3, #3
 8006602:	d168      	bne.n	80066d6 <dhcp_recv+0x42e>
      parse_sname_as_options = 1;
 8006604:	2301      	movs	r3, #1
 8006606:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8006608:	f04f 09ec 	mov.w	r9, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800660c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8006610:	e680      	b.n	8006314 <dhcp_recv+0x6c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8006612:	3b03      	subs	r3, #3
 8006614:	2b02      	cmp	r3, #2
 8006616:	f63f ae8e 	bhi.w	8006336 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 800661a:	6a38      	ldr	r0, [r7, #32]
 800661c:	4629      	mov	r1, r5
 800661e:	f7ff fdf5 	bl	800620c <dhcp_handle_ack.isra.2>
      dhcp_bind(netif);
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff fd18 	bl	8006058 <dhcp_bind>
 8006628:	e685      	b.n	8006336 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 800662a:	2b06      	cmp	r3, #6
 800662c:	d115      	bne.n	800665a <dhcp_recv+0x3b2>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8006632:	1eda      	subs	r2, r3, #3
 8006634:	2a02      	cmp	r2, #2
 8006636:	d902      	bls.n	800663e <dhcp_recv+0x396>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006638:	2b01      	cmp	r3, #1
 800663a:	f47f ae7c 	bne.w	8006336 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800663e:	6a38      	ldr	r0, [r7, #32]
 8006640:	210c      	movs	r1, #12
 8006642:	f7ff fa19 	bl	8005a78 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006646:	4b36      	ldr	r3, [pc, #216]	; (8006720 <dhcp_recv+0x478>)
 8006648:	4638      	mov	r0, r7
 800664a:	461a      	mov	r2, r3
 800664c:	4619      	mov	r1, r3
 800664e:	f002 f981 	bl	8008954 <netif_set_addr>
  dhcp_discover(netif);
 8006652:	4638      	mov	r0, r7
 8006654:	f7ff fc76 	bl	8005f44 <dhcp_discover>
 8006658:	e66d      	b.n	8006336 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800665a:	2b02      	cmp	r3, #2
 800665c:	f47f ae6b 	bne.w	8006336 <dhcp_recv+0x8e>
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	795b      	ldrb	r3, [r3, #5]
 8006664:	2b06      	cmp	r3, #6
 8006666:	f47f ae66 	bne.w	8006336 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f43f ae61 	beq.w	8006336 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006674:	6a3c      	ldr	r4, [r7, #32]
    dhcp->request_timeout = 0; /* stop timer */
 8006676:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800667a:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 800667c:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800667e:	f7fe fd60 	bl	8005142 <lwip_htonl>
 8006682:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006684:	692b      	ldr	r3, [r5, #16]
    dhcp_select(netif);
 8006686:	4638      	mov	r0, r7
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006688:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 800668a:	f7ff fb9f 	bl	8005dcc <dhcp_select>
 800668e:	e652      	b.n	8006336 <dhcp_recv+0x8e>
    switch (op) {
 8006690:	2a33      	cmp	r2, #51	; 0x33
 8006692:	f43f aedd 	beq.w	8006450 <dhcp_recv+0x1a8>
 8006696:	d80c      	bhi.n	80066b2 <dhcp_recv+0x40a>
 8006698:	2a01      	cmp	r2, #1
 800669a:	f43f aeb6 	beq.w	800640a <dhcp_recv+0x162>
 800669e:	f4ff ae78 	bcc.w	8006392 <dhcp_recv+0xea>
 80066a2:	2a03      	cmp	r2, #3
 80066a4:	f43f aeb8 	beq.w	8006418 <dhcp_recv+0x170>
 80066a8:	2a06      	cmp	r2, #6
 80066aa:	f43f aeba 	beq.w	8006422 <dhcp_recv+0x17a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80066ae:	2300      	movs	r3, #0
 80066b0:	e66c      	b.n	800638c <dhcp_recv+0xe4>
    switch (op) {
 80066b2:	2a36      	cmp	r2, #54	; 0x36
 80066b4:	f43f aee1 	beq.w	800647a <dhcp_recv+0x1d2>
 80066b8:	d806      	bhi.n	80066c8 <dhcp_recv+0x420>
 80066ba:	2a34      	cmp	r2, #52	; 0x34
 80066bc:	f43f aece 	beq.w	800645c <dhcp_recv+0x1b4>
 80066c0:	2a35      	cmp	r2, #53	; 0x35
 80066c2:	f43f ae91 	beq.w	80063e8 <dhcp_recv+0x140>
 80066c6:	e7f2      	b.n	80066ae <dhcp_recv+0x406>
 80066c8:	2a3a      	cmp	r2, #58	; 0x3a
 80066ca:	f43f aedc 	beq.w	8006486 <dhcp_recv+0x1de>
 80066ce:	2a3b      	cmp	r2, #59	; 0x3b
 80066d0:	f43f ae95 	beq.w	80063fe <dhcp_recv+0x156>
 80066d4:	e7eb      	b.n	80066ae <dhcp_recv+0x406>
  } else if (parse_sname_as_options) {
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d18a      	bne.n	80065f2 <dhcp_recv+0x34a>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f43f ae28 	beq.w	8006336 <dhcp_recv+0x8e>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80066e6:	4a0b      	ldr	r2, [pc, #44]	; (8006714 <dhcp_recv+0x46c>)
  msg_in = (struct dhcp_msg *)p->payload;
 80066e8:	f8da 5004 	ldr.w	r5, [sl, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80066ec:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d19b      	bne.n	800662a <dhcp_recv+0x382>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80066f2:	9b01      	ldr	r3, [sp, #4]
 80066f4:	795b      	ldrb	r3, [r3, #5]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d18b      	bne.n	8006612 <dhcp_recv+0x36a>
      dhcp_handle_ack(netif, msg_in);
 80066fa:	6a38      	ldr	r0, [r7, #32]
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7ff fd85 	bl	800620c <dhcp_handle_ack.isra.2>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8006702:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
        dhcp_check(netif);
 8006706:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8006708:	071b      	lsls	r3, r3, #28
 800670a:	d58b      	bpl.n	8006624 <dhcp_recv+0x37c>
        dhcp_check(netif);
 800670c:	f7ff fc8e 	bl	800602c <dhcp_check>
 8006710:	e611      	b.n	8006336 <dhcp_recv+0x8e>
 8006712:	bf00      	nop
 8006714:	200070a8 	.word	0x200070a8
 8006718:	0801040d 	.word	0x0801040d
 800671c:	080104de 	.word	0x080104de
 8006720:	080108a4 	.word	0x080108a4

08006724 <dhcp_arp_reply>:
{
 8006724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006728:	4607      	mov	r7, r0
 800672a:	b948      	cbnz	r0, 8006740 <dhcp_arp_reply+0x1c>
 800672c:	4b27      	ldr	r3, [pc, #156]	; (80067cc <dhcp_arp_reply+0xa8>)
 800672e:	f240 328b 	movw	r2, #907	; 0x38b
 8006732:	4927      	ldr	r1, [pc, #156]	; (80067d0 <dhcp_arp_reply+0xac>)
 8006734:	4827      	ldr	r0, [pc, #156]	; (80067d4 <dhcp_arp_reply+0xb0>)
 8006736:	f008 f9e5 	bl	800eb04 <iprintf>
}
 800673a:	b004      	add	sp, #16
 800673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dhcp = netif_dhcp_data(netif);
 8006740:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8006742:	2c00      	cmp	r4, #0
 8006744:	d0f9      	beq.n	800673a <dhcp_arp_reply+0x16>
 8006746:	7963      	ldrb	r3, [r4, #5]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d1f6      	bne.n	800673a <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800674c:	680a      	ldr	r2, [r1, #0]
 800674e:	69e3      	ldr	r3, [r4, #28]
 8006750:	429a      	cmp	r2, r3
 8006752:	d1f2      	bne.n	800673a <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8006754:	210c      	movs	r1, #12
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff f98e 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800675c:	f10d 030e 	add.w	r3, sp, #14
 8006760:	2204      	movs	r2, #4
 8006762:	4621      	mov	r1, r4
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff fa05 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 800676a:	4605      	mov	r5, r0
 800676c:	b330      	cbz	r0, 80067bc <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800676e:	6846      	ldr	r6, [r0, #4]
 8006770:	2304      	movs	r3, #4
 8006772:	2232      	movs	r2, #50	; 0x32
 8006774:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006778:	36f0      	adds	r6, #240	; 0xf0
 800677a:	4631      	mov	r1, r6
 800677c:	f7ff f9a0 	bl	8005ac0 <dhcp_option>
 8006780:	4680      	mov	r8, r0
 8006782:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006786:	69e0      	ldr	r0, [r4, #28]
 8006788:	f7fe fcdb 	bl	8005142 <lwip_htonl>
 800678c:	4631      	mov	r1, r6
 800678e:	4602      	mov	r2, r0
 8006790:	4640      	mov	r0, r8
 8006792:	f7ff f9cb 	bl	8005b2c <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006796:	462a      	mov	r2, r5
 8006798:	4631      	mov	r1, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800679a:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800679e:	f7ff fa7d 	bl	8005c9c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <dhcp_arp_reply+0xb4>)
 80067a4:	480d      	ldr	r0, [pc, #52]	; (80067dc <dhcp_arp_reply+0xb8>)
 80067a6:	4629      	mov	r1, r5
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	2343      	movs	r3, #67	; 0x43
 80067ac:	9700      	str	r7, [sp, #0]
 80067ae:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <dhcp_arp_reply+0xbc>)
 80067b0:	6800      	ldr	r0, [r0, #0]
 80067b2:	f006 fd3f 	bl	800d234 <udp_sendto_if_src>
    pbuf_free(p_out);
 80067b6:	4628      	mov	r0, r5
 80067b8:	f002 faa8 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 80067bc:	79a3      	ldrb	r3, [r4, #6]
 80067be:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80067c0:	bf1c      	itt	ne
 80067c2:	3301      	addne	r3, #1
 80067c4:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80067c6:	2314      	movs	r3, #20
 80067c8:	8123      	strh	r3, [r4, #8]
 80067ca:	e7b6      	b.n	800673a <dhcp_arp_reply+0x16>
 80067cc:	0801040d 	.word	0x0801040d
 80067d0:	0801026c 	.word	0x0801026c
 80067d4:	0800fff2 	.word	0x0800fff2
 80067d8:	080108a4 	.word	0x080108a4
 80067dc:	20006be8 	.word	0x20006be8
 80067e0:	080108a8 	.word	0x080108a8

080067e4 <dhcp_renew>:
{
 80067e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80067e8:	6a04      	ldr	r4, [r0, #32]
{
 80067ea:	b085      	sub	sp, #20
 80067ec:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80067ee:	2105      	movs	r1, #5
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff f941 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80067f6:	f10d 030e 	add.w	r3, sp, #14
 80067fa:	2203      	movs	r2, #3
 80067fc:	4621      	mov	r1, r4
 80067fe:	4638      	mov	r0, r7
 8006800:	f7ff f9b8 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 8006804:	4606      	mov	r6, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	d056      	beq.n	80068b8 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800680a:	6845      	ldr	r5, [r0, #4]
 800680c:	2302      	movs	r3, #2
 800680e:	2239      	movs	r2, #57	; 0x39
 8006810:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006814:	35f0      	adds	r5, #240	; 0xf0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006816:	f04f 0800 	mov.w	r8, #0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800681a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80068c4 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800681e:	4629      	mov	r1, r5
 8006820:	f7ff f94e 	bl	8005ac0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006826:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006828:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800682c:	f7ff f92c 	bl	8005a88 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006830:	2304      	movs	r3, #4
 8006832:	2237      	movs	r2, #55	; 0x37
 8006834:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006836:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800683a:	f7ff f941 	bl	8005ac0 <dhcp_option>
 800683e:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006842:	f819 2008 	ldrb.w	r2, [r9, r8]
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	4629      	mov	r1, r5
 800684c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006850:	f7ff f954 	bl	8005afc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006854:	f1b8 0f04 	cmp.w	r8, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006858:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800685c:	d1f1      	bne.n	8006842 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800685e:	4629      	mov	r1, r5
 8006860:	4632      	mov	r2, r6
 8006862:	f7ff fa1b 	bl	8005c9c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006866:	4816      	ldr	r0, [pc, #88]	; (80068c0 <dhcp_renew+0xdc>)
 8006868:	9700      	str	r7, [sp, #0]
 800686a:	2343      	movs	r3, #67	; 0x43
 800686c:	f104 0218 	add.w	r2, r4, #24
 8006870:	4631      	mov	r1, r6
 8006872:	6800      	ldr	r0, [r0, #0]
 8006874:	f006 fd78 	bl	800d368 <udp_sendto_if>
 8006878:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800687a:	4630      	mov	r0, r6
 800687c:	f002 fa46 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 8006880:	79a3      	ldrb	r3, [r4, #6]
}
 8006882:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8006884:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006886:	bf1c      	itt	ne
 8006888:	3301      	addne	r3, #1
 800688a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800688c:	79a3      	ldrb	r3, [r4, #6]
 800688e:	2b09      	cmp	r3, #9
 8006890:	bf96      	itet	ls
 8006892:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006896:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800689a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800689e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80068a2:	bf9c      	itt	ls
 80068a4:	011b      	lslls	r3, r3, #4
 80068a6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80068a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80068ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80068b0:	8123      	strh	r3, [r4, #8]
}
 80068b2:	b005      	add	sp, #20
 80068b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 80068b8:	f04f 35ff 	mov.w	r5, #4294967295
 80068bc:	e7e0      	b.n	8006880 <dhcp_renew+0x9c>
 80068be:	bf00      	nop
 80068c0:	20006be8 	.word	0x20006be8
 80068c4:	08010333 	.word	0x08010333

080068c8 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80068c8:	b158      	cbz	r0, 80068e2 <dhcp_supplied_address+0x1a>
 80068ca:	6a00      	ldr	r0, [r0, #32]
 80068cc:	b148      	cbz	r0, 80068e2 <dhcp_supplied_address+0x1a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80068ce:	7940      	ldrb	r0, [r0, #5]
 80068d0:	280a      	cmp	r0, #10
 80068d2:	d005      	beq.n	80068e0 <dhcp_supplied_address+0x18>
 80068d4:	3804      	subs	r0, #4
 80068d6:	2801      	cmp	r0, #1
 80068d8:	bf8c      	ite	hi
 80068da:	2000      	movhi	r0, #0
 80068dc:	2001      	movls	r0, #1
 80068de:	4770      	bx	lr
 80068e0:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 80068e2:	4770      	bx	lr

080068e4 <dhcp_release_and_stop>:
{
 80068e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80068e8:	6a04      	ldr	r4, [r0, #32]
{
 80068ea:	4607      	mov	r7, r0
  if (dhcp == NULL) {
 80068ec:	2c00      	cmp	r4, #0
 80068ee:	d051      	beq.n	8006994 <dhcp_release_and_stop+0xb0>
  if (dhcp->state == DHCP_STATE_OFF) {
 80068f0:	7963      	ldrb	r3, [r4, #5]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04e      	beq.n	8006994 <dhcp_release_and_stop+0xb0>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80068fa:	2300      	movs	r3, #0
 80068fc:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80068fe:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006900:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006902:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8006904:	6323      	str	r3, [r4, #48]	; 0x30
 8006906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006908:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800690a:	82a3      	strh	r3, [r4, #20]
 800690c:	8263      	strh	r3, [r4, #18]
 800690e:	8223      	strh	r3, [r4, #16]
 8006910:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 8006912:	f7ff ffd9 	bl	80068c8 <dhcp_supplied_address>
 8006916:	b368      	cbz	r0, 8006974 <dhcp_release_and_stop+0x90>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8006918:	f10d 030a 	add.w	r3, sp, #10
 800691c:	2207      	movs	r2, #7
 800691e:	4621      	mov	r1, r4
 8006920:	4638      	mov	r0, r7
 8006922:	f7ff f927 	bl	8005b74 <dhcp_create_msg>
    if (p_out != NULL) {
 8006926:	4605      	mov	r5, r0
 8006928:	b320      	cbz	r0, 8006974 <dhcp_release_and_stop+0x90>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800692a:	6846      	ldr	r6, [r0, #4]
 800692c:	2304      	movs	r3, #4
 800692e:	2236      	movs	r2, #54	; 0x36
 8006930:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8006934:	36f0      	adds	r6, #240	; 0xf0
 8006936:	4631      	mov	r1, r6
 8006938:	f7ff f8c2 	bl	8005ac0 <dhcp_option>
 800693c:	4680      	mov	r8, r0
 800693e:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006942:	9803      	ldr	r0, [sp, #12]
 8006944:	f7fe fbfd 	bl	8005142 <lwip_htonl>
 8006948:	4631      	mov	r1, r6
 800694a:	4602      	mov	r2, r0
 800694c:	4640      	mov	r0, r8
 800694e:	f7ff f8ed 	bl	8005b2c <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006952:	462a      	mov	r2, r5
 8006954:	4631      	mov	r1, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006956:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800695a:	f7ff f99f 	bl	8005c9c <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800695e:	480f      	ldr	r0, [pc, #60]	; (800699c <dhcp_release_and_stop+0xb8>)
 8006960:	9700      	str	r7, [sp, #0]
 8006962:	2343      	movs	r3, #67	; 0x43
 8006964:	aa03      	add	r2, sp, #12
 8006966:	4629      	mov	r1, r5
 8006968:	6800      	ldr	r0, [r0, #0]
 800696a:	f006 fcfd 	bl	800d368 <udp_sendto_if>
      pbuf_free(p_out);
 800696e:	4628      	mov	r0, r5
 8006970:	f002 f9cc 	bl	8008d0c <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <dhcp_release_and_stop+0xbc>)
 8006976:	4638      	mov	r0, r7
 8006978:	4619      	mov	r1, r3
 800697a:	461a      	mov	r2, r3
 800697c:	f001 ffea 	bl	8008954 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8006980:	2100      	movs	r1, #0
 8006982:	4620      	mov	r0, r4
 8006984:	f7ff f878 	bl	8005a78 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8006988:	7923      	ldrb	r3, [r4, #4]
 800698a:	b11b      	cbz	r3, 8006994 <dhcp_release_and_stop+0xb0>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800698c:	f7ff fc1e 	bl	80061cc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	7123      	strb	r3, [r4, #4]
}
 8006994:	b004      	add	sp, #16
 8006996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699a:	bf00      	nop
 800699c:	20006be8 	.word	0x20006be8
 80069a0:	080108a4 	.word	0x080108a4

080069a4 <dhcp_start>:
{
 80069a4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80069a6:	4604      	mov	r4, r0
 80069a8:	b950      	cbnz	r0, 80069c0 <dhcp_start+0x1c>
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <dhcp_start+0x98>)
 80069ac:	f240 22e7 	movw	r2, #743	; 0x2e7
 80069b0:	4923      	ldr	r1, [pc, #140]	; (8006a40 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80069b2:	4824      	ldr	r0, [pc, #144]	; (8006a44 <dhcp_start+0xa0>)
 80069b4:	f008 f8a6 	bl	800eb04 <iprintf>
 80069b8:	f06f 020f 	mvn.w	r2, #15
}
 80069bc:	4610      	mov	r0, r2
 80069be:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80069c0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80069c4:	07da      	lsls	r2, r3, #31
 80069c6:	d404      	bmi.n	80069d2 <dhcp_start+0x2e>
 80069c8:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <dhcp_start+0x98>)
 80069ca:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80069ce:	491e      	ldr	r1, [pc, #120]	; (8006a48 <dhcp_start+0xa4>)
 80069d0:	e7ef      	b.n	80069b2 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80069d2:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  dhcp = netif_dhcp_data(netif);
 80069d4:	6a05      	ldr	r5, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80069d6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80069da:	d202      	bcs.n	80069e2 <dhcp_start+0x3e>
    return ERR_MEM;
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	e7ec      	b.n	80069bc <dhcp_start+0x18>
  if (dhcp == NULL) {
 80069e2:	b9dd      	cbnz	r5, 8006a1c <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80069e4:	2034      	movs	r0, #52	; 0x34
 80069e6:	f001 fe15 	bl	8008614 <mem_malloc>
    if (dhcp == NULL) {
 80069ea:	4605      	mov	r5, r0
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d0f5      	beq.n	80069dc <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80069f0:	6220      	str	r0, [r4, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 80069f2:	2234      	movs	r2, #52	; 0x34
 80069f4:	2100      	movs	r1, #0
 80069f6:	4628      	mov	r0, r5
 80069f8:	f008 f87c 	bl	800eaf4 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80069fc:	f7ff fbac 	bl	8006158 <dhcp_inc_pcb_refcount>
 8006a00:	4602      	mov	r2, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d1ea      	bne.n	80069dc <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8006a06:	2301      	movs	r3, #1
 8006a08:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8006a0a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006a0e:	075b      	lsls	r3, r3, #29
 8006a10:	d40a      	bmi.n	8006a28 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8006a12:	2102      	movs	r1, #2
 8006a14:	4628      	mov	r0, r5
 8006a16:	f7ff f82f 	bl	8005a78 <dhcp_set_state>
    return ERR_OK;
 8006a1a:	e7cf      	b.n	80069bc <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8006a1c:	792b      	ldrb	r3, [r5, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e7      	beq.n	80069f2 <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006a22:	f7ff fbd3 	bl	80061cc <dhcp_dec_pcb_refcount>
 8006a26:	e7e4      	b.n	80069f2 <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff fa8b 	bl	8005f44 <dhcp_discover>
  if (result != ERR_OK) {
 8006a2e:	4602      	mov	r2, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0c3      	beq.n	80069bc <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8006a34:	4620      	mov	r0, r4
 8006a36:	f7ff ff55 	bl	80068e4 <dhcp_release_and_stop>
 8006a3a:	e7cf      	b.n	80069dc <dhcp_start+0x38>
 8006a3c:	0801040d 	.word	0x0801040d
 8006a40:	0801026c 	.word	0x0801026c
 8006a44:	0800fff2 	.word	0x0800fff2
 8006a48:	0801055d 	.word	0x0801055d

08006a4c <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8006a4c:	4b57      	ldr	r3, [pc, #348]	; (8006bac <dhcp_coarse_tmr+0x160>)
{
 8006a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8006a52:	681d      	ldr	r5, [r3, #0]
{
 8006a54:	b085      	sub	sp, #20
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006a56:	4e56      	ldr	r6, [pc, #344]	; (8006bb0 <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006a58:	4f56      	ldr	r7, [pc, #344]	; (8006bb4 <dhcp_coarse_tmr+0x168>)
 8006a5a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8006bb8 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 8006a5e:	b915      	cbnz	r5, 8006a66 <dhcp_coarse_tmr+0x1a>
}
 8006a60:	b005      	add	sp, #20
 8006a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006a66:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8006a68:	b17c      	cbz	r4, 8006a8a <dhcp_coarse_tmr+0x3e>
 8006a6a:	7963      	ldrb	r3, [r4, #5]
 8006a6c:	b16b      	cbz	r3, 8006a8a <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8006a6e:	8aa1      	ldrh	r1, [r4, #20]
 8006a70:	b169      	cbz	r1, 8006a8e <dhcp_coarse_tmr+0x42>
 8006a72:	8a62      	ldrh	r2, [r4, #18]
 8006a74:	3201      	adds	r2, #1
 8006a76:	b292      	uxth	r2, r2
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	8262      	strh	r2, [r4, #18]
 8006a7c:	d107      	bne.n	8006a8e <dhcp_coarse_tmr+0x42>
        dhcp_release_and_stop(netif);
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7ff ff30 	bl	80068e4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7ff ff8d 	bl	80069a4 <dhcp_start>
  NETIF_FOREACH(netif) {
 8006a8a:	682d      	ldr	r5, [r5, #0]
 8006a8c:	e7e7      	b.n	8006a5e <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8006a8e:	8a22      	ldrh	r2, [r4, #16]
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d072      	beq.n	8006b7a <dhcp_coarse_tmr+0x12e>
 8006a94:	1e51      	subs	r1, r2, #1
 8006a96:	2a01      	cmp	r2, #1
 8006a98:	8221      	strh	r1, [r4, #16]
 8006a9a:	d16e      	bne.n	8006b7a <dhcp_coarse_tmr+0x12e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d8f2      	bhi.n	8006a8a <dhcp_coarse_tmr+0x3e>
 8006aa4:	f240 2919 	movw	r9, #537	; 0x219
 8006aa8:	fa29 f903 	lsr.w	r9, r9, r3
 8006aac:	ea6f 0909 	mvn.w	r9, r9
 8006ab0:	f019 0901 	ands.w	r9, r9, #1
 8006ab4:	d1e9      	bne.n	8006a8a <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fe ffdd 	bl	8005a78 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006abe:	f10d 030e 	add.w	r3, sp, #14
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7ff f854 	bl	8005b74 <dhcp_create_msg>
  if (p_out != NULL) {
 8006acc:	4683      	mov	fp, r0
 8006ace:	b3a0      	cbz	r0, 8006b3a <dhcp_coarse_tmr+0xee>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006ad0:	6843      	ldr	r3, [r0, #4]
 8006ad2:	2239      	movs	r2, #57	; 0x39
 8006ad4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006ad8:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 8006adc:	2302      	movs	r3, #2
 8006ade:	4651      	mov	r1, sl
 8006ae0:	f7fe ffee 	bl	8005ac0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006ae4:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8006ae6:	4651      	mov	r1, sl
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006ae8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006aec:	f7fe ffcc 	bl	8005a88 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006af0:	2304      	movs	r3, #4
 8006af2:	2237      	movs	r2, #55	; 0x37
 8006af4:	4651      	mov	r1, sl
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006af6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006afa:	f7fe ffe1 	bl	8005ac0 <dhcp_option>
 8006afe:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006b02:	f816 2009 	ldrb.w	r2, [r6, r9]
 8006b06:	f109 0901 	add.w	r9, r9, #1
 8006b0a:	4651      	mov	r1, sl
 8006b0c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006b10:	f7fe fff4 	bl	8005afc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006b14:	f1b9 0f04 	cmp.w	r9, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006b18:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006b1c:	d1f1      	bne.n	8006b02 <dhcp_coarse_tmr+0xb6>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006b1e:	465a      	mov	r2, fp
 8006b20:	4651      	mov	r1, sl
 8006b22:	f7ff f8bb 	bl	8005c9c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006b26:	9500      	str	r5, [sp, #0]
 8006b28:	2343      	movs	r3, #67	; 0x43
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	6838      	ldr	r0, [r7, #0]
 8006b30:	f006 fc1a 	bl	800d368 <udp_sendto_if>
    pbuf_free(p_out);
 8006b34:	4658      	mov	r0, fp
 8006b36:	f002 f8e9 	bl	8008d0c <pbuf_free>
  if (dhcp->tries < 255) {
 8006b3a:	79a3      	ldrb	r3, [r4, #6]
 8006b3c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006b3e:	bf1c      	itt	ne
 8006b40:	3301      	addne	r3, #1
 8006b42:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006b44:	79a3      	ldrb	r3, [r4, #6]
 8006b46:	2b09      	cmp	r3, #9
 8006b48:	bf96      	itet	ls
 8006b4a:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006b4e:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8006b52:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006b56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006b5a:	bf9c      	itt	ls
 8006b5c:	00db      	lslls	r3, r3, #3
 8006b5e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006b60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006b64:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006b68:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006b6a:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006b6c:	8aa3      	ldrh	r3, [r4, #20]
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	dd8a      	ble.n	8006a8a <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8006b74:	105b      	asrs	r3, r3, #1
 8006b76:	8223      	strh	r3, [r4, #16]
 8006b78:	e787      	b.n	8006a8a <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8006b7a:	89e2      	ldrh	r2, [r4, #14]
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	d084      	beq.n	8006a8a <dhcp_coarse_tmr+0x3e>
 8006b80:	1e51      	subs	r1, r2, #1
 8006b82:	2a01      	cmp	r2, #1
 8006b84:	81e1      	strh	r1, [r4, #14]
 8006b86:	d180      	bne.n	8006a8a <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006b88:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8006b8c:	2a01      	cmp	r2, #1
 8006b8e:	d002      	beq.n	8006b96 <dhcp_coarse_tmr+0x14a>
 8006b90:	2b0a      	cmp	r3, #10
 8006b92:	f47f af7a 	bne.w	8006a8a <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff fe24 	bl	80067e4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	8a62      	ldrh	r2, [r4, #18]
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8006ba4:	bfc4      	itt	gt
 8006ba6:	105b      	asrgt	r3, r3, #1
 8006ba8:	81e3      	strhgt	r3, [r4, #14]
 8006baa:	e76e      	b.n	8006a8a <dhcp_coarse_tmr+0x3e>
 8006bac:	2000becc 	.word	0x2000becc
 8006bb0:	08010333 	.word	0x08010333
 8006bb4:	20006be8 	.word	0x20006be8
 8006bb8:	080108a8 	.word	0x080108a8

08006bbc <dhcp_fine_tmr>:
{
 8006bbc:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8006bc0:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8006bc2:	681c      	ldr	r4, [r3, #0]
 8006bc4:	b904      	cbnz	r4, 8006bc8 <dhcp_fine_tmr+0xc>
}
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006bc8:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 8006bca:	b123      	cbz	r3, 8006bd6 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8006bcc:	891a      	ldrh	r2, [r3, #8]
 8006bce:	2a01      	cmp	r2, #1
 8006bd0:	d903      	bls.n	8006bda <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8006bd2:	3a01      	subs	r2, #1
 8006bd4:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8006bd6:	6824      	ldr	r4, [r4, #0]
 8006bd8:	e7f4      	b.n	8006bc4 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8006bda:	d1fc      	bne.n	8006bd6 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006bdc:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8006bde:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006be0:	2a0c      	cmp	r2, #12
 8006be2:	d001      	beq.n	8006be8 <dhcp_fine_tmr+0x2c>
 8006be4:	2a06      	cmp	r2, #6
 8006be6:	d103      	bne.n	8006bf0 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8006be8:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8006bea:	f7ff f9ab 	bl	8005f44 <dhcp_discover>
 8006bee:	e7f2      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006bf0:	2a01      	cmp	r2, #1
 8006bf2:	d10c      	bne.n	8006c0e <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8006bf4:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8006bf6:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d802      	bhi.n	8006c02 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8006bfc:	f7ff f8e6 	bl	8005dcc <dhcp_select>
 8006c00:	e7e9      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8006c02:	f7ff fe6f 	bl	80068e4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff fecc 	bl	80069a4 <dhcp_start>
 8006c0c:	e7e3      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8006c0e:	2a08      	cmp	r2, #8
 8006c10:	d109      	bne.n	8006c26 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8006c12:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8006c14:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d802      	bhi.n	8006c20 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8006c1a:	f7ff fa07 	bl	800602c <dhcp_check>
 8006c1e:	e7da      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8006c20:	f7ff fa1a 	bl	8006058 <dhcp_bind>
 8006c24:	e7d7      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8006c26:	2a03      	cmp	r2, #3
 8006c28:	d1d5      	bne.n	8006bd6 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8006c2a:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8006c2c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d8db      	bhi.n	8006bea <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8006c32:	f7ff f847 	bl	8005cc4 <dhcp_reboot>
 8006c36:	e7ce      	b.n	8006bd6 <dhcp_fine_tmr+0x1a>
 8006c38:	2000becc 	.word	0x2000becc

08006c3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006c3e:	2618      	movs	r6, #24
 8006c40:	4c07      	ldr	r4, [pc, #28]	; (8006c60 <etharp_free_entry+0x24>)
{
 8006c42:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8006c44:	4346      	muls	r6, r0
 8006c46:	59a0      	ldr	r0, [r4, r6]
 8006c48:	b118      	cbz	r0, 8006c52 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8006c4a:	f002 f85f 	bl	8008d0c <pbuf_free>
    arp_table[i].q = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006c52:	2318      	movs	r3, #24
 8006c54:	fb03 4405 	mla	r4, r3, r5, r4
 8006c58:	2300      	movs	r3, #0
 8006c5a:	7523      	strb	r3, [r4, #20]
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
 8006c5e:	bf00      	nop
 8006c60:	20006bf4 	.word	0x20006bf4

08006c64 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8006c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8006c68:	f04f 0c0a 	mov.w	ip, #10
{
 8006c6c:	f04f 0e00 	mov.w	lr, #0
 8006c70:	4606      	mov	r6, r0
 8006c72:	4617      	mov	r7, r2
 8006c74:	4b44      	ldr	r3, [pc, #272]	; (8006d88 <etharp_find_entry+0x124>)
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006c76:	46f3      	mov	fp, lr
  s16_t empty = ARP_TABLE_SIZE;
 8006c78:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006c7a:	4665      	mov	r5, ip
 8006c7c:	46e0      	mov	r8, ip
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006c7e:	f8cd e004 	str.w	lr, [sp, #4]
 8006c82:	f8cd e000 	str.w	lr, [sp]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006c86:	2c0a      	cmp	r4, #10
 8006c88:	fa0f f08e 	sxth.w	r0, lr
    u8_t state = arp_table[i].state;
 8006c8c:	f893 9014 	ldrb.w	r9, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006c90:	d110      	bne.n	8006cb4 <etharp_find_entry+0x50>
 8006c92:	f1b9 0f00 	cmp.w	r9, #0
 8006c96:	d059      	beq.n	8006d4c <etharp_find_entry+0xe8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006c98:	2e00      	cmp	r6, #0
 8006c9a:	d066      	beq.n	8006d6a <etharp_find_entry+0x106>
 8006c9c:	6832      	ldr	r2, [r6, #0]
 8006c9e:	4692      	mov	sl, r2
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	4592      	cmp	sl, r2
 8006ca4:	d161      	bne.n	8006d6a <etharp_find_entry+0x106>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8006ca6:	b117      	cbz	r7, 8006cae <etharp_find_entry+0x4a>
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	4297      	cmp	r7, r2
 8006cac:	d15d      	bne.n	8006d6a <etharp_find_entry+0x106>
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8006cae:	b003      	add	sp, #12
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8006cb4:	f1b9 0f00 	cmp.w	r9, #0
 8006cb8:	d1ee      	bne.n	8006c98 <etharp_find_entry+0x34>
 8006cba:	f10e 0e01 	add.w	lr, lr, #1
 8006cbe:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006cc0:	f1be 0f0a 	cmp.w	lr, #10
 8006cc4:	d1df      	bne.n	8006c86 <etharp_find_entry+0x22>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006cc6:	078a      	lsls	r2, r1, #30
 8006cc8:	d44c      	bmi.n	8006d64 <etharp_find_entry+0x100>
 8006cca:	2c0a      	cmp	r4, #10
 8006ccc:	d113      	bne.n	8006cf6 <etharp_find_entry+0x92>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8006cce:	07cb      	lsls	r3, r1, #31
 8006cd0:	d548      	bpl.n	8006d64 <etharp_find_entry+0x100>
    if (old_stable < ARP_TABLE_SIZE) {
 8006cd2:	2d0a      	cmp	r5, #10
 8006cd4:	d03c      	beq.n	8006d50 <etharp_find_entry+0xec>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006cd6:	2318      	movs	r3, #24
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <etharp_find_entry+0x124>)
 8006cda:	436b      	muls	r3, r5
 8006cdc:	58d3      	ldr	r3, [r2, r3]
 8006cde:	b133      	cbz	r3, 8006cee <etharp_find_entry+0x8a>
 8006ce0:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <etharp_find_entry+0x128>)
 8006ce2:	f240 126d 	movw	r2, #365	; 0x16d
 8006ce6:	492a      	ldr	r1, [pc, #168]	; (8006d90 <etharp_find_entry+0x12c>)
 8006ce8:	482a      	ldr	r0, [pc, #168]	; (8006d94 <etharp_find_entry+0x130>)
 8006cea:	f007 ff0b 	bl	800eb04 <iprintf>
    etharp_free_entry(i);
 8006cee:	462c      	mov	r4, r5
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f7ff ffa3 	bl	8006c3c <etharp_free_entry>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006cf6:	2318      	movs	r3, #24
 8006cf8:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <etharp_find_entry+0x124>)
 8006cfa:	fb03 2304 	mla	r3, r3, r4, r2
 8006cfe:	7d1b      	ldrb	r3, [r3, #20]
 8006d00:	b133      	cbz	r3, 8006d10 <etharp_find_entry+0xac>
 8006d02:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <etharp_find_entry+0x128>)
 8006d04:	f240 1285 	movw	r2, #389	; 0x185
 8006d08:	4923      	ldr	r1, [pc, #140]	; (8006d98 <etharp_find_entry+0x134>)
 8006d0a:	4822      	ldr	r0, [pc, #136]	; (8006d94 <etharp_find_entry+0x130>)
 8006d0c:	f007 fefa 	bl	800eb04 <iprintf>
  if (ipaddr != NULL) {
 8006d10:	b12e      	cbz	r6, 8006d1e <etharp_find_entry+0xba>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006d12:	2318      	movs	r3, #24
 8006d14:	491c      	ldr	r1, [pc, #112]	; (8006d88 <etharp_find_entry+0x124>)
 8006d16:	6832      	ldr	r2, [r6, #0]
 8006d18:	fb03 1304 	mla	r3, r3, r4, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8006d1e:	2318      	movs	r3, #24
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <etharp_find_entry+0x124>)
  return (s16_t)i;
 8006d22:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8006d24:	fb03 2a04 	mla	sl, r3, r4, r2
 8006d28:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 8006d2a:	f8ca 7008 	str.w	r7, [sl, #8]
  arp_table[i].ctime = 0;
 8006d2e:	f8aa 3012 	strh.w	r3, [sl, #18]
  return (s16_t)i;
 8006d32:	e7bc      	b.n	8006cae <etharp_find_entry+0x4a>
          if (arp_table[i].ctime >= age_pending) {
 8006d34:	9a01      	ldr	r2, [sp, #4]
 8006d36:	4591      	cmp	r9, r2
 8006d38:	d3bf      	bcc.n	8006cba <etharp_find_entry+0x56>
 8006d3a:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d3e:	4680      	mov	r8, r0
 8006d40:	e7bb      	b.n	8006cba <etharp_find_entry+0x56>
          if (arp_table[i].ctime >= age_stable) {
 8006d42:	45d9      	cmp	r9, fp
 8006d44:	d3b9      	bcc.n	8006cba <etharp_find_entry+0x56>
 8006d46:	46cb      	mov	fp, r9
 8006d48:	4605      	mov	r5, r0
 8006d4a:	e7b6      	b.n	8006cba <etharp_find_entry+0x56>
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e7b4      	b.n	8006cba <etharp_find_entry+0x56>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006d50:	f1b8 0f0a 	cmp.w	r8, #10
 8006d54:	d104      	bne.n	8006d60 <etharp_find_entry+0xfc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006d56:	f1bc 0f0a 	cmp.w	ip, #10
 8006d5a:	d003      	beq.n	8006d64 <etharp_find_entry+0x100>
 8006d5c:	4665      	mov	r5, ip
 8006d5e:	e7c6      	b.n	8006cee <etharp_find_entry+0x8a>
 8006d60:	4645      	mov	r5, r8
 8006d62:	e7c4      	b.n	8006cee <etharp_find_entry+0x8a>
    return (s16_t)ERR_MEM;
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e7a1      	b.n	8006cae <etharp_find_entry+0x4a>
      if (state == ETHARP_STATE_PENDING) {
 8006d6a:	f1b9 0f01 	cmp.w	r9, #1
 8006d6e:	f8b3 9012 	ldrh.w	r9, [r3, #18]
 8006d72:	d1e6      	bne.n	8006d42 <etharp_find_entry+0xde>
        if (arp_table[i].q != NULL) {
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d0dc      	beq.n	8006d34 <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 8006d7a:	9a00      	ldr	r2, [sp, #0]
 8006d7c:	4591      	cmp	r9, r2
 8006d7e:	d39c      	bcc.n	8006cba <etharp_find_entry+0x56>
 8006d80:	f8cd 9000 	str.w	r9, [sp]
 8006d84:	4684      	mov	ip, r0
 8006d86:	e798      	b.n	8006cba <etharp_find_entry+0x56>
 8006d88:	20006bf4 	.word	0x20006bf4
 8006d8c:	0801057e 	.word	0x0801057e
 8006d90:	080105b5 	.word	0x080105b5
 8006d94:	0800fff2 	.word	0x0800fff2
 8006d98:	080105cc 	.word	0x080105cc

08006d9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8006d9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006da2:	4689      	mov	r9, r1
 8006da4:	4692      	mov	sl, r2
 8006da6:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006da8:	4607      	mov	r7, r0
 8006daa:	b930      	cbnz	r0, 8006dba <etharp_raw+0x1e>
 8006dac:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <etharp_raw+0xc8>)
 8006dae:	f240 4257 	movw	r2, #1111	; 0x457
 8006db2:	492d      	ldr	r1, [pc, #180]	; (8006e68 <etharp_raw+0xcc>)
 8006db4:	482d      	ldr	r0, [pc, #180]	; (8006e6c <etharp_raw+0xd0>)
 8006db6:	f007 fea5 	bl	800eb04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006dbe:	211c      	movs	r1, #28
 8006dc0:	200e      	movs	r0, #14
 8006dc2:	f002 f80b 	bl	8008ddc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d047      	beq.n	8006e5c <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006dcc:	8943      	ldrh	r3, [r0, #10]
 8006dce:	2b1b      	cmp	r3, #27
 8006dd0:	d806      	bhi.n	8006de0 <etharp_raw+0x44>
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <etharp_raw+0xc8>)
 8006dd4:	f240 4263 	movw	r2, #1123	; 0x463
 8006dd8:	4925      	ldr	r1, [pc, #148]	; (8006e70 <etharp_raw+0xd4>)
 8006dda:	4824      	ldr	r0, [pc, #144]	; (8006e6c <etharp_raw+0xd0>)
 8006ddc:	f007 fe92 	bl	800eb04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8006de0:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006de2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8006de6:	f7fe f9a9 	bl	800513c <lwip_htons>
 8006dea:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d006      	beq.n	8006e02 <etharp_raw+0x66>
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <etharp_raw+0xc8>)
 8006df6:	f240 426a 	movw	r2, #1130	; 0x46a
 8006dfa:	491e      	ldr	r1, [pc, #120]	; (8006e74 <etharp_raw+0xd8>)
 8006dfc:	481b      	ldr	r0, [pc, #108]	; (8006e6c <etharp_raw+0xd0>)
 8006dfe:	f007 fe81 	bl	800eb04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006e02:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006e06:	464a      	mov	r2, r9
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006e12:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	f8c4 3012 	str.w	r3, [r4, #18]
 8006e1a:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006e1c:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006e1e:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2a:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006e2c:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006e2e:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006e30:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006e32:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006e34:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006e36:	2308      	movs	r3, #8
 8006e38:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8006e3a:	2306      	movs	r3, #6
 8006e3c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006e3e:	2304      	movs	r3, #4
 8006e40:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006e42:	f640 0306 	movw	r3, #2054	; 0x806
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4653      	mov	r3, sl
 8006e4a:	f006 fbf3 	bl	800d634 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f001 ff5c 	bl	8008d0c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006e54:	4628      	mov	r0, r5
}
 8006e56:	b002      	add	sp, #8
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e7f9      	b.n	8006e56 <etharp_raw+0xba>
 8006e62:	bf00      	nop
 8006e64:	0801057e 	.word	0x0801057e
 8006e68:	0801026c 	.word	0x0801026c
 8006e6c:	0800fff2 	.word	0x0800fff2
 8006e70:	080106b8 	.word	0x080106b8
 8006e74:	080106e9 	.word	0x080106e9

08006e78 <etharp_cleanup_netif>:
{
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	4d07      	ldr	r5, [pc, #28]	; (8006e9c <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006e7e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006e80:	7d2b      	ldrb	r3, [r5, #20]
 8006e82:	b12b      	cbz	r3, 8006e90 <etharp_cleanup_netif+0x18>
 8006e84:	68ab      	ldr	r3, [r5, #8]
 8006e86:	42b3      	cmp	r3, r6
 8006e88:	d102      	bne.n	8006e90 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fed6 	bl	8006c3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006e90:	3401      	adds	r4, #1
 8006e92:	3518      	adds	r5, #24
 8006e94:	2c0a      	cmp	r4, #10
 8006e96:	d1f3      	bne.n	8006e80 <etharp_cleanup_netif+0x8>
}
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20006bf4 	.word	0x20006bf4

08006ea0 <etharp_input>:
{
 8006ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	b949      	cbnz	r1, 8006ec0 <etharp_input+0x20>
 8006eac:	4b4a      	ldr	r3, [pc, #296]	; (8006fd8 <etharp_input+0x138>)
 8006eae:	f240 228a 	movw	r2, #650	; 0x28a
 8006eb2:	494a      	ldr	r1, [pc, #296]	; (8006fdc <etharp_input+0x13c>)
 8006eb4:	484a      	ldr	r0, [pc, #296]	; (8006fe0 <etharp_input+0x140>)
 8006eb6:	f007 fe25 	bl	800eb04 <iprintf>
}
 8006eba:	b006      	add	sp, #24
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8006ec0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006ec2:	882b      	ldrh	r3, [r5, #0]
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec8:	d108      	bne.n	8006edc <etharp_input+0x3c>
 8006eca:	792b      	ldrb	r3, [r5, #4]
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	d105      	bne.n	8006edc <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006ed0:	796b      	ldrb	r3, [r5, #5]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d102      	bne.n	8006edc <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006ed6:	886b      	ldrh	r3, [r5, #2]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d003      	beq.n	8006ee4 <etharp_input+0x44>
  pbuf_free(p);
 8006edc:	4640      	mov	r0, r8
 8006ede:	f001 ff15 	bl	8008d0c <pbuf_free>
 8006ee2:	e7ea      	b.n	8006eba <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006ee4:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006ee8:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006eea:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006eec:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006eee:	b116      	cbz	r6, 8006ef6 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006ef0:	1b9b      	subs	r3, r3, r6
 8006ef2:	425e      	negs	r6, r3
 8006ef4:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006ef6:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006ef8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006efc:	f105 0708 	add.w	r7, r5, #8
 8006f00:	bf14      	ite	ne
 8006f02:	f04f 0a01 	movne.w	sl, #1
 8006f06:	f04f 0a02 	moveq.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d006      	beq.n	8006f1c <etharp_input+0x7c>
 8006f0e:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <etharp_input+0x138>)
 8006f10:	f240 12a9 	movw	r2, #425	; 0x1a9
 8006f14:	4933      	ldr	r1, [pc, #204]	; (8006fe4 <etharp_input+0x144>)
 8006f16:	4832      	ldr	r0, [pc, #200]	; (8006fe0 <etharp_input+0x140>)
 8006f18:	f007 fdf4 	bl	800eb04 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8006f1c:	9805      	ldr	r0, [sp, #20]
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d03d      	beq.n	8006f9e <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006f22:	4621      	mov	r1, r4
 8006f24:	f000 fccb 	bl	80078be <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8006f28:	4681      	mov	r9, r0
 8006f2a:	bbc0      	cbnz	r0, 8006f9e <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006f32:	2be0      	cmp	r3, #224	; 0xe0
 8006f34:	d033      	beq.n	8006f9e <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8006f36:	4622      	mov	r2, r4
 8006f38:	4651      	mov	r1, sl
 8006f3a:	a805      	add	r0, sp, #20
 8006f3c:	f7ff fe92 	bl	8006c64 <etharp_find_entry>
  if (i < 0) {
 8006f40:	2800      	cmp	r0, #0
 8006f42:	db2c      	blt.n	8006f9e <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006f44:	2218      	movs	r2, #24
 8006f46:	4b28      	ldr	r3, [pc, #160]	; (8006fe8 <etharp_input+0x148>)
 8006f48:	f04f 0c02 	mov.w	ip, #2
 8006f4c:	fb02 f100 	mul.w	r1, r2, r0
 8006f50:	eb03 0e01 	add.w	lr, r3, r1
 8006f54:	f88e c014 	strb.w	ip, [lr, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006f58:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8006f5c:	f8ce 4008 	str.w	r4, [lr, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006f60:	fb10 c202 	smlabb	r2, r0, r2, ip
 8006f64:	6838      	ldr	r0, [r7, #0]
 8006f66:	eb03 0c02 	add.w	ip, r3, r2
 8006f6a:	5098      	str	r0, [r3, r2]
 8006f6c:	88ba      	ldrh	r2, [r7, #4]
 8006f6e:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8006f72:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 8006f76:	f8ae 9012 	strh.w	r9, [lr, #18]
  if (arp_table[i].q != NULL) {
 8006f7a:	f1ba 0f00 	cmp.w	sl, #0
 8006f7e:	d00e      	beq.n	8006f9e <etharp_input+0xfe>
    arp_table[i].q = NULL;
 8006f80:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f88:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4620      	mov	r0, r4
 8006f92:	463b      	mov	r3, r7
 8006f94:	f006 fb4e 	bl	800d634 <ethernet_output>
    pbuf_free(p);
 8006f98:	4650      	mov	r0, sl
 8006f9a:	f001 feb7 	bl	8008d0c <pbuf_free>
  switch (hdr->opcode) {
 8006f9e:	88eb      	ldrh	r3, [r5, #6]
 8006fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa4:	d007      	beq.n	8006fb6 <etharp_input+0x116>
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006faa:	d197      	bne.n	8006edc <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8006fac:	a905      	add	r1, sp, #20
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f7ff fbb8 	bl	8006724 <dhcp_arp_reply>
      break;
 8006fb4:	e792      	b.n	8006edc <etharp_input+0x3c>
      if (for_us) {
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d090      	beq.n	8006edc <etharp_input+0x3c>
        etharp_raw(netif,
 8006fba:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006fbc:	f104 0326 	add.w	r3, r4, #38	; 0x26
        etharp_raw(netif,
 8006fc0:	9701      	str	r7, [sp, #4]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	9203      	str	r2, [sp, #12]
 8006fc6:	aa05      	add	r2, sp, #20
 8006fc8:	4619      	mov	r1, r3
 8006fca:	9202      	str	r2, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006fcc:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8006fce:	9200      	str	r2, [sp, #0]
 8006fd0:	463a      	mov	r2, r7
 8006fd2:	f7ff fee3 	bl	8006d9c <etharp_raw>
 8006fd6:	e781      	b.n	8006edc <etharp_input+0x3c>
 8006fd8:	0801057e 	.word	0x0801057e
 8006fdc:	0801026c 	.word	0x0801026c
 8006fe0:	0800fff2 	.word	0x0800fff2
 8006fe4:	08010614 	.word	0x08010614
 8006fe8:	20006bf4 	.word	0x20006bf4

08006fec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fee:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006ff0:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8006ff4:	9102      	str	r1, [sp, #8]
 8006ff6:	2401      	movs	r4, #1
 8006ff8:	4905      	ldr	r1, [pc, #20]	; (8007010 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006ffa:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006ffc:	9403      	str	r4, [sp, #12]
 8006ffe:	9101      	str	r1, [sp, #4]
 8007000:	4619      	mov	r1, r3
 8007002:	9200      	str	r2, [sp, #0]
 8007004:	4a03      	ldr	r2, [pc, #12]	; (8007014 <etharp_request+0x28>)
 8007006:	f7ff fec9 	bl	8006d9c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800700a:	b004      	add	sp, #16
 800700c:	bd10      	pop	{r4, pc}
 800700e:	bf00      	nop
 8007010:	08012708 	.word	0x08012708
 8007014:	0801269c 	.word	0x0801269c

08007018 <etharp_tmr>:
{
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	4c13      	ldr	r4, [pc, #76]	; (8007068 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800701c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800701e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007020:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8007022:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8007024:	b16a      	cbz	r2, 8007042 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8007026:	89e3      	ldrh	r3, [r4, #14]
 8007028:	3301      	adds	r3, #1
 800702a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800702c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8007030:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007032:	d203      	bcs.n	800703c <etharp_tmr+0x24>
 8007034:	2a01      	cmp	r2, #1
 8007036:	d109      	bne.n	800704c <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007038:	2b04      	cmp	r3, #4
 800703a:	d90b      	bls.n	8007054 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff fdfd 	bl	8006c3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007042:	3501      	adds	r5, #1
 8007044:	3418      	adds	r4, #24
 8007046:	2d0a      	cmp	r5, #10
 8007048:	d1eb      	bne.n	8007022 <etharp_tmr+0xa>
 800704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800704c:	2a03      	cmp	r2, #3
 800704e:	d106      	bne.n	800705e <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007050:	7427      	strb	r7, [r4, #16]
 8007052:	e7f6      	b.n	8007042 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007054:	4621      	mov	r1, r4
 8007056:	6860      	ldr	r0, [r4, #4]
 8007058:	f7ff ffc8 	bl	8006fec <etharp_request>
 800705c:	e7f1      	b.n	8007042 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800705e:	2a04      	cmp	r2, #4
 8007060:	d1ef      	bne.n	8007042 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007062:	7426      	strb	r6, [r4, #16]
 8007064:	e7ed      	b.n	8007042 <etharp_tmr+0x2a>
 8007066:	bf00      	nop
 8007068:	20006bf8 	.word	0x20006bf8

0800706c <etharp_output_to_arp_index>:
{
 800706c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007070:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007072:	4d27      	ldr	r5, [pc, #156]	; (8007110 <etharp_output_to_arp_index+0xa4>)
 8007074:	2218      	movs	r2, #24
{
 8007076:	b085      	sub	sp, #20
 8007078:	4606      	mov	r6, r0
 800707a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800707c:	fb02 5204 	mla	r2, r2, r4, r5
 8007080:	7d12      	ldrb	r2, [r2, #20]
 8007082:	2a01      	cmp	r2, #1
 8007084:	d806      	bhi.n	8007094 <etharp_output_to_arp_index+0x28>
 8007086:	4b23      	ldr	r3, [pc, #140]	; (8007114 <etharp_output_to_arp_index+0xa8>)
 8007088:	f240 22ef 	movw	r2, #751	; 0x2ef
 800708c:	4922      	ldr	r1, [pc, #136]	; (8007118 <etharp_output_to_arp_index+0xac>)
 800708e:	4823      	ldr	r0, [pc, #140]	; (800711c <etharp_output_to_arp_index+0xb0>)
 8007090:	f007 fd38 	bl	800eb04 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007094:	2118      	movs	r1, #24
 8007096:	f106 0726 	add.w	r7, r6, #38	; 0x26
 800709a:	fb01 5904 	mla	r9, r1, r4, r5
 800709e:	f899 3014 	ldrb.w	r3, [r9, #20]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d10d      	bne.n	80070c2 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80070a6:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 80070aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80070ae:	d917      	bls.n	80070e0 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80070b0:	4649      	mov	r1, r9
 80070b2:	4630      	mov	r0, r6
 80070b4:	3104      	adds	r1, #4
 80070b6:	f7ff ff99 	bl	8006fec <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80070ba:	b910      	cbnz	r0, 80070c2 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80070bc:	2303      	movs	r3, #3
 80070be:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80070c2:	2318      	movs	r3, #24
 80070c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c8:	4641      	mov	r1, r8
 80070ca:	4630      	mov	r0, r6
 80070cc:	fb03 5304 	mla	r3, r3, r4, r5
 80070d0:	9200      	str	r2, [sp, #0]
 80070d2:	463a      	mov	r2, r7
 80070d4:	330c      	adds	r3, #12
 80070d6:	f006 faad 	bl	800d634 <ethernet_output>
}
 80070da:	b005      	add	sp, #20
 80070dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80070e0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80070e4:	d3ed      	bcc.n	80070c2 <etharp_output_to_arp_index+0x56>
 80070e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80070ea:	2101      	movs	r1, #1
 80070ec:	4630      	mov	r0, r6
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	9103      	str	r1, [sp, #12]
 80070f2:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80070f4:	f103 020c 	add.w	r2, r3, #12
 80070f8:	3304      	adds	r3, #4
 80070fa:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80070fc:	442a      	add	r2, r5
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <etharp_output_to_arp_index+0xb4>)
 8007102:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007104:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	463b      	mov	r3, r7
 800710a:	f7ff fe47 	bl	8006d9c <etharp_raw>
 800710e:	e7d4      	b.n	80070ba <etharp_output_to_arp_index+0x4e>
 8007110:	20006bf4 	.word	0x20006bf4
 8007114:	0801057e 	.word	0x0801057e
 8007118:	08010638 	.word	0x08010638
 800711c:	0800fff2 	.word	0x0800fff2
 8007120:	08012708 	.word	0x08012708

08007124 <etharp_query>:
{
 8007124:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	4689      	mov	r9, r1
 800712a:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800712c:	4601      	mov	r1, r0
{
 800712e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007130:	f8d9 0000 	ldr.w	r0, [r9]
 8007134:	f000 fbc3 	bl	80078be <ip4_addr_isbroadcast_u32>
 8007138:	2800      	cmp	r0, #0
 800713a:	d175      	bne.n	8007228 <etharp_query+0x104>
      ip4_addr_ismulticast(ipaddr) ||
 800713c:	f8d9 3000 	ldr.w	r3, [r9]
 8007140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007144:	2ae0      	cmp	r2, #224	; 0xe0
 8007146:	d06f      	beq.n	8007228 <etharp_query+0x104>
      ip4_addr_isany(ipaddr)) {
 8007148:	2b00      	cmp	r3, #0
 800714a:	d06d      	beq.n	8007228 <etharp_query+0x104>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800714c:	463a      	mov	r2, r7
 800714e:	2101      	movs	r1, #1
 8007150:	4648      	mov	r0, r9
 8007152:	f7ff fd87 	bl	8006c64 <etharp_find_entry>
  if (i_err < 0) {
 8007156:	1e04      	subs	r4, r0, #0
 8007158:	da03      	bge.n	8007162 <etharp_query+0x3e>
    return (err_t)i_err;
 800715a:	b260      	sxtb	r0, r4
}
 800715c:	b002      	add	sp, #8
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8007162:	2c7e      	cmp	r4, #126	; 0x7e
 8007164:	dd06      	ble.n	8007174 <etharp_query+0x50>
 8007166:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <etharp_query+0x140>)
 8007168:	f240 32c1 	movw	r2, #961	; 0x3c1
 800716c:	493e      	ldr	r1, [pc, #248]	; (8007268 <etharp_query+0x144>)
 800716e:	483f      	ldr	r0, [pc, #252]	; (800726c <etharp_query+0x148>)
 8007170:	f007 fcc8 	bl	800eb04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8007174:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007176:	4e3e      	ldr	r6, [pc, #248]	; (8007270 <etharp_query+0x14c>)
 8007178:	2218      	movs	r2, #24
 800717a:	fb02 6204 	mla	r2, r2, r4, r6
 800717e:	7d13      	ldrb	r3, [r2, #20]
 8007180:	bb83      	cbnz	r3, 80071e4 <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007182:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 8007186:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007188:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800718c:	2318      	movs	r3, #24
 800718e:	fb03 6304 	mla	r3, r3, r4, r6
 8007192:	7d1b      	ldrb	r3, [r3, #20]
 8007194:	b933      	cbnz	r3, 80071a4 <etharp_query+0x80>
 8007196:	4b33      	ldr	r3, [pc, #204]	; (8007264 <etharp_query+0x140>)
 8007198:	f240 32cf 	movw	r2, #975	; 0x3cf
 800719c:	4935      	ldr	r1, [pc, #212]	; (8007274 <etharp_query+0x150>)
 800719e:	4833      	ldr	r0, [pc, #204]	; (800726c <etharp_query+0x148>)
 80071a0:	f007 fcb0 	bl	800eb04 <iprintf>
  if (is_new_entry || (q == NULL)) {
 80071a4:	f1b8 0f00 	cmp.w	r8, #0
 80071a8:	d101      	bne.n	80071ae <etharp_query+0x8a>
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	d142      	bne.n	8007234 <etharp_query+0x110>
    result = etharp_request(netif, ipaddr);
 80071ae:	4649      	mov	r1, r9
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ff1b 	bl	8006fec <etharp_request>
    if (q == NULL) {
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	d0d0      	beq.n	800715c <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80071ba:	2318      	movs	r3, #24
 80071bc:	fb03 6204 	mla	r2, r3, r4, r6
 80071c0:	7d12      	ldrb	r2, [r2, #20]
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	d911      	bls.n	80071ea <etharp_query+0xc6>
    ETHARP_SET_ADDRHINT(netif, i);
 80071c6:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <etharp_query+0x154>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80071c8:	fb03 6304 	mla	r3, r3, r4, r6
 80071cc:	4629      	mov	r1, r5
 80071ce:	4638      	mov	r0, r7
    ETHARP_SET_ADDRHINT(netif, i);
 80071d0:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80071d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d6:	330c      	adds	r3, #12
 80071d8:	9200      	str	r2, [sp, #0]
 80071da:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80071de:	f006 fa29 	bl	800d634 <ethernet_output>
 80071e2:	e7bb      	b.n	800715c <etharp_query+0x38>
  int is_new_entry = 0;
 80071e4:	f04f 0800 	mov.w	r8, #0
 80071e8:	e7d0      	b.n	800718c <etharp_query+0x68>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80071ea:	d1b7      	bne.n	800715c <etharp_query+0x38>
 80071ec:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80071ee:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007264 <etharp_query+0x140>
 80071f2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800727c <etharp_query+0x158>
 80071f6:	f8df a074 	ldr.w	sl, [pc, #116]	; 800726c <etharp_query+0x148>
    while (p) {
 80071fa:	b91f      	cbnz	r7, 8007204 <etharp_query+0xe0>
      pbuf_ref(p);
 80071fc:	4628      	mov	r0, r5
 80071fe:	f001 fefb 	bl	8008ff8 <pbuf_ref>
 8007202:	e021      	b.n	8007248 <etharp_query+0x124>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8007204:	897a      	ldrh	r2, [r7, #10]
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	d108      	bne.n	800721e <etharp_query+0xfa>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	b133      	cbz	r3, 800721e <etharp_query+0xfa>
 8007210:	4643      	mov	r3, r8
 8007212:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007216:	4649      	mov	r1, r9
 8007218:	4650      	mov	r0, sl
 800721a:	f007 fc73 	bl	800eb04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800721e:	7b3b      	ldrb	r3, [r7, #12]
 8007220:	065b      	lsls	r3, r3, #25
 8007222:	d40a      	bmi.n	800723a <etharp_query+0x116>
      p = p->next;
 8007224:	683f      	ldr	r7, [r7, #0]
 8007226:	e7e8      	b.n	80071fa <etharp_query+0xd6>
    return ERR_ARG;
 8007228:	f06f 000f 	mvn.w	r0, #15
 800722c:	e796      	b.n	800715c <etharp_query+0x38>
      result = ERR_MEM;
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	e793      	b.n	800715c <etharp_query+0x38>
  err_t result = ERR_MEM;
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	e7bf      	b.n	80071ba <etharp_query+0x96>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800723a:	462a      	mov	r2, r5
 800723c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007240:	200e      	movs	r0, #14
 8007242:	f002 f8a1 	bl	8009388 <pbuf_clone>
 8007246:	4605      	mov	r5, r0
    if (p != NULL) {
 8007248:	2d00      	cmp	r5, #0
 800724a:	d0f0      	beq.n	800722e <etharp_query+0x10a>
      if (arp_table[i].q != NULL) {
 800724c:	2318      	movs	r3, #24
 800724e:	fb03 f204 	mul.w	r2, r3, r4
 8007252:	461f      	mov	r7, r3
 8007254:	58b0      	ldr	r0, [r6, r2]
 8007256:	b108      	cbz	r0, 800725c <etharp_query+0x138>
        pbuf_free(arp_table[i].q);
 8007258:	f001 fd58 	bl	8008d0c <pbuf_free>
      arp_table[i].q = p;
 800725c:	437c      	muls	r4, r7
      result = ERR_OK;
 800725e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007260:	5135      	str	r5, [r6, r4]
 8007262:	e77b      	b.n	800715c <etharp_query+0x38>
 8007264:	0801057e 	.word	0x0801057e
 8007268:	08010668 	.word	0x08010668
 800726c:	0800fff2 	.word	0x0800fff2
 8007270:	20006bf4 	.word	0x20006bf4
 8007274:	08010676 	.word	0x08010676
 8007278:	20006ce4 	.word	0x20006ce4
 800727c:	0801069e 	.word	0x0801069e

08007280 <etharp_output>:
{
 8007280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007282:	460e      	mov	r6, r1
 8007284:	b085      	sub	sp, #20
 8007286:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007288:	4604      	mov	r4, r0
 800728a:	b930      	cbnz	r0, 800729a <etharp_output+0x1a>
 800728c:	4b42      	ldr	r3, [pc, #264]	; (8007398 <etharp_output+0x118>)
 800728e:	f240 321e 	movw	r2, #798	; 0x31e
 8007292:	4942      	ldr	r1, [pc, #264]	; (800739c <etharp_output+0x11c>)
 8007294:	4842      	ldr	r0, [pc, #264]	; (80073a0 <etharp_output+0x120>)
 8007296:	f007 fc35 	bl	800eb04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800729a:	b936      	cbnz	r6, 80072aa <etharp_output+0x2a>
 800729c:	4b3e      	ldr	r3, [pc, #248]	; (8007398 <etharp_output+0x118>)
 800729e:	f240 321f 	movw	r2, #799	; 0x31f
 80072a2:	4940      	ldr	r1, [pc, #256]	; (80073a4 <etharp_output+0x124>)
 80072a4:	483e      	ldr	r0, [pc, #248]	; (80073a0 <etharp_output+0x120>)
 80072a6:	f007 fc2d 	bl	800eb04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80072aa:	b935      	cbnz	r5, 80072ba <etharp_output+0x3a>
 80072ac:	4b3a      	ldr	r3, [pc, #232]	; (8007398 <etharp_output+0x118>)
 80072ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80072b2:	493d      	ldr	r1, [pc, #244]	; (80073a8 <etharp_output+0x128>)
 80072b4:	483a      	ldr	r0, [pc, #232]	; (80073a0 <etharp_output+0x120>)
 80072b6:	f007 fc25 	bl	800eb04 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80072ba:	4621      	mov	r1, r4
 80072bc:	6828      	ldr	r0, [r5, #0]
 80072be:	f000 fafe 	bl	80078be <ip4_addr_isbroadcast_u32>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d162      	bne.n	800738c <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072cc:	2ae0      	cmp	r2, #224	; 0xe0
 80072ce:	d11d      	bne.n	800730c <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80072d0:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80072d2:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80072d6:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80072da:	235e      	movs	r3, #94	; 0x5e
 80072dc:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80072e0:	786b      	ldrb	r3, [r5, #1]
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80072ea:	78ab      	ldrb	r3, [r5, #2]
 80072ec:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80072f0:	78eb      	ldrb	r3, [r5, #3]
 80072f2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80072f6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80072f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072fc:	4631      	mov	r1, r6
 80072fe:	4620      	mov	r0, r4
 8007300:	9200      	str	r2, [sp, #0]
 8007302:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8007306:	f006 f995 	bl	800d634 <ethernet_output>
 800730a:	e023      	b.n	8007354 <etharp_output+0xd4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800730c:	6862      	ldr	r2, [r4, #4]
 800730e:	68a1      	ldr	r1, [r4, #8]
 8007310:	405a      	eors	r2, r3
 8007312:	420a      	tst	r2, r1
 8007314:	d009      	beq.n	800732a <etharp_output+0xaa>
        !ip4_addr_islinklocal(ipaddr)) {
 8007316:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007318:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <etharp_output+0xaa>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8007320:	68e3      	ldr	r3, [r4, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d034      	beq.n	8007390 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8007326:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800732a:	4920      	ldr	r1, [pc, #128]	; (80073ac <etharp_output+0x12c>)
 800732c:	2318      	movs	r3, #24
 800732e:	4820      	ldr	r0, [pc, #128]	; (80073b0 <etharp_output+0x130>)
 8007330:	780a      	ldrb	r2, [r1, #0]
 8007332:	468e      	mov	lr, r1
 8007334:	fb03 0302 	mla	r3, r3, r2, r0
 8007338:	7d18      	ldrb	r0, [r3, #20]
 800733a:	2801      	cmp	r0, #1
 800733c:	d90c      	bls.n	8007358 <etharp_output+0xd8>
 800733e:	6899      	ldr	r1, [r3, #8]
 8007340:	428c      	cmp	r4, r1
 8007342:	d109      	bne.n	8007358 <etharp_output+0xd8>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8007344:	6829      	ldr	r1, [r5, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4299      	cmp	r1, r3
 800734a:	d105      	bne.n	8007358 <etharp_output+0xd8>
        return etharp_output_to_arp_index(netif, q, i);
 800734c:	4631      	mov	r1, r6
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff fe8c 	bl	800706c <etharp_output_to_arp_index>
}
 8007354:	b005      	add	sp, #20
 8007356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <etharp_output+0x130>)
{
 800735a:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800735c:	7d18      	ldrb	r0, [r3, #20]
 800735e:	b2ca      	uxtb	r2, r1
 8007360:	2801      	cmp	r0, #1
 8007362:	d909      	bls.n	8007378 <etharp_output+0xf8>
 8007364:	6898      	ldr	r0, [r3, #8]
 8007366:	4284      	cmp	r4, r0
 8007368:	d106      	bne.n	8007378 <etharp_output+0xf8>
          (arp_table[i].netif == netif) &&
 800736a:	682f      	ldr	r7, [r5, #0]
 800736c:	6858      	ldr	r0, [r3, #4]
 800736e:	4287      	cmp	r7, r0
 8007370:	d102      	bne.n	8007378 <etharp_output+0xf8>
        ETHARP_SET_ADDRHINT(netif, i);
 8007372:	f88e 2000 	strb.w	r2, [lr]
 8007376:	e7e9      	b.n	800734c <etharp_output+0xcc>
 8007378:	3101      	adds	r1, #1
 800737a:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800737c:	290a      	cmp	r1, #10
 800737e:	d1ed      	bne.n	800735c <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 8007380:	4632      	mov	r2, r6
 8007382:	4629      	mov	r1, r5
 8007384:	4620      	mov	r0, r4
 8007386:	f7ff fecd 	bl	8007124 <etharp_query>
 800738a:	e7e3      	b.n	8007354 <etharp_output+0xd4>
    dest = (const struct eth_addr *)&ethbroadcast;
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <etharp_output+0x134>)
 800738e:	e7b3      	b.n	80072f8 <etharp_output+0x78>
            return ERR_RTE;
 8007390:	f06f 0003 	mvn.w	r0, #3
 8007394:	e7de      	b.n	8007354 <etharp_output+0xd4>
 8007396:	bf00      	nop
 8007398:	0801057e 	.word	0x0801057e
 800739c:	0801026c 	.word	0x0801026c
 80073a0:	0800fff2 	.word	0x0800fff2
 80073a4:	08011175 	.word	0x08011175
 80073a8:	080105f5 	.word	0x080105f5
 80073ac:	20006ce4 	.word	0x20006ce4
 80073b0:	20006bf4 	.word	0x20006bf4
 80073b4:	0801269c 	.word	0x0801269c

080073b8 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ba:	4604      	mov	r4, r0
 80073bc:	b087      	sub	sp, #28
 80073be:	460f      	mov	r7, r1
 80073c0:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80073c2:	2124      	movs	r1, #36	; 0x24
 80073c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80073c8:	2022      	movs	r0, #34	; 0x22
 80073ca:	f001 fd07 	bl	8008ddc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80073ce:	4605      	mov	r5, r0
 80073d0:	b3a0      	cbz	r0, 800743c <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80073d2:	8943      	ldrh	r3, [r0, #10]
 80073d4:	2b23      	cmp	r3, #35	; 0x23
 80073d6:	d806      	bhi.n	80073e6 <icmp_send_response.isra.0+0x2e>
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <icmp_send_response.isra.0+0x88>)
 80073da:	f240 1269 	movw	r2, #361	; 0x169
 80073de:	4919      	ldr	r1, [pc, #100]	; (8007444 <icmp_send_response.isra.0+0x8c>)
 80073e0:	4819      	ldr	r0, [pc, #100]	; (8007448 <icmp_send_response.isra.0+0x90>)
 80073e2:	f007 fb8f 	bl	800eb04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80073e6:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 80073e8:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80073ea:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80073ec:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 80073f0:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80073f2:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 80073f6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 80073f8:	71a3      	strb	r3, [r4, #6]
 80073fa:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80073fc:	4613      	mov	r3, r2
  icmphdr->type = type;
 80073fe:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8007400:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007402:	f853 6b04 	ldr.w	r6, [r3], #4
 8007406:	4283      	cmp	r3, r0
 8007408:	f841 6b04 	str.w	r6, [r1], #4
 800740c:	d1f9      	bne.n	8007402 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800740e:	ae06      	add	r6, sp, #24
 8007410:	68d3      	ldr	r3, [r2, #12]
 8007412:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8007416:	4630      	mov	r0, r6
 8007418:	f000 f8d2 	bl	80075c0 <ip4_route>
#endif
  if (netif != NULL) {
 800741c:	b158      	cbz	r0, 8007436 <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800741e:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007420:	2301      	movs	r3, #1
 8007422:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8007424:	70a1      	strb	r1, [r4, #2]
 8007426:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007428:	9002      	str	r0, [sp, #8]
 800742a:	4628      	mov	r0, r5
 800742c:	e88d 000a 	stmia.w	sp, {r1, r3}
 8007430:	23ff      	movs	r3, #255	; 0xff
 8007432:	f000 fa33 	bl	800789c <ip4_output_if>
  }
  pbuf_free(q);
 8007436:	4628      	mov	r0, r5
 8007438:	f001 fc68 	bl	8008d0c <pbuf_free>
}
 800743c:	b007      	add	sp, #28
 800743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007440:	08010791 	.word	0x08010791
 8007444:	080107c6 	.word	0x080107c6
 8007448:	0800fff2 	.word	0x0800fff2

0800744c <icmp_input>:
{
 800744c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8007450:	4f43      	ldr	r7, [pc, #268]	; (8007560 <icmp_input+0x114>)
{
 8007452:	b085      	sub	sp, #20
 8007454:	4604      	mov	r4, r0
 8007456:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8007458:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800745c:	f899 5000 	ldrb.w	r5, [r9]
 8007460:	f005 050f 	and.w	r5, r5, #15
 8007464:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8007466:	2d13      	cmp	r5, #19
 8007468:	d92e      	bls.n	80074c8 <icmp_input+0x7c>
  if (p->len < sizeof(u16_t) * 2) {
 800746a:	8943      	ldrh	r3, [r0, #10]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d92b      	bls.n	80074c8 <icmp_input+0x7c>
  type = *((u8_t *)p->payload);
 8007470:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b08      	cmp	r3, #8
 8007476:	d127      	bne.n	80074c8 <icmp_input+0x7c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007478:	6978      	ldr	r0, [r7, #20]
 800747a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800747e:	2be0      	cmp	r3, #224	; 0xe0
 8007480:	d022      	beq.n	80074c8 <icmp_input+0x7c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	f000 fa1b 	bl	80078be <ip4_addr_isbroadcast_u32>
 8007488:	b9f0      	cbnz	r0, 80074c8 <icmp_input+0x7c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800748a:	8923      	ldrh	r3, [r4, #8]
 800748c:	2b07      	cmp	r3, #7
 800748e:	d91b      	bls.n	80074c8 <icmp_input+0x7c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007490:	f105 060e 	add.w	r6, r5, #14
 8007494:	4620      	mov	r0, r4
 8007496:	4631      	mov	r1, r6
 8007498:	f001 fc01 	bl	8008c9e <pbuf_add_header>
 800749c:	2800      	cmp	r0, #0
 800749e:	d052      	beq.n	8007546 <icmp_input+0xfa>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80074a0:	8923      	ldrh	r3, [r4, #8]
 80074a2:	1959      	adds	r1, r3, r5
 80074a4:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80074a6:	428b      	cmp	r3, r1
 80074a8:	d80e      	bhi.n	80074c8 <icmp_input+0x7c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80074aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80074ae:	200e      	movs	r0, #14
 80074b0:	f001 fc94 	bl	8008ddc <pbuf_alloc>
        if (r == NULL) {
 80074b4:	4606      	mov	r6, r0
 80074b6:	b138      	cbz	r0, 80074c8 <icmp_input+0x7c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80074b8:	8942      	ldrh	r2, [r0, #10]
 80074ba:	f105 0308 	add.w	r3, r5, #8
 80074be:	429a      	cmp	r2, r3
 80074c0:	d208      	bcs.n	80074d4 <icmp_input+0x88>
          pbuf_free(r);
 80074c2:	4630      	mov	r0, r6
 80074c4:	f001 fc22 	bl	8008d0c <pbuf_free>
  pbuf_free(p);
 80074c8:	4620      	mov	r0, r4
}
 80074ca:	b005      	add	sp, #20
 80074cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80074d0:	f001 bc1c 	b.w	8008d0c <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 80074d4:	4649      	mov	r1, r9
 80074d6:	462a      	mov	r2, r5
 80074d8:	6840      	ldr	r0, [r0, #4]
 80074da:	f007 fae6 	bl	800eaaa <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80074de:	4629      	mov	r1, r5
 80074e0:	4630      	mov	r0, r6
 80074e2:	f001 fbdf 	bl	8008ca4 <pbuf_remove_header>
 80074e6:	b130      	cbz	r0, 80074f6 <icmp_input+0xaa>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <icmp_input+0x118>)
 80074ea:	22b6      	movs	r2, #182	; 0xb6
 80074ec:	491e      	ldr	r1, [pc, #120]	; (8007568 <icmp_input+0x11c>)
 80074ee:	481f      	ldr	r0, [pc, #124]	; (800756c <icmp_input+0x120>)
 80074f0:	f007 fb08 	bl	800eb04 <iprintf>
 80074f4:	e7e5      	b.n	80074c2 <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 80074f6:	4621      	mov	r1, r4
 80074f8:	4630      	mov	r0, r6
 80074fa:	f001 fddd 	bl	80090b8 <pbuf_copy>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d1df      	bne.n	80074c2 <icmp_input+0x76>
        pbuf_free(p);
 8007502:	4620      	mov	r0, r4
 8007504:	4634      	mov	r4, r6
 8007506:	f001 fc01 	bl	8008d0c <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800750a:	4629      	mov	r1, r5
 800750c:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800750e:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8007510:	f001 fbc5 	bl	8008c9e <pbuf_add_header>
 8007514:	4602      	mov	r2, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	d1d6      	bne.n	80074c8 <icmp_input+0x7c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800751a:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007524:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007526:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8007528:	70b0      	strb	r0, [r6, #2]
 800752a:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800752c:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800752e:	7288      	strb	r0, [r1, #10]
 8007530:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007532:	2101      	movs	r1, #1
 8007534:	9000      	str	r0, [sp, #0]
 8007536:	4620      	mov	r0, r4
 8007538:	9101      	str	r1, [sp, #4]
 800753a:	f8cd 8008 	str.w	r8, [sp, #8]
 800753e:	490c      	ldr	r1, [pc, #48]	; (8007570 <icmp_input+0x124>)
 8007540:	f000 f9ac 	bl	800789c <ip4_output_if>
 8007544:	e7c0      	b.n	80074c8 <icmp_input+0x7c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007546:	4631      	mov	r1, r6
 8007548:	4620      	mov	r0, r4
 800754a:	f001 fbab 	bl	8008ca4 <pbuf_remove_header>
 800754e:	2800      	cmp	r0, #0
 8007550:	d0db      	beq.n	800750a <icmp_input+0xbe>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8007552:	4b04      	ldr	r3, [pc, #16]	; (8007564 <icmp_input+0x118>)
 8007554:	22c7      	movs	r2, #199	; 0xc7
 8007556:	4907      	ldr	r1, [pc, #28]	; (8007574 <icmp_input+0x128>)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <icmp_input+0x120>)
 800755a:	f007 fad3 	bl	800eb04 <iprintf>
          goto icmperr;
 800755e:	e7b3      	b.n	80074c8 <icmp_input+0x7c>
 8007560:	20007084 	.word	0x20007084
 8007564:	08010791 	.word	0x08010791
 8007568:	0801072a 	.word	0x0801072a
 800756c:	0800fff2 	.word	0x0800fff2
 8007570:	20007098 	.word	0x20007098
 8007574:	0801075f 	.word	0x0801075f

08007578 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8007578:	460a      	mov	r2, r1
 800757a:	3004      	adds	r0, #4
 800757c:	2103      	movs	r1, #3
 800757e:	f7ff bf1b 	b.w	80073b8 <icmp_send_response.isra.0>

08007582 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8007582:	460a      	mov	r2, r1
 8007584:	3004      	adds	r0, #4
 8007586:	210b      	movs	r1, #11
 8007588:	f7ff bf16 	b.w	80073b8 <icmp_send_response.isra.0>

0800758c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800758c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800758e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
 8007592:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007594:	f013 0301 	ands.w	r3, r3, #1
 8007598:	d00b      	beq.n	80075b2 <ip4_input_accept+0x26>
 800759a:	6843      	ldr	r3, [r0, #4]
 800759c:	b14b      	cbz	r3, 80075b2 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800759e:	4a07      	ldr	r2, [pc, #28]	; (80075bc <ip4_input_accept+0x30>)
 80075a0:	6950      	ldr	r0, [r2, #20]
 80075a2:	4283      	cmp	r3, r0
 80075a4:	d007      	beq.n	80075b6 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80075a6:	f000 f98a 	bl	80078be <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80075aa:	3000      	adds	r0, #0
 80075ac:	bf18      	it	ne
 80075ae:	2001      	movne	r0, #1
 80075b0:	bd08      	pop	{r3, pc}
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80075b2:	4618      	mov	r0, r3
 80075b4:	bd08      	pop	{r3, pc}
      return 1;
 80075b6:	2001      	movs	r0, #1
}
 80075b8:	bd08      	pop	{r3, pc}
 80075ba:	bf00      	nop
 80075bc:	20007084 	.word	0x20007084

080075c0 <ip4_route>:
  NETIF_FOREACH(netif) {
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <ip4_route+0x54>)
{
 80075c2:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	b97b      	cbnz	r3, 80075e8 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <ip4_route+0x58>)
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	b1fa      	cbz	r2, 800760e <ip4_route+0x4e>
 80075ce:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 80075d2:	f001 0105 	and.w	r1, r1, #5
 80075d6:	2905      	cmp	r1, #5
 80075d8:	d119      	bne.n	800760e <ip4_route+0x4e>
 80075da:	6851      	ldr	r1, [r2, #4]
 80075dc:	b1b9      	cbz	r1, 800760e <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80075de:	7801      	ldrb	r1, [r0, #0]
 80075e0:	297f      	cmp	r1, #127	; 0x7f
 80075e2:	bf18      	it	ne
 80075e4:	4613      	movne	r3, r2
 80075e6:	e012      	b.n	800760e <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80075e8:	f893 402d 	ldrb.w	r4, [r3, #45]	; 0x2d
 80075ec:	f004 0205 	and.w	r2, r4, #5
 80075f0:	2a05      	cmp	r2, #5
 80075f2:	d1e7      	bne.n	80075c4 <ip4_route+0x4>
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	d0e4      	beq.n	80075c4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80075fa:	6801      	ldr	r1, [r0, #0]
 80075fc:	689d      	ldr	r5, [r3, #8]
 80075fe:	404a      	eors	r2, r1
 8007600:	422a      	tst	r2, r5
 8007602:	d004      	beq.n	800760e <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8007604:	07a2      	lsls	r2, r4, #30
 8007606:	d4dd      	bmi.n	80075c4 <ip4_route+0x4>
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	4291      	cmp	r1, r2
 800760c:	d1da      	bne.n	80075c4 <ip4_route+0x4>
}
 800760e:	4618      	mov	r0, r3
 8007610:	bd30      	pop	{r4, r5, pc}
 8007612:	bf00      	nop
 8007614:	2000becc 	.word	0x2000becc
 8007618:	2000bed0 	.word	0x2000bed0

0800761c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8007620:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8007624:	4605      	mov	r5, r0
 8007626:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8007628:	f898 9000 	ldrb.w	r9, [r8]
 800762c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8007630:	2b04      	cmp	r3, #4
 8007632:	d005      	beq.n	8007640 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007634:	4628      	mov	r0, r5
 8007636:	f001 fb69 	bl	8008d0c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800763a:	2000      	movs	r0, #0
 800763c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007640:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007644:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007648:	f7fd fd78 	bl	800513c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800764c:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800764e:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007652:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8007654:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007656:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 800765a:	d903      	bls.n	8007664 <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 800765c:	4601      	mov	r1, r0
 800765e:	4628      	mov	r0, r5
 8007660:	f001 fc52 	bl	8008f08 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8007664:	896b      	ldrh	r3, [r5, #10]
 8007666:	42b3      	cmp	r3, r6
 8007668:	d3e4      	bcc.n	8007634 <ip4_input+0x18>
 800766a:	892b      	ldrh	r3, [r5, #8]
 800766c:	42a3      	cmp	r3, r4
 800766e:	d3e1      	bcc.n	8007634 <ip4_input+0x18>
 8007670:	2e13      	cmp	r6, #19
 8007672:	d9df      	bls.n	8007634 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8007674:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007678:	4c49      	ldr	r4, [pc, #292]	; (80077a0 <ip4_input+0x184>)
 800767a:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800767c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007680:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007684:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007686:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007688:	d10e      	bne.n	80076a8 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800768a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800768e:	07db      	lsls	r3, r3, #31
 8007690:	d405      	bmi.n	800769e <ip4_input+0x82>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8007692:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007696:	2b11      	cmp	r3, #17
 8007698:	d052      	beq.n	8007740 <ip4_input+0x124>
 800769a:	2600      	movs	r6, #0
 800769c:	e019      	b.n	80076d2 <ip4_input+0xb6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0f6      	beq.n	8007692 <ip4_input+0x76>
 80076a4:	463e      	mov	r6, r7
 80076a6:	e014      	b.n	80076d2 <ip4_input+0xb6>
    if (ip4_input_accept(inp)) {
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ff6f 	bl	800758c <ip4_input_accept>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d143      	bne.n	800773a <ip4_input+0x11e>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80076b2:	7d23      	ldrb	r3, [r4, #20]
 80076b4:	2b7f      	cmp	r3, #127	; 0x7f
 80076b6:	d0ec      	beq.n	8007692 <ip4_input+0x76>
        NETIF_FOREACH(netif) {
 80076b8:	4b3a      	ldr	r3, [pc, #232]	; (80077a4 <ip4_input+0x188>)
 80076ba:	681e      	ldr	r6, [r3, #0]
 80076bc:	2e00      	cmp	r6, #0
 80076be:	d0e8      	beq.n	8007692 <ip4_input+0x76>
          if (netif == inp) {
 80076c0:	42be      	cmp	r6, r7
 80076c2:	d101      	bne.n	80076c8 <ip4_input+0xac>
        NETIF_FOREACH(netif) {
 80076c4:	6836      	ldr	r6, [r6, #0]
 80076c6:	e7f9      	b.n	80076bc <ip4_input+0xa0>
          if (ip4_input_accept(netif)) {
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7ff ff5f 	bl	800758c <ip4_input_accept>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d0f8      	beq.n	80076c4 <ip4_input+0xa8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80076d2:	6920      	ldr	r0, [r4, #16]
 80076d4:	b148      	cbz	r0, 80076ea <ip4_input+0xce>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80076d6:	4639      	mov	r1, r7
 80076d8:	f000 f8f1 	bl	80078be <ip4_addr_isbroadcast_u32>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1a9      	bne.n	8007634 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80076e6:	2be0      	cmp	r3, #224	; 0xe0
 80076e8:	d0a4      	beq.n	8007634 <ip4_input+0x18>
  if (netif == NULL) {
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d0a2      	beq.n	8007634 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80076ee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80076f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076f6:	b13b      	cbz	r3, 8007708 <ip4_input+0xec>
    p = ip4_reass(p);
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 fb17 	bl	8007d2c <ip4_reass>
    if (p == NULL) {
 80076fe:	4605      	mov	r5, r0
 8007700:	2800      	cmp	r0, #0
 8007702:	d09a      	beq.n	800763a <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 8007704:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007708:	4649      	mov	r1, r9
 800770a:	4628      	mov	r0, r5
  ip_data.current_ip4_header = iphdr;
 800770c:	e884 01c0 	stmia.w	r4, {r6, r7, r8}
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8007710:	f898 3000 	ldrb.w	r3, [r8]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800771c:	f001 fac2 	bl	8008ca4 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8007720:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007724:	2b06      	cmp	r3, #6
 8007726:	d01f      	beq.n	8007768 <ip4_input+0x14c>
 8007728:	2b11      	cmp	r3, #17
 800772a:	d011      	beq.n	8007750 <ip4_input+0x134>
 800772c:	2b01      	cmp	r3, #1
 800772e:	d120      	bne.n	8007772 <ip4_input+0x156>
        icmp_input(p, inp);
 8007730:	4639      	mov	r1, r7
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff fe8a 	bl	800744c <icmp_input>
        break;
 8007738:	e00e      	b.n	8007758 <ip4_input+0x13c>
  if (netif == NULL) {
 800773a:	2f00      	cmp	r7, #0
 800773c:	d1b2      	bne.n	80076a4 <ip4_input+0x88>
 800773e:	e7a8      	b.n	8007692 <ip4_input+0x76>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8007740:	eb08 0309 	add.w	r3, r8, r9
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800774a:	d1a6      	bne.n	800769a <ip4_input+0x7e>
 800774c:	463e      	mov	r6, r7
 800774e:	e7cc      	b.n	80076ea <ip4_input+0xce>
        udp_input(p, inp);
 8007750:	4639      	mov	r1, r7
 8007752:	4628      	mov	r0, r5
 8007754:	f005 fc34 	bl	800cfc0 <udp_input>
  ip_data.current_netif = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800775c:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800775e:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8007760:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8007762:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007764:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8007766:	e768      	b.n	800763a <ip4_input+0x1e>
        tcp_input(p, inp);
 8007768:	4639      	mov	r1, r7
 800776a:	4628      	mov	r0, r5
 800776c:	f003 fc58 	bl	800b020 <tcp_input>
        break;
 8007770:	e7f2      	b.n	8007758 <ip4_input+0x13c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007772:	4631      	mov	r1, r6
 8007774:	6960      	ldr	r0, [r4, #20]
 8007776:	f000 f8a2 	bl	80078be <ip4_addr_isbroadcast_u32>
 800777a:	b960      	cbnz	r0, 8007796 <ip4_input+0x17a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800777c:	6963      	ldr	r3, [r4, #20]
 800777e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007782:	2be0      	cmp	r3, #224	; 0xe0
 8007784:	d007      	beq.n	8007796 <ip4_input+0x17a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8007786:	4649      	mov	r1, r9
 8007788:	4628      	mov	r0, r5
 800778a:	f001 fab7 	bl	8008cfc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800778e:	2102      	movs	r1, #2
 8007790:	4628      	mov	r0, r5
 8007792:	f7ff fef1 	bl	8007578 <icmp_dest_unreach>
        pbuf_free(p);
 8007796:	4628      	mov	r0, r5
 8007798:	f001 fab8 	bl	8008d0c <pbuf_free>
        break;
 800779c:	e7dc      	b.n	8007758 <ip4_input+0x13c>
 800779e:	bf00      	nop
 80077a0:	20007084 	.word	0x20007084
 80077a4:	2000becc 	.word	0x2000becc

080077a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80077a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80077ae:	7b83      	ldrb	r3, [r0, #14]
{
 80077b0:	4605      	mov	r5, r0
 80077b2:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80077b4:	2b01      	cmp	r3, #1
{
 80077b6:	4616      	mov	r6, r2
 80077b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80077bc:	d006      	beq.n	80077cc <ip4_output_if_src+0x24>
 80077be:	4b31      	ldr	r3, [pc, #196]	; (8007884 <ip4_output_if_src+0xdc>)
 80077c0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80077c4:	4930      	ldr	r1, [pc, #192]	; (8007888 <ip4_output_if_src+0xe0>)
 80077c6:	4831      	ldr	r0, [pc, #196]	; (800788c <ip4_output_if_src+0xe4>)
 80077c8:	f007 f99c 	bl	800eb04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	d049      	beq.n	8007864 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80077d0:	2114      	movs	r1, #20
 80077d2:	4628      	mov	r0, r5
 80077d4:	f001 fa63 	bl	8008c9e <pbuf_add_header>
 80077d8:	b120      	cbz	r0, 80077e4 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80077da:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80077de:	b002      	add	sp, #8
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80077e4:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80077e6:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80077e8:	2b13      	cmp	r3, #19
 80077ea:	d806      	bhi.n	80077fa <ip4_output_if_src+0x52>
 80077ec:	4b25      	ldr	r3, [pc, #148]	; (8007884 <ip4_output_if_src+0xdc>)
 80077ee:	f240 3289 	movw	r2, #905	; 0x389
 80077f2:	4927      	ldr	r1, [pc, #156]	; (8007890 <ip4_output_if_src+0xe8>)
 80077f4:	4825      	ldr	r0, [pc, #148]	; (800788c <ip4_output_if_src+0xe4>)
 80077f6:	f007 f985 	bl	800eb04 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80077fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80077fe:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8007800:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8007802:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8007804:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007806:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007898 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 800780a:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800780c:	2345      	movs	r3, #69	; 0x45
 800780e:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8007810:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8007814:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007816:	8928      	ldrh	r0, [r5, #8]
 8007818:	f7fd fc90 	bl	800513c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800781c:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800781e:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8007820:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007822:	f8b9 0000 	ldrh.w	r0, [r9]
 8007826:	f7fd fc89 	bl	800513c <lwip_htons>
    ++ip_id;
 800782a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800782e:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8007830:	3301      	adds	r3, #1
 8007832:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 8007836:	f1ba 0f00 	cmp.w	sl, #0
 800783a:	d110      	bne.n	800785e <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800783c:	4b15      	ldr	r3, [pc, #84]	; (8007894 <ip4_output_if_src+0xec>)
 800783e:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 8007840:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8007842:	72a7      	strb	r7, [r4, #10]
 8007844:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007846:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800784a:	b1a3      	cbz	r3, 8007876 <ip4_output_if_src+0xce>
 800784c:	892a      	ldrh	r2, [r5, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	d911      	bls.n	8007876 <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 8007852:	4632      	mov	r2, r6
 8007854:	4641      	mov	r1, r8
 8007856:	4628      	mov	r0, r5
 8007858:	f000 fc3e 	bl	80080d8 <ip4_frag>
 800785c:	e7bf      	b.n	80077de <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 800785e:	f8da 3000 	ldr.w	r3, [sl]
 8007862:	e7ed      	b.n	8007840 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8007864:	896b      	ldrh	r3, [r5, #10]
 8007866:	2b13      	cmp	r3, #19
 8007868:	d9b7      	bls.n	80077da <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800786a:	686b      	ldr	r3, [r5, #4]
 800786c:	ae02      	add	r6, sp, #8
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f846 3d04 	str.w	r3, [r6, #-4]!
 8007874:	e7e7      	b.n	8007846 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 8007876:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800787a:	4632      	mov	r2, r6
 800787c:	4629      	mov	r1, r5
 800787e:	4640      	mov	r0, r8
 8007880:	4798      	blx	r3
 8007882:	e7ac      	b.n	80077de <ip4_output_if_src+0x36>
 8007884:	080107f2 	.word	0x080107f2
 8007888:	08010826 	.word	0x08010826
 800788c:	0800fff2 	.word	0x0800fff2
 8007890:	08010832 	.word	0x08010832
 8007894:	080108a4 	.word	0x080108a4
 8007898:	20006ce6 	.word	0x20006ce6

0800789c <ip4_output_if>:
{
 800789c:	b4f0      	push	{r4, r5, r6, r7}
 800789e:	9c06      	ldr	r4, [sp, #24]
 80078a0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80078a4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80078a8:	b11a      	cbz	r2, 80078b2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80078aa:	b109      	cbz	r1, 80078b0 <ip4_output_if+0x14>
 80078ac:	680f      	ldr	r7, [r1, #0]
 80078ae:	b907      	cbnz	r7, 80078b2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80078b0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80078b2:	9406      	str	r4, [sp, #24]
 80078b4:	9605      	str	r6, [sp, #20]
 80078b6:	9504      	str	r5, [sp, #16]
}
 80078b8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80078ba:	f7ff bf75 	b.w	80077a8 <ip4_output_if_src>

080078be <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80078be:	1e43      	subs	r3, r0, #1
 80078c0:	3303      	adds	r3, #3
 80078c2:	d811      	bhi.n	80078e8 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80078c4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80078c8:	f013 0302 	ands.w	r3, r3, #2
 80078cc:	d00e      	beq.n	80078ec <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80078ce:	684a      	ldr	r2, [r1, #4]
 80078d0:	4290      	cmp	r0, r2
 80078d2:	d00b      	beq.n	80078ec <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80078d4:	688b      	ldr	r3, [r1, #8]
 80078d6:	4042      	eors	r2, r0
 80078d8:	421a      	tst	r2, r3
 80078da:	d107      	bne.n	80078ec <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80078dc:	43db      	mvns	r3, r3
 80078de:	4383      	bics	r3, r0
    return 1;
 80078e0:	bf0c      	ite	eq
 80078e2:	2001      	moveq	r0, #1
 80078e4:	2000      	movne	r0, #0
 80078e6:	4770      	bx	lr
 80078e8:	2001      	movs	r0, #1
 80078ea:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80078ec:	2000      	movs	r0, #0
  }
}
 80078ee:	4770      	bx	lr

080078f0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	b085      	sub	sp, #20
 80078f6:	4605      	mov	r5, r0
 80078f8:	460f      	mov	r7, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 80078fa:	7804      	ldrb	r4, [r0, #0]
  u32_t *pp = parts;
 80078fc:	46e8      	mov	r8, sp
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80078fe:	f007 f8a5 	bl	800ea4c <__locale_ctype_ptr>
 8007902:	4420      	add	r0, r4
 8007904:	7843      	ldrb	r3, [r0, #1]
 8007906:	0759      	lsls	r1, r3, #29
 8007908:	d403      	bmi.n	8007912 <ip4addr_aton+0x22>
      return 0;
 800790a:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 800790c:	b005      	add	sp, #20
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '0') {
 8007912:	2c30      	cmp	r4, #48	; 0x30
 8007914:	d11e      	bne.n	8007954 <ip4addr_aton+0x64>
      c = *++cp;
 8007916:	786c      	ldrb	r4, [r5, #1]
      if (c == 'x' || c == 'X') {
 8007918:	f004 03df 	and.w	r3, r4, #223	; 0xdf
 800791c:	2b58      	cmp	r3, #88	; 0x58
        c = *++cp;
 800791e:	bf0d      	iteet	eq
 8007920:	78ac      	ldrbeq	r4, [r5, #2]
      c = *++cp;
 8007922:	3501      	addne	r5, #1
        base = 8;
 8007924:	f04f 0908 	movne.w	r9, #8
        c = *++cp;
 8007928:	3502      	addeq	r5, #2
        base = 16;
 800792a:	bf08      	it	eq
 800792c:	f04f 0910 	moveq.w	r9, #16
 8007930:	1c6e      	adds	r6, r5, #1
 8007932:	2500      	movs	r5, #0
      if (lwip_isdigit(c)) {
 8007934:	f104 0b01 	add.w	fp, r4, #1
 8007938:	f007 f888 	bl	800ea4c <__locale_ctype_ptr>
 800793c:	f106 3aff 	add.w	sl, r6, #4294967295
 8007940:	f810 200b 	ldrb.w	r2, [r0, fp]
 8007944:	0752      	lsls	r2, r2, #29
 8007946:	d508      	bpl.n	800795a <ip4addr_aton+0x6a>
        val = (val * base) + (u32_t)(c - '0');
 8007948:	fb05 4509 	mla	r5, r5, r9, r4
 800794c:	3d30      	subs	r5, #48	; 0x30
        c = *++cp;
 800794e:	7834      	ldrb	r4, [r6, #0]
 8007950:	3601      	adds	r6, #1
 8007952:	e7ef      	b.n	8007934 <ip4addr_aton+0x44>
    base = 10;
 8007954:	f04f 090a 	mov.w	r9, #10
 8007958:	e7ea      	b.n	8007930 <ip4addr_aton+0x40>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800795a:	f1b9 0f10 	cmp.w	r9, #16
 800795e:	d115      	bne.n	800798c <ip4addr_aton+0x9c>
 8007960:	f007 f874 	bl	800ea4c <__locale_ctype_ptr>
 8007964:	f810 200b 	ldrb.w	r2, [r0, fp]
 8007968:	f012 0f44 	tst.w	r2, #68	; 0x44
 800796c:	d00e      	beq.n	800798c <ip4addr_aton+0x9c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800796e:	f007 f86d 	bl	800ea4c <__locale_ctype_ptr>
 8007972:	f810 200b 	ldrb.w	r2, [r0, fp]
 8007976:	340a      	adds	r4, #10
 8007978:	012d      	lsls	r5, r5, #4
 800797a:	f002 0203 	and.w	r2, r2, #3
 800797e:	2a02      	cmp	r2, #2
 8007980:	bf0c      	ite	eq
 8007982:	2261      	moveq	r2, #97	; 0x61
 8007984:	2241      	movne	r2, #65	; 0x41
 8007986:	1aa4      	subs	r4, r4, r2
 8007988:	4325      	orrs	r5, r4
 800798a:	e7e0      	b.n	800794e <ip4addr_aton+0x5e>
    if (c == '.') {
 800798c:	2c2e      	cmp	r4, #46	; 0x2e
 800798e:	d109      	bne.n	80079a4 <ip4addr_aton+0xb4>
      if (pp >= parts + 3) {
 8007990:	ab03      	add	r3, sp, #12
 8007992:	4598      	cmp	r8, r3
 8007994:	d0b9      	beq.n	800790a <ip4addr_aton+0x1a>
      *pp++ = val;
 8007996:	f848 5b04 	str.w	r5, [r8], #4
      c = *++cp;
 800799a:	f10a 0501 	add.w	r5, sl, #1
 800799e:	f89a 4001 	ldrb.w	r4, [sl, #1]
    if (!lwip_isdigit(c)) {
 80079a2:	e7ac      	b.n	80078fe <ip4addr_aton+0xe>
  if (c != '\0' && !lwip_isspace(c)) {
 80079a4:	b9a4      	cbnz	r4, 80079d0 <ip4addr_aton+0xe0>
  switch (pp - parts + 1) {
 80079a6:	466b      	mov	r3, sp
 80079a8:	eba8 0003 	sub.w	r0, r8, r3
 80079ac:	1080      	asrs	r0, r0, #2
 80079ae:	3001      	adds	r0, #1
 80079b0:	2804      	cmp	r0, #4
 80079b2:	d847      	bhi.n	8007a44 <ip4addr_aton+0x154>
 80079b4:	a301      	add	r3, pc, #4	; (adr r3, 80079bc <ip4addr_aton+0xcc>)
 80079b6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	0800790d 	.word	0x0800790d
 80079c0:	080079ef 	.word	0x080079ef
 80079c4:	080079df 	.word	0x080079df
 80079c8:	080079fd 	.word	0x080079fd
 80079cc:	08007a1b 	.word	0x08007a1b
  if (c != '\0' && !lwip_isspace(c)) {
 80079d0:	f007 f83c 	bl	800ea4c <__locale_ctype_ptr>
 80079d4:	f810 300b 	ldrb.w	r3, [r0, fp]
 80079d8:	071b      	lsls	r3, r3, #28
 80079da:	d4e4      	bmi.n	80079a6 <ip4addr_aton+0xb6>
 80079dc:	e795      	b.n	800790a <ip4addr_aton+0x1a>
      if (val > 0xffffffUL) {
 80079de:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 80079e2:	d292      	bcs.n	800790a <ip4addr_aton+0x1a>
      if (parts[0] > 0xff) {
 80079e4:	9b00      	ldr	r3, [sp, #0]
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d88f      	bhi.n	800790a <ip4addr_aton+0x1a>
      val |= parts[0] << 24;
 80079ea:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  if (addr) {
 80079ee:	b11f      	cbz	r7, 80079f8 <ip4addr_aton+0x108>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7fd fba6 	bl	8005142 <lwip_htonl>
 80079f6:	6038      	str	r0, [r7, #0]
  return 1;
 80079f8:	2001      	movs	r0, #1
 80079fa:	e787      	b.n	800790c <ip4addr_aton+0x1c>
      if (val > 0xffff) {
 80079fc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007a00:	d283      	bcs.n	800790a <ip4addr_aton+0x1a>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8007a02:	9a00      	ldr	r2, [sp, #0]
 8007a04:	2aff      	cmp	r2, #255	; 0xff
 8007a06:	d880      	bhi.n	800790a <ip4addr_aton+0x1a>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	2bff      	cmp	r3, #255	; 0xff
 8007a0c:	f63f af7d 	bhi.w	800790a <ip4addr_aton+0x1a>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8007a10:	041b      	lsls	r3, r3, #16
 8007a12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8007a16:	431d      	orrs	r5, r3
      break;
 8007a18:	e7e9      	b.n	80079ee <ip4addr_aton+0xfe>
      if (val > 0xff) {
 8007a1a:	2dff      	cmp	r5, #255	; 0xff
 8007a1c:	f63f af75 	bhi.w	800790a <ip4addr_aton+0x1a>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8007a20:	9900      	ldr	r1, [sp, #0]
 8007a22:	29ff      	cmp	r1, #255	; 0xff
 8007a24:	f63f af71 	bhi.w	800790a <ip4addr_aton+0x1a>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	2bff      	cmp	r3, #255	; 0xff
 8007a2c:	f63f af6d 	bhi.w	800790a <ip4addr_aton+0x1a>
 8007a30:	9a02      	ldr	r2, [sp, #8]
 8007a32:	2aff      	cmp	r2, #255	; 0xff
 8007a34:	f63f af69 	bhi.w	800790a <ip4addr_aton+0x1a>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a42:	e7e8      	b.n	8007a16 <ip4addr_aton+0x126>
      LWIP_ASSERT("unhandled", 0);
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <ip4addr_aton+0x164>)
 8007a46:	22f9      	movs	r2, #249	; 0xf9
 8007a48:	4903      	ldr	r1, [pc, #12]	; (8007a58 <ip4addr_aton+0x168>)
 8007a4a:	4804      	ldr	r0, [pc, #16]	; (8007a5c <ip4addr_aton+0x16c>)
 8007a4c:	f007 f85a 	bl	800eb04 <iprintf>
      break;
 8007a50:	e7cd      	b.n	80079ee <ip4addr_aton+0xfe>
 8007a52:	bf00      	nop
 8007a54:	0801085f 	.word	0x0801085f
 8007a58:	08010898 	.word	0x08010898
 8007a5c:	0800fff2 	.word	0x0800fff2

08007a60 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8007a60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8007a64:	6803      	ldr	r3, [r0, #0]
 8007a66:	f10d 0c07 	add.w	ip, sp, #7
 8007a6a:	f10d 0003 	add.w	r0, sp, #3

  rp = buf;
 8007a6e:	460f      	mov	r7, r1
  int len = 0;
 8007a70:	2500      	movs	r5, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8007a72:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8007a76:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	7844      	ldrb	r4, [r0, #1]
  int len = 0;
 8007a7e:	2300      	movs	r3, #0
      inv[i++] = (char)('0' + rem);
 8007a80:	f10d 0a08 	add.w	sl, sp, #8
 8007a84:	f103 0901 	add.w	r9, r3, #1
      rem = *ap % (u8_t)10;
 8007a88:	fbb4 f6fe 	udiv	r6, r4, lr
 8007a8c:	fb0e 4416 	mls	r4, lr, r6, r4
      inv[i++] = (char)('0' + rem);
 8007a90:	449a      	add	sl, r3
 8007a92:	fa5f f989 	uxtb.w	r9, r9
 8007a96:	3430      	adds	r4, #48	; 0x30
 8007a98:	f80a 4c08 	strb.w	r4, [sl, #-8]
    } while (*ap);
 8007a9c:	f016 04ff 	ands.w	r4, r6, #255	; 0xff
 8007aa0:	d117      	bne.n	8007ad2 <ip4addr_ntoa_r+0x72>
 8007aa2:	f800 4f01 	strb.w	r4, [r0, #1]!
 8007aa6:	1bed      	subs	r5, r5, r7
 8007aa8:	463c      	mov	r4, r7
    while (i--) {
 8007aaa:	2bff      	cmp	r3, #255	; 0xff
 8007aac:	eb04 0605 	add.w	r6, r4, r5
 8007ab0:	d111      	bne.n	8007ad6 <ip4addr_ntoa_r+0x76>
    if (len++ >= buflen) {
 8007ab2:	4296      	cmp	r6, r2
 8007ab4:	f106 0501 	add.w	r5, r6, #1
 8007ab8:	da19      	bge.n	8007aee <ip4addr_ntoa_r+0x8e>
  for (n = 0; n < 4; n++) {
 8007aba:	4560      	cmp	r0, ip
    *rp++ = '.';
 8007abc:	f104 0701 	add.w	r7, r4, #1
 8007ac0:	f884 8000 	strb.w	r8, [r4]
  for (n = 0; n < 4; n++) {
 8007ac4:	d1da      	bne.n	8007a7c <ip4addr_ntoa_r+0x1c>
    ap++;
  }
  *--rp = 0;
 8007ac6:	2300      	movs	r3, #0
  return buf;
 8007ac8:	4608      	mov	r0, r1
  *--rp = 0;
 8007aca:	7023      	strb	r3, [r4, #0]
}
 8007acc:	b002      	add	sp, #8
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      inv[i++] = (char)('0' + rem);
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	e7d4      	b.n	8007a80 <ip4addr_ntoa_r+0x20>
 8007ad6:	1e5f      	subs	r7, r3, #1
      if (len++ >= buflen) {
 8007ad8:	4296      	cmp	r6, r2
 8007ada:	b2ff      	uxtb	r7, r7
 8007adc:	da07      	bge.n	8007aee <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 8007ade:	ae02      	add	r6, sp, #8
 8007ae0:	4433      	add	r3, r6
 8007ae2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007ae6:	f804 3b01 	strb.w	r3, [r4], #1
 8007aea:	463b      	mov	r3, r7
 8007aec:	e7dd      	b.n	8007aaa <ip4addr_ntoa_r+0x4a>
        return NULL;
 8007aee:	2000      	movs	r0, #0
 8007af0:	e7ec      	b.n	8007acc <ip4addr_ntoa_r+0x6c>
	...

08007af4 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8007af4:	2210      	movs	r2, #16
 8007af6:	4901      	ldr	r1, [pc, #4]	; (8007afc <ip4addr_ntoa+0x8>)
 8007af8:	f7ff bfb2 	b.w	8007a60 <ip4addr_ntoa_r>
 8007afc:	20006ce8 	.word	0x20006ce8

08007b00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8007b00:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <ip_reass_dequeue_datagram+0x34>)
{
 8007b04:	4604      	mov	r4, r0
 8007b06:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4282      	cmp	r2, r0
 8007b0c:	d107      	bne.n	8007b1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8007b0e:	6802      	ldr	r2, [r0, #0]
 8007b10:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8007b12:	4621      	mov	r1, r4
 8007b14:	2004      	movs	r0, #4
}
 8007b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8007b1a:	f000 bea1 	b.w	8008860 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8007b1e:	b931      	cbnz	r1, 8007b2e <ip_reass_dequeue_datagram+0x2e>
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <ip_reass_dequeue_datagram+0x38>)
 8007b22:	f240 1245 	movw	r2, #325	; 0x145
 8007b26:	4905      	ldr	r1, [pc, #20]	; (8007b3c <ip_reass_dequeue_datagram+0x3c>)
 8007b28:	4805      	ldr	r0, [pc, #20]	; (8007b40 <ip_reass_dequeue_datagram+0x40>)
 8007b2a:	f006 ffeb 	bl	800eb04 <iprintf>
    prev->next = ipr->next;
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	e7ee      	b.n	8007b12 <ip_reass_dequeue_datagram+0x12>
 8007b34:	20006cfc 	.word	0x20006cfc
 8007b38:	080109b5 	.word	0x080109b5
 8007b3c:	080109ee 	.word	0x080109ee
 8007b40:	0800fff2 	.word	0x0800fff2

08007b44 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007b44:	4281      	cmp	r1, r0
{
 8007b46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007b4e:	d105      	bne.n	8007b5c <ip_reass_free_complete_datagram+0x18>
 8007b50:	4b2f      	ldr	r3, [pc, #188]	; (8007c10 <ip_reass_free_complete_datagram+0xcc>)
 8007b52:	22ab      	movs	r2, #171	; 0xab
 8007b54:	492f      	ldr	r1, [pc, #188]	; (8007c14 <ip_reass_free_complete_datagram+0xd0>)
 8007b56:	4830      	ldr	r0, [pc, #192]	; (8007c18 <ip_reass_free_complete_datagram+0xd4>)
 8007b58:	f006 ffd4 	bl	800eb04 <iprintf>
  if (prev != NULL) {
 8007b5c:	b147      	cbz	r7, 8007b70 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	429d      	cmp	r5, r3
 8007b62:	d005      	beq.n	8007b70 <ip_reass_free_complete_datagram+0x2c>
 8007b64:	4b2a      	ldr	r3, [pc, #168]	; (8007c10 <ip_reass_free_complete_datagram+0xcc>)
 8007b66:	22ad      	movs	r2, #173	; 0xad
 8007b68:	492c      	ldr	r1, [pc, #176]	; (8007c1c <ip_reass_free_complete_datagram+0xd8>)
 8007b6a:	482b      	ldr	r0, [pc, #172]	; (8007c18 <ip_reass_free_complete_datagram+0xd4>)
 8007b6c:	f006 ffca 	bl	800eb04 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007b70:	686e      	ldr	r6, [r5, #4]
 8007b72:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8007b74:	889a      	ldrh	r2, [r3, #4]
 8007b76:	bb92      	cbnz	r2, 8007bde <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007b78:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007b7a:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8007b7e:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007b80:	f105 0208 	add.w	r2, r5, #8
 8007b84:	f852 0b04 	ldr.w	r0, [r2], #4
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	f843 0b04 	str.w	r0, [r3], #4
 8007b8e:	d1f9      	bne.n	8007b84 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007b90:	2101      	movs	r1, #1
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7ff fcf5 	bl	8007582 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f001 fa25 	bl	8008fe8 <pbuf_clen>
 8007b9e:	4604      	mov	r4, r0
    pbuf_free(p);
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f001 f8b3 	bl	8008d0c <pbuf_free>
  p = ipr->p;
 8007ba6:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007ba8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007c10 <ip_reass_free_complete_datagram+0xcc>
 8007bac:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007c28 <ip_reass_free_complete_datagram+0xe4>
 8007bb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007c18 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8007bb4:	b9ae      	cbnz	r6, 8007be2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8007bb6:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007bb8:	4d19      	ldr	r5, [pc, #100]	; (8007c20 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7ff ffa0 	bl	8007b00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007bc0:	882b      	ldrh	r3, [r5, #0]
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	d205      	bcs.n	8007bd2 <ip_reass_free_complete_datagram+0x8e>
 8007bc6:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <ip_reass_free_complete_datagram+0xcc>)
 8007bc8:	22d2      	movs	r2, #210	; 0xd2
 8007bca:	4916      	ldr	r1, [pc, #88]	; (8007c24 <ip_reass_free_complete_datagram+0xe0>)
 8007bcc:	4812      	ldr	r0, [pc, #72]	; (8007c18 <ip_reass_free_complete_datagram+0xd4>)
 8007bce:	f006 ff99 	bl	800eb04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007bd2:	882b      	ldrh	r3, [r5, #0]
}
 8007bd4:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007bd6:	1b1b      	subs	r3, r3, r4
 8007bd8:	802b      	strh	r3, [r5, #0]
}
 8007bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8007bde:	2400      	movs	r4, #0
 8007be0:	e7e1      	b.n	8007ba6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8007be2:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8007be4:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8007be6:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8007bea:	f001 f9fd 	bl	8008fe8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007bee:	4404      	add	r4, r0
 8007bf0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007bf4:	db05      	blt.n	8007c02 <ip_reass_free_complete_datagram+0xbe>
 8007bf6:	4643      	mov	r3, r8
 8007bf8:	22cc      	movs	r2, #204	; 0xcc
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f006 ff81 	bl	800eb04 <iprintf>
    pbuf_free(pcur);
 8007c02:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007c04:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8007c06:	f001 f881 	bl	8008d0c <pbuf_free>
    p = iprh->next_pbuf;
 8007c0a:	465e      	mov	r6, fp
 8007c0c:	e7d2      	b.n	8007bb4 <ip_reass_free_complete_datagram+0x70>
 8007c0e:	bf00      	nop
 8007c10:	080109b5 	.word	0x080109b5
 8007c14:	08010a07 	.word	0x08010a07
 8007c18:	0800fff2 	.word	0x0800fff2
 8007c1c:	08010a13 	.word	0x08010a13
 8007c20:	20006cf8 	.word	0x20006cf8
 8007c24:	08010a42 	.word	0x08010a42
 8007c28:	08010a25 	.word	0x08010a25

08007c2c <ip_reass_remove_oldest_datagram>:
{
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4606      	mov	r6, r0
 8007c32:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8007c34:	2500      	movs	r5, #0
    r = reassdatagrams;
 8007c36:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007ca0 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8007c3a:	2400      	movs	r4, #0
    r = reassdatagrams;
 8007c3c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8007c40:	4621      	mov	r1, r4
    prev = NULL;
 8007c42:	46a6      	mov	lr, r4
    oldest = NULL;
 8007c44:	4620      	mov	r0, r4
    while (r != NULL) {
 8007c46:	b953      	cbnz	r3, 8007c5e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8007c48:	b110      	cbz	r0, 8007c50 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007c4a:	f7ff ff7b 	bl	8007b44 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8007c4e:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007c50:	42bd      	cmp	r5, r7
 8007c52:	da01      	bge.n	8007c58 <ip_reass_remove_oldest_datagram+0x2c>
 8007c54:	2c01      	cmp	r4, #1
 8007c56:	dcf0      	bgt.n	8007c3a <ip_reass_remove_oldest_datagram+0xe>
}
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007c5e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8007c62:	695a      	ldr	r2, [r3, #20]
 8007c64:	4562      	cmp	r2, ip
 8007c66:	d109      	bne.n	8007c7c <ip_reass_remove_oldest_datagram+0x50>
 8007c68:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	4562      	cmp	r2, ip
 8007c70:	d104      	bne.n	8007c7c <ip_reass_remove_oldest_datagram+0x50>
 8007c72:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8007c76:	88b2      	ldrh	r2, [r6, #4]
 8007c78:	4594      	cmp	ip, r2
 8007c7a:	d008      	beq.n	8007c8e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8007c7c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8007c7e:	b160      	cbz	r0, 8007c9a <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8007c80:	7fc2      	ldrb	r2, [r0, #31]
 8007c82:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8007c86:	4594      	cmp	ip, r2
 8007c88:	bf9c      	itt	ls
 8007c8a:	4671      	movls	r1, lr
 8007c8c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	bf18      	it	ne
 8007c94:	469e      	movne	lr, r3
 8007c96:	4613      	mov	r3, r2
 8007c98:	e7d5      	b.n	8007c46 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007c9a:	4671      	mov	r1, lr
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	e7f6      	b.n	8007c8e <ip_reass_remove_oldest_datagram+0x62>
 8007ca0:	20006cfc 	.word	0x20006cfc

08007ca4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007ca4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	b930      	cbnz	r0, 8007cb8 <ip_frag_free_pbuf_custom_ref+0x14>
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <ip_frag_free_pbuf_custom_ref+0x20>)
 8007cac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007cb0:	4905      	ldr	r1, [pc, #20]	; (8007cc8 <ip_frag_free_pbuf_custom_ref+0x24>)
 8007cb2:	4806      	ldr	r0, [pc, #24]	; (8007ccc <ip_frag_free_pbuf_custom_ref+0x28>)
 8007cb4:	f006 ff26 	bl	800eb04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007cb8:	4621      	mov	r1, r4
 8007cba:	2005      	movs	r0, #5
}
 8007cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8007cc0:	f000 bdce 	b.w	8008860 <memp_free>
 8007cc4:	080109b5 	.word	0x080109b5
 8007cc8:	0801115d 	.word	0x0801115d
 8007ccc:	0800fff2 	.word	0x0800fff2

08007cd0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007cd0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	b930      	cbnz	r0, 8007ce4 <ipfrag_free_pbuf_custom+0x14>
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <ipfrag_free_pbuf_custom+0x28>)
 8007cd8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8007cdc:	4907      	ldr	r1, [pc, #28]	; (8007cfc <ipfrag_free_pbuf_custom+0x2c>)
 8007cde:	4808      	ldr	r0, [pc, #32]	; (8007d00 <ipfrag_free_pbuf_custom+0x30>)
 8007ce0:	f006 ff10 	bl	800eb04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8007ce4:	6960      	ldr	r0, [r4, #20]
 8007ce6:	b108      	cbz	r0, 8007cec <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8007ce8:	f001 f810 	bl	8008d0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8007cec:	4620      	mov	r0, r4
}
 8007cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8007cf2:	f7ff bfd7 	b.w	8007ca4 <ip_frag_free_pbuf_custom_ref>
 8007cf6:	bf00      	nop
 8007cf8:	080109b5 	.word	0x080109b5
 8007cfc:	08010a64 	.word	0x08010a64
 8007d00:	0800fff2 	.word	0x0800fff2

08007d04 <ip_reass_tmr>:
{
 8007d04:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8007d06:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8007d08:	2400      	movs	r4, #0
  r = reassdatagrams;
 8007d0a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8007d0c:	b900      	cbnz	r0, 8007d10 <ip_reass_tmr+0xc>
}
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8007d10:	7fc3      	ldrb	r3, [r0, #31]
 8007d12:	6805      	ldr	r5, [r0, #0]
 8007d14:	b123      	cbz	r3, 8007d20 <ip_reass_tmr+0x1c>
      r->timer--;
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4604      	mov	r4, r0
 8007d1a:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	e7f5      	b.n	8007d0c <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8007d20:	4621      	mov	r1, r4
 8007d22:	f7ff ff0f 	bl	8007b44 <ip_reass_free_complete_datagram>
 8007d26:	e7f9      	b.n	8007d1c <ip_reass_tmr+0x18>
 8007d28:	20006cfc 	.word	0x20006cfc

08007d2c <ip4_reass>:
{
 8007d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8007d30:	6845      	ldr	r5, [r0, #4]
{
 8007d32:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007d34:	782b      	ldrb	r3, [r5, #0]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	f040 8099 	bne.w	8007e72 <ip4_reass+0x146>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007d40:	88e8      	ldrh	r0, [r5, #6]
 8007d42:	f7fd f9fb 	bl	800513c <lwip_htons>
 8007d46:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007d48:	8868      	ldrh	r0, [r5, #2]
 8007d4a:	f7fd f9f7 	bl	800513c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007d4e:	782b      	ldrb	r3, [r5, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4298      	cmp	r0, r3
 8007d58:	f0c0 808b 	bcc.w	8007e72 <ip4_reass+0x146>
  len = (u16_t)(len - hlen);
 8007d5c:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007d5e:	4cb4      	ldr	r4, [pc, #720]	; (8008030 <ip4_reass+0x304>)
  len = (u16_t)(len - hlen);
 8007d60:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8007d62:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8007d64:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8007d66:	f001 f93f 	bl	8008fe8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007d6a:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8007d6c:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007d6e:	4403      	add	r3, r0
 8007d70:	2b0a      	cmp	r3, #10
 8007d72:	dc75      	bgt.n	8007e60 <ip4_reass+0x134>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007d74:	4eaf      	ldr	r6, [pc, #700]	; (8008034 <ip4_reass+0x308>)
 8007d76:	6834      	ldr	r4, [r6, #0]
 8007d78:	2c00      	cmp	r4, #0
 8007d7a:	d17f      	bne.n	8007e7c <ip4_reass+0x150>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007d7c:	2004      	movs	r0, #4
 8007d7e:	f000 fd53 	bl	8008828 <memp_malloc>
  if (ipr == NULL) {
 8007d82:	4604      	mov	r4, r0
 8007d84:	b958      	cbnz	r0, 8007d9e <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8007d86:	4651      	mov	r1, sl
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff ff4f 	bl	8007c2c <ip_reass_remove_oldest_datagram>
 8007d8e:	4582      	cmp	sl, r0
 8007d90:	dc6f      	bgt.n	8007e72 <ip4_reass+0x146>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007d92:	2004      	movs	r0, #4
 8007d94:	f000 fd48 	bl	8008828 <memp_malloc>
    if (ipr == NULL)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d069      	beq.n	8007e72 <ip4_reass+0x146>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007d9e:	2220      	movs	r2, #32
 8007da0:	2100      	movs	r1, #0
 8007da2:	4620      	mov	r0, r4
 8007da4:	f006 fea6 	bl	800eaf4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8007da8:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007daa:	f104 0208 	add.w	r2, r4, #8
 8007dae:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8007db2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007db4:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8007db6:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8007db8:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f853 0b04 	ldr.w	r0, [r3], #4
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	f842 0b04 	str.w	r0, [r2], #4
 8007dc6:	d1f9      	bne.n	8007dbc <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007dc8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007dcc:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8007dd0:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007dd4:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8007dd8:	d10a      	bne.n	8007df0 <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 8007dda:	9b01      	ldr	r3, [sp, #4]
 8007ddc:	18fb      	adds	r3, r7, r3
 8007dde:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007de0:	429f      	cmp	r7, r3
 8007de2:	f200 8137 	bhi.w	8008054 <ip4_reass+0x328>
 8007de6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8007dea:	4293      	cmp	r3, r2
 8007dec:	f200 8132 	bhi.w	8008054 <ip4_reass+0x328>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8007df0:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007df4:	8868      	ldrh	r0, [r5, #2]
 8007df6:	f7fd f9a1 	bl	800513c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007dfa:	782b      	ldrb	r3, [r5, #0]
 8007dfc:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4298      	cmp	r0, r3
 8007e04:	f0c0 8126 	bcc.w	8008054 <ip4_reass+0x328>
  len = (u16_t)(len - hlen);
 8007e08:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007e0a:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 8007e0c:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 8007e0e:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007e12:	f7fd f993 	bl	800513c <lwip_htons>
 8007e16:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8007e1a:	f8d8 6004 	ldr.w	r6, [r8, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007e1e:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8007e20:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8007e22:	eb09 0300 	add.w	r3, r9, r0
  iprh->next_pbuf = NULL;
 8007e26:	7075      	strb	r5, [r6, #1]
 8007e28:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8007e2a:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8007e2c:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8007e2e:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8007e30:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 8007e32:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8007e34:	f200 810e 	bhi.w	8008054 <ip4_reass+0x328>
  for (q = ipr->p; q != NULL;) {
 8007e38:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8007e3c:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 8007e40:	4672      	mov	r2, lr
 8007e42:	bb52      	cbnz	r2, 8007e9a <ip4_reass+0x16e>
    if (iprh_prev != NULL) {
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	f040 8093 	bne.w	8007f70 <ip4_reass+0x244>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007e4a:	f1be 0f00 	cmp.w	lr, #0
 8007e4e:	d07d      	beq.n	8007f4c <ip4_reass+0x220>
 8007e50:	4b79      	ldr	r3, [pc, #484]	; (8008038 <ip4_reass+0x30c>)
 8007e52:	f240 12bf 	movw	r2, #447	; 0x1bf
 8007e56:	4979      	ldr	r1, [pc, #484]	; (800803c <ip4_reass+0x310>)
 8007e58:	4879      	ldr	r0, [pc, #484]	; (8008040 <ip4_reass+0x314>)
 8007e5a:	f006 fe53 	bl	800eb04 <iprintf>
 8007e5e:	e075      	b.n	8007f4c <ip4_reass+0x220>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007e60:	4601      	mov	r1, r0
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff fee2 	bl	8007c2c <ip_reass_remove_oldest_datagram>
 8007e68:	b118      	cbz	r0, 8007e72 <ip4_reass+0x146>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007e6a:	8823      	ldrh	r3, [r4, #0]
 8007e6c:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007e6e:	2b0a      	cmp	r3, #10
 8007e70:	dd80      	ble.n	8007d74 <ip4_reass+0x48>
  pbuf_free(p);
 8007e72:	4640      	mov	r0, r8
 8007e74:	f000 ff4a 	bl	8008d0c <pbuf_free>
  return NULL;
 8007e78:	2600      	movs	r6, #0
 8007e7a:	e0d5      	b.n	8008028 <ip4_reass+0x2fc>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007e7c:	68eb      	ldr	r3, [r5, #12]
 8007e7e:	6962      	ldr	r2, [r4, #20]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d108      	bne.n	8007e96 <ip4_reass+0x16a>
 8007e84:	692b      	ldr	r3, [r5, #16]
 8007e86:	69a2      	ldr	r2, [r4, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d104      	bne.n	8007e96 <ip4_reass+0x16a>
 8007e8c:	89a2      	ldrh	r2, [r4, #12]
 8007e8e:	88ab      	ldrh	r3, [r5, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	f000 80f3 	beq.w	800807c <ip4_reass+0x350>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007e96:	6824      	ldr	r4, [r4, #0]
 8007e98:	e76e      	b.n	8007d78 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007e9a:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8007e9e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8007ea2:	4288      	cmp	r0, r1
 8007ea4:	d255      	bcs.n	8007f52 <ip4_reass+0x226>
      iprh->next_pbuf = q;
 8007ea6:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	d04c      	beq.n	8007f46 <ip4_reass+0x21a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007eac:	88ea      	ldrh	r2, [r5, #6]
 8007eae:	4290      	cmp	r0, r2
 8007eb0:	f0c0 80d0 	bcc.w	8008054 <ip4_reass+0x328>
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	f200 80cd 	bhi.w	8008054 <ip4_reass+0x328>
        if (iprh_prev->end != iprh->start) {
 8007eba:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8007ebc:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8007ec0:	f040 80fa 	bne.w	80080b8 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007ec4:	f1bb 0f00 	cmp.w	fp, #0
 8007ec8:	d004      	beq.n	8007ed4 <ip4_reass+0x1a8>
 8007eca:	7fa3      	ldrb	r3, [r4, #30]
 8007ecc:	f013 0301 	ands.w	r3, r3, #1
 8007ed0:	f000 80f0 	beq.w	80080b4 <ip4_reass+0x388>
    if (valid) {
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	d15a      	bne.n	8007f90 <ip4_reass+0x264>
          q = iprh->next_pbuf;
 8007eda:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007ede:	4d54      	ldr	r5, [pc, #336]	; (8008030 <ip4_reass+0x304>)
 8007ee0:	882b      	ldrh	r3, [r5, #0]
 8007ee2:	449a      	add	sl, r3
 8007ee4:	f8a5 a000 	strh.w	sl, [r5]
  if (is_last) {
 8007ee8:	f1bb 0f00 	cmp.w	fp, #0
 8007eec:	d106      	bne.n	8007efc <ip4_reass+0x1d0>
    u16_t datagram_len = (u16_t)(offset + len);
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007ef2:	7fa3      	ldrb	r3, [r4, #30]
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8007ef8:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007efa:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007efc:	f1b9 0f01 	cmp.w	r9, #1
 8007f00:	d1ba      	bne.n	8007e78 <ip4_reass+0x14c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007f02:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007f04:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007f08:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007f0a:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007f0c:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007f10:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007f12:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007f14:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007f16:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007f18:	f853 eb04 	ldr.w	lr, [r3], #4
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	f842 eb04 	str.w	lr, [r2], #4
 8007f22:	d1f9      	bne.n	8007f18 <ip4_reass+0x1ec>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007f24:	f7fd f90a 	bl	800513c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8007f28:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007f2a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007f2c:	71b3      	strb	r3, [r6, #6]
 8007f2e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007f30:	72b3      	strb	r3, [r6, #10]
 8007f32:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007f34:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8007f36:	2f00      	cmp	r7, #0
 8007f38:	d14f      	bne.n	8007fda <ip4_reass+0x2ae>
    if (ipr == reassdatagrams) {
 8007f3a:	4b3e      	ldr	r3, [pc, #248]	; (8008034 <ip4_reass+0x308>)
 8007f3c:	6819      	ldr	r1, [r3, #0]
 8007f3e:	428c      	cmp	r4, r1
 8007f40:	d15c      	bne.n	8007ffc <ip4_reass+0x2d0>
      ipr_prev = NULL;
 8007f42:	4639      	mov	r1, r7
 8007f44:	e05c      	b.n	8008000 <ip4_reass+0x2d4>
        if (iprh->end > iprh_tmp->start) {
 8007f46:	428b      	cmp	r3, r1
 8007f48:	f200 8084 	bhi.w	8008054 <ip4_reass+0x328>
      ipr->p = new_p;
 8007f4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007f50:	e7b8      	b.n	8007ec4 <ip4_reass+0x198>
    } else if (iprh->start == iprh_tmp->start) {
 8007f52:	d07f      	beq.n	8008054 <ip4_reass+0x328>
    } else if (iprh->start < iprh_tmp->end) {
 8007f54:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8007f58:	4282      	cmp	r2, r0
 8007f5a:	d87b      	bhi.n	8008054 <ip4_reass+0x328>
      if (iprh_prev != NULL) {
 8007f5c:	b125      	cbz	r5, 8007f68 <ip4_reass+0x23c>
        if (iprh_prev->end != iprh_tmp->start) {
 8007f5e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8007f60:	428a      	cmp	r2, r1
 8007f62:	bf18      	it	ne
 8007f64:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 8007f68:	f8dc 2000 	ldr.w	r2, [ip]
 8007f6c:	4665      	mov	r5, ip
 8007f6e:	e768      	b.n	8007e42 <ip4_reass+0x116>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007f70:	88eb      	ldrh	r3, [r5, #6]
 8007f72:	4283      	cmp	r3, r0
 8007f74:	d906      	bls.n	8007f84 <ip4_reass+0x258>
 8007f76:	4b30      	ldr	r3, [pc, #192]	; (8008038 <ip4_reass+0x30c>)
 8007f78:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007f7c:	4931      	ldr	r1, [pc, #196]	; (8008044 <ip4_reass+0x318>)
 8007f7e:	4830      	ldr	r0, [pc, #192]	; (8008040 <ip4_reass+0x314>)
 8007f80:	f006 fdc0 	bl	800eb04 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8007f84:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8007f88:	88ea      	ldrh	r2, [r5, #6]
 8007f8a:	88b3      	ldrh	r3, [r6, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	e797      	b.n	8007ec0 <ip4_reass+0x194>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0a1      	beq.n	8007eda <ip4_reass+0x1ae>
 8007f96:	6859      	ldr	r1, [r3, #4]
 8007f98:	888b      	ldrh	r3, [r1, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d19d      	bne.n	8007eda <ip4_reass+0x1ae>
        q = iprh->next_pbuf;
 8007f9e:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8007fa0:	b99b      	cbnz	r3, 8007fca <ip4_reass+0x29e>
          LWIP_ASSERT("sanity check",
 8007fa2:	42b1      	cmp	r1, r6
 8007fa4:	d106      	bne.n	8007fb4 <ip4_reass+0x288>
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <ip4_reass+0x30c>)
 8007fa8:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007fac:	4926      	ldr	r1, [pc, #152]	; (8008048 <ip4_reass+0x31c>)
 8007fae:	4824      	ldr	r0, [pc, #144]	; (8008040 <ip4_reass+0x314>)
 8007fb0:	f006 fda8 	bl	800eb04 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d091      	beq.n	8007ede <ip4_reass+0x1b2>
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <ip4_reass+0x30c>)
 8007fbc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007fc0:	4922      	ldr	r1, [pc, #136]	; (800804c <ip4_reass+0x320>)
 8007fc2:	481f      	ldr	r0, [pc, #124]	; (8008040 <ip4_reass+0x314>)
 8007fc4:	f006 fd9e 	bl	800eb04 <iprintf>
 8007fc8:	e789      	b.n	8007ede <ip4_reass+0x1b2>
          iprh = (struct ip_reass_helper *)q->payload;
 8007fca:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8007fcc:	88f0      	ldrh	r0, [r6, #6]
 8007fce:	8893      	ldrh	r3, [r2, #4]
 8007fd0:	4298      	cmp	r0, r3
 8007fd2:	d182      	bne.n	8007eda <ip4_reass+0x1ae>
          q = iprh->next_pbuf;
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	4616      	mov	r6, r2
 8007fd8:	e7e2      	b.n	8007fa0 <ip4_reass+0x274>
      iprh = (struct ip_reass_helper *)r->payload;
 8007fda:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 8007fde:	2114      	movs	r1, #20
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f000 fe5f 	bl	8008ca4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f001 f821 	bl	8009030 <pbuf_cat>
      r = iprh->next_pbuf;
 8007fee:	f8d8 7000 	ldr.w	r7, [r8]
 8007ff2:	e7a0      	b.n	8007f36 <ip4_reass+0x20a>
        if (ipr_prev->next == ipr) {
 8007ff4:	680b      	ldr	r3, [r1, #0]
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d002      	beq.n	8008000 <ip4_reass+0x2d4>
 8007ffa:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d1f9      	bne.n	8007ff4 <ip4_reass+0x2c8>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8008000:	4620      	mov	r0, r4
 8008002:	f7ff fd7d 	bl	8007b00 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8008006:	4630      	mov	r0, r6
 8008008:	f000 ffee 	bl	8008fe8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800800c:	882b      	ldrh	r3, [r5, #0]
    clen = pbuf_clen(p);
 800800e:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8008010:	4283      	cmp	r3, r0
 8008012:	d206      	bcs.n	8008022 <ip4_reass+0x2f6>
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <ip4_reass+0x30c>)
 8008016:	f240 229b 	movw	r2, #667	; 0x29b
 800801a:	490d      	ldr	r1, [pc, #52]	; (8008050 <ip4_reass+0x324>)
 800801c:	4808      	ldr	r0, [pc, #32]	; (8008040 <ip4_reass+0x314>)
 800801e:	f006 fd71 	bl	800eb04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8008022:	8828      	ldrh	r0, [r5, #0]
 8008024:	1b00      	subs	r0, r0, r4
 8008026:	8028      	strh	r0, [r5, #0]
}
 8008028:	4630      	mov	r0, r6
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	20006cf8 	.word	0x20006cf8
 8008034:	20006cfc 	.word	0x20006cfc
 8008038:	080109b5 	.word	0x080109b5
 800803c:	08010914 	.word	0x08010914
 8008040:	0800fff2 	.word	0x0800fff2
 8008044:	080108f6 	.word	0x080108f6
 8008048:	0801094b 	.word	0x0801094b
 800804c:	08010958 	.word	0x08010958
 8008050:	0801097a 	.word	0x0801097a
  if (ipr->p == NULL) {
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f47f af0b 	bne.w	8007e72 <ip4_reass+0x146>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <ip4_reass+0x39c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	429c      	cmp	r4, r3
 8008062:	d006      	beq.n	8008072 <ip4_reass+0x346>
 8008064:	4b19      	ldr	r3, [pc, #100]	; (80080cc <ip4_reass+0x3a0>)
 8008066:	f240 22ab 	movw	r2, #683	; 0x2ab
 800806a:	4919      	ldr	r1, [pc, #100]	; (80080d0 <ip4_reass+0x3a4>)
 800806c:	4819      	ldr	r0, [pc, #100]	; (80080d4 <ip4_reass+0x3a8>)
 800806e:	f006 fd49 	bl	800eb04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8008072:	2100      	movs	r1, #0
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fd43 	bl	8007b00 <ip_reass_dequeue_datagram>
 800807a:	e6fa      	b.n	8007e72 <ip4_reass+0x146>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800807c:	88e8      	ldrh	r0, [r5, #6]
 800807e:	f7fd f85d 	bl	800513c <lwip_htons>
 8008082:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008086:	2800      	cmp	r0, #0
 8008088:	f47f ae9e 	bne.w	8007dc8 <ip4_reass+0x9c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800808c:	89e0      	ldrh	r0, [r4, #14]
 800808e:	f7fd f855 	bl	800513c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008092:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008096:	2800      	cmp	r0, #0
 8008098:	f43f ae96 	beq.w	8007dc8 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800809c:	462b      	mov	r3, r5
 800809e:	f104 0208 	add.w	r2, r4, #8
 80080a2:	f105 0114 	add.w	r1, r5, #20
 80080a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80080aa:	428b      	cmp	r3, r1
 80080ac:	f842 0b04 	str.w	r0, [r2], #4
 80080b0:	d1f9      	bne.n	80080a6 <ip4_reass+0x37a>
 80080b2:	e689      	b.n	8007dc8 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80080b4:	4699      	mov	r9, r3
 80080b6:	e712      	b.n	8007ede <ip4_reass+0x1b2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80080b8:	f1bb 0f00 	cmp.w	fp, #0
 80080bc:	f43f af0d 	beq.w	8007eda <ip4_reass+0x1ae>
 80080c0:	f04f 0900 	mov.w	r9, #0
 80080c4:	e701      	b.n	8007eca <ip4_reass+0x19e>
 80080c6:	bf00      	nop
 80080c8:	20006cfc 	.word	0x20006cfc
 80080cc:	080109b5 	.word	0x080109b5
 80080d0:	08010995 	.word	0x08010995
 80080d4:	0800fff2 	.word	0x0800fff2

080080d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80080dc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 80080de:	b08d      	sub	sp, #52	; 0x34
 80080e0:	4607      	mov	r7, r0
 80080e2:	468b      	mov	fp, r1
 80080e4:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80080e6:	3b14      	subs	r3, #20
 80080e8:	2208      	movs	r2, #8
 80080ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80080f2:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80080f4:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80080f6:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80080f8:	f005 050f 	and.w	r5, r5, #15
 80080fc:	00ad      	lsls	r5, r5, #2
 80080fe:	2d14      	cmp	r5, #20
 8008100:	d109      	bne.n	8008116 <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8008102:	8943      	ldrh	r3, [r0, #10]
 8008104:	2b13      	cmp	r3, #19
 8008106:	d809      	bhi.n	800811c <ip4_frag+0x44>
 8008108:	4b5e      	ldr	r3, [pc, #376]	; (8008284 <ip4_frag+0x1ac>)
 800810a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800810e:	495e      	ldr	r1, [pc, #376]	; (8008288 <ip4_frag+0x1b0>)
 8008110:	485e      	ldr	r0, [pc, #376]	; (800828c <ip4_frag+0x1b4>)
 8008112:	f006 fcf7 	bl	800eb04 <iprintf>
    return ERR_VAL;
 8008116:	f06f 0005 	mvn.w	r0, #5
 800811a:	e013      	b.n	8008144 <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800811c:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800811e:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008120:	88d8      	ldrh	r0, [r3, #6]
 8008122:	f7fd f80b 	bl	800513c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8008126:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800812a:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008132:	3c14      	subs	r4, #20
 8008134:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008136:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008138:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	b29b      	uxth	r3, r3
 800813e:	9309      	str	r3, [sp, #36]	; 0x24
  while (left) {
 8008140:	b91c      	cbnz	r4, 800814a <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008142:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8008144:	b00d      	add	sp, #52	; 0x34
 8008146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800814c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008150:	2114      	movs	r1, #20
 8008152:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008154:	42a3      	cmp	r3, r4
 8008156:	bf28      	it	cs
 8008158:	4623      	movcs	r3, r4
 800815a:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800815c:	f000 fe3e 	bl	8008ddc <pbuf_alloc>
    if (rambuf == NULL) {
 8008160:	4680      	mov	r8, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	d037      	beq.n	80081d6 <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8008166:	8943      	ldrh	r3, [r0, #10]
 8008168:	2b13      	cmp	r3, #19
 800816a:	d806      	bhi.n	800817a <ip4_frag+0xa2>
 800816c:	4b45      	ldr	r3, [pc, #276]	; (8008284 <ip4_frag+0x1ac>)
 800816e:	f240 3225 	movw	r2, #805	; 0x325
 8008172:	4947      	ldr	r1, [pc, #284]	; (8008290 <ip4_frag+0x1b8>)
 8008174:	4845      	ldr	r0, [pc, #276]	; (800828c <ip4_frag+0x1b4>)
 8008176:	f006 fcc5 	bl	800eb04 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008180:	4619      	mov	r1, r3
 8008182:	3114      	adds	r1, #20
 8008184:	f853 0b04 	ldr.w	r0, [r3], #4
 8008188:	428b      	cmp	r3, r1
 800818a:	f842 0b04 	str.w	r0, [r2], #4
 800818e:	d1f9      	bne.n	8008184 <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008190:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8008194:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008198:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 800819a:	f1b9 0f00 	cmp.w	r9, #0
 800819e:	d040      	beq.n	8008222 <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 80081a0:	897b      	ldrh	r3, [r7, #10]
 80081a2:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80081a4:	429d      	cmp	r5, r3
      u16_t plen = (u16_t)(p->len - poff);
 80081a6:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80081a8:	d906      	bls.n	80081b8 <ip4_frag+0xe0>
 80081aa:	4b36      	ldr	r3, [pc, #216]	; (8008284 <ip4_frag+0x1ac>)
 80081ac:	f240 322d 	movw	r2, #813	; 0x32d
 80081b0:	4938      	ldr	r1, [pc, #224]	; (8008294 <ip4_frag+0x1bc>)
 80081b2:	4836      	ldr	r0, [pc, #216]	; (800828c <ip4_frag+0x1b4>)
 80081b4:	f006 fca6 	bl	800eb04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80081b8:	454e      	cmp	r6, r9
 80081ba:	bf28      	it	cs
 80081bc:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 80081be:	b916      	cbnz	r6, 80081c6 <ip4_frag+0xee>
        p = p->next;
 80081c0:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80081c2:	2500      	movs	r5, #0
 80081c4:	e7e9      	b.n	800819a <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80081c6:	2005      	movs	r0, #5
 80081c8:	f000 fb2e 	bl	8008828 <memp_malloc>
      if (pcr == NULL) {
 80081cc:	4682      	mov	sl, r0
 80081ce:	b928      	cbnz	r0, 80081dc <ip4_frag+0x104>
        pbuf_free(rambuf);
 80081d0:	4640      	mov	r0, r8
 80081d2:	f000 fd9b 	bl	8008d0c <pbuf_free>
  return ERR_MEM;
 80081d6:	f04f 30ff 	mov.w	r0, #4294967295
 80081da:	e7b3      	b.n	8008144 <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80081dc:	9601      	str	r6, [sp, #4]
 80081de:	2241      	movs	r2, #65	; 0x41
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4631      	mov	r1, r6
 80081e4:	442b      	add	r3, r5
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	4603      	mov	r3, r0
 80081ea:	2000      	movs	r0, #0
 80081ec:	f000 fd3c 	bl	8008c68 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80081f0:	b918      	cbnz	r0, 80081fa <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 80081f2:	4650      	mov	r0, sl
 80081f4:	f7ff fd56 	bl	8007ca4 <ip_frag_free_pbuf_custom_ref>
 80081f8:	e7ea      	b.n	80081d0 <ip4_frag+0xf8>
 80081fa:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80081fc:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8008200:	4638      	mov	r0, r7
 8008202:	f000 fef9 	bl	8008ff8 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008208:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 800820c:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008210:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8008214:	4640      	mov	r0, r8
 8008216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008218:	f000 ff0a 	bl	8009030 <pbuf_cat>
      if (left_to_copy) {
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	d1ce      	bne.n	80081c0 <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 8008222:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8008224:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 8008226:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800822a:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800822e:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 8008230:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8008232:	42a3      	cmp	r3, r4
 8008234:	dd01      	ble.n	800823a <ip4_frag+0x162>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	b10b      	cbz	r3, 800823e <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 800823a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800823e:	f7fc ff7d 	bl	800513c <lwip_htons>
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	f103 0014 	add.w	r0, r3, #20
 800824c:	b280      	uxth	r0, r0
 800824e:	f7fc ff75 	bl	800513c <lwip_htons>
 8008252:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 8008254:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 8008256:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008258:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800825a:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800825c:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 800825e:	7293      	strb	r3, [r2, #10]
 8008260:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8008262:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008268:	4798      	blx	r3
    pbuf_free(rambuf);
 800826a:	4640      	mov	r0, r8
 800826c:	f000 fd4e 	bl	8008d0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008270:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 8008272:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 8008274:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800827a:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 800827c:	b29b      	uxth	r3, r3
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	e75e      	b.n	8008140 <ip4_frag+0x68>
 8008282:	bf00      	nop
 8008284:	080109b5 	.word	0x080109b5
 8008288:	080108ac 	.word	0x080108ac
 800828c:	0800fff2 	.word	0x0800fff2
 8008290:	080108c7 	.word	0x080108c7
 8008294:	080108e7 	.word	0x080108e7
 8008298:	08007cd1 	.word	0x08007cd1

0800829c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800829c:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800829e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80082a2:	4a11      	ldr	r2, [pc, #68]	; (80082e8 <mem_init+0x4c>)
 80082a4:	f023 0303 	bic.w	r3, r3, #3
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80082a8:	4810      	ldr	r0, [pc, #64]	; (80082ec <mem_init+0x50>)
{
 80082aa:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80082ac:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 80082ae:	2200      	movs	r2, #0
  mem->next = MEM_SIZE_ALIGNED;
 80082b0:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80082b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80082b4:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80082b6:	185a      	adds	r2, r3, r1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80082b8:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 80082ba:	2001      	movs	r0, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 80082bc:	8011      	strh	r1, [r2, #0]
  ram_end->used = 1;
 80082be:	7110      	strb	r0, [r2, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80082c0:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80082c2:	4a0b      	ldr	r2, [pc, #44]	; (80082f0 <mem_init+0x54>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80082c4:	480b      	ldr	r0, [pc, #44]	; (80082f4 <mem_init+0x58>)
  lfree = (struct mem *)(void *)ram;
 80082c6:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80082c8:	f005 fa3c 	bl	800d744 <sys_mutex_new>
 80082cc:	b140      	cbz	r0, 80082e0 <mem_init+0x44>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <mem_init+0x5c>)
 80082d0:	f240 221f 	movw	r2, #543	; 0x21f
 80082d4:	4909      	ldr	r1, [pc, #36]	; (80082fc <mem_init+0x60>)
 80082d6:	480a      	ldr	r0, [pc, #40]	; (8008300 <mem_init+0x64>)
  }
}
 80082d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80082dc:	f006 bc12 	b.w	800eb04 <iprintf>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	200070d3 	.word	0x200070d3
 80082e8:	20006d08 	.word	0x20006d08
 80082ec:	20006d0c 	.word	0x20006d0c
 80082f0:	20006d00 	.word	0x20006d00
 80082f4:	20006d04 	.word	0x20006d04
 80082f8:	08010b78 	.word	0x08010b78
 80082fc:	08010ba7 	.word	0x08010ba7
 8008300:	0800fff2 	.word	0x0800fff2

08008304 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008308:	4604      	mov	r4, r0
 800830a:	2800      	cmp	r0, #0
 800830c:	f000 80b6 	beq.w	800847c <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008310:	0783      	lsls	r3, r0, #30
 8008312:	d00c      	beq.n	800832e <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008314:	4b5a      	ldr	r3, [pc, #360]	; (8008480 <mem_free+0x17c>)
 8008316:	f240 2273 	movw	r2, #627	; 0x273
 800831a:	495a      	ldr	r1, [pc, #360]	; (8008484 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800831c:	485a      	ldr	r0, [pc, #360]	; (8008488 <mem_free+0x184>)
 800831e:	f006 fbf1 	bl	800eb04 <iprintf>
  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008322:	f005 fa3d 	bl	800d7a0 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800832a:	f005 ba45 	b.w	800d7b8 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800832e:	4b57      	ldr	r3, [pc, #348]	; (800848c <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008330:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	4698      	mov	r8, r3
 8008338:	4295      	cmp	r5, r2
 800833a:	d305      	bcc.n	8008348 <mem_free+0x44>
 800833c:	4f54      	ldr	r7, [pc, #336]	; (8008490 <mem_free+0x18c>)
 800833e:	f100 030c 	add.w	r3, r0, #12
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d204      	bcs.n	8008352 <mem_free+0x4e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008348:	4b4d      	ldr	r3, [pc, #308]	; (8008480 <mem_free+0x17c>)
 800834a:	f240 227f 	movw	r2, #639	; 0x27f
 800834e:	4951      	ldr	r1, [pc, #324]	; (8008494 <mem_free+0x190>)
 8008350:	e7e4      	b.n	800831c <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 8008352:	4851      	ldr	r0, [pc, #324]	; (8008498 <mem_free+0x194>)
 8008354:	f005 fa05 	bl	800d762 <sys_mutex_lock>
  if (!mem->used) {
 8008358:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800835c:	b953      	cbnz	r3, 8008374 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800835e:	4b48      	ldr	r3, [pc, #288]	; (8008480 <mem_free+0x17c>)
 8008360:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008364:	494d      	ldr	r1, [pc, #308]	; (800849c <mem_free+0x198>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008366:	4848      	ldr	r0, [pc, #288]	; (8008488 <mem_free+0x184>)
 8008368:	f006 fbcc 	bl	800eb04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800836c:	484a      	ldr	r0, [pc, #296]	; (8008498 <mem_free+0x194>)
 800836e:	f005 f9fd 	bl	800d76c <sys_mutex_unlock>
 8008372:	e7d6      	b.n	8008322 <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 8008374:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008378:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800837c:	d879      	bhi.n	8008472 <mem_free+0x16e>
  pmem = ptr_to_mem(mem->prev);
 800837e:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008382:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
 8008386:	d874      	bhi.n	8008472 <mem_free+0x16e>
  return (mem_size_t)((u8_t *)mem - ram);
 8008388:	f8d8 1000 	ldr.w	r1, [r8]
 800838c:	1a6b      	subs	r3, r5, r1
 800838e:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008390:	4283      	cmp	r3, r0
 8008392:	d002      	beq.n	800839a <mem_free+0x96>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008394:	5a08      	ldrh	r0, [r1, r0]
 8008396:	4298      	cmp	r0, r3
 8008398:	d16b      	bne.n	8008472 <mem_free+0x16e>
  return (struct mem *)(void *)&ram[ptr];
 800839a:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800839c:	6838      	ldr	r0, [r7, #0]
 800839e:	4282      	cmp	r2, r0
 80083a0:	d002      	beq.n	80083a8 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80083a2:	8852      	ldrh	r2, [r2, #2]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d164      	bne.n	8008472 <mem_free+0x16e>
  mem->used = 0;
 80083a8:	2300      	movs	r3, #0
  if (mem < lfree) {
 80083aa:	4e3d      	ldr	r6, [pc, #244]	; (80084a0 <mem_free+0x19c>)
  mem->used = 0;
 80083ac:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	429d      	cmp	r5, r3
 80083b4:	d200      	bcs.n	80083b8 <mem_free+0xb4>
    lfree = mem;
 80083b6:	6035      	str	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80083b8:	428d      	cmp	r5, r1
 80083ba:	d206      	bcs.n	80083ca <mem_free+0xc6>
 80083bc:	4b30      	ldr	r3, [pc, #192]	; (8008480 <mem_free+0x17c>)
 80083be:	f240 12df 	movw	r2, #479	; 0x1df
 80083c2:	4938      	ldr	r1, [pc, #224]	; (80084a4 <mem_free+0x1a0>)
 80083c4:	4830      	ldr	r0, [pc, #192]	; (8008488 <mem_free+0x184>)
 80083c6:	f006 fb9d 	bl	800eb04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	429d      	cmp	r5, r3
 80083ce:	d306      	bcc.n	80083de <mem_free+0xda>
 80083d0:	4b2b      	ldr	r3, [pc, #172]	; (8008480 <mem_free+0x17c>)
 80083d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80083d6:	4934      	ldr	r1, [pc, #208]	; (80084a8 <mem_free+0x1a4>)
 80083d8:	482b      	ldr	r0, [pc, #172]	; (8008488 <mem_free+0x184>)
 80083da:	f006 fb93 	bl	800eb04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80083de:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80083e2:	b133      	cbz	r3, 80083f2 <mem_free+0xee>
 80083e4:	4b26      	ldr	r3, [pc, #152]	; (8008480 <mem_free+0x17c>)
 80083e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80083ea:	4930      	ldr	r1, [pc, #192]	; (80084ac <mem_free+0x1a8>)
 80083ec:	4826      	ldr	r0, [pc, #152]	; (8008488 <mem_free+0x184>)
 80083ee:	f006 fb89 	bl	800eb04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80083f2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80083f6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80083fa:	d906      	bls.n	800840a <mem_free+0x106>
 80083fc:	4b20      	ldr	r3, [pc, #128]	; (8008480 <mem_free+0x17c>)
 80083fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008402:	492b      	ldr	r1, [pc, #172]	; (80084b0 <mem_free+0x1ac>)
 8008404:	4820      	ldr	r0, [pc, #128]	; (8008488 <mem_free+0x184>)
 8008406:	f006 fb7d 	bl	800eb04 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800840a:	f8d8 3000 	ldr.w	r3, [r8]
 800840e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008412:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008414:	4295      	cmp	r5, r2
 8008416:	d012      	beq.n	800843e <mem_free+0x13a>
 8008418:	7910      	ldrb	r0, [r2, #4]
 800841a:	b980      	cbnz	r0, 800843e <mem_free+0x13a>
 800841c:	6838      	ldr	r0, [r7, #0]
 800841e:	4282      	cmp	r2, r0
 8008420:	d00d      	beq.n	800843e <mem_free+0x13a>
    if (lfree == nmem) {
 8008422:	6830      	ldr	r0, [r6, #0]
 8008424:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8008426:	5a5a      	ldrh	r2, [r3, r1]
 8008428:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800842c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800842e:	bf08      	it	eq
 8008430:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008432:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008436:	bf1e      	ittt	ne
 8008438:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800843a:	1ae9      	subne	r1, r5, r3
 800843c:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800843e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8008442:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8008444:	428d      	cmp	r5, r1
 8008446:	d00f      	beq.n	8008468 <mem_free+0x164>
 8008448:	7908      	ldrb	r0, [r1, #4]
 800844a:	b968      	cbnz	r0, 8008468 <mem_free+0x164>
    if (lfree == mem) {
 800844c:	6830      	ldr	r0, [r6, #0]
 800844e:	4285      	cmp	r5, r0
      lfree = pmem;
 8008450:	bf08      	it	eq
 8008452:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8008454:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008458:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800845a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800845e:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008462:	bf1c      	itt	ne
 8008464:	185b      	addne	r3, r3, r1
 8008466:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008468:	480b      	ldr	r0, [pc, #44]	; (8008498 <mem_free+0x194>)
}
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800846e:	f005 b97d 	b.w	800d76c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <mem_free+0x17c>)
 8008474:	f240 2295 	movw	r2, #661	; 0x295
 8008478:	490e      	ldr	r1, [pc, #56]	; (80084b4 <mem_free+0x1b0>)
 800847a:	e774      	b.n	8008366 <mem_free+0x62>
 800847c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008480:	08010b78 	.word	0x08010b78
 8008484:	08010a70 	.word	0x08010a70
 8008488:	0800fff2 	.word	0x0800fff2
 800848c:	20006d08 	.word	0x20006d08
 8008490:	20006d0c 	.word	0x20006d0c
 8008494:	08010a91 	.word	0x08010a91
 8008498:	20006d04 	.word	0x20006d04
 800849c:	08010aaa 	.word	0x08010aaa
 80084a0:	20006d00 	.word	0x20006d00
 80084a4:	08010ad0 	.word	0x08010ad0
 80084a8:	08010ae7 	.word	0x08010ae7
 80084ac:	08010b01 	.word	0x08010b01
 80084b0:	08010b1c 	.word	0x08010b1c
 80084b4:	08010b46 	.word	0x08010b46

080084b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80084b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80084bc:	1ccd      	adds	r5, r1, #3
{
 80084be:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80084c0:	f025 0503 	bic.w	r5, r5, #3
 80084c4:	b2ad      	uxth	r5, r5
  if (newsize < MIN_SIZE_ALIGNED) {
 80084c6:	2d0b      	cmp	r5, #11
 80084c8:	d904      	bls.n	80084d4 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80084ca:	f5b5 5fc0 	cmp.w	r5, #6144	; 0x1800
 80084ce:	d902      	bls.n	80084d6 <mem_trim+0x1e>
    return NULL;
 80084d0:	2400      	movs	r4, #0
 80084d2:	e01e      	b.n	8008512 <mem_trim+0x5a>
    newsize = MIN_SIZE_ALIGNED;
 80084d4:	250c      	movs	r5, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80084d6:	42a9      	cmp	r1, r5
 80084d8:	d8fa      	bhi.n	80084d0 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <mem_trim+0x138>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4698      	mov	r8, r3
 80084e0:	42a2      	cmp	r2, r4
 80084e2:	d803      	bhi.n	80084ec <mem_trim+0x34>
 80084e4:	4b43      	ldr	r3, [pc, #268]	; (80085f4 <mem_trim+0x13c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	429c      	cmp	r4, r3
 80084ea:	d306      	bcc.n	80084fa <mem_trim+0x42>
 80084ec:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <mem_trim+0x140>)
 80084ee:	f240 22d2 	movw	r2, #722	; 0x2d2
 80084f2:	4942      	ldr	r1, [pc, #264]	; (80085fc <mem_trim+0x144>)
 80084f4:	4842      	ldr	r0, [pc, #264]	; (8008600 <mem_trim+0x148>)
 80084f6:	f006 fb05 	bl	800eb04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80084fa:	f8d8 3000 	ldr.w	r3, [r8]
 80084fe:	429c      	cmp	r4, r3
 8008500:	d303      	bcc.n	800850a <mem_trim+0x52>
 8008502:	4a3c      	ldr	r2, [pc, #240]	; (80085f4 <mem_trim+0x13c>)
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	4294      	cmp	r4, r2
 8008508:	d306      	bcc.n	8008518 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800850a:	f005 f949 	bl	800d7a0 <sys_arch_protect>
 800850e:	f005 f953 	bl	800d7b8 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8008512:	4620      	mov	r0, r4
 8008514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008518:	f1a4 0608 	sub.w	r6, r4, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800851c:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8008520:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008522:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8008524:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008526:	1bbf      	subs	r7, r7, r6
 8008528:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800852a:	42af      	cmp	r7, r5
 800852c:	d226      	bcs.n	800857c <mem_trim+0xc4>
 800852e:	4b32      	ldr	r3, [pc, #200]	; (80085f8 <mem_trim+0x140>)
 8008530:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008534:	4933      	ldr	r1, [pc, #204]	; (8008604 <mem_trim+0x14c>)
 8008536:	4832      	ldr	r0, [pc, #200]	; (8008600 <mem_trim+0x148>)
 8008538:	f006 fae4 	bl	800eb04 <iprintf>
 800853c:	e7c8      	b.n	80084d0 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800853e:	f105 0314 	add.w	r3, r5, #20
 8008542:	42bb      	cmp	r3, r7
 8008544:	d84f      	bhi.n	80085e6 <mem_trim+0x12e>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008546:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800854a:	f5b9 5fc0 	cmp.w	r9, #6144	; 0x1800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800854e:	441d      	add	r5, r3
 8008550:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008552:	d106      	bne.n	8008562 <mem_trim+0xaa>
 8008554:	4b28      	ldr	r3, [pc, #160]	; (80085f8 <mem_trim+0x140>)
 8008556:	f240 3216 	movw	r2, #790	; 0x316
 800855a:	492b      	ldr	r1, [pc, #172]	; (8008608 <mem_trim+0x150>)
 800855c:	4828      	ldr	r0, [pc, #160]	; (8008600 <mem_trim+0x148>)
 800855e:	f006 fad1 	bl	800eb04 <iprintf>
    if (mem2 < lfree) {
 8008562:	492a      	ldr	r1, [pc, #168]	; (800860c <mem_trim+0x154>)
  return (struct mem *)(void *)&ram[ptr];
 8008564:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 8008568:	6808      	ldr	r0, [r1, #0]
  return (struct mem *)(void *)&ram[ptr];
 800856a:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 800856c:	4290      	cmp	r0, r2
      lfree = mem2;
 800856e:	bf88      	it	hi
 8008570:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8008572:	2100      	movs	r1, #0
 8008574:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8008576:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800857a:	e02a      	b.n	80085d2 <mem_trim+0x11a>
  if (newsize == size) {
 800857c:	d0c9      	beq.n	8008512 <mem_trim+0x5a>
  LWIP_MEM_FREE_PROTECT();
 800857e:	4824      	ldr	r0, [pc, #144]	; (8008610 <mem_trim+0x158>)
 8008580:	f005 f8ef 	bl	800d762 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8008584:	f834 9c08 	ldrh.w	r9, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8008588:	f8d8 b000 	ldr.w	fp, [r8]
 800858c:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8008590:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1d2      	bne.n	800853e <mem_trim+0x86>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008598:	f5b9 5fc0 	cmp.w	r9, #6144	; 0x1800
 800859c:	d106      	bne.n	80085ac <mem_trim+0xf4>
 800859e:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <mem_trim+0x140>)
 80085a0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80085a4:	4918      	ldr	r1, [pc, #96]	; (8008608 <mem_trim+0x150>)
 80085a6:	4816      	ldr	r0, [pc, #88]	; (8008600 <mem_trim+0x148>)
 80085a8:	f006 faac 	bl	800eb04 <iprintf>
    if (lfree == mem2) {
 80085ac:	4a17      	ldr	r2, [pc, #92]	; (800860c <mem_trim+0x154>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80085ae:	f106 0308 	add.w	r3, r6, #8
    mem2->used = 0;
 80085b2:	2000      	movs	r0, #0
    next = mem2->next;
 80085b4:	f83b 1009 	ldrh.w	r1, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80085b8:	441d      	add	r5, r3
    if (lfree == mem2) {
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	4553      	cmp	r3, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80085be:	b2ad      	uxth	r5, r5
  return (struct mem *)(void *)&ram[ptr];
 80085c0:	bf02      	ittt	eq
 80085c2:	f8d8 3000 	ldreq.w	r3, [r8]
 80085c6:	195b      	addeq	r3, r3, r5
      lfree = ptr_to_mem(ptr2);
 80085c8:	6013      	streq	r3, [r2, #0]
  return (struct mem *)(void *)&ram[ptr];
 80085ca:	f8d8 3000 	ldr.w	r3, [r8]
 80085ce:	195a      	adds	r2, r3, r5
    mem2->used = 0;
 80085d0:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 80085d2:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 80085d4:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 80085d6:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80085da:	5b5a      	ldrh	r2, [r3, r5]
 80085dc:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      ptr_to_mem(mem2->next)->prev = ptr2;
 80085e0:	bf1c      	itt	ne
 80085e2:	189b      	addne	r3, r3, r2
 80085e4:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80085e6:	480a      	ldr	r0, [pc, #40]	; (8008610 <mem_trim+0x158>)
 80085e8:	f005 f8c0 	bl	800d76c <sys_mutex_unlock>
  return rmem;
 80085ec:	e791      	b.n	8008512 <mem_trim+0x5a>
 80085ee:	bf00      	nop
 80085f0:	20006d08 	.word	0x20006d08
 80085f4:	20006d0c 	.word	0x20006d0c
 80085f8:	08010b78 	.word	0x08010b78
 80085fc:	08010c5d 	.word	0x08010c5d
 8008600:	0800fff2 	.word	0x0800fff2
 8008604:	08010c74 	.word	0x08010c74
 8008608:	08010c94 	.word	0x08010c94
 800860c:	20006d00 	.word	0x20006d00
 8008610:	20006d04 	.word	0x20006d04

08008614 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008618:	b148      	cbz	r0, 800862e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800861a:	1cc5      	adds	r5, r0, #3
 800861c:	f025 0503 	bic.w	r5, r5, #3
 8008620:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8008622:	2d0b      	cmp	r5, #11
 8008624:	d905      	bls.n	8008632 <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008626:	f5b5 5fc0 	cmp.w	r5, #6144	; 0x1800
 800862a:	d903      	bls.n	8008634 <mem_malloc+0x20>
    return NULL;
 800862c:	2000      	movs	r0, #0
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8008632:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008634:	42a8      	cmp	r0, r5
 8008636:	d8f9      	bhi.n	800862c <mem_malloc+0x18>
  sys_mutex_lock(&mem_mutex);
 8008638:	4842      	ldr	r0, [pc, #264]	; (8008744 <mem_malloc+0x130>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800863a:	f06f 0707 	mvn.w	r7, #7
  sys_mutex_lock(&mem_mutex);
 800863e:	f005 f890 	bl	800d762 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8008642:	4941      	ldr	r1, [pc, #260]	; (8008748 <mem_malloc+0x134>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008644:	4b41      	ldr	r3, [pc, #260]	; (800874c <mem_malloc+0x138>)
 8008646:	f5c5 50c0 	rsb	r0, r5, #6144	; 0x1800
  return (mem_size_t)((u8_t *)mem - ram);
 800864a:	680a      	ldr	r2, [r1, #0]
 800864c:	4689      	mov	r9, r1
 800864e:	681e      	ldr	r6, [r3, #0]
 8008650:	4698      	mov	r8, r3
 8008652:	1ab6      	subs	r6, r6, r2
 8008654:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008656:	4286      	cmp	r6, r0
 8008658:	d303      	bcc.n	8008662 <mem_malloc+0x4e>
  sys_mutex_unlock(&mem_mutex);
 800865a:	483a      	ldr	r0, [pc, #232]	; (8008744 <mem_malloc+0x130>)
 800865c:	f005 f886 	bl	800d76c <sys_mutex_unlock>
 8008660:	e7e4      	b.n	800862c <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 8008662:	1994      	adds	r4, r2, r6
 8008664:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8008666:	7923      	ldrb	r3, [r4, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d168      	bne.n	800873e <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800866c:	1bbb      	subs	r3, r7, r6
 800866e:	440b      	add	r3, r1
      if ((!mem->used) &&
 8008670:	429d      	cmp	r5, r3
 8008672:	d864      	bhi.n	800873e <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008674:	f105 0214 	add.w	r2, r5, #20
 8008678:	4293      	cmp	r3, r2
 800867a:	d35a      	bcc.n	8008732 <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800867c:	f105 0708 	add.w	r7, r5, #8
 8008680:	4437      	add	r7, r6
 8008682:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008684:	f5b7 5fc0 	cmp.w	r7, #6144	; 0x1800
 8008688:	d106      	bne.n	8008698 <mem_malloc+0x84>
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <mem_malloc+0x13c>)
 800868c:	f240 3287 	movw	r2, #903	; 0x387
 8008690:	4930      	ldr	r1, [pc, #192]	; (8008754 <mem_malloc+0x140>)
 8008692:	4831      	ldr	r0, [pc, #196]	; (8008758 <mem_malloc+0x144>)
 8008694:	f006 fa36 	bl	800eb04 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008698:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 800869c:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800869e:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 80086a0:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 80086a2:	8821      	ldrh	r1, [r4, #0]
 80086a4:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 80086a6:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 80086a8:	2201      	movs	r2, #1
          mem->next = ptr2;
 80086aa:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
 80086ac:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80086ae:	5bda      	ldrh	r2, [r3, r7]
 80086b0:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80086b4:	d001      	beq.n	80086ba <mem_malloc+0xa6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80086b6:	4413      	add	r3, r2
 80086b8:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 80086ba:	f8d8 3000 	ldr.w	r3, [r8]
 80086be:	4e27      	ldr	r6, [pc, #156]	; (800875c <mem_malloc+0x148>)
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d113      	bne.n	80086ec <mem_malloc+0xd8>
          while (cur->used && cur != ram_end) {
 80086c4:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 80086c6:	4623      	mov	r3, r4
 80086c8:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 80086cc:	791a      	ldrb	r2, [r3, #4]
 80086ce:	b10a      	cbz	r2, 80086d4 <mem_malloc+0xc0>
 80086d0:	428b      	cmp	r3, r1
 80086d2:	d131      	bne.n	8008738 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80086d4:	428b      	cmp	r3, r1
          lfree = cur;
 80086d6:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80086da:	d007      	beq.n	80086ec <mem_malloc+0xd8>
 80086dc:	b132      	cbz	r2, 80086ec <mem_malloc+0xd8>
 80086de:	4b1c      	ldr	r3, [pc, #112]	; (8008750 <mem_malloc+0x13c>)
 80086e0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80086e4:	491e      	ldr	r1, [pc, #120]	; (8008760 <mem_malloc+0x14c>)
 80086e6:	481c      	ldr	r0, [pc, #112]	; (8008758 <mem_malloc+0x144>)
 80086e8:	f006 fa0c 	bl	800eb04 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80086ec:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 80086ee:	4815      	ldr	r0, [pc, #84]	; (8008744 <mem_malloc+0x130>)
 80086f0:	f005 f83c 	bl	800d76c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	4425      	add	r5, r4
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	d206      	bcs.n	800870a <mem_malloc+0xf6>
 80086fc:	4b14      	ldr	r3, [pc, #80]	; (8008750 <mem_malloc+0x13c>)
 80086fe:	f240 32ba 	movw	r2, #954	; 0x3ba
 8008702:	4918      	ldr	r1, [pc, #96]	; (8008764 <mem_malloc+0x150>)
 8008704:	4814      	ldr	r0, [pc, #80]	; (8008758 <mem_malloc+0x144>)
 8008706:	f006 f9fd 	bl	800eb04 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800870a:	07a3      	lsls	r3, r4, #30
 800870c:	d00d      	beq.n	800872a <mem_malloc+0x116>
 800870e:	4b10      	ldr	r3, [pc, #64]	; (8008750 <mem_malloc+0x13c>)
 8008710:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008714:	4914      	ldr	r1, [pc, #80]	; (8008768 <mem_malloc+0x154>)
 8008716:	4810      	ldr	r0, [pc, #64]	; (8008758 <mem_malloc+0x144>)
 8008718:	f006 f9f4 	bl	800eb04 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <mem_malloc+0x13c>)
 800871e:	f240 32be 	movw	r2, #958	; 0x3be
 8008722:	4912      	ldr	r1, [pc, #72]	; (800876c <mem_malloc+0x158>)
 8008724:	480c      	ldr	r0, [pc, #48]	; (8008758 <mem_malloc+0x144>)
 8008726:	f006 f9ed 	bl	800eb04 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800872a:	f104 0008 	add.w	r0, r4, #8
 800872e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	7123      	strb	r3, [r4, #4]
 8008736:	e7c0      	b.n	80086ba <mem_malloc+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	4403      	add	r3, r0
 800873c:	e7c6      	b.n	80086cc <mem_malloc+0xb8>
         ptr = ptr_to_mem(ptr)->next) {
 800873e:	460e      	mov	r6, r1
 8008740:	e789      	b.n	8008656 <mem_malloc+0x42>
 8008742:	bf00      	nop
 8008744:	20006d04 	.word	0x20006d04
 8008748:	20006d08 	.word	0x20006d08
 800874c:	20006d00 	.word	0x20006d00
 8008750:	08010b78 	.word	0x08010b78
 8008754:	08010c94 	.word	0x08010c94
 8008758:	0800fff2 	.word	0x0800fff2
 800875c:	20006d0c 	.word	0x20006d0c
 8008760:	08010bc2 	.word	0x08010bc2
 8008764:	08010bdb 	.word	0x08010bdb
 8008768:	08010c0b 	.word	0x08010c0b
 800876c:	08010c3a 	.word	0x08010c3a

08008770 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008774:	f005 f814 	bl	800d7a0 <sys_arch_protect>
 8008778:	4605      	mov	r5, r0

  memp = *desc->tab;
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800877e:	b15c      	cbz	r4, 8008798 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008780:	6822      	ldr	r2, [r4, #0]
 8008782:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008784:	07a3      	lsls	r3, r4, #30
 8008786:	d006      	beq.n	8008796 <do_memp_malloc_pool.isra.0+0x26>
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <do_memp_malloc_pool.isra.0+0x30>)
 800878a:	f240 1219 	movw	r2, #281	; 0x119
 800878e:	4905      	ldr	r1, [pc, #20]	; (80087a4 <do_memp_malloc_pool.isra.0+0x34>)
 8008790:	4805      	ldr	r0, [pc, #20]	; (80087a8 <do_memp_malloc_pool.isra.0+0x38>)
 8008792:	f006 f9b7 	bl	800eb04 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008796:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008798:	f005 f80e 	bl	800d7b8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800879c:	4620      	mov	r0, r4
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	08010cc5 	.word	0x08010cc5
 80087a4:	08010cf5 	.word	0x08010cf5
 80087a8:	0800fff2 	.word	0x0800fff2

080087ac <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 80087ac:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80087ae:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80087b4:	d006      	beq.n	80087c4 <do_memp_free_pool.isra.1+0x18>
 80087b6:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <do_memp_free_pool.isra.1+0x2c>)
 80087b8:	f240 126d 	movw	r2, #365	; 0x16d
 80087bc:	4907      	ldr	r1, [pc, #28]	; (80087dc <do_memp_free_pool.isra.1+0x30>)
 80087be:	4808      	ldr	r0, [pc, #32]	; (80087e0 <do_memp_free_pool.isra.1+0x34>)
 80087c0:	f006 f9a0 	bl	800eb04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80087c4:	f004 ffec 	bl	800d7a0 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80087ce:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80087d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80087d4:	f004 bff0 	b.w	800d7b8 <sys_arch_unprotect>
 80087d8:	08010cc5 	.word	0x08010cc5
 80087dc:	08010ca5 	.word	0x08010ca5
 80087e0:	0800fff2 	.word	0x0800fff2

080087e4 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80087e4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80087e6:	2200      	movs	r2, #0
 80087e8:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80087ea:	3303      	adds	r3, #3
{
 80087ec:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80087ee:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80087f2:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80087f4:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80087f6:	42a2      	cmp	r2, r4
 80087f8:	db00      	blt.n	80087fc <memp_init_pool+0x18>
}
 80087fa:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80087fc:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80087fe:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8008800:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008802:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8008804:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008806:	442b      	add	r3, r5
 8008808:	e7f5      	b.n	80087f6 <memp_init_pool+0x12>
	...

0800880c <memp_init>:
{
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8008810:	4d04      	ldr	r5, [pc, #16]	; (8008824 <memp_init+0x18>)
 8008812:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8008816:	3401      	adds	r4, #1
 8008818:	f7ff ffe4 	bl	80087e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800881c:	2c0e      	cmp	r4, #14
 800881e:	d1f8      	bne.n	8008812 <memp_init+0x6>
}
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	bf00      	nop
 8008824:	08010df8 	.word	0x08010df8

08008828 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008828:	280d      	cmp	r0, #13
{
 800882a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800882c:	d807      	bhi.n	800883e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800882e:	4b08      	ldr	r3, [pc, #32]	; (8008850 <memp_malloc+0x28>)
 8008830:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8008834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008838:	3008      	adds	r0, #8
 800883a:	f7ff bf99 	b.w	8008770 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <memp_malloc+0x2c>)
 8008840:	f240 1257 	movw	r2, #343	; 0x157
 8008844:	4904      	ldr	r1, [pc, #16]	; (8008858 <memp_malloc+0x30>)
 8008846:	4805      	ldr	r0, [pc, #20]	; (800885c <memp_malloc+0x34>)
 8008848:	f006 f95c 	bl	800eb04 <iprintf>
}
 800884c:	2000      	movs	r0, #0
 800884e:	bd08      	pop	{r3, pc}
 8008850:	08010df8 	.word	0x08010df8
 8008854:	08010cc5 	.word	0x08010cc5
 8008858:	08010ddb 	.word	0x08010ddb
 800885c:	0800fff2 	.word	0x0800fff2

08008860 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008860:	280d      	cmp	r0, #13
 8008862:	d906      	bls.n	8008872 <memp_free+0x12>
 8008864:	4b07      	ldr	r3, [pc, #28]	; (8008884 <memp_free+0x24>)
 8008866:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800886a:	4907      	ldr	r1, [pc, #28]	; (8008888 <memp_free+0x28>)
 800886c:	4807      	ldr	r0, [pc, #28]	; (800888c <memp_free+0x2c>)
 800886e:	f006 b949 	b.w	800eb04 <iprintf>

  if (mem == NULL) {
 8008872:	b129      	cbz	r1, 8008880 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <memp_free+0x30>)
 8008876:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800887a:	3008      	adds	r0, #8
 800887c:	f7ff bf96 	b.w	80087ac <do_memp_free_pool.isra.1>
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	08010cc5 	.word	0x08010cc5
 8008888:	08010dc0 	.word	0x08010dc0
 800888c:	0800fff2 	.word	0x0800fff2
 8008890:	08010df8 	.word	0x08010df8

08008894 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008894:	f06f 000b 	mvn.w	r0, #11
 8008898:	4770      	bx	lr
	...

0800889c <netif_issue_reports>:
{
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80088a0:	4604      	mov	r4, r0
 80088a2:	b930      	cbnz	r0, 80088b2 <netif_issue_reports+0x16>
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <netif_issue_reports+0x3c>)
 80088a6:	f240 326d 	movw	r2, #877	; 0x36d
 80088aa:	490c      	ldr	r1, [pc, #48]	; (80088dc <netif_issue_reports+0x40>)
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <netif_issue_reports+0x44>)
 80088ae:	f006 f929 	bl	800eb04 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80088b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80088b6:	f003 0205 	and.w	r2, r3, #5
 80088ba:	2a05      	cmp	r2, #5
 80088bc:	d10b      	bne.n	80088d6 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088be:	07ea      	lsls	r2, r5, #31
 80088c0:	d509      	bpl.n	80088d6 <netif_issue_reports+0x3a>
 80088c2:	6862      	ldr	r2, [r4, #4]
 80088c4:	b13a      	cbz	r2, 80088d6 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80088c6:	071b      	lsls	r3, r3, #28
 80088c8:	d505      	bpl.n	80088d6 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80088ca:	1d21      	adds	r1, r4, #4
 80088cc:	4620      	mov	r0, r4
}
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80088d2:	f7fe bb8b 	b.w	8006fec <etharp_request>
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	08010ebd 	.word	0x08010ebd
 80088dc:	08010eee 	.word	0x08010eee
 80088e0:	0800fff2 	.word	0x0800fff2

080088e4 <netif_do_set_ipaddr>:
{
 80088e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e6:	4606      	mov	r6, r0
 80088e8:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80088ea:	460f      	mov	r7, r1
 80088ec:	b931      	cbnz	r1, 80088fc <netif_do_set_ipaddr+0x18>
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <netif_do_set_ipaddr+0x60>)
 80088f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80088f4:	4914      	ldr	r1, [pc, #80]	; (8008948 <netif_do_set_ipaddr+0x64>)
 80088f6:	4815      	ldr	r0, [pc, #84]	; (800894c <netif_do_set_ipaddr+0x68>)
 80088f8:	f006 f904 	bl	800eb04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80088fc:	b934      	cbnz	r4, 800890c <netif_do_set_ipaddr+0x28>
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <netif_do_set_ipaddr+0x60>)
 8008900:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008904:	4910      	ldr	r1, [pc, #64]	; (8008948 <netif_do_set_ipaddr+0x64>)
 8008906:	4811      	ldr	r0, [pc, #68]	; (800894c <netif_do_set_ipaddr+0x68>)
 8008908:	f006 f8fc 	bl	800eb04 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800890c:	6873      	ldr	r3, [r6, #4]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d014      	beq.n	800893e <netif_do_set_ipaddr+0x5a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008914:	ad02      	add	r5, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008916:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008918:	4620      	mov	r0, r4
    *ip_2_ip4(&new_addr) = *ipaddr;
 800891a:	f845 2d04 	str.w	r2, [r5, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800891e:	4629      	mov	r1, r5
 8008920:	f001 f970 	bl	8009c04 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008924:	4629      	mov	r1, r5
 8008926:	4620      	mov	r0, r4
 8008928:	f004 fe1e 	bl	800d568 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800892c:	683b      	ldr	r3, [r7, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800892e:	4630      	mov	r0, r6
 8008930:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008932:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008934:	f7ff ffb2 	bl	800889c <netif_issue_reports>
    return 1; /* address changed */
 8008938:	2001      	movs	r0, #1
}
 800893a:	b003      	add	sp, #12
 800893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 800893e:	2000      	movs	r0, #0
 8008940:	e7fb      	b.n	800893a <netif_do_set_ipaddr+0x56>
 8008942:	bf00      	nop
 8008944:	08010ebd 	.word	0x08010ebd
 8008948:	08010ead 	.word	0x08010ead
 800894c:	0800fff2 	.word	0x0800fff2

08008950 <netif_init>:
{
 8008950:	4770      	bx	lr
	...

08008954 <netif_set_addr>:
{
 8008954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8008956:	4d14      	ldr	r5, [pc, #80]	; (80089a8 <netif_set_addr+0x54>)
{
 8008958:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800895a:	2900      	cmp	r1, #0
 800895c:	bf14      	ite	ne
 800895e:	460e      	movne	r6, r1
 8008960:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8008962:	2a00      	cmp	r2, #0
 8008964:	bf14      	ite	ne
 8008966:	4617      	movne	r7, r2
 8008968:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf18      	it	ne
 800896e:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	b193      	cbz	r3, 800899a <netif_set_addr+0x46>
 8008974:	2300      	movs	r3, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	68a1      	ldr	r1, [r4, #8]
 800897a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800897c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800897e:	bf18      	it	ne
 8008980:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008982:	682a      	ldr	r2, [r5, #0]
 8008984:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008986:	bf18      	it	ne
 8008988:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800898a:	b923      	cbnz	r3, 8008996 <netif_set_addr+0x42>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800898c:	aa01      	add	r2, sp, #4
 800898e:	4631      	mov	r1, r6
 8008990:	4620      	mov	r0, r4
 8008992:	f7ff ffa7 	bl	80088e4 <netif_do_set_ipaddr>
}
 8008996:	b003      	add	sp, #12
 8008998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800899a:	aa01      	add	r2, sp, #4
 800899c:	4631      	mov	r1, r6
 800899e:	f7ff ffa1 	bl	80088e4 <netif_do_set_ipaddr>
  remove = ip4_addr_isany(ipaddr);
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7e7      	b.n	8008976 <netif_set_addr+0x22>
 80089a6:	bf00      	nop
 80089a8:	080108a4 	.word	0x080108a4

080089ac <netif_add>:
{
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	469c      	mov	ip, r3
 80089b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80089b4:	4604      	mov	r4, r0
 80089b6:	b948      	cbnz	r0, 80089cc <netif_add+0x20>
 80089b8:	4b3e      	ldr	r3, [pc, #248]	; (8008ab4 <netif_add+0x108>)
 80089ba:	f240 1227 	movw	r2, #295	; 0x127
 80089be:	493e      	ldr	r1, [pc, #248]	; (8008ab8 <netif_add+0x10c>)
 80089c0:	483e      	ldr	r0, [pc, #248]	; (8008abc <netif_add+0x110>)
 80089c2:	f006 f89f 	bl	800eb04 <iprintf>
}
 80089c6:	4620      	mov	r0, r4
 80089c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80089cc:	b947      	cbnz	r7, 80089e0 <netif_add+0x34>
 80089ce:	4b39      	ldr	r3, [pc, #228]	; (8008ab4 <netif_add+0x108>)
 80089d0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80089d4:	493a      	ldr	r1, [pc, #232]	; (8008ac0 <netif_add+0x114>)
 80089d6:	463c      	mov	r4, r7
 80089d8:	4838      	ldr	r0, [pc, #224]	; (8008abc <netif_add+0x110>)
 80089da:	f006 f893 	bl	800eb04 <iprintf>
 80089de:	e7f2      	b.n	80089c6 <netif_add+0x1a>
  netif->state = state;
 80089e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80089e2:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 80089e4:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8008ad0 <netif_add+0x124>
  netif->num = netif_num;
 80089e8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008ad4 <netif_add+0x128>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80089ec:	4e35      	ldr	r6, [pc, #212]	; (8008ac4 <netif_add+0x118>)
  netif->output = netif_null_output_ip4;
 80089ee:	f8c0 e014 	str.w	lr, [r0, #20]
  netif->state = state;
 80089f2:	61c3      	str	r3, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80089f4:	42aa      	cmp	r2, r5
 80089f6:	bf08      	it	eq
 80089f8:	4632      	moveq	r2, r6
  netif->num = netif_num;
 80089fa:	f898 e000 	ldrb.w	lr, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80089fe:	42a9      	cmp	r1, r5
 8008a00:	bf08      	it	eq
 8008a02:	4631      	moveq	r1, r6
  netif->input = input;
 8008a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 8008a06:	f880 e030 	strb.w	lr, [r0, #48]	; 0x30
  netif->input = input;
 8008a0a:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a0c:	45ac      	cmp	ip, r5
 8008a0e:	bf14      	ite	ne
 8008a10:	4663      	movne	r3, ip
 8008a12:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008a14:	6045      	str	r5, [r0, #4]
 8008a16:	4646      	mov	r6, r8
  ip_addr_set_zero_ip4(&netif->netmask);
 8008a18:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008a1a:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8008a1c:	8485      	strh	r5, [r0, #36]	; 0x24
  netif->flags = 0;
 8008a1e:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008a22:	6205      	str	r5, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a24:	f7ff ff96 	bl	8008954 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8008a28:	4620      	mov	r0, r4
 8008a2a:	47b8      	blx	r7
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d13e      	bne.n	8008aae <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a30:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008ad8 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a34:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8008ab4 <netif_add+0x108>
 8008a38:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 8008a3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      num_netifs = 0;
 8008a3e:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a40:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 8008a44:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a46:	f8df b074 	ldr.w	fp, [pc, #116]	; 8008abc <netif_add+0x110>
        netif->num = 0;
 8008a4a:	bf04      	itt	eq
 8008a4c:	2300      	moveq	r3, #0
 8008a4e:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a52:	b955      	cbnz	r5, 8008a6a <netif_add+0xbe>
  if (netif->num == 254) {
 8008a54:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008a58:	2bfe      	cmp	r3, #254	; 0xfe
 8008a5a:	d125      	bne.n	8008aa8 <netif_add+0xfc>
    netif_num = 0;
 8008a5c:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8008a64:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8008a68:	e7ad      	b.n	80089c6 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a6a:	42a5      	cmp	r5, r4
 8008a6c:	d106      	bne.n	8008a7c <netif_add+0xd0>
 8008a6e:	4653      	mov	r3, sl
 8008a70:	f240 128b 	movw	r2, #395	; 0x18b
 8008a74:	4914      	ldr	r1, [pc, #80]	; (8008ac8 <netif_add+0x11c>)
 8008a76:	4658      	mov	r0, fp
 8008a78:	f006 f844 	bl	800eb04 <iprintf>
        num_netifs++;
 8008a7c:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008a7e:	2fff      	cmp	r7, #255	; 0xff
 8008a80:	dd06      	ble.n	8008a90 <netif_add+0xe4>
 8008a82:	4653      	mov	r3, sl
 8008a84:	f240 128d 	movw	r2, #397	; 0x18d
 8008a88:	4910      	ldr	r1, [pc, #64]	; (8008acc <netif_add+0x120>)
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f006 f83a 	bl	800eb04 <iprintf>
        if (netif2->num == netif->num) {
 8008a90:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8008a94:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d103      	bne.n	8008aa4 <netif_add+0xf8>
          netif->num++;
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8008aa2:	e7ca      	b.n	8008a3a <netif_add+0x8e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008aa4:	682d      	ldr	r5, [r5, #0]
 8008aa6:	e7d4      	b.n	8008a52 <netif_add+0xa6>
    netif_num = (u8_t)(netif->num + 1);
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	7033      	strb	r3, [r6, #0]
 8008aac:	e7d7      	b.n	8008a5e <netif_add+0xb2>
    return NULL;
 8008aae:	462c      	mov	r4, r5
 8008ab0:	e789      	b.n	80089c6 <netif_add+0x1a>
 8008ab2:	bf00      	nop
 8008ab4:	08010ebd 	.word	0x08010ebd
 8008ab8:	08010e30 	.word	0x08010e30
 8008abc:	0800fff2 	.word	0x0800fff2
 8008ac0:	08010e49 	.word	0x08010e49
 8008ac4:	080108a4 	.word	0x080108a4
 8008ac8:	08010e6b 	.word	0x08010e6b
 8008acc:	08010e7f 	.word	0x08010e7f
 8008ad0:	08008895 	.word	0x08008895
 8008ad4:	20006d48 	.word	0x20006d48
 8008ad8:	2000becc 	.word	0x2000becc

08008adc <netif_set_default>:
  netif_default = netif;
 8008adc:	4b01      	ldr	r3, [pc, #4]	; (8008ae4 <netif_set_default+0x8>)
 8008ade:	6018      	str	r0, [r3, #0]
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	2000bed0 	.word	0x2000bed0

08008ae8 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008ae8:	b930      	cbnz	r0, 8008af8 <netif_set_up+0x10>
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <netif_set_up+0x28>)
 8008aec:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008af0:	4908      	ldr	r1, [pc, #32]	; (8008b14 <netif_set_up+0x2c>)
 8008af2:	4809      	ldr	r0, [pc, #36]	; (8008b18 <netif_set_up+0x30>)
 8008af4:	f006 b806 	b.w	800eb04 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008af8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008afc:	07d9      	lsls	r1, r3, #31
 8008afe:	d406      	bmi.n	8008b0e <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008b00:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008b04:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008b06:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008b0a:	f7ff bec7 	b.w	800889c <netif_issue_reports>
 8008b0e:	4770      	bx	lr
 8008b10:	08010ebd 	.word	0x08010ebd
 8008b14:	08010f2f 	.word	0x08010f2f
 8008b18:	0800fff2 	.word	0x0800fff2

08008b1c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008b1c:	b930      	cbnz	r0, 8008b2c <netif_set_down+0x10>
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <netif_set_down+0x2c>)
 8008b20:	f240 329b 	movw	r2, #923	; 0x39b
 8008b24:	4909      	ldr	r1, [pc, #36]	; (8008b4c <netif_set_down+0x30>)
 8008b26:	480a      	ldr	r0, [pc, #40]	; (8008b50 <netif_set_down+0x34>)
 8008b28:	f005 bfec 	b.w	800eb04 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8008b2c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008b30:	07d9      	lsls	r1, r3, #31
 8008b32:	d507      	bpl.n	8008b44 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008b34:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b38:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008b3a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b3e:	d501      	bpl.n	8008b44 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8008b40:	f7fe b99a 	b.w	8006e78 <etharp_cleanup_netif>
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	08010ebd 	.word	0x08010ebd
 8008b4c:	08010f11 	.word	0x08010f11
 8008b50:	0800fff2 	.word	0x0800fff2

08008b54 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008b54:	b150      	cbz	r0, 8008b6c <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <netif_get_by_index+0x1c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	b12b      	cbz	r3, 8008b68 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 8008b5c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008b60:	3201      	adds	r2, #1
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	4290      	cmp	r0, r2
 8008b66:	d1f7      	bne.n	8008b58 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	4770      	bx	lr
  return NULL;
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	e7fb      	b.n	8008b68 <netif_get_by_index+0x14>
 8008b70:	2000becc 	.word	0x2000becc

08008b74 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008b74:	b110      	cbz	r0, 8008b7c <pbuf_skip_const+0x8>
 8008b76:	8943      	ldrh	r3, [r0, #10]
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	d202      	bcs.n	8008b82 <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 8008b7c:	b102      	cbz	r2, 8008b80 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 8008b7e:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8008b80:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 8008b82:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8008b84:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8008b86:	b289      	uxth	r1, r1
 8008b88:	e7f4      	b.n	8008b74 <pbuf_skip_const>
	...

08008b8c <pbuf_free_ooseq_callback>:
{
 8008b8c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008b8e:	f004 fe07 	bl	800d7a0 <sys_arch_protect>
 8008b92:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <pbuf_free_ooseq_callback+0x28>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	f004 fe0e 	bl	800d7b8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <pbuf_free_ooseq_callback+0x2c>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	b900      	cbnz	r0, 8008ba4 <pbuf_free_ooseq_callback+0x18>
}
 8008ba2:	bd08      	pop	{r3, pc}
    if (pcb->ooseq != NULL) {
 8008ba4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008ba6:	b11b      	cbz	r3, 8008bb0 <pbuf_free_ooseq_callback+0x24>
}
 8008ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8008bac:	f000 bee6 	b.w	800997c <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008bb0:	68c0      	ldr	r0, [r0, #12]
 8008bb2:	e7f5      	b.n	8008ba0 <pbuf_free_ooseq_callback+0x14>
 8008bb4:	2000bed4 	.word	0x2000bed4
 8008bb8:	2000bedc 	.word	0x2000bedc

08008bbc <pbuf_add_header_impl>:
{
 8008bbc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008bbe:	b968      	cbnz	r0, 8008bdc <pbuf_add_header_impl+0x20>
 8008bc0:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <pbuf_add_header_impl+0x58>)
 8008bc2:	f240 12df 	movw	r2, #479	; 0x1df
 8008bc6:	4914      	ldr	r1, [pc, #80]	; (8008c18 <pbuf_add_header_impl+0x5c>)
 8008bc8:	4814      	ldr	r0, [pc, #80]	; (8008c1c <pbuf_add_header_impl+0x60>)
 8008bca:	f005 ff9b 	bl	800eb04 <iprintf>
    return 1;
 8008bce:	2001      	movs	r0, #1
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
    if (force) {
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d0fb      	beq.n	8008bce <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8008bd6:	6842      	ldr	r2, [r0, #4]
 8008bd8:	1a51      	subs	r1, r2, r1
 8008bda:	e013      	b.n	8008c04 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008bdc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008be0:	d2f5      	bcs.n	8008bce <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8008be2:	b1a1      	cbz	r1, 8008c0e <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 8008be4:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008be6:	8903      	ldrh	r3, [r0, #8]
 8008be8:	4423      	add	r3, r4
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	429c      	cmp	r4, r3
 8008bee:	d8ee      	bhi.n	8008bce <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008bf0:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	daec      	bge.n	8008bd2 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8008bf8:	6842      	ldr	r2, [r0, #4]
 8008bfa:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008bfc:	f100 0210 	add.w	r2, r0, #16
 8008c00:	4291      	cmp	r1, r2
 8008c02:	d3e4      	bcc.n	8008bce <pbuf_add_header_impl+0x12>
  p->len = (u16_t)(p->len + increment_magnitude);
 8008c04:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8008c06:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008c08:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008c0a:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008c0c:	8144      	strh	r4, [r0, #10]
  return 0;
 8008c0e:	2000      	movs	r0, #0
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	08010f4b 	.word	0x08010f4b
 8008c18:	0801115d 	.word	0x0801115d
 8008c1c:	0800fff2 	.word	0x0800fff2

08008c20 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c20:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008c24:	2b01      	cmp	r3, #1
{
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c2e:	d006      	beq.n	8008c3e <pbuf_alloc_reference+0x1e>
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <pbuf_alloc_reference+0x3c>)
 8008c32:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008c36:	490a      	ldr	r1, [pc, #40]	; (8008c60 <pbuf_alloc_reference+0x40>)
 8008c38:	480a      	ldr	r0, [pc, #40]	; (8008c64 <pbuf_alloc_reference+0x44>)
 8008c3a:	f005 ff63 	bl	800eb04 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008c3e:	200c      	movs	r0, #12
 8008c40:	f7ff fdf2 	bl	8008828 <memp_malloc>
  if (p == NULL) {
 8008c44:	b148      	cbz	r0, 8008c5a <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 8008c46:	2300      	movs	r3, #0
  p->ref = 1;
 8008c48:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 8008c4a:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8008c4c:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8008c4e:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8008c50:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008c52:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008c54:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8008c56:	e880 0048 	stmia.w	r0, {r3, r6}
}
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	08010f4b 	.word	0x08010f4b
 8008c60:	08010f96 	.word	0x08010f96
 8008c64:	0800fff2 	.word	0x0800fff2

08008c68 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c68:	3003      	adds	r0, #3
 8008c6a:	f020 0003 	bic.w	r0, r0, #3
{
 8008c6e:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c70:	180e      	adds	r6, r1, r0
 8008c72:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8008c76:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c78:	42ae      	cmp	r6, r5
 8008c7a:	d80e      	bhi.n	8008c9a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8008c7c:	b104      	cbz	r4, 8008c80 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008c7e:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008c80:	4618      	mov	r0, r3
  p->next = NULL;
 8008c82:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 8008c84:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8008c86:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 8008c88:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 8008c8a:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8008c8c:	2201      	movs	r2, #1
  p->len = len;
 8008c8e:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 8008c90:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008c92:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8008c94:	e880 0018 	stmia.w	r0, {r3, r4}
  return &p->pbuf;
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8008c9a:	2000      	movs	r0, #0
}
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}

08008c9e <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f7ff bf8c 	b.w	8008bbc <pbuf_add_header_impl>

08008ca4 <pbuf_remove_header>:
{
 8008ca4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008ca6:	b990      	cbnz	r0, 8008cce <pbuf_remove_header+0x2a>
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <pbuf_remove_header+0x48>)
 8008caa:	f240 224b 	movw	r2, #587	; 0x24b
 8008cae:	4910      	ldr	r1, [pc, #64]	; (8008cf0 <pbuf_remove_header+0x4c>)
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008cb0:	4810      	ldr	r0, [pc, #64]	; (8008cf4 <pbuf_remove_header+0x50>)
 8008cb2:	f005 ff27 	bl	800eb04 <iprintf>
    return 1;
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	bd10      	pop	{r4, pc}
  p->len = (u16_t)(p->len - increment_magnitude);
 8008cba:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cbc:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008cbe:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cc0:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008cc2:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cc4:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	8103      	strh	r3, [r0, #8]
  return 0;
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008cce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008cd2:	d2f0      	bcs.n	8008cb6 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d0f8      	beq.n	8008cca <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8008cd8:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008cda:	8943      	ldrh	r3, [r0, #10]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d9ec      	bls.n	8008cba <pbuf_remove_header+0x16>
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <pbuf_remove_header+0x48>)
 8008ce2:	f240 2255 	movw	r2, #597	; 0x255
 8008ce6:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <pbuf_remove_header+0x54>)
 8008ce8:	e7e2      	b.n	8008cb0 <pbuf_remove_header+0xc>
 8008cea:	bf00      	nop
 8008cec:	08010f4b 	.word	0x08010f4b
 8008cf0:	0801115d 	.word	0x0801115d
 8008cf4:	0800fff2 	.word	0x0800fff2
 8008cf8:	080111ad 	.word	0x080111ad

08008cfc <pbuf_header_force>:
  if (header_size_increment < 0) {
 8008cfc:	1e0b      	subs	r3, r1, #0
 8008cfe:	da02      	bge.n	8008d06 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008d00:	4259      	negs	r1, r3
 8008d02:	f7ff bfcf 	b.w	8008ca4 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008d06:	2201      	movs	r2, #1
 8008d08:	f7ff bf58 	b.w	8008bbc <pbuf_add_header_impl>

08008d0c <pbuf_free>:
{
 8008d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (p == NULL) {
 8008d10:	4604      	mov	r4, r0
 8008d12:	b378      	cbz	r0, 8008d74 <pbuf_free+0x68>
 8008d14:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d16:	4f2b      	ldr	r7, [pc, #172]	; (8008dc4 <pbuf_free+0xb8>)
 8008d18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008dd8 <pbuf_free+0xcc>
 8008d1c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8008dd0 <pbuf_free+0xc4>
 8008d20:	fa5f f986 	uxtb.w	r9, r6
  while (p != NULL) {
 8008d24:	b374      	cbz	r4, 8008d84 <pbuf_free+0x78>
    SYS_ARCH_PROTECT(old_level);
 8008d26:	f004 fd3b 	bl	800d7a0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d2a:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8008d2c:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d2e:	b933      	cbnz	r3, 8008d3e <pbuf_free+0x32>
 8008d30:	463b      	mov	r3, r7
 8008d32:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008d36:	4651      	mov	r1, sl
 8008d38:	4640      	mov	r0, r8
 8008d3a:	f005 fee3 	bl	800eb04 <iprintf>
    ref = --(p->ref);
 8008d3e:	7ba5      	ldrb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008d40:	4658      	mov	r0, fp
    ref = --(p->ref);
 8008d42:	3d01      	subs	r5, #1
 8008d44:	b2ed      	uxtb	r5, r5
 8008d46:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008d48:	f004 fd36 	bl	800d7b8 <sys_arch_unprotect>
    if (ref == 0) {
 8008d4c:	b9d5      	cbnz	r5, 8008d84 <pbuf_free+0x78>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008d4e:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8008d50:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d519      	bpl.n	8008d8a <pbuf_free+0x7e>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	b933      	cbnz	r3, 8008d68 <pbuf_free+0x5c>
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008d60:	4919      	ldr	r1, [pc, #100]	; (8008dc8 <pbuf_free+0xbc>)
 8008d62:	4640      	mov	r0, r8
 8008d64:	f005 fece 	bl	800eb04 <iprintf>
        pc->custom_free_function(p);
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4798      	blx	r3
 8008d6e:	3601      	adds	r6, #1
      p = q;
 8008d70:	462c      	mov	r4, r5
 8008d72:	e7d5      	b.n	8008d20 <pbuf_free+0x14>
    return 0;
 8008d74:	46a1      	mov	r9, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8008d76:	4b13      	ldr	r3, [pc, #76]	; (8008dc4 <pbuf_free+0xb8>)
 8008d78:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008d7c:	4913      	ldr	r1, [pc, #76]	; (8008dcc <pbuf_free+0xc0>)
 8008d7e:	4814      	ldr	r0, [pc, #80]	; (8008dd0 <pbuf_free+0xc4>)
 8008d80:	f005 fec0 	bl	800eb04 <iprintf>
}
 8008d84:	4648      	mov	r0, r9
 8008d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      alloc_src = pbuf_get_allocsrc(p);
 8008d8a:	7b23      	ldrb	r3, [r4, #12]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d104      	bne.n	8008d9e <pbuf_free+0x92>
          memp_free(MEMP_PBUF_POOL, p);
 8008d94:	4621      	mov	r1, r4
 8008d96:	200d      	movs	r0, #13
          memp_free(MEMP_PBUF, p);
 8008d98:	f7ff fd62 	bl	8008860 <memp_free>
 8008d9c:	e7e7      	b.n	8008d6e <pbuf_free+0x62>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d102      	bne.n	8008da8 <pbuf_free+0x9c>
          memp_free(MEMP_PBUF, p);
 8008da2:	4621      	mov	r1, r4
 8008da4:	200c      	movs	r0, #12
 8008da6:	e7f7      	b.n	8008d98 <pbuf_free+0x8c>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008da8:	b91b      	cbnz	r3, 8008db2 <pbuf_free+0xa6>
          mem_free(p);
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff faaa 	bl	8008304 <mem_free>
 8008db0:	e7dd      	b.n	8008d6e <pbuf_free+0x62>
          LWIP_ASSERT("invalid pbuf type", 0);
 8008db2:	463b      	mov	r3, r7
 8008db4:	f240 320f 	movw	r2, #783	; 0x30f
 8008db8:	4906      	ldr	r1, [pc, #24]	; (8008dd4 <pbuf_free+0xc8>)
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f005 fea2 	bl	800eb04 <iprintf>
 8008dc0:	e7d5      	b.n	8008d6e <pbuf_free+0x62>
 8008dc2:	bf00      	nop
 8008dc4:	08010f4b 	.word	0x08010f4b
 8008dc8:	0801111c 	.word	0x0801111c
 8008dcc:	0801115d 	.word	0x0801115d
 8008dd0:	0800fff2 	.word	0x0800fff2
 8008dd4:	0801113d 	.word	0x0801113d
 8008dd8:	08011106 	.word	0x08011106

08008ddc <pbuf_alloc>:
  switch (type) {
 8008ddc:	2a41      	cmp	r2, #65	; 0x41
{
 8008dde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de2:	4607      	mov	r7, r0
 8008de4:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8008de6:	b285      	uxth	r5, r0
  switch (type) {
 8008de8:	d034      	beq.n	8008e54 <pbuf_alloc+0x78>
 8008dea:	d809      	bhi.n	8008e00 <pbuf_alloc+0x24>
 8008dec:	2a01      	cmp	r2, #1
 8008dee:	d031      	beq.n	8008e54 <pbuf_alloc+0x78>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008df0:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <pbuf_alloc+0x118>)
 8008df2:	f240 1227 	movw	r2, #295	; 0x127
 8008df6:	4940      	ldr	r1, [pc, #256]	; (8008ef8 <pbuf_alloc+0x11c>)
 8008df8:	4840      	ldr	r0, [pc, #256]	; (8008efc <pbuf_alloc+0x120>)
 8008dfa:	f005 fe83 	bl	800eb04 <iprintf>
 8008dfe:	e04e      	b.n	8008e9e <pbuf_alloc+0xc2>
  switch (type) {
 8008e00:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8008e04:	d02c      	beq.n	8008e60 <pbuf_alloc+0x84>
 8008e06:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8008e0a:	d1f1      	bne.n	8008df0 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008e0c:	3503      	adds	r5, #3
 8008e0e:	1ccb      	adds	r3, r1, #3
 8008e10:	f025 0503 	bic.w	r5, r5, #3
 8008e14:	f023 0303 	bic.w	r3, r3, #3
 8008e18:	441d      	add	r5, r3
 8008e1a:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e1c:	f105 0010 	add.w	r0, r5, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e20:	429d      	cmp	r5, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e22:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e24:	d33b      	bcc.n	8008e9e <pbuf_alloc+0xc2>
 8008e26:	4283      	cmp	r3, r0
 8008e28:	d839      	bhi.n	8008e9e <pbuf_alloc+0xc2>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008e2a:	f7ff fbf3 	bl	8008614 <mem_malloc>
      if (p == NULL) {
 8008e2e:	4604      	mov	r4, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d05a      	beq.n	8008eea <pbuf_alloc+0x10e>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e34:	4407      	add	r7, r0
  p->type_internal = (u8_t)type;
 8008e36:	2280      	movs	r2, #128	; 0x80
  p->next = NULL;
 8008e38:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8008e3a:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e3c:	3713      	adds	r7, #19
  p->type_internal = (u8_t)type;
 8008e3e:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8008e40:	2201      	movs	r2, #1
  p->next = NULL;
 8008e42:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e44:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 8008e48:	8146      	strh	r6, [r0, #10]
  p->flags = flags;
 8008e4a:	7343      	strb	r3, [r0, #13]
  p->payload = payload;
 8008e4c:	6047      	str	r7, [r0, #4]
  p->ref = 1;
 8008e4e:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008e50:	73c3      	strb	r3, [r0, #15]
 8008e52:	e04a      	b.n	8008eea <pbuf_alloc+0x10e>
      p = pbuf_alloc_reference(NULL, length, type);
 8008e54:	4631      	mov	r1, r6
 8008e56:	2000      	movs	r0, #0
}
 8008e58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8008e5c:	f7ff bee0 	b.w	8008c20 <pbuf_alloc_reference>
  switch (type) {
 8008e60:	f04f 0900 	mov.w	r9, #0
  p->type_internal = (u8_t)type;
 8008e64:	f04f 0882 	mov.w	r8, #130	; 0x82
  switch (type) {
 8008e68:	464c      	mov	r4, r9
  p->next = NULL;
 8008e6a:	464f      	mov	r7, r9
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008e6c:	200d      	movs	r0, #13
 8008e6e:	f7ff fcdb 	bl	8008828 <memp_malloc>
        if (q == NULL) {
 8008e72:	b9d0      	cbnz	r0, 8008eaa <pbuf_alloc+0xce>
  queued = pbuf_free_ooseq_pending;
 8008e74:	4e22      	ldr	r6, [pc, #136]	; (8008f00 <pbuf_alloc+0x124>)
  SYS_ARCH_PROTECT(old_level);
 8008e76:	f004 fc93 	bl	800d7a0 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8008e7a:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8008e7c:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8008e7e:	7033      	strb	r3, [r6, #0]
  queued = pbuf_free_ooseq_pending;
 8008e80:	b2ed      	uxtb	r5, r5
  SYS_ARCH_UNPROTECT(old_level);
 8008e82:	f004 fc99 	bl	800d7b8 <sys_arch_unprotect>
  if (!queued) {
 8008e86:	b94d      	cbnz	r5, 8008e9c <pbuf_alloc+0xc0>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008e88:	4629      	mov	r1, r5
 8008e8a:	481e      	ldr	r0, [pc, #120]	; (8008f04 <pbuf_alloc+0x128>)
 8008e8c:	f7fb fdea 	bl	8004a64 <tcpip_try_callback>
 8008e90:	b120      	cbz	r0, 8008e9c <pbuf_alloc+0xc0>
 8008e92:	f004 fc85 	bl	800d7a0 <sys_arch_protect>
 8008e96:	7035      	strb	r5, [r6, #0]
 8008e98:	f004 fc8e 	bl	800d7b8 <sys_arch_unprotect>
          if (p) {
 8008e9c:	b90c      	cbnz	r4, 8008ea2 <pbuf_alloc+0xc6>
      return NULL;
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	e023      	b.n	8008eea <pbuf_alloc+0x10e>
            pbuf_free(p);
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff ff32 	bl	8008d0c <pbuf_free>
 8008ea8:	e7f9      	b.n	8008e9e <pbuf_alloc+0xc2>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008eaa:	1ceb      	adds	r3, r5, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008eac:	4405      	add	r5, r0
  p->ref = 1;
 8008eae:	2201      	movs	r2, #1
  p->next = NULL;
 8008eb0:	6007      	str	r7, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008eb2:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008eb6:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 8008eb8:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008eba:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
  p->type_internal = (u8_t)type;
 8008ec2:	f880 800c 	strb.w	r8, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ec6:	b29b      	uxth	r3, r3
  p->payload = payload;
 8008ec8:	6045      	str	r5, [r0, #4]
  p->flags = flags;
 8008eca:	7347      	strb	r7, [r0, #13]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ecc:	42b3      	cmp	r3, r6
  p->ref = 1;
 8008ece:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008ed0:	73c7      	strb	r7, [r0, #15]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ed2:	bf28      	it	cs
 8008ed4:	4633      	movcs	r3, r6
  p->len = len;
 8008ed6:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8008ed8:	b154      	cbz	r4, 8008ef0 <pbuf_alloc+0x114>
          last->next = q;
 8008eda:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 8008ede:	1af3      	subs	r3, r6, r3
        offset = 0;
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	4681      	mov	r9, r0
        rem_len = (u16_t)(rem_len - qlen);
 8008ee4:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	d1c0      	bne.n	8008e6c <pbuf_alloc+0x90>
}
 8008eea:	4620      	mov	r0, r4
 8008eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	e7f4      	b.n	8008ede <pbuf_alloc+0x102>
 8008ef4:	08010f4b 	.word	0x08010f4b
 8008ef8:	08010f7b 	.word	0x08010f7b
 8008efc:	0800fff2 	.word	0x0800fff2
 8008f00:	2000bed4 	.word	0x2000bed4
 8008f04:	08008b8d 	.word	0x08008b8d

08008f08 <pbuf_realloc>:
{
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008f0e:	4604      	mov	r4, r0
 8008f10:	b930      	cbnz	r0, 8008f20 <pbuf_realloc+0x18>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <pbuf_realloc+0x9c>)
 8008f14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008f18:	4923      	ldr	r1, [pc, #140]	; (8008fa8 <pbuf_realloc+0xa0>)
 8008f1a:	4824      	ldr	r0, [pc, #144]	; (8008fac <pbuf_realloc+0xa4>)
 8008f1c:	f005 fdf2 	bl	800eb04 <iprintf>
  if (new_len >= p->tot_len) {
 8008f20:	8923      	ldrh	r3, [r4, #8]
 8008f22:	42ab      	cmp	r3, r5
 8008f24:	d93b      	bls.n	8008f9e <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 8008f26:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f28:	4f1e      	ldr	r7, [pc, #120]	; (8008fa4 <pbuf_realloc+0x9c>)
 8008f2a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008fb4 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 8008f2e:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f30:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008fac <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 8008f34:	8963      	ldrh	r3, [r4, #10]
 8008f36:	429d      	cmp	r5, r3
 8008f38:	d819      	bhi.n	8008f6e <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008f3a:	7b22      	ldrb	r2, [r4, #12]
 8008f3c:	0712      	lsls	r2, r2, #28
 8008f3e:	d126      	bne.n	8008f8e <pbuf_realloc+0x86>
 8008f40:	429d      	cmp	r5, r3
 8008f42:	d024      	beq.n	8008f8e <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008f44:	7b63      	ldrb	r3, [r4, #13]
 8008f46:	079b      	lsls	r3, r3, #30
 8008f48:	d421      	bmi.n	8008f8e <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008f4a:	6861      	ldr	r1, [r4, #4]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	1b09      	subs	r1, r1, r4
 8008f50:	4429      	add	r1, r5
 8008f52:	b289      	uxth	r1, r1
 8008f54:	f7ff fab0 	bl	80084b8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f58:	4604      	mov	r4, r0
 8008f5a:	b9c0      	cbnz	r0, 8008f8e <pbuf_realloc+0x86>
 8008f5c:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <pbuf_realloc+0x9c>)
 8008f5e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008f62:	4913      	ldr	r1, [pc, #76]	; (8008fb0 <pbuf_realloc+0xa8>)
 8008f64:	4811      	ldr	r0, [pc, #68]	; (8008fac <pbuf_realloc+0xa4>)
 8008f66:	f005 fdcd 	bl	800eb04 <iprintf>
  q->len = rem_len;
 8008f6a:	8164      	strh	r4, [r4, #10]
 8008f6c:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8008f6e:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008f70:	8923      	ldrh	r3, [r4, #8]
 8008f72:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 8008f74:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008f76:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008f78:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	d1da      	bne.n	8008f34 <pbuf_realloc+0x2c>
 8008f7e:	463b      	mov	r3, r7
 8008f80:	f240 12af 	movw	r2, #431	; 0x1af
 8008f84:	4641      	mov	r1, r8
 8008f86:	4648      	mov	r0, r9
 8008f88:	f005 fdbc 	bl	800eb04 <iprintf>
 8008f8c:	e7d2      	b.n	8008f34 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8008f8e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8008f90:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008f92:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008f94:	b108      	cbz	r0, 8008f9a <pbuf_realloc+0x92>
    pbuf_free(q->next);
 8008f96:	f7ff feb9 	bl	8008d0c <pbuf_free>
  q->next = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08010f4b 	.word	0x08010f4b
 8008fa8:	0801114f 	.word	0x0801114f
 8008fac:	0800fff2 	.word	0x0800fff2
 8008fb0:	0801117f 	.word	0x0801117f
 8008fb4:	08011167 	.word	0x08011167

08008fb8 <pbuf_free_header>:
{
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	460d      	mov	r5, r1
  struct pbuf *p = q;
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	2600      	movs	r6, #0
  while (free_left && p) {
 8008fc0:	b185      	cbz	r5, 8008fe4 <pbuf_free_header+0x2c>
 8008fc2:	b17c      	cbz	r4, 8008fe4 <pbuf_free_header+0x2c>
    if (free_left >= p->len) {
 8008fc4:	8961      	ldrh	r1, [r4, #10]
 8008fc6:	428d      	cmp	r5, r1
 8008fc8:	d308      	bcc.n	8008fdc <pbuf_free_header+0x24>
      p = p->next;
 8008fca:	6827      	ldr	r7, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 8008fcc:	1a6d      	subs	r5, r5, r1
      f->next = 0;
 8008fce:	6026      	str	r6, [r4, #0]
      pbuf_free(f);
 8008fd0:	4620      	mov	r0, r4
      free_left = (u16_t)(free_left - p->len);
 8008fd2:	b2ad      	uxth	r5, r5
      p = p->next;
 8008fd4:	463c      	mov	r4, r7
      pbuf_free(f);
 8008fd6:	f7ff fe99 	bl	8008d0c <pbuf_free>
 8008fda:	e7f1      	b.n	8008fc0 <pbuf_free_header+0x8>
      pbuf_remove_header(p, free_left);
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff fe60 	bl	8008ca4 <pbuf_remove_header>
}
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fe8 <pbuf_clen>:
{
 8008fe8:	4603      	mov	r3, r0
  while (p != NULL) {
 8008fea:	2200      	movs	r2, #0
 8008fec:	b290      	uxth	r0, r2
 8008fee:	3201      	adds	r2, #1
 8008ff0:	b903      	cbnz	r3, 8008ff4 <pbuf_clen+0xc>
}
 8008ff2:	4770      	bx	lr
    p = p->next;
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	e7f9      	b.n	8008fec <pbuf_clen+0x4>

08008ff8 <pbuf_ref>:
{
 8008ff8:	b510      	push	{r4, lr}
  if (p != NULL) {
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	b188      	cbz	r0, 8009022 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008ffe:	f004 fbcf 	bl	800d7a0 <sys_arch_protect>
 8009002:	7ba3      	ldrb	r3, [r4, #14]
 8009004:	3301      	adds	r3, #1
 8009006:	73a3      	strb	r3, [r4, #14]
 8009008:	f004 fbd6 	bl	800d7b8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800900c:	7ba3      	ldrb	r3, [r4, #14]
 800900e:	b943      	cbnz	r3, 8009022 <pbuf_ref+0x2a>
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <pbuf_ref+0x2c>)
 8009012:	f240 3242 	movw	r2, #834	; 0x342
 8009016:	4904      	ldr	r1, [pc, #16]	; (8009028 <pbuf_ref+0x30>)
 8009018:	4804      	ldr	r0, [pc, #16]	; (800902c <pbuf_ref+0x34>)
}
 800901a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800901e:	f005 bd71 	b.w	800eb04 <iprintf>
 8009022:	bd10      	pop	{r4, pc}
 8009024:	08010f4b 	.word	0x08010f4b
 8009028:	0801119b 	.word	0x0801119b
 800902c:	0800fff2 	.word	0x0800fff2

08009030 <pbuf_cat>:
{
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009034:	4604      	mov	r4, r0
 8009036:	b100      	cbz	r0, 800903a <pbuf_cat+0xa>
 8009038:	b969      	cbnz	r1, 8009056 <pbuf_cat+0x26>
 800903a:	4b15      	ldr	r3, [pc, #84]	; (8009090 <pbuf_cat+0x60>)
 800903c:	f240 325a 	movw	r2, #858	; 0x35a
 8009040:	4914      	ldr	r1, [pc, #80]	; (8009094 <pbuf_cat+0x64>)
 8009042:	4815      	ldr	r0, [pc, #84]	; (8009098 <pbuf_cat+0x68>)
}
 8009044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009048:	f005 bd5c 	b.w	800eb04 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800904c:	8923      	ldrh	r3, [r4, #8]
 800904e:	8929      	ldrh	r1, [r5, #8]
 8009050:	440b      	add	r3, r1
 8009052:	8123      	strh	r3, [r4, #8]
 8009054:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	2a00      	cmp	r2, #0
 800905a:	d1f7      	bne.n	800904c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800905c:	8922      	ldrh	r2, [r4, #8]
 800905e:	8963      	ldrh	r3, [r4, #10]
 8009060:	429a      	cmp	r2, r3
 8009062:	d006      	beq.n	8009072 <pbuf_cat+0x42>
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <pbuf_cat+0x60>)
 8009066:	f240 3262 	movw	r2, #866	; 0x362
 800906a:	490c      	ldr	r1, [pc, #48]	; (800909c <pbuf_cat+0x6c>)
 800906c:	480a      	ldr	r0, [pc, #40]	; (8009098 <pbuf_cat+0x68>)
 800906e:	f005 fd49 	bl	800eb04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	b133      	cbz	r3, 8009084 <pbuf_cat+0x54>
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <pbuf_cat+0x60>)
 8009078:	f240 3263 	movw	r2, #867	; 0x363
 800907c:	4908      	ldr	r1, [pc, #32]	; (80090a0 <pbuf_cat+0x70>)
 800907e:	4806      	ldr	r0, [pc, #24]	; (8009098 <pbuf_cat+0x68>)
 8009080:	f005 fd40 	bl	800eb04 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009084:	892a      	ldrh	r2, [r5, #8]
 8009086:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8009088:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800908a:	4413      	add	r3, r2
 800908c:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	08010f4b 	.word	0x08010f4b
 8009094:	08010fa8 	.word	0x08010fa8
 8009098:	0800fff2 	.word	0x0800fff2
 800909c:	08010fdd 	.word	0x08010fdd
 80090a0:	0801100a 	.word	0x0801100a

080090a4 <pbuf_chain>:
{
 80090a4:	b510      	push	{r4, lr}
 80090a6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80090a8:	f7ff ffc2 	bl	8009030 <pbuf_cat>
  pbuf_ref(t);
 80090ac:	4620      	mov	r0, r4
}
 80090ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80090b2:	f7ff bfa1 	b.w	8008ff8 <pbuf_ref>
	...

080090b8 <pbuf_copy>:
{
 80090b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80090be:	4605      	mov	r5, r0
 80090c0:	b120      	cbz	r0, 80090cc <pbuf_copy+0x14>
 80090c2:	b119      	cbz	r1, 80090cc <pbuf_copy+0x14>
 80090c4:	8902      	ldrh	r2, [r0, #8]
 80090c6:	890b      	ldrh	r3, [r1, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d20a      	bcs.n	80090e2 <pbuf_copy+0x2a>
 80090cc:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <pbuf_copy+0xf0>)
 80090ce:	f240 32ca 	movw	r2, #970	; 0x3ca
 80090d2:	4936      	ldr	r1, [pc, #216]	; (80091ac <pbuf_copy+0xf4>)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80090d4:	4836      	ldr	r0, [pc, #216]	; (80091b0 <pbuf_copy+0xf8>)
 80090d6:	f005 fd15 	bl	800eb04 <iprintf>
 80090da:	f06f 000f 	mvn.w	r0, #15
 80090de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80090e4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80091a8 <pbuf_copy+0xf0>
 80090e8:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80091c0 <pbuf_copy+0x108>
 80090ec:	4637      	mov	r7, r6
 80090ee:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80091b0 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80090f2:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 80090f6:	8963      	ldrh	r3, [r4, #10]
 80090f8:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80090fc:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80090fe:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	4438      	add	r0, r7
 8009104:	4598      	cmp	r8, r3
 8009106:	4431      	add	r1, r6
 8009108:	bf28      	it	cs
 800910a:	4698      	movcs	r8, r3
 800910c:	4642      	mov	r2, r8
    offset_to += len;
 800910e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009110:	f005 fccb 	bl	800eaaa <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009114:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8009116:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009118:	429f      	cmp	r7, r3
 800911a:	d906      	bls.n	800912a <pbuf_copy+0x72>
 800911c:	464b      	mov	r3, r9
 800911e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009122:	4659      	mov	r1, fp
 8009124:	4650      	mov	r0, sl
 8009126:	f005 fced 	bl	800eb04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800912a:	8963      	ldrh	r3, [r4, #10]
 800912c:	429e      	cmp	r6, r3
 800912e:	d906      	bls.n	800913e <pbuf_copy+0x86>
 8009130:	464b      	mov	r3, r9
 8009132:	f240 32da 	movw	r2, #986	; 0x3da
 8009136:	491f      	ldr	r1, [pc, #124]	; (80091b4 <pbuf_copy+0xfc>)
 8009138:	4650      	mov	r0, sl
 800913a:	f005 fce3 	bl	800eb04 <iprintf>
    if (offset_from >= p_from->len) {
 800913e:	8963      	ldrh	r3, [r4, #10]
 8009140:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8009142:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8009144:	bf24      	itt	cs
 8009146:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8009148:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800914a:	429f      	cmp	r7, r3
 800914c:	d11e      	bne.n	800918c <pbuf_copy+0xd4>
      p_to = p_to->next;
 800914e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009150:	b9dd      	cbnz	r5, 800918a <pbuf_copy+0xd2>
 8009152:	b1bc      	cbz	r4, 8009184 <pbuf_copy+0xcc>
 8009154:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <pbuf_copy+0xf0>)
 8009156:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800915a:	4917      	ldr	r1, [pc, #92]	; (80091b8 <pbuf_copy+0x100>)
 800915c:	e7ba      	b.n	80090d4 <pbuf_copy+0x1c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800915e:	8962      	ldrh	r2, [r4, #10]
 8009160:	8923      	ldrh	r3, [r4, #8]
 8009162:	429a      	cmp	r2, r3
 8009164:	d114      	bne.n	8009190 <pbuf_copy+0xd8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	b193      	cbz	r3, 8009190 <pbuf_copy+0xd8>
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <pbuf_copy+0xf0>)
 800916c:	f240 32ea 	movw	r2, #1002	; 0x3ea
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009170:	4912      	ldr	r1, [pc, #72]	; (80091bc <pbuf_copy+0x104>)
 8009172:	480f      	ldr	r0, [pc, #60]	; (80091b0 <pbuf_copy+0xf8>)
 8009174:	f005 fcc6 	bl	800eb04 <iprintf>
 8009178:	f06f 0005 	mvn.w	r0, #5
 800917c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } while (p_from);
 8009180:	2c00      	cmp	r4, #0
 8009182:	d1b6      	bne.n	80090f2 <pbuf_copy+0x3a>
  return ERR_OK;
 8009184:	4620      	mov	r0, r4
 8009186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 800918a:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800918c:	2c00      	cmp	r4, #0
 800918e:	d1e6      	bne.n	800915e <pbuf_copy+0xa6>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009190:	896a      	ldrh	r2, [r5, #10]
 8009192:	892b      	ldrh	r3, [r5, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d1f3      	bne.n	8009180 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0f0      	beq.n	8009180 <pbuf_copy+0xc8>
 800919e:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <pbuf_copy+0xf0>)
 80091a0:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80091a4:	e7e4      	b.n	8009170 <pbuf_copy+0xb8>
 80091a6:	bf00      	nop
 80091a8:	08010f4b 	.word	0x08010f4b
 80091ac:	0801102b 	.word	0x0801102b
 80091b0:	0800fff2 	.word	0x0800fff2
 80091b4:	08011072 	.word	0x08011072
 80091b8:	0801108d 	.word	0x0801108d
 80091bc:	0801109a 	.word	0x0801109a
 80091c0:	0801105b 	.word	0x0801105b

080091c4 <pbuf_copy_partial>:
{
 80091c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c8:	460f      	mov	r7, r1
 80091ca:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80091cc:	4606      	mov	r6, r0
 80091ce:	b950      	cbnz	r0, 80091e6 <pbuf_copy_partial+0x22>
 80091d0:	4635      	mov	r5, r6
 80091d2:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <pbuf_copy_partial+0x7c>)
 80091d4:	f240 420a 	movw	r2, #1034	; 0x40a
 80091d8:	491a      	ldr	r1, [pc, #104]	; (8009244 <pbuf_copy_partial+0x80>)
 80091da:	481b      	ldr	r0, [pc, #108]	; (8009248 <pbuf_copy_partial+0x84>)
 80091dc:	f005 fc92 	bl	800eb04 <iprintf>
}
 80091e0:	4628      	mov	r0, r5
 80091e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80091e6:	b169      	cbz	r1, 8009204 <pbuf_copy_partial+0x40>
 80091e8:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80091ea:	f1b8 0f00 	cmp.w	r8, #0
 80091ee:	d0f7      	beq.n	80091e0 <pbuf_copy_partial+0x1c>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	d0f5      	beq.n	80091e0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80091f4:	b17b      	cbz	r3, 8009216 <pbuf_copy_partial+0x52>
 80091f6:	8971      	ldrh	r1, [r6, #10]
 80091f8:	428b      	cmp	r3, r1
 80091fa:	d30c      	bcc.n	8009216 <pbuf_copy_partial+0x52>
      offset = (u16_t)(offset - p->len);
 80091fc:	1a5b      	subs	r3, r3, r1
 80091fe:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009200:	6836      	ldr	r6, [r6, #0]
 8009202:	e7f2      	b.n	80091ea <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009204:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <pbuf_copy_partial+0x7c>)
 8009206:	f240 420b 	movw	r2, #1035	; 0x40b
 800920a:	4910      	ldr	r1, [pc, #64]	; (800924c <pbuf_copy_partial+0x88>)
 800920c:	463d      	mov	r5, r7
 800920e:	480e      	ldr	r0, [pc, #56]	; (8009248 <pbuf_copy_partial+0x84>)
 8009210:	f005 fc78 	bl	800eb04 <iprintf>
 8009214:	e7e4      	b.n	80091e0 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8009216:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009218:	1978      	adds	r0, r7, r5
 800921a:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 800921c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800921e:	4419      	add	r1, r3
      buf_copy_len = (u16_t)(p->len - offset);
 8009220:	b2a4      	uxth	r4, r4
 8009222:	4544      	cmp	r4, r8
 8009224:	bf28      	it	cs
 8009226:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009228:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800922a:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 800922c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009230:	f005 fc3b 	bl	800eaaa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009234:	b2ad      	uxth	r5, r5
      offset = 0;
 8009236:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8009238:	fa1f f884 	uxth.w	r8, r4
 800923c:	e7e0      	b.n	8009200 <pbuf_copy_partial+0x3c>
 800923e:	bf00      	nop
 8009240:	08010f4b 	.word	0x08010f4b
 8009244:	080110c4 	.word	0x080110c4
 8009248:	0800fff2 	.word	0x0800fff2
 800924c:	080110e3 	.word	0x080110e3

08009250 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4688      	mov	r8, r1
 8009256:	4617      	mov	r7, r2
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8009258:	4605      	mov	r5, r0
 800925a:	b958      	cbnz	r0, 8009274 <pbuf_take+0x24>
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <pbuf_take+0xa4>)
 800925e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8009262:	4925      	ldr	r1, [pc, #148]	; (80092f8 <pbuf_take+0xa8>)
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009264:	4825      	ldr	r0, [pc, #148]	; (80092fc <pbuf_take+0xac>)
 8009266:	f005 fc4d 	bl	800eb04 <iprintf>
 800926a:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
 800926e:	b003      	add	sp, #12
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009274:	b921      	cbnz	r1, 8009280 <pbuf_take+0x30>
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <pbuf_take+0xa4>)
 8009278:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800927c:	4920      	ldr	r1, [pc, #128]	; (8009300 <pbuf_take+0xb0>)
 800927e:	e7f1      	b.n	8009264 <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8009280:	8903      	ldrh	r3, [r0, #8]
 8009282:	4293      	cmp	r3, r2
 8009284:	d313      	bcc.n	80092ae <pbuf_take+0x5e>
 8009286:	4614      	mov	r4, r2
 8009288:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800928a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80092f4 <pbuf_take+0xa4>
 800928e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800930c <pbuf_take+0xbc>
 8009292:	f8df b068 	ldr.w	fp, [pc, #104]	; 80092fc <pbuf_take+0xac>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009296:	b9a4      	cbnz	r4, 80092c2 <pbuf_take+0x72>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8009298:	42be      	cmp	r6, r7
 800929a:	d006      	beq.n	80092aa <pbuf_take+0x5a>
 800929c:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <pbuf_take+0xa4>)
 800929e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80092a2:	4918      	ldr	r1, [pc, #96]	; (8009304 <pbuf_take+0xb4>)
 80092a4:	4815      	ldr	r0, [pc, #84]	; (80092fc <pbuf_take+0xac>)
 80092a6:	f005 fc2d 	bl	800eb04 <iprintf>
  return ERR_OK;
 80092aa:	4620      	mov	r0, r4
 80092ac:	e7df      	b.n	800926e <pbuf_take+0x1e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <pbuf_take+0xa4>)
 80092b0:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80092b4:	4914      	ldr	r1, [pc, #80]	; (8009308 <pbuf_take+0xb8>)
 80092b6:	4811      	ldr	r0, [pc, #68]	; (80092fc <pbuf_take+0xac>)
 80092b8:	f005 fc24 	bl	800eb04 <iprintf>
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	e7d5      	b.n	800926e <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80092c2:	b935      	cbnz	r5, 80092d2 <pbuf_take+0x82>
 80092c4:	464b      	mov	r3, r9
 80092c6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80092ca:	4651      	mov	r1, sl
 80092cc:	4658      	mov	r0, fp
 80092ce:	f005 fc19 	bl	800eb04 <iprintf>
    if (buf_copy_len > p->len) {
 80092d2:	896b      	ldrh	r3, [r5, #10]
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80092d4:	eb08 0106 	add.w	r1, r8, r6
 80092d8:	6868      	ldr	r0, [r5, #4]
 80092da:	42a3      	cmp	r3, r4
 80092dc:	bf28      	it	cs
 80092de:	4623      	movcs	r3, r4
 80092e0:	461a      	mov	r2, r3
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	f005 fbe1 	bl	800eaaa <memcpy>
    total_copy_len -= buf_copy_len;
 80092e8:	9b01      	ldr	r3, [sp, #4]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80092ea:	682d      	ldr	r5, [r5, #0]
    total_copy_len -= buf_copy_len;
 80092ec:	1ae4      	subs	r4, r4, r3
    copied_total += buf_copy_len;
 80092ee:	441e      	add	r6, r3
 80092f0:	e7d1      	b.n	8009296 <pbuf_take+0x46>
 80092f2:	bf00      	nop
 80092f4:	08010f4b 	.word	0x08010f4b
 80092f8:	080111cb 	.word	0x080111cb
 80092fc:	0800fff2 	.word	0x0800fff2
 8009300:	080111e2 	.word	0x080111e2
 8009304:	08011235 	.word	0x08011235
 8009308:	080111fd 	.word	0x080111fd
 800930c:	0801121d 	.word	0x0801121d

08009310 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8009310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009312:	460f      	mov	r7, r1
 8009314:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8009316:	4619      	mov	r1, r3
 8009318:	f10d 0206 	add.w	r2, sp, #6
 800931c:	f7ff fc2a 	bl	8008b74 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8009320:	4606      	mov	r6, r0
 8009322:	b330      	cbz	r0, 8009372 <pbuf_take_at+0x62>
 8009324:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009328:	8901      	ldrh	r1, [r0, #8]
 800932a:	191a      	adds	r2, r3, r4
 800932c:	4291      	cmp	r1, r2
 800932e:	db20      	blt.n	8009372 <pbuf_take_at+0x62>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8009330:	8942      	ldrh	r2, [r0, #10]
 8009332:	429a      	cmp	r2, r3
 8009334:	d806      	bhi.n	8009344 <pbuf_take_at+0x34>
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <pbuf_take_at+0x6c>)
 8009338:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800933c:	4910      	ldr	r1, [pc, #64]	; (8009380 <pbuf_take_at+0x70>)
 800933e:	4811      	ldr	r0, [pc, #68]	; (8009384 <pbuf_take_at+0x74>)
 8009340:	f005 fbe0 	bl	800eb04 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8009344:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8009348:	4639      	mov	r1, r7
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800934a:	8975      	ldrh	r5, [r6, #10]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800934c:	6870      	ldr	r0, [r6, #4]
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800934e:	1aed      	subs	r5, r5, r3
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8009350:	4418      	add	r0, r3
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8009352:	42ac      	cmp	r4, r5
 8009354:	bfcc      	ite	gt
 8009356:	b2ad      	uxthgt	r5, r5
 8009358:	4625      	movle	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800935a:	462a      	mov	r2, r5
 800935c:	f005 fba5 	bl	800eaaa <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8009360:	1b60      	subs	r0, r4, r5
 8009362:	b282      	uxth	r2, r0
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 8009364:	b142      	cbz	r2, 8009378 <pbuf_take_at+0x68>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8009366:	1979      	adds	r1, r7, r5
 8009368:	6830      	ldr	r0, [r6, #0]
 800936a:	f7ff ff71 	bl	8009250 <pbuf_take>
    }
    return ERR_OK;
  }
  return ERR_MEM;
}
 800936e:	b003      	add	sp, #12
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_MEM;
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	e7fa      	b.n	800936e <pbuf_take_at+0x5e>
    return ERR_OK;
 8009378:	4610      	mov	r0, r2
 800937a:	e7f8      	b.n	800936e <pbuf_take_at+0x5e>
 800937c:	08010f4b 	.word	0x08010f4b
 8009380:	0801124b 	.word	0x0801124b
 8009384:	0800fff2 	.word	0x0800fff2

08009388 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800938c:	460a      	mov	r2, r1
 800938e:	8921      	ldrh	r1, [r4, #8]
 8009390:	f7ff fd24 	bl	8008ddc <pbuf_alloc>
  if (q == NULL) {
 8009394:	4605      	mov	r5, r0
 8009396:	b150      	cbz	r0, 80093ae <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8009398:	4621      	mov	r1, r4
 800939a:	f7ff fe8d 	bl	80090b8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800939e:	b130      	cbz	r0, 80093ae <pbuf_clone+0x26>
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <pbuf_clone+0x2c>)
 80093a2:	f240 5224 	movw	r2, #1316	; 0x524
 80093a6:	4904      	ldr	r1, [pc, #16]	; (80093b8 <pbuf_clone+0x30>)
 80093a8:	4804      	ldr	r0, [pc, #16]	; (80093bc <pbuf_clone+0x34>)
 80093aa:	f005 fbab 	bl	800eb04 <iprintf>
  return q;
}
 80093ae:	4628      	mov	r0, r5
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	08010f4b 	.word	0x08010f4b
 80093b8:	0801101a 	.word	0x0801101a
 80093bc:	0800fff2 	.word	0x0800fff2

080093c0 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80093c0:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80093c2:	f10d 0206 	add.w	r2, sp, #6
 80093c6:	f7ff fbd5 	bl	8008b74 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80093ca:	b148      	cbz	r0, 80093e0 <pbuf_try_get_at+0x20>
 80093cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80093d0:	8942      	ldrh	r2, [r0, #10]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d904      	bls.n	80093e0 <pbuf_try_get_at+0x20>
    return ((u8_t *)q->payload)[q_idx];
 80093d6:	6842      	ldr	r2, [r0, #4]
 80093d8:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 80093da:	b003      	add	sp, #12
 80093dc:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295
 80093e4:	e7f9      	b.n	80093da <pbuf_try_get_at+0x1a>

080093e6 <pbuf_get_at>:
{
 80093e6:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 80093e8:	f7ff ffea 	bl	80093c0 <pbuf_try_get_at>
 80093ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80093f0:	b2c0      	uxtb	r0, r0
 80093f2:	bd08      	pop	{r3, pc}

080093f4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80093f4:	b513      	push	{r0, r1, r4, lr}
 80093f6:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80093f8:	f10d 0206 	add.w	r2, sp, #6
 80093fc:	f7ff fbba 	bl	8008b74 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8009400:	b130      	cbz	r0, 8009410 <pbuf_put_at+0x1c>
 8009402:	8942      	ldrh	r2, [r0, #10]
 8009404:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009408:	429a      	cmp	r2, r3
    ((u8_t *)q->payload)[q_idx] = data;
 800940a:	bf84      	itt	hi
 800940c:	6842      	ldrhi	r2, [r0, #4]
 800940e:	54d4      	strbhi	r4, [r2, r3]
  }
}
 8009410:	b002      	add	sp, #8
 8009412:	bd10      	pop	{r4, pc}

08009414 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	4691      	mov	r9, r2
 800941a:	4698      	mov	r8, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800941c:	8902      	ldrh	r2, [r0, #8]
 800941e:	18cb      	adds	r3, r1, r3
{
 8009420:	4605      	mov	r5, r0
 8009422:	460f      	mov	r7, r1
  if (p->tot_len < (offset + n)) {
 8009424:	429a      	cmp	r2, r3
 8009426:	da03      	bge.n	8009430 <pbuf_memcmp+0x1c>
    return 0xffff;
 8009428:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800942c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 8009430:	8969      	ldrh	r1, [r5, #10]
 8009432:	42b9      	cmp	r1, r7
 8009434:	d804      	bhi.n	8009440 <pbuf_memcmp+0x2c>
    start = (u16_t)(start - q->len);
 8009436:	1a7f      	subs	r7, r7, r1
    q = q->next;
 8009438:	682d      	ldr	r5, [r5, #0]
    start = (u16_t)(start - q->len);
 800943a:	b2bf      	uxth	r7, r7
  while ((q != NULL) && (q->len <= start)) {
 800943c:	2d00      	cmp	r5, #0
 800943e:	d1f7      	bne.n	8009430 <pbuf_memcmp+0x1c>
{
 8009440:	2600      	movs	r6, #0
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8009442:	45b0      	cmp	r8, r6
 8009444:	b2b4      	uxth	r4, r6
 8009446:	d102      	bne.n	800944e <pbuf_memcmp+0x3a>
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 8009448:	2000      	movs	r0, #0
}
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800944e:	19e1      	adds	r1, r4, r7
 8009450:	3601      	adds	r6, #1
 8009452:	4628      	mov	r0, r5
 8009454:	b289      	uxth	r1, r1
 8009456:	f7ff ffc6 	bl	80093e6 <pbuf_get_at>
    u8_t b = ((const u8_t *)s2)[i];
 800945a:	eb09 0306 	add.w	r3, r9, r6
    if (a != b) {
 800945e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009462:	4283      	cmp	r3, r0
 8009464:	d0ed      	beq.n	8009442 <pbuf_memcmp+0x2e>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8009466:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800946a:	429c      	cmp	r4, r3
 800946c:	d8dc      	bhi.n	8009428 <pbuf_memcmp+0x14>
 800946e:	1c60      	adds	r0, r4, #1
 8009470:	b280      	uxth	r0, r0
 8009472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009476 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 8009476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	4616      	mov	r6, r2
 800947c:	4688      	mov	r8, r1
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800947e:	8902      	ldrh	r2, [r0, #8]
{
 8009480:	4607      	mov	r7, r0
  if (p->tot_len >= mem_len + start_offset) {
 8009482:	18f1      	adds	r1, r6, r3
 8009484:	428a      	cmp	r2, r1
 8009486:	db04      	blt.n	8009492 <pbuf_memfind+0x1c>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 8009488:	1b92      	subs	r2, r2, r6
  if (p->tot_len >= mem_len + start_offset) {
 800948a:	461c      	mov	r4, r3
    for (i = start_offset; i <= max_cmp_start; i++) {
 800948c:	b295      	uxth	r5, r2
 800948e:	42ac      	cmp	r4, r5
 8009490:	d904      	bls.n	800949c <pbuf_memfind+0x26>
      if (plus == 0) {
        return i;
      }
    }
  }
  return 0xFFFF;
 8009492:	f64f 74ff 	movw	r4, #65535	; 0xffff
}
 8009496:	4620      	mov	r0, r4
 8009498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800949c:	4633      	mov	r3, r6
 800949e:	4642      	mov	r2, r8
 80094a0:	4621      	mov	r1, r4
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff ffb6 	bl	8009414 <pbuf_memcmp>
      if (plus == 0) {
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0f4      	beq.n	8009496 <pbuf_memfind+0x20>
    for (i = start_offset; i <= max_cmp_start; i++) {
 80094ac:	3401      	adds	r4, #1
 80094ae:	b2a4      	uxth	r4, r4
 80094b0:	e7ed      	b.n	800948e <pbuf_memfind+0x18>
	...

080094b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80094b4:	4a11      	ldr	r2, [pc, #68]	; (80094fc <tcp_new_port+0x48>)
 80094b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094bc:	8810      	ldrh	r0, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80094be:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80094c2:	4e0f      	ldr	r6, [pc, #60]	; (8009500 <tcp_new_port+0x4c>)
  tcp_port++;
 80094c4:	3001      	adds	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80094c6:	2100      	movs	r1, #0
  tcp_port++;
 80094c8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80094ca:	42a8      	cmp	r0, r5
 80094cc:	bf08      	it	eq
 80094ce:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80094d2:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80094d6:	6824      	ldr	r4, [r4, #0]
 80094d8:	b924      	cbnz	r4, 80094e4 <tcp_new_port+0x30>
 80094da:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80094dc:	2904      	cmp	r1, #4
 80094de:	d1f8      	bne.n	80094d2 <tcp_new_port+0x1e>
 80094e0:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80094e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80094e4:	8ae7      	ldrh	r7, [r4, #22]
 80094e6:	4287      	cmp	r7, r0
 80094e8:	d106      	bne.n	80094f8 <tcp_new_port+0x44>
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e8      	bne.n	80094c4 <tcp_new_port+0x10>
 80094f2:	8010      	strh	r0, [r2, #0]
          return 0;
 80094f4:	4618      	mov	r0, r3
 80094f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80094f8:	68e4      	ldr	r4, [r4, #12]
 80094fa:	e7ed      	b.n	80094d8 <tcp_new_port+0x24>
 80094fc:	20000010 	.word	0x20000010
 8009500:	0801147c 	.word	0x0801147c

08009504 <tcp_close_shutdown_fin>:
{
 8009504:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009506:	4604      	mov	r4, r0
 8009508:	b930      	cbnz	r0, 8009518 <tcp_close_shutdown_fin+0x14>
 800950a:	4b13      	ldr	r3, [pc, #76]	; (8009558 <tcp_close_shutdown_fin+0x54>)
 800950c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009510:	4912      	ldr	r1, [pc, #72]	; (800955c <tcp_close_shutdown_fin+0x58>)
 8009512:	4813      	ldr	r0, [pc, #76]	; (8009560 <tcp_close_shutdown_fin+0x5c>)
 8009514:	f005 faf6 	bl	800eb04 <iprintf>
  switch (pcb->state) {
 8009518:	7d23      	ldrb	r3, [r4, #20]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d003      	beq.n	8009526 <tcp_close_shutdown_fin+0x22>
 800951e:	2b07      	cmp	r3, #7
 8009520:	d00c      	beq.n	800953c <tcp_close_shutdown_fin+0x38>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d108      	bne.n	8009538 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8009526:	4620      	mov	r0, r4
 8009528:	f003 f88a 	bl	800c640 <tcp_send_fin>
      if (err == ERR_OK) {
 800952c:	b988      	cbnz	r0, 8009552 <tcp_close_shutdown_fin+0x4e>
        pcb->state = FIN_WAIT_1;
 800952e:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8009530:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009532:	4620      	mov	r0, r4
 8009534:	f003 f9e6 	bl	800c904 <tcp_output>
 8009538:	2000      	movs	r0, #0
 800953a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800953c:	4620      	mov	r0, r4
 800953e:	f003 f87f 	bl	800c640 <tcp_send_fin>
      if (err == ERR_OK) {
 8009542:	b930      	cbnz	r0, 8009552 <tcp_close_shutdown_fin+0x4e>
        pcb->state = LAST_ACK;
 8009544:	2309      	movs	r3, #9
 8009546:	e7f3      	b.n	8009530 <tcp_close_shutdown_fin+0x2c>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009548:	8b63      	ldrh	r3, [r4, #26]
 800954a:	f043 0308 	orr.w	r3, r3, #8
 800954e:	8363      	strh	r3, [r4, #26]
 8009550:	e7f2      	b.n	8009538 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d0f8      	beq.n	8009548 <tcp_close_shutdown_fin+0x44>
}
 8009556:	bd10      	pop	{r4, pc}
 8009558:	08011322 	.word	0x08011322
 800955c:	08011351 	.word	0x08011351
 8009560:	0800fff2 	.word	0x0800fff2

08009564 <tcp_init>:
{
 8009564:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009566:	f005 fae5 	bl	800eb34 <rand>
 800956a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800956e:	4b02      	ldr	r3, [pc, #8]	; (8009578 <tcp_init+0x14>)
 8009570:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8009574:	8018      	strh	r0, [r3, #0]
 8009576:	bd08      	pop	{r3, pc}
 8009578:	20000010 	.word	0x20000010

0800957c <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800957c:	7d03      	ldrb	r3, [r0, #20]
 800957e:	2b01      	cmp	r3, #1
{
 8009580:	b510      	push	{r4, lr}
 8009582:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009584:	d105      	bne.n	8009592 <tcp_free+0x16>
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <tcp_free+0x24>)
 8009588:	22d4      	movs	r2, #212	; 0xd4
 800958a:	4906      	ldr	r1, [pc, #24]	; (80095a4 <tcp_free+0x28>)
 800958c:	4806      	ldr	r0, [pc, #24]	; (80095a8 <tcp_free+0x2c>)
 800958e:	f005 fab9 	bl	800eb04 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8009592:	4621      	mov	r1, r4
 8009594:	2001      	movs	r0, #1
}
 8009596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800959a:	f7ff b961 	b.w	8008860 <memp_free>
 800959e:	bf00      	nop
 80095a0:	08011322 	.word	0x08011322
 80095a4:	0801140f 	.word	0x0801140f
 80095a8:	0800fff2 	.word	0x0800fff2

080095ac <tcp_update_rcv_ann_wnd>:
{
 80095ac:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80095ae:	4604      	mov	r4, r0
 80095b0:	b930      	cbnz	r0, 80095c0 <tcp_update_rcv_ann_wnd+0x14>
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <tcp_update_rcv_ann_wnd+0x5c>)
 80095b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80095b8:	4914      	ldr	r1, [pc, #80]	; (800960c <tcp_update_rcv_ann_wnd+0x60>)
 80095ba:	4815      	ldr	r0, [pc, #84]	; (8009610 <tcp_update_rcv_ann_wnd+0x64>)
 80095bc:	f005 faa2 	bl	800eb04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80095c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80095c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095c4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80095c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095c8:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80095ca:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80095ce:	4428      	add	r0, r5
 80095d0:	bf94      	ite	ls
 80095d2:	1a82      	subls	r2, r0, r2
 80095d4:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80095d8:	2a00      	cmp	r2, #0
 80095da:	db01      	blt.n	80095e0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80095dc:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80095de:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80095e0:	1aea      	subs	r2, r5, r3
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	dd02      	ble.n	80095ec <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 80095e6:	2000      	movs	r0, #0
 80095e8:	8560      	strh	r0, [r4, #42]	; 0x2a
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80095ec:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80095ee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80095f2:	d306      	bcc.n	8009602 <tcp_update_rcv_ann_wnd+0x56>
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <tcp_update_rcv_ann_wnd+0x5c>)
 80095f6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80095fa:	4906      	ldr	r1, [pc, #24]	; (8009614 <tcp_update_rcv_ann_wnd+0x68>)
 80095fc:	4804      	ldr	r0, [pc, #16]	; (8009610 <tcp_update_rcv_ann_wnd+0x64>)
 80095fe:	f005 fa81 	bl	800eb04 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009602:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8009604:	2000      	movs	r0, #0
}
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	08011322 	.word	0x08011322
 800960c:	08011806 	.word	0x08011806
 8009610:	0800fff2 	.word	0x0800fff2
 8009614:	0801182a 	.word	0x0801182a

08009618 <tcp_recved>:
{
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800961c:	4604      	mov	r4, r0
 800961e:	b940      	cbnz	r0, 8009632 <tcp_recved+0x1a>
 8009620:	4b17      	ldr	r3, [pc, #92]	; (8009680 <tcp_recved+0x68>)
 8009622:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009626:	4917      	ldr	r1, [pc, #92]	; (8009684 <tcp_recved+0x6c>)
 8009628:	4817      	ldr	r0, [pc, #92]	; (8009688 <tcp_recved+0x70>)
}
 800962a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800962e:	f005 ba69 	b.w	800eb04 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009632:	7d03      	ldrb	r3, [r0, #20]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d106      	bne.n	8009646 <tcp_recved+0x2e>
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <tcp_recved+0x68>)
 800963a:	f240 32d3 	movw	r2, #979	; 0x3d3
 800963e:	4913      	ldr	r1, [pc, #76]	; (800968c <tcp_recved+0x74>)
 8009640:	4811      	ldr	r0, [pc, #68]	; (8009688 <tcp_recved+0x70>)
 8009642:	f005 fa5f 	bl	800eb04 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009646:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009648:	1959      	adds	r1, r3, r5
 800964a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800964c:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8009650:	d801      	bhi.n	8009656 <tcp_recved+0x3e>
 8009652:	428b      	cmp	r3, r1
 8009654:	d911      	bls.n	800967a <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009656:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800965a:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800965c:	4620      	mov	r0, r4
 800965e:	f7ff ffa5 	bl	80095ac <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009662:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8009666:	d30a      	bcc.n	800967e <tcp_recved+0x66>
    tcp_ack_now(pcb);
 8009668:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 800966a:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800966c:	f043 0302 	orr.w	r3, r3, #2
 8009670:	8363      	strh	r3, [r4, #26]
}
 8009672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009676:	f003 b945 	b.w	800c904 <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 800967a:	8521      	strh	r1, [r4, #40]	; 0x28
 800967c:	e7ee      	b.n	800965c <tcp_recved+0x44>
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	08011322 	.word	0x08011322
 8009684:	080115ce 	.word	0x080115ce
 8009688:	0800fff2 	.word	0x0800fff2
 800968c:	080115e6 	.word	0x080115e6

08009690 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009690:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8009692:	4604      	mov	r4, r0
 8009694:	b148      	cbz	r0, 80096aa <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8009696:	6840      	ldr	r0, [r0, #4]
 8009698:	b108      	cbz	r0, 800969e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800969a:	f7ff fb37 	bl	8008d0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800969e:	4621      	mov	r1, r4
 80096a0:	2003      	movs	r0, #3
  }
}
 80096a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80096a6:	f7ff b8db 	b.w	8008860 <memp_free>
 80096aa:	bd10      	pop	{r4, pc}

080096ac <tcp_segs_free>:
{
 80096ac:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80096ae:	b900      	cbnz	r0, 80096b2 <tcp_segs_free+0x6>
}
 80096b0:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80096b2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80096b4:	f7ff ffec 	bl	8009690 <tcp_seg_free>
    seg = next;
 80096b8:	4620      	mov	r0, r4
 80096ba:	e7f8      	b.n	80096ae <tcp_segs_free+0x2>

080096bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80096bc:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80096be:	4604      	mov	r4, r0
 80096c0:	b930      	cbnz	r0, 80096d0 <tcp_seg_copy+0x14>
 80096c2:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <tcp_seg_copy+0x3c>)
 80096c4:	f240 6282 	movw	r2, #1666	; 0x682
 80096c8:	490c      	ldr	r1, [pc, #48]	; (80096fc <tcp_seg_copy+0x40>)
 80096ca:	480d      	ldr	r0, [pc, #52]	; (8009700 <tcp_seg_copy+0x44>)
 80096cc:	f005 fa1a 	bl	800eb04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80096d0:	2003      	movs	r0, #3
 80096d2:	f7ff f8a9 	bl	8008828 <memp_malloc>
  if (cseg == NULL) {
 80096d6:	4605      	mov	r5, r0
 80096d8:	b160      	cbz	r0, 80096f4 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80096da:	4620      	mov	r0, r4
 80096dc:	462b      	mov	r3, r5
 80096de:	f104 0210 	add.w	r2, r4, #16
 80096e2:	f850 1b04 	ldr.w	r1, [r0], #4
 80096e6:	4290      	cmp	r0, r2
 80096e8:	f843 1b04 	str.w	r1, [r3], #4
 80096ec:	d1f9      	bne.n	80096e2 <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
 80096ee:	6868      	ldr	r0, [r5, #4]
 80096f0:	f7ff fc82 	bl	8008ff8 <pbuf_ref>
  return cseg;
}
 80096f4:	4628      	mov	r0, r5
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	08011322 	.word	0x08011322
 80096fc:	0801160c 	.word	0x0801160c
 8009700:	0800fff2 	.word	0x0800fff2

08009704 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009704:	b100      	cbz	r0, 8009708 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009706:	6101      	str	r1, [r0, #16]
 8009708:	4770      	bx	lr
	...

0800970c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009710:	4604      	mov	r4, r0
 8009712:	b158      	cbz	r0, 800972c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009714:	7d03      	ldrb	r3, [r0, #20]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d106      	bne.n	8009728 <tcp_recv+0x1c>
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <tcp_recv+0x24>)
 800971c:	f240 72df 	movw	r2, #2015	; 0x7df
 8009720:	4904      	ldr	r1, [pc, #16]	; (8009734 <tcp_recv+0x28>)
 8009722:	4805      	ldr	r0, [pc, #20]	; (8009738 <tcp_recv+0x2c>)
 8009724:	f005 f9ee 	bl	800eb04 <iprintf>
    pcb->recv = recv;
 8009728:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800972c:	bd38      	pop	{r3, r4, r5, pc}
 800972e:	bf00      	nop
 8009730:	08011322 	.word	0x08011322
 8009734:	0801158c 	.word	0x0801158c
 8009738:	0800fff2 	.word	0x0800fff2

0800973c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009740:	4604      	mov	r4, r0
 8009742:	b158      	cbz	r0, 800975c <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009744:	7d03      	ldrb	r3, [r0, #20]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d106      	bne.n	8009758 <tcp_sent+0x1c>
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <tcp_sent+0x24>)
 800974c:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009750:	4904      	ldr	r1, [pc, #16]	; (8009764 <tcp_sent+0x28>)
 8009752:	4805      	ldr	r0, [pc, #20]	; (8009768 <tcp_sent+0x2c>)
 8009754:	f005 f9d6 	bl	800eb04 <iprintf>
    pcb->sent = sent;
 8009758:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800975c:	bd38      	pop	{r3, r4, r5, pc}
 800975e:	bf00      	nop
 8009760:	08011322 	.word	0x08011322
 8009764:	08011626 	.word	0x08011626
 8009768:	0800fff2 	.word	0x0800fff2

0800976c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009770:	4604      	mov	r4, r0
 8009772:	b158      	cbz	r0, 800978c <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009774:	7d03      	ldrb	r3, [r0, #20]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d106      	bne.n	8009788 <tcp_err+0x1c>
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <tcp_err+0x24>)
 800977c:	f640 020d 	movw	r2, #2061	; 0x80d
 8009780:	4904      	ldr	r1, [pc, #16]	; (8009794 <tcp_err+0x28>)
 8009782:	4805      	ldr	r0, [pc, #20]	; (8009798 <tcp_err+0x2c>)
 8009784:	f005 f9be 	bl	800eb04 <iprintf>
    pcb->errf = err;
 8009788:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800978c:	bd38      	pop	{r3, r4, r5, pc}
 800978e:	bf00      	nop
 8009790:	08011322 	.word	0x08011322
 8009794:	080113e9 	.word	0x080113e9
 8009798:	0800fff2 	.word	0x0800fff2

0800979c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80097a2:	4604      	mov	r4, r0
 80097a4:	b940      	cbnz	r0, 80097b8 <tcp_poll+0x1c>
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <tcp_poll+0x38>)
 80097a8:	f640 023d 	movw	r2, #2109	; 0x83d
 80097ac:	490a      	ldr	r1, [pc, #40]	; (80097d8 <tcp_poll+0x3c>)
 80097ae:	480b      	ldr	r0, [pc, #44]	; (80097dc <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 80097b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80097b4:	f005 b9a6 	b.w	800eb04 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80097b8:	7d03      	ldrb	r3, [r0, #20]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d106      	bne.n	80097cc <tcp_poll+0x30>
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <tcp_poll+0x38>)
 80097c0:	f640 023e 	movw	r2, #2110	; 0x83e
 80097c4:	4906      	ldr	r1, [pc, #24]	; (80097e0 <tcp_poll+0x44>)
 80097c6:	4805      	ldr	r0, [pc, #20]	; (80097dc <tcp_poll+0x40>)
 80097c8:	f005 f99c 	bl	800eb04 <iprintf>
  pcb->poll = poll;
 80097cc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 80097d0:	7765      	strb	r5, [r4, #29]
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	08011322 	.word	0x08011322
 80097d8:	08011532 	.word	0x08011532
 80097dc:	0800fff2 	.word	0x0800fff2
 80097e0:	08011548 	.word	0x08011548

080097e4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80097e4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80097e6:	b930      	cbnz	r0, 80097f6 <tcp_next_iss+0x12>
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <tcp_next_iss+0x20>)
 80097ea:	f640 02af 	movw	r2, #2223	; 0x8af
 80097ee:	4906      	ldr	r1, [pc, #24]	; (8009808 <tcp_next_iss+0x24>)
 80097f0:	4806      	ldr	r0, [pc, #24]	; (800980c <tcp_next_iss+0x28>)
 80097f2:	f005 f987 	bl	800eb04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80097f6:	4b06      	ldr	r3, [pc, #24]	; (8009810 <tcp_next_iss+0x2c>)
 80097f8:	4a06      	ldr	r2, [pc, #24]	; (8009814 <tcp_next_iss+0x30>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	4410      	add	r0, r2
 8009800:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009802:	bd08      	pop	{r3, pc}
 8009804:	08011322 	.word	0x08011322
 8009808:	08011462 	.word	0x08011462
 800980c:	0800fff2 	.word	0x0800fff2
 8009810:	2000000c 	.word	0x2000000c
 8009814:	2000bee0 	.word	0x2000bee0

08009818 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4604      	mov	r4, r0
 800981c:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800981e:	b932      	cbnz	r2, 800982e <tcp_eff_send_mss_netif+0x16>
 8009820:	4b09      	ldr	r3, [pc, #36]	; (8009848 <tcp_eff_send_mss_netif+0x30>)
 8009822:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009826:	4909      	ldr	r1, [pc, #36]	; (800984c <tcp_eff_send_mss_netif+0x34>)
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <tcp_eff_send_mss_netif+0x38>)
 800982a:	f005 f96b 	bl	800eb04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800982e:	b14d      	cbz	r5, 8009844 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
 8009830:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009832:	b13b      	cbz	r3, 8009844 <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009834:	2b28      	cmp	r3, #40	; 0x28
 8009836:	bf8a      	itet	hi
 8009838:	3b28      	subhi	r3, #40	; 0x28
 800983a:	2300      	movls	r3, #0
 800983c:	b29b      	uxthhi	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800983e:	429c      	cmp	r4, r3
 8009840:	bf28      	it	cs
 8009842:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 8009844:	4620      	mov	r0, r4
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	08011322 	.word	0x08011322
 800984c:	080113c2 	.word	0x080113c2
 8009850:	0800fff2 	.word	0x0800fff2

08009854 <tcp_connect>:
{
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009858:	4604      	mov	r4, r0
 800985a:	b950      	cbnz	r0, 8009872 <tcp_connect+0x1e>
 800985c:	4b3f      	ldr	r3, [pc, #252]	; (800995c <tcp_connect+0x108>)
 800985e:	f240 4235 	movw	r2, #1077	; 0x435
 8009862:	493f      	ldr	r1, [pc, #252]	; (8009960 <tcp_connect+0x10c>)
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009864:	f06f 050f 	mvn.w	r5, #15
 8009868:	483e      	ldr	r0, [pc, #248]	; (8009964 <tcp_connect+0x110>)
 800986a:	f005 f94b 	bl	800eb04 <iprintf>
}
 800986e:	4628      	mov	r0, r5
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009872:	b921      	cbnz	r1, 800987e <tcp_connect+0x2a>
 8009874:	4b39      	ldr	r3, [pc, #228]	; (800995c <tcp_connect+0x108>)
 8009876:	f240 4236 	movw	r2, #1078	; 0x436
 800987a:	493b      	ldr	r1, [pc, #236]	; (8009968 <tcp_connect+0x114>)
 800987c:	e7f2      	b.n	8009864 <tcp_connect+0x10>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800987e:	7d03      	ldrb	r3, [r0, #20]
 8009880:	b14b      	cbz	r3, 8009896 <tcp_connect+0x42>
 8009882:	4b36      	ldr	r3, [pc, #216]	; (800995c <tcp_connect+0x108>)
 8009884:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8009888:	4938      	ldr	r1, [pc, #224]	; (800996c <tcp_connect+0x118>)
 800988a:	f06f 0509 	mvn.w	r5, #9
 800988e:	4835      	ldr	r0, [pc, #212]	; (8009964 <tcp_connect+0x110>)
 8009890:	f005 f938 	bl	800eb04 <iprintf>
 8009894:	e7eb      	b.n	800986e <tcp_connect+0x1a>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009896:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;
 8009898:	8302      	strh	r2, [r0, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800989a:	6043      	str	r3, [r0, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800989c:	7a00      	ldrb	r0, [r0, #8]
 800989e:	b130      	cbz	r0, 80098ae <tcp_connect+0x5a>
    netif = netif_get_by_index(pcb->netif_idx);
 80098a0:	f7ff f958 	bl	8008b54 <netif_get_by_index>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80098a4:	4605      	mov	r5, r0
  if (netif == NULL) {
 80098a6:	b9b0      	cbnz	r0, 80098d6 <tcp_connect+0x82>
    return ERR_RTE;
 80098a8:	f06f 0503 	mvn.w	r5, #3
 80098ac:	e7df      	b.n	800986e <tcp_connect+0x1a>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80098ae:	1d20      	adds	r0, r4, #4
 80098b0:	f7fd fe86 	bl	80075c0 <ip4_route>
 80098b4:	e7f6      	b.n	80098a4 <tcp_connect+0x50>
    pcb->local_port = tcp_new_port();
 80098b6:	f7ff fdfd 	bl	80094b4 <tcp_new_port>
 80098ba:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 80098bc:	b990      	cbnz	r0, 80098e4 <tcp_connect+0x90>
      return ERR_BUF;
 80098be:	f06f 0501 	mvn.w	r5, #1
 80098c2:	e7d4      	b.n	800986e <tcp_connect+0x1a>
 80098c4:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d03a      	beq.n	8009940 <tcp_connect+0xec>
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	4294      	cmp	r4, r2
 80098ce:	d1f9      	bne.n	80098c4 <tcp_connect+0x70>
 80098d0:	68e2      	ldr	r2, [r4, #12]
 80098d2:	60da      	str	r2, [r3, #12]
 80098d4:	e034      	b.n	8009940 <tcp_connect+0xec>
  if (ip_addr_isany(&pcb->local_ip)) {
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	b90b      	cbnz	r3, 80098de <tcp_connect+0x8a>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80098da:	686b      	ldr	r3, [r5, #4]
 80098dc:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80098de:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	d0e8      	beq.n	80098b6 <tcp_connect+0x62>
  iss = tcp_next_iss(pcb);
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7ff ff7d 	bl	80097e4 <tcp_next_iss>
  pcb->snd_nxt = iss;
 80098ea:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 80098ec:	3801      	subs	r0, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80098ee:	f44f 6306 	mov.w	r3, #2144	; 0x860
  pcb->rcv_nxt = 0;
 80098f2:	2200      	movs	r2, #0
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80098f4:	4629      	mov	r1, r5
  pcb->lastack = iss - 1;
 80098f6:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80098f8:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80098fa:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->mss = INITIAL_MSS;
 80098fc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 8009900:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009902:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009904:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009906:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009908:	1d22      	adds	r2, r4, #4
  pcb->snd_wnd = TCP_WND;
 800990a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 800990e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009910:	f7ff ff82 	bl	8009818 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 8009914:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009916:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009918:	2102      	movs	r1, #2
  pcb->cwnd = 1;
 800991a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800991e:	4620      	mov	r0, r4
  pcb->connected = connected;
 8009920:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009924:	f002 fdf2 	bl	800c50c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8009928:	4605      	mov	r5, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	d19f      	bne.n	800986e <tcp_connect+0x1a>
    pcb->state = SYN_SENT;
 800992e:	2302      	movs	r3, #2
 8009930:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8009932:	b12e      	cbz	r6, 8009940 <tcp_connect+0xec>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009934:	4a0e      	ldr	r2, [pc, #56]	; (8009970 <tcp_connect+0x11c>)
 8009936:	6813      	ldr	r3, [r2, #0]
 8009938:	429c      	cmp	r4, r3
 800993a:	d1c4      	bne.n	80098c6 <tcp_connect+0x72>
 800993c:	68e3      	ldr	r3, [r4, #12]
 800993e:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <tcp_connect+0x120>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	601c      	str	r4, [r3, #0]
 8009946:	60e2      	str	r2, [r4, #12]
 8009948:	f003 fab2 	bl	800ceb0 <tcp_timer_needed>
 800994c:	2201      	movs	r2, #1
 800994e:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <tcp_connect+0x124>)
    tcp_output(pcb);
 8009950:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8009952:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8009954:	f002 ffd6 	bl	800c904 <tcp_output>
 8009958:	e789      	b.n	800986e <tcp_connect+0x1a>
 800995a:	bf00      	nop
 800995c:	08011322 	.word	0x08011322
 8009960:	0801135d 	.word	0x0801135d
 8009964:	0800fff2 	.word	0x0800fff2
 8009968:	08011376 	.word	0x08011376
 800996c:	08011392 	.word	0x08011392
 8009970:	2000bee8 	.word	0x2000bee8
 8009974:	2000bedc 	.word	0x2000bedc
 8009978:	2000bed8 	.word	0x2000bed8

0800997c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800997c:	b510      	push	{r4, lr}
 800997e:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8009980:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009982:	b118      	cbz	r0, 800998c <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8009984:	f7ff fe92 	bl	80096ac <tcp_segs_free>
    pcb->ooseq = NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	6763      	str	r3, [r4, #116]	; 0x74
 800998c:	bd10      	pop	{r4, pc}
	...

08009990 <tcp_pcb_purge>:
{
 8009990:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009992:	4604      	mov	r4, r0
 8009994:	b940      	cbnz	r0, 80099a8 <tcp_pcb_purge+0x18>
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <tcp_pcb_purge+0x58>)
 8009998:	f640 0251 	movw	r2, #2129	; 0x851
 800999c:	4913      	ldr	r1, [pc, #76]	; (80099ec <tcp_pcb_purge+0x5c>)
 800999e:	4814      	ldr	r0, [pc, #80]	; (80099f0 <tcp_pcb_purge+0x60>)
}
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80099a4:	f005 b8ae 	b.w	800eb04 <iprintf>
  if (pcb->state != CLOSED &&
 80099a8:	7d03      	ldrb	r3, [r0, #20]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d91a      	bls.n	80099e4 <tcp_pcb_purge+0x54>
 80099ae:	2b0a      	cmp	r3, #10
 80099b0:	d018      	beq.n	80099e4 <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
 80099b2:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80099b4:	b118      	cbz	r0, 80099be <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 80099b6:	f7ff f9a9 	bl	8008d0c <pbuf_free>
      pcb->refused_data = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80099be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80099c0:	b113      	cbz	r3, 80099c8 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 80099c2:	4620      	mov	r0, r4
 80099c4:	f7ff ffda 	bl	800997c <tcp_free_ooseq>
    pcb->rtime = -1;
 80099c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 80099cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 80099ce:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 80099d0:	f7ff fe6c 	bl	80096ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80099d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80099d6:	f7ff fe69 	bl	80096ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80099de:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 80099e0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	bf00      	nop
 80099e8:	08011322 	.word	0x08011322
 80099ec:	0801148c 	.word	0x0801148c
 80099f0:	0800fff2 	.word	0x0800fff2

080099f4 <tcp_pcb_remove>:
{
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80099f8:	460c      	mov	r4, r1
 80099fa:	b931      	cbnz	r1, 8009a0a <tcp_pcb_remove+0x16>
 80099fc:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <tcp_pcb_remove+0xac>)
 80099fe:	f640 0283 	movw	r2, #2179	; 0x883
 8009a02:	4928      	ldr	r1, [pc, #160]	; (8009aa4 <tcp_pcb_remove+0xb0>)
 8009a04:	4828      	ldr	r0, [pc, #160]	; (8009aa8 <tcp_pcb_remove+0xb4>)
 8009a06:	f005 f87d 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009a0a:	b935      	cbnz	r5, 8009a1a <tcp_pcb_remove+0x26>
 8009a0c:	4b24      	ldr	r3, [pc, #144]	; (8009aa0 <tcp_pcb_remove+0xac>)
 8009a0e:	f640 0284 	movw	r2, #2180	; 0x884
 8009a12:	4926      	ldr	r1, [pc, #152]	; (8009aac <tcp_pcb_remove+0xb8>)
 8009a14:	4824      	ldr	r0, [pc, #144]	; (8009aa8 <tcp_pcb_remove+0xb4>)
 8009a16:	f005 f875 	bl	800eb04 <iprintf>
  TCP_RMV(pcblist, pcb);
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d137      	bne.n	8009a90 <tcp_pcb_remove+0x9c>
 8009a20:	68e3      	ldr	r3, [r4, #12]
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8009a26:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8009a28:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8009a2a:	f7ff ffb1 	bl	8009990 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8009a2e:	7d23      	ldrb	r3, [r4, #20]
 8009a30:	2b0a      	cmp	r3, #10
 8009a32:	d00a      	beq.n	8009a4a <tcp_pcb_remove+0x56>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d008      	beq.n	8009a4a <tcp_pcb_remove+0x56>
      (pcb->flags & TF_ACK_DELAY)) {
 8009a38:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009a3a:	07da      	lsls	r2, r3, #31
 8009a3c:	d505      	bpl.n	8009a4a <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 8009a3e:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8009a42:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8009a44:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8009a46:	f002 ff5d 	bl	800c904 <tcp_output>
  if (pcb->state != LISTEN) {
 8009a4a:	7d23      	ldrb	r3, [r4, #20]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d01a      	beq.n	8009a86 <tcp_pcb_remove+0x92>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009a50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009a52:	b133      	cbz	r3, 8009a62 <tcp_pcb_remove+0x6e>
 8009a54:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <tcp_pcb_remove+0xac>)
 8009a56:	f640 0293 	movw	r2, #2195	; 0x893
 8009a5a:	4915      	ldr	r1, [pc, #84]	; (8009ab0 <tcp_pcb_remove+0xbc>)
 8009a5c:	4812      	ldr	r0, [pc, #72]	; (8009aa8 <tcp_pcb_remove+0xb4>)
 8009a5e:	f005 f851 	bl	800eb04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009a62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009a64:	b133      	cbz	r3, 8009a74 <tcp_pcb_remove+0x80>
 8009a66:	4b0e      	ldr	r3, [pc, #56]	; (8009aa0 <tcp_pcb_remove+0xac>)
 8009a68:	f640 0294 	movw	r2, #2196	; 0x894
 8009a6c:	4911      	ldr	r1, [pc, #68]	; (8009ab4 <tcp_pcb_remove+0xc0>)
 8009a6e:	480e      	ldr	r0, [pc, #56]	; (8009aa8 <tcp_pcb_remove+0xb4>)
 8009a70:	f005 f848 	bl	800eb04 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009a74:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009a76:	b133      	cbz	r3, 8009a86 <tcp_pcb_remove+0x92>
 8009a78:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <tcp_pcb_remove+0xac>)
 8009a7a:	f640 0296 	movw	r2, #2198	; 0x896
 8009a7e:	490e      	ldr	r1, [pc, #56]	; (8009ab8 <tcp_pcb_remove+0xc4>)
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <tcp_pcb_remove+0xb4>)
 8009a82:	f005 f83f 	bl	800eb04 <iprintf>
  pcb->state = CLOSED;
 8009a86:	2300      	movs	r3, #0
 8009a88:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8009a8a:	82e3      	strh	r3, [r4, #22]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0c7      	beq.n	8009a24 <tcp_pcb_remove+0x30>
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	4294      	cmp	r4, r2
 8009a98:	d1f9      	bne.n	8009a8e <tcp_pcb_remove+0x9a>
 8009a9a:	68e2      	ldr	r2, [r4, #12]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	e7c1      	b.n	8009a24 <tcp_pcb_remove+0x30>
 8009aa0:	08011322 	.word	0x08011322
 8009aa4:	080114a7 	.word	0x080114a7
 8009aa8:	0800fff2 	.word	0x0800fff2
 8009aac:	080114c3 	.word	0x080114c3
 8009ab0:	080114e3 	.word	0x080114e3
 8009ab4:	080114fb 	.word	0x080114fb
 8009ab8:	08011514 	.word	0x08011514

08009abc <tcp_abandon>:
{
 8009abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac0:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	b948      	cbnz	r0, 8009ada <tcp_abandon+0x1e>
 8009ac6:	4b36      	ldr	r3, [pc, #216]	; (8009ba0 <tcp_abandon+0xe4>)
 8009ac8:	f240 223d 	movw	r2, #573	; 0x23d
 8009acc:	4935      	ldr	r1, [pc, #212]	; (8009ba4 <tcp_abandon+0xe8>)
 8009ace:	4836      	ldr	r0, [pc, #216]	; (8009ba8 <tcp_abandon+0xec>)
}
 8009ad0:	b004      	add	sp, #16
 8009ad2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009ad6:	f005 b815 	b.w	800eb04 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009ada:	7d03      	ldrb	r3, [r0, #20]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d106      	bne.n	8009aee <tcp_abandon+0x32>
 8009ae0:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <tcp_abandon+0xe4>)
 8009ae2:	f240 2241 	movw	r2, #577	; 0x241
 8009ae6:	4931      	ldr	r1, [pc, #196]	; (8009bac <tcp_abandon+0xf0>)
 8009ae8:	482f      	ldr	r0, [pc, #188]	; (8009ba8 <tcp_abandon+0xec>)
 8009aea:	f005 f80b 	bl	800eb04 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8009aee:	7d23      	ldrb	r3, [r4, #20]
 8009af0:	2b0a      	cmp	r3, #10
 8009af2:	d109      	bne.n	8009b08 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009af4:	4621      	mov	r1, r4
 8009af6:	482e      	ldr	r0, [pc, #184]	; (8009bb0 <tcp_abandon+0xf4>)
 8009af8:	f7ff ff7c 	bl	80099f4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009afc:	4620      	mov	r0, r4
}
 8009afe:	b004      	add	sp, #16
 8009b00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 8009b04:	f7ff bd3a 	b.w	800957c <tcp_free>
    seqno = pcb->snd_nxt;
 8009b08:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8009b0c:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8009b10:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8009b14:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8009b18:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8009b1a:	b99b      	cbnz	r3, 8009b44 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 8009b1c:	b13d      	cbz	r5, 8009b2e <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b1e:	4a25      	ldr	r2, [pc, #148]	; (8009bb4 <tcp_abandon+0xf8>)
 8009b20:	6813      	ldr	r3, [r2, #0]
 8009b22:	429c      	cmp	r4, r3
 8009b24:	d106      	bne.n	8009b34 <tcp_abandon+0x78>
 8009b26:	68e3      	ldr	r3, [r4, #12]
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	2500      	movs	r5, #0
 8009b2c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8009b2e:	462e      	mov	r6, r5
 8009b30:	e00f      	b.n	8009b52 <tcp_abandon+0x96>
 8009b32:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0f8      	beq.n	8009b2a <tcp_abandon+0x6e>
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	4294      	cmp	r4, r2
 8009b3c:	d1f9      	bne.n	8009b32 <tcp_abandon+0x76>
 8009b3e:	68e2      	ldr	r2, [r4, #12]
 8009b40:	60da      	str	r2, [r3, #12]
 8009b42:	e7f2      	b.n	8009b2a <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b44:	4621      	mov	r1, r4
 8009b46:	481c      	ldr	r0, [pc, #112]	; (8009bb8 <tcp_abandon+0xfc>)
 8009b48:	f7ff ff54 	bl	80099f4 <tcp_pcb_remove>
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <tcp_abandon+0x100>)
 8009b50:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009b52:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009b54:	b108      	cbz	r0, 8009b5a <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 8009b56:	f7ff fda9 	bl	80096ac <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009b5a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009b5c:	b108      	cbz	r0, 8009b62 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 8009b5e:	f7ff fda5 	bl	80096ac <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009b62:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009b64:	b108      	cbz	r0, 8009b6a <tcp_abandon+0xae>
      tcp_segs_free(pcb->ooseq);
 8009b66:	f7ff fda1 	bl	80096ac <tcp_segs_free>
    if (send_rst) {
 8009b6a:	b156      	cbz	r6, 8009b82 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009b6c:	8b23      	ldrh	r3, [r4, #24]
 8009b6e:	4652      	mov	r2, sl
 8009b70:	9501      	str	r5, [sp, #4]
 8009b72:	4649      	mov	r1, r9
 8009b74:	9302      	str	r3, [sp, #8]
 8009b76:	1d23      	adds	r3, r4, #4
 8009b78:	4620      	mov	r0, r4
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	f002 fe4b 	bl	800c818 <tcp_rst>
    tcp_free(pcb);
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7ff fcfa 	bl	800957c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009b88:	b13f      	cbz	r7, 8009b9a <tcp_abandon+0xde>
 8009b8a:	f06f 010c 	mvn.w	r1, #12
 8009b8e:	4640      	mov	r0, r8
 8009b90:	463b      	mov	r3, r7
}
 8009b92:	b004      	add	sp, #16
 8009b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009b98:	4718      	bx	r3
}
 8009b9a:	b004      	add	sp, #16
 8009b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba0:	08011322 	.word	0x08011322
 8009ba4:	08011262 	.word	0x08011262
 8009ba8:	0800fff2 	.word	0x0800fff2
 8009bac:	0801127b 	.word	0x0801127b
 8009bb0:	2000beec 	.word	0x2000beec
 8009bb4:	2000bee8 	.word	0x2000bee8
 8009bb8:	2000bedc 	.word	0x2000bedc
 8009bbc:	2000bed8 	.word	0x2000bed8

08009bc0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	f7ff bf7b 	b.w	8009abc <tcp_abandon>
	...

08009bc8 <tcp_netif_ip_addr_changed_pcblist>:
{
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009bcc:	4605      	mov	r5, r0
 8009bce:	b930      	cbnz	r0, 8009bde <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009bd0:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8009bd2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009bd6:	4909      	ldr	r1, [pc, #36]	; (8009bfc <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8009bd8:	4809      	ldr	r0, [pc, #36]	; (8009c00 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8009bda:	f004 ff93 	bl	800eb04 <iprintf>
  while (pcb != NULL) {
 8009bde:	b904      	cbnz	r4, 8009be2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	68e6      	ldr	r6, [r4, #12]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d102      	bne.n	8009bf2 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7ff ffe7 	bl	8009bc0 <tcp_abort>
      pcb = pcb->next;
 8009bf2:	4634      	mov	r4, r6
 8009bf4:	e7f3      	b.n	8009bde <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009bf6:	bf00      	nop
 8009bf8:	08011322 	.word	0x08011322
 8009bfc:	0801142e 	.word	0x0801142e
 8009c00:	0800fff2 	.word	0x0800fff2

08009c04 <tcp_netif_ip_addr_changed>:
{
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
 8009c08:	4604      	mov	r4, r0
 8009c0a:	b180      	cbz	r0, 8009c2e <tcp_netif_ip_addr_changed+0x2a>
 8009c0c:	6803      	ldr	r3, [r0, #0]
 8009c0e:	b173      	cbz	r3, 8009c2e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <tcp_netif_ip_addr_changed+0x3c>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	f7ff ffd8 	bl	8009bc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <tcp_netif_ip_addr_changed+0x40>)
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	6819      	ldr	r1, [r3, #0]
 8009c1e:	f7ff ffd3 	bl	8009bc8 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009c22:	b125      	cbz	r5, 8009c2e <tcp_netif_ip_addr_changed+0x2a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b113      	cbz	r3, 8009c2e <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <tcp_netif_ip_addr_changed+0x44>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	b903      	cbnz	r3, 8009c30 <tcp_netif_ip_addr_changed+0x2c>
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009c30:	6819      	ldr	r1, [r3, #0]
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009c36:	bf04      	itt	eq
 8009c38:	682a      	ldreq	r2, [r5, #0]
 8009c3a:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	e7f5      	b.n	8009c2c <tcp_netif_ip_addr_changed+0x28>
 8009c40:	2000bedc 	.word	0x2000bedc
 8009c44:	2000bee8 	.word	0x2000bee8
 8009c48:	2000bee4 	.word	0x2000bee4

08009c4c <tcp_kill_state>:
{
 8009c4c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009c4e:	f1a0 0308 	sub.w	r3, r0, #8
{
 8009c52:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d906      	bls.n	8009c66 <tcp_kill_state+0x1a>
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <tcp_kill_state+0x4c>)
 8009c5a:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009c5e:	490f      	ldr	r1, [pc, #60]	; (8009c9c <tcp_kill_state+0x50>)
 8009c60:	480f      	ldr	r0, [pc, #60]	; (8009ca0 <tcp_kill_state+0x54>)
 8009c62:	f004 ff4f 	bl	800eb04 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c66:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <tcp_kill_state+0x58>)
  inactivity = 0;
 8009c68:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c6a:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8009c6c:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <tcp_kill_state+0x5c>)
 8009c70:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c72:	b921      	cbnz	r1, 8009c7e <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8009c74:	b170      	cbz	r0, 8009c94 <tcp_kill_state+0x48>
}
 8009c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8009c7a:	f7ff bf1f 	b.w	8009abc <tcp_abandon>
    if (pcb->state == state) {
 8009c7e:	7d0b      	ldrb	r3, [r1, #20]
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d105      	bne.n	8009c90 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c84:	6a0b      	ldr	r3, [r1, #32]
 8009c86:	1aeb      	subs	r3, r5, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	bf9c      	itt	ls
 8009c8c:	461a      	movls	r2, r3
 8009c8e:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c90:	68c9      	ldr	r1, [r1, #12]
 8009c92:	e7ee      	b.n	8009c72 <tcp_kill_state+0x26>
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
 8009c96:	bf00      	nop
 8009c98:	08011322 	.word	0x08011322
 8009c9c:	08011420 	.word	0x08011420
 8009ca0:	0800fff2 	.word	0x0800fff2
 8009ca4:	2000bedc 	.word	0x2000bedc
 8009ca8:	2000bee0 	.word	0x2000bee0

08009cac <tcp_alloc>:
{
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f7fe fdb9 	bl	8008828 <memp_malloc>
  if (pcb == NULL) {
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d136      	bne.n	8009d2a <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009cbc:	4f43      	ldr	r7, [pc, #268]	; (8009dcc <tcp_alloc+0x120>)
 8009cbe:	6838      	ldr	r0, [r7, #0]
  while (pcb != NULL) {
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d15f      	bne.n	8009d84 <tcp_alloc+0xd8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cc4:	4b42      	ldr	r3, [pc, #264]	; (8009dd0 <tcp_alloc+0x124>)
  inactivity = 0;
 8009cc6:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cc8:	4e42      	ldr	r6, [pc, #264]	; (8009dd4 <tcp_alloc+0x128>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cca:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ccc:	6834      	ldr	r4, [r6, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d163      	bne.n	8009d9a <tcp_alloc+0xee>
  if (inactive != NULL) {
 8009cd2:	b108      	cbz	r0, 8009cd8 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8009cd4:	f7ff ff74 	bl	8009bc0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f7fe fda5 	bl	8008828 <memp_malloc>
    if (pcb == NULL) {
 8009cde:	4604      	mov	r4, r0
 8009ce0:	bb18      	cbnz	r0, 8009d2a <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 8009ce2:	2009      	movs	r0, #9
 8009ce4:	f7ff ffb2 	bl	8009c4c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f7fe fd9d 	bl	8008828 <memp_malloc>
      if (pcb == NULL) {
 8009cee:	4604      	mov	r4, r0
 8009cf0:	b9d8      	cbnz	r0, 8009d2a <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 8009cf2:	2008      	movs	r0, #8
 8009cf4:	f7ff ffaa 	bl	8009c4c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f7fe fd95 	bl	8008828 <memp_malloc>
        if (pcb == NULL) {
 8009cfe:	4604      	mov	r4, r0
 8009d00:	b998      	cbnz	r0, 8009d2a <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d02:	062b      	lsls	r3, r5, #24
 8009d04:	d451      	bmi.n	8009daa <tcp_alloc+0xfe>
  if (mprio == 0) {
 8009d06:	b15d      	cbz	r5, 8009d20 <tcp_alloc+0x74>
 8009d08:	462a      	mov	r2, r5
  mprio--;
 8009d0a:	3a01      	subs	r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d0c:	683b      	ldr	r3, [r7, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d0e:	6836      	ldr	r6, [r6, #0]
  inactivity = 0;
 8009d10:	2100      	movs	r1, #0
  mprio--;
 8009d12:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d14a      	bne.n	8009dae <tcp_alloc+0x102>
  if (inactive != NULL) {
 8009d18:	b114      	cbz	r4, 8009d20 <tcp_alloc+0x74>
    tcp_abort(inactive);
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff ff50 	bl	8009bc0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d20:	2001      	movs	r0, #1
 8009d22:	f7fe fd81 	bl	8008828 <memp_malloc>
  if (pcb != NULL) {
 8009d26:	4604      	mov	r4, r0
 8009d28:	b350      	cbz	r0, 8009d80 <tcp_alloc+0xd4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009d2a:	229c      	movs	r2, #156	; 0x9c
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f004 fee0 	bl	800eaf4 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009d34:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 8009d38:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8009d3c:	7565      	strb	r5, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009d3e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009d40:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009d42:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8009d44:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 8009d48:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8009d4a:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8009d4e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8009d52:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009d54:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <tcp_alloc+0x12c>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009d58:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009d5c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8009d62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->rtime = -1;
 8009d66:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009d68:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009d6a:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <tcp_alloc+0x130>)
    pcb->cwnd = 1;
 8009d6c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009d70:	4a18      	ldr	r2, [pc, #96]	; (8009dd4 <tcp_alloc+0x128>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009d72:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    pcb->tmr = tcp_ticks;
 8009d76:	6812      	ldr	r2, [r2, #0]
 8009d78:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009d7a:	4a19      	ldr	r2, [pc, #100]	; (8009de0 <tcp_alloc+0x134>)
 8009d7c:	7812      	ldrb	r2, [r2, #0]
 8009d7e:	77a2      	strb	r2, [r4, #30]
}
 8009d80:	4620      	mov	r0, r4
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8009d84:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 8009d86:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8009d88:	071a      	lsls	r2, r3, #28
 8009d8a:	d504      	bpl.n	8009d96 <tcp_alloc+0xea>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009d8c:	f023 0308 	bic.w	r3, r3, #8
 8009d90:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009d92:	f7ff fbb7 	bl	8009504 <tcp_close_shutdown_fin>
{
 8009d96:	4620      	mov	r0, r4
 8009d98:	e792      	b.n	8009cc0 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d9a:	6a1a      	ldr	r2, [r3, #32]
 8009d9c:	1aa2      	subs	r2, r4, r2
 8009d9e:	428a      	cmp	r2, r1
 8009da0:	bf24      	itt	cs
 8009da2:	4618      	movcs	r0, r3
 8009da4:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	e791      	b.n	8009cce <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009daa:	227f      	movs	r2, #127	; 0x7f
 8009dac:	e7ad      	b.n	8009d0a <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8009dae:	7d5f      	ldrb	r7, [r3, #21]
 8009db0:	4297      	cmp	r7, r2
 8009db2:	d304      	bcc.n	8009dbe <tcp_alloc+0x112>
 8009db4:	d107      	bne.n	8009dc6 <tcp_alloc+0x11a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009db6:	6a18      	ldr	r0, [r3, #32]
 8009db8:	1a30      	subs	r0, r6, r0
 8009dba:	4288      	cmp	r0, r1
 8009dbc:	d303      	bcc.n	8009dc6 <tcp_alloc+0x11a>
      inactivity = tcp_ticks - pcb->tmr;
 8009dbe:	6a19      	ldr	r1, [r3, #32]
    if ((pcb->prio < mprio) ||
 8009dc0:	463a      	mov	r2, r7
      inactivity = tcp_ticks - pcb->tmr;
 8009dc2:	461c      	mov	r4, r3
 8009dc4:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	e7a4      	b.n	8009d14 <tcp_alloc+0x68>
 8009dca:	bf00      	nop
 8009dcc:	2000bedc 	.word	0x2000bedc
 8009dd0:	2000beec 	.word	0x2000beec
 8009dd4:	2000bee0 	.word	0x2000bee0
 8009dd8:	08009f89 	.word	0x08009f89
 8009ddc:	006ddd00 	.word	0x006ddd00
 8009de0:	20006d4a 	.word	0x20006d4a

08009de4 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009de4:	2040      	movs	r0, #64	; 0x40
 8009de6:	f7ff bf61 	b.w	8009cac <tcp_alloc>
	...

08009dec <tcp_close_shutdown>:
{
 8009dec:	b530      	push	{r4, r5, lr}
 8009dee:	460d      	mov	r5, r1
 8009df0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009df2:	4604      	mov	r4, r0
 8009df4:	b930      	cbnz	r0, 8009e04 <tcp_close_shutdown+0x18>
 8009df6:	4b4a      	ldr	r3, [pc, #296]	; (8009f20 <tcp_close_shutdown+0x134>)
 8009df8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009dfc:	4949      	ldr	r1, [pc, #292]	; (8009f24 <tcp_close_shutdown+0x138>)
 8009dfe:	484a      	ldr	r0, [pc, #296]	; (8009f28 <tcp_close_shutdown+0x13c>)
 8009e00:	f004 fe80 	bl	800eb04 <iprintf>
 8009e04:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	d03f      	beq.n	8009e8a <tcp_close_shutdown+0x9e>
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d001      	beq.n	8009e12 <tcp_close_shutdown+0x26>
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d13b      	bne.n	8009e8a <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009e12:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009e14:	b91a      	cbnz	r2, 8009e1e <tcp_close_shutdown+0x32>
 8009e16:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009e18:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8009e1c:	d035      	beq.n	8009e8a <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009e1e:	8b63      	ldrh	r3, [r4, #26]
 8009e20:	06db      	lsls	r3, r3, #27
 8009e22:	d406      	bmi.n	8009e32 <tcp_close_shutdown+0x46>
 8009e24:	4b3e      	ldr	r3, [pc, #248]	; (8009f20 <tcp_close_shutdown+0x134>)
 8009e26:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009e2a:	4940      	ldr	r1, [pc, #256]	; (8009f2c <tcp_close_shutdown+0x140>)
 8009e2c:	483e      	ldr	r0, [pc, #248]	; (8009f28 <tcp_close_shutdown+0x13c>)
 8009e2e:	f004 fe69 	bl	800eb04 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e32:	8b23      	ldrh	r3, [r4, #24]
 8009e34:	4620      	mov	r0, r4
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	8ae3      	ldrh	r3, [r4, #22]
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	1d23      	adds	r3, r4, #4
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	4623      	mov	r3, r4
 8009e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e44:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009e46:	f002 fce7 	bl	800c818 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff fda0 	bl	8009990 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009e50:	4a37      	ldr	r2, [pc, #220]	; (8009f30 <tcp_close_shutdown+0x144>)
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d110      	bne.n	8009e7a <tcp_close_shutdown+0x8e>
 8009e58:	68e3      	ldr	r3, [r4, #12]
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2201      	movs	r2, #1
 8009e60:	60e3      	str	r3, [r4, #12]
 8009e62:	4b34      	ldr	r3, [pc, #208]	; (8009f34 <tcp_close_shutdown+0x148>)
 8009e64:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8009e66:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <tcp_close_shutdown+0x14c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429c      	cmp	r4, r3
 8009e6c:	d122      	bne.n	8009eb4 <tcp_close_shutdown+0xc8>
        tcp_trigger_input_pcb_close();
 8009e6e:	f001 fe45 	bl	800bafc <tcp_trigger_input_pcb_close>
}
 8009e72:	2000      	movs	r0, #0
 8009e74:	b005      	add	sp, #20
 8009e76:	bd30      	pop	{r4, r5, pc}
 8009e78:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0ee      	beq.n	8009e5c <tcp_close_shutdown+0x70>
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	4294      	cmp	r4, r2
 8009e82:	d1f9      	bne.n	8009e78 <tcp_close_shutdown+0x8c>
 8009e84:	68e2      	ldr	r2, [r4, #12]
 8009e86:	60da      	str	r2, [r3, #12]
 8009e88:	e7e8      	b.n	8009e5c <tcp_close_shutdown+0x70>
  switch (pcb->state) {
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d01f      	beq.n	8009ece <tcp_close_shutdown+0xe2>
 8009e8e:	d307      	bcc.n	8009ea0 <tcp_close_shutdown+0xb4>
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d03d      	beq.n	8009f10 <tcp_close_shutdown+0x124>
      return tcp_close_shutdown_fin(pcb);
 8009e94:	4620      	mov	r0, r4
}
 8009e96:	b005      	add	sp, #20
 8009e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8009e9c:	f7ff bb32 	b.w	8009504 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 8009ea0:	8ae3      	ldrh	r3, [r4, #22]
 8009ea2:	b13b      	cbz	r3, 8009eb4 <tcp_close_shutdown+0xc8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009ea4:	4a25      	ldr	r2, [pc, #148]	; (8009f3c <tcp_close_shutdown+0x150>)
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d108      	bne.n	8009ebe <tcp_close_shutdown+0xd2>
 8009eac:	68e3      	ldr	r3, [r4, #12]
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fb61 	bl	800957c <tcp_free>
      break;
 8009eba:	e7da      	b.n	8009e72 <tcp_close_shutdown+0x86>
 8009ebc:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f6      	beq.n	8009eb0 <tcp_close_shutdown+0xc4>
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	4294      	cmp	r4, r2
 8009ec6:	d1f9      	bne.n	8009ebc <tcp_close_shutdown+0xd0>
 8009ec8:	68e2      	ldr	r2, [r4, #12]
 8009eca:	60da      	str	r2, [r3, #12]
 8009ecc:	e7f0      	b.n	8009eb0 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009ece:	491c      	ldr	r1, [pc, #112]	; (8009f40 <tcp_close_shutdown+0x154>)
      pcb->listener = NULL;
 8009ed0:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009ed2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009ed6:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009ed8:	b9a2      	cbnz	r2, 8009f04 <tcp_close_shutdown+0x118>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009eda:	3301      	adds	r3, #1
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	d1f8      	bne.n	8009ed2 <tcp_close_shutdown+0xe6>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4818      	ldr	r0, [pc, #96]	; (8009f44 <tcp_close_shutdown+0x158>)
 8009ee4:	f7ff fd86 	bl	80099f4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009ee8:	7d23      	ldrb	r3, [r4, #20]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d105      	bne.n	8009efa <tcp_close_shutdown+0x10e>
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <tcp_close_shutdown+0x134>)
 8009ef0:	22df      	movs	r2, #223	; 0xdf
 8009ef2:	4915      	ldr	r1, [pc, #84]	; (8009f48 <tcp_close_shutdown+0x15c>)
 8009ef4:	480c      	ldr	r0, [pc, #48]	; (8009f28 <tcp_close_shutdown+0x13c>)
 8009ef6:	f004 fe05 	bl	800eb04 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009efa:	4621      	mov	r1, r4
 8009efc:	2002      	movs	r0, #2
 8009efe:	f7fe fcaf 	bl	8008860 <memp_free>
 8009f02:	e7b6      	b.n	8009e72 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 8009f04:	6fd5      	ldr	r5, [r2, #124]	; 0x7c
 8009f06:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8009f08:	bf08      	it	eq
 8009f0a:	67d0      	streq	r0, [r2, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009f0c:	68d2      	ldr	r2, [r2, #12]
 8009f0e:	e7e3      	b.n	8009ed8 <tcp_close_shutdown+0xec>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009f10:	4621      	mov	r1, r4
 8009f12:	4807      	ldr	r0, [pc, #28]	; (8009f30 <tcp_close_shutdown+0x144>)
 8009f14:	f7ff fd6e 	bl	80099f4 <tcp_pcb_remove>
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <tcp_close_shutdown+0x148>)
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	e7c9      	b.n	8009eb4 <tcp_close_shutdown+0xc8>
 8009f20:	08011322 	.word	0x08011322
 8009f24:	080112d0 	.word	0x080112d0
 8009f28:	0800fff2 	.word	0x0800fff2
 8009f2c:	080112f0 	.word	0x080112f0
 8009f30:	2000bedc 	.word	0x2000bedc
 8009f34:	2000bed8 	.word	0x2000bed8
 8009f38:	2000bef0 	.word	0x2000bef0
 8009f3c:	2000bee8 	.word	0x2000bee8
 8009f40:	0801147c 	.word	0x0801147c
 8009f44:	2000bee4 	.word	0x2000bee4
 8009f48:	08011309 	.word	0x08011309

08009f4c <tcp_close>:
{
 8009f4c:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f4e:	b158      	cbz	r0, 8009f68 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8009f50:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8009f52:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8009f54:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009f56:	bf1e      	ittt	ne
 8009f58:	8b43      	ldrhne	r3, [r0, #26]
 8009f5a:	f043 0310 	orrne.w	r3, r3, #16
 8009f5e:	8343      	strhne	r3, [r0, #26]
}
 8009f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8009f64:	f7ff bf42 	b.w	8009dec <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f68:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <tcp_close+0x30>)
 8009f6a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009f6e:	4904      	ldr	r1, [pc, #16]	; (8009f80 <tcp_close+0x34>)
 8009f70:	4804      	ldr	r0, [pc, #16]	; (8009f84 <tcp_close+0x38>)
 8009f72:	f004 fdc7 	bl	800eb04 <iprintf>
}
 8009f76:	f06f 000f 	mvn.w	r0, #15
 8009f7a:	bd08      	pop	{r3, pc}
 8009f7c:	08011322 	.word	0x08011322
 8009f80:	080112b9 	.word	0x080112b9
 8009f84:	0800fff2 	.word	0x0800fff2

08009f88 <tcp_recv_null>:
{
 8009f88:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f8a:	4608      	mov	r0, r1
{
 8009f8c:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f8e:	b949      	cbnz	r1, 8009fa4 <tcp_recv_null+0x1c>
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <tcp_recv_null+0x3c>)
 8009f92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009f96:	490c      	ldr	r1, [pc, #48]	; (8009fc8 <tcp_recv_null+0x40>)
 8009f98:	480c      	ldr	r0, [pc, #48]	; (8009fcc <tcp_recv_null+0x44>)
 8009f9a:	f004 fdb3 	bl	800eb04 <iprintf>
 8009f9e:	f06f 000f 	mvn.w	r0, #15
 8009fa2:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8009fa4:	b13a      	cbz	r2, 8009fb6 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8009fa6:	8911      	ldrh	r1, [r2, #8]
 8009fa8:	f7ff fb36 	bl	8009618 <tcp_recved>
    pbuf_free(p);
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7fe fead 	bl	8008d0c <pbuf_free>
  return ERR_OK;
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1fb      	bne.n	8009fb2 <tcp_recv_null+0x2a>
}
 8009fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8009fbe:	f7ff bfc5 	b.w	8009f4c <tcp_close>
 8009fc2:	bf00      	nop
 8009fc4:	08011322 	.word	0x08011322
 8009fc8:	080115b3 	.word	0x080115b3
 8009fcc:	0800fff2 	.word	0x0800fff2

08009fd0 <tcp_process_refused_data>:
{
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	b950      	cbnz	r0, 8009fec <tcp_process_refused_data+0x1c>
 8009fd6:	f06f 050f 	mvn.w	r5, #15
 8009fda:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <tcp_process_refused_data+0x80>)
 8009fdc:	f240 6209 	movw	r2, #1545	; 0x609
 8009fe0:	491c      	ldr	r1, [pc, #112]	; (800a054 <tcp_process_refused_data+0x84>)
 8009fe2:	481d      	ldr	r0, [pc, #116]	; (800a058 <tcp_process_refused_data+0x88>)
 8009fe4:	f004 fd8e 	bl	800eb04 <iprintf>
}
 8009fe8:	4628      	mov	r0, r5
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8009fec:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8009fee:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ff0:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
 8009ff4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009ff6:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ff8:	b1dd      	cbz	r5, 800a032 <tcp_process_refused_data+0x62>
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	6900      	ldr	r0, [r0, #16]
 800a000:	47a8      	blx	r5
 800a002:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800a004:	b9e0      	cbnz	r0, 800a040 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a006:	06bb      	lsls	r3, r7, #26
 800a008:	d5ee      	bpl.n	8009fe8 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a00a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800a00c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a010:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 800a014:	bf1c      	itt	ne
 800a016:	3301      	addne	r3, #1
 800a018:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	d0e4      	beq.n	8009fe8 <tcp_process_refused_data+0x18>
 800a01e:	2300      	movs	r3, #0
 800a020:	4621      	mov	r1, r4
 800a022:	6920      	ldr	r0, [r4, #16]
 800a024:	461a      	mov	r2, r3
 800a026:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800a028:	300d      	adds	r0, #13
 800a02a:	d1dd      	bne.n	8009fe8 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800a02c:	f06f 050c 	mvn.w	r5, #12
 800a030:	e7da      	b.n	8009fe8 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a032:	4601      	mov	r1, r0
 800a034:	462b      	mov	r3, r5
 800a036:	4632      	mov	r2, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	f7ff ffa5 	bl	8009f88 <tcp_recv_null>
 800a03e:	e7e0      	b.n	800a002 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800a040:	f110 050d 	adds.w	r5, r0, #13
 800a044:	d0f2      	beq.n	800a02c <tcp_process_refused_data+0x5c>
      pcb->refused_data = refused_data;
 800a046:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800a048:	f06f 0504 	mvn.w	r5, #4
 800a04c:	e7cc      	b.n	8009fe8 <tcp_process_refused_data+0x18>
 800a04e:	bf00      	nop
 800a050:	08011322 	.word	0x08011322
 800a054:	08011566 	.word	0x08011566
 800a058:	0800fff2 	.word	0x0800fff2

0800a05c <tcp_fasttmr>:
{
 800a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800a060:	4d1b      	ldr	r5, [pc, #108]	; (800a0d0 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800a062:	4f1c      	ldr	r7, [pc, #112]	; (800a0d4 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800a064:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800a066:	4e1c      	ldr	r6, [pc, #112]	; (800a0d8 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800a068:	3301      	adds	r3, #1
 800a06a:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800a06c:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800a06e:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800a072:	b90c      	cbnz	r4, 800a078 <tcp_fasttmr+0x1c>
}
 800a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800a078:	782b      	ldrb	r3, [r5, #0]
 800a07a:	7fa2      	ldrb	r2, [r4, #30]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d024      	beq.n	800a0ca <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800a080:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800a082:	8b63      	ldrh	r3, [r4, #26]
 800a084:	07d9      	lsls	r1, r3, #31
 800a086:	d509      	bpl.n	800a09c <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800a088:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800a08c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a08e:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800a090:	f002 fc38 	bl	800c904 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a094:	8b63      	ldrh	r3, [r4, #26]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800a09c:	8b63      	ldrh	r3, [r4, #26]
 800a09e:	071a      	lsls	r2, r3, #28
 800a0a0:	d505      	bpl.n	800a0ae <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a0a2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800a0a6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a0a8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800a0aa:	f7ff fa2b 	bl	8009504 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800a0ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800a0b0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800a0b4:	b13b      	cbz	r3, 800a0c6 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800a0b6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800a0b8:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800a0bc:	f7ff ff88 	bl	8009fd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a0c0:	7833      	ldrb	r3, [r6, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1d2      	bne.n	800a06c <tcp_fasttmr+0x10>
{
 800a0c6:	464c      	mov	r4, r9
 800a0c8:	e7d3      	b.n	800a072 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800a0ca:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a0ce:	e7fa      	b.n	800a0c6 <tcp_fasttmr+0x6a>
 800a0d0:	20006d4a 	.word	0x20006d4a
 800a0d4:	2000bedc 	.word	0x2000bedc
 800a0d8:	2000bed8 	.word	0x2000bed8

0800a0dc <tcp_slowtmr>:
{
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a0e0:	4e95      	ldr	r6, [pc, #596]	; (800a338 <tcp_slowtmr+0x25c>)
{
 800a0e2:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 800a0e4:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a36c <tcp_slowtmr+0x290>
  ++tcp_ticks;
 800a0e8:	6833      	ldr	r3, [r6, #0]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800a0ee:	4b93      	ldr	r3, [pc, #588]	; (800a33c <tcp_slowtmr+0x260>)
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800a0f8:	4b91      	ldr	r3, [pc, #580]	; (800a340 <tcp_slowtmr+0x264>)
  prev = NULL;
 800a0fa:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a0fe:	4f91      	ldr	r7, [pc, #580]	; (800a344 <tcp_slowtmr+0x268>)
  pcb = tcp_active_pcbs;
 800a100:	681c      	ldr	r4, [r3, #0]
 800a102:	4698      	mov	r8, r3
  while (pcb != NULL) {
 800a104:	b96c      	cbnz	r4, 800a122 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 800a106:	4f90      	ldr	r7, [pc, #576]	; (800a348 <tcp_slowtmr+0x26c>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a108:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800a344 <tcp_slowtmr+0x268>
  pcb = tcp_tw_pcbs;
 800a10c:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a10e:	f8df a260 	ldr.w	sl, [pc, #608]	; 800a370 <tcp_slowtmr+0x294>
 800a112:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800a350 <tcp_slowtmr+0x274>
  while (pcb != NULL) {
 800a116:	2d00      	cmp	r5, #0
 800a118:	f040 81c6 	bne.w	800a4a8 <tcp_slowtmr+0x3cc>
}
 800a11c:	b007      	add	sp, #28
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a122:	7d23      	ldrb	r3, [r4, #20]
 800a124:	b933      	cbnz	r3, 800a134 <tcp_slowtmr+0x58>
 800a126:	463b      	mov	r3, r7
 800a128:	f240 42be 	movw	r2, #1214	; 0x4be
 800a12c:	4987      	ldr	r1, [pc, #540]	; (800a34c <tcp_slowtmr+0x270>)
 800a12e:	4888      	ldr	r0, [pc, #544]	; (800a350 <tcp_slowtmr+0x274>)
 800a130:	f004 fce8 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a134:	7d23      	ldrb	r3, [r4, #20]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d106      	bne.n	800a148 <tcp_slowtmr+0x6c>
 800a13a:	463b      	mov	r3, r7
 800a13c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a140:	4984      	ldr	r1, [pc, #528]	; (800a354 <tcp_slowtmr+0x278>)
 800a142:	4883      	ldr	r0, [pc, #524]	; (800a350 <tcp_slowtmr+0x274>)
 800a144:	f004 fcde 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a148:	7d23      	ldrb	r3, [r4, #20]
 800a14a:	2b0a      	cmp	r3, #10
 800a14c:	d106      	bne.n	800a15c <tcp_slowtmr+0x80>
 800a14e:	463b      	mov	r3, r7
 800a150:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a154:	4980      	ldr	r1, [pc, #512]	; (800a358 <tcp_slowtmr+0x27c>)
 800a156:	487e      	ldr	r0, [pc, #504]	; (800a350 <tcp_slowtmr+0x274>)
 800a158:	f004 fcd4 	bl	800eb04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	7fa2      	ldrb	r2, [r4, #30]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d103      	bne.n	800a16e <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800a166:	68e5      	ldr	r5, [r4, #12]
 800a168:	46a1      	mov	r9, r4
 800a16a:	462c      	mov	r4, r5
 800a16c:	e7ca      	b.n	800a104 <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 800a16e:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a170:	7d23      	ldrb	r3, [r4, #20]
 800a172:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800a176:	2b02      	cmp	r3, #2
 800a178:	d102      	bne.n	800a180 <tcp_slowtmr+0xa4>
 800a17a:	2a05      	cmp	r2, #5
 800a17c:	f200 81cb 	bhi.w	800a516 <tcp_slowtmr+0x43a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a180:	2a0b      	cmp	r2, #11
 800a182:	d830      	bhi.n	800a1e6 <tcp_slowtmr+0x10a>
      if (pcb->persist_backoff > 0) {
 800a184:	f894 b099 	ldrb.w	fp, [r4, #153]	; 0x99
 800a188:	f1bb 0f00 	cmp.w	fp, #0
 800a18c:	f000 80f2 	beq.w	800a374 <tcp_slowtmr+0x298>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a190:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a192:	b133      	cbz	r3, 800a1a2 <tcp_slowtmr+0xc6>
 800a194:	463b      	mov	r3, r7
 800a196:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a19a:	4970      	ldr	r1, [pc, #448]	; (800a35c <tcp_slowtmr+0x280>)
 800a19c:	486c      	ldr	r0, [pc, #432]	; (800a350 <tcp_slowtmr+0x274>)
 800a19e:	f004 fcb1 	bl	800eb04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a1a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a1a4:	b933      	cbnz	r3, 800a1b4 <tcp_slowtmr+0xd8>
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a1ac:	496c      	ldr	r1, [pc, #432]	; (800a360 <tcp_slowtmr+0x284>)
 800a1ae:	4868      	ldr	r0, [pc, #416]	; (800a350 <tcp_slowtmr+0x274>)
 800a1b0:	f004 fca8 	bl	800eb04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a1b4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a1b8:	2b0b      	cmp	r3, #11
 800a1ba:	d814      	bhi.n	800a1e6 <tcp_slowtmr+0x10a>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a1bc:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 800a1c0:	4b68      	ldr	r3, [pc, #416]	; (800a364 <tcp_slowtmr+0x288>)
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800a1c8:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a1cc:	429a      	cmp	r2, r3
            pcb->persist_cnt++;
 800a1ce:	bf84      	itt	hi
 800a1d0:	3301      	addhi	r3, #1
 800a1d2:	f884 3098 	strbhi.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a1d6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	f080 808a 	bcs.w	800a2f4 <tcp_slowtmr+0x218>
    pcb_remove = 0;
 800a1e0:	f04f 0b00 	mov.w	fp, #0
 800a1e4:	e001      	b.n	800a1ea <tcp_slowtmr+0x10e>
      ++pcb_remove;
 800a1e6:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800a1ea:	7d23      	ldrb	r3, [r4, #20]
 800a1ec:	2b06      	cmp	r3, #6
 800a1ee:	d10b      	bne.n	800a208 <tcp_slowtmr+0x12c>
      if (pcb->flags & TF_RXCLOSED) {
 800a1f0:	8b62      	ldrh	r2, [r4, #26]
 800a1f2:	06d2      	lsls	r2, r2, #27
 800a1f4:	d508      	bpl.n	800a208 <tcp_slowtmr+0x12c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1f6:	6832      	ldr	r2, [r6, #0]
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	1a52      	subs	r2, r2, r1
 800a1fc:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800a1fe:	bf84      	itt	hi
 800a200:	f10b 0b01 	addhi.w	fp, fp, #1
 800a204:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a208:	7a65      	ldrb	r5, [r4, #9]
 800a20a:	f015 0508 	ands.w	r5, r5, #8
 800a20e:	d019      	beq.n	800a244 <tcp_slowtmr+0x168>
 800a210:	2b04      	cmp	r3, #4
 800a212:	d002      	beq.n	800a21a <tcp_slowtmr+0x13e>
        ((pcb->state == ESTABLISHED) ||
 800a214:	2b07      	cmp	r3, #7
 800a216:	f040 810f 	bne.w	800a438 <tcp_slowtmr+0x35c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a21a:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800a21e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a222:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a224:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a228:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a22a:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a22e:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a230:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a234:	4291      	cmp	r1, r2
 800a236:	f240 80ed 	bls.w	800a414 <tcp_slowtmr+0x338>
        ++pcb_remove;
 800a23a:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800a23e:	2501      	movs	r5, #1
        ++pcb_remove;
 800a240:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 800a244:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a246:	b163      	cbz	r3, 800a262 <tcp_slowtmr+0x186>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a248:	6833      	ldr	r3, [r6, #0]
 800a24a:	6a22      	ldr	r2, [r4, #32]
 800a24c:	1a9a      	subs	r2, r3, r2
 800a24e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800a256:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a25a:	d302      	bcc.n	800a262 <tcp_slowtmr+0x186>
      tcp_free_ooseq(pcb);
 800a25c:	4620      	mov	r0, r4
 800a25e:	f7ff fb8d 	bl	800997c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800a262:	7d23      	ldrb	r3, [r4, #20]
 800a264:	2b03      	cmp	r3, #3
 800a266:	f040 80e9 	bne.w	800a43c <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a26a:	6833      	ldr	r3, [r6, #0]
 800a26c:	6a22      	ldr	r2, [r4, #32]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a272:	d803      	bhi.n	800a27c <tcp_slowtmr+0x1a0>
    if (pcb_remove) {
 800a274:	f1bb 0f00 	cmp.w	fp, #0
 800a278:	f000 80f5 	beq.w	800a466 <tcp_slowtmr+0x38a>
      tcp_pcb_purge(pcb);
 800a27c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a27e:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800a282:	f7ff fb85 	bl	8009990 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a286:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 800a28a:	f1b9 0f00 	cmp.w	r9, #0
 800a28e:	f000 80dd 	beq.w	800a44c <tcp_slowtmr+0x370>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a292:	429c      	cmp	r4, r3
 800a294:	d106      	bne.n	800a2a4 <tcp_slowtmr+0x1c8>
 800a296:	463b      	mov	r3, r7
 800a298:	f240 526d 	movw	r2, #1389	; 0x56d
 800a29c:	4932      	ldr	r1, [pc, #200]	; (800a368 <tcp_slowtmr+0x28c>)
 800a29e:	482c      	ldr	r0, [pc, #176]	; (800a350 <tcp_slowtmr+0x274>)
 800a2a0:	f004 fc30 	bl	800eb04 <iprintf>
        prev->next = pcb->next;
 800a2a4:	68e3      	ldr	r3, [r4, #12]
 800a2a6:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800a2aa:	b15d      	cbz	r5, 800a2c4 <tcp_slowtmr+0x1e8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a2ac:	8b23      	ldrh	r3, [r4, #24]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	9302      	str	r3, [sp, #8]
 800a2b2:	8ae3      	ldrh	r3, [r4, #22]
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	1d23      	adds	r3, r4, #4
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a2be:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2c0:	f002 faaa 	bl	800c818 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a2c4:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800a2c6:	4620      	mov	r0, r4
      pcb = pcb->next;
 800a2c8:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800a2ca:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800a2cc:	f7ff f956 	bl	800957c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a2d6:	f1bb 0f00 	cmp.w	fp, #0
 800a2da:	d004      	beq.n	800a2e6 <tcp_slowtmr+0x20a>
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	f06f 010c 	mvn.w	r1, #12
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800a2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f47f af04 	bne.w	800a0f8 <tcp_slowtmr+0x1c>
 800a2f0:	464c      	mov	r4, r9
 800a2f2:	e739      	b.n	800a168 <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 800a2f4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a2f8:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 800a2fa:	b989      	cbnz	r1, 800a320 <tcp_slowtmr+0x244>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a2fc:	f002 fd0a 	bl	800cd14 <tcp_zero_window_probe>
 800a300:	2800      	cmp	r0, #0
 800a302:	f47f af6d 	bne.w	800a1e0 <tcp_slowtmr+0x104>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a306:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800a30a:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a30e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800a310:	f884 b098 	strb.w	fp, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a314:	f63f af64 	bhi.w	800a1e0 <tcp_slowtmr+0x104>
                pcb->persist_backoff++;
 800a318:	3301      	adds	r3, #1
 800a31a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800a31e:	e764      	b.n	800a1ea <tcp_slowtmr+0x10e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a320:	f002 f82a 	bl	800c378 <tcp_split_unsent_seg>
 800a324:	2800      	cmp	r0, #0
 800a326:	d1ee      	bne.n	800a306 <tcp_slowtmr+0x22a>
                if (tcp_output(pcb) == ERR_OK) {
 800a328:	4620      	mov	r0, r4
 800a32a:	f002 faeb 	bl	800c904 <tcp_output>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f43f af56 	beq.w	800a1e0 <tcp_slowtmr+0x104>
 800a334:	e7e7      	b.n	800a306 <tcp_slowtmr+0x22a>
 800a336:	bf00      	nop
 800a338:	2000bee0 	.word	0x2000bee0
 800a33c:	20006d4a 	.word	0x20006d4a
 800a340:	2000bedc 	.word	0x2000bedc
 800a344:	08011322 	.word	0x08011322
 800a348:	2000beec 	.word	0x2000beec
 800a34c:	0801164d 	.word	0x0801164d
 800a350:	0800fff2 	.word	0x0800fff2
 800a354:	08011677 	.word	0x08011677
 800a358:	080116a1 	.word	0x080116a1
 800a35c:	080116ce 	.word	0x080116ce
 800a360:	08011700 	.word	0x08011700
 800a364:	0801152b 	.word	0x0801152b
 800a368:	08011735 	.word	0x08011735
 800a36c:	2000bed8 	.word	0x2000bed8
 800a370:	0801178a 	.word	0x0801178a
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a374:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a378:	2b00      	cmp	r3, #0
 800a37a:	db05      	blt.n	800a388 <tcp_slowtmr+0x2ac>
 800a37c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a380:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800a382:	bf1c      	itt	ne
 800a384:	3301      	addne	r3, #1
 800a386:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800a388:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a38c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a390:	429a      	cmp	r2, r3
 800a392:	f6ff af25 	blt.w	800a1e0 <tcp_slowtmr+0x104>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a396:	4620      	mov	r0, r4
 800a398:	f002 f982 	bl	800c6a0 <tcp_rexmit_rto_prepare>
 800a39c:	b138      	cbz	r0, 800a3ae <tcp_slowtmr+0x2d2>
 800a39e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f47f af1d 	bne.w	800a1e0 <tcp_slowtmr+0x104>
 800a3a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f43f af19 	beq.w	800a1e0 <tcp_slowtmr+0x104>
            if (pcb->state != SYN_SENT) {
 800a3ae:	7d23      	ldrb	r3, [r4, #20]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d014      	beq.n	800a3de <tcp_slowtmr+0x302>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a3b4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800a3b8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800a3bc:	4957      	ldr	r1, [pc, #348]	; (800a51c <tcp_slowtmr+0x440>)
 800a3be:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a3c2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a3c6:	2a0c      	cmp	r2, #12
 800a3c8:	bf28      	it	cs
 800a3ca:	220c      	movcs	r2, #12
 800a3cc:	5c8a      	ldrb	r2, [r1, r2]
 800a3ce:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a3d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	bfa8      	it	ge
 800a3d8:	4613      	movge	r3, r2
 800a3da:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3de:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 800a3e2:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3e4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3e8:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800a3ea:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 800a3ec:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 800a3ee:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800a3f2:	bf28      	it	cs
 800a3f4:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3f6:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 800a3f8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a3fc:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800a3fe:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a400:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 800a402:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a406:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a408:	bf38      	it	cc
 800a40a:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800a40e:	f002 fc23 	bl	800cc58 <tcp_rexmit_rto_commit>
 800a412:	e6ea      	b.n	800a1ea <tcp_slowtmr+0x10e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a414:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800a418:	4a41      	ldr	r2, [pc, #260]	; (800a520 <tcp_slowtmr+0x444>)
 800a41a:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 800a41e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a422:	4299      	cmp	r1, r3
 800a424:	d908      	bls.n	800a438 <tcp_slowtmr+0x35c>
        err = tcp_keepalive(pcb);
 800a426:	4620      	mov	r0, r4
 800a428:	f002 fc4c 	bl	800ccc4 <tcp_keepalive>
        if (err == ERR_OK) {
 800a42c:	b920      	cbnz	r0, 800a438 <tcp_slowtmr+0x35c>
          pcb->keep_cnt_sent++;
 800a42e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800a432:	3301      	adds	r3, #1
 800a434:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800a438:	2500      	movs	r5, #0
 800a43a:	e703      	b.n	800a244 <tcp_slowtmr+0x168>
    if (pcb->state == LAST_ACK) {
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	f47f af19 	bne.w	800a274 <tcp_slowtmr+0x198>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a442:	6833      	ldr	r3, [r6, #0]
 800a444:	6a22      	ldr	r2, [r4, #32]
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	2bf0      	cmp	r3, #240	; 0xf0
 800a44a:	e712      	b.n	800a272 <tcp_slowtmr+0x196>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d006      	beq.n	800a45e <tcp_slowtmr+0x382>
 800a450:	463b      	mov	r3, r7
 800a452:	f240 5271 	movw	r2, #1393	; 0x571
 800a456:	4933      	ldr	r1, [pc, #204]	; (800a524 <tcp_slowtmr+0x448>)
 800a458:	4833      	ldr	r0, [pc, #204]	; (800a528 <tcp_slowtmr+0x44c>)
 800a45a:	f004 fb53 	bl	800eb04 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	f8c8 3000 	str.w	r3, [r8]
 800a464:	e721      	b.n	800a2aa <tcp_slowtmr+0x1ce>
      ++prev->polltmr;
 800a466:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a468:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800a46a:	3301      	adds	r3, #1
      pcb = pcb->next;
 800a46c:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800a46e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a470:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a472:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a474:	f63f ae78 	bhi.w	800a168 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800a478:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800a47c:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800a480:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 800a484:	b173      	cbz	r3, 800a4a4 <tcp_slowtmr+0x3c8>
 800a486:	4621      	mov	r1, r4
 800a488:	6920      	ldr	r0, [r4, #16]
 800a48a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a48c:	f89a 3000 	ldrb.w	r3, [sl]
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f ae31 	bne.w	800a0f8 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800a496:	2800      	cmp	r0, #0
 800a498:	f47f ae66 	bne.w	800a168 <tcp_slowtmr+0x8c>
          tcp_output(prev);
 800a49c:	4620      	mov	r0, r4
 800a49e:	f002 fa31 	bl	800c904 <tcp_output>
 800a4a2:	e661      	b.n	800a168 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	e7f1      	b.n	800a48c <tcp_slowtmr+0x3b0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a4a8:	7d2b      	ldrb	r3, [r5, #20]
 800a4aa:	2b0a      	cmp	r3, #10
 800a4ac:	d006      	beq.n	800a4bc <tcp_slowtmr+0x3e0>
 800a4ae:	4643      	mov	r3, r8
 800a4b0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a4b4:	4651      	mov	r1, sl
 800a4b6:	4648      	mov	r0, r9
 800a4b8:	f004 fb24 	bl	800eb04 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	6a2a      	ldr	r2, [r5, #32]
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	2bf0      	cmp	r3, #240	; 0xf0
 800a4c4:	d815      	bhi.n	800a4f2 <tcp_slowtmr+0x416>
      pcb = pcb->next;
 800a4c6:	462c      	mov	r4, r5
 800a4c8:	68ed      	ldr	r5, [r5, #12]
 800a4ca:	e624      	b.n	800a116 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	d106      	bne.n	800a4e0 <tcp_slowtmr+0x404>
 800a4d2:	4643      	mov	r3, r8
 800a4d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800a4d8:	4914      	ldr	r1, [pc, #80]	; (800a52c <tcp_slowtmr+0x450>)
 800a4da:	4648      	mov	r0, r9
 800a4dc:	f004 fb12 	bl	800eb04 <iprintf>
        prev->next = pcb->next;
 800a4e0:	68eb      	ldr	r3, [r5, #12]
 800a4e2:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800a4e4:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f7ff f847 	bl	800957c <tcp_free>
      pcb = pcb->next;
 800a4ee:	465d      	mov	r5, fp
 800a4f0:	e611      	b.n	800a116 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f7ff fa4c 	bl	8009990 <tcp_pcb_purge>
      if (prev != NULL) {
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	d1e7      	bne.n	800a4cc <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	429d      	cmp	r5, r3
 800a500:	d006      	beq.n	800a510 <tcp_slowtmr+0x434>
 800a502:	4643      	mov	r3, r8
 800a504:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a508:	4909      	ldr	r1, [pc, #36]	; (800a530 <tcp_slowtmr+0x454>)
 800a50a:	4648      	mov	r0, r9
 800a50c:	f004 fafa 	bl	800eb04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a510:	68eb      	ldr	r3, [r5, #12]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	e7e6      	b.n	800a4e4 <tcp_slowtmr+0x408>
      ++pcb_remove;
 800a516:	f04f 0b01 	mov.w	fp, #1
 800a51a:	e675      	b.n	800a208 <tcp_slowtmr+0x12c>
 800a51c:	080112ac 	.word	0x080112ac
 800a520:	000124f8 	.word	0x000124f8
 800a524:	08011760 	.word	0x08011760
 800a528:	0800fff2 	.word	0x0800fff2
 800a52c:	080117b9 	.word	0x080117b9
 800a530:	080117e0 	.word	0x080117e0

0800a534 <tcp_tmr>:
{
 800a534:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a536:	f7ff fd91 	bl	800a05c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a53a:	4a06      	ldr	r2, [pc, #24]	; (800a554 <tcp_tmr+0x20>)
 800a53c:	7813      	ldrb	r3, [r2, #0]
 800a53e:	3301      	adds	r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	7013      	strb	r3, [r2, #0]
 800a544:	07db      	lsls	r3, r3, #31
 800a546:	d503      	bpl.n	800a550 <tcp_tmr+0x1c>
}
 800a548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800a54c:	f7ff bdc6 	b.w	800a0dc <tcp_slowtmr>
 800a550:	bd08      	pop	{r3, pc}
 800a552:	bf00      	nop
 800a554:	20006d49 	.word	0x20006d49

0800a558 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a558:	4a09      	ldr	r2, [pc, #36]	; (800a580 <tcp_get_next_optbyte+0x28>)
 800a55a:	8813      	ldrh	r3, [r2, #0]
 800a55c:	1c59      	adds	r1, r3, #1
 800a55e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <tcp_get_next_optbyte+0x2c>)
 800a562:	6812      	ldr	r2, [r2, #0]
 800a564:	b11a      	cbz	r2, 800a56e <tcp_get_next_optbyte+0x16>
 800a566:	4908      	ldr	r1, [pc, #32]	; (800a588 <tcp_get_next_optbyte+0x30>)
 800a568:	8809      	ldrh	r1, [r1, #0]
 800a56a:	428b      	cmp	r3, r1
 800a56c:	d204      	bcs.n	800a578 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a56e:	4a07      	ldr	r2, [pc, #28]	; (800a58c <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 800a570:	6812      	ldr	r2, [r2, #0]
 800a572:	4413      	add	r3, r2
 800a574:	7d18      	ldrb	r0, [r3, #20]
 800a576:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a578:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800a57e:	4770      	bx	lr
 800a580:	20006d74 	.word	0x20006d74
 800a584:	20006d80 	.word	0x20006d80
 800a588:	20006d7c 	.word	0x20006d7c
 800a58c:	20006d78 	.word	0x20006d78

0800a590 <tcp_oos_insert_segment>:
{
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a596:	4605      	mov	r5, r0
 800a598:	b930      	cbnz	r0, 800a5a8 <tcp_oos_insert_segment+0x18>
 800a59a:	4b1f      	ldr	r3, [pc, #124]	; (800a618 <tcp_oos_insert_segment+0x88>)
 800a59c:	f240 421f 	movw	r2, #1055	; 0x41f
 800a5a0:	491e      	ldr	r1, [pc, #120]	; (800a61c <tcp_oos_insert_segment+0x8c>)
 800a5a2:	481f      	ldr	r0, [pc, #124]	; (800a620 <tcp_oos_insert_segment+0x90>)
 800a5a4:	f004 faae 	bl	800eb04 <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a5a8:	68eb      	ldr	r3, [r5, #12]
 800a5aa:	8998      	ldrh	r0, [r3, #12]
 800a5ac:	f7fa fdc6 	bl	800513c <lwip_htons>
 800a5b0:	07c2      	lsls	r2, r0, #31
 800a5b2:	d415      	bmi.n	800a5e0 <tcp_oos_insert_segment+0x50>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a5b4:	4e1b      	ldr	r6, [pc, #108]	; (800a624 <tcp_oos_insert_segment+0x94>)
    while (next &&
 800a5b6:	b1bc      	cbz	r4, 800a5e8 <tcp_oos_insert_segment+0x58>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a5b8:	68e7      	ldr	r7, [r4, #12]
 800a5ba:	6830      	ldr	r0, [r6, #0]
 800a5bc:	892b      	ldrh	r3, [r5, #8]
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	8922      	ldrh	r2, [r4, #8]
 800a5c2:	4403      	add	r3, r0
 800a5c4:	440a      	add	r2, r1
 800a5c6:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a5c8:	2a00      	cmp	r2, #0
 800a5ca:	da10      	bge.n	800a5ee <tcp_oos_insert_segment+0x5e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a5cc:	1a5b      	subs	r3, r3, r1
    if (next &&
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dd0a      	ble.n	800a5e8 <tcp_oos_insert_segment+0x58>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a5d2:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 800a5d4:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a5d6:	b289      	uxth	r1, r1
 800a5d8:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a5da:	f7fe fc95 	bl	8008f08 <pbuf_realloc>
 800a5de:	e003      	b.n	800a5e8 <tcp_oos_insert_segment+0x58>
    tcp_segs_free(next);
 800a5e0:	4620      	mov	r0, r4
    next = NULL;
 800a5e2:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800a5e4:	f7ff f862 	bl	80096ac <tcp_segs_free>
  cseg->next = next;
 800a5e8:	602c      	str	r4, [r5, #0]
}
 800a5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5ee:	89b8      	ldrh	r0, [r7, #12]
 800a5f0:	f7fa fda4 	bl	800513c <lwip_htons>
 800a5f4:	07c3      	lsls	r3, r0, #31
 800a5f6:	d509      	bpl.n	800a60c <tcp_oos_insert_segment+0x7c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a5f8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800a602:	f7fa fd9b 	bl	800513c <lwip_htons>
 800a606:	4338      	orrs	r0, r7
 800a608:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 800a60c:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff f83e 	bl	8009690 <tcp_seg_free>
      next = next->next;
 800a614:	463c      	mov	r4, r7
 800a616:	e7ce      	b.n	800a5b6 <tcp_oos_insert_segment+0x26>
 800a618:	08011a7f 	.word	0x08011a7f
 800a61c:	08011ab1 	.word	0x08011ab1
 800a620:	0800fff2 	.word	0x0800fff2
 800a624:	20006d70 	.word	0x20006d70

0800a628 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a62a:	4607      	mov	r7, r0
 800a62c:	b930      	cbnz	r0, 800a63c <tcp_parseopt+0x14>
 800a62e:	4b1d      	ldr	r3, [pc, #116]	; (800a6a4 <tcp_parseopt+0x7c>)
 800a630:	f240 727d 	movw	r2, #1917	; 0x77d
 800a634:	491c      	ldr	r1, [pc, #112]	; (800a6a8 <tcp_parseopt+0x80>)
 800a636:	481d      	ldr	r0, [pc, #116]	; (800a6ac <tcp_parseopt+0x84>)
 800a638:	f004 fa64 	bl	800eb04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a63c:	4e1c      	ldr	r6, [pc, #112]	; (800a6b0 <tcp_parseopt+0x88>)
 800a63e:	8833      	ldrh	r3, [r6, #0]
 800a640:	b133      	cbz	r3, 800a650 <tcp_parseopt+0x28>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a642:	4d1c      	ldr	r5, [pc, #112]	; (800a6b4 <tcp_parseopt+0x8c>)
 800a644:	2300      	movs	r3, #0
 800a646:	802b      	strh	r3, [r5, #0]
 800a648:	8834      	ldrh	r4, [r6, #0]
 800a64a:	882b      	ldrh	r3, [r5, #0]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d300      	bcc.n	800a652 <tcp_parseopt+0x2a>
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_get_next_optbyte();
 800a652:	f7ff ff81 	bl	800a558 <tcp_get_next_optbyte>
      switch (opt) {
 800a656:	2801      	cmp	r0, #1
 800a658:	d0f6      	beq.n	800a648 <tcp_parseopt+0x20>
 800a65a:	d3f9      	bcc.n	800a650 <tcp_parseopt+0x28>
 800a65c:	2802      	cmp	r0, #2
 800a65e:	d117      	bne.n	800a690 <tcp_parseopt+0x68>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a660:	f7ff ff7a 	bl	800a558 <tcp_get_next_optbyte>
 800a664:	2804      	cmp	r0, #4
 800a666:	d1f3      	bne.n	800a650 <tcp_parseopt+0x28>
 800a668:	882b      	ldrh	r3, [r5, #0]
 800a66a:	3301      	adds	r3, #1
 800a66c:	42a3      	cmp	r3, r4
 800a66e:	daef      	bge.n	800a650 <tcp_parseopt+0x28>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a670:	f7ff ff72 	bl	800a558 <tcp_get_next_optbyte>
 800a674:	0200      	lsls	r0, r0, #8
 800a676:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800a678:	f7ff ff6e 	bl	800a558 <tcp_get_next_optbyte>
 800a67c:	4320      	orrs	r0, r4
 800a67e:	b280      	uxth	r0, r0
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a680:	1e43      	subs	r3, r0, #1
 800a682:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a686:	bf28      	it	cs
 800a688:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800a68c:	8678      	strh	r0, [r7, #50]	; 0x32
 800a68e:	e7db      	b.n	800a648 <tcp_parseopt+0x20>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a690:	f7ff ff62 	bl	800a558 <tcp_get_next_optbyte>
          if (data < 2) {
 800a694:	2801      	cmp	r0, #1
 800a696:	d9db      	bls.n	800a650 <tcp_parseopt+0x28>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a698:	882b      	ldrh	r3, [r5, #0]
 800a69a:	3b02      	subs	r3, #2
 800a69c:	4418      	add	r0, r3
 800a69e:	8028      	strh	r0, [r5, #0]
 800a6a0:	e7d2      	b.n	800a648 <tcp_parseopt+0x20>
 800a6a2:	bf00      	nop
 800a6a4:	08011a7f 	.word	0x08011a7f
 800a6a8:	08011ad6 	.word	0x08011ad6
 800a6ac:	0800fff2 	.word	0x0800fff2
 800a6b0:	20006d84 	.word	0x20006d84
 800a6b4:	20006d74 	.word	0x20006d74

0800a6b8 <tcp_input_delayed_close>:
{
 800a6b8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	b930      	cbnz	r0, 800a6cc <tcp_input_delayed_close+0x14>
 800a6be:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <tcp_input_delayed_close+0x44>)
 800a6c0:	f240 225a 	movw	r2, #602	; 0x25a
 800a6c4:	490e      	ldr	r1, [pc, #56]	; (800a700 <tcp_input_delayed_close+0x48>)
 800a6c6:	480f      	ldr	r0, [pc, #60]	; (800a704 <tcp_input_delayed_close+0x4c>)
 800a6c8:	f004 fa1c 	bl	800eb04 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <tcp_input_delayed_close+0x50>)
 800a6ce:	7818      	ldrb	r0, [r3, #0]
 800a6d0:	f010 0010 	ands.w	r0, r0, #16
 800a6d4:	d011      	beq.n	800a6fa <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a6d6:	8b63      	ldrh	r3, [r4, #26]
 800a6d8:	06db      	lsls	r3, r3, #27
 800a6da:	d406      	bmi.n	800a6ea <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a6dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a6e0:	b11b      	cbz	r3, 800a6ea <tcp_input_delayed_close+0x32>
 800a6e2:	f06f 010e 	mvn.w	r1, #14
 800a6e6:	6920      	ldr	r0, [r4, #16]
 800a6e8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4807      	ldr	r0, [pc, #28]	; (800a70c <tcp_input_delayed_close+0x54>)
 800a6ee:	f7ff f981 	bl	80099f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7fe ff42 	bl	800957c <tcp_free>
 800a6f8:	2001      	movs	r0, #1
}
 800a6fa:	bd10      	pop	{r4, pc}
 800a6fc:	08011a7f 	.word	0x08011a7f
 800a700:	08011a5a 	.word	0x08011a5a
 800a704:	0800fff2 	.word	0x0800fff2
 800a708:	20006d6c 	.word	0x20006d6c
 800a70c:	2000bedc 	.word	0x2000bedc

0800a710 <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800a710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	4606      	mov	r6, r0
 800a716:	4617      	mov	r7, r2
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a718:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a71a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800a7b8 <tcp_free_acked_segments.isra.2+0xa8>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a71e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800a7bc <tcp_free_acked_segments.isra.2+0xac>
 800a722:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800a7c0 <tcp_free_acked_segments.isra.2+0xb0>
  while (seg_list != NULL &&
 800a726:	b1ac      	cbz	r4, 800a754 <tcp_free_acked_segments.isra.2+0x44>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a728:	68e3      	ldr	r3, [r4, #12]
 800a72a:	6858      	ldr	r0, [r3, #4]
 800a72c:	f7fa fd09 	bl	8005142 <lwip_htonl>
 800a730:	68e3      	ldr	r3, [r4, #12]
 800a732:	4683      	mov	fp, r0
 800a734:	8925      	ldrh	r5, [r4, #8]
 800a736:	8998      	ldrh	r0, [r3, #12]
 800a738:	f7fa fd00 	bl	800513c <lwip_htons>
 800a73c:	f8d9 3000 	ldr.w	r3, [r9]
 800a740:	f010 0003 	ands.w	r0, r0, #3
 800a744:	eba5 0503 	sub.w	r5, r5, r3
 800a748:	bf18      	it	ne
 800a74a:	2001      	movne	r0, #1
 800a74c:	445d      	add	r5, fp
 800a74e:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800a750:	2d00      	cmp	r5, #0
 800a752:	dd02      	ble.n	800a75a <tcp_free_acked_segments.isra.2+0x4a>
}
 800a754:	4620      	mov	r0, r4
 800a756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    clen = pbuf_clen(next->p);
 800a75a:	6860      	ldr	r0, [r4, #4]
    seg_list = seg_list->next;
 800a75c:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 800a75e:	f7fe fc43 	bl	8008fe8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a762:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800a764:	4683      	mov	fp, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a766:	4283      	cmp	r3, r0
 800a768:	d206      	bcs.n	800a778 <tcp_free_acked_segments.isra.2+0x68>
 800a76a:	4643      	mov	r3, r8
 800a76c:	f240 4257 	movw	r2, #1111	; 0x457
 800a770:	4651      	mov	r1, sl
 800a772:	480e      	ldr	r0, [pc, #56]	; (800a7ac <tcp_free_acked_segments.isra.2+0x9c>)
 800a774:	f004 f9c6 	bl	800eb04 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a778:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a77a:	4a0d      	ldr	r2, [pc, #52]	; (800a7b0 <tcp_free_acked_segments.isra.2+0xa0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a77c:	eba0 000b 	sub.w	r0, r0, fp
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a780:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a782:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 800a784:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a786:	8923      	ldrh	r3, [r4, #8]
 800a788:	440b      	add	r3, r1
 800a78a:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a78c:	f7fe ff80 	bl	8009690 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a790:	8833      	ldrh	r3, [r6, #0]
 800a792:	b14b      	cbz	r3, 800a7a8 <tcp_free_acked_segments.isra.2+0x98>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a794:	b945      	cbnz	r5, 800a7a8 <tcp_free_acked_segments.isra.2+0x98>
 800a796:	b93f      	cbnz	r7, 800a7a8 <tcp_free_acked_segments.isra.2+0x98>
 800a798:	463d      	mov	r5, r7
 800a79a:	4643      	mov	r3, r8
 800a79c:	f240 4262 	movw	r2, #1122	; 0x462
 800a7a0:	4904      	ldr	r1, [pc, #16]	; (800a7b4 <tcp_free_acked_segments.isra.2+0xa4>)
 800a7a2:	4802      	ldr	r0, [pc, #8]	; (800a7ac <tcp_free_acked_segments.isra.2+0x9c>)
 800a7a4:	f004 f9ae 	bl	800eb04 <iprintf>
 800a7a8:	462c      	mov	r4, r5
 800a7aa:	e7bc      	b.n	800a726 <tcp_free_acked_segments.isra.2+0x16>
 800a7ac:	0800fff2 	.word	0x0800fff2
 800a7b0:	20006d64 	.word	0x20006d64
 800a7b4:	0801186c 	.word	0x0801186c
 800a7b8:	20006d4c 	.word	0x20006d4c
 800a7bc:	08011a7f 	.word	0x08011a7f
 800a7c0:	08011844 	.word	0x08011844

0800a7c4 <tcp_receive>:
{
 800a7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	b930      	cbnz	r0, 800a7da <tcp_receive+0x16>
 800a7cc:	4b3a      	ldr	r3, [pc, #232]	; (800a8b8 <tcp_receive+0xf4>)
 800a7ce:	f240 427b 	movw	r2, #1147	; 0x47b
 800a7d2:	493a      	ldr	r1, [pc, #232]	; (800a8bc <tcp_receive+0xf8>)
 800a7d4:	483a      	ldr	r0, [pc, #232]	; (800a8c0 <tcp_receive+0xfc>)
 800a7d6:	f004 f995 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a7da:	7d23      	ldrb	r3, [r4, #20]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d806      	bhi.n	800a7ee <tcp_receive+0x2a>
 800a7e0:	4b35      	ldr	r3, [pc, #212]	; (800a8b8 <tcp_receive+0xf4>)
 800a7e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800a7e6:	4937      	ldr	r1, [pc, #220]	; (800a8c4 <tcp_receive+0x100>)
 800a7e8:	4835      	ldr	r0, [pc, #212]	; (800a8c0 <tcp_receive+0xfc>)
 800a7ea:	f004 f98b 	bl	800eb04 <iprintf>
  if (flags & TCP_ACK) {
 800a7ee:	4b36      	ldr	r3, [pc, #216]	; (800a8c8 <tcp_receive+0x104>)
 800a7f0:	4e36      	ldr	r6, [pc, #216]	; (800a8cc <tcp_receive+0x108>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4f36      	ldr	r7, [pc, #216]	; (800a8d0 <tcp_receive+0x10c>)
 800a7f6:	f013 0f10 	tst.w	r3, #16
 800a7fa:	f000 8095 	beq.w	800a928 <tcp_receive+0x164>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a800:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a802:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a806:	1ad5      	subs	r5, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a808:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	4d31      	ldr	r5, [pc, #196]	; (800a8d4 <tcp_receive+0x110>)
 800a80e:	db0d      	blt.n	800a82c <tcp_receive+0x68>
 800a810:	429a      	cmp	r2, r3
 800a812:	d103      	bne.n	800a81c <tcp_receive+0x58>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a814:	682a      	ldr	r2, [r5, #0]
 800a816:	1a82      	subs	r2, r0, r2
 800a818:	2a00      	cmp	r2, #0
 800a81a:	db07      	blt.n	800a82c <tcp_receive+0x68>
 800a81c:	682a      	ldr	r2, [r5, #0]
 800a81e:	4290      	cmp	r0, r2
 800a820:	d112      	bne.n	800a848 <tcp_receive+0x84>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a822:	4a2d      	ldr	r2, [pc, #180]	; (800a8d8 <tcp_receive+0x114>)
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	89d2      	ldrh	r2, [r2, #14]
 800a828:	428a      	cmp	r2, r1
 800a82a:	d90d      	bls.n	800a848 <tcp_receive+0x84>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a82c:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <tcp_receive+0x114>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a82e:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a832:	6812      	ldr	r2, [r2, #0]
 800a834:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno;
 800a836:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a838:	4596      	cmp	lr, r2
      pcb->snd_wl2 = ackno;
 800a83a:	682b      	ldr	r3, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a83c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a840:	bf38      	it	cc
 800a842:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 800a846:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a848:	682a      	ldr	r2, [r5, #0]
 800a84a:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800a84e:	eba2 030e 	sub.w	r3, r2, lr
 800a852:	2b00      	cmp	r3, #0
 800a854:	f300 8180 	bgt.w	800ab58 <tcp_receive+0x394>
      if (tcplen == 0) {
 800a858:	883b      	ldrh	r3, [r7, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f040 83d1 	bne.w	800b002 <tcp_receive+0x83e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a860:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a862:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a866:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a868:	4403      	add	r3, r0
 800a86a:	4299      	cmp	r1, r3
 800a86c:	f040 83c9 	bne.w	800b002 <tcp_receive+0x83e>
          if (pcb->rtime >= 0) {
 800a870:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a874:	2b00      	cmp	r3, #0
 800a876:	f2c0 83c4 	blt.w	800b002 <tcp_receive+0x83e>
            if (pcb->lastack == ackno) {
 800a87a:	4572      	cmp	r2, lr
 800a87c:	f040 83c1 	bne.w	800b002 <tcp_receive+0x83e>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a884:	1c53      	adds	r3, r2, #1
 800a886:	b2db      	uxtb	r3, r3
 800a888:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800a88a:	bf38      	it	cc
 800a88c:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a890:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a894:	2b03      	cmp	r3, #3
 800a896:	d921      	bls.n	800a8dc <tcp_receive+0x118>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a898:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a89c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a89e:	4413      	add	r3, r2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	bf88      	it	hi
 800a8a6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a8aa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f001 ff7a 	bl	800c7a8 <tcp_rexmit_fast>
 800a8b4:	e013      	b.n	800a8de <tcp_receive+0x11a>
 800a8b6:	bf00      	nop
 800a8b8:	08011a7f 	.word	0x08011a7f
 800a8bc:	08011af0 	.word	0x08011af0
 800a8c0:	0800fff2 	.word	0x0800fff2
 800a8c4:	08011b09 	.word	0x08011b09
 800a8c8:	20006d50 	.word	0x20006d50
 800a8cc:	20006d70 	.word	0x20006d70
 800a8d0:	20006d86 	.word	0x20006d86
 800a8d4:	20006d4c 	.word	0x20006d4c
 800a8d8:	20006d78 	.word	0x20006d78
              if (pcb->dupacks >= 3) {
 800a8dc:	d0e7      	beq.n	800a8ae <tcp_receive+0xea>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a8de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a8e0:	b312      	cbz	r2, 800a928 <tcp_receive+0x164>
 800a8e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8e4:	6829      	ldr	r1, [r5, #0]
 800a8e6:	1a5b      	subs	r3, r3, r1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da1d      	bge.n	800a928 <tcp_receive+0x164>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a8ec:	4b91      	ldr	r3, [pc, #580]	; (800ab34 <tcp_receive+0x370>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800a8ee:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800a8f6:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 800a8fa:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800a8fe:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 800a902:	b289      	uxth	r1, r1
 800a904:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a906:	4408      	add	r0, r1
      if (m < 0) {
 800a908:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800a90a:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 800a90c:	bfb8      	it	lt
 800a90e:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a910:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800a912:	bfb8      	it	lt
 800a914:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800a916:	4413      	add	r3, r2
 800a918:	b29b      	uxth	r3, r3
 800a91a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a91c:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 800a920:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a928:	8838      	ldrh	r0, [r7, #0]
 800a92a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f000 835c 	beq.w	800afea <tcp_receive+0x826>
 800a932:	7d23      	ldrb	r3, [r4, #20]
 800a934:	2b06      	cmp	r3, #6
 800a936:	f200 8358 	bhi.w	800afea <tcp_receive+0x826>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a93a:	6833      	ldr	r3, [r6, #0]
 800a93c:	1ad5      	subs	r5, r2, r3
 800a93e:	2d01      	cmp	r5, #1
 800a940:	f100 81a5 	bmi.w	800ac8e <tcp_receive+0x4ca>
 800a944:	f1c3 0101 	rsb	r1, r3, #1
 800a948:	1a09      	subs	r1, r1, r0
 800a94a:	4411      	add	r1, r2
 800a94c:	2900      	cmp	r1, #0
 800a94e:	f300 819e 	bgt.w	800ac8e <tcp_receive+0x4ca>
      struct pbuf *p = inseg.p;
 800a952:	4b79      	ldr	r3, [pc, #484]	; (800ab38 <tcp_receive+0x374>)
 800a954:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a958:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a95a:	f1b9 0f00 	cmp.w	r9, #0
 800a95e:	d106      	bne.n	800a96e <tcp_receive+0x1aa>
 800a960:	4b76      	ldr	r3, [pc, #472]	; (800ab3c <tcp_receive+0x378>)
 800a962:	f240 5294 	movw	r2, #1428	; 0x594
 800a966:	4976      	ldr	r1, [pc, #472]	; (800ab40 <tcp_receive+0x37c>)
 800a968:	4876      	ldr	r0, [pc, #472]	; (800ab44 <tcp_receive+0x380>)
 800a96a:	f004 f8cb 	bl	800eb04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a96e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a972:	429d      	cmp	r5, r3
 800a974:	d906      	bls.n	800a984 <tcp_receive+0x1c0>
 800a976:	4b71      	ldr	r3, [pc, #452]	; (800ab3c <tcp_receive+0x378>)
 800a978:	f240 5295 	movw	r2, #1429	; 0x595
 800a97c:	4972      	ldr	r1, [pc, #456]	; (800ab48 <tcp_receive+0x384>)
 800a97e:	4871      	ldr	r0, [pc, #452]	; (800ab44 <tcp_receive+0x380>)
 800a980:	f004 f8c0 	bl	800eb04 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a984:	f8d8 3004 	ldr.w	r3, [r8, #4]
      off = (u16_t)off32;
 800a988:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a98a:	891b      	ldrh	r3, [r3, #8]
 800a98c:	42ab      	cmp	r3, r5
 800a98e:	d206      	bcs.n	800a99e <tcp_receive+0x1da>
 800a990:	4b6a      	ldr	r3, [pc, #424]	; (800ab3c <tcp_receive+0x378>)
 800a992:	f240 5297 	movw	r2, #1431	; 0x597
 800a996:	496d      	ldr	r1, [pc, #436]	; (800ab4c <tcp_receive+0x388>)
 800a998:	486a      	ldr	r0, [pc, #424]	; (800ab44 <tcp_receive+0x380>)
 800a99a:	f004 f8b3 	bl	800eb04 <iprintf>
      inseg.len -= off;
 800a99e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        p->len = 0;
 800a9a2:	2100      	movs	r1, #0
      inseg.len -= off;
 800a9a4:	1b5b      	subs	r3, r3, r5
 800a9a6:	f8a8 3008 	strh.w	r3, [r8, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a9aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9ae:	891b      	ldrh	r3, [r3, #8]
 800a9b0:	1b5b      	subs	r3, r3, r5
 800a9b2:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800a9b4:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800a9b8:	4295      	cmp	r5, r2
 800a9ba:	f200 815f 	bhi.w	800ac7c <tcp_receive+0x4b8>
      pbuf_remove_header(p, off);
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4648      	mov	r0, r9
 800a9c2:	f7fe f96f 	bl	8008ca4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9c8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9d4:	1a99      	subs	r1, r3, r2
 800a9d6:	2900      	cmp	r1, #0
 800a9d8:	f2c0 8232 	blt.w	800ae40 <tcp_receive+0x67c>
 800a9dc:	1c58      	adds	r0, r3, #1
 800a9de:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 800a9e0:	1a81      	subs	r1, r0, r2
 800a9e2:	1b49      	subs	r1, r1, r5
 800a9e4:	2900      	cmp	r1, #0
 800a9e6:	f300 822b 	bgt.w	800ae40 <tcp_receive+0x67c>
      if (pcb->rcv_nxt == seqno) {
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f040 8222 	bne.w	800ae34 <tcp_receive+0x670>
        tcplen = TCP_TCPLEN(&inseg);
 800a9f0:	4d51      	ldr	r5, [pc, #324]	; (800ab38 <tcp_receive+0x374>)
 800a9f2:	68eb      	ldr	r3, [r5, #12]
 800a9f4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800a9f8:	8998      	ldrh	r0, [r3, #12]
 800a9fa:	f7fa fb9f 	bl	800513c <lwip_htons>
 800a9fe:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800aa02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800aa04:	bf18      	it	ne
 800aa06:	2001      	movne	r0, #1
 800aa08:	4440      	add	r0, r8
 800aa0a:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800aa0c:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800aa0e:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800aa10:	d241      	bcs.n	800aa96 <tcp_receive+0x2d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa12:	68eb      	ldr	r3, [r5, #12]
 800aa14:	8998      	ldrh	r0, [r3, #12]
 800aa16:	f7fa fb91 	bl	800513c <lwip_htons>
 800aa1a:	07c2      	lsls	r2, r0, #31
 800aa1c:	d510      	bpl.n	800aa40 <tcp_receive+0x27c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa1e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800aa22:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800aa26:	4640      	mov	r0, r8
 800aa28:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800aa2c:	f7fa fb86 	bl	800513c <lwip_htons>
 800aa30:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800aa34:	f7fa fb82 	bl	800513c <lwip_htons>
 800aa38:	ea48 0800 	orr.w	r8, r8, r0
 800aa3c:	f8a9 800c 	strh.w	r8, [r9, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa42:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa44:	68eb      	ldr	r3, [r5, #12]
 800aa46:	8998      	ldrh	r0, [r3, #12]
 800aa48:	f7fa fb78 	bl	800513c <lwip_htons>
 800aa4c:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800aa4e:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800aa50:	bf42      	ittt	mi
 800aa52:	892b      	ldrhmi	r3, [r5, #8]
 800aa54:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800aa58:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800aa5a:	8929      	ldrh	r1, [r5, #8]
 800aa5c:	f7fe fa54 	bl	8008f08 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aa60:	68eb      	ldr	r3, [r5, #12]
 800aa62:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800aa66:	8998      	ldrh	r0, [r3, #12]
 800aa68:	f7fa fb68 	bl	800513c <lwip_htons>
 800aa6c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa70:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800aa72:	bf18      	it	ne
 800aa74:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa76:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800aa78:	4440      	add	r0, r8
 800aa7a:	b280      	uxth	r0, r0
 800aa7c:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa7e:	4418      	add	r0, r3
 800aa80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa82:	4413      	add	r3, r2
 800aa84:	4298      	cmp	r0, r3
 800aa86:	d006      	beq.n	800aa96 <tcp_receive+0x2d2>
 800aa88:	4b2c      	ldr	r3, [pc, #176]	; (800ab3c <tcp_receive+0x378>)
 800aa8a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800aa8e:	4930      	ldr	r1, [pc, #192]	; (800ab50 <tcp_receive+0x38c>)
 800aa90:	482c      	ldr	r0, [pc, #176]	; (800ab44 <tcp_receive+0x380>)
 800aa92:	f004 f837 	bl	800eb04 <iprintf>
        if (pcb->ooseq != NULL) {
 800aa96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8107 	beq.w	800acac <tcp_receive+0x4e8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa9e:	68eb      	ldr	r3, [r5, #12]
 800aaa0:	8998      	ldrh	r0, [r3, #12]
 800aaa2:	f7fa fb4b 	bl	800513c <lwip_htons>
 800aaa6:	07c0      	lsls	r0, r0, #31
 800aaa8:	f100 80fd 	bmi.w	800aca6 <tcp_receive+0x4e2>
            struct tcp_seg *next = pcb->ooseq;
 800aaac:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            while (next &&
 800aab0:	f1b8 0f00 	cmp.w	r8, #0
 800aab4:	d03b      	beq.n	800ab2e <tcp_receive+0x36a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aab6:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800aaba:	6830      	ldr	r0, [r6, #0]
 800aabc:	883b      	ldrh	r3, [r7, #0]
 800aabe:	f8de 2004 	ldr.w	r2, [lr, #4]
 800aac2:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800aac6:	4403      	add	r3, r0
 800aac8:	4411      	add	r1, r2
 800aaca:	1a59      	subs	r1, r3, r1
            while (next &&
 800aacc:	2900      	cmp	r1, #0
 800aace:	f280 812a 	bge.w	800ad26 <tcp_receive+0x562>
                TCP_SEQ_GT(seqno + tcplen,
 800aad2:	1a9b      	subs	r3, r3, r2
            if (next &&
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd2a      	ble.n	800ab2e <tcp_receive+0x36a>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aad8:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aada:	1a12      	subs	r2, r2, r0
 800aadc:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aade:	8998      	ldrh	r0, [r3, #12]
 800aae0:	f7fa fb2c 	bl	800513c <lwip_htons>
 800aae4:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
 800aae6:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800aae8:	bf42      	ittt	mi
 800aaea:	892b      	ldrhmi	r3, [r5, #8]
 800aaec:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800aaf0:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800aaf2:	8929      	ldrh	r1, [r5, #8]
 800aaf4:	f7fe fa08 	bl	8008f08 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aaf8:	68eb      	ldr	r3, [r5, #12]
 800aafa:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800aafe:	8998      	ldrh	r0, [r3, #12]
 800ab00:	f7fa fb1c 	bl	800513c <lwip_htons>
 800ab04:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ab08:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800ab0a:	bf18      	it	ne
 800ab0c:	2001      	movne	r0, #1
 800ab0e:	4448      	add	r0, r9
 800ab10:	b280      	uxth	r0, r0
 800ab12:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ab14:	4418      	add	r0, r3
 800ab16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4298      	cmp	r0, r3
 800ab1e:	d006      	beq.n	800ab2e <tcp_receive+0x36a>
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <tcp_receive+0x378>)
 800ab22:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ab26:	490b      	ldr	r1, [pc, #44]	; (800ab54 <tcp_receive+0x390>)
 800ab28:	4806      	ldr	r0, [pc, #24]	; (800ab44 <tcp_receive+0x380>)
 800ab2a:	f003 ffeb 	bl	800eb04 <iprintf>
            pcb->ooseq = next;
 800ab2e:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 800ab32:	e0bb      	b.n	800acac <tcp_receive+0x4e8>
 800ab34:	2000bee0 	.word	0x2000bee0
 800ab38:	20006d54 	.word	0x20006d54
 800ab3c:	08011a7f 	.word	0x08011a7f
 800ab40:	08011b22 	.word	0x08011b22
 800ab44:	0800fff2 	.word	0x0800fff2
 800ab48:	08011b32 	.word	0x08011b32
 800ab4c:	08011b41 	.word	0x08011b41
 800ab50:	08011b51 	.word	0x08011b51
 800ab54:	08011b88 	.word	0x08011b88
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab58:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ab5a:	1a51      	subs	r1, r2, r1
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	f300 8089 	bgt.w	800ac74 <tcp_receive+0x4b0>
      if (pcb->flags & TF_INFR) {
 800ab62:	8b61      	ldrh	r1, [r4, #26]
 800ab64:	0748      	lsls	r0, r1, #29
 800ab66:	d509      	bpl.n	800ab7c <tcp_receive+0x3b8>
        tcp_clear_flags(pcb, TF_INFR);
 800ab68:	f021 0104 	bic.w	r1, r1, #4
 800ab6c:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800ab6e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800ab72:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ab76:	2100      	movs	r1, #0
 800ab78:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab7c:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 800ab80:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab82:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800ab84:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800ab86:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab88:	eb01 01ee 	add.w	r1, r1, lr, asr #3
      pcb->nrtx = 0;
 800ab8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800ab90:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab92:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800ab96:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800ab9a:	d91b      	bls.n	800abd4 <tcp_receive+0x410>
        if (pcb->cwnd < pcb->ssthresh) {
 800ab9c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aba0:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800aba2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800aba6:	428a      	cmp	r2, r1
 800aba8:	d93e      	bls.n	800ac28 <tcp_receive+0x464>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800abaa:	8b62      	ldrh	r2, [r4, #26]
 800abac:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800abb0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800abb2:	bf0c      	ite	eq
 800abb4:	2002      	moveq	r0, #2
 800abb6:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800abb8:	fb12 f200 	smulbb	r2, r2, r0
 800abbc:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800abbe:	429a      	cmp	r2, r3
 800abc0:	bf94      	ite	ls
 800abc2:	188b      	addls	r3, r1, r2
 800abc4:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	4299      	cmp	r1, r3
 800abca:	d901      	bls.n	800abd0 <tcp_receive+0x40c>
          TCP_WND_INC(pcb->cwnd, increase);
 800abcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800abd0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800abd4:	f104 0866 	add.w	r8, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800abd8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800abda:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800abdc:	4640      	mov	r0, r8
 800abde:	f7ff fd97 	bl	800a710 <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800abe2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800abe4:	4602      	mov	r2, r0
 800abe6:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800abe8:	4640      	mov	r0, r8
 800abea:	f7ff fd91 	bl	800a710 <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 800abee:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800abf0:	66e0      	str	r0, [r4, #108]	; 0x6c
 800abf2:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 800abf4:	bb63      	cbnz	r3, 800ac50 <tcp_receive+0x48c>
        pcb->rtime = -1;
 800abf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abfa:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800abfc:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 800abfe:	b908      	cbnz	r0, 800ac04 <tcp_receive+0x440>
        pcb->unsent_oversize = 0;
 800ac00:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ac04:	49a7      	ldr	r1, [pc, #668]	; (800aea4 <tcp_receive+0x6e0>)
 800ac06:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800ac0a:	8809      	ldrh	r1, [r1, #0]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800ac12:	8b62      	ldrh	r2, [r4, #26]
 800ac14:	0511      	lsls	r1, r2, #20
 800ac16:	f57f ae62 	bpl.w	800a8de <tcp_receive+0x11a>
        if (pcb->unacked == NULL) {
 800ac1a:	bb3b      	cbnz	r3, 800ac6c <tcp_receive+0x4a8>
          if ((pcb->unsent == NULL) ||
 800ac1c:	b9d0      	cbnz	r0, 800ac54 <tcp_receive+0x490>
          tcp_clear_flags(pcb, TF_RTO);
 800ac1e:	8b63      	ldrh	r3, [r4, #26]
 800ac20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac24:	8363      	strh	r3, [r4, #26]
 800ac26:	e65a      	b.n	800a8de <tcp_receive+0x11a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ac28:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ac2c:	4413      	add	r3, r2
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	429a      	cmp	r2, r3
 800ac32:	bf88      	it	hi
 800ac34:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800ac38:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ac3c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac40:	4299      	cmp	r1, r3
 800ac42:	d8c7      	bhi.n	800abd4 <tcp_receive+0x410>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ac44:	1a5b      	subs	r3, r3, r1
 800ac46:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ac4a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ac4c:	440b      	add	r3, r1
 800ac4e:	e7ba      	b.n	800abc6 <tcp_receive+0x402>
        pcb->rtime = 0;
 800ac50:	8622      	strh	r2, [r4, #48]	; 0x30
 800ac52:	e7d3      	b.n	800abfc <tcp_receive+0x438>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ac54:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 800ac58:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ac5a:	6858      	ldr	r0, [r3, #4]
 800ac5c:	f7fa fa71 	bl	8005142 <lwip_htonl>
 800ac60:	eba8 0000 	sub.w	r0, r8, r0
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f73f ae3a 	bgt.w	800a8de <tcp_receive+0x11a>
 800ac6a:	e7d8      	b.n	800ac1e <tcp_receive+0x45a>
 800ac6c:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	e7f2      	b.n	800ac5a <tcp_receive+0x496>
      tcp_send_empty_ack(pcb);
 800ac74:	4620      	mov	r0, r4
 800ac76:	f001 fe13 	bl	800c8a0 <tcp_send_empty_ack>
 800ac7a:	e630      	b.n	800a8de <tcp_receive+0x11a>
        off -= p->len;
 800ac7c:	1aad      	subs	r5, r5, r2
        p->tot_len = new_tot_len;
 800ac7e:	f8a9 3008 	strh.w	r3, [r9, #8]
        p->len = 0;
 800ac82:	f8a9 100a 	strh.w	r1, [r9, #10]
        off -= p->len;
 800ac86:	b2ad      	uxth	r5, r5
        p = p->next;
 800ac88:	f8d9 9000 	ldr.w	r9, [r9]
 800ac8c:	e692      	b.n	800a9b4 <tcp_receive+0x1f0>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800ac92:	bfbe      	ittt	lt
 800ac94:	8b63      	ldrhlt	r3, [r4, #26]
 800ac96:	f043 0302 	orrlt.w	r3, r3, #2
 800ac9a:	8363      	strhlt	r3, [r4, #26]
 800ac9c:	e698      	b.n	800a9d0 <tcp_receive+0x20c>
              pcb->ooseq = pcb->ooseq->next;
 800ac9e:	6803      	ldr	r3, [r0, #0]
 800aca0:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800aca2:	f7fe fcf5 	bl	8009690 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800aca6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1f8      	bne.n	800ac9e <tcp_receive+0x4da>
        pcb->rcv_nxt = seqno + tcplen;
 800acac:	883a      	ldrh	r2, [r7, #0]
 800acae:	6833      	ldr	r3, [r6, #0]
 800acb0:	4413      	add	r3, r2
 800acb2:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800acb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d206      	bcs.n	800acc8 <tcp_receive+0x504>
 800acba:	4b7b      	ldr	r3, [pc, #492]	; (800aea8 <tcp_receive+0x6e4>)
 800acbc:	f240 6207 	movw	r2, #1543	; 0x607
 800acc0:	497a      	ldr	r1, [pc, #488]	; (800aeac <tcp_receive+0x6e8>)
 800acc2:	487b      	ldr	r0, [pc, #492]	; (800aeb0 <tcp_receive+0x6ec>)
 800acc4:	f003 ff1e 	bl	800eb04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800acc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800acca:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800accc:	883a      	ldrh	r2, [r7, #0]
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800acd2:	f7fe fc6b 	bl	80095ac <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800acd6:	686b      	ldr	r3, [r5, #4]
 800acd8:	891a      	ldrh	r2, [r3, #8]
 800acda:	b11a      	cbz	r2, 800ace4 <tcp_receive+0x520>
          recv_data = inseg.p;
 800acdc:	4a75      	ldr	r2, [pc, #468]	; (800aeb4 <tcp_receive+0x6f0>)
 800acde:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ace4:	68eb      	ldr	r3, [r5, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ace6:	4f70      	ldr	r7, [pc, #448]	; (800aea8 <tcp_receive+0x6e4>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ace8:	8998      	ldrh	r0, [r3, #12]
 800acea:	f7fa fa27 	bl	800513c <lwip_htons>
 800acee:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800acf0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800aec0 <tcp_receive+0x6fc>
          recv_flags |= TF_GOT_FIN;
 800acf4:	bf48      	it	mi
 800acf6:	4a70      	ldrmi	r2, [pc, #448]	; (800aeb8 <tcp_receive+0x6f4>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800acf8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800aeb0 <tcp_receive+0x6ec>
          recv_flags |= TF_GOT_FIN;
 800acfc:	bf42      	ittt	mi
 800acfe:	7813      	ldrbmi	r3, [r2, #0]
 800ad00:	f043 0320 	orrmi.w	r3, r3, #32
 800ad04:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800ad06:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800ad08:	b125      	cbz	r5, 800ad14 <tcp_receive+0x550>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ad0a:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800ad0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ad0e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800ad10:	428b      	cmp	r3, r1
 800ad12:	d033      	beq.n	800ad7c <tcp_receive+0x5b8>
        tcp_ack(pcb);
 800ad14:	8b63      	ldrh	r3, [r4, #26]
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	f140 8087 	bpl.w	800ae2a <tcp_receive+0x666>
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	e083      	b.n	800ae2e <tcp_receive+0x66a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ad26:	f8be 000c 	ldrh.w	r0, [lr, #12]
 800ad2a:	f7fa fa07 	bl	800513c <lwip_htons>
 800ad2e:	07c1      	lsls	r1, r0, #31
 800ad30:	d51d      	bpl.n	800ad6e <tcp_receive+0x5aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ad32:	68eb      	ldr	r3, [r5, #12]
 800ad34:	8998      	ldrh	r0, [r3, #12]
 800ad36:	f7fa fa01 	bl	800513c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ad3a:	0782      	lsls	r2, r0, #30
 800ad3c:	d417      	bmi.n	800ad6e <tcp_receive+0x5aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ad3e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800ad42:	2001      	movs	r0, #1
 800ad44:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800ad48:	f7fa f9f8 	bl	800513c <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800ad4c:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ad4e:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 800ad52:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ad56:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ad5a:	8998      	ldrh	r0, [r3, #12]
 800ad5c:	f7fa f9ee 	bl	800513c <lwip_htons>
 800ad60:	f010 0003 	ands.w	r0, r0, #3
 800ad64:	bf18      	it	ne
 800ad66:	2001      	movne	r0, #1
 800ad68:	4481      	add	r9, r0
 800ad6a:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 800ad6e:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
 800ad72:	4640      	mov	r0, r8
 800ad74:	f7fe fc8c 	bl	8009690 <tcp_seg_free>
              next = next->next;
 800ad78:	46c8      	mov	r8, r9
 800ad7a:	e699      	b.n	800aab0 <tcp_receive+0x2ec>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad7c:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad7e:	8990      	ldrh	r0, [r2, #12]
 800ad80:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ad84:	f7fa f9da 	bl	800513c <lwip_htons>
 800ad88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad8a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad8e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad92:	bf18      	it	ne
 800ad94:	2001      	movne	r0, #1
 800ad96:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad98:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad9a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad9c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ada0:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ada2:	8998      	ldrh	r0, [r3, #12]
 800ada4:	f7fa f9ca 	bl	800513c <lwip_htons>
 800ada8:	f010 0003 	ands.w	r0, r0, #3
 800adac:	bf18      	it	ne
 800adae:	2001      	movne	r0, #1
 800adb0:	4458      	add	r0, fp
 800adb2:	4582      	cmp	sl, r0
 800adb4:	d206      	bcs.n	800adc4 <tcp_receive+0x600>
 800adb6:	463b      	mov	r3, r7
 800adb8:	f240 622c 	movw	r2, #1580	; 0x62c
 800adbc:	4641      	mov	r1, r8
 800adbe:	4648      	mov	r0, r9
 800adc0:	f003 fea0 	bl	800eb04 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800adc4:	68eb      	ldr	r3, [r5, #12]
 800adc6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800adca:	8998      	ldrh	r0, [r3, #12]
 800adcc:	f7fa f9b6 	bl	800513c <lwip_htons>
 800add0:	f010 0003 	ands.w	r0, r0, #3
 800add4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800add6:	bf18      	it	ne
 800add8:	2001      	movne	r0, #1
 800adda:	4450      	add	r0, sl
 800addc:	1a18      	subs	r0, r3, r0
 800adde:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7fe fbe3 	bl	80095ac <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800ade6:	6869      	ldr	r1, [r5, #4]
 800ade8:	890b      	ldrh	r3, [r1, #8]
 800adea:	b133      	cbz	r3, 800adfa <tcp_receive+0x636>
            if (recv_data) {
 800adec:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <tcp_receive+0x6f0>)
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	b1c8      	cbz	r0, 800ae26 <tcp_receive+0x662>
              pbuf_cat(recv_data, cseg->p);
 800adf2:	f7fe f91d 	bl	8009030 <pbuf_cat>
            cseg->p = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800adfa:	68eb      	ldr	r3, [r5, #12]
 800adfc:	8998      	ldrh	r0, [r3, #12]
 800adfe:	f7fa f99d 	bl	800513c <lwip_htons>
 800ae02:	07c0      	lsls	r0, r0, #31
 800ae04:	d509      	bpl.n	800ae1a <tcp_receive+0x656>
            recv_flags |= TF_GOT_FIN;
 800ae06:	4a2c      	ldr	r2, [pc, #176]	; (800aeb8 <tcp_receive+0x6f4>)
 800ae08:	7813      	ldrb	r3, [r2, #0]
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ae10:	7d23      	ldrb	r3, [r4, #20]
 800ae12:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800ae14:	bf04      	itt	eq
 800ae16:	2307      	moveq	r3, #7
 800ae18:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800ae1a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800ae1c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800ae1e:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800ae20:	f7fe fc36 	bl	8009690 <tcp_seg_free>
 800ae24:	e76f      	b.n	800ad06 <tcp_receive+0x542>
              recv_data = cseg->p;
 800ae26:	6019      	str	r1, [r3, #0]
 800ae28:	e7e5      	b.n	800adf6 <tcp_receive+0x632>
        tcp_ack(pcb);
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800ae2e:	8363      	strh	r3, [r4, #26]
}
 800ae30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
 800ae34:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800ae36:	b945      	cbnz	r5, 800ae4a <tcp_receive+0x686>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ae38:	4820      	ldr	r0, [pc, #128]	; (800aebc <tcp_receive+0x6f8>)
 800ae3a:	f7fe fc3f 	bl	80096bc <tcp_seg_copy>
 800ae3e:	6760      	str	r0, [r4, #116]	; 0x74
        tcp_send_empty_ack(pcb);
 800ae40:	4620      	mov	r0, r4
}
 800ae42:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800ae46:	f001 bd2b 	b.w	800c8a0 <tcp_send_empty_ack>
 800ae4a:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae4e:	f103 3cff 	add.w	ip, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800ae52:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800ae56:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d115      	bne.n	800ae8a <tcp_receive+0x6c6>
              if (inseg.len > next->len) {
 800ae5e:	4817      	ldr	r0, [pc, #92]	; (800aebc <tcp_receive+0x6f8>)
 800ae60:	892b      	ldrh	r3, [r5, #8]
 800ae62:	8902      	ldrh	r2, [r0, #8]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d9eb      	bls.n	800ae40 <tcp_receive+0x67c>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae68:	f7fe fc28 	bl	80096bc <tcp_seg_copy>
                if (cseg != NULL) {
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d0e7      	beq.n	800ae40 <tcp_receive+0x67c>
                  if (prev != NULL) {
 800ae70:	f1b8 0f00 	cmp.w	r8, #0
 800ae74:	d007      	beq.n	800ae86 <tcp_receive+0x6c2>
                    prev->next = cseg;
 800ae76:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	f7ff fb88 	bl	800a590 <tcp_oos_insert_segment>
 800ae80:	e7de      	b.n	800ae40 <tcp_receive+0x67c>
 800ae82:	460d      	mov	r5, r1
 800ae84:	e7e5      	b.n	800ae52 <tcp_receive+0x68e>
                    pcb->ooseq = cseg;
 800ae86:	6760      	str	r0, [r4, #116]	; 0x74
 800ae88:	e7f7      	b.n	800ae7a <tcp_receive+0x6b6>
              if (prev == NULL) {
 800ae8a:	f1b8 0f00 	cmp.w	r8, #0
 800ae8e:	d119      	bne.n	800aec4 <tcp_receive+0x700>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ae90:	1a99      	subs	r1, r3, r2
 800ae92:	2900      	cmp	r1, #0
 800ae94:	da3d      	bge.n	800af12 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae96:	4809      	ldr	r0, [pc, #36]	; (800aebc <tcp_receive+0x6f8>)
 800ae98:	f7fe fc10 	bl	80096bc <tcp_seg_copy>
                  if (cseg != NULL) {
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d0cf      	beq.n	800ae40 <tcp_receive+0x67c>
                    pcb->ooseq = cseg;
 800aea0:	6760      	str	r0, [r4, #116]	; 0x74
 800aea2:	e7ea      	b.n	800ae7a <tcp_receive+0x6b6>
 800aea4:	20006d64 	.word	0x20006d64
 800aea8:	08011a7f 	.word	0x08011a7f
 800aeac:	08011bc3 	.word	0x08011bc3
 800aeb0:	0800fff2 	.word	0x0800fff2
 800aeb4:	20006d68 	.word	0x20006d68
 800aeb8:	20006d6c 	.word	0x20006d6c
 800aebc:	20006d54 	.word	0x20006d54
 800aec0:	08011be2 	.word	0x08011be2
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aec4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800aec8:	6849      	ldr	r1, [r1, #4]
 800aeca:	ebac 0101 	sub.w	r1, ip, r1
 800aece:	2900      	cmp	r1, #0
 800aed0:	db1f      	blt.n	800af12 <tcp_receive+0x74e>
 800aed2:	1a81      	subs	r1, r0, r2
 800aed4:	2900      	cmp	r1, #0
 800aed6:	dc1c      	bgt.n	800af12 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aed8:	484d      	ldr	r0, [pc, #308]	; (800b010 <tcp_receive+0x84c>)
 800aeda:	f7fe fbef 	bl	80096bc <tcp_seg_copy>
                  if (cseg != NULL) {
 800aede:	4607      	mov	r7, r0
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d0ad      	beq.n	800ae40 <tcp_receive+0x67c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aee4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aee8:	6831      	ldr	r1, [r6, #0]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	1a5b      	subs	r3, r3, r1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd07      	ble.n	800af08 <tcp_receive+0x744>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aef8:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 800aefa:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aefe:	b289      	uxth	r1, r1
 800af00:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800af04:	f7fe f800 	bl	8008f08 <pbuf_realloc>
                    prev->next = cseg;
 800af08:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800af0c:	4629      	mov	r1, r5
 800af0e:	4638      	mov	r0, r7
 800af10:	e7b4      	b.n	800ae7c <tcp_receive+0x6b8>
              if (next->next == NULL &&
 800af12:	6829      	ldr	r1, [r5, #0]
 800af14:	46a8      	mov	r8, r5
 800af16:	2900      	cmp	r1, #0
 800af18:	d1b3      	bne.n	800ae82 <tcp_receive+0x6be>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800af1a:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dd8f      	ble.n	800ae40 <tcp_receive+0x67c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800af20:	f8be 000c 	ldrh.w	r0, [lr, #12]
 800af24:	f7fa f90a 	bl	800513c <lwip_htons>
 800af28:	07c2      	lsls	r2, r0, #31
 800af2a:	d489      	bmi.n	800ae40 <tcp_receive+0x67c>
                next->next = tcp_seg_copy(&inseg);
 800af2c:	4838      	ldr	r0, [pc, #224]	; (800b010 <tcp_receive+0x84c>)
 800af2e:	f7fe fbc5 	bl	80096bc <tcp_seg_copy>
 800af32:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800af34:	2800      	cmp	r0, #0
 800af36:	d083      	beq.n	800ae40 <tcp_receive+0x67c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800af38:	68eb      	ldr	r3, [r5, #12]
 800af3a:	6831      	ldr	r1, [r6, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	892b      	ldrh	r3, [r5, #8]
 800af40:	4413      	add	r3, r2
 800af42:	1a5b      	subs	r3, r3, r1
 800af44:	2b00      	cmp	r3, #0
 800af46:	dd05      	ble.n	800af54 <tcp_receive+0x790>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af48:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800af4a:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af4c:	b289      	uxth	r1, r1
 800af4e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800af50:	f7fd ffda 	bl	8008f08 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800af54:	6832      	ldr	r2, [r6, #0]
 800af56:	883b      	ldrh	r3, [r7, #0]
 800af58:	4413      	add	r3, r2
 800af5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af5c:	1a9b      	subs	r3, r3, r2
 800af5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800af60:	1a9b      	subs	r3, r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	f77f af6c 	ble.w	800ae40 <tcp_receive+0x67c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	8998      	ldrh	r0, [r3, #12]
 800af6e:	f7fa f8e5 	bl	800513c <lwip_htons>
 800af72:	07c3      	lsls	r3, r0, #31
 800af74:	d511      	bpl.n	800af9a <tcp_receive+0x7d6>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800af7c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800af80:	4640      	mov	r0, r8
 800af82:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800af86:	f7fa f8d9 	bl	800513c <lwip_htons>
 800af8a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800af8e:	f7fa f8d5 	bl	800513c <lwip_htons>
 800af92:	ea48 0800 	orr.w	r8, r8, r0
 800af96:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800af9a:	6832      	ldr	r2, [r6, #0]
 800af9c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	1a89      	subs	r1, r1, r2
 800afa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800afa4:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800afa6:	4411      	add	r1, r2
 800afa8:	b289      	uxth	r1, r1
 800afaa:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800afac:	f7fd ffac 	bl	8008f08 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	891d      	ldrh	r5, [r3, #8]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	8998      	ldrh	r0, [r3, #12]
 800afb8:	f7fa f8c0 	bl	800513c <lwip_htons>
 800afbc:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800afc0:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800afc2:	bf18      	it	ne
 800afc4:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800afc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800afc8:	4428      	add	r0, r5
 800afca:	b280      	uxth	r0, r0
 800afcc:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800afce:	4418      	add	r0, r3
 800afd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800afd2:	4413      	add	r3, r2
 800afd4:	4298      	cmp	r0, r3
 800afd6:	f43f af33 	beq.w	800ae40 <tcp_receive+0x67c>
 800afda:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <tcp_receive+0x850>)
 800afdc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800afe0:	490d      	ldr	r1, [pc, #52]	; (800b018 <tcp_receive+0x854>)
 800afe2:	480e      	ldr	r0, [pc, #56]	; (800b01c <tcp_receive+0x858>)
 800afe4:	f003 fd8e 	bl	800eb04 <iprintf>
 800afe8:	e72a      	b.n	800ae40 <tcp_receive+0x67c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afea:	6833      	ldr	r3, [r6, #0]
 800afec:	1a99      	subs	r1, r3, r2
 800afee:	2900      	cmp	r1, #0
 800aff0:	db05      	blt.n	800affe <tcp_receive+0x83a>
 800aff2:	3301      	adds	r3, #1
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aff8:	1a9b      	subs	r3, r3, r2
 800affa:	2b00      	cmp	r3, #0
 800affc:	dd05      	ble.n	800b00a <tcp_receive+0x846>
      tcp_ack_now(pcb);
 800affe:	8b63      	ldrh	r3, [r4, #26]
 800b000:	e68e      	b.n	800ad20 <tcp_receive+0x55c>
        pcb->dupacks = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b008:	e469      	b.n	800a8de <tcp_receive+0x11a>
 800b00a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00e:	bf00      	nop
 800b010:	20006d54 	.word	0x20006d54
 800b014:	08011a7f 	.word	0x08011a7f
 800b018:	08011b51 	.word	0x08011b51
 800b01c:	0800fff2 	.word	0x0800fff2

0800b020 <tcp_input>:
{
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b024:	4605      	mov	r5, r0
{
 800b026:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b028:	b928      	cbnz	r0, 800b036 <tcp_input+0x16>
 800b02a:	4bac      	ldr	r3, [pc, #688]	; (800b2dc <tcp_input+0x2bc>)
 800b02c:	2283      	movs	r2, #131	; 0x83
 800b02e:	49ac      	ldr	r1, [pc, #688]	; (800b2e0 <tcp_input+0x2c0>)
 800b030:	48ac      	ldr	r0, [pc, #688]	; (800b2e4 <tcp_input+0x2c4>)
 800b032:	f003 fd67 	bl	800eb04 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b036:	686b      	ldr	r3, [r5, #4]
 800b038:	4eab      	ldr	r6, [pc, #684]	; (800b2e8 <tcp_input+0x2c8>)
 800b03a:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800b03c:	896b      	ldrh	r3, [r5, #10]
 800b03e:	2b13      	cmp	r3, #19
 800b040:	f240 80a9 	bls.w	800b196 <tcp_input+0x176>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b044:	4ca9      	ldr	r4, [pc, #676]	; (800b2ec <tcp_input+0x2cc>)
 800b046:	6821      	ldr	r1, [r4, #0]
 800b048:	46a0      	mov	r8, r4
 800b04a:	6960      	ldr	r0, [r4, #20]
 800b04c:	f7fc fc37 	bl	80078be <ip4_addr_isbroadcast_u32>
 800b050:	4607      	mov	r7, r0
 800b052:	2800      	cmp	r0, #0
 800b054:	f040 809f 	bne.w	800b196 <tcp_input+0x176>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b058:	6963      	ldr	r3, [r4, #20]
 800b05a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b05e:	2be0      	cmp	r3, #224	; 0xe0
 800b060:	f000 8099 	beq.w	800b196 <tcp_input+0x176>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b064:	6833      	ldr	r3, [r6, #0]
 800b066:	8998      	ldrh	r0, [r3, #12]
 800b068:	f7fa f868 	bl	800513c <lwip_htons>
 800b06c:	0a81      	lsrs	r1, r0, #10
 800b06e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b072:	2913      	cmp	r1, #19
 800b074:	f240 808f 	bls.w	800b196 <tcp_input+0x176>
 800b078:	b28a      	uxth	r2, r1
 800b07a:	892b      	ldrh	r3, [r5, #8]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	f0c0 808a 	bcc.w	800b196 <tcp_input+0x176>
  tcphdr_opt2 = NULL;
 800b082:	489b      	ldr	r0, [pc, #620]	; (800b2f0 <tcp_input+0x2d0>)
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b084:	f1a2 0314 	sub.w	r3, r2, #20
 800b088:	4c9a      	ldr	r4, [pc, #616]	; (800b2f4 <tcp_input+0x2d4>)
  tcphdr_opt2 = NULL;
 800b08a:	6007      	str	r7, [r0, #0]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b08c:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800b08e:	896f      	ldrh	r7, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b090:	8023      	strh	r3, [r4, #0]
  if (p->len >= hdrlen_bytes) {
 800b092:	4297      	cmp	r7, r2
 800b094:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800b340 <tcp_input+0x320>
 800b098:	4607      	mov	r7, r0
 800b09a:	d341      	bcc.n	800b120 <tcp_input+0x100>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b09c:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800b09e:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0a2:	f7fd fdff 	bl	8008ca4 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b0a6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b0a8:	4f93      	ldr	r7, [pc, #588]	; (800b2f8 <tcp_input+0x2d8>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b0aa:	8820      	ldrh	r0, [r4, #0]
 800b0ac:	f7fa f846 	bl	800513c <lwip_htons>
 800b0b0:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b0b2:	6834      	ldr	r4, [r6, #0]
 800b0b4:	46bb      	mov	fp, r7
 800b0b6:	8860      	ldrh	r0, [r4, #2]
 800b0b8:	f7fa f840 	bl	800513c <lwip_htons>
 800b0bc:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b0be:	6834      	ldr	r4, [r6, #0]
 800b0c0:	6860      	ldr	r0, [r4, #4]
 800b0c2:	f7fa f83e 	bl	8005142 <lwip_htonl>
 800b0c6:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b0c8:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b0ca:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b0cc:	68a0      	ldr	r0, [r4, #8]
 800b0ce:	f7fa f838 	bl	8005142 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b0d2:	f8d6 9000 	ldr.w	r9, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b0d6:	60a0      	str	r0, [r4, #8]
 800b0d8:	4c88      	ldr	r4, [pc, #544]	; (800b2fc <tcp_input+0x2dc>)
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	46a2      	mov	sl, r4
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b0de:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 800b0e2:	f7fa f82b 	bl	800513c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800b0e6:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b0e8:	f8a9 000e 	strh.w	r0, [r9, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b0ec:	8998      	ldrh	r0, [r3, #12]
 800b0ee:	f7fa f825 	bl	800513c <lwip_htons>
 800b0f2:	4b83      	ldr	r3, [pc, #524]	; (800b300 <tcp_input+0x2e0>)
 800b0f4:	b2c0      	uxtb	r0, r0
 800b0f6:	9305      	str	r3, [sp, #20]
 800b0f8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b0fc:	f010 0f03 	tst.w	r0, #3
  flags = TCPH_FLAGS(tcphdr);
 800b100:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b102:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b104:	d141      	bne.n	800b18a <tcp_input+0x16a>
  tcplen = p->tot_len;
 800b106:	4b7f      	ldr	r3, [pc, #508]	; (800b304 <tcp_input+0x2e4>)
 800b108:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b10a:	4f7f      	ldr	r7, [pc, #508]	; (800b308 <tcp_input+0x2e8>)
  prev = NULL;
 800b10c:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b110:	683c      	ldr	r4, [r7, #0]
 800b112:	2c00      	cmp	r4, #0
 800b114:	d145      	bne.n	800b1a2 <tcp_input+0x182>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b116:	4b7d      	ldr	r3, [pc, #500]	; (800b30c <tcp_input+0x2ec>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b118:	4c70      	ldr	r4, [pc, #448]	; (800b2dc <tcp_input+0x2bc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b11a:	f8d3 9000 	ldr.w	r9, [r3]
 800b11e:	e17a      	b.n	800b416 <tcp_input+0x3f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b92b      	cbnz	r3, 800b130 <tcp_input+0x110>
 800b124:	4b6d      	ldr	r3, [pc, #436]	; (800b2dc <tcp_input+0x2bc>)
 800b126:	22c2      	movs	r2, #194	; 0xc2
 800b128:	4979      	ldr	r1, [pc, #484]	; (800b310 <tcp_input+0x2f0>)
 800b12a:	486e      	ldr	r0, [pc, #440]	; (800b2e4 <tcp_input+0x2c4>)
 800b12c:	f003 fcea 	bl	800eb04 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800b130:	2114      	movs	r1, #20
 800b132:	4628      	mov	r0, r5
 800b134:	f7fd fdb6 	bl	8008ca4 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b138:	8969      	ldrh	r1, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b13a:	8824      	ldrh	r4, [r4, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800b13c:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800b13e:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b142:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 800b144:	f7fd fdae 	bl	8008ca4 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b148:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b14a:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800b14c:	8943      	ldrh	r3, [r0, #10]
 800b14e:	42a3      	cmp	r3, r4
 800b150:	d321      	bcc.n	800b196 <tcp_input+0x176>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b152:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800b154:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b156:	603b      	str	r3, [r7, #0]
    pbuf_remove_header(p->next, opt2len);
 800b158:	f7fd fda4 	bl	8008ca4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b15c:	892b      	ldrh	r3, [r5, #8]
 800b15e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b160:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b162:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b164:	b12b      	cbz	r3, 800b172 <tcp_input+0x152>
 800b166:	4b5d      	ldr	r3, [pc, #372]	; (800b2dc <tcp_input+0x2bc>)
 800b168:	22df      	movs	r2, #223	; 0xdf
 800b16a:	496a      	ldr	r1, [pc, #424]	; (800b314 <tcp_input+0x2f4>)
 800b16c:	485d      	ldr	r0, [pc, #372]	; (800b2e4 <tcp_input+0x2c4>)
 800b16e:	f003 fcc9 	bl	800eb04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	892a      	ldrh	r2, [r5, #8]
 800b176:	891b      	ldrh	r3, [r3, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d094      	beq.n	800b0a6 <tcp_input+0x86>
 800b17c:	4b57      	ldr	r3, [pc, #348]	; (800b2dc <tcp_input+0x2bc>)
 800b17e:	22e0      	movs	r2, #224	; 0xe0
 800b180:	4965      	ldr	r1, [pc, #404]	; (800b318 <tcp_input+0x2f8>)
 800b182:	4858      	ldr	r0, [pc, #352]	; (800b2e4 <tcp_input+0x2c4>)
 800b184:	f003 fcbe 	bl	800eb04 <iprintf>
 800b188:	e78d      	b.n	800b0a6 <tcp_input+0x86>
    tcplen++;
 800b18a:	1c53      	adds	r3, r2, #1
 800b18c:	495d      	ldr	r1, [pc, #372]	; (800b304 <tcp_input+0x2e4>)
 800b18e:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800b190:	429a      	cmp	r2, r3
    tcplen++;
 800b192:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800b194:	d9b9      	bls.n	800b10a <tcp_input+0xea>
  pbuf_free(p);
 800b196:	4628      	mov	r0, r5
}
 800b198:	b009      	add	sp, #36	; 0x24
 800b19a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800b19e:	f7fd bdb5 	b.w	8008d0c <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b1a2:	7d23      	ldrb	r3, [r4, #20]
 800b1a4:	b92b      	cbnz	r3, 800b1b2 <tcp_input+0x192>
 800b1a6:	4b4d      	ldr	r3, [pc, #308]	; (800b2dc <tcp_input+0x2bc>)
 800b1a8:	22fb      	movs	r2, #251	; 0xfb
 800b1aa:	495c      	ldr	r1, [pc, #368]	; (800b31c <tcp_input+0x2fc>)
 800b1ac:	484d      	ldr	r0, [pc, #308]	; (800b2e4 <tcp_input+0x2c4>)
 800b1ae:	f003 fca9 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b1b2:	7d23      	ldrb	r3, [r4, #20]
 800b1b4:	2b0a      	cmp	r3, #10
 800b1b6:	d105      	bne.n	800b1c4 <tcp_input+0x1a4>
 800b1b8:	4b48      	ldr	r3, [pc, #288]	; (800b2dc <tcp_input+0x2bc>)
 800b1ba:	22fc      	movs	r2, #252	; 0xfc
 800b1bc:	4958      	ldr	r1, [pc, #352]	; (800b320 <tcp_input+0x300>)
 800b1be:	4849      	ldr	r0, [pc, #292]	; (800b2e4 <tcp_input+0x2c4>)
 800b1c0:	f003 fca0 	bl	800eb04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b1c4:	7d23      	ldrb	r3, [r4, #20]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d105      	bne.n	800b1d6 <tcp_input+0x1b6>
 800b1ca:	4b44      	ldr	r3, [pc, #272]	; (800b2dc <tcp_input+0x2bc>)
 800b1cc:	22fd      	movs	r2, #253	; 0xfd
 800b1ce:	4955      	ldr	r1, [pc, #340]	; (800b324 <tcp_input+0x304>)
 800b1d0:	4844      	ldr	r0, [pc, #272]	; (800b2e4 <tcp_input+0x2c4>)
 800b1d2:	f003 fc97 	bl	800eb04 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1d6:	7a21      	ldrb	r1, [r4, #8]
 800b1d8:	68e2      	ldr	r2, [r4, #12]
 800b1da:	b141      	cbz	r1, 800b1ee <tcp_input+0x1ce>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1e4:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	4299      	cmp	r1, r3
 800b1ea:	f040 80ad 	bne.w	800b348 <tcp_input+0x328>
    if (pcb->remote_port == tcphdr->src &&
 800b1ee:	6833      	ldr	r3, [r6, #0]
 800b1f0:	8b20      	ldrh	r0, [r4, #24]
 800b1f2:	8819      	ldrh	r1, [r3, #0]
 800b1f4:	4288      	cmp	r0, r1
 800b1f6:	f040 80a7 	bne.w	800b348 <tcp_input+0x328>
 800b1fa:	8ae1      	ldrh	r1, [r4, #22]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	4299      	cmp	r1, r3
 800b200:	f040 80a2 	bne.w	800b348 <tcp_input+0x328>
        pcb->local_port == tcphdr->dest &&
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b20a:	4299      	cmp	r1, r3
 800b20c:	f040 809c 	bne.w	800b348 <tcp_input+0x328>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b210:	6821      	ldr	r1, [r4, #0]
 800b212:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b216:	4299      	cmp	r1, r3
 800b218:	f040 8096 	bne.w	800b348 <tcp_input+0x328>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b21c:	4294      	cmp	r4, r2
 800b21e:	f040 8458 	bne.w	800bad2 <tcp_input+0xab2>
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <tcp_input+0x2bc>)
 800b224:	f240 120d 	movw	r2, #269	; 0x10d
 800b228:	493f      	ldr	r1, [pc, #252]	; (800b328 <tcp_input+0x308>)
 800b22a:	482e      	ldr	r0, [pc, #184]	; (800b2e4 <tcp_input+0x2c4>)
 800b22c:	f003 fc6a 	bl	800eb04 <iprintf>
      if (prev != NULL) {
 800b230:	f1b9 0f00 	cmp.w	r9, #0
 800b234:	d005      	beq.n	800b242 <tcp_input+0x222>
        prev->next = pcb->next;
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800b23c:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 800b23e:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 800b240:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	429c      	cmp	r4, r3
 800b246:	d106      	bne.n	800b256 <tcp_input+0x236>
 800b248:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <tcp_input+0x2bc>)
 800b24a:	f240 1215 	movw	r2, #277	; 0x115
 800b24e:	4937      	ldr	r1, [pc, #220]	; (800b32c <tcp_input+0x30c>)
 800b250:	4824      	ldr	r0, [pc, #144]	; (800b2e4 <tcp_input+0x2c4>)
 800b252:	f003 fc57 	bl	800eb04 <iprintf>
    inseg.next = NULL;
 800b256:	4b36      	ldr	r3, [pc, #216]	; (800b330 <tcp_input+0x310>)
 800b258:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 800b25a:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 800b25c:	4835      	ldr	r0, [pc, #212]	; (800b334 <tcp_input+0x314>)
    inseg.len = p->tot_len;
 800b25e:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 800b260:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 800b262:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800b344 <tcp_input+0x324>
    inseg.tcphdr = tcphdr;
 800b266:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 800b268:	4933      	ldr	r1, [pc, #204]	; (800b338 <tcp_input+0x318>)
    inseg.next = NULL;
 800b26a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b26c:	600a      	str	r2, [r1, #0]
 800b26e:	4689      	mov	r9, r1
    recv_flags = 0;
 800b270:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 800b274:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 800b276:	9a05      	ldr	r2, [sp, #20]
    inseg.p = p;
 800b278:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 800b27a:	7812      	ldrb	r2, [r2, #0]
 800b27c:	9006      	str	r0, [sp, #24]
 800b27e:	f012 0f08 	tst.w	r2, #8
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	d003      	beq.n	800b28e <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 800b286:	7b6b      	ldrb	r3, [r5, #13]
 800b288:	f043 0301 	orr.w	r3, r3, #1
 800b28c:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800b28e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b290:	4d2a      	ldr	r5, [pc, #168]	; (800b33c <tcp_input+0x31c>)
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 8165 	beq.w	800b562 <tcp_input+0x542>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b298:	4620      	mov	r0, r4
 800b29a:	f7fe fe99 	bl	8009fd0 <tcp_process_refused_data>
 800b29e:	300d      	adds	r0, #13
 800b2a0:	d008      	beq.n	800b2b4 <tcp_input+0x294>
 800b2a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 815c 	beq.w	800b562 <tcp_input+0x542>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <tcp_input+0x2e4>)
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 8157 	beq.w	800b562 <tcp_input+0x542>
        if (pcb->rcv_ann_wnd == 0) {
 800b2b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b2b6:	b913      	cbnz	r3, 800b2be <tcp_input+0x29e>
          tcp_send_empty_ack(pcb);
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 faf1 	bl	800c8a0 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 800b2be:	9b07      	ldr	r3, [sp, #28]
    tcp_input_pcb = NULL;
 800b2c0:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800b2c2:	6858      	ldr	r0, [r3, #4]
    tcp_input_pcb = NULL;
 800b2c4:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 800b2c6:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800b2ca:	b118      	cbz	r0, 800b2d4 <tcp_input+0x2b4>
      pbuf_free(inseg.p);
 800b2cc:	f7fd fd1e 	bl	8008d0c <pbuf_free>
      inseg.p = NULL;
 800b2d0:	9b07      	ldr	r3, [sp, #28]
 800b2d2:	605c      	str	r4, [r3, #4]
}
 800b2d4:	b009      	add	sp, #36	; 0x24
 800b2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2da:	bf00      	nop
 800b2dc:	08011a7f 	.word	0x08011a7f
 800b2e0:	0801188c 	.word	0x0801188c
 800b2e4:	0800fff2 	.word	0x0800fff2
 800b2e8:	20006d78 	.word	0x20006d78
 800b2ec:	20007084 	.word	0x20007084
 800b2f0:	20006d80 	.word	0x20006d80
 800b2f4:	20006d84 	.word	0x20006d84
 800b2f8:	20006d70 	.word	0x20006d70
 800b2fc:	20006d4c 	.word	0x20006d4c
 800b300:	20006d50 	.word	0x20006d50
 800b304:	20006d86 	.word	0x20006d86
 800b308:	2000bedc 	.word	0x2000bedc
 800b30c:	2000beec 	.word	0x2000beec
 800b310:	080118a4 	.word	0x080118a4
 800b314:	080118b4 	.word	0x080118b4
 800b318:	080118c0 	.word	0x080118c0
 800b31c:	080118df 	.word	0x080118df
 800b320:	08011906 	.word	0x08011906
 800b324:	08011930 	.word	0x08011930
 800b328:	08011957 	.word	0x08011957
 800b32c:	08011982 	.word	0x08011982
 800b330:	20006d54 	.word	0x20006d54
 800b334:	20006d64 	.word	0x20006d64
 800b338:	20006d68 	.word	0x20006d68
 800b33c:	2000bef0 	.word	0x2000bef0
 800b340:	20006d7c 	.word	0x20006d7c
 800b344:	20006d6c 	.word	0x20006d6c
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b348:	46a1      	mov	r9, r4
 800b34a:	4614      	mov	r4, r2
 800b34c:	e6e1      	b.n	800b112 <tcp_input+0xf2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b34e:	f899 3014 	ldrb.w	r3, [r9, #20]
 800b352:	2b0a      	cmp	r3, #10
 800b354:	d006      	beq.n	800b364 <tcp_input+0x344>
 800b356:	4623      	mov	r3, r4
 800b358:	f240 121f 	movw	r2, #287	; 0x11f
 800b35c:	49b0      	ldr	r1, [pc, #704]	; (800b620 <tcp_input+0x600>)
 800b35e:	48b1      	ldr	r0, [pc, #708]	; (800b624 <tcp_input+0x604>)
 800b360:	f003 fbd0 	bl	800eb04 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b364:	f899 2008 	ldrb.w	r2, [r9, #8]
 800b368:	b13a      	cbz	r2, 800b37a <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b36a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b36e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b372:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b374:	b2db      	uxtb	r3, r3
 800b376:	429a      	cmp	r2, r3
 800b378:	d14b      	bne.n	800b412 <tcp_input+0x3f2>
      if (pcb->remote_port == tcphdr->src &&
 800b37a:	6833      	ldr	r3, [r6, #0]
 800b37c:	f8b9 2018 	ldrh.w	r2, [r9, #24]
 800b380:	8818      	ldrh	r0, [r3, #0]
 800b382:	4290      	cmp	r0, r2
 800b384:	d145      	bne.n	800b412 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b386:	f8b9 2016 	ldrh.w	r2, [r9, #22]
      if (pcb->remote_port == tcphdr->src &&
 800b38a:	8859      	ldrh	r1, [r3, #2]
 800b38c:	4291      	cmp	r1, r2
 800b38e:	d140      	bne.n	800b412 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b390:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b394:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d13a      	bne.n	800b412 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b39c:	f8d9 2000 	ldr.w	r2, [r9]
 800b3a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d134      	bne.n	800b412 <tcp_input+0x3f2>
  if (flags & TCP_RST) {
 800b3a8:	9b05      	ldr	r3, [sp, #20]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	075e      	lsls	r6, r3, #29
 800b3ae:	f53f aef2 	bmi.w	800b196 <tcp_input+0x176>
  if (flags & TCP_SYN) {
 800b3b2:	079c      	lsls	r4, r3, #30
 800b3b4:	d518      	bpl.n	800b3e8 <tcp_input+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b3b6:	f8db 2000 	ldr.w	r2, [fp]
 800b3ba:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	d418      	bmi.n	800b3f4 <tcp_input+0x3d4>
 800b3c2:	f8b9 4028 	ldrh.w	r4, [r9, #40]	; 0x28
 800b3c6:	1b1b      	subs	r3, r3, r4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dc13      	bgt.n	800b3f4 <tcp_input+0x3d4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3cc:	4b96      	ldr	r3, [pc, #600]	; (800b628 <tcp_input+0x608>)
 800b3ce:	881c      	ldrh	r4, [r3, #0]
 800b3d0:	4b96      	ldr	r3, [pc, #600]	; (800b62c <tcp_input+0x60c>)
 800b3d2:	9002      	str	r0, [sp, #8]
 800b3d4:	4422      	add	r2, r4
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	4648      	mov	r0, r9
 800b3da:	9101      	str	r1, [sp, #4]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e2:	f001 fa19 	bl	800c818 <tcp_rst>
 800b3e6:	e6d6      	b.n	800b196 <tcp_input+0x176>
  } else if (flags & TCP_FIN) {
 800b3e8:	07d9      	lsls	r1, r3, #31
    pcb->tmr = tcp_ticks;
 800b3ea:	bf42      	ittt	mi
 800b3ec:	4b90      	ldrmi	r3, [pc, #576]	; (800b630 <tcp_input+0x610>)
 800b3ee:	681b      	ldrmi	r3, [r3, #0]
 800b3f0:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 800b3f4:	4b8c      	ldr	r3, [pc, #560]	; (800b628 <tcp_input+0x608>)
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f43f aecc 	beq.w	800b196 <tcp_input+0x176>
    tcp_ack_now(pcb);
 800b3fe:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 800b402:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 800b404:	f043 0302 	orr.w	r3, r3, #2
 800b408:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 800b40c:	f001 fa7a 	bl	800c904 <tcp_output>
 800b410:	e6c1      	b.n	800b196 <tcp_input+0x176>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b412:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	d198      	bne.n	800b34e <tcp_input+0x32e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b41c:	4b85      	ldr	r3, [pc, #532]	; (800b634 <tcp_input+0x614>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b41e:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b422:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800b424:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b426:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b42a:	4614      	mov	r4, r2
 800b42c:	b99c      	cbnz	r4, 800b456 <tcp_input+0x436>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b42e:	8988      	ldrh	r0, [r1, #12]
 800b430:	f7f9 fe84 	bl	800513c <lwip_htons>
 800b434:	0743      	lsls	r3, r0, #29
 800b436:	f53f aeae 	bmi.w	800b196 <tcp_input+0x176>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b43a:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b43c:	4a7a      	ldr	r2, [pc, #488]	; (800b628 <tcp_input+0x608>)
 800b43e:	8818      	ldrh	r0, [r3, #0]
 800b440:	8811      	ldrh	r1, [r2, #0]
 800b442:	f8db 2000 	ldr.w	r2, [fp]
 800b446:	9002      	str	r0, [sp, #8]
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	440a      	add	r2, r1
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	4b77      	ldr	r3, [pc, #476]	; (800b62c <tcp_input+0x60c>)
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	3304      	adds	r3, #4
 800b454:	e32e      	b.n	800bab4 <tcp_input+0xa94>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b456:	7a20      	ldrb	r0, [r4, #8]
 800b458:	b128      	cbz	r0, 800b466 <tcp_input+0x446>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b45a:	f89e 3030 	ldrb.w	r3, [lr, #48]	; 0x30
 800b45e:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b460:	b2db      	uxtb	r3, r3
 800b462:	4298      	cmp	r0, r3
 800b464:	d10a      	bne.n	800b47c <tcp_input+0x45c>
      if (lpcb->local_port == tcphdr->dest) {
 800b466:	8ae0      	ldrh	r0, [r4, #22]
 800b468:	884b      	ldrh	r3, [r1, #2]
 800b46a:	4283      	cmp	r3, r0
 800b46c:	d106      	bne.n	800b47c <tcp_input+0x45c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	4563      	cmp	r3, ip
 800b472:	f000 8302 	beq.w	800ba7a <tcp_input+0xa5a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 82ff 	beq.w	800ba7a <tcp_input+0xa5a>
 800b47c:	46a1      	mov	r9, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b47e:	68e4      	ldr	r4, [r4, #12]
 800b480:	e7d4      	b.n	800b42c <tcp_input+0x40c>
  } else if (flags & TCP_SYN) {
 800b482:	0798      	lsls	r0, r3, #30
 800b484:	f57f ae87 	bpl.w	800b196 <tcp_input+0x176>
    npcb = tcp_alloc(pcb->prio);
 800b488:	7d60      	ldrb	r0, [r4, #21]
 800b48a:	f7fe fc0f 	bl	8009cac <tcp_alloc>
    if (npcb == NULL) {
 800b48e:	4682      	mov	sl, r0
 800b490:	b948      	cbnz	r0, 800b4a6 <tcp_input+0x486>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b492:	69a3      	ldr	r3, [r4, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f43f ae7e 	beq.w	800b196 <tcp_input+0x176>
 800b49a:	4601      	mov	r1, r0
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	6920      	ldr	r0, [r4, #16]
 800b4a2:	4798      	blx	r3
 800b4a4:	e677      	b.n	800b196 <tcp_input+0x176>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b4a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800b4aa:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b4ac:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b4ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b4b2:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b4b4:	8ae3      	ldrh	r3, [r4, #22]
 800b4b6:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800b4b8:	7813      	ldrb	r3, [r2, #0]
 800b4ba:	7852      	ldrb	r2, [r2, #1]
 800b4bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4c0:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800b4c6:	f8db 3000 	ldr.w	r3, [fp]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b4ce:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b4d0:	f7fe f988 	bl	80097e4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b4d4:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800b4d8:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b4dc:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800b4de:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 800b4e2:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b4e6:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b4ea:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 800b4ec:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->listener = pcb;
 800b4f0:	f8ca 407c 	str.w	r4, [sl, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800b4f4:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b4f8:	7a63      	ldrb	r3, [r4, #9]
 800b4fa:	f003 030c 	and.w	r3, r3, #12
 800b4fe:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b502:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b504:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 800b508:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	f8c7 a000 	str.w	sl, [r7]
 800b512:	f8ca 300c 	str.w	r3, [sl, #12]
 800b516:	f001 fccb 	bl	800ceb0 <tcp_timer_needed>
 800b51a:	2201      	movs	r2, #1
 800b51c:	4b46      	ldr	r3, [pc, #280]	; (800b638 <tcp_input+0x618>)
    tcp_parseopt(npcb);
 800b51e:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 800b520:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b522:	f7ff f881 	bl	800a628 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b526:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b528:	4620      	mov	r0, r4
 800b52a:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800b52e:	89db      	ldrh	r3, [r3, #14]
 800b530:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b534:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b538:	f7fc f842 	bl	80075c0 <ip4_route>
 800b53c:	4622      	mov	r2, r4
 800b53e:	4601      	mov	r1, r0
 800b540:	4630      	mov	r0, r6
 800b542:	f7fe f969 	bl	8009818 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b546:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b548:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b54c:	4650      	mov	r0, sl
 800b54e:	f000 ffdd 	bl	800c50c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b552:	b120      	cbz	r0, 800b55e <tcp_input+0x53e>
      tcp_abandon(npcb, 0);
 800b554:	4649      	mov	r1, r9
 800b556:	4650      	mov	r0, sl
 800b558:	f7fe fab0 	bl	8009abc <tcp_abandon>
 800b55c:	e61b      	b.n	800b196 <tcp_input+0x176>
    tcp_output(npcb);
 800b55e:	4650      	mov	r0, sl
 800b560:	e754      	b.n	800b40c <tcp_input+0x3ec>
  if (flags & TCP_RST) {
 800b562:	9b05      	ldr	r3, [sp, #20]
    tcp_input_pcb = pcb;
 800b564:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	0759      	lsls	r1, r3, #29
 800b56a:	d533      	bpl.n	800b5d4 <tcp_input+0x5b4>
    if (pcb->state == SYN_SENT) {
 800b56c:	7d21      	ldrb	r1, [r4, #20]
 800b56e:	2902      	cmp	r1, #2
 800b570:	d122      	bne.n	800b5b8 <tcp_input+0x598>
      if (ackno == pcb->snd_nxt) {
 800b572:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b574:	f8da 3000 	ldr.w	r3, [sl]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d109      	bne.n	800b590 <tcp_input+0x570>
      recv_flags |= TF_RESET;
 800b57c:	f898 3000 	ldrb.w	r3, [r8]
 800b580:	f043 0308 	orr.w	r3, r3, #8
 800b584:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b588:	8b63      	ldrh	r3, [r4, #26]
 800b58a:	f023 0301 	bic.w	r3, r3, #1
 800b58e:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800b590:	f898 3000 	ldrb.w	r3, [r8]
 800b594:	0719      	lsls	r1, r3, #28
 800b596:	f140 8206 	bpl.w	800b9a6 <tcp_input+0x986>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b59a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b59e:	b11b      	cbz	r3, 800b5a8 <tcp_input+0x588>
 800b5a0:	f06f 010d 	mvn.w	r1, #13
 800b5a4:	6920      	ldr	r0, [r4, #16]
 800b5a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4824      	ldr	r0, [pc, #144]	; (800b63c <tcp_input+0x61c>)
 800b5ac:	f7fe fa22 	bl	80099f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7fd ffe3 	bl	800957c <tcp_free>
 800b5b6:	e682      	b.n	800b2be <tcp_input+0x29e>
      if (seqno == pcb->rcv_nxt) {
 800b5b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b5ba:	f8db 3000 	ldr.w	r3, [fp]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	f000 827c 	beq.w	800babc <tcp_input+0xa9c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	d4e3      	bmi.n	800b590 <tcp_input+0x570>
 800b5c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dcdf      	bgt.n	800b590 <tcp_input+0x570>
        tcp_ack_now(pcb);
 800b5d0:	8b63      	ldrh	r3, [r4, #26]
 800b5d2:	e007      	b.n	800b5e4 <tcp_input+0x5c4>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b5d4:	f013 0f02 	tst.w	r3, #2
 800b5d8:	8b63      	ldrh	r3, [r4, #26]
 800b5da:	d006      	beq.n	800b5ea <tcp_input+0x5ca>
 800b5dc:	7d22      	ldrb	r2, [r4, #20]
 800b5de:	3a02      	subs	r2, #2
 800b5e0:	2a01      	cmp	r2, #1
 800b5e2:	d902      	bls.n	800b5ea <tcp_input+0x5ca>
        tcp_ack_now(pcb);
 800b5e4:	f043 0302 	orr.w	r3, r3, #2
 800b5e8:	e7d1      	b.n	800b58e <tcp_input+0x56e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b5ea:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 800b5ec:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800b5ee:	bf5e      	ittt	pl
 800b5f0:	4b0f      	ldrpl	r3, [pc, #60]	; (800b630 <tcp_input+0x610>)
 800b5f2:	681b      	ldrpl	r3, [r3, #0]
 800b5f4:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b5fc:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800b600:	f7ff f812 	bl	800a628 <tcp_parseopt>
  switch (pcb->state) {
 800b604:	7d23      	ldrb	r3, [r4, #20]
 800b606:	3b02      	subs	r3, #2
 800b608:	2b07      	cmp	r3, #7
 800b60a:	d8c1      	bhi.n	800b590 <tcp_input+0x570>
 800b60c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b610:	00a90018 	.word	0x00a90018
 800b614:	011d0119 	.word	0x011d0119
 800b618:	01190167 	.word	0x01190167
 800b61c:	01b20180 	.word	0x01b20180
 800b620:	080119ac 	.word	0x080119ac
 800b624:	0800fff2 	.word	0x0800fff2
 800b628:	20006d86 	.word	0x20006d86
 800b62c:	20007094 	.word	0x20007094
 800b630:	2000bee0 	.word	0x2000bee0
 800b634:	2000bee4 	.word	0x2000bee4
 800b638:	2000bed8 	.word	0x2000bed8
 800b63c:	2000bedc 	.word	0x2000bedc
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b640:	9b05      	ldr	r3, [sp, #20]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	f003 0212 	and.w	r2, r3, #18
 800b648:	2a12      	cmp	r2, #18
 800b64a:	d16a      	bne.n	800b722 <tcp_input+0x702>
          && (ackno == pcb->lastack + 1)) {
 800b64c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b64e:	f8da 1000 	ldr.w	r1, [sl]
 800b652:	3201      	adds	r2, #1
 800b654:	428a      	cmp	r2, r1
 800b656:	d164      	bne.n	800b722 <tcp_input+0x702>
        pcb->rcv_nxt = seqno + 1;
 800b658:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 800b65c:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800b65e:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800b660:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b662:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b664:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800b666:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b668:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800b66a:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b66c:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b66e:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800b670:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b674:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800b676:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b678:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7fb ff9f 	bl	80075c0 <ip4_route>
 800b682:	4632      	mov	r2, r6
 800b684:	4601      	mov	r1, r0
 800b686:	4638      	mov	r0, r7
 800b688:	f7fe f8c6 	bl	8009818 <tcp_eff_send_mss_netif>
 800b68c:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b68e:	0042      	lsls	r2, r0, #1
 800b690:	0083      	lsls	r3, r0, #2
 800b692:	f241 101c 	movw	r0, #4380	; 0x111c
 800b696:	4611      	mov	r1, r2
 800b698:	4282      	cmp	r2, r0
 800b69a:	bf38      	it	cc
 800b69c:	4601      	movcc	r1, r0
 800b69e:	428b      	cmp	r3, r1
 800b6a0:	d233      	bcs.n	800b70a <tcp_input+0x6ea>
 800b6a2:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b6a4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b6a8:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b6ac:	b933      	cbnz	r3, 800b6bc <tcp_input+0x69c>
 800b6ae:	4ba8      	ldr	r3, [pc, #672]	; (800b950 <tcp_input+0x930>)
 800b6b0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b6b4:	49a7      	ldr	r1, [pc, #668]	; (800b954 <tcp_input+0x934>)
 800b6b6:	48a8      	ldr	r0, [pc, #672]	; (800b958 <tcp_input+0x938>)
 800b6b8:	f003 fa24 	bl	800eb04 <iprintf>
        --pcb->snd_queuelen;
 800b6bc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b6c0:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800b6c8:	bb1e      	cbnz	r6, 800b712 <tcp_input+0x6f2>
          rseg = pcb->unsent;
 800b6ca:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b6cc:	b936      	cbnz	r6, 800b6dc <tcp_input+0x6bc>
 800b6ce:	4ba0      	ldr	r3, [pc, #640]	; (800b950 <tcp_input+0x930>)
 800b6d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b6d4:	49a1      	ldr	r1, [pc, #644]	; (800b95c <tcp_input+0x93c>)
 800b6d6:	48a0      	ldr	r0, [pc, #640]	; (800b958 <tcp_input+0x938>)
 800b6d8:	f003 fa14 	bl	800eb04 <iprintf>
          pcb->unsent = rseg->next;
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7fd ffd5 	bl	8009690 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b6e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6e8:	b9b3      	cbnz	r3, 800b718 <tcp_input+0x6f8>
          pcb->rtime = -1;
 800b6ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6ee:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b6f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f43f af6b 	beq.w	800b5d0 <tcp_input+0x5b0>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	6920      	ldr	r0, [r4, #16]
 800b700:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b702:	300d      	adds	r0, #13
 800b704:	f47f af64 	bne.w	800b5d0 <tcp_input+0x5b0>
 800b708:	e5d9      	b.n	800b2be <tcp_input+0x29e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b70a:	4282      	cmp	r2, r0
 800b70c:	bf88      	it	hi
 800b70e:	b290      	uxthhi	r0, r2
 800b710:	e7c8      	b.n	800b6a4 <tcp_input+0x684>
          pcb->unacked = rseg->next;
 800b712:	6833      	ldr	r3, [r6, #0]
 800b714:	6723      	str	r3, [r4, #112]	; 0x70
 800b716:	e7e3      	b.n	800b6e0 <tcp_input+0x6c0>
          pcb->rtime = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b71c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b720:	e7e6      	b.n	800b6f0 <tcp_input+0x6d0>
      else if (flags & TCP_ACK) {
 800b722:	06db      	lsls	r3, r3, #27
 800b724:	f57f af34 	bpl.w	800b590 <tcp_input+0x570>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b728:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b72a:	4a8d      	ldr	r2, [pc, #564]	; (800b960 <tcp_input+0x940>)
 800b72c:	8818      	ldrh	r0, [r3, #0]
 800b72e:	8811      	ldrh	r1, [r2, #0]
 800b730:	f8db 2000 	ldr.w	r2, [fp]
 800b734:	9002      	str	r0, [sp, #8]
 800b736:	4620      	mov	r0, r4
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	440a      	add	r2, r1
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	4b89      	ldr	r3, [pc, #548]	; (800b964 <tcp_input+0x944>)
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	3304      	adds	r3, #4
 800b744:	f8da 1000 	ldr.w	r1, [sl]
 800b748:	f001 f866 	bl	800c818 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b74c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b750:	2b05      	cmp	r3, #5
 800b752:	f63f af1d 	bhi.w	800b590 <tcp_input+0x570>
          pcb->rtime = 0;
 800b756:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800b758:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800b75a:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b75c:	f001 fa98 	bl	800cc90 <tcp_rexmit_rto>
 800b760:	e716      	b.n	800b590 <tcp_input+0x570>
      if (flags & TCP_ACK) {
 800b762:	9b05      	ldr	r3, [sp, #20]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	06df      	lsls	r7, r3, #27
 800b768:	d55d      	bpl.n	800b826 <tcp_input+0x806>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b76a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b76c:	f8da 1000 	ldr.w	r1, [sl]
 800b770:	43db      	mvns	r3, r3
 800b772:	42cb      	cmn	r3, r1
 800b774:	d446      	bmi.n	800b804 <tcp_input+0x7e4>
 800b776:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b778:	1acb      	subs	r3, r1, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	dc42      	bgt.n	800b804 <tcp_input+0x7e4>
          pcb->state = ESTABLISHED;
 800b77e:	2304      	movs	r3, #4
 800b780:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800b782:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b784:	b19b      	cbz	r3, 800b7ae <tcp_input+0x78e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	b933      	cbnz	r3, 800b798 <tcp_input+0x778>
 800b78a:	4b71      	ldr	r3, [pc, #452]	; (800b950 <tcp_input+0x930>)
 800b78c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b790:	4975      	ldr	r1, [pc, #468]	; (800b968 <tcp_input+0x948>)
 800b792:	4871      	ldr	r0, [pc, #452]	; (800b958 <tcp_input+0x938>)
 800b794:	f003 f9b6 	bl	800eb04 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b798:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	b13b      	cbz	r3, 800b7ae <tcp_input+0x78e>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	6920      	ldr	r0, [r4, #16]
 800b7a4:	4798      	blx	r3
          if (err != ERR_OK) {
 800b7a6:	b130      	cbz	r0, 800b7b6 <tcp_input+0x796>
            if (err != ERR_ABRT) {
 800b7a8:	300d      	adds	r0, #13
 800b7aa:	f43f ad88 	beq.w	800b2be <tcp_input+0x29e>
              tcp_abort(pcb);
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7fe fa06 	bl	8009bc0 <tcp_abort>
 800b7b4:	e583      	b.n	800b2be <tcp_input+0x29e>
          tcp_receive(pcb);
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff f804 	bl	800a7c4 <tcp_receive>
          if (recv_acked != 0) {
 800b7bc:	9b06      	ldr	r3, [sp, #24]
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	b113      	cbz	r3, 800b7c8 <tcp_input+0x7a8>
            recv_acked--;
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	9a06      	ldr	r2, [sp, #24]
 800b7c6:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b7ca:	0059      	lsls	r1, r3, #1
 800b7cc:	009a      	lsls	r2, r3, #2
 800b7ce:	f241 131c 	movw	r3, #4380	; 0x111c
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	bf38      	it	cc
 800b7d8:	4618      	movcc	r0, r3
 800b7da:	4282      	cmp	r2, r0
 800b7dc:	d20e      	bcs.n	800b7fc <tcp_input+0x7dc>
 800b7de:	b293      	uxth	r3, r2
 800b7e0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b7e4:	f898 3000 	ldrb.w	r3, [r8]
 800b7e8:	0699      	lsls	r1, r3, #26
 800b7ea:	f57f aed1 	bpl.w	800b590 <tcp_input+0x570>
        tcp_ack_now(pcb);
 800b7ee:	8b63      	ldrh	r3, [r4, #26]
 800b7f0:	f043 0302 	orr.w	r3, r3, #2
 800b7f4:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800b7f6:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 800b7f8:	7523      	strb	r3, [r4, #20]
 800b7fa:	e6c9      	b.n	800b590 <tcp_input+0x570>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	bf88      	it	hi
 800b800:	b28b      	uxthhi	r3, r1
 800b802:	e7ed      	b.n	800b7e0 <tcp_input+0x7c0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b804:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b806:	4a56      	ldr	r2, [pc, #344]	; (800b960 <tcp_input+0x940>)
 800b808:	881e      	ldrh	r6, [r3, #0]
 800b80a:	8810      	ldrh	r0, [r2, #0]
 800b80c:	f8db 2000 	ldr.w	r2, [fp]
 800b810:	9602      	str	r6, [sp, #8]
 800b812:	885b      	ldrh	r3, [r3, #2]
 800b814:	4402      	add	r2, r0
 800b816:	4620      	mov	r0, r4
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	4b52      	ldr	r3, [pc, #328]	; (800b964 <tcp_input+0x944>)
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	3304      	adds	r3, #4
 800b820:	f000 fffa 	bl	800c818 <tcp_rst>
 800b824:	e6b4      	b.n	800b590 <tcp_input+0x570>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b826:	0798      	lsls	r0, r3, #30
 800b828:	f57f aeb2 	bpl.w	800b590 <tcp_input+0x570>
 800b82c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82e:	f8db 2000 	ldr.w	r2, [fp]
 800b832:	3b01      	subs	r3, #1
 800b834:	4293      	cmp	r3, r2
 800b836:	f47f aeab 	bne.w	800b590 <tcp_input+0x570>
        tcp_rexmit(pcb);
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 ff74 	bl	800c728 <tcp_rexmit>
 800b840:	e6a6      	b.n	800b590 <tcp_input+0x570>
      tcp_receive(pcb);
 800b842:	4620      	mov	r0, r4
 800b844:	f7fe ffbe 	bl	800a7c4 <tcp_receive>
 800b848:	e7cc      	b.n	800b7e4 <tcp_input+0x7c4>
      tcp_receive(pcb);
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7fe ffba 	bl	800a7c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b850:	f898 3000 	ldrb.w	r3, [r8]
 800b854:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b858:	9b05      	ldr	r3, [sp, #20]
 800b85a:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800b85c:	d030      	beq.n	800b8c0 <tcp_input+0x8a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b85e:	f013 0f10 	tst.w	r3, #16
 800b862:	8b63      	ldrh	r3, [r4, #26]
 800b864:	d027      	beq.n	800b8b6 <tcp_input+0x896>
 800b866:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b868:	f8da 2000 	ldr.w	r2, [sl]
 800b86c:	4291      	cmp	r1, r2
 800b86e:	d122      	bne.n	800b8b6 <tcp_input+0x896>
 800b870:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b872:	bb02      	cbnz	r2, 800b8b6 <tcp_input+0x896>
          tcp_ack_now(pcb);
 800b874:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800b878:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800b87a:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b87c:	f7fe f888 	bl	8009990 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	429c      	cmp	r4, r3
 800b884:	d109      	bne.n	800b89a <tcp_input+0x87a>
        TCP_RMV_ACTIVE(pcb);
 800b886:	68e3      	ldr	r3, [r4, #12]
 800b888:	603b      	str	r3, [r7, #0]
 800b88a:	e008      	b.n	800b89e <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	4294      	cmp	r4, r2
 800b890:	d102      	bne.n	800b898 <tcp_input+0x878>
        TCP_RMV_ACTIVE(pcb);
 800b892:	68e2      	ldr	r2, [r4, #12]
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e002      	b.n	800b89e <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 800b898:	4613      	mov	r3, r2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f6      	bne.n	800b88c <tcp_input+0x86c>
        TCP_RMV_ACTIVE(pcb);
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4b32      	ldr	r3, [pc, #200]	; (800b96c <tcp_input+0x94c>)
 800b8a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8a4:	230a      	movs	r3, #10
 800b8a6:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8a8:	4b31      	ldr	r3, [pc, #196]	; (800b970 <tcp_input+0x950>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	601c      	str	r4, [r3, #0]
 800b8ae:	60e2      	str	r2, [r4, #12]
 800b8b0:	f001 fafe 	bl	800ceb0 <tcp_timer_needed>
 800b8b4:	e66c      	b.n	800b590 <tcp_input+0x570>
          tcp_ack_now(pcb);
 800b8b6:	f043 0302 	orr.w	r3, r3, #2
 800b8ba:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b8bc:	2308      	movs	r3, #8
 800b8be:	e79b      	b.n	800b7f8 <tcp_input+0x7d8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b8c0:	06da      	lsls	r2, r3, #27
 800b8c2:	f57f ae65 	bpl.w	800b590 <tcp_input+0x570>
 800b8c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b8c8:	f8da 3000 	ldr.w	r3, [sl]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	f47f ae5f 	bne.w	800b590 <tcp_input+0x570>
 800b8d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f47f ae5b 	bne.w	800b590 <tcp_input+0x570>
        pcb->state = FIN_WAIT_2;
 800b8da:	2306      	movs	r3, #6
 800b8dc:	e78c      	b.n	800b7f8 <tcp_input+0x7d8>
      tcp_receive(pcb);
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7fe ff70 	bl	800a7c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b8e4:	f898 3000 	ldrb.w	r3, [r8]
 800b8e8:	069b      	lsls	r3, r3, #26
 800b8ea:	f57f ae51 	bpl.w	800b590 <tcp_input+0x570>
        tcp_ack_now(pcb);
 800b8ee:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b8f0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b8f2:	f043 0302 	orr.w	r3, r3, #2
 800b8f6:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b8f8:	f7fe f84a 	bl	8009990 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	429c      	cmp	r4, r3
 800b900:	d0c1      	beq.n	800b886 <tcp_input+0x866>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0cb      	beq.n	800b89e <tcp_input+0x87e>
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	4294      	cmp	r4, r2
 800b90a:	d0c2      	beq.n	800b892 <tcp_input+0x872>
 800b90c:	4613      	mov	r3, r2
 800b90e:	e7f8      	b.n	800b902 <tcp_input+0x8e2>
      tcp_receive(pcb);
 800b910:	4620      	mov	r0, r4
 800b912:	f7fe ff57 	bl	800a7c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b916:	9b05      	ldr	r3, [sp, #20]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	06de      	lsls	r6, r3, #27
 800b91c:	f57f ae38 	bpl.w	800b590 <tcp_input+0x570>
 800b920:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b922:	f8da 3000 	ldr.w	r3, [sl]
 800b926:	429a      	cmp	r2, r3
 800b928:	f47f ae32 	bne.w	800b590 <tcp_input+0x570>
 800b92c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f47f ae2e 	bne.w	800b590 <tcp_input+0x570>
        tcp_pcb_purge(pcb);
 800b934:	4620      	mov	r0, r4
 800b936:	f7fe f82b 	bl	8009990 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	429c      	cmp	r4, r3
 800b93e:	d0a2      	beq.n	800b886 <tcp_input+0x866>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0ac      	beq.n	800b89e <tcp_input+0x87e>
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	4294      	cmp	r4, r2
 800b948:	d0a3      	beq.n	800b892 <tcp_input+0x872>
 800b94a:	4613      	mov	r3, r2
 800b94c:	e7f8      	b.n	800b940 <tcp_input+0x920>
 800b94e:	bf00      	nop
 800b950:	08011a7f 	.word	0x08011a7f
 800b954:	080119f9 	.word	0x080119f9
 800b958:	0800fff2 	.word	0x0800fff2
 800b95c:	08011a0f 	.word	0x08011a0f
 800b960:	20006d86 	.word	0x20006d86
 800b964:	20007094 	.word	0x20007094
 800b968:	08011a22 	.word	0x08011a22
 800b96c:	2000bed8 	.word	0x2000bed8
 800b970:	2000beec 	.word	0x2000beec
      tcp_receive(pcb);
 800b974:	4620      	mov	r0, r4
 800b976:	f7fe ff25 	bl	800a7c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b97a:	9b05      	ldr	r3, [sp, #20]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	06d8      	lsls	r0, r3, #27
 800b980:	f57f ae06 	bpl.w	800b590 <tcp_input+0x570>
 800b984:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b986:	f8da 3000 	ldr.w	r3, [sl]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	f47f ae00 	bne.w	800b590 <tcp_input+0x570>
 800b990:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b992:	2b00      	cmp	r3, #0
 800b994:	f47f adfc 	bne.w	800b590 <tcp_input+0x570>
        recv_flags |= TF_CLOSED;
 800b998:	f898 3000 	ldrb.w	r3, [r8]
 800b99c:	f043 0310 	orr.w	r3, r3, #16
 800b9a0:	f888 3000 	strb.w	r3, [r8]
 800b9a4:	e5f4      	b.n	800b590 <tcp_input+0x570>
        if (recv_acked > 0) {
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	881a      	ldrh	r2, [r3, #0]
 800b9aa:	b12a      	cbz	r2, 800b9b8 <tcp_input+0x998>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b9ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b9b0:	b9eb      	cbnz	r3, 800b9ee <tcp_input+0x9ce>
          recv_acked = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7fe fe7d 	bl	800a6b8 <tcp_input_delayed_close>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f47f ac7d 	bne.w	800b2be <tcp_input+0x29e>
        if (recv_data != NULL) {
 800b9c4:	f8d9 3000 	ldr.w	r3, [r9]
 800b9c8:	b33b      	cbz	r3, 800ba1a <tcp_input+0x9fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b9ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b9cc:	b133      	cbz	r3, 800b9dc <tcp_input+0x9bc>
 800b9ce:	4b44      	ldr	r3, [pc, #272]	; (800bae0 <tcp_input+0xac0>)
 800b9d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b9d4:	4943      	ldr	r1, [pc, #268]	; (800bae4 <tcp_input+0xac4>)
 800b9d6:	4844      	ldr	r0, [pc, #272]	; (800bae8 <tcp_input+0xac8>)
 800b9d8:	f003 f894 	bl	800eb04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b9dc:	8b63      	ldrh	r3, [r4, #26]
 800b9de:	f013 0310 	ands.w	r3, r3, #16
 800b9e2:	d00a      	beq.n	800b9fa <tcp_input+0x9da>
            pbuf_free(recv_data);
 800b9e4:	f8d9 0000 	ldr.w	r0, [r9]
 800b9e8:	f7fd f990 	bl	8008d0c <pbuf_free>
 800b9ec:	e6df      	b.n	800b7ae <tcp_input+0x78e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	6920      	ldr	r0, [r4, #16]
 800b9f2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b9f4:	300d      	adds	r0, #13
 800b9f6:	d1dc      	bne.n	800b9b2 <tcp_input+0x992>
 800b9f8:	e461      	b.n	800b2be <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b9fa:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800b9fe:	b316      	cbz	r6, 800ba46 <tcp_input+0xa26>
 800ba00:	f8d9 2000 	ldr.w	r2, [r9]
 800ba04:	4621      	mov	r1, r4
 800ba06:	6920      	ldr	r0, [r4, #16]
 800ba08:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800ba0a:	f110 0f0d 	cmn.w	r0, #13
 800ba0e:	f43f ac56 	beq.w	800b2be <tcp_input+0x29e>
          if (err != ERR_OK) {
 800ba12:	b110      	cbz	r0, 800ba1a <tcp_input+0x9fa>
            pcb->refused_data = recv_data;
 800ba14:	f8d9 3000 	ldr.w	r3, [r9]
 800ba18:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800ba1a:	f898 3000 	ldrb.w	r3, [r8]
 800ba1e:	069a      	lsls	r2, r3, #26
 800ba20:	d505      	bpl.n	800ba2e <tcp_input+0xa0e>
          if (pcb->refused_data != NULL) {
 800ba22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ba24:	b1bb      	cbz	r3, 800ba56 <tcp_input+0xa36>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ba26:	7b5a      	ldrb	r2, [r3, #13]
 800ba28:	f042 0220 	orr.w	r2, r2, #32
 800ba2c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ba2e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800ba30:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800ba32:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ba34:	f7fe fe40 	bl	800a6b8 <tcp_input_delayed_close>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f47f ac40 	bne.w	800b2be <tcp_input+0x29e>
        tcp_output(pcb);
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 ff60 	bl	800c904 <tcp_output>
 800ba44:	e43b      	b.n	800b2be <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ba46:	4633      	mov	r3, r6
 800ba48:	f8d9 2000 	ldr.w	r2, [r9]
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7fe fa9a 	bl	8009f88 <tcp_recv_null>
 800ba54:	e7d9      	b.n	800ba0a <tcp_input+0x9ea>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ba58:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba5c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800ba60:	bf1c      	itt	ne
 800ba62:	3301      	addne	r3, #1
 800ba64:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	d0e1      	beq.n	800ba2e <tcp_input+0xa0e>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	6920      	ldr	r0, [r4, #16]
 800ba70:	461a      	mov	r2, r3
 800ba72:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800ba74:	300d      	adds	r0, #13
 800ba76:	d1da      	bne.n	800ba2e <tcp_input+0xa0e>
 800ba78:	e421      	b.n	800b2be <tcp_input+0x29e>
      if (prev != NULL) {
 800ba7a:	f1b9 0f00 	cmp.w	r9, #0
 800ba7e:	d005      	beq.n	800ba8c <tcp_input+0xa6c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ba80:	68e3      	ldr	r3, [r4, #12]
 800ba82:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ba86:	4b19      	ldr	r3, [pc, #100]	; (800baec <tcp_input+0xacc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ba88:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ba8a:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800ba8c:	9b05      	ldr	r3, [sp, #20]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	075a      	lsls	r2, r3, #29
 800ba92:	f53f ab80 	bmi.w	800b196 <tcp_input+0x176>
  if (flags & TCP_ACK) {
 800ba96:	f013 0910 	ands.w	r9, r3, #16
 800ba9a:	f43f acf2 	beq.w	800b482 <tcp_input+0x462>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba9e:	4b14      	ldr	r3, [pc, #80]	; (800baf0 <tcp_input+0xad0>)
 800baa0:	f8db 2000 	ldr.w	r2, [fp]
 800baa4:	881e      	ldrh	r6, [r3, #0]
 800baa6:	880b      	ldrh	r3, [r1, #0]
 800baa8:	4432      	add	r2, r6
 800baaa:	9001      	str	r0, [sp, #4]
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <tcp_input+0xad4>)
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	3304      	adds	r3, #4
 800bab4:	f8da 1000 	ldr.w	r1, [sl]
 800bab8:	4620      	mov	r0, r4
 800baba:	e492      	b.n	800b3e2 <tcp_input+0x3c2>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800babc:	2900      	cmp	r1, #0
 800babe:	f47f ad5d 	bne.w	800b57c <tcp_input+0x55c>
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <tcp_input+0xac0>)
 800bac4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bac8:	490b      	ldr	r1, [pc, #44]	; (800baf8 <tcp_input+0xad8>)
 800baca:	4807      	ldr	r0, [pc, #28]	; (800bae8 <tcp_input+0xac8>)
 800bacc:	f003 f81a 	bl	800eb04 <iprintf>
 800bad0:	e554      	b.n	800b57c <tcp_input+0x55c>
      if (prev != NULL) {
 800bad2:	f1b9 0f00 	cmp.w	r9, #0
 800bad6:	f47f abae 	bne.w	800b236 <tcp_input+0x216>
 800bada:	f7ff bbbc 	b.w	800b256 <tcp_input+0x236>
 800bade:	bf00      	nop
 800bae0:	08011a7f 	.word	0x08011a7f
 800bae4:	08011a40 	.word	0x08011a40
 800bae8:	0800fff2 	.word	0x0800fff2
 800baec:	2000bee4 	.word	0x2000bee4
 800baf0:	20006d86 	.word	0x20006d86
 800baf4:	20007094 	.word	0x20007094
 800baf8:	080119d9 	.word	0x080119d9

0800bafc <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800bafc:	4a02      	ldr	r2, [pc, #8]	; (800bb08 <tcp_trigger_input_pcb_close+0xc>)
 800bafe:	7813      	ldrb	r3, [r2, #0]
 800bb00:	f043 0310 	orr.w	r3, r3, #16
 800bb04:	7013      	strb	r3, [r2, #0]
 800bb06:	4770      	bx	lr
 800bb08:	20006d6c 	.word	0x20006d6c

0800bb0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bb0c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bb0e:	4604      	mov	r4, r0
 800bb10:	b930      	cbnz	r0, 800bb20 <tcp_output_segment_busy+0x14>
 800bb12:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <tcp_output_segment_busy+0x24>)
 800bb14:	f240 529a 	movw	r2, #1434	; 0x59a
 800bb18:	4906      	ldr	r1, [pc, #24]	; (800bb34 <tcp_output_segment_busy+0x28>)
 800bb1a:	4807      	ldr	r0, [pc, #28]	; (800bb38 <tcp_output_segment_busy+0x2c>)
 800bb1c:	f002 fff2 	bl	800eb04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bb20:	6863      	ldr	r3, [r4, #4]
 800bb22:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800bb24:	f110 30ff 	adds.w	r0, r0, #4294967295
 800bb28:	bf18      	it	ne
 800bb2a:	2001      	movne	r0, #1
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop
 800bb30:	08011e99 	.word	0x08011e99
 800bb34:	08011ecc 	.word	0x08011ecc
 800bb38:	0800fff2 	.word	0x0800fff2

0800bb3c <tcp_pbuf_prealloc>:
{
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	9d08      	ldr	r5, [sp, #32]
 800bb42:	4607      	mov	r7, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	4690      	mov	r8, r2
 800bb48:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bb4c:	461e      	mov	r6, r3
 800bb4e:	b92b      	cbnz	r3, 800bb5c <tcp_pbuf_prealloc+0x20>
 800bb50:	4b1f      	ldr	r3, [pc, #124]	; (800bbd0 <tcp_pbuf_prealloc+0x94>)
 800bb52:	22e8      	movs	r2, #232	; 0xe8
 800bb54:	491f      	ldr	r1, [pc, #124]	; (800bbd4 <tcp_pbuf_prealloc+0x98>)
 800bb56:	4820      	ldr	r0, [pc, #128]	; (800bbd8 <tcp_pbuf_prealloc+0x9c>)
 800bb58:	f002 ffd4 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bb5c:	b92d      	cbnz	r5, 800bb6a <tcp_pbuf_prealloc+0x2e>
 800bb5e:	4b1c      	ldr	r3, [pc, #112]	; (800bbd0 <tcp_pbuf_prealloc+0x94>)
 800bb60:	22e9      	movs	r2, #233	; 0xe9
 800bb62:	491e      	ldr	r1, [pc, #120]	; (800bbdc <tcp_pbuf_prealloc+0xa0>)
 800bb64:	481c      	ldr	r0, [pc, #112]	; (800bbd8 <tcp_pbuf_prealloc+0x9c>)
 800bb66:	f002 ffcd 	bl	800eb04 <iprintf>
  if (length < max_length) {
 800bb6a:	4544      	cmp	r4, r8
 800bb6c:	d22d      	bcs.n	800bbca <tcp_pbuf_prealloc+0x8e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bb6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bb72:	079a      	lsls	r2, r3, #30
 800bb74:	d409      	bmi.n	800bb8a <tcp_pbuf_prealloc+0x4e>
 800bb76:	8b6b      	ldrh	r3, [r5, #26]
 800bb78:	065b      	lsls	r3, r3, #25
 800bb7a:	d426      	bmi.n	800bbca <tcp_pbuf_prealloc+0x8e>
        (!(pcb->flags & TF_NODELAY) &&
 800bb7c:	f1b9 0f00 	cmp.w	r9, #0
 800bb80:	d003      	beq.n	800bb8a <tcp_pbuf_prealloc+0x4e>
         (!first_seg ||
 800bb82:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bb84:	b90b      	cbnz	r3, 800bb8a <tcp_pbuf_prealloc+0x4e>
          pcb->unsent != NULL ||
 800bb86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb88:	b1fb      	cbz	r3, 800bbca <tcp_pbuf_prealloc+0x8e>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bb8a:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800bb8e:	f021 0103 	bic.w	r1, r1, #3
 800bb92:	4541      	cmp	r1, r8
 800bb94:	bf28      	it	cs
 800bb96:	4641      	movcs	r1, r8
 800bb98:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bb9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb9e:	4638      	mov	r0, r7
 800bba0:	f7fd f91c 	bl	8008ddc <pbuf_alloc>
  if (p == NULL) {
 800bba4:	4605      	mov	r5, r0
 800bba6:	b168      	cbz	r0, 800bbc4 <tcp_pbuf_prealloc+0x88>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bba8:	6803      	ldr	r3, [r0, #0]
 800bbaa:	b133      	cbz	r3, 800bbba <tcp_pbuf_prealloc+0x7e>
 800bbac:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <tcp_pbuf_prealloc+0x94>)
 800bbae:	f240 120b 	movw	r2, #267	; 0x10b
 800bbb2:	490b      	ldr	r1, [pc, #44]	; (800bbe0 <tcp_pbuf_prealloc+0xa4>)
 800bbb4:	4808      	ldr	r0, [pc, #32]	; (800bbd8 <tcp_pbuf_prealloc+0x9c>)
 800bbb6:	f002 ffa5 	bl	800eb04 <iprintf>
  *oversize = p->len - length;
 800bbba:	896b      	ldrh	r3, [r5, #10]
 800bbbc:	1b1b      	subs	r3, r3, r4
 800bbbe:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800bbc0:	812c      	strh	r4, [r5, #8]
 800bbc2:	816c      	strh	r4, [r5, #10]
}
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbca:	4621      	mov	r1, r4
 800bbcc:	e7e5      	b.n	800bb9a <tcp_pbuf_prealloc+0x5e>
 800bbce:	bf00      	nop
 800bbd0:	08011e99 	.word	0x08011e99
 800bbd4:	08011ef1 	.word	0x08011ef1
 800bbd8:	0800fff2 	.word	0x0800fff2
 800bbdc:	08011f15 	.word	0x08011f15
 800bbe0:	08011f34 	.word	0x08011f34

0800bbe4 <tcp_create_segment>:
{
 800bbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	460e      	mov	r6, r1
 800bbea:	4617      	mov	r7, r2
 800bbec:	4699      	mov	r9, r3
 800bbee:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bbf2:	4680      	mov	r8, r0
 800bbf4:	b928      	cbnz	r0, 800bc02 <tcp_create_segment+0x1e>
 800bbf6:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <tcp_create_segment+0xe0>)
 800bbf8:	22a3      	movs	r2, #163	; 0xa3
 800bbfa:	4933      	ldr	r1, [pc, #204]	; (800bcc8 <tcp_create_segment+0xe4>)
 800bbfc:	4833      	ldr	r0, [pc, #204]	; (800bccc <tcp_create_segment+0xe8>)
 800bbfe:	f002 ff81 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bc02:	b92e      	cbnz	r6, 800bc10 <tcp_create_segment+0x2c>
 800bc04:	4b2f      	ldr	r3, [pc, #188]	; (800bcc4 <tcp_create_segment+0xe0>)
 800bc06:	22a4      	movs	r2, #164	; 0xa4
 800bc08:	4931      	ldr	r1, [pc, #196]	; (800bcd0 <tcp_create_segment+0xec>)
 800bc0a:	4830      	ldr	r0, [pc, #192]	; (800bccc <tcp_create_segment+0xe8>)
 800bc0c:	f002 ff7a 	bl	800eb04 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc10:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc14:	f04f 0003 	mov.w	r0, #3
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc18:	bf14      	ite	ne
 800bc1a:	2504      	movne	r5, #4
 800bc1c:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc1e:	f7fc fe03 	bl	8008828 <memp_malloc>
 800bc22:	4604      	mov	r4, r0
 800bc24:	b928      	cbnz	r0, 800bc32 <tcp_create_segment+0x4e>
    pbuf_free(p);
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7fd f870 	bl	8008d0c <pbuf_free>
}
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800bc32:	2300      	movs	r3, #0
  seg->flags = optflags;
 800bc34:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bc38:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800bc3c:	e880 0048 	stmia.w	r0, {r3, r6}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bc40:	8933      	ldrh	r3, [r6, #8]
 800bc42:	4553      	cmp	r3, sl
 800bc44:	d205      	bcs.n	800bc52 <tcp_create_segment+0x6e>
 800bc46:	4b1f      	ldr	r3, [pc, #124]	; (800bcc4 <tcp_create_segment+0xe0>)
 800bc48:	22b0      	movs	r2, #176	; 0xb0
 800bc4a:	4922      	ldr	r1, [pc, #136]	; (800bcd4 <tcp_create_segment+0xf0>)
 800bc4c:	481f      	ldr	r0, [pc, #124]	; (800bccc <tcp_create_segment+0xe8>)
 800bc4e:	f002 ff59 	bl	800eb04 <iprintf>
  seg->len = p->tot_len - optlen;
 800bc52:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bc54:	4630      	mov	r0, r6
 800bc56:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800bc58:	eba3 030a 	sub.w	r3, r3, sl
 800bc5c:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bc5e:	f7fd f81e 	bl	8008c9e <pbuf_add_header>
 800bc62:	4606      	mov	r6, r0
 800bc64:	b120      	cbz	r0, 800bc70 <tcp_create_segment+0x8c>
    tcp_seg_free(seg);
 800bc66:	4620      	mov	r0, r4
    return NULL;
 800bc68:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800bc6a:	f7fd fd11 	bl	8009690 <tcp_seg_free>
    return NULL;
 800bc6e:	e7dd      	b.n	800bc2c <tcp_create_segment+0x48>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc70:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bc72:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc74:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc78:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bc7c:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc7e:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bc82:	ea47 3505 	orr.w	r5, r7, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc86:	f7f9 fa59 	bl	800513c <lwip_htons>
 800bc8a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bc8e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800bc92:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800bc96:	f7f9 fa51 	bl	800513c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bc9a:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bc9e:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bca2:	4648      	mov	r0, r9
 800bca4:	f7f9 fa4d 	bl	8005142 <lwip_htonl>
 800bca8:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bcac:	b2a8      	uxth	r0, r5
 800bcae:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800bcb2:	f7f9 fa43 	bl	800513c <lwip_htons>
  seg->tcphdr->urgp = 0;
 800bcb6:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bcb8:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800bcbc:	749e      	strb	r6, [r3, #18]
 800bcbe:	74de      	strb	r6, [r3, #19]
  return seg;
 800bcc0:	e7b4      	b.n	800bc2c <tcp_create_segment+0x48>
 800bcc2:	bf00      	nop
 800bcc4:	08011e99 	.word	0x08011e99
 800bcc8:	08011c07 	.word	0x08011c07
 800bccc:	0800fff2 	.word	0x0800fff2
 800bcd0:	08011c27 	.word	0x08011c27
 800bcd4:	08011c48 	.word	0x08011c48

0800bcd8 <tcp_output_alloc_header_common.constprop.3>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bcd8:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bcde:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bce0:	4606      	mov	r6, r0
 800bce2:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bce4:	2022      	movs	r0, #34	; 0x22
 800bce6:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bcea:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bcec:	f7fd f876 	bl	8008ddc <pbuf_alloc>
  if (p != NULL) {
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	b348      	cbz	r0, 800bd48 <tcp_output_alloc_header_common.constprop.3+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bcf4:	8943      	ldrh	r3, [r0, #10]
 800bcf6:	2b13      	cmp	r3, #19
 800bcf8:	dc06      	bgt.n	800bd08 <tcp_output_alloc_header_common.constprop.3+0x30>
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <tcp_output_alloc_header_common.constprop.3+0x78>)
 800bcfc:	f240 7224 	movw	r2, #1828	; 0x724
 800bd00:	4914      	ldr	r1, [pc, #80]	; (800bd54 <tcp_output_alloc_header_common.constprop.3+0x7c>)
 800bd02:	4815      	ldr	r0, [pc, #84]	; (800bd58 <tcp_output_alloc_header_common.constprop.3+0x80>)
 800bd04:	f002 fefe 	bl	800eb04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bd08:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	f7f9 fa16 	bl	800513c <lwip_htons>
 800bd10:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bd12:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bd16:	f7f9 fa11 	bl	800513c <lwip_htons>
    tcphdr->seqno = seqno_be;
 800bd1a:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800bd1c:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f7f9 fa0f 	bl	8005142 <lwip_htonl>
 800bd24:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bd26:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800bd2a:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800bd2e:	f7f9 fa05 	bl	800513c <lwip_htons>
 800bd32:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bd34:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800bd38:	f7f9 fa00 	bl	800513c <lwip_htons>
    tcphdr->chksum = 0;
 800bd3c:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800bd3e:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800bd40:	7423      	strb	r3, [r4, #16]
 800bd42:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800bd44:	74a3      	strb	r3, [r4, #18]
 800bd46:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800bd48:	4628      	mov	r0, r5
 800bd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4e:	bf00      	nop
 800bd50:	08011e99 	.word	0x08011e99
 800bd54:	08011e1c 	.word	0x08011e1c
 800bd58:	0800fff2 	.word	0x0800fff2

0800bd5c <tcp_output_alloc_header.constprop.2>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800bd5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bd5e:	460d      	mov	r5, r1
 800bd60:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bd62:	4604      	mov	r4, r0
 800bd64:	b930      	cbnz	r0, 800bd74 <tcp_output_alloc_header.constprop.2+0x18>
 800bd66:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <tcp_output_alloc_header.constprop.2+0x40>)
 800bd68:	f240 7242 	movw	r2, #1858	; 0x742
 800bd6c:	490c      	ldr	r1, [pc, #48]	; (800bda0 <tcp_output_alloc_header.constprop.2+0x44>)
 800bd6e:	480d      	ldr	r0, [pc, #52]	; (800bda4 <tcp_output_alloc_header.constprop.2+0x48>)
 800bd70:	f002 fec8 	bl	800eb04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bd74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bd76:	4629      	mov	r1, r5
 800bd78:	8ae3      	ldrh	r3, [r4, #22]
 800bd7a:	9202      	str	r2, [sp, #8]
 800bd7c:	2210      	movs	r2, #16
 800bd7e:	9201      	str	r2, [sp, #4]
 800bd80:	8b22      	ldrh	r2, [r4, #24]
 800bd82:	9200      	str	r2, [sp, #0]
 800bd84:	4632      	mov	r2, r6
 800bd86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd88:	f7ff ffa6 	bl	800bcd8 <tcp_output_alloc_header_common.constprop.3>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bd8c:	b118      	cbz	r0, 800bd96 <tcp_output_alloc_header.constprop.2+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd92:	4413      	add	r3, r2
 800bd94:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800bd96:	b004      	add	sp, #16
 800bd98:	bd70      	pop	{r4, r5, r6, pc}
 800bd9a:	bf00      	nop
 800bd9c:	08011e99 	.word	0x08011e99
 800bda0:	08011df7 	.word	0x08011df7
 800bda4:	0800fff2 	.word	0x0800fff2

0800bda8 <tcp_output_fill_options.isra.0.constprop.4>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bda8:	b930      	cbnz	r0, 800bdb8 <tcp_output_fill_options.isra.0.constprop.4+0x10>
 800bdaa:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <tcp_output_fill_options.isra.0.constprop.4+0x14>)
 800bdac:	f240 7256 	movw	r2, #1878	; 0x756
 800bdb0:	4903      	ldr	r1, [pc, #12]	; (800bdc0 <tcp_output_fill_options.isra.0.constprop.4+0x18>)
 800bdb2:	4804      	ldr	r0, [pc, #16]	; (800bdc4 <tcp_output_fill_options.isra.0.constprop.4+0x1c>)
 800bdb4:	f002 bea6 	b.w	800eb04 <iprintf>
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	08011e99 	.word	0x08011e99
 800bdc0:	08011e73 	.word	0x08011e73
 800bdc4:	0800fff2 	.word	0x0800fff2

0800bdc8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	b085      	sub	sp, #20
 800bdce:	4617      	mov	r7, r2
 800bdd0:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	b931      	cbnz	r1, 800bde4 <tcp_output_control_segment+0x1c>
 800bdd6:	4b15      	ldr	r3, [pc, #84]	; (800be2c <tcp_output_control_segment+0x64>)
 800bdd8:	f240 7287 	movw	r2, #1927	; 0x787
 800bddc:	4914      	ldr	r1, [pc, #80]	; (800be30 <tcp_output_control_segment+0x68>)
 800bdde:	4815      	ldr	r0, [pc, #84]	; (800be34 <tcp_output_control_segment+0x6c>)
 800bde0:	f002 fe90 	bl	800eb04 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bde4:	b164      	cbz	r4, 800be00 <tcp_output_control_segment+0x38>
 800bde6:	7a20      	ldrb	r0, [r4, #8]
 800bde8:	b150      	cbz	r0, 800be00 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800bdea:	f7fc feb3 	bl	8008b54 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800bdee:	b968      	cbnz	r0, 800be0c <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800bdf0:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f7fc ff89 	bl	8008d0c <pbuf_free>
  return err;
}
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	b005      	add	sp, #20
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800be00:	4630      	mov	r0, r6
 800be02:	f7fb fbdd 	bl	80075c0 <ip4_route>
  if (netif == NULL) {
 800be06:	2800      	cmp	r0, #0
 800be08:	d0f2      	beq.n	800bdf0 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800be0a:	b164      	cbz	r4, 800be26 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800be0c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800be0e:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800be10:	2206      	movs	r2, #6
 800be12:	9002      	str	r0, [sp, #8]
 800be14:	9400      	str	r4, [sp, #0]
 800be16:	4639      	mov	r1, r7
 800be18:	9201      	str	r2, [sp, #4]
 800be1a:	4628      	mov	r0, r5
 800be1c:	4632      	mov	r2, r6
 800be1e:	f7fb fd3d 	bl	800789c <ip4_output_if>
 800be22:	4604      	mov	r4, r0
 800be24:	e7e6      	b.n	800bdf4 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800be26:	23ff      	movs	r3, #255	; 0xff
 800be28:	e7f2      	b.n	800be10 <tcp_output_control_segment+0x48>
 800be2a:	bf00      	nop
 800be2c:	08011e99 	.word	0x08011e99
 800be30:	08011e4a 	.word	0x08011e4a
 800be34:	0800fff2 	.word	0x0800fff2

0800be38 <tcp_write>:
{
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800be3e:	4605      	mov	r5, r0
{
 800be40:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800be42:	2300      	movs	r3, #0
{
 800be44:	9108      	str	r1, [sp, #32]
 800be46:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800be48:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800be4c:	b958      	cbnz	r0, 800be66 <tcp_write+0x2e>
 800be4e:	4bab      	ldr	r3, [pc, #684]	; (800c0fc <tcp_write+0x2c4>)
 800be50:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800be54:	49aa      	ldr	r1, [pc, #680]	; (800c100 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800be56:	48ab      	ldr	r0, [pc, #684]	; (800c104 <tcp_write+0x2cc>)
 800be58:	f002 fe54 	bl	800eb04 <iprintf>
 800be5c:	f06f 000f 	mvn.w	r0, #15
}
 800be60:	b011      	add	sp, #68	; 0x44
 800be62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800be66:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800be6a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	4293      	cmp	r3, r2
 800be70:	bf28      	it	cs
 800be72:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800be74:	2b00      	cmp	r3, #0
 800be76:	bf08      	it	eq
 800be78:	4613      	moveq	r3, r2
 800be7a:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800be7c:	9b08      	ldr	r3, [sp, #32]
 800be7e:	b923      	cbnz	r3, 800be8a <tcp_write+0x52>
 800be80:	4b9e      	ldr	r3, [pc, #632]	; (800c0fc <tcp_write+0x2c4>)
 800be82:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800be86:	49a0      	ldr	r1, [pc, #640]	; (800c108 <tcp_write+0x2d0>)
 800be88:	e7e5      	b.n	800be56 <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800be8a:	7d03      	ldrb	r3, [r0, #20]
 800be8c:	2b07      	cmp	r3, #7
 800be8e:	d003      	beq.n	800be98 <tcp_write+0x60>
      (pcb->state != CLOSE_WAIT) &&
 800be90:	3b02      	subs	r3, #2
 800be92:	2b02      	cmp	r3, #2
 800be94:	f200 8258 	bhi.w	800c348 <tcp_write+0x510>
  } else if (len == 0) {
 800be98:	9b05      	ldr	r3, [sp, #20]
 800be9a:	b1db      	cbz	r3, 800bed4 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 800be9c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 800bea0:	9a05      	ldr	r2, [sp, #20]
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d206      	bcs.n	800beb4 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bea6:	8b6b      	ldrh	r3, [r5, #26]
 800bea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beac:	836b      	strh	r3, [r5, #26]
  return ERR_MEM;
 800beae:	f04f 30ff 	mov.w	r0, #4294967295
 800beb2:	e7d5      	b.n	800be60 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800beb4:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800beb8:	2a08      	cmp	r2, #8
 800beba:	d8f4      	bhi.n	800bea6 <tcp_write+0x6e>
 800bebc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800bebe:	b30a      	cbz	r2, 800bf04 <tcp_write+0xcc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bec0:	b943      	cbnz	r3, 800bed4 <tcp_write+0x9c>
 800bec2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bec4:	b933      	cbnz	r3, 800bed4 <tcp_write+0x9c>
 800bec6:	4b8d      	ldr	r3, [pc, #564]	; (800c0fc <tcp_write+0x2c4>)
 800bec8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800becc:	498f      	ldr	r1, [pc, #572]	; (800c10c <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bece:	488d      	ldr	r0, [pc, #564]	; (800c104 <tcp_write+0x2cc>)
 800bed0:	f002 fe18 	bl	800eb04 <iprintf>
  queuelen = pcb->snd_queuelen;
 800bed4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bed8:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800beda:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800bedc:	b9dc      	cbnz	r4, 800bf16 <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bede:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
 800bee2:	f1b8 0f00 	cmp.w	r8, #0
 800bee6:	f000 8104 	beq.w	800c0f2 <tcp_write+0x2ba>
 800beea:	4b84      	ldr	r3, [pc, #528]	; (800c0fc <tcp_write+0x2c4>)
 800beec:	f240 224b 	movw	r2, #587	; 0x24b
 800bef0:	4987      	ldr	r1, [pc, #540]	; (800c110 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bef2:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bef4:	4883      	ldr	r0, [pc, #524]	; (800c104 <tcp_write+0x2cc>)
  u16_t extendlen = 0;
 800bef6:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bef8:	f002 fe04 	bl	800eb04 <iprintf>
  u16_t oversize_used = 0;
 800befc:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800befe:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800bf00:	46a1      	mov	r9, r4
 800bf02:	e094      	b.n	800c02e <tcp_write+0x1f6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bf04:	b913      	cbnz	r3, 800bf0c <tcp_write+0xd4>
 800bf06:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0e3      	beq.n	800bed4 <tcp_write+0x9c>
 800bf0c:	4b7b      	ldr	r3, [pc, #492]	; (800c0fc <tcp_write+0x2c4>)
 800bf0e:	f240 1259 	movw	r2, #345	; 0x159
 800bf12:	4980      	ldr	r1, [pc, #512]	; (800c114 <tcp_write+0x2dc>)
 800bf14:	e7db      	b.n	800bece <tcp_write+0x96>
  if (pcb->unsent != NULL) {
 800bf16:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf18:	f8d7 b000 	ldr.w	fp, [r7]
 800bf1c:	f1bb 0f00 	cmp.w	fp, #0
 800bf20:	f040 80b6 	bne.w	800c090 <tcp_write+0x258>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bf24:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bf26:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bf28:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bf2c:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bf2e:	bf14      	ite	ne
 800bf30:	2404      	movne	r4, #4
 800bf32:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bf34:	4423      	add	r3, r4
 800bf36:	429a      	cmp	r2, r3
 800bf38:	da06      	bge.n	800bf48 <tcp_write+0x110>
 800bf3a:	4b70      	ldr	r3, [pc, #448]	; (800c0fc <tcp_write+0x2c4>)
 800bf3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bf40:	4975      	ldr	r1, [pc, #468]	; (800c118 <tcp_write+0x2e0>)
 800bf42:	4870      	ldr	r0, [pc, #448]	; (800c104 <tcp_write+0x2cc>)
 800bf44:	f002 fdde 	bl	800eb04 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bf48:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 800bf4c:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800bf4e:	f8b5 6068 	ldrh.w	r6, [r5, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bf52:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 800bf56:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bf5a:	eba9 0904 	sub.w	r9, r9, r4
 800bf5e:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	f000 8096 	beq.w	800c094 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bf68:	45b1      	cmp	r9, r6
 800bf6a:	d206      	bcs.n	800bf7a <tcp_write+0x142>
 800bf6c:	4b63      	ldr	r3, [pc, #396]	; (800c0fc <tcp_write+0x2c4>)
 800bf6e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bf72:	496a      	ldr	r1, [pc, #424]	; (800c11c <tcp_write+0x2e4>)
 800bf74:	4863      	ldr	r0, [pc, #396]	; (800c104 <tcp_write+0x2cc>)
 800bf76:	f002 fdc5 	bl	800eb04 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bf7a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800bf7e:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bf80:	9a05      	ldr	r2, [sp, #20]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	bf28      	it	cs
 800bf86:	461a      	movcs	r2, r3
 800bf88:	454a      	cmp	r2, r9
 800bf8a:	4616      	mov	r6, r2
 800bf8c:	bfa8      	it	ge
 800bf8e:	464e      	movge	r6, r9
      space -= oversize_used;
 800bf90:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800bf94:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800bf96:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 800bf9a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bf9e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bfa2:	b153      	cbz	r3, 800bfba <tcp_write+0x182>
 800bfa4:	9b05      	ldr	r3, [sp, #20]
 800bfa6:	429e      	cmp	r6, r3
 800bfa8:	f000 81d1 	beq.w	800c34e <tcp_write+0x516>
 800bfac:	4b53      	ldr	r3, [pc, #332]	; (800c0fc <tcp_write+0x2c4>)
 800bfae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb2:	495b      	ldr	r1, [pc, #364]	; (800c120 <tcp_write+0x2e8>)
 800bfb4:	4853      	ldr	r0, [pc, #332]	; (800c104 <tcp_write+0x2cc>)
 800bfb6:	f002 fda5 	bl	800eb04 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	429e      	cmp	r6, r3
 800bfbe:	f080 81c6 	bcs.w	800c34e <tcp_write+0x516>
 800bfc2:	f1b9 0f00 	cmp.w	r9, #0
 800bfc6:	f000 8090 	beq.w	800c0ea <tcp_write+0x2b2>
 800bfca:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800bfce:	f1ba 0f00 	cmp.w	sl, #0
 800bfd2:	f000 808b 	beq.w	800c0ec <tcp_write+0x2b4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bfd6:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bfda:	454c      	cmp	r4, r9
 800bfdc:	bfa8      	it	ge
 800bfde:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bfe0:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bfe2:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bfe6:	d557      	bpl.n	800c098 <tcp_write+0x260>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bfe8:	2301      	movs	r3, #1
 800bfea:	464a      	mov	r2, r9
 800bfec:	9500      	str	r5, [sp, #0]
 800bfee:	4641      	mov	r1, r8
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	2000      	movs	r0, #0
 800bff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bffc:	f7ff fd9e 	bl	800bb3c <tcp_pbuf_prealloc>
 800c000:	4681      	mov	r9, r0
 800c002:	2800      	cmp	r0, #0
 800c004:	f000 819d 	beq.w	800c342 <tcp_write+0x50a>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c008:	9b08      	ldr	r3, [sp, #32]
 800c00a:	4642      	mov	r2, r8
 800c00c:	6840      	ldr	r0, [r0, #4]
 800c00e:	1999      	adds	r1, r3, r6
 800c010:	f002 fd4b 	bl	800eaaa <memcpy>
        queuelen += pbuf_clen(concat_p);
 800c014:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800c016:	f7fc ffe7 	bl	8008fe8 <pbuf_clen>
 800c01a:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800c01c:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 800c020:	4403      	add	r3, r0
 800c022:	b29b      	uxth	r3, r3
 800c024:	9306      	str	r3, [sp, #24]
      pos += seglen;
 800c026:	44b0      	add	r8, r6
 800c028:	463c      	mov	r4, r7
 800c02a:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c030:	f04f 0b00 	mov.w	fp, #0
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c03c:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 800c03e:	9b05      	ldr	r3, [sp, #20]
 800c040:	4598      	cmp	r8, r3
 800c042:	d373      	bcc.n	800c12c <tcp_write+0x2f4>
  if (oversize_used > 0) {
 800c044:	b146      	cbz	r6, 800c058 <tcp_write+0x220>
    for (p = last_unsent->p; p; p = p->next) {
 800c046:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800c04a:	f1b8 0f00 	cmp.w	r8, #0
 800c04e:	f040 8114 	bne.w	800c27a <tcp_write+0x442>
    last_unsent->len += oversize_used;
 800c052:	893b      	ldrh	r3, [r7, #8]
 800c054:	441e      	add	r6, r3
 800c056:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800c058:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c05c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  if (concat_p != NULL) {
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	f000 8122 	beq.w	800c2ac <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c068:	b937      	cbnz	r7, 800c078 <tcp_write+0x240>
 800c06a:	4b24      	ldr	r3, [pc, #144]	; (800c0fc <tcp_write+0x2c4>)
 800c06c:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c070:	492c      	ldr	r1, [pc, #176]	; (800c124 <tcp_write+0x2ec>)
 800c072:	4824      	ldr	r0, [pc, #144]	; (800c104 <tcp_write+0x2cc>)
 800c074:	f002 fd46 	bl	800eb04 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800c078:	4649      	mov	r1, r9
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7fc ffd8 	bl	8009030 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c080:	893b      	ldrh	r3, [r7, #8]
 800c082:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800c086:	4413      	add	r3, r2
 800c088:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800c08a:	f8c7 b000 	str.w	fp, [r7]
 800c08e:	e12f      	b.n	800c2f0 <tcp_write+0x4b8>
 800c090:	465f      	mov	r7, fp
 800c092:	e741      	b.n	800bf18 <tcp_write+0xe0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c094:	4634      	mov	r4, r6
 800c096:	e782      	b.n	800bf9e <tcp_write+0x166>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 9000 	ldr.w	r9, [r3]
 800c09e:	f1b9 0f00 	cmp.w	r9, #0
 800c0a2:	d113      	bne.n	800c0cc <tcp_write+0x294>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c0a4:	7b1a      	ldrb	r2, [r3, #12]
 800c0a6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800c0aa:	d111      	bne.n	800c0d0 <tcp_write+0x298>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c0ac:	895a      	ldrh	r2, [r3, #10]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c0b2:	9a08      	ldr	r2, [sp, #32]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d10b      	bne.n	800c0d0 <tcp_write+0x298>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c0b8:	b136      	cbz	r6, 800c0c8 <tcp_write+0x290>
 800c0ba:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <tcp_write+0x2c4>)
 800c0bc:	f240 2231 	movw	r2, #561	; 0x231
 800c0c0:	4919      	ldr	r1, [pc, #100]	; (800c128 <tcp_write+0x2f0>)
 800c0c2:	4810      	ldr	r0, [pc, #64]	; (800c104 <tcp_write+0x2cc>)
 800c0c4:	f002 fd1e 	bl	800eb04 <iprintf>
          extendlen = seglen;
 800c0c8:	46c2      	mov	sl, r8
 800c0ca:	e7ac      	b.n	800c026 <tcp_write+0x1ee>
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	e7e4      	b.n	800c09a <tcp_write+0x262>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	4641      	mov	r1, r8
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f7fc fe81 	bl	8008ddc <pbuf_alloc>
 800c0da:	4681      	mov	r9, r0
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f000 8130 	beq.w	800c342 <tcp_write+0x50a>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c0e2:	9b08      	ldr	r3, [sp, #32]
 800c0e4:	4433      	add	r3, r6
 800c0e6:	6043      	str	r3, [r0, #4]
 800c0e8:	e795      	b.n	800c016 <tcp_write+0x1de>
  u16_t extendlen = 0;
 800c0ea:	46ca      	mov	sl, r9
 800c0ec:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800c0ee:	46d1      	mov	r9, sl
 800c0f0:	e79d      	b.n	800c02e <tcp_write+0x1f6>
  u16_t extendlen = 0;
 800c0f2:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800c0f4:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c0f6:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800c0f8:	46c1      	mov	r9, r8
 800c0fa:	e798      	b.n	800c02e <tcp_write+0x1f6>
 800c0fc:	08011e99 	.word	0x08011e99
 800c100:	080120ae 	.word	0x080120ae
 800c104:	0800fff2 	.word	0x0800fff2
 800c108:	080120c5 	.word	0x080120c5
 800c10c:	080120f6 	.word	0x080120f6
 800c110:	080121e0 	.word	0x080121e0
 800c114:	08012130 	.word	0x08012130
 800c118:	08012162 	.word	0x08012162
 800c11c:	08012179 	.word	0x08012179
 800c120:	08012199 	.word	0x08012199
 800c124:	0801226c 	.word	0x0801226c
 800c128:	080121b7 	.word	0x080121b7
    u16_t left = len - pos;
 800c12c:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c12e:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800c130:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800c134:	b29b      	uxth	r3, r3
 800c136:	4293      	cmp	r3, r2
 800c138:	bf28      	it	cs
 800c13a:	4613      	movcs	r3, r2
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c142:	b363      	cbz	r3, 800c19e <tcp_write+0x366>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c144:	fabb f38b 	clz	r3, fp
 800c148:	9500      	str	r5, [sp, #0]
 800c14a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c14c:	2036      	movs	r0, #54	; 0x36
 800c14e:	095b      	lsrs	r3, r3, #5
 800c150:	9302      	str	r3, [sp, #8]
 800c152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c154:	9301      	str	r3, [sp, #4]
 800c156:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800c15a:	f7ff fcef 	bl	800bb3c <tcp_pbuf_prealloc>
 800c15e:	4604      	mov	r4, r0
 800c160:	2800      	cmp	r0, #0
 800c162:	d03c      	beq.n	800c1de <tcp_write+0x3a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c164:	8943      	ldrh	r3, [r0, #10]
 800c166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c168:	4293      	cmp	r3, r2
 800c16a:	d206      	bcs.n	800c17a <tcp_write+0x342>
 800c16c:	4b7b      	ldr	r3, [pc, #492]	; (800c35c <tcp_write+0x524>)
 800c16e:	f240 2267 	movw	r2, #615	; 0x267
 800c172:	497b      	ldr	r1, [pc, #492]	; (800c360 <tcp_write+0x528>)
 800c174:	487b      	ldr	r0, [pc, #492]	; (800c364 <tcp_write+0x52c>)
 800c176:	f002 fcc5 	bl	800eb04 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c17e:	eb03 0108 	add.w	r1, r3, r8
 800c182:	6860      	ldr	r0, [r4, #4]
 800c184:	f002 fc91 	bl	800eaaa <memcpy>
    queuelen += pbuf_clen(p);
 800c188:	4620      	mov	r0, r4
 800c18a:	f7fc ff2d 	bl	8008fe8 <pbuf_clen>
 800c18e:	9b06      	ldr	r3, [sp, #24]
 800c190:	4403      	add	r3, r0
 800c192:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c194:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800c196:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c198:	d94a      	bls.n	800c230 <tcp_write+0x3f8>
      pbuf_free(p);
 800c19a:	4620      	mov	r0, r4
 800c19c:	e01d      	b.n	800c1da <tcp_write+0x3a2>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c19e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c1a2:	b133      	cbz	r3, 800c1b2 <tcp_write+0x37a>
 800c1a4:	4b6d      	ldr	r3, [pc, #436]	; (800c35c <tcp_write+0x524>)
 800c1a6:	f240 2271 	movw	r2, #625	; 0x271
 800c1aa:	496f      	ldr	r1, [pc, #444]	; (800c368 <tcp_write+0x530>)
 800c1ac:	486d      	ldr	r0, [pc, #436]	; (800c364 <tcp_write+0x52c>)
 800c1ae:	f002 fca9 	bl	800eb04 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1b6:	2036      	movs	r0, #54	; 0x36
 800c1b8:	f7fc fe10 	bl	8008ddc <pbuf_alloc>
 800c1bc:	b178      	cbz	r0, 800c1de <tcp_write+0x3a6>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c1be:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1c0:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c1c2:	900d      	str	r0, [sp, #52]	; 0x34
 800c1c4:	4442      	add	r2, r8
 800c1c6:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1cc:	2036      	movs	r0, #54	; 0x36
 800c1ce:	f7fc fe05 	bl	8008ddc <pbuf_alloc>
 800c1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	bb38      	cbnz	r0, 800c228 <tcp_write+0x3f0>
        pbuf_free(p2);
 800c1d8:	4618      	mov	r0, r3
      pbuf_free(p);
 800c1da:	f7fc fd97 	bl	8008d0c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1de:	8b6b      	ldrh	r3, [r5, #26]
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	836b      	strh	r3, [r5, #26]
  if (concat_p != NULL) {
 800c1e6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ea:	d002      	beq.n	800c1f2 <tcp_write+0x3ba>
    pbuf_free(concat_p);
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	f7fc fd8d 	bl	8008d0c <pbuf_free>
  if (queue != NULL) {
 800c1f2:	f1bb 0f00 	cmp.w	fp, #0
 800c1f6:	d002      	beq.n	800c1fe <tcp_write+0x3c6>
    tcp_segs_free(queue);
 800c1f8:	4658      	mov	r0, fp
 800c1fa:	f7fd fa57 	bl	80096ac <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800c1fe:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c202:	2b00      	cmp	r3, #0
 800c204:	f43f ae53 	beq.w	800beae <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c208:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f47f ae4f 	bne.w	800beae <tcp_write+0x76>
 800c210:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c212:	2b00      	cmp	r3, #0
 800c214:	f47f ae4b 	bne.w	800beae <tcp_write+0x76>
 800c218:	4b50      	ldr	r3, [pc, #320]	; (800c35c <tcp_write+0x524>)
 800c21a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c21e:	4953      	ldr	r1, [pc, #332]	; (800c36c <tcp_write+0x534>)
 800c220:	4850      	ldr	r0, [pc, #320]	; (800c364 <tcp_write+0x52c>)
 800c222:	f002 fc6f 	bl	800eb04 <iprintf>
 800c226:	e642      	b.n	800beae <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 800c228:	4619      	mov	r1, r3
 800c22a:	f7fc ff01 	bl	8009030 <pbuf_cat>
 800c22e:	e7ab      	b.n	800c188 <tcp_write+0x350>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c230:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800c232:	2200      	movs	r2, #0
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	4443      	add	r3, r8
 800c23c:	f7ff fcd2 	bl	800bbe4 <tcp_create_segment>
 800c240:	4604      	mov	r4, r0
 800c242:	2800      	cmp	r0, #0
 800c244:	d0cb      	beq.n	800c1de <tcp_write+0x3a6>
    if (queue == NULL) {
 800c246:	f1bb 0f00 	cmp.w	fp, #0
 800c24a:	d010      	beq.n	800c26e <tcp_write+0x436>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c24e:	b933      	cbnz	r3, 800c25e <tcp_write+0x426>
 800c250:	4b42      	ldr	r3, [pc, #264]	; (800c35c <tcp_write+0x524>)
 800c252:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c256:	4946      	ldr	r1, [pc, #280]	; (800c370 <tcp_write+0x538>)
 800c258:	4842      	ldr	r0, [pc, #264]	; (800c364 <tcp_write+0x52c>)
 800c25a:	f002 fc53 	bl	800eb04 <iprintf>
      prev_seg->next = seg;
 800c25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c260:	601c      	str	r4, [r3, #0]
    pos += seglen;
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	940b      	str	r4, [sp, #44]	; 0x2c
 800c266:	4498      	add	r8, r3
 800c268:	fa1f f888 	uxth.w	r8, r8
 800c26c:	e6e7      	b.n	800c03e <tcp_write+0x206>
 800c26e:	4683      	mov	fp, r0
 800c270:	e7f7      	b.n	800c262 <tcp_write+0x42a>
  if (oversize_used > 0) {
 800c272:	f04f 0a00 	mov.w	sl, #0
 800c276:	46d1      	mov	r9, sl
 800c278:	e6e5      	b.n	800c046 <tcp_write+0x20e>
      p->tot_len += oversize_used;
 800c27a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c27e:	4433      	add	r3, r6
 800c280:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 800c284:	f8d8 3000 	ldr.w	r3, [r8]
 800c288:	b96b      	cbnz	r3, 800c2a6 <tcp_write+0x46e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c28a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c28e:	4632      	mov	r2, r6
 800c290:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 800c294:	9908      	ldr	r1, [sp, #32]
 800c296:	4418      	add	r0, r3
 800c298:	f002 fc07 	bl	800eaaa <memcpy>
        p->len += oversize_used;
 800c29c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c2a0:	4433      	add	r3, r6
 800c2a2:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c2a6:	f8d8 8000 	ldr.w	r8, [r8]
 800c2aa:	e6ce      	b.n	800c04a <tcp_write+0x212>
  } else if (extendlen > 0) {
 800c2ac:	f1ba 0f00 	cmp.w	sl, #0
 800c2b0:	d019      	beq.n	800c2e6 <tcp_write+0x4ae>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c2b2:	b10f      	cbz	r7, 800c2b8 <tcp_write+0x480>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	b933      	cbnz	r3, 800c2c6 <tcp_write+0x48e>
 800c2b8:	4b28      	ldr	r3, [pc, #160]	; (800c35c <tcp_write+0x524>)
 800c2ba:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c2be:	492d      	ldr	r1, [pc, #180]	; (800c374 <tcp_write+0x53c>)
 800c2c0:	4828      	ldr	r0, [pc, #160]	; (800c364 <tcp_write+0x52c>)
 800c2c2:	f002 fc1f 	bl	800eb04 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	891a      	ldrh	r2, [r3, #8]
 800c2ca:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800c2cc:	4452      	add	r2, sl
 800c2ce:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c2d0:	b939      	cbnz	r1, 800c2e2 <tcp_write+0x4aa>
    p->len += extendlen;
 800c2d2:	895a      	ldrh	r2, [r3, #10]
 800c2d4:	4452      	add	r2, sl
 800c2d6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c2d8:	893b      	ldrh	r3, [r7, #8]
 800c2da:	449a      	add	sl, r3
 800c2dc:	f8a7 a008 	strh.w	sl, [r7, #8]
 800c2e0:	e6d3      	b.n	800c08a <tcp_write+0x252>
      p->tot_len += extendlen;
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	e7f0      	b.n	800c2c8 <tcp_write+0x490>
  if (last_unsent == NULL) {
 800c2e6:	2f00      	cmp	r7, #0
 800c2e8:	f47f aecf 	bne.w	800c08a <tcp_write+0x252>
    pcb->unsent = queue;
 800c2ec:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
  pcb->snd_lbb += len;
 800c2f0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800c2f2:	9a05      	ldr	r2, [sp, #20]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c2f8:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 800c2fc:	1a9b      	subs	r3, r3, r2
 800c2fe:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c302:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c306:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c30a:	9b06      	ldr	r3, [sp, #24]
 800c30c:	b153      	cbz	r3, 800c324 <tcp_write+0x4ec>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c30e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c310:	b943      	cbnz	r3, 800c324 <tcp_write+0x4ec>
 800c312:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c314:	b933      	cbnz	r3, 800c324 <tcp_write+0x4ec>
 800c316:	4b11      	ldr	r3, [pc, #68]	; (800c35c <tcp_write+0x524>)
 800c318:	f240 3213 	movw	r2, #787	; 0x313
 800c31c:	4913      	ldr	r1, [pc, #76]	; (800c36c <tcp_write+0x534>)
 800c31e:	4811      	ldr	r0, [pc, #68]	; (800c364 <tcp_write+0x52c>)
 800c320:	f002 fbf0 	bl	800eb04 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c324:	b15c      	cbz	r4, 800c33e <tcp_write+0x506>
 800c326:	68e4      	ldr	r4, [r4, #12]
 800c328:	b14c      	cbz	r4, 800c33e <tcp_write+0x506>
 800c32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c32c:	f013 0602 	ands.w	r6, r3, #2
 800c330:	d105      	bne.n	800c33e <tcp_write+0x506>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c332:	89a5      	ldrh	r5, [r4, #12]
 800c334:	2008      	movs	r0, #8
 800c336:	f7f8 ff01 	bl	800513c <lwip_htons>
 800c33a:	4328      	orrs	r0, r5
 800c33c:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 800c33e:	2000      	movs	r0, #0
 800c340:	e58e      	b.n	800be60 <tcp_write+0x28>
      p->tot_len += extendlen;
 800c342:	f04f 0900 	mov.w	r9, #0
 800c346:	e74a      	b.n	800c1de <tcp_write+0x3a6>
    return ERR_CONN;
 800c348:	f06f 000a 	mvn.w	r0, #10
 800c34c:	e588      	b.n	800be60 <tcp_write+0x28>
  if (oversize_used > 0) {
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d18f      	bne.n	800c272 <tcp_write+0x43a>
  pcb->unsent_oversize = oversize;
 800c352:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c356:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800c35a:	e696      	b.n	800c08a <tcp_write+0x252>
 800c35c:	08011e99 	.word	0x08011e99
 800c360:	0801220f 	.word	0x0801220f
 800c364:	0800fff2 	.word	0x0800fff2
 800c368:	0801224d 	.word	0x0801224d
 800c36c:	080122d9 	.word	0x080122d9
 800c370:	0801225b 	.word	0x0801225b
 800c374:	080122a4 	.word	0x080122a4

0800c378 <tcp_split_unsent_seg>:
{
 800c378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c37e:	4605      	mov	r5, r0
 800c380:	b930      	cbnz	r0, 800c390 <tcp_split_unsent_seg+0x18>
 800c382:	4b5c      	ldr	r3, [pc, #368]	; (800c4f4 <tcp_split_unsent_seg+0x17c>)
 800c384:	f240 324b 	movw	r2, #843	; 0x34b
 800c388:	495b      	ldr	r1, [pc, #364]	; (800c4f8 <tcp_split_unsent_seg+0x180>)
 800c38a:	485c      	ldr	r0, [pc, #368]	; (800c4fc <tcp_split_unsent_seg+0x184>)
 800c38c:	f002 fbba 	bl	800eb04 <iprintf>
  useg = pcb->unsent;
 800c390:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800c392:	b914      	cbnz	r4, 800c39a <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e00b      	b.n	800c3b2 <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	d10b      	bne.n	800c3b8 <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c3a0:	4b54      	ldr	r3, [pc, #336]	; (800c4f4 <tcp_split_unsent_seg+0x17c>)
 800c3a2:	f240 3253 	movw	r2, #851	; 0x353
 800c3a6:	4956      	ldr	r1, [pc, #344]	; (800c500 <tcp_split_unsent_seg+0x188>)
 800c3a8:	4854      	ldr	r0, [pc, #336]	; (800c4fc <tcp_split_unsent_seg+0x184>)
 800c3aa:	f002 fbab 	bl	800eb04 <iprintf>
    return ERR_VAL;
 800c3ae:	f06f 0005 	mvn.w	r0, #5
}
 800c3b2:	b003      	add	sp, #12
 800c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800c3b8:	8923      	ldrh	r3, [r4, #8]
 800c3ba:	454b      	cmp	r3, r9
 800c3bc:	d801      	bhi.n	800c3c2 <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 800c3be:	2000      	movs	r0, #0
 800c3c0:	e7f7      	b.n	800c3b2 <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c3c2:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800c3c4:	454b      	cmp	r3, r9
 800c3c6:	d206      	bcs.n	800c3d6 <tcp_split_unsent_seg+0x5e>
 800c3c8:	4b4a      	ldr	r3, [pc, #296]	; (800c4f4 <tcp_split_unsent_seg+0x17c>)
 800c3ca:	f240 325b 	movw	r2, #859	; 0x35b
 800c3ce:	494d      	ldr	r1, [pc, #308]	; (800c504 <tcp_split_unsent_seg+0x18c>)
 800c3d0:	484a      	ldr	r0, [pc, #296]	; (800c4fc <tcp_split_unsent_seg+0x184>)
 800c3d2:	f002 fb97 	bl	800eb04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c3d6:	8923      	ldrh	r3, [r4, #8]
 800c3d8:	b933      	cbnz	r3, 800c3e8 <tcp_split_unsent_seg+0x70>
 800c3da:	4b46      	ldr	r3, [pc, #280]	; (800c4f4 <tcp_split_unsent_seg+0x17c>)
 800c3dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c3e0:	4949      	ldr	r1, [pc, #292]	; (800c508 <tcp_split_unsent_seg+0x190>)
 800c3e2:	4846      	ldr	r0, [pc, #280]	; (800c4fc <tcp_split_unsent_seg+0x184>)
 800c3e4:	f002 fb8e 	bl	800eb04 <iprintf>
  optflags = useg->flags;
 800c3e8:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c3ec:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800c3f0:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c3f2:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c3f4:	f01b 0f01 	tst.w	fp, #1
  remainder = useg->len - split;
 800c3f8:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c3fc:	bf14      	ite	ne
 800c3fe:	2604      	movne	r6, #4
 800c400:	2600      	moveq	r6, #0
  remainder = useg->len - split;
 800c402:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c404:	19b9      	adds	r1, r7, r6
 800c406:	b289      	uxth	r1, r1
 800c408:	f7fc fce8 	bl	8008ddc <pbuf_alloc>
  if (p == NULL) {
 800c40c:	4682      	mov	sl, r0
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0c0      	beq.n	800c394 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800c412:	6860      	ldr	r0, [r4, #4]
 800c414:	8922      	ldrh	r2, [r4, #8]
 800c416:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c418:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 800c41c:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c41e:	463a      	mov	r2, r7
 800c420:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 800c422:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c424:	b29b      	uxth	r3, r3
 800c426:	f7fc fecd 	bl	80091c4 <pbuf_copy_partial>
 800c42a:	4287      	cmp	r7, r0
 800c42c:	d15d      	bne.n	800c4ea <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c42e:	68e3      	ldr	r3, [r4, #12]
 800c430:	8998      	ldrh	r0, [r3, #12]
 800c432:	f7f8 fe83 	bl	800513c <lwip_htons>
 800c436:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800c438:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c43c:	bf0e      	itee	eq
 800c43e:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c442:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c446:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800c44a:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c44c:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800c44e:	bf48      	it	mi
 800c450:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c454:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800c456:	bf48      	it	mi
 800c458:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c45c:	f7f8 fe71 	bl	8005142 <lwip_htonl>
 800c460:	4642      	mov	r2, r8
 800c462:	eb09 0300 	add.w	r3, r9, r0
 800c466:	f8cd b000 	str.w	fp, [sp]
 800c46a:	4651      	mov	r1, sl
 800c46c:	4628      	mov	r0, r5
 800c46e:	f7ff fbb9 	bl	800bbe4 <tcp_create_segment>
  if (seg == NULL) {
 800c472:	4680      	mov	r8, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	d038      	beq.n	800c4ea <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c478:	6860      	ldr	r0, [r4, #4]
 800c47a:	f7fc fdb5 	bl	8008fe8 <pbuf_clen>
 800c47e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c482:	1a18      	subs	r0, r3, r0
 800c484:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c488:	6860      	ldr	r0, [r4, #4]
 800c48a:	8901      	ldrh	r1, [r0, #8]
 800c48c:	1bc9      	subs	r1, r1, r7
 800c48e:	b289      	uxth	r1, r1
 800c490:	f7fc fd3a 	bl	8008f08 <pbuf_realloc>
  useg->len -= remainder;
 800c494:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c496:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800c49a:	4630      	mov	r0, r6
  useg->len -= remainder;
 800c49c:	1bdf      	subs	r7, r3, r7
 800c49e:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c4a0:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 800c4a4:	f7f8 fe4a 	bl	800513c <lwip_htons>
 800c4a8:	4338      	orrs	r0, r7
 800c4aa:	f8a9 000c 	strh.w	r0, [r9, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c4ae:	6860      	ldr	r0, [r4, #4]
 800c4b0:	f7fc fd9a 	bl	8008fe8 <pbuf_clen>
 800c4b4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c4b8:	4418      	add	r0, r3
 800c4ba:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c4be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4c2:	f7fc fd91 	bl	8008fe8 <pbuf_clen>
 800c4c6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c4ca:	4418      	add	r0, r3
  seg->next = useg->next;
 800c4cc:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c4ce:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800c4d2:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800c4d6:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800c4da:	f8d8 0000 	ldr.w	r0, [r8]
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	f47f af6d 	bne.w	800c3be <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 800c4e4:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 800c4e8:	e763      	b.n	800c3b2 <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	f7fc fc0e 	bl	8008d0c <pbuf_free>
 800c4f0:	e750      	b.n	800c394 <tcp_split_unsent_seg+0x1c>
 800c4f2:	bf00      	nop
 800c4f4:	08011e99 	.word	0x08011e99
 800c4f8:	0801204f 	.word	0x0801204f
 800c4fc:	0800fff2 	.word	0x0800fff2
 800c500:	08012071 	.word	0x08012071
 800c504:	08012093 	.word	0x08012093
 800c508:	080120a0 	.word	0x080120a0

0800c50c <tcp_enqueue_flags>:
{
 800c50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c510:	f011 0803 	ands.w	r8, r1, #3
{
 800c514:	4604      	mov	r4, r0
 800c516:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c518:	d106      	bne.n	800c528 <tcp_enqueue_flags+0x1c>
 800c51a:	4b41      	ldr	r3, [pc, #260]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c51c:	f240 4212 	movw	r2, #1042	; 0x412
 800c520:	4940      	ldr	r1, [pc, #256]	; (800c624 <tcp_enqueue_flags+0x118>)
 800c522:	4841      	ldr	r0, [pc, #260]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c524:	f002 faee 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c528:	b934      	cbnz	r4, 800c538 <tcp_enqueue_flags+0x2c>
 800c52a:	4b3d      	ldr	r3, [pc, #244]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c52c:	f240 4213 	movw	r2, #1043	; 0x413
 800c530:	493e      	ldr	r1, [pc, #248]	; (800c62c <tcp_enqueue_flags+0x120>)
 800c532:	483d      	ldr	r0, [pc, #244]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c534:	f002 fae6 	bl	800eb04 <iprintf>
 800c538:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c53c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c540:	2036      	movs	r0, #54	; 0x36
  if (flags & TCP_SYN) {
 800c542:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c544:	bf15      	itete	ne
 800c546:	2704      	movne	r7, #4
 800c548:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 800c54a:	f04f 0901 	movne.w	r9, #1
 800c54e:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c552:	4639      	mov	r1, r7
 800c554:	f7fc fc42 	bl	8008ddc <pbuf_alloc>
 800c558:	4605      	mov	r5, r0
 800c55a:	b940      	cbnz	r0, 800c56e <tcp_enqueue_flags+0x62>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c55c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c566:	8363      	strh	r3, [r4, #26]
}
 800c568:	b003      	add	sp, #12
 800c56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c56e:	8943      	ldrh	r3, [r0, #10]
 800c570:	42bb      	cmp	r3, r7
 800c572:	d206      	bcs.n	800c582 <tcp_enqueue_flags+0x76>
 800c574:	4b2a      	ldr	r3, [pc, #168]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c576:	f240 423a 	movw	r2, #1082	; 0x43a
 800c57a:	492d      	ldr	r1, [pc, #180]	; (800c630 <tcp_enqueue_flags+0x124>)
 800c57c:	482a      	ldr	r0, [pc, #168]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c57e:	f002 fac1 	bl	800eb04 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c582:	f8cd 9000 	str.w	r9, [sp]
 800c586:	4629      	mov	r1, r5
 800c588:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c58a:	4632      	mov	r2, r6
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff fb29 	bl	800bbe4 <tcp_create_segment>
 800c592:	4605      	mov	r5, r0
 800c594:	2800      	cmp	r0, #0
 800c596:	d0e1      	beq.n	800c55c <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c598:	68c3      	ldr	r3, [r0, #12]
 800c59a:	079a      	lsls	r2, r3, #30
 800c59c:	d006      	beq.n	800c5ac <tcp_enqueue_flags+0xa0>
 800c59e:	4b20      	ldr	r3, [pc, #128]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c5a0:	f240 4242 	movw	r2, #1090	; 0x442
 800c5a4:	4923      	ldr	r1, [pc, #140]	; (800c634 <tcp_enqueue_flags+0x128>)
 800c5a6:	4820      	ldr	r0, [pc, #128]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c5a8:	f002 faac 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c5ac:	892b      	ldrh	r3, [r5, #8]
 800c5ae:	b133      	cbz	r3, 800c5be <tcp_enqueue_flags+0xb2>
 800c5b0:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c5b2:	f240 4243 	movw	r2, #1091	; 0x443
 800c5b6:	4920      	ldr	r1, [pc, #128]	; (800c638 <tcp_enqueue_flags+0x12c>)
 800c5b8:	481b      	ldr	r0, [pc, #108]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c5ba:	f002 faa3 	bl	800eb04 <iprintf>
  if (pcb->unsent == NULL) {
 800c5be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c5c0:	bb4b      	cbnz	r3, 800c616 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 800c5c2:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c5ca:	f1b8 0f00 	cmp.w	r8, #0
 800c5ce:	d002      	beq.n	800c5d6 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 800c5d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c5d6:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c5d8:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800c5da:	bf42      	ittt	mi
 800c5dc:	8b63      	ldrhmi	r3, [r4, #26]
 800c5de:	f043 0320 	orrmi.w	r3, r3, #32
 800c5e2:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c5e4:	f7fc fd00 	bl	8008fe8 <pbuf_clen>
 800c5e8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c5ec:	4418      	add	r0, r3
 800c5ee:	b280      	uxth	r0, r0
 800c5f0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d0b7      	beq.n	800c568 <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c5fa:	b948      	cbnz	r0, 800c610 <tcp_enqueue_flags+0x104>
 800c5fc:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d1b2      	bne.n	800c568 <tcp_enqueue_flags+0x5c>
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <tcp_enqueue_flags+0x114>)
 800c604:	f240 4266 	movw	r2, #1126	; 0x466
 800c608:	490c      	ldr	r1, [pc, #48]	; (800c63c <tcp_enqueue_flags+0x130>)
 800c60a:	4807      	ldr	r0, [pc, #28]	; (800c628 <tcp_enqueue_flags+0x11c>)
 800c60c:	f002 fa7a 	bl	800eb04 <iprintf>
  return ERR_OK;
 800c610:	2000      	movs	r0, #0
 800c612:	e7a9      	b.n	800c568 <tcp_enqueue_flags+0x5c>
 800c614:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	2a00      	cmp	r2, #0
 800c61a:	d1fb      	bne.n	800c614 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 800c61c:	601d      	str	r5, [r3, #0]
 800c61e:	e7d1      	b.n	800c5c4 <tcp_enqueue_flags+0xb8>
 800c620:	08011e99 	.word	0x08011e99
 800c624:	08011c5d 	.word	0x08011c5d
 800c628:	0800fff2 	.word	0x0800fff2
 800c62c:	08011cb2 	.word	0x08011cb2
 800c630:	08011cd1 	.word	0x08011cd1
 800c634:	08011d0a 	.word	0x08011d0a
 800c638:	08011d22 	.word	0x08011d22
 800c63c:	08011d4c 	.word	0x08011d4c

0800c640 <tcp_send_fin>:
{
 800c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c642:	4604      	mov	r4, r0
 800c644:	b930      	cbnz	r0, 800c654 <tcp_send_fin+0x14>
 800c646:	4b13      	ldr	r3, [pc, #76]	; (800c694 <tcp_send_fin+0x54>)
 800c648:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c64c:	4912      	ldr	r1, [pc, #72]	; (800c698 <tcp_send_fin+0x58>)
 800c64e:	4813      	ldr	r0, [pc, #76]	; (800c69c <tcp_send_fin+0x5c>)
 800c650:	f002 fa58 	bl	800eb04 <iprintf>
  if (pcb->unsent != NULL) {
 800c654:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c656:	b935      	cbnz	r5, 800c666 <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c658:	4620      	mov	r0, r4
 800c65a:	2101      	movs	r1, #1
}
 800c65c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c660:	f7ff bf54 	b.w	800c50c <tcp_enqueue_flags>
 800c664:	461d      	mov	r5, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1fb      	bne.n	800c664 <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c66c:	68eb      	ldr	r3, [r5, #12]
 800c66e:	8998      	ldrh	r0, [r3, #12]
 800c670:	f7f8 fd64 	bl	800513c <lwip_htons>
 800c674:	f010 0707 	ands.w	r7, r0, #7
 800c678:	d1ee      	bne.n	800c658 <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c67a:	68ee      	ldr	r6, [r5, #12]
 800c67c:	2001      	movs	r0, #1
 800c67e:	89b5      	ldrh	r5, [r6, #12]
 800c680:	f7f8 fd5c 	bl	800513c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800c684:	8b63      	ldrh	r3, [r4, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c686:	4328      	orrs	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800c688:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c68c:	81b0      	strh	r0, [r6, #12]
}
 800c68e:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 800c690:	8363      	strh	r3, [r4, #26]
}
 800c692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c694:	08011e99 	.word	0x08011e99
 800c698:	08012035 	.word	0x08012035
 800c69c:	0800fff2 	.word	0x0800fff2

0800c6a0 <tcp_rexmit_rto_prepare>:
{
 800c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	b930      	cbnz	r0, 800c6b6 <tcp_rexmit_rto_prepare+0x16>
 800c6a8:	4b1c      	ldr	r3, [pc, #112]	; (800c71c <tcp_rexmit_rto_prepare+0x7c>)
 800c6aa:	f240 6263 	movw	r2, #1635	; 0x663
 800c6ae:	491c      	ldr	r1, [pc, #112]	; (800c720 <tcp_rexmit_rto_prepare+0x80>)
 800c6b0:	481c      	ldr	r0, [pc, #112]	; (800c724 <tcp_rexmit_rto_prepare+0x84>)
 800c6b2:	f002 fa27 	bl	800eb04 <iprintf>
  if (pcb->unacked == NULL) {
 800c6b6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c6b8:	b945      	cbnz	r5, 800c6cc <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800c6ba:	f06f 0005 	mvn.w	r0, #5
 800c6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800c6c2:	f7ff fa23 	bl	800bb0c <tcp_output_segment_busy>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1f7      	bne.n	800c6ba <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c6ca:	682d      	ldr	r5, [r5, #0]
 800c6cc:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800c6ce:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1f6      	bne.n	800c6c2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800c6d4:	f7ff fa1a 	bl	800bb0c <tcp_output_segment_busy>
 800c6d8:	4606      	mov	r6, r0
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d1ed      	bne.n	800c6ba <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800c6de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c6e0:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800c6e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800c6e4:	6720      	str	r0, [r4, #112]	; 0x70
  pcb->unsent = pcb->unacked;
 800c6e6:	66e3      	str	r3, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800c6e8:	8b63      	ldrh	r3, [r4, #26]
 800c6ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6ee:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6f0:	68eb      	ldr	r3, [r5, #12]
 800c6f2:	6858      	ldr	r0, [r3, #4]
 800c6f4:	f7f8 fd25 	bl	8005142 <lwip_htonl>
 800c6f8:	68eb      	ldr	r3, [r5, #12]
 800c6fa:	4607      	mov	r7, r0
 800c6fc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c700:	8998      	ldrh	r0, [r3, #12]
 800c702:	f7f8 fd1b 	bl	800513c <lwip_htons>
 800c706:	f010 0003 	ands.w	r0, r0, #3
 800c70a:	4447      	add	r7, r8
  pcb->rttest = 0;
 800c70c:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c70e:	bf18      	it	ne
 800c710:	2001      	movne	r0, #1
 800c712:	4438      	add	r0, r7
 800c714:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 800c716:	4630      	mov	r0, r6
}
 800c718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71c:	08011e99 	.word	0x08011e99
 800c720:	08011fbc 	.word	0x08011fbc
 800c724:	0800fff2 	.word	0x0800fff2

0800c728 <tcp_rexmit>:
{
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c72a:	4604      	mov	r4, r0
 800c72c:	b930      	cbnz	r0, 800c73c <tcp_rexmit+0x14>
 800c72e:	4b1b      	ldr	r3, [pc, #108]	; (800c79c <tcp_rexmit+0x74>)
 800c730:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c734:	491a      	ldr	r1, [pc, #104]	; (800c7a0 <tcp_rexmit+0x78>)
 800c736:	481b      	ldr	r0, [pc, #108]	; (800c7a4 <tcp_rexmit+0x7c>)
 800c738:	f002 f9e4 	bl	800eb04 <iprintf>
  if (pcb->unacked == NULL) {
 800c73c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c73e:	b915      	cbnz	r5, 800c746 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800c740:	f06f 0005 	mvn.w	r0, #5
 800c744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800c746:	4628      	mov	r0, r5
 800c748:	f7ff f9e0 	bl	800bb0c <tcp_output_segment_busy>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1f7      	bne.n	800c740 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800c750:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800c752:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800c756:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	b983      	cbnz	r3, 800c77e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800c760:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800c762:	682b      	ldr	r3, [r5, #0]
 800c764:	b90b      	cbnz	r3, 800c76a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800c766:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800c76a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800c76e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800c770:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800c772:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800c774:	bf1c      	itt	ne
 800c776:	3301      	addne	r3, #1
 800c778:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800c77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	6858      	ldr	r0, [r3, #4]
 800c782:	f7f8 fcde 	bl	8005142 <lwip_htonl>
 800c786:	68eb      	ldr	r3, [r5, #12]
 800c788:	4607      	mov	r7, r0
 800c78a:	6858      	ldr	r0, [r3, #4]
 800c78c:	f7f8 fcd9 	bl	8005142 <lwip_htonl>
 800c790:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800c792:	2800      	cmp	r0, #0
 800c794:	dae2      	bge.n	800c75c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800c796:	6836      	ldr	r6, [r6, #0]
 800c798:	e7de      	b.n	800c758 <tcp_rexmit+0x30>
 800c79a:	bf00      	nop
 800c79c:	08011e99 	.word	0x08011e99
 800c7a0:	08011f48 	.word	0x08011f48
 800c7a4:	0800fff2 	.word	0x0800fff2

0800c7a8 <tcp_rexmit_fast>:
{
 800c7a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	b930      	cbnz	r0, 800c7bc <tcp_rexmit_fast+0x14>
 800c7ae:	4b17      	ldr	r3, [pc, #92]	; (800c80c <tcp_rexmit_fast+0x64>)
 800c7b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c7b4:	4916      	ldr	r1, [pc, #88]	; (800c810 <tcp_rexmit_fast+0x68>)
 800c7b6:	4817      	ldr	r0, [pc, #92]	; (800c814 <tcp_rexmit_fast+0x6c>)
 800c7b8:	f002 f9a4 	bl	800eb04 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c7bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c7be:	b31b      	cbz	r3, 800c808 <tcp_rexmit_fast+0x60>
 800c7c0:	8b63      	ldrh	r3, [r4, #26]
 800c7c2:	075b      	lsls	r3, r3, #29
 800c7c4:	d420      	bmi.n	800c808 <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7ff ffae 	bl	800c728 <tcp_rexmit>
 800c7cc:	b9e0      	cbnz	r0, 800c808 <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7ce:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800c7d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	bf38      	it	cc
 800c7da:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7de:	bf28      	it	cs
 800c7e0:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7e2:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7e4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7e8:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c7ea:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 800c7ec:	bf38      	it	cc
 800c7ee:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c7f2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c7fc:	8b63      	ldrh	r3, [r4, #26]
 800c7fe:	f043 0304 	orr.w	r3, r3, #4
 800c802:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	8623      	strh	r3, [r4, #48]	; 0x30
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	bf00      	nop
 800c80c:	08011e99 	.word	0x08011e99
 800c810:	08011f60 	.word	0x08011f60
 800c814:	0800fff2 	.word	0x0800fff2

0800c818 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c81c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c81e:	4606      	mov	r6, r0
 800c820:	468a      	mov	sl, r1
 800c822:	4617      	mov	r7, r2
 800c824:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c828:	461c      	mov	r4, r3
{
 800c82a:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c82e:	b933      	cbnz	r3, 800c83e <tcp_rst+0x26>
 800c830:	4b17      	ldr	r3, [pc, #92]	; (800c890 <tcp_rst+0x78>)
 800c832:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c836:	4917      	ldr	r1, [pc, #92]	; (800c894 <tcp_rst+0x7c>)
 800c838:	4817      	ldr	r0, [pc, #92]	; (800c898 <tcp_rst+0x80>)
 800c83a:	f002 f963 	bl	800eb04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c83e:	b935      	cbnz	r5, 800c84e <tcp_rst+0x36>
 800c840:	4b13      	ldr	r3, [pc, #76]	; (800c890 <tcp_rst+0x78>)
 800c842:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c846:	4915      	ldr	r1, [pc, #84]	; (800c89c <tcp_rst+0x84>)
 800c848:	4813      	ldr	r0, [pc, #76]	; (800c898 <tcp_rst+0x80>)
 800c84a:	f002 f95b 	bl	800eb04 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c84e:	4650      	mov	r0, sl
 800c850:	f7f8 fc77 	bl	8005142 <lwip_htonl>
 800c854:	f246 0308 	movw	r3, #24584	; 0x6008
 800c858:	4602      	mov	r2, r0
 800c85a:	f8cd 9000 	str.w	r9, [sp]
 800c85e:	9302      	str	r3, [sp, #8]
 800c860:	2314      	movs	r3, #20
 800c862:	4638      	mov	r0, r7
 800c864:	2100      	movs	r1, #0
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	4643      	mov	r3, r8
 800c86a:	f7ff fa35 	bl	800bcd8 <tcp_output_alloc_header_common.constprop.3>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c86e:	4607      	mov	r7, r0
 800c870:	b150      	cbz	r0, 800c888 <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c872:	f7ff fa99 	bl	800bda8 <tcp_output_fill_options.isra.0.constprop.4>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c876:	462b      	mov	r3, r5
 800c878:	4622      	mov	r2, r4
 800c87a:	4639      	mov	r1, r7
 800c87c:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c87e:	b004      	add	sp, #16
 800c880:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c884:	f7ff baa0 	b.w	800bdc8 <tcp_output_control_segment>
}
 800c888:	b004      	add	sp, #16
 800c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88e:	bf00      	nop
 800c890:	08011e99 	.word	0x08011e99
 800c894:	08011fe0 	.word	0x08011fe0
 800c898:	0800fff2 	.word	0x0800fff2
 800c89c:	08011ffa 	.word	0x08011ffa

0800c8a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c8a0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	b930      	cbnz	r0, 800c8b4 <tcp_send_empty_ack+0x14>
 800c8a6:	4b14      	ldr	r3, [pc, #80]	; (800c8f8 <tcp_send_empty_ack+0x58>)
 800c8a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c8ac:	4913      	ldr	r1, [pc, #76]	; (800c8fc <tcp_send_empty_ack+0x5c>)
 800c8ae:	4814      	ldr	r0, [pc, #80]	; (800c900 <tcp_send_empty_ack+0x60>)
 800c8b0:	f002 f928 	bl	800eb04 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c8b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c8b6:	f7f8 fc44 	bl	8005142 <lwip_htonl>
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4602      	mov	r2, r0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f7ff fa4c 	bl	800bd5c <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	b930      	cbnz	r0, 800c8d6 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8c8:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c8ca:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8ce:	f043 0303 	orr.w	r3, r3, #3
 800c8d2:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c8d6:	f7ff fa67 	bl	800bda8 <tcp_output_fill_options.isra.0.constprop.4>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8da:	1d23      	adds	r3, r4, #4
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff fa71 	bl	800bdc8 <tcp_output_control_segment>
 800c8e6:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800c8e8:	b118      	cbz	r0, 800c8f2 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8ea:	f043 0303 	orr.w	r3, r3, #3
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8ee:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8f2:	f023 0303 	bic.w	r3, r3, #3
 800c8f6:	e7fa      	b.n	800c8ee <tcp_send_empty_ack+0x4e>
 800c8f8:	08011e99 	.word	0x08011e99
 800c8fc:	08012015 	.word	0x08012015
 800c900:	0800fff2 	.word	0x0800fff2

0800c904 <tcp_output>:
{
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c908:	4604      	mov	r4, r0
{
 800c90a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c90c:	b930      	cbnz	r0, 800c91c <tcp_output+0x18>
 800c90e:	4ba9      	ldr	r3, [pc, #676]	; (800cbb4 <tcp_output+0x2b0>)
 800c910:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c914:	49a8      	ldr	r1, [pc, #672]	; (800cbb8 <tcp_output+0x2b4>)
 800c916:	48a9      	ldr	r0, [pc, #676]	; (800cbbc <tcp_output+0x2b8>)
 800c918:	f002 f8f4 	bl	800eb04 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c91c:	7d23      	ldrb	r3, [r4, #20]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d106      	bne.n	800c930 <tcp_output+0x2c>
 800c922:	4ba4      	ldr	r3, [pc, #656]	; (800cbb4 <tcp_output+0x2b0>)
 800c924:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c928:	49a5      	ldr	r1, [pc, #660]	; (800cbc0 <tcp_output+0x2bc>)
 800c92a:	48a4      	ldr	r0, [pc, #656]	; (800cbbc <tcp_output+0x2b8>)
 800c92c:	f002 f8ea 	bl	800eb04 <iprintf>
  if (tcp_input_pcb == pcb) {
 800c930:	4ba4      	ldr	r3, [pc, #656]	; (800cbc4 <tcp_output+0x2c0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	429c      	cmp	r4, r3
 800c936:	f000 816d 	beq.w	800cc14 <tcp_output+0x310>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c93a:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800c93e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 800c942:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c944:	429f      	cmp	r7, r3
 800c946:	bf28      	it	cs
 800c948:	461f      	movcs	r7, r3
  if (seg == NULL) {
 800c94a:	b94d      	cbnz	r5, 800c960 <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 800c94c:	8b63      	ldrh	r3, [r4, #26]
 800c94e:	0798      	lsls	r0, r3, #30
 800c950:	f140 815c 	bpl.w	800cc0c <tcp_output+0x308>
      return tcp_send_empty_ack(pcb);
 800c954:	4620      	mov	r0, r4
}
 800c956:	b007      	add	sp, #28
 800c958:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800c95c:	f7ff bfa0 	b.w	800c8a0 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c960:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c962:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c966:	b340      	cbz	r0, 800c9ba <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 800c968:	f7fc f8f4 	bl	8008b54 <netif_get_by_index>
    return ip_route(src, dst);
 800c96c:	4680      	mov	r8, r0
  if (netif == NULL) {
 800c96e:	2800      	cmp	r0, #0
 800c970:	f000 8169 	beq.w	800cc46 <tcp_output+0x342>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c974:	b10c      	cbz	r4, 800c97a <tcp_output+0x76>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	b913      	cbnz	r3, 800c980 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c97a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c97e:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c980:	68eb      	ldr	r3, [r5, #12]
 800c982:	6858      	ldr	r0, [r3, #4]
 800c984:	f7f8 fbdd 	bl	8005142 <lwip_htonl>
 800c988:	892b      	ldrh	r3, [r5, #8]
 800c98a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	4418      	add	r0, r3
 800c990:	4287      	cmp	r7, r0
 800c992:	d216      	bcs.n	800c9c2 <tcp_output+0xbe>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c994:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c998:	429f      	cmp	r7, r3
 800c99a:	d1d7      	bne.n	800c94c <tcp_output+0x48>
 800c99c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1d4      	bne.n	800c94c <tcp_output+0x48>
 800c9a2:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1d0      	bne.n	800c94c <tcp_output+0x48>
      pcb->persist_backoff = 1;
 800c9aa:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
 800c9ac:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      pcb->persist_probe = 0;
 800c9b0:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_backoff = 1;
 800c9b4:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 800c9b8:	e7c8      	b.n	800c94c <tcp_output+0x48>
    return ip_route(src, dst);
 800c9ba:	4648      	mov	r0, r9
 800c9bc:	f7fa fe00 	bl	80075c0 <ip4_route>
 800c9c0:	e7d4      	b.n	800c96c <tcp_output+0x68>
  pcb->persist_backoff = 0;
 800c9c2:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800c9c4:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800c9c6:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	f040 80a8 	bne.w	800cb20 <tcp_output+0x21c>
    LWIP_ASSERT("RST not expected here!",
 800c9d0:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 800cbb4 <tcp_output+0x2b0>
 800c9d4:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800cbbc <tcp_output+0x2b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c9d8:	68eb      	ldr	r3, [r5, #12]
 800c9da:	6858      	ldr	r0, [r3, #4]
 800c9dc:	f7f8 fbb1 	bl	8005142 <lwip_htonl>
 800c9e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c9e2:	1ac0      	subs	r0, r0, r3
 800c9e4:	892b      	ldrh	r3, [r5, #8]
 800c9e6:	4418      	add	r0, r3
  while (seg != NULL &&
 800c9e8:	4287      	cmp	r7, r0
 800c9ea:	f0c0 810b 	bcc.w	800cc04 <tcp_output+0x300>
    LWIP_ASSERT("RST not expected here!",
 800c9ee:	68eb      	ldr	r3, [r5, #12]
 800c9f0:	8998      	ldrh	r0, [r3, #12]
 800c9f2:	f7f8 fba3 	bl	800513c <lwip_htons>
 800c9f6:	0741      	lsls	r1, r0, #29
 800c9f8:	d506      	bpl.n	800ca08 <tcp_output+0x104>
 800c9fa:	4653      	mov	r3, sl
 800c9fc:	f240 5237 	movw	r2, #1335	; 0x537
 800ca00:	4971      	ldr	r1, [pc, #452]	; (800cbc8 <tcp_output+0x2c4>)
 800ca02:	4658      	mov	r0, fp
 800ca04:	f002 f87e 	bl	800eb04 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ca0a:	b19b      	cbz	r3, 800ca34 <tcp_output+0x130>
 800ca0c:	8b62      	ldrh	r2, [r4, #26]
 800ca0e:	f012 0f44 	tst.w	r2, #68	; 0x44
 800ca12:	d10f      	bne.n	800ca34 <tcp_output+0x130>
 800ca14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca16:	b12b      	cbz	r3, 800ca24 <tcp_output+0x120>
 800ca18:	6819      	ldr	r1, [r3, #0]
 800ca1a:	b959      	cbnz	r1, 800ca34 <tcp_output+0x130>
 800ca1c:	8919      	ldrh	r1, [r3, #8]
 800ca1e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ca20:	4299      	cmp	r1, r3
 800ca22:	d207      	bcs.n	800ca34 <tcp_output+0x130>
 800ca24:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ca28:	b123      	cbz	r3, 800ca34 <tcp_output+0x130>
 800ca2a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	f240 810c 	bls.w	800cc4c <tcp_output+0x348>
    if (pcb->state != SYN_SENT) {
 800ca34:	7d23      	ldrb	r3, [r4, #20]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d00a      	beq.n	800ca50 <tcp_output+0x14c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ca3a:	68ea      	ldr	r2, [r5, #12]
 800ca3c:	2010      	movs	r0, #16
 800ca3e:	8993      	ldrh	r3, [r2, #12]
 800ca40:	9205      	str	r2, [sp, #20]
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	f7f8 fb7a 	bl	800513c <lwip_htons>
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	9a05      	ldr	r2, [sp, #20]
 800ca4c:	4318      	orrs	r0, r3
 800ca4e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7ff f85b 	bl	800bb0c <tcp_output_segment_busy>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d176      	bne.n	800cb48 <tcp_output+0x244>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca5a:	68eb      	ldr	r3, [r5, #12]
 800ca5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca5e:	9304      	str	r3, [sp, #16]
 800ca60:	f7f8 fb6f 	bl	8005142 <lwip_htonl>
 800ca64:	9b04      	ldr	r3, [sp, #16]
 800ca66:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ca68:	68eb      	ldr	r3, [r5, #12]
 800ca6a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	f7f8 fb65 	bl	800513c <lwip_htons>
 800ca72:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ca76:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca7a:	4413      	add	r3, r2
 800ca7c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ca7e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ca80:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ca82:	07d2      	lsls	r2, r2, #31
 800ca84:	d450      	bmi.n	800cb28 <tcp_output+0x224>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ca86:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800ca8a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800ca8e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800ca90:	bfbc      	itt	lt
 800ca92:	2300      	movlt	r3, #0
 800ca94:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800ca96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca98:	b94b      	cbnz	r3, 800caae <tcp_output+0x1aa>
    pcb->rttest = tcp_ticks;
 800ca9a:	4b4c      	ldr	r3, [pc, #304]	; (800cbcc <tcp_output+0x2c8>)
 800ca9c:	9204      	str	r2, [sp, #16]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800caa2:	68eb      	ldr	r3, [r5, #12]
 800caa4:	6858      	ldr	r0, [r3, #4]
 800caa6:	f7f8 fb4c 	bl	8005142 <lwip_htonl>
 800caaa:	9a04      	ldr	r2, [sp, #16]
 800caac:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800caae:	6869      	ldr	r1, [r5, #4]
 800cab0:	68eb      	ldr	r3, [r5, #12]
 800cab2:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800cab4:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cab8:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800caba:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cabc:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800cabe:	ebae 0e00 	sub.w	lr, lr, r0
 800cac2:	f8a1 e00a 	strh.w	lr, [r1, #10]
  seg->p->tot_len -= len;
 800cac6:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 800caca:	ebae 0000 	sub.w	r0, lr, r0
 800cace:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800cad0:	2100      	movs	r1, #0
 800cad2:	7419      	strb	r1, [r3, #16]
 800cad4:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cad6:	7aa9      	ldrb	r1, [r5, #10]
 800cad8:	f011 0f01 	tst.w	r1, #1
 800cadc:	bf14      	ite	ne
 800cade:	2118      	movne	r1, #24
 800cae0:	2114      	moveq	r1, #20
 800cae2:	440b      	add	r3, r1
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d006      	beq.n	800caf6 <tcp_output+0x1f2>
 800cae8:	4653      	mov	r3, sl
 800caea:	f240 621c 	movw	r2, #1564	; 0x61c
 800caee:	4938      	ldr	r1, [pc, #224]	; (800cbd0 <tcp_output+0x2cc>)
 800caf0:	4658      	mov	r0, fp
 800caf2:	f002 f807 	bl	800eb04 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800caf6:	2206      	movs	r2, #6
 800caf8:	7ae3      	ldrb	r3, [r4, #11]
 800cafa:	f8cd 8008 	str.w	r8, [sp, #8]
 800cafe:	4621      	mov	r1, r4
 800cb00:	9201      	str	r2, [sp, #4]
 800cb02:	7aa2      	ldrb	r2, [r4, #10]
 800cb04:	9200      	str	r2, [sp, #0]
 800cb06:	464a      	mov	r2, r9
 800cb08:	6868      	ldr	r0, [r5, #4]
 800cb0a:	f7fa fec7 	bl	800789c <ip4_output_if>
    if (err != ERR_OK) {
 800cb0e:	b1d8      	cbz	r0, 800cb48 <tcp_output+0x244>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb10:	8b63      	ldrh	r3, [r4, #26]
 800cb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb16:	8363      	strh	r3, [r4, #26]
}
 800cb18:	b007      	add	sp, #28
 800cb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1e:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800cb20:	6833      	ldr	r3, [r6, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1fb      	bne.n	800cb1e <tcp_output+0x21a>
 800cb26:	e753      	b.n	800c9d0 <tcp_output+0xcc>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cb28:	464a      	mov	r2, r9
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	f7fc fe71 	bl	8009818 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cb36:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800cb3a:	f7f8 fb02 	bl	8005142 <lwip_htonl>
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	6158      	str	r0, [r3, #20]
    opts += 1;
 800cb42:	f103 0218 	add.w	r2, r3, #24
 800cb46:	e7a0      	b.n	800ca8a <tcp_output+0x186>
    pcb->unsent = seg->next;
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cb4c:	7d23      	ldrb	r3, [r4, #20]
 800cb4e:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb50:	bf1e      	ittt	ne
 800cb52:	8b63      	ldrhne	r3, [r4, #26]
 800cb54:	f023 0303 	bicne.w	r3, r3, #3
 800cb58:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb5a:	68eb      	ldr	r3, [r5, #12]
 800cb5c:	6858      	ldr	r0, [r3, #4]
 800cb5e:	f7f8 faf0 	bl	8005142 <lwip_htonl>
 800cb62:	892a      	ldrh	r2, [r5, #8]
 800cb64:	68e9      	ldr	r1, [r5, #12]
 800cb66:	9204      	str	r2, [sp, #16]
 800cb68:	9005      	str	r0, [sp, #20]
 800cb6a:	8988      	ldrh	r0, [r1, #12]
 800cb6c:	f7f8 fae6 	bl	800513c <lwip_htons>
 800cb70:	9a04      	ldr	r2, [sp, #16]
 800cb72:	f010 0003 	ands.w	r0, r0, #3
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	bf18      	it	ne
 800cb7a:	2001      	movne	r0, #1
 800cb7c:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800cb7e:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb80:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb84:	1a1b      	subs	r3, r3, r0
 800cb86:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800cb88:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800cb8a:	bfb8      	it	lt
 800cb8c:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800cb8e:	9304      	str	r3, [sp, #16]
 800cb90:	8990      	ldrh	r0, [r2, #12]
 800cb92:	f7f8 fad3 	bl	800513c <lwip_htons>
 800cb96:	f010 0003 	ands.w	r0, r0, #3
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	bf18      	it	ne
 800cb9e:	2001      	movne	r0, #1
 800cba0:	42d8      	cmn	r0, r3
 800cba2:	d04c      	beq.n	800cc3e <tcp_output+0x33a>
      seg->next = NULL;
 800cba4:	2300      	movs	r3, #0
 800cba6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800cba8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cbaa:	b99b      	cbnz	r3, 800cbd4 <tcp_output+0x2d0>
        pcb->unacked = seg;
 800cbac:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800cbae:	462e      	mov	r6, r5
 800cbb0:	e024      	b.n	800cbfc <tcp_output+0x2f8>
 800cbb2:	bf00      	nop
 800cbb4:	08011e99 	.word	0x08011e99
 800cbb8:	08011d8f 	.word	0x08011d8f
 800cbbc:	0800fff2 	.word	0x0800fff2
 800cbc0:	08011da7 	.word	0x08011da7
 800cbc4:	2000bef0 	.word	0x2000bef0
 800cbc8:	08011dcd 	.word	0x08011dcd
 800cbcc:	2000bee0 	.word	0x2000bee0
 800cbd0:	08011de4 	.word	0x08011de4
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cbd4:	68eb      	ldr	r3, [r5, #12]
 800cbd6:	6858      	ldr	r0, [r3, #4]
 800cbd8:	f7f8 fab3 	bl	8005142 <lwip_htonl>
 800cbdc:	68f2      	ldr	r2, [r6, #12]
 800cbde:	9004      	str	r0, [sp, #16]
 800cbe0:	6850      	ldr	r0, [r2, #4]
 800cbe2:	f7f8 faae 	bl	8005142 <lwip_htonl>
 800cbe6:	9b04      	ldr	r3, [sp, #16]
 800cbe8:	1a18      	subs	r0, r3, r0
 800cbea:	2800      	cmp	r0, #0
 800cbec:	da25      	bge.n	800cc3a <tcp_output+0x336>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cbee:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	b982      	cbnz	r2, 800cc18 <tcp_output+0x314>
          seg->next = (*cur_seg);
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800cbfa:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800cbfc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	f47f aeea 	bne.w	800c9d8 <tcp_output+0xd4>
  if (pcb->unsent == NULL) {
 800cc04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cc06:	b90b      	cbnz	r3, 800cc0c <tcp_output+0x308>
    pcb->unsent_oversize = 0;
 800cc08:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cc0c:	8b63      	ldrh	r3, [r4, #26]
 800cc0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc12:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800cc14:	2000      	movs	r0, #0
 800cc16:	e77f      	b.n	800cb18 <tcp_output+0x214>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc18:	68d2      	ldr	r2, [r2, #12]
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	6850      	ldr	r0, [r2, #4]
 800cc1e:	f7f8 fa90 	bl	8005142 <lwip_htonl>
 800cc22:	68e9      	ldr	r1, [r5, #12]
 800cc24:	9004      	str	r0, [sp, #16]
 800cc26:	6848      	ldr	r0, [r1, #4]
 800cc28:	f7f8 fa8b 	bl	8005142 <lwip_htonl>
 800cc2c:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800cc2e:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc30:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800cc32:	2800      	cmp	r0, #0
 800cc34:	dadf      	bge.n	800cbf6 <tcp_output+0x2f2>
            cur_seg = &((*cur_seg)->next );
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	e7db      	b.n	800cbf2 <tcp_output+0x2ee>
          useg->next = seg;
 800cc3a:	6035      	str	r5, [r6, #0]
 800cc3c:	e7b7      	b.n	800cbae <tcp_output+0x2aa>
      tcp_seg_free(seg);
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f7fc fd26 	bl	8009690 <tcp_seg_free>
 800cc44:	e7da      	b.n	800cbfc <tcp_output+0x2f8>
    return ERR_RTE;
 800cc46:	f06f 0003 	mvn.w	r0, #3
 800cc4a:	e765      	b.n	800cb18 <tcp_output+0x214>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cc4c:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800cc50:	f47f aef0 	bne.w	800ca34 <tcp_output+0x130>
 800cc54:	e7d6      	b.n	800cc04 <tcp_output+0x300>
 800cc56:	bf00      	nop

0800cc58 <tcp_rexmit_rto_commit>:
{
 800cc58:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	b930      	cbnz	r0, 800cc6c <tcp_rexmit_rto_commit+0x14>
 800cc5e:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <tcp_rexmit_rto_commit+0x2c>)
 800cc60:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cc64:	4908      	ldr	r1, [pc, #32]	; (800cc88 <tcp_rexmit_rto_commit+0x30>)
 800cc66:	4809      	ldr	r0, [pc, #36]	; (800cc8c <tcp_rexmit_rto_commit+0x34>)
 800cc68:	f001 ff4c 	bl	800eb04 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800cc6c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800cc70:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800cc72:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800cc74:	bf1c      	itt	ne
 800cc76:	3301      	addne	r3, #1
 800cc78:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800cc80:	f7ff be40 	b.w	800c904 <tcp_output>
 800cc84:	08011e99 	.word	0x08011e99
 800cc88:	08011f99 	.word	0x08011f99
 800cc8c:	0800fff2 	.word	0x0800fff2

0800cc90 <tcp_rexmit_rto>:
{
 800cc90:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cc92:	4604      	mov	r4, r0
 800cc94:	b930      	cbnz	r0, 800cca4 <tcp_rexmit_rto+0x14>
 800cc96:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <tcp_rexmit_rto+0x28>)
 800cc98:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cc9c:	4907      	ldr	r1, [pc, #28]	; (800ccbc <tcp_rexmit_rto+0x2c>)
 800cc9e:	4808      	ldr	r0, [pc, #32]	; (800ccc0 <tcp_rexmit_rto+0x30>)
 800cca0:	f001 ff30 	bl	800eb04 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7ff fcfb 	bl	800c6a0 <tcp_rexmit_rto_prepare>
 800ccaa:	b920      	cbnz	r0, 800ccb6 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800ccac:	4620      	mov	r0, r4
}
 800ccae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800ccb2:	f7ff bfd1 	b.w	800cc58 <tcp_rexmit_rto_commit>
 800ccb6:	bd10      	pop	{r4, pc}
 800ccb8:	08011e99 	.word	0x08011e99
 800ccbc:	08011f7d 	.word	0x08011f7d
 800ccc0:	0800fff2 	.word	0x0800fff2

0800ccc4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ccc4:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	b930      	cbnz	r0, 800ccd8 <tcp_keepalive+0x14>
 800ccca:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <tcp_keepalive+0x44>)
 800cccc:	f640 0224 	movw	r2, #2084	; 0x824
 800ccd0:	490e      	ldr	r1, [pc, #56]	; (800cd0c <tcp_keepalive+0x48>)
 800ccd2:	480f      	ldr	r0, [pc, #60]	; (800cd10 <tcp_keepalive+0x4c>)
 800ccd4:	f001 ff16 	bl	800eb04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ccd8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ccda:	3801      	subs	r0, #1
 800ccdc:	f7f8 fa31 	bl	8005142 <lwip_htonl>
 800cce0:	2100      	movs	r1, #0
 800cce2:	4602      	mov	r2, r0
 800cce4:	4620      	mov	r0, r4
 800cce6:	f7ff f839 	bl	800bd5c <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800ccea:	4605      	mov	r5, r0
 800ccec:	b148      	cbz	r0, 800cd02 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ccee:	f7ff f85b 	bl	800bda8 <tcp_output_fill_options.isra.0.constprop.4>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ccf2:	1d23      	adds	r3, r4, #4
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ccfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ccfe:	f7ff b863 	b.w	800bdc8 <tcp_output_control_segment>
}
 800cd02:	f04f 30ff 	mov.w	r0, #4294967295
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	08011e99 	.word	0x08011e99
 800cd0c:	08011d74 	.word	0x08011d74
 800cd10:	0800fff2 	.word	0x0800fff2

0800cd14 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cd18:	4605      	mov	r5, r0
 800cd1a:	b930      	cbnz	r0, 800cd2a <tcp_zero_window_probe+0x16>
 800cd1c:	4b2c      	ldr	r3, [pc, #176]	; (800cdd0 <tcp_zero_window_probe+0xbc>)
 800cd1e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cd22:	492c      	ldr	r1, [pc, #176]	; (800cdd4 <tcp_zero_window_probe+0xc0>)
 800cd24:	482c      	ldr	r0, [pc, #176]	; (800cdd8 <tcp_zero_window_probe+0xc4>)
 800cd26:	f001 feed 	bl	800eb04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cd2a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800cd2c:	2c00      	cmp	r4, #0
 800cd2e:	d048      	beq.n	800cdc2 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cd30:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
 800cd34:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800cd36:	bf1c      	itt	ne
 800cd38:	3301      	addne	r3, #1
 800cd3a:	f885 309a 	strbne.w	r3, [r5, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cd3e:	68e3      	ldr	r3, [r4, #12]
 800cd40:	8998      	ldrh	r0, [r3, #12]
 800cd42:	f7f8 f9fb 	bl	800513c <lwip_htons>
 800cd46:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd4a:	68e3      	ldr	r3, [r4, #12]
 800cd4c:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cd4e:	bf18      	it	ne
 800cd50:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd52:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cd54:	bf1c      	itt	ne
 800cd56:	fab6 f686 	clzne	r6, r6
 800cd5a:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd5c:	f086 0101 	eor.w	r1, r6, #1
 800cd60:	f7fe fffc 	bl	800bd5c <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800cd64:	4607      	mov	r7, r0
 800cd66:	b378      	cbz	r0, 800cdc8 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cd68:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800cd6c:	b1f6      	cbz	r6, 800cdac <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd6e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 800cd72:	2011      	movs	r0, #17
 800cd74:	f7f8 f9e2 	bl	800513c <lwip_htons>
 800cd78:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800cd7c:	4330      	orrs	r0, r6
 800cd7e:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd82:	68e3      	ldr	r3, [r4, #12]
 800cd84:	6858      	ldr	r0, [r3, #4]
 800cd86:	f7f8 f9dc 	bl	8005142 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd8a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd8c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd8e:	1a1b      	subs	r3, r3, r0
 800cd90:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800cd92:	bfb8      	it	lt
 800cd94:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7ff f806 	bl	800bda8 <tcp_output_fill_options.isra.0.constprop.4>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd9c:	1d2b      	adds	r3, r5, #4
 800cd9e:	462a      	mov	r2, r5
 800cda0:	4639      	mov	r1, r7
 800cda2:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cda8:	f7ff b80e 	b.w	800bdc8 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cdac:	6860      	ldr	r0, [r4, #4]
 800cdae:	f108 0114 	add.w	r1, r8, #20
 800cdb2:	8922      	ldrh	r2, [r4, #8]
 800cdb4:	8903      	ldrh	r3, [r0, #8]
 800cdb6:	1a9b      	subs	r3, r3, r2
 800cdb8:	2201      	movs	r2, #1
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	f7fc fa02 	bl	80091c4 <pbuf_copy_partial>
 800cdc0:	e7df      	b.n	800cd82 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd0:	08011e99 	.word	0x08011e99
 800cdd4:	080122f7 	.word	0x080122f7
 800cdd8:	0800fff2 	.word	0x0800fff2

0800cddc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cde0:	200a      	movs	r0, #10
{
 800cde2:	460e      	mov	r6, r1
 800cde4:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cde6:	f7fb fd1f 	bl	8008828 <memp_malloc>
  if (timeout == NULL) {
 800cdea:	b938      	cbnz	r0, 800cdfc <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <sys_timeout_abs+0x54>)
 800cdee:	22be      	movs	r2, #190	; 0xbe
 800cdf0:	4910      	ldr	r1, [pc, #64]	; (800ce34 <sys_timeout_abs+0x58>)
 800cdf2:	4811      	ldr	r0, [pc, #68]	; (800ce38 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800cdf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cdf8:	f001 be84 	b.w	800eb04 <iprintf>
  timeout->next = NULL;
 800cdfc:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800cdfe:	4a0f      	ldr	r2, [pc, #60]	; (800ce3c <sys_timeout_abs+0x60>)
  timeout->h = handler;
 800ce00:	6086      	str	r6, [r0, #8]
  timeout->next = NULL;
 800ce02:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800ce04:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800ce06:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800ce08:	6044      	str	r4, [r0, #4]
  if (next_timeout == NULL) {
 800ce0a:	b90b      	cbnz	r3, 800ce10 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800ce0c:	6010      	str	r0, [r2, #0]
 800ce0e:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ce10:	6859      	ldr	r1, [r3, #4]
 800ce12:	1a61      	subs	r1, r4, r1
 800ce14:	2900      	cmp	r1, #0
 800ce16:	da02      	bge.n	800ce1e <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 800ce18:	6003      	str	r3, [r0, #0]
 800ce1a:	e7f7      	b.n	800ce0c <sys_timeout_abs+0x30>
 800ce1c:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	b11a      	cbz	r2, 800ce2a <sys_timeout_abs+0x4e>
 800ce22:	6851      	ldr	r1, [r2, #4]
 800ce24:	1a61      	subs	r1, r4, r1
 800ce26:	2900      	cmp	r1, #0
 800ce28:	daf8      	bge.n	800ce1c <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800ce2a:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800ce2c:	6018      	str	r0, [r3, #0]
        break;
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}
 800ce30:	08012382 	.word	0x08012382
 800ce34:	080123b6 	.word	0x080123b6
 800ce38:	0800fff2 	.word	0x0800fff2
 800ce3c:	20006d8c 	.word	0x20006d8c

0800ce40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ce40:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ce42:	6843      	ldr	r3, [r0, #4]
{
 800ce44:	4604      	mov	r4, r0
  cyclic->handler();
 800ce46:	4798      	blx	r3

  now = sys_now();
 800ce48:	f000 fece 	bl	800dbe8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ce4c:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <lwip_cyclic_timer+0x2c>)
 800ce4e:	6825      	ldr	r5, [r4, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ce52:	4907      	ldr	r1, [pc, #28]	; (800ce70 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ce54:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ce56:	1a1a      	subs	r2, r3, r0
 800ce58:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	bfb4      	ite	lt
 800ce5e:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ce60:	4618      	movge	r0, r3
#endif
  }
}
 800ce62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ce66:	f7ff bfb9 	b.w	800cddc <sys_timeout_abs>
 800ce6a:	bf00      	nop
 800ce6c:	20006d88 	.word	0x20006d88
 800ce70:	0800ce41 	.word	0x0800ce41

0800ce74 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ce74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ce80:	d306      	bcc.n	800ce90 <sys_timeout+0x1c>
 800ce82:	4b08      	ldr	r3, [pc, #32]	; (800cea4 <sys_timeout+0x30>)
 800ce84:	f240 1229 	movw	r2, #297	; 0x129
 800ce88:	4907      	ldr	r1, [pc, #28]	; (800cea8 <sys_timeout+0x34>)
 800ce8a:	4808      	ldr	r0, [pc, #32]	; (800ceac <sys_timeout+0x38>)
 800ce8c:	f001 fe3a 	bl	800eb04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ce90:	f000 feaa 	bl	800dbe8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ce94:	4632      	mov	r2, r6
 800ce96:	4629      	mov	r1, r5
 800ce98:	4420      	add	r0, r4
#endif
}
 800ce9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ce9e:	f7ff bf9d 	b.w	800cddc <sys_timeout_abs>
 800cea2:	bf00      	nop
 800cea4:	08012382 	.word	0x08012382
 800cea8:	0801234c 	.word	0x0801234c
 800ceac:	0800fff2 	.word	0x0800fff2

0800ceb0 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ceb0:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <tcp_timer_needed+0x24>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	b962      	cbnz	r2, 800ced0 <tcp_timer_needed+0x20>
 800ceb6:	4a08      	ldr	r2, [pc, #32]	; (800ced8 <tcp_timer_needed+0x28>)
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	b912      	cbnz	r2, 800cec2 <tcp_timer_needed+0x12>
 800cebc:	4a07      	ldr	r2, [pc, #28]	; (800cedc <tcp_timer_needed+0x2c>)
 800cebe:	6812      	ldr	r2, [r2, #0]
 800cec0:	b132      	cbz	r2, 800ced0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800cec2:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cec4:	4906      	ldr	r1, [pc, #24]	; (800cee0 <tcp_timer_needed+0x30>)
 800cec6:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800cec8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ceca:	2200      	movs	r2, #0
 800cecc:	f7ff bfd2 	b.w	800ce74 <sys_timeout>
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	20006d90 	.word	0x20006d90
 800ced8:	2000bedc 	.word	0x2000bedc
 800cedc:	2000beec 	.word	0x2000beec
 800cee0:	0800cee5 	.word	0x0800cee5

0800cee4 <tcpip_tcp_timer>:
{
 800cee4:	b508      	push	{r3, lr}
  tcp_tmr();
 800cee6:	f7fd fb25 	bl	800a534 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ceea:	4b08      	ldr	r3, [pc, #32]	; (800cf0c <tcpip_tcp_timer+0x28>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	b913      	cbnz	r3, 800cef6 <tcpip_tcp_timer+0x12>
 800cef0:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <tcpip_tcp_timer+0x2c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	b133      	cbz	r3, 800cf04 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cef6:	2200      	movs	r2, #0
 800cef8:	4906      	ldr	r1, [pc, #24]	; (800cf14 <tcpip_tcp_timer+0x30>)
 800cefa:	20fa      	movs	r0, #250	; 0xfa
}
 800cefc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf00:	f7ff bfb8 	b.w	800ce74 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800cf04:	4a04      	ldr	r2, [pc, #16]	; (800cf18 <tcpip_tcp_timer+0x34>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	bd08      	pop	{r3, pc}
 800cf0a:	bf00      	nop
 800cf0c:	2000bedc 	.word	0x2000bedc
 800cf10:	2000beec 	.word	0x2000beec
 800cf14:	0800cee5 	.word	0x0800cee5
 800cf18:	20006d90 	.word	0x20006d90

0800cf1c <sys_timeouts_init>:
{
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	2408      	movs	r4, #8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cf20:	4d05      	ldr	r5, [pc, #20]	; (800cf38 <sys_timeouts_init+0x1c>)
 800cf22:	4e06      	ldr	r6, [pc, #24]	; (800cf3c <sys_timeouts_init+0x20>)
 800cf24:	192a      	adds	r2, r5, r4
 800cf26:	5960      	ldr	r0, [r4, r5]
 800cf28:	3408      	adds	r4, #8
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	f7ff ffa2 	bl	800ce74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf30:	2c30      	cmp	r4, #48	; 0x30
 800cf32:	d1f7      	bne.n	800cf24 <sys_timeouts_init+0x8>
}
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	bf00      	nop
 800cf38:	0801231c 	.word	0x0801231c
 800cf3c:	0800ce41 	.word	0x0800ce41

0800cf40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cf44:	f000 fe50 	bl	800dbe8 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cf48:	4d0c      	ldr	r5, [pc, #48]	; (800cf7c <sys_check_timeouts+0x3c>)
  now = sys_now();
 800cf4a:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800cf4c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800cf80 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800cf50:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800cf52:	b189      	cbz	r1, 800cf78 <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cf54:	684b      	ldr	r3, [r1, #4]
 800cf56:	1afa      	subs	r2, r7, r3
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	db0d      	blt.n	800cf78 <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 800cf5c:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf5e:	200a      	movs	r0, #10
    handler = tmptimeout->h;
 800cf60:	688c      	ldr	r4, [r1, #8]
    next_timeout = tmptimeout->next;
 800cf62:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800cf64:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800cf66:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf6a:	f7fb fc79 	bl	8008860 <memp_free>
    if (handler != NULL) {
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d0ee      	beq.n	800cf50 <sys_check_timeouts+0x10>
      handler(arg);
 800cf72:	4630      	mov	r0, r6
 800cf74:	47a0      	blx	r4
 800cf76:	e7eb      	b.n	800cf50 <sys_check_timeouts+0x10>
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	20006d8c 	.word	0x20006d8c
 800cf80:	20006d88 	.word	0x20006d88

0800cf84 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cf84:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cf86:	4c07      	ldr	r4, [pc, #28]	; (800cfa4 <sys_timeouts_sleeptime+0x20>)
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	b13b      	cbz	r3, 800cf9c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800cf8c:	f000 fe2c 	bl	800dbe8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	1a18      	subs	r0, r3, r0
    return 0;
 800cf96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cf9a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cf9c:	f04f 30ff 	mov.w	r0, #4294967295
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800cfa0:	bd10      	pop	{r4, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20006d8c 	.word	0x20006d8c

0800cfa8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cfa8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cfaa:	f001 fdc3 	bl	800eb34 <rand>
 800cfae:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cfb2:	4b02      	ldr	r3, [pc, #8]	; (800cfbc <udp_init+0x14>)
 800cfb4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cfb8:	8018      	strh	r0, [r3, #0]
 800cfba:	bd08      	pop	{r3, pc}
 800cfbc:	20000012 	.word	0x20000012

0800cfc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	4688      	mov	r8, r1
 800cfc6:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cfc8:	4607      	mov	r7, r0
 800cfca:	b928      	cbnz	r0, 800cfd8 <udp_input+0x18>
 800cfcc:	4b5d      	ldr	r3, [pc, #372]	; (800d144 <udp_input+0x184>)
 800cfce:	22cf      	movs	r2, #207	; 0xcf
 800cfd0:	495d      	ldr	r1, [pc, #372]	; (800d148 <udp_input+0x188>)
 800cfd2:	485e      	ldr	r0, [pc, #376]	; (800d14c <udp_input+0x18c>)
 800cfd4:	f001 fd96 	bl	800eb04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cfd8:	f1b8 0f00 	cmp.w	r8, #0
 800cfdc:	d105      	bne.n	800cfea <udp_input+0x2a>
 800cfde:	4b59      	ldr	r3, [pc, #356]	; (800d144 <udp_input+0x184>)
 800cfe0:	22d0      	movs	r2, #208	; 0xd0
 800cfe2:	495b      	ldr	r1, [pc, #364]	; (800d150 <udp_input+0x190>)
 800cfe4:	4859      	ldr	r0, [pc, #356]	; (800d14c <udp_input+0x18c>)
 800cfe6:	f001 fd8d 	bl	800eb04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cfea:	897b      	ldrh	r3, [r7, #10]
 800cfec:	2b07      	cmp	r3, #7
 800cfee:	d805      	bhi.n	800cffc <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cff0:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cff2:	b005      	add	sp, #20
 800cff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800cff8:	f7fb be88 	b.w	8008d0c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cffc:	4e55      	ldr	r6, [pc, #340]	; (800d154 <udp_input+0x194>)
  uncon_pcb = NULL;
 800cffe:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800d000:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d002:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800d004:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d006:	6970      	ldr	r0, [r6, #20]
 800d008:	f7fa fc59 	bl	80078be <ip4_addr_isbroadcast_u32>
 800d00c:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 800d00e:	8820      	ldrh	r0, [r4, #0]
 800d010:	f7f8 f894 	bl	800513c <lwip_htons>
 800d014:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800d016:	8860      	ldrh	r0, [r4, #2]
 800d018:	f7f8 f890 	bl	800513c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d01c:	4b4e      	ldr	r3, [pc, #312]	; (800d158 <udp_input+0x198>)
  dest = lwip_ntohs(udphdr->dest);
 800d01e:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d020:	681c      	ldr	r4, [r3, #0]
 800d022:	4699      	mov	r9, r3
 800d024:	b93c      	cbnz	r4, 800d036 <udp_input+0x76>
  if (pcb != NULL) {
 800d026:	2d00      	cmp	r5, #0
 800d028:	d144      	bne.n	800d0b4 <udp_input+0xf4>
  if (for_us) {
 800d02a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d02e:	6973      	ldr	r3, [r6, #20]
 800d030:	429a      	cmp	r2, r3
 800d032:	d1dd      	bne.n	800cff0 <udp_input+0x30>
 800d034:	e03e      	b.n	800d0b4 <udp_input+0xf4>
    if ((pcb->local_port == dest) &&
 800d036:	8a63      	ldrh	r3, [r4, #18]
 800d038:	9a03      	ldr	r2, [sp, #12]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d14c      	bne.n	800d0d8 <udp_input+0x118>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d03e:	f1b8 0f00 	cmp.w	r8, #0
 800d042:	d105      	bne.n	800d050 <udp_input+0x90>
 800d044:	4b3f      	ldr	r3, [pc, #252]	; (800d144 <udp_input+0x184>)
 800d046:	2288      	movs	r2, #136	; 0x88
 800d048:	4944      	ldr	r1, [pc, #272]	; (800d15c <udp_input+0x19c>)
 800d04a:	4840      	ldr	r0, [pc, #256]	; (800d14c <udp_input+0x18c>)
 800d04c:	f001 fd5a 	bl	800eb04 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d050:	7a22      	ldrb	r2, [r4, #8]
 800d052:	b132      	cbz	r2, 800d062 <udp_input+0xa2>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d054:	6873      	ldr	r3, [r6, #4]
 800d056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d05a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	429a      	cmp	r2, r3
 800d060:	d13a      	bne.n	800d0d8 <udp_input+0x118>
 800d062:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800d064:	f1ba 0f00 	cmp.w	sl, #0
 800d068:	d031      	beq.n	800d0ce <udp_input+0x10e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d06a:	b13b      	cbz	r3, 800d07c <udp_input+0xbc>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d06c:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d06e:	1c51      	adds	r1, r2, #1
 800d070:	d004      	beq.n	800d07c <udp_input+0xbc>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d072:	405a      	eors	r2, r3
 800d074:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d078:	420a      	tst	r2, r1
 800d07a:	d12d      	bne.n	800d0d8 <udp_input+0x118>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d07c:	7c22      	ldrb	r2, [r4, #16]
 800d07e:	0752      	lsls	r2, r2, #29
 800d080:	d40e      	bmi.n	800d0a0 <udp_input+0xe0>
        if (uncon_pcb == NULL) {
 800d082:	b365      	cbz	r5, 800d0de <udp_input+0x11e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d084:	f1ba 0f00 	cmp.w	sl, #0
 800d088:	d00a      	beq.n	800d0a0 <udp_input+0xe0>
 800d08a:	6972      	ldr	r2, [r6, #20]
 800d08c:	3201      	adds	r2, #1
 800d08e:	d107      	bne.n	800d0a0 <udp_input+0xe0>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d090:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d094:	6829      	ldr	r1, [r5, #0]
 800d096:	4291      	cmp	r1, r2
 800d098:	d002      	beq.n	800d0a0 <udp_input+0xe0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d09a:	429a      	cmp	r2, r3
 800d09c:	bf08      	it	eq
 800d09e:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800d0a0:	8aa3      	ldrh	r3, [r4, #20]
 800d0a2:	9a02      	ldr	r2, [sp, #8]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d117      	bne.n	800d0d8 <udp_input+0x118>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0a8:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d0aa:	b9d3      	cbnz	r3, 800d0e2 <udp_input+0x122>
        if (prev != NULL) {
 800d0ac:	f1bb 0f00 	cmp.w	fp, #0
 800d0b0:	d11b      	bne.n	800d0ea <udp_input+0x12a>
 800d0b2:	4625      	mov	r5, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d0b4:	2108      	movs	r1, #8
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	f7fb fdf4 	bl	8008ca4 <pbuf_remove_header>
 800d0bc:	b1f0      	cbz	r0, 800d0fc <udp_input+0x13c>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d0be:	4b21      	ldr	r3, [pc, #132]	; (800d144 <udp_input+0x184>)
 800d0c0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d0c4:	4926      	ldr	r1, [pc, #152]	; (800d160 <udp_input+0x1a0>)
 800d0c6:	4821      	ldr	r0, [pc, #132]	; (800d14c <udp_input+0x18c>)
 800d0c8:	f001 fd1c 	bl	800eb04 <iprintf>
 800d0cc:	e790      	b.n	800cff0 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0d4      	beq.n	800d07c <udp_input+0xbc>
 800d0d2:	6972      	ldr	r2, [r6, #20]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d0d1      	beq.n	800d07c <udp_input+0xbc>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0d8:	46a3      	mov	fp, r4
 800d0da:	68e4      	ldr	r4, [r4, #12]
 800d0dc:	e7a2      	b.n	800d024 <udp_input+0x64>
 800d0de:	4625      	mov	r5, r4
 800d0e0:	e7de      	b.n	800d0a0 <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0e2:	6932      	ldr	r2, [r6, #16]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d1f7      	bne.n	800d0d8 <udp_input+0x118>
 800d0e8:	e7e0      	b.n	800d0ac <udp_input+0xec>
          prev->next = pcb->next;
 800d0ea:	68e3      	ldr	r3, [r4, #12]
 800d0ec:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800d0f0:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 800d0f4:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 800d0f8:	60e3      	str	r3, [r4, #12]
 800d0fa:	e7da      	b.n	800d0b2 <udp_input+0xf2>
    if (pcb != NULL) {
 800d0fc:	b16d      	cbz	r5, 800d11a <udp_input+0x15a>
      if (pcb->recv != NULL) {
 800d0fe:	69ac      	ldr	r4, [r5, #24]
 800d100:	2c00      	cmp	r4, #0
 800d102:	f43f af75 	beq.w	800cff0 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	463a      	mov	r2, r7
 800d10a:	4629      	mov	r1, r5
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	4b15      	ldr	r3, [pc, #84]	; (800d164 <udp_input+0x1a4>)
 800d110:	69e8      	ldr	r0, [r5, #28]
 800d112:	47a0      	blx	r4
}
 800d114:	b005      	add	sp, #20
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d11a:	f1ba 0f00 	cmp.w	sl, #0
 800d11e:	f47f af67 	bne.w	800cff0 <udp_input+0x30>
 800d122:	6973      	ldr	r3, [r6, #20]
 800d124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d128:	2be0      	cmp	r3, #224	; 0xe0
 800d12a:	f43f af61 	beq.w	800cff0 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d12e:	89b1      	ldrh	r1, [r6, #12]
 800d130:	4638      	mov	r0, r7
 800d132:	3108      	adds	r1, #8
 800d134:	b209      	sxth	r1, r1
 800d136:	f7fb fde1 	bl	8008cfc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d13a:	2103      	movs	r1, #3
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7fa fa1b 	bl	8007578 <icmp_dest_unreach>
 800d142:	e755      	b.n	800cff0 <udp_input+0x30>
 800d144:	0801243e 	.word	0x0801243e
 800d148:	0801246d 	.word	0x0801246d
 800d14c:	0800fff2 	.word	0x0800fff2
 800d150:	08012485 	.word	0x08012485
 800d154:	20007084 	.word	0x20007084
 800d158:	2000bef4 	.word	0x2000bef4
 800d15c:	0801249e 	.word	0x0801249e
 800d160:	080124c3 	.word	0x080124c3
 800d164:	20007094 	.word	0x20007094

0800d168 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d168:	4b2c      	ldr	r3, [pc, #176]	; (800d21c <udp_bind+0xb4>)
{
 800d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800d16e:	2900      	cmp	r1, #0
 800d170:	bf08      	it	eq
 800d172:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d174:	b950      	cbnz	r0, 800d18c <udp_bind+0x24>
 800d176:	4b2a      	ldr	r3, [pc, #168]	; (800d220 <udp_bind+0xb8>)
 800d178:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d17c:	4929      	ldr	r1, [pc, #164]	; (800d224 <udp_bind+0xbc>)
 800d17e:	482a      	ldr	r0, [pc, #168]	; (800d228 <udp_bind+0xc0>)
 800d180:	f001 fcc0 	bl	800eb04 <iprintf>
 800d184:	f06f 000f 	mvn.w	r0, #15
 800d188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d18c:	4e27      	ldr	r6, [pc, #156]	; (800d22c <udp_bind+0xc4>)
 800d18e:	6837      	ldr	r7, [r6, #0]
 800d190:	463d      	mov	r5, r7
 800d192:	b99d      	cbnz	r5, 800d1bc <udp_bind+0x54>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d194:	b1c2      	cbz	r2, 800d1c8 <udp_bind+0x60>
 800d196:	463b      	mov	r3, r7
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d198:	b33b      	cbz	r3, 800d1ea <udp_bind+0x82>
      if (pcb != ipcb) {
 800d19a:	4283      	cmp	r3, r0
 800d19c:	d00c      	beq.n	800d1b8 <udp_bind+0x50>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d19e:	8a5c      	ldrh	r4, [r3, #18]
 800d1a0:	4294      	cmp	r4, r2
 800d1a2:	d109      	bne.n	800d1b8 <udp_bind+0x50>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1a4:	681c      	ldr	r4, [r3, #0]
 800d1a6:	f8d1 e000 	ldr.w	lr, [r1]
          if ((ipcb->local_port == port) &&
 800d1aa:	4574      	cmp	r4, lr
 800d1ac:	d02f      	beq.n	800d20e <udp_bind+0xa6>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1ae:	f1be 0f00 	cmp.w	lr, #0
 800d1b2:	d02c      	beq.n	800d20e <udp_bind+0xa6>
 800d1b4:	b35b      	cbz	r3, 800d20e <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 800d1b6:	b354      	cbz	r4, 800d20e <udp_bind+0xa6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	e7ed      	b.n	800d198 <udp_bind+0x30>
    if (pcb == ipcb) {
 800d1bc:	4285      	cmp	r5, r0
 800d1be:	d001      	beq.n	800d1c4 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1c0:	68ed      	ldr	r5, [r5, #12]
 800d1c2:	e7e6      	b.n	800d192 <udp_bind+0x2a>
      rebind = 1;
 800d1c4:	2501      	movs	r5, #1
 800d1c6:	e7e5      	b.n	800d194 <udp_bind+0x2c>
 800d1c8:	4b19      	ldr	r3, [pc, #100]	; (800d230 <udp_bind+0xc8>)
  if (port == 0) {
 800d1ca:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d1ce:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800d1d2:	881a      	ldrh	r2, [r3, #0]
 800d1d4:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1d6:	46be      	mov	lr, r7
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d1d8:	bf16      	itet	ne
 800d1da:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d1dc:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d1e0:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1e2:	f1be 0f00 	cmp.w	lr, #0
 800d1e6:	d109      	bne.n	800d1fc <udp_bind+0x94>
 800d1e8:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1ea:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800d1ec:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1ee:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d1f0:	b90d      	cbnz	r5, 800d1f6 <udp_bind+0x8e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d1f2:	60c7      	str	r7, [r0, #12]
    udp_pcbs = pcb;
 800d1f4:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d1f6:	2000      	movs	r0, #0
}
 800d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800d1fc:	f8be 8012 	ldrh.w	r8, [lr, #18]
 800d200:	4590      	cmp	r8, r2
 800d202:	d108      	bne.n	800d216 <udp_bind+0xae>
 800d204:	3c01      	subs	r4, #1
 800d206:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d208:	2c00      	cmp	r4, #0
 800d20a:	d1e3      	bne.n	800d1d4 <udp_bind+0x6c>
 800d20c:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800d20e:	f06f 0007 	mvn.w	r0, #7
 800d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d216:	f8de e00c 	ldr.w	lr, [lr, #12]
 800d21a:	e7e2      	b.n	800d1e2 <udp_bind+0x7a>
 800d21c:	080108a4 	.word	0x080108a4
 800d220:	0801243e 	.word	0x0801243e
 800d224:	080123f3 	.word	0x080123f3
 800d228:	0800fff2 	.word	0x0800fff2
 800d22c:	2000bef4 	.word	0x2000bef4
 800d230:	20000012 	.word	0x20000012

0800d234 <udp_sendto_if_src>:
{
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	b085      	sub	sp, #20
 800d23a:	460e      	mov	r6, r1
 800d23c:	4691      	mov	r9, r2
 800d23e:	469b      	mov	fp, r3
 800d240:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d244:	4607      	mov	r7, r0
{
 800d246:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d24a:	b960      	cbnz	r0, 800d266 <udp_sendto_if_src+0x32>
 800d24c:	4b3e      	ldr	r3, [pc, #248]	; (800d348 <udp_sendto_if_src+0x114>)
 800d24e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d252:	493e      	ldr	r1, [pc, #248]	; (800d34c <udp_sendto_if_src+0x118>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d254:	f06f 040f 	mvn.w	r4, #15
 800d258:	483d      	ldr	r0, [pc, #244]	; (800d350 <udp_sendto_if_src+0x11c>)
 800d25a:	f001 fc53 	bl	800eb04 <iprintf>
}
 800d25e:	4620      	mov	r0, r4
 800d260:	b005      	add	sp, #20
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d266:	b921      	cbnz	r1, 800d272 <udp_sendto_if_src+0x3e>
 800d268:	4b37      	ldr	r3, [pc, #220]	; (800d348 <udp_sendto_if_src+0x114>)
 800d26a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d26e:	4939      	ldr	r1, [pc, #228]	; (800d354 <udp_sendto_if_src+0x120>)
 800d270:	e7f0      	b.n	800d254 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d272:	b922      	cbnz	r2, 800d27e <udp_sendto_if_src+0x4a>
 800d274:	4b34      	ldr	r3, [pc, #208]	; (800d348 <udp_sendto_if_src+0x114>)
 800d276:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d27a:	4937      	ldr	r1, [pc, #220]	; (800d358 <udp_sendto_if_src+0x124>)
 800d27c:	e7ea      	b.n	800d254 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	d104      	bne.n	800d28e <udp_sendto_if_src+0x5a>
 800d284:	4b30      	ldr	r3, [pc, #192]	; (800d348 <udp_sendto_if_src+0x114>)
 800d286:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d28a:	4934      	ldr	r1, [pc, #208]	; (800d35c <udp_sendto_if_src+0x128>)
 800d28c:	e7e2      	b.n	800d254 <udp_sendto_if_src+0x20>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d28e:	f1ba 0f00 	cmp.w	sl, #0
 800d292:	d104      	bne.n	800d29e <udp_sendto_if_src+0x6a>
 800d294:	4b2c      	ldr	r3, [pc, #176]	; (800d348 <udp_sendto_if_src+0x114>)
 800d296:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d29a:	4931      	ldr	r1, [pc, #196]	; (800d360 <udp_sendto_if_src+0x12c>)
 800d29c:	e7da      	b.n	800d254 <udp_sendto_if_src+0x20>
  if (pcb->local_port == 0) {
 800d29e:	8a42      	ldrh	r2, [r0, #18]
 800d2a0:	b142      	cbz	r2, 800d2b4 <udp_sendto_if_src+0x80>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d2a2:	8932      	ldrh	r2, [r6, #8]
 800d2a4:	f102 0308 	add.w	r3, r2, #8
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d909      	bls.n	800d2c2 <udp_sendto_if_src+0x8e>
    return ERR_MEM;
 800d2ae:	f04f 34ff 	mov.w	r4, #4294967295
 800d2b2:	e7d4      	b.n	800d25e <udp_sendto_if_src+0x2a>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	f7ff ff57 	bl	800d168 <udp_bind>
    if (err != ERR_OK) {
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d0f0      	beq.n	800d2a2 <udp_sendto_if_src+0x6e>
 800d2c0:	e7cd      	b.n	800d25e <udp_sendto_if_src+0x2a>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d2c2:	2108      	movs	r1, #8
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7fb fcea 	bl	8008c9e <pbuf_add_header>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d03a      	beq.n	800d344 <udp_sendto_if_src+0x110>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d2ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2d2:	2108      	movs	r1, #8
 800d2d4:	2022      	movs	r0, #34	; 0x22
 800d2d6:	f7fb fd81 	bl	8008ddc <pbuf_alloc>
    if (q == NULL) {
 800d2da:	4605      	mov	r5, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d0e6      	beq.n	800d2ae <udp_sendto_if_src+0x7a>
    if (p->tot_len != 0) {
 800d2e0:	8933      	ldrh	r3, [r6, #8]
 800d2e2:	b113      	cbz	r3, 800d2ea <udp_sendto_if_src+0xb6>
      pbuf_chain(q, p);
 800d2e4:	4631      	mov	r1, r6
 800d2e6:	f7fb fedd 	bl	80090a4 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d2ea:	896b      	ldrh	r3, [r5, #10]
 800d2ec:	2b07      	cmp	r3, #7
 800d2ee:	d806      	bhi.n	800d2fe <udp_sendto_if_src+0xca>
 800d2f0:	4b15      	ldr	r3, [pc, #84]	; (800d348 <udp_sendto_if_src+0x114>)
 800d2f2:	f240 320e 	movw	r2, #782	; 0x30e
 800d2f6:	491b      	ldr	r1, [pc, #108]	; (800d364 <udp_sendto_if_src+0x130>)
 800d2f8:	4815      	ldr	r0, [pc, #84]	; (800d350 <udp_sendto_if_src+0x11c>)
 800d2fa:	f001 fc03 	bl	800eb04 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800d2fe:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d300:	8a78      	ldrh	r0, [r7, #18]
 800d302:	f7f7 ff1b 	bl	800513c <lwip_htons>
 800d306:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d308:	4658      	mov	r0, fp
 800d30a:	f7f7 ff17 	bl	800513c <lwip_htons>
  udphdr->chksum = 0x0000;
 800d30e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800d310:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800d312:	71a3      	strb	r3, [r4, #6]
 800d314:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800d316:	8928      	ldrh	r0, [r5, #8]
 800d318:	f7f7 ff10 	bl	800513c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d31c:	2211      	movs	r2, #17
    udphdr->len = lwip_htons(q->tot_len);
 800d31e:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d320:	4641      	mov	r1, r8
 800d322:	7afb      	ldrb	r3, [r7, #11]
 800d324:	4628      	mov	r0, r5
 800d326:	f8cd a008 	str.w	sl, [sp, #8]
 800d32a:	9201      	str	r2, [sp, #4]
 800d32c:	7aba      	ldrb	r2, [r7, #10]
 800d32e:	9200      	str	r2, [sp, #0]
 800d330:	464a      	mov	r2, r9
 800d332:	f7fa fa39 	bl	80077a8 <ip4_output_if_src>
  if (q != p) {
 800d336:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d338:	4604      	mov	r4, r0
  if (q != p) {
 800d33a:	d090      	beq.n	800d25e <udp_sendto_if_src+0x2a>
    pbuf_free(q);
 800d33c:	4628      	mov	r0, r5
 800d33e:	f7fb fce5 	bl	8008d0c <pbuf_free>
 800d342:	e78c      	b.n	800d25e <udp_sendto_if_src+0x2a>
 800d344:	4635      	mov	r5, r6
 800d346:	e7d0      	b.n	800d2ea <udp_sendto_if_src+0xb6>
 800d348:	0801243e 	.word	0x0801243e
 800d34c:	080125ca 	.word	0x080125ca
 800d350:	0800fff2 	.word	0x0800fff2
 800d354:	080125e9 	.word	0x080125e9
 800d358:	08012609 	.word	0x08012609
 800d35c:	0801262b 	.word	0x0801262b
 800d360:	0801264d 	.word	0x0801264d
 800d364:	0801266e 	.word	0x0801266e

0800d368 <udp_sendto_if>:
{
 800d368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d36a:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d36c:	b950      	cbnz	r0, 800d384 <udp_sendto_if+0x1c>
 800d36e:	4b18      	ldr	r3, [pc, #96]	; (800d3d0 <udp_sendto_if+0x68>)
 800d370:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d374:	4917      	ldr	r1, [pc, #92]	; (800d3d4 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d376:	4818      	ldr	r0, [pc, #96]	; (800d3d8 <udp_sendto_if+0x70>)
 800d378:	f001 fbc4 	bl	800eb04 <iprintf>
 800d37c:	f06f 000f 	mvn.w	r0, #15
}
 800d380:	b002      	add	sp, #8
 800d382:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d384:	b921      	cbnz	r1, 800d390 <udp_sendto_if+0x28>
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <udp_sendto_if+0x68>)
 800d388:	f240 2281 	movw	r2, #641	; 0x281
 800d38c:	4913      	ldr	r1, [pc, #76]	; (800d3dc <udp_sendto_if+0x74>)
 800d38e:	e7f2      	b.n	800d376 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d390:	b922      	cbnz	r2, 800d39c <udp_sendto_if+0x34>
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <udp_sendto_if+0x68>)
 800d394:	f240 2282 	movw	r2, #642	; 0x282
 800d398:	4911      	ldr	r1, [pc, #68]	; (800d3e0 <udp_sendto_if+0x78>)
 800d39a:	e7ec      	b.n	800d376 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d39c:	b924      	cbnz	r4, 800d3a8 <udp_sendto_if+0x40>
 800d39e:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <udp_sendto_if+0x68>)
 800d3a0:	f240 2283 	movw	r2, #643	; 0x283
 800d3a4:	490f      	ldr	r1, [pc, #60]	; (800d3e4 <udp_sendto_if+0x7c>)
 800d3a6:	e7e6      	b.n	800d376 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3a8:	6805      	ldr	r5, [r0, #0]
 800d3aa:	b11d      	cbz	r5, 800d3b4 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d3ac:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3b0:	2ee0      	cmp	r6, #224	; 0xe0
 800d3b2:	d105      	bne.n	800d3c0 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800d3b4:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d3b6:	e88d 0030 	stmia.w	sp, {r4, r5}
 800d3ba:	f7ff ff3b 	bl	800d234 <udp_sendto_if_src>
 800d3be:	e7df      	b.n	800d380 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d3c0:	6866      	ldr	r6, [r4, #4]
 800d3c2:	42b5      	cmp	r5, r6
 800d3c4:	d101      	bne.n	800d3ca <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	e7f5      	b.n	800d3b6 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800d3ca:	f06f 0003 	mvn.w	r0, #3
 800d3ce:	e7d7      	b.n	800d380 <udp_sendto_if+0x18>
 800d3d0:	0801243e 	.word	0x0801243e
 800d3d4:	08012558 	.word	0x08012558
 800d3d8:	0800fff2 	.word	0x0800fff2
 800d3dc:	08012573 	.word	0x08012573
 800d3e0:	0801258f 	.word	0x0801258f
 800d3e4:	080125ad 	.word	0x080125ad

0800d3e8 <udp_sendto>:
{
 800d3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ea:	460e      	mov	r6, r1
 800d3ec:	4615      	mov	r5, r2
 800d3ee:	461f      	mov	r7, r3
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	b950      	cbnz	r0, 800d40a <udp_sendto+0x22>
 800d3f4:	4b15      	ldr	r3, [pc, #84]	; (800d44c <udp_sendto+0x64>)
 800d3f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d3fa:	4915      	ldr	r1, [pc, #84]	; (800d450 <udp_sendto+0x68>)
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d3fc:	4815      	ldr	r0, [pc, #84]	; (800d454 <udp_sendto+0x6c>)
 800d3fe:	f001 fb81 	bl	800eb04 <iprintf>
 800d402:	f06f 000f 	mvn.w	r0, #15
}
 800d406:	b003      	add	sp, #12
 800d408:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d40a:	b921      	cbnz	r1, 800d416 <udp_sendto+0x2e>
 800d40c:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <udp_sendto+0x64>)
 800d40e:	f240 2219 	movw	r2, #537	; 0x219
 800d412:	4911      	ldr	r1, [pc, #68]	; (800d458 <udp_sendto+0x70>)
 800d414:	e7f2      	b.n	800d3fc <udp_sendto+0x14>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d416:	b922      	cbnz	r2, 800d422 <udp_sendto+0x3a>
 800d418:	4b0c      	ldr	r3, [pc, #48]	; (800d44c <udp_sendto+0x64>)
 800d41a:	f240 221a 	movw	r2, #538	; 0x21a
 800d41e:	490f      	ldr	r1, [pc, #60]	; (800d45c <udp_sendto+0x74>)
 800d420:	e7ec      	b.n	800d3fc <udp_sendto+0x14>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d422:	7a00      	ldrb	r0, [r0, #8]
 800d424:	b150      	cbz	r0, 800d43c <udp_sendto+0x54>
    netif = netif_get_by_index(pcb->netif_idx);
 800d426:	f7fb fb95 	bl	8008b54 <netif_get_by_index>
  if (netif == NULL) {
 800d42a:	b158      	cbz	r0, 800d444 <udp_sendto+0x5c>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d42c:	9000      	str	r0, [sp, #0]
 800d42e:	463b      	mov	r3, r7
 800d430:	462a      	mov	r2, r5
 800d432:	4631      	mov	r1, r6
 800d434:	4620      	mov	r0, r4
 800d436:	f7ff ff97 	bl	800d368 <udp_sendto_if>
 800d43a:	e7e4      	b.n	800d406 <udp_sendto+0x1e>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fa f8bf 	bl	80075c0 <ip4_route>
 800d442:	e7f2      	b.n	800d42a <udp_sendto+0x42>
    return ERR_RTE;
 800d444:	f06f 0003 	mvn.w	r0, #3
 800d448:	e7dd      	b.n	800d406 <udp_sendto+0x1e>
 800d44a:	bf00      	nop
 800d44c:	0801243e 	.word	0x0801243e
 800d450:	0801250c 	.word	0x0801250c
 800d454:	0800fff2 	.word	0x0800fff2
 800d458:	08012524 	.word	0x08012524
 800d45c:	0801253d 	.word	0x0801253d

0800d460 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	460d      	mov	r5, r1
 800d464:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d466:	4604      	mov	r4, r0
 800d468:	b948      	cbnz	r0, 800d47e <udp_connect+0x1e>
 800d46a:	4b16      	ldr	r3, [pc, #88]	; (800d4c4 <udp_connect+0x64>)
 800d46c:	f240 4235 	movw	r2, #1077	; 0x435
 800d470:	4915      	ldr	r1, [pc, #84]	; (800d4c8 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d472:	4816      	ldr	r0, [pc, #88]	; (800d4cc <udp_connect+0x6c>)
 800d474:	f001 fb46 	bl	800eb04 <iprintf>
 800d478:	f06f 000f 	mvn.w	r0, #15
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
 800d47e:	b921      	cbnz	r1, 800d48a <udp_connect+0x2a>
 800d480:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <udp_connect+0x64>)
 800d482:	f240 4236 	movw	r2, #1078	; 0x436
 800d486:	4912      	ldr	r1, [pc, #72]	; (800d4d0 <udp_connect+0x70>)
 800d488:	e7f3      	b.n	800d472 <udp_connect+0x12>

  if (pcb->local_port == 0) {
 800d48a:	8a42      	ldrh	r2, [r0, #18]
 800d48c:	b16a      	cbz	r2, 800d4aa <udp_connect+0x4a>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d48e:	682b      	ldr	r3, [r5, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d490:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d492:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d494:	7c23      	ldrb	r3, [r4, #16]
 800d496:	f043 0304 	orr.w	r3, r3, #4
 800d49a:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <udp_connect+0x74>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	b940      	cbnz	r0, 800d4b6 <udp_connect+0x56>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d4a4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800d4a6:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	f7ff fe5c 	bl	800d168 <udp_bind>
    if (err != ERR_OK) {
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d0ec      	beq.n	800d48e <udp_connect+0x2e>
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800d4b6:	42a0      	cmp	r0, r4
 800d4b8:	d001      	beq.n	800d4be <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d4ba:	68c0      	ldr	r0, [r0, #12]
 800d4bc:	e7f1      	b.n	800d4a2 <udp_connect+0x42>
      return ERR_OK;
 800d4be:	2000      	movs	r0, #0
}
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	bf00      	nop
 800d4c4:	0801243e 	.word	0x0801243e
 800d4c8:	08012409 	.word	0x08012409
 800d4cc:	0800fff2 	.word	0x0800fff2
 800d4d0:	08012422 	.word	0x08012422
 800d4d4:	2000bef4 	.word	0x2000bef4

0800d4d8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d4d8:	b930      	cbnz	r0, 800d4e8 <udp_recv+0x10>
 800d4da:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <udp_recv+0x18>)
 800d4dc:	f240 428a 	movw	r2, #1162	; 0x48a
 800d4e0:	4904      	ldr	r1, [pc, #16]	; (800d4f4 <udp_recv+0x1c>)
 800d4e2:	4805      	ldr	r0, [pc, #20]	; (800d4f8 <udp_recv+0x20>)
 800d4e4:	f001 bb0e 	b.w	800eb04 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d4e8:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800d4ea:	61c2      	str	r2, [r0, #28]
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	0801243e 	.word	0x0801243e
 800d4f4:	080124de 	.word	0x080124de
 800d4f8:	0800fff2 	.word	0x0800fff2

0800d4fc <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	b930      	cbnz	r0, 800d50e <udp_remove+0x12>
 800d500:	4b0d      	ldr	r3, [pc, #52]	; (800d538 <udp_remove+0x3c>)
 800d502:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d506:	490d      	ldr	r1, [pc, #52]	; (800d53c <udp_remove+0x40>)
 800d508:	480d      	ldr	r0, [pc, #52]	; (800d540 <udp_remove+0x44>)
 800d50a:	f001 bafb 	b.w	800eb04 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d50e:	4a0d      	ldr	r2, [pc, #52]	; (800d544 <udp_remove+0x48>)
 800d510:	6813      	ldr	r3, [r2, #0]
 800d512:	4298      	cmp	r0, r3
 800d514:	d104      	bne.n	800d520 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d516:	68c3      	ldr	r3, [r0, #12]
 800d518:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d51a:	2000      	movs	r0, #0
 800d51c:	f7fb b9a0 	b.w	8008860 <memp_free>
{
 800d520:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0f9      	beq.n	800d51a <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0f6      	beq.n	800d51a <udp_remove+0x1e>
 800d52c:	4299      	cmp	r1, r3
 800d52e:	d1f7      	bne.n	800d520 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800d530:	68cb      	ldr	r3, [r1, #12]
 800d532:	60d3      	str	r3, [r2, #12]
        break;
 800d534:	e7f1      	b.n	800d51a <udp_remove+0x1e>
 800d536:	bf00      	nop
 800d538:	0801243e 	.word	0x0801243e
 800d53c:	080124f4 	.word	0x080124f4
 800d540:	0800fff2 	.word	0x0800fff2
 800d544:	2000bef4 	.word	0x2000bef4

0800d548 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d548:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d54a:	2000      	movs	r0, #0
 800d54c:	f7fb f96c 	bl	8008828 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d550:	4604      	mov	r4, r0
 800d552:	b128      	cbz	r0, 800d560 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d554:	2220      	movs	r2, #32
 800d556:	2100      	movs	r1, #0
 800d558:	f001 facc 	bl	800eaf4 <memset>
    pcb->ttl = UDP_TTL;
 800d55c:	23ff      	movs	r3, #255	; 0xff
 800d55e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d560:	4620      	mov	r0, r4
 800d562:	bd10      	pop	{r4, pc}

0800d564 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d564:	f7ff bff0 	b.w	800d548 <udp_new>

0800d568 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d568:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d56a:	b138      	cbz	r0, 800d57c <udp_netif_ip_addr_changed+0x14>
 800d56c:	6803      	ldr	r3, [r0, #0]
 800d56e:	b12b      	cbz	r3, 800d57c <udp_netif_ip_addr_changed+0x14>
 800d570:	b121      	cbz	r1, 800d57c <udp_netif_ip_addr_changed+0x14>
 800d572:	680b      	ldr	r3, [r1, #0]
 800d574:	b113      	cbz	r3, 800d57c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d576:	4b06      	ldr	r3, [pc, #24]	; (800d590 <udp_netif_ip_addr_changed+0x28>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	b903      	cbnz	r3, 800d57e <udp_netif_ip_addr_changed+0x16>
 800d57c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d57e:	681c      	ldr	r4, [r3, #0]
 800d580:	6802      	ldr	r2, [r0, #0]
 800d582:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d584:	bf04      	itt	eq
 800d586:	680a      	ldreq	r2, [r1, #0]
 800d588:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	e7f5      	b.n	800d57a <udp_netif_ip_addr_changed+0x12>
 800d58e:	bf00      	nop
 800d590:	2000bef4 	.word	0x2000bef4

0800d594 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d594:	8943      	ldrh	r3, [r0, #10]
 800d596:	2b0e      	cmp	r3, #14
{
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	4604      	mov	r4, r0
 800d59c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800d59e:	d91a      	bls.n	800d5d6 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d5a0:	7bc3      	ldrb	r3, [r0, #15]
 800d5a2:	b91b      	cbnz	r3, 800d5ac <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800d5a4:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d5ac:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d5ae:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d5b0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800d5b2:	07d9      	lsls	r1, r3, #31
 800d5b4:	d50a      	bpl.n	800d5cc <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d111      	bne.n	800d5de <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d5ba:	7843      	ldrb	r3, [r0, #1]
 800d5bc:	b933      	cbnz	r3, 800d5cc <ethernet_input+0x38>
 800d5be:	7883      	ldrb	r3, [r0, #2]
 800d5c0:	2b5e      	cmp	r3, #94	; 0x5e
 800d5c2:	d103      	bne.n	800d5cc <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d5c4:	7b63      	ldrb	r3, [r4, #13]
 800d5c6:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d5ca:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d5cc:	2e08      	cmp	r6, #8
 800d5ce:	d010      	beq.n	800d5f2 <ethernet_input+0x5e>
 800d5d0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800d5d4:	d01d      	beq.n	800d612 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f7fb fb98 	bl	8008d0c <pbuf_free>
  return ERR_OK;
 800d5dc:	e017      	b.n	800d60e <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d5de:	2206      	movs	r2, #6
 800d5e0:	4913      	ldr	r1, [pc, #76]	; (800d630 <ethernet_input+0x9c>)
 800d5e2:	f001 fa53 	bl	800ea8c <memcmp>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d1f0      	bne.n	800d5cc <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800d5ea:	7b63      	ldrb	r3, [r4, #13]
 800d5ec:	f043 0308 	orr.w	r3, r3, #8
 800d5f0:	e7eb      	b.n	800d5ca <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d5f2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800d5f6:	071a      	lsls	r2, r3, #28
 800d5f8:	d5ed      	bpl.n	800d5d6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d5fa:	210e      	movs	r1, #14
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f7fb fb51 	bl	8008ca4 <pbuf_remove_header>
 800d602:	2800      	cmp	r0, #0
 800d604:	d1e7      	bne.n	800d5d6 <ethernet_input+0x42>
        ip4_input(p, netif);
 800d606:	4629      	mov	r1, r5
 800d608:	4620      	mov	r0, r4
 800d60a:	f7fa f807 	bl	800761c <ip4_input>
}
 800d60e:	2000      	movs	r0, #0
 800d610:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d612:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800d616:	071b      	lsls	r3, r3, #28
 800d618:	d5dd      	bpl.n	800d5d6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d61a:	210e      	movs	r1, #14
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7fb fb41 	bl	8008ca4 <pbuf_remove_header>
 800d622:	2800      	cmp	r0, #0
 800d624:	d1d7      	bne.n	800d5d6 <ethernet_input+0x42>
        etharp_input(p, netif);
 800d626:	4629      	mov	r1, r5
 800d628:	4620      	mov	r0, r4
 800d62a:	f7f9 fc39 	bl	8006ea0 <etharp_input>
      break;
 800d62e:	e7ee      	b.n	800d60e <ethernet_input+0x7a>
 800d630:	0801269c 	.word	0x0801269c

0800d634 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d638:	460d      	mov	r5, r1
 800d63a:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d63c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800d640:	4616      	mov	r6, r2
 800d642:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d644:	f7f7 fd7a 	bl	800513c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d648:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d64a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7fb fb26 	bl	8008c9e <pbuf_add_header>
 800d652:	b9e0      	cbnz	r0, 800d68e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d654:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800d656:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	600b      	str	r3, [r1, #0]
 800d65e:	88bb      	ldrh	r3, [r7, #4]
 800d660:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d662:	6833      	ldr	r3, [r6, #0]
 800d664:	f8c1 3006 	str.w	r3, [r1, #6]
 800d668:	88b3      	ldrh	r3, [r6, #4]
 800d66a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d66c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d670:	2b06      	cmp	r3, #6
 800d672:	d006      	beq.n	800d682 <ethernet_output+0x4e>
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <ethernet_output+0x64>)
 800d676:	f240 1233 	movw	r2, #307	; 0x133
 800d67a:	4908      	ldr	r1, [pc, #32]	; (800d69c <ethernet_output+0x68>)
 800d67c:	4808      	ldr	r0, [pc, #32]	; (800d6a0 <ethernet_output+0x6c>)
 800d67e:	f001 fa41 	bl	800eb04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d682:	69a3      	ldr	r3, [r4, #24]
 800d684:	4629      	mov	r1, r5
 800d686:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d68c:	4718      	bx	r3
}
 800d68e:	f06f 0001 	mvn.w	r0, #1
 800d692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d696:	bf00      	nop
 800d698:	080126a2 	.word	0x080126a2
 800d69c:	080126d7 	.word	0x080126d7
 800d6a0:	0800fff2 	.word	0x0800fff2

0800d6a4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6a6:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800d6a8:	9100      	str	r1, [sp, #0]
 800d6aa:	2304      	movs	r3, #4
 800d6ac:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d6ae:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	9102      	str	r1, [sp, #8]
 800d6b4:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d6b6:	f7f5 fc01 	bl	8002ebc <osMessageCreate>
 800d6ba:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d6bc:	fab0 f080 	clz	r0, r0
 800d6c0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800d6c2:	4240      	negs	r0, r0
 800d6c4:	b004      	add	sp, #16
 800d6c6:	bd10      	pop	{r4, pc}

0800d6c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800d6c8:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	6800      	ldr	r0, [r0, #0]
 800d6ce:	f7f5 fc09 	bl	8002ee4 <osMessagePut>
 800d6d2:	3000      	adds	r0, #0
 800d6d4:	bf18      	it	ne
 800d6d6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800d6d8:	4240      	negs	r0, r0
 800d6da:	bd08      	pop	{r3, pc}

0800d6dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6de:	4617      	mov	r7, r2
 800d6e0:	b085      	sub	sp, #20
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800d6e6:	f7f5 fb12 	bl	8002d0e <osKernelSysTick>
 800d6ea:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800d6ec:	b177      	cbz	r7, 800d70c <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800d6ee:	463a      	mov	r2, r7
 800d6f0:	6831      	ldr	r1, [r6, #0]
 800d6f2:	a801      	add	r0, sp, #4
 800d6f4:	f7f5 fc1e 	bl	8002f34 <osMessageGet>

    if(event.status == osEventMessage)
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	2b10      	cmp	r3, #16
 800d6fc:	d10d      	bne.n	800d71a <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800d6fe:	9b02      	ldr	r3, [sp, #8]
 800d700:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800d702:	f7f5 fb04 	bl	8002d0e <osKernelSysTick>
 800d706:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800d708:	b005      	add	sp, #20
 800d70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800d70c:	f04f 32ff 	mov.w	r2, #4294967295
 800d710:	6831      	ldr	r1, [r6, #0]
 800d712:	a801      	add	r0, sp, #4
 800d714:	f7f5 fc0e 	bl	8002f34 <osMessageGet>
 800d718:	e7f1      	b.n	800d6fe <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	e7f3      	b.n	800d708 <sys_arch_mbox_fetch+0x2c>

0800d720 <sys_mbox_valid>:
 800d720:	6800      	ldr	r0, [r0, #0]
 800d722:	3000      	adds	r0, #0
 800d724:	bf18      	it	ne
 800d726:	2001      	movne	r0, #1
 800d728:	4770      	bx	lr
	...

0800d72c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d72c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800d72e:	4803      	ldr	r0, [pc, #12]	; (800d73c <sys_init+0x10>)
 800d730:	f7f5 fb24 	bl	8002d7c <osMutexCreate>
 800d734:	4b02      	ldr	r3, [pc, #8]	; (800d740 <sys_init+0x14>)
 800d736:	6018      	str	r0, [r3, #0]
 800d738:	bd08      	pop	{r3, pc}
 800d73a:	bf00      	nop
 800d73c:	08012710 	.word	0x08012710
 800d740:	2000befc 	.word	0x2000befc

0800d744 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d744:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800d746:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d748:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d74a:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d750:	f7f5 fb14 	bl	8002d7c <osMutexCreate>
 800d754:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800d756:	fab0 f080 	clz	r0, r0
 800d75a:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d75c:	4240      	negs	r0, r0
 800d75e:	b002      	add	sp, #8
 800d760:	bd10      	pop	{r4, pc}

0800d762 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800d762:	f04f 31ff 	mov.w	r1, #4294967295
 800d766:	6800      	ldr	r0, [r0, #0]
 800d768:	f7f5 bb10 	b.w	8002d8c <osMutexWait>

0800d76c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d76c:	6800      	ldr	r0, [r0, #0]
 800d76e:	f7f5 bba3 	b.w	8002eb8 <osMutexRelease>

0800d772 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d772:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d774:	b089      	sub	sp, #36	; 0x24
 800d776:	4614      	mov	r4, r2
 800d778:	4607      	mov	r7, r0
 800d77a:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d77c:	221c      	movs	r2, #28
 800d77e:	2100      	movs	r1, #0
 800d780:	a801      	add	r0, sp, #4
{
 800d782:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d784:	f001 f9b6 	bl	800eaf4 <memset>
 800d788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  return osThreadCreate(&os_thread_def, arg);
 800d78a:	4621      	mov	r1, r4
 800d78c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d78e:	9701      	str	r7, [sp, #4]
 800d790:	9602      	str	r6, [sp, #8]
 800d792:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d796:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800d798:	f7f5 fac0 	bl	8002d1c <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800d79c:	b009      	add	sp, #36	; 0x24
 800d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7a0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d7a0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800d7a2:	4b04      	ldr	r3, [pc, #16]	; (800d7b4 <sys_arch_protect+0x14>)
 800d7a4:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a8:	6818      	ldr	r0, [r3, #0]
 800d7aa:	f7f5 faef 	bl	8002d8c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800d7ae:	2001      	movs	r0, #1
 800d7b0:	bd08      	pop	{r3, pc}
 800d7b2:	bf00      	nop
 800d7b4:	2000befc 	.word	0x2000befc

0800d7b8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d7b8:	4b01      	ldr	r3, [pc, #4]	; (800d7c0 <sys_arch_unprotect+0x8>)
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	f7f5 bb7c 	b.w	8002eb8 <osMutexRelease>
 800d7c0:	2000befc 	.word	0x2000befc

0800d7c4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d7c8:	4a25      	ldr	r2, [pc, #148]	; (800d860 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800d7ca:	f04f 0800 	mov.w	r8, #0
{
 800d7ce:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d7d0:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d7d4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800d7d6:	4647      	mov	r7, r8
 800d7d8:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d7da:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800d7dc:	b92c      	cbnz	r4, 800d7ea <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d7de:	4639      	mov	r1, r7
 800d7e0:	481f      	ldr	r0, [pc, #124]	; (800d860 <low_level_output+0x9c>)
 800d7e2:	f7f3 f8eb 	bl	80009bc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	e004      	b.n	800d7f4 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d7ea:	682a      	ldr	r2, [r5, #0]
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	da11      	bge.n	800d814 <low_level_output+0x50>
        errval = ERR_USE;
 800d7f0:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	f241 0214 	movw	r2, #4116	; 0x1014
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	5899      	ldr	r1, [r3, r2]
 800d7fe:	0689      	lsls	r1, r1, #26
 800d800:	d505      	bpl.n	800d80e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d802:	2120      	movs	r1, #32
 800d804:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d806:	2100      	movs	r1, #0
 800d808:	f241 0204 	movw	r2, #4100	; 0x1004
 800d80c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800d80e:	b003      	add	sp, #12
 800d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800d814:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d818:	4646      	mov	r6, r8
      payloadoffset = 0;
 800d81a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d81e:	eb06 0809 	add.w	r8, r6, r9
 800d822:	1998      	adds	r0, r3, r6
 800d824:	6861      	ldr	r1, [r4, #4]
 800d826:	45d8      	cmp	r8, fp
 800d828:	d808      	bhi.n	800d83c <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d82a:	464a      	mov	r2, r9
 800d82c:	4451      	add	r1, sl
 800d82e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800d830:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d832:	f001 f93a 	bl	800eaaa <memcpy>
  for(q = p; q != NULL; q = q->next)
 800d836:	6824      	ldr	r4, [r4, #0]
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	e7cf      	b.n	800d7dc <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d83c:	ebab 0606 	sub.w	r6, fp, r6
 800d840:	4451      	add	r1, sl
 800d842:	4632      	mov	r2, r6
 800d844:	f001 f931 	bl	800eaaa <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d848:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d84a:	682b      	ldr	r3, [r5, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	dbcf      	blt.n	800d7f0 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d850:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d852:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d854:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d856:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800d85a:	2600      	movs	r6, #0
 800d85c:	e7df      	b.n	800d81e <low_level_output+0x5a>
 800d85e:	bf00      	nop
 800d860:	2000bf00 	.word	0x2000bf00

0800d864 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d86a:	4c3b      	ldr	r4, [pc, #236]	; (800d958 <ethernetif_input+0xf4>)
 800d86c:	f04f 31ff 	mov.w	r1, #4294967295
 800d870:	6820      	ldr	r0, [r4, #0]
 800d872:	f7f5 fad7 	bl	8002e24 <osSemaphoreWait>
 800d876:	2800      	cmp	r0, #0
 800d878:	d1f8      	bne.n	800d86c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d87a:	4d38      	ldr	r5, [pc, #224]	; (800d95c <ethernetif_input+0xf8>)
    {
      do
      {   
        LOCK_TCPIP_CORE();
 800d87c:	4838      	ldr	r0, [pc, #224]	; (800d960 <ethernetif_input+0xfc>)
 800d87e:	f7ff ff70 	bl	800d762 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d882:	4628      	mov	r0, r5
 800d884:	f7f3 f90c 	bl	8000aa0 <HAL_ETH_GetReceivedFrame_IT>
 800d888:	4607      	mov	r7, r0
 800d88a:	b130      	cbz	r0, 800d89a <ethernetif_input+0x36>
    return NULL;
 800d88c:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800d88e:	4834      	ldr	r0, [pc, #208]	; (800d960 <ethernetif_input+0xfc>)
 800d890:	f7ff ff6c 	bl	800d76c <sys_mutex_unlock>
      } while(p!=NULL);
 800d894:	2c00      	cmp	r4, #0
 800d896:	d1f0      	bne.n	800d87a <ethernetif_input+0x16>
 800d898:	e7e7      	b.n	800d86a <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d89a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800d89c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d89e:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800d8a0:	bb01      	cbnz	r1, 800d8e4 <ethernetif_input+0x80>
  struct pbuf *p = NULL;
 800d8a2:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d8a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800d8aa:	4282      	cmp	r2, r0
 800d8ac:	d14d      	bne.n	800d94a <ethernetif_input+0xe6>
    heth.RxFrameInfos.SegCount =0;  
 800d8ae:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d8b0:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800d8b4:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d8b6:	682b      	ldr	r3, [r5, #0]
 800d8b8:	5899      	ldr	r1, [r3, r2]
 800d8ba:	0609      	lsls	r1, r1, #24
 800d8bc:	d505      	bpl.n	800d8ca <ethernetif_input+0x66>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d8be:	2180      	movs	r1, #128	; 0x80
 800d8c0:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800d8c2:	f241 0208 	movw	r2, #4104	; 0x1008
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	d0de      	beq.n	800d88c <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 800d8ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d8d2:	4651      	mov	r1, sl
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4798      	blx	r3
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d0d8      	beq.n	800d88e <ethernetif_input+0x2a>
            pbuf_free(p);
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f7fb fa15 	bl	8008d0c <pbuf_free>
 800d8e2:	e7d4      	b.n	800d88e <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d8e4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d8e8:	f7fb fa78 	bl	8008ddc <pbuf_alloc>
  if (p != NULL)
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d0d7      	beq.n	800d8a2 <ethernetif_input+0x3e>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d8f2:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800d8f6:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800d8f8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800d8fc:	463e      	mov	r6, r7
      payloadoffset = 0;
 800d8fe:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d902:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d906:	18b7      	adds	r7, r6, r2
 800d908:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d90c:	429f      	cmp	r7, r3
 800d90e:	9b01      	ldr	r3, [sp, #4]
 800d910:	eb03 0106 	add.w	r1, r3, r6
 800d914:	d808      	bhi.n	800d928 <ethernetif_input+0xc4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d916:	4448      	add	r0, r9
 800d918:	f001 f8c7 	bl	800eaaa <memcpy>
    for(q = p; q != NULL; q = q->next)
 800d91c:	f8d8 8000 	ldr.w	r8, [r8]
 800d920:	f1b8 0f00 	cmp.w	r8, #0
 800d924:	d1e8      	bne.n	800d8f8 <ethernetif_input+0x94>
 800d926:	e7bd      	b.n	800d8a4 <ethernetif_input+0x40>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d928:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800d92c:	4448      	add	r0, r9
 800d92e:	3604      	adds	r6, #4
 800d930:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d932:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d934:	f001 f8b9 	bl	800eaaa <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d938:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d93c:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800d940:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d942:	f8db 3008 	ldr.w	r3, [fp, #8]
 800d946:	9301      	str	r3, [sp, #4]
 800d948:	e7db      	b.n	800d902 <ethernetif_input+0x9e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d94a:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d94c:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d94e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800d952:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	e7a8      	b.n	800d8aa <ethernetif_input+0x46>
 800d958:	20006d94 	.word	0x20006d94
 800d95c:	2000bf00 	.word	0x2000bf00
 800d960:	20007080 	.word	0x20007080

0800d964 <HAL_ETH_MspInit>:
{
 800d964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d966:	b08d      	sub	sp, #52	; 0x34
 800d968:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d96a:	2214      	movs	r2, #20
 800d96c:	2100      	movs	r1, #0
 800d96e:	a807      	add	r0, sp, #28
 800d970:	f001 f8c0 	bl	800eaf4 <memset>
  if(ethHandle->Instance==ETH)
 800d974:	6822      	ldr	r2, [r4, #0]
 800d976:	4b3d      	ldr	r3, [pc, #244]	; (800da6c <HAL_ETH_MspInit+0x108>)
 800d978:	429a      	cmp	r2, r3
 800d97a:	d175      	bne.n	800da68 <HAL_ETH_MspInit+0x104>
    __HAL_RCC_ETH_CLK_ENABLE();
 800d97c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d980:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d982:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d984:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800d986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d988:	a907      	add	r1, sp, #28
 800d98a:	4839      	ldr	r0, [pc, #228]	; (800da70 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d98c:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800d98e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d992:	631a      	str	r2, [r3, #48]	; 0x30
 800d994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d996:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800d99a:	9200      	str	r2, [sp, #0]
 800d99c:	9a00      	ldr	r2, [sp, #0]
 800d99e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d9a4:	631a      	str	r2, [r3, #48]	; 0x30
 800d9a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800d9ac:	9201      	str	r2, [sp, #4]
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9b2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d9b6:	631a      	str	r2, [r3, #48]	; 0x30
 800d9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d9be:	9202      	str	r2, [sp, #8]
 800d9c0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9c4:	f042 0204 	orr.w	r2, r2, #4
 800d9c8:	631a      	str	r2, [r3, #48]	; 0x30
 800d9ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9cc:	f002 0204 	and.w	r2, r2, #4
 800d9d0:	9203      	str	r2, [sp, #12]
 800d9d2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9d6:	f042 0201 	orr.w	r2, r2, #1
 800d9da:	631a      	str	r2, [r3, #48]	; 0x30
 800d9dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9de:	f002 0201 	and.w	r2, r2, #1
 800d9e2:	9204      	str	r2, [sp, #16]
 800d9e4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9e8:	f042 0202 	orr.w	r2, r2, #2
 800d9ec:	631a      	str	r2, [r3, #48]	; 0x30
 800d9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9f0:	f002 0202 	and.w	r2, r2, #2
 800d9f4:	9205      	str	r2, [sp, #20]
 800d9f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9fe:	631a      	str	r2, [r3, #48]	; 0x30
 800da00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da02:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800da04:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da08:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da0a:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800da0c:	9306      	str	r3, [sp, #24]
 800da0e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800da10:	2332      	movs	r3, #50	; 0x32
 800da12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da14:	f7f3 fa6c 	bl	8000ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800da18:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da1a:	a907      	add	r1, sp, #28
 800da1c:	4815      	ldr	r0, [pc, #84]	; (800da74 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800da1e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da20:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da22:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da24:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da26:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da28:	f7f3 fa62 	bl	8000ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800da2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800da30:	a907      	add	r1, sp, #28
 800da32:	4811      	ldr	r0, [pc, #68]	; (800da78 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800da34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da36:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da38:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da3a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da3c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800da3e:	f7f3 fa57 	bl	8000ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800da42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da46:	a907      	add	r1, sp, #28
 800da48:	480c      	ldr	r0, [pc, #48]	; (800da7c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800da4a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da4c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da4e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da50:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da52:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da54:	f7f3 fa4c 	bl	8000ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800da58:	203d      	movs	r0, #61	; 0x3d
 800da5a:	4622      	mov	r2, r4
 800da5c:	2105      	movs	r1, #5
 800da5e:	f7f2 fe11 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800da62:	203d      	movs	r0, #61	; 0x3d
 800da64:	f7f2 fe46 	bl	80006f4 <HAL_NVIC_EnableIRQ>
}
 800da68:	b00d      	add	sp, #52	; 0x34
 800da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6c:	40028000 	.word	0x40028000
 800da70:	40020800 	.word	0x40020800
 800da74:	40020000 	.word	0x40020000
 800da78:	40020400 	.word	0x40020400
 800da7c:	40021800 	.word	0x40021800

0800da80 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800da80:	4b01      	ldr	r3, [pc, #4]	; (800da88 <HAL_ETH_RxCpltCallback+0x8>)
 800da82:	6818      	ldr	r0, [r3, #0]
 800da84:	f7f5 b9f4 	b.w	8002e70 <osSemaphoreRelease>
 800da88:	20006d94 	.word	0x20006d94

0800da8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800da8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800da8e:	4604      	mov	r4, r0
{
 800da90:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800da92:	b930      	cbnz	r0, 800daa2 <ethernetif_init+0x16>
 800da94:	4b47      	ldr	r3, [pc, #284]	; (800dbb4 <ethernetif_init+0x128>)
 800da96:	f240 2229 	movw	r2, #553	; 0x229
 800da9a:	4947      	ldr	r1, [pc, #284]	; (800dbb8 <ethernetif_init+0x12c>)
 800da9c:	4847      	ldr	r0, [pc, #284]	; (800dbbc <ethernetif_init+0x130>)
 800da9e:	f001 f831 	bl	800eb04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800daa2:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800daa4:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800daa6:	4d46      	ldr	r5, [pc, #280]	; (800dbc0 <ethernetif_init+0x134>)
  netif->name[0] = IFNAME0;
 800daa8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800daac:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800daae:	4a45      	ldr	r2, [pc, #276]	; (800dbc4 <ethernetif_init+0x138>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dab0:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800dab2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800dab6:	4b44      	ldr	r3, [pc, #272]	; (800dbc8 <ethernetif_init+0x13c>)
  MACAddr[1] = 0x80;
 800dab8:	f88d 1005 	strb.w	r1, [sp, #5]
  MACAddr[2] = 0xE1;
 800dabc:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800dabe:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800dac0:	4b42      	ldr	r3, [pc, #264]	; (800dbcc <ethernetif_init+0x140>)
  heth.Instance = ETH;
 800dac2:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800dac4:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800dac6:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800dac8:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800daca:	f88d 1006 	strb.w	r1, [sp, #6]
  heth.Init.MACAddr = &MACAddr[0];
 800dace:	a901      	add	r1, sp, #4
  uint32_t regvalue = 0;
 800dad0:	9300      	str	r3, [sp, #0]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800dad2:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800dad4:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[3] = 0x00;
 800dad8:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 800dadc:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 800dae0:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800dae4:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800dae6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800daea:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800daec:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800daee:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800daf0:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800daf2:	f7f3 f8c5 	bl	8000c80 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800daf6:	b928      	cbnz	r0, 800db04 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800daf8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800dafc:	f043 0304 	orr.w	r3, r3, #4
 800db00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800db04:	2304      	movs	r3, #4
 800db06:	4a32      	ldr	r2, [pc, #200]	; (800dbd0 <ethernetif_init+0x144>)
 800db08:	4932      	ldr	r1, [pc, #200]	; (800dbd4 <ethernetif_init+0x148>)
  osSemaphoreDef(SEM);
 800db0a:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800db0c:	482c      	ldr	r0, [pc, #176]	; (800dbc0 <ethernetif_init+0x134>)
 800db0e:	f7f2 fedb 	bl	80008c8 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800db12:	2304      	movs	r3, #4
 800db14:	4a30      	ldr	r2, [pc, #192]	; (800dbd8 <ethernetif_init+0x14c>)
 800db16:	4931      	ldr	r1, [pc, #196]	; (800dbdc <ethernetif_init+0x150>)
 800db18:	4829      	ldr	r0, [pc, #164]	; (800dbc0 <ethernetif_init+0x134>)
 800db1a:	f7f2 ff12 	bl	8000942 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800db1e:	2306      	movs	r3, #6
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800db20:	2101      	movs	r1, #1
 800db22:	a803      	add	r0, sp, #12
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800db24:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800db28:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800db2a:	ad05      	add	r5, sp, #20
 800db2c:	4e2c      	ldr	r6, [pc, #176]	; (800dbe0 <ethernetif_init+0x154>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800db34:	785a      	ldrb	r2, [r3, #1]
 800db36:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800db3a:	789a      	ldrb	r2, [r3, #2]
 800db3c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800db40:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800db42:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800db44:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800db48:	791a      	ldrb	r2, [r3, #4]
 800db4a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800db4e:	795b      	ldrb	r3, [r3, #5]
  osSemaphoreDef(SEM);
 800db50:	9704      	str	r7, [sp, #16]
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800db52:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = 1500;
 800db56:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800db5a:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800db5c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800db60:	f043 030a 	orr.w	r3, r3, #10
 800db64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800db68:	f7f5 f936 	bl	8002dd8 <osSemaphoreCreate>
 800db6c:	4b1d      	ldr	r3, [pc, #116]	; (800dbe4 <ethernetif_init+0x158>)
 800db6e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800db70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800db72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db74:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800db78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800db7c:	4621      	mov	r1, r4
 800db7e:	a805      	add	r0, sp, #20
 800db80:	f7f5 f8cc 	bl	8002d1c <osThreadCreate>
  HAL_ETH_Start(&heth);
 800db84:	480e      	ldr	r0, [pc, #56]	; (800dbc0 <ethernetif_init+0x134>)
 800db86:	f7f3 f975 	bl	8000e74 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800db8a:	466a      	mov	r2, sp
 800db8c:	211d      	movs	r1, #29
 800db8e:	480c      	ldr	r0, [pc, #48]	; (800dbc0 <ethernetif_init+0x134>)
 800db90:	f7f3 f805 	bl	8000b9e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800db94:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800db96:	211d      	movs	r1, #29
 800db98:	4809      	ldr	r0, [pc, #36]	; (800dbc0 <ethernetif_init+0x134>)
  regvalue |= (PHY_ISFR_INT4);
 800db9a:	f042 020b 	orr.w	r2, r2, #11
 800db9e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800dba0:	f7f3 f837 	bl	8000c12 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800dba4:	466a      	mov	r2, sp
 800dba6:	211d      	movs	r1, #29
 800dba8:	4805      	ldr	r0, [pc, #20]	; (800dbc0 <ethernetif_init+0x134>)
 800dbaa:	f7f2 fff8 	bl	8000b9e <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800dbae:	4638      	mov	r0, r7
 800dbb0:	b00d      	add	sp, #52	; 0x34
 800dbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb4:	08012718 	.word	0x08012718
 800dbb8:	0801026c 	.word	0x0801026c
 800dbbc:	0800fff2 	.word	0x0800fff2
 800dbc0:	2000bf00 	.word	0x2000bf00
 800dbc4:	40028000 	.word	0x40028000
 800dbc8:	08007281 	.word	0x08007281
 800dbcc:	0800d7c5 	.word	0x0800d7c5
 800dbd0:	2007d8d0 	.word	0x2007d8d0
 800dbd4:	2007c080 	.word	0x2007c080
 800dbd8:	2007c100 	.word	0x2007c100
 800dbdc:	2007c000 	.word	0x2007c000
 800dbe0:	0800fef8 	.word	0x0800fef8
 800dbe4:	20006d94 	.word	0x20006d94

0800dbe8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800dbe8:	f7f2 bd22 	b.w	8000630 <HAL_GetTick>

0800dbec <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800dbec:	4b03      	ldr	r3, [pc, #12]	; (800dbfc <vApplicationGetIdleTaskMemory+0x10>)
 800dbee:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800dbf0:	4b03      	ldr	r3, [pc, #12]	; (800dc00 <vApplicationGetIdleTaskMemory+0x14>)
 800dbf2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800dbf4:	2380      	movs	r3, #128	; 0x80
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	20006f98 	.word	0x20006f98
 800dc00:	20006d98 	.word	0x20006d98

0800dc04 <User_notification>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];
ip4_addr_t dnsserver;
/* USER CODE BEGIN 2 */
void User_notification(struct netif *netif)
{
 800dc04:	b510      	push	{r4, lr}
  if (netif_is_up(netif))
 800dc06:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dc0a:	07db      	lsls	r3, r3, #31
 800dc0c:	d513      	bpl.n	800dc36 <User_notification+0x32>
 {

    /* Update DHCP state machine */
 //   DHCP_state = DHCP_START;
    sprintf((char *)iptxt, "User_notification Static IP address: %s\n", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 800dc0e:	3004      	adds	r0, #4
 800dc10:	f7f9 ff70 	bl	8007af4 <ip4addr_ntoa>
 800dc14:	490a      	ldr	r1, [pc, #40]	; (800dc40 <User_notification+0x3c>)
 800dc16:	4602      	mov	r2, r0
 800dc18:	480a      	ldr	r0, [pc, #40]	; (800dc44 <User_notification+0x40>)
 800dc1a:	f000 fff9 	bl	800ec10 <siprintf>
  else
  {
    /* Update DHCP state machine */
   // DHCP_state = DHCP_LINK_DOWN;
    sprintf((char *)iptxt,"The network cable is not connected \n");
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 800dc1e:	4809      	ldr	r0, [pc, #36]	; (800dc44 <User_notification+0x40>)
 800dc20:	f7f2 fb0e 	bl	8000240 <strlen>
 800dc24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc28:	b282      	uxth	r2, r0
 800dc2a:	4906      	ldr	r1, [pc, #24]	; (800dc44 <User_notification+0x40>)
 800dc2c:	4806      	ldr	r0, [pc, #24]	; (800dc48 <User_notification+0x44>)
    /* Turn On LED 2 to indicate ETH and LwIP init error */
  }
}
 800dc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 800dc32:	f7f4 bddf 	b.w	80027f4 <HAL_UART_Transmit>
    sprintf((char *)iptxt,"The network cable is not connected \n");
 800dc36:	4905      	ldr	r1, [pc, #20]	; (800dc4c <User_notification+0x48>)
 800dc38:	4802      	ldr	r0, [pc, #8]	; (800dc44 <User_notification+0x40>)
 800dc3a:	f001 f80d 	bl	800ec58 <strcpy>
 800dc3e:	e7ee      	b.n	800dc1e <User_notification+0x1a>
 800dc40:	0801275f 	.word	0x0801275f
 800dc44:	2000bf88 	.word	0x2000bf88
 800dc48:	2000c068 	.word	0x2000c068
 800dc4c:	08012788 	.word	0x08012788

0800dc50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800dc50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 800dc54:	2400      	movs	r4, #0
 800dc56:	4b2e      	ldr	r3, [pc, #184]	; (800dd10 <MX_LWIP_Init+0xc0>)
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );

  /* IP addresses initialization without DHCP (IPv4) */

  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800dc58:	4e2e      	ldr	r6, [pc, #184]	; (800dd14 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 0;
 800dc5a:	701c      	strb	r4, [r3, #0]
  tcpip_init( NULL, NULL );
 800dc5c:	4621      	mov	r1, r4
  IP_ADDRESS[1] = 0;
 800dc5e:	705c      	strb	r4, [r3, #1]
  tcpip_init( NULL, NULL );
 800dc60:	4620      	mov	r0, r4
  IP_ADDRESS[2] = 0;
 800dc62:	709c      	strb	r4, [r3, #2]
  IP_ADDRESS[3] = 0;
 800dc64:	70dc      	strb	r4, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 800dc66:	4b2c      	ldr	r3, [pc, #176]	; (800dd18 <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800dc68:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800dd44 <MX_LWIP_Init+0xf4>
  NETMASK_ADDRESS[0] = 0;
 800dc6c:	701c      	strb	r4, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 800dc6e:	705c      	strb	r4, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800dc70:	709c      	strb	r4, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800dc72:	70dc      	strb	r4, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800dc74:	4b29      	ldr	r3, [pc, #164]	; (800dd1c <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 800dc76:	4f2a      	ldr	r7, [pc, #168]	; (800dd20 <MX_LWIP_Init+0xd0>)
  GATEWAY_ADDRESS[0] = 0;
 800dc78:	701c      	strb	r4, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800dc7a:	705c      	strb	r4, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800dc7c:	709c      	strb	r4, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800dc7e:	70dc      	strb	r4, [r3, #3]
  tcpip_init( NULL, NULL );
 800dc80:	f7f6 ff1c 	bl	8004abc <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800dc84:	4b27      	ldr	r3, [pc, #156]	; (800dd24 <MX_LWIP_Init+0xd4>)
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
  dns_setserver (0, &dnsserver);
 800dc86:	4620      	mov	r0, r4
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 800dc88:	4d27      	ldr	r5, [pc, #156]	; (800dd28 <MX_LWIP_Init+0xd8>)
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800dc8a:	6033      	str	r3, [r6, #0]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800dc8c:	f103 436b 	add.w	r3, r3, #3942645760	; 0xeb000000
  dns_setserver (0, &dnsserver);
 800dc90:	4629      	mov	r1, r5
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800dc92:	f8c8 3000 	str.w	r3, [r8]
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 800dc96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800dc9a:	603b      	str	r3, [r7, #0]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 800dc9c:	4b23      	ldr	r3, [pc, #140]	; (800dd2c <MX_LWIP_Init+0xdc>)
 800dc9e:	602b      	str	r3, [r5, #0]
  dns_setserver (0, &dnsserver);
 800dca0:	f7f7 fd80 	bl	80057a4 <dns_setserver>

  printf("MyIP %d.%d.%d.%d\n\r",(ipaddr.addr & 0xff), ((ipaddr.addr >> 8) & 0xff), ((ipaddr.addr >> 16) & 0xff), (ipaddr.addr >> 24));
 800dca4:	6831      	ldr	r1, [r6, #0]
 800dca6:	4822      	ldr	r0, [pc, #136]	; (800dd30 <MX_LWIP_Init+0xe0>)
 800dca8:	0e0b      	lsrs	r3, r1, #24
 800dcaa:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800dcb4:	b2c9      	uxtb	r1, r1
 800dcb6:	f000 ff25 	bl	800eb04 <iprintf>
  printf("dnsserverIP %d.%d.%d.%d\n\r",(dnsserver.addr & 0xff), ((dnsserver.addr >> 8) & 0xff), ((dnsserver.addr >> 16) & 0xff), (dnsserver.addr >> 24));
 800dcba:	6829      	ldr	r1, [r5, #0]
 800dcbc:	481d      	ldr	r0, [pc, #116]	; (800dd34 <MX_LWIP_Init+0xe4>)
 800dcbe:	0e0b      	lsrs	r3, r1, #24
 800dcc0:	f3c1 2207 	ubfx	r2, r1, #8, #8
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
  ip_addr_set_zero_ip4(&dnsserver);
  dns_setserver (0, &dnsserver);*/
  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800dcc4:	4d1c      	ldr	r5, [pc, #112]	; (800dd38 <MX_LWIP_Init+0xe8>)
  printf("dnsserverIP %d.%d.%d.%d\n\r",(dnsserver.addr & 0xff), ((dnsserver.addr >> 8) & 0xff), ((dnsserver.addr >> 16) & 0xff), (dnsserver.addr >> 24));
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800dccc:	b2c9      	uxtb	r1, r1
 800dcce:	f000 ff19 	bl	800eb04 <iprintf>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800dcd2:	4b1a      	ldr	r3, [pc, #104]	; (800dd3c <MX_LWIP_Init+0xec>)
 800dcd4:	463a      	mov	r2, r7
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	9302      	str	r3, [sp, #8]
 800dcda:	4628      	mov	r0, r5
 800dcdc:	4b18      	ldr	r3, [pc, #96]	; (800dd40 <MX_LWIP_Init+0xf0>)
 800dcde:	9400      	str	r4, [sp, #0]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	4643      	mov	r3, r8
 800dce4:	f7fa fe62 	bl	80089ac <netif_add>
  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dce8:	4628      	mov	r0, r5
 800dcea:	f7fa fef7 	bl	8008adc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800dcee:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800dcf2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800dcf4:	075b      	lsls	r3, r3, #29
 800dcf6:	d507      	bpl.n	800dd08 <MX_LWIP_Init+0xb8>
    netif_set_up(&gnetif);
 800dcf8:	f7fa fef6 	bl	8008ae8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

/* USER CODE BEGIN 3 */
  User_notification(&gnetif);
 800dcfc:	480e      	ldr	r0, [pc, #56]	; (800dd38 <MX_LWIP_Init+0xe8>)
//  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 // osThreadCreate (osThread(DHCP), &gnetif);
/* USER CODE END 3 */
}
 800dcfe:	b004      	add	sp, #16
 800dd00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  User_notification(&gnetif);
 800dd04:	f7ff bf7e 	b.w	800dc04 <User_notification>
    netif_set_down(&gnetif);
 800dd08:	f7fa ff08 	bl	8008b1c <netif_set_down>
 800dd0c:	e7f6      	b.n	800dcfc <MX_LWIP_Init+0xac>
 800dd0e:	bf00      	nop
 800dd10:	2000bfec 	.word	0x2000bfec
 800dd14:	2000bf80 	.word	0x2000bf80
 800dd18:	2000bf84 	.word	0x2000bf84
 800dd1c:	2000bf48 	.word	0x2000bf48
 800dd20:	2000bff4 	.word	0x2000bff4
 800dd24:	1608a8c0 	.word	0x1608a8c0
 800dd28:	2000bff0 	.word	0x2000bff0
 800dd2c:	868079a3 	.word	0x868079a3
 800dd30:	08012732 	.word	0x08012732
 800dd34:	08012745 	.word	0x08012745
 800dd38:	2000bf4c 	.word	0x2000bf4c
 800dd3c:	0800d595 	.word	0x0800d595
 800dd40:	0800da8d 	.word	0x0800da8d
 800dd44:	2000bff8 	.word	0x2000bff8

0800dd48 <RecvHttpHeaderCallback>:

	 pbuf_free(p);
	 return ERR_OK;
}
err_t RecvHttpHeaderCallback (httpc_state_t *connection, void *arg, struct
pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 800dd48:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
   sprintf(buf,"RecvHttpHeaderCallback error");
 800dd4a:	4c0a      	ldr	r4, [pc, #40]	; (800dd74 <RecvHttpHeaderCallback+0x2c>)
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800dd4c:	2180      	movs	r1, #128	; 0x80
 800dd4e:	480a      	ldr	r0, [pc, #40]	; (800dd78 <RecvHttpHeaderCallback+0x30>)
 800dd50:	f7f3 f9bd 	bl	80010ce <HAL_GPIO_TogglePin>
   sprintf(buf,"RecvHttpHeaderCallback error");
 800dd54:	4909      	ldr	r1, [pc, #36]	; (800dd7c <RecvHttpHeaderCallback+0x34>)
 800dd56:	4620      	mov	r0, r4
 800dd58:	f000 ff7e 	bl	800ec58 <strcpy>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7f2 fa6f 	bl	8000240 <strlen>
 800dd62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd66:	b282      	uxth	r2, r0
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4805      	ldr	r0, [pc, #20]	; (800dd80 <RecvHttpHeaderCallback+0x38>)
 800dd6c:	f7f4 fd42 	bl	80027f4 <HAL_UART_Transmit>
   return ERR_OK;
}
 800dd70:	2000      	movs	r0, #0
 800dd72:	bd10      	pop	{r4, pc}
 800dd74:	2000c624 	.word	0x2000c624
 800dd78:	40020400 	.word	0x40020400
 800dd7c:	080127fa 	.word	0x080127fa
 800dd80:	2000c068 	.word	0x2000c068

0800dd84 <HttpClientResultCallback>:
void HttpClientResultCallback (void *arg, httpc_result_t httpc_result, u32_t
rx_content_len, u32_t srv_res, err_t err) {
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
	sprintf(buf,"HttpClientResultCallback \n\r");
 800dd86:	4c16      	ldr	r4, [pc, #88]	; (800dde0 <HttpClientResultCallback+0x5c>)
rx_content_len, u32_t srv_res, err_t err) {
 800dd88:	460f      	mov	r7, r1
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800dd8a:	4816      	ldr	r0, [pc, #88]	; (800dde4 <HttpClientResultCallback+0x60>)
 800dd8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
rx_content_len, u32_t srv_res, err_t err) {
 800dd90:	4616      	mov	r6, r2
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dd92:	4d15      	ldr	r5, [pc, #84]	; (800dde8 <HttpClientResultCallback+0x64>)
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800dd94:	f7f3 f99b 	bl	80010ce <HAL_GPIO_TogglePin>
	sprintf(buf,"HttpClientResultCallback \n\r");
 800dd98:	4914      	ldr	r1, [pc, #80]	; (800ddec <HttpClientResultCallback+0x68>)
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 ff5c 	bl	800ec58 <strcpy>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dda0:	4620      	mov	r0, r4
 800dda2:	f7f2 fa4d 	bl	8000240 <strlen>
 800dda6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ddaa:	b282      	uxth	r2, r0
 800ddac:	4621      	mov	r1, r4
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f7f4 fd20 	bl	80027f4 <HAL_UART_Transmit>
	sprintf(buf,"httpc_result: %u\n", httpc_result);
 800ddb4:	463a      	mov	r2, r7
 800ddb6:	490e      	ldr	r1, [pc, #56]	; (800ddf0 <HttpClientResultCallback+0x6c>)
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 ff29 	bl	800ec10 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7f2 fa3e 	bl	8000240 <strlen>
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	b282      	uxth	r2, r0
 800ddc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f7f4 fd11 	bl	80027f4 <HAL_UART_Transmit>
	sprintf(buf,"received number of bytes: %lu\n", rx_content_len);
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	4907      	ldr	r1, [pc, #28]	; (800ddf4 <HttpClientResultCallback+0x70>)

}
 800ddd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sprintf(buf,"received number of bytes: %lu\n", rx_content_len);
 800dddc:	f000 bf18 	b.w	800ec10 <siprintf>
 800dde0:	2000c624 	.word	0x2000c624
 800dde4:	40020400 	.word	0x40020400
 800dde8:	2000c068 	.word	0x2000c068
 800ddec:	080127ad 	.word	0x080127ad
 800ddf0:	080127c9 	.word	0x080127c9
 800ddf4:	080127db 	.word	0x080127db

0800ddf8 <RecvpayloadCallback>:
		err_t err){
 800ddf8:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	481a      	ldr	r0, [pc, #104]	; (800de68 <RecvpayloadCallback+0x70>)
		err_t err){
 800ddfe:	4614      	mov	r4, r2
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800de00:	f7f3 f965 	bl	80010ce <HAL_GPIO_TogglePin>
	sprintf(buf,"RecvpayloadCallback\n");
 800de04:	4919      	ldr	r1, [pc, #100]	; (800de6c <RecvpayloadCallback+0x74>)
 800de06:	481a      	ldr	r0, [pc, #104]	; (800de70 <RecvpayloadCallback+0x78>)
 800de08:	f000 ff26 	bl	800ec58 <strcpy>
	 HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800de0c:	4818      	ldr	r0, [pc, #96]	; (800de70 <RecvpayloadCallback+0x78>)
 800de0e:	f7f2 fa17 	bl	8000240 <strlen>
 800de12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de16:	b282      	uxth	r2, r0
 800de18:	4915      	ldr	r1, [pc, #84]	; (800de70 <RecvpayloadCallback+0x78>)
 800de1a:	4816      	ldr	r0, [pc, #88]	; (800de74 <RecvpayloadCallback+0x7c>)
 800de1c:	f7f4 fcea 	bl	80027f4 <HAL_UART_Transmit>
	 if (p == NULL) {sprintf(buf,"pbuf==Null\n");
 800de20:	b9ac      	cbnz	r4, 800de4e <RecvpayloadCallback+0x56>
 800de22:	4915      	ldr	r1, [pc, #84]	; (800de78 <RecvpayloadCallback+0x80>)
 800de24:	4812      	ldr	r0, [pc, #72]	; (800de70 <RecvpayloadCallback+0x78>)
 800de26:	f000 ff17 	bl	800ec58 <strcpy>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800de2a:	4811      	ldr	r0, [pc, #68]	; (800de70 <RecvpayloadCallback+0x78>)
 800de2c:	f7f2 fa08 	bl	8000240 <strlen>
 800de30:	490f      	ldr	r1, [pc, #60]	; (800de70 <RecvpayloadCallback+0x78>)
 800de32:	b282      	uxth	r2, r0
 800de34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de38:	480e      	ldr	r0, [pc, #56]	; (800de74 <RecvpayloadCallback+0x7c>)
 800de3a:	f7f4 fcdb 	bl	80027f4 <HAL_UART_Transmit>
	 timerequestflag=true;
 800de3e:	2201      	movs	r2, #1
 800de40:	4b0e      	ldr	r3, [pc, #56]	; (800de7c <RecvpayloadCallback+0x84>)
	 pbuf_free(p);
 800de42:	4620      	mov	r0, r4
	 timerequestflag=true;
 800de44:	701a      	strb	r2, [r3, #0]
	 pbuf_free(p);
 800de46:	f7fa ff61 	bl	8008d0c <pbuf_free>
}
 800de4a:	2000      	movs	r0, #0
 800de4c:	bd10      	pop	{r4, pc}
		 strncpy(timerbuffer, p->payload, 270);
 800de4e:	6861      	ldr	r1, [r4, #4]
 800de50:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800de54:	480a      	ldr	r0, [pc, #40]	; (800de80 <RecvpayloadCallback+0x88>)
 800de56:	f000 ff07 	bl	800ec68 <strncpy>
		 sprintf(buf,"timerbuffer :%s\n\r",timerbuffer);
 800de5a:	4a09      	ldr	r2, [pc, #36]	; (800de80 <RecvpayloadCallback+0x88>)
 800de5c:	4909      	ldr	r1, [pc, #36]	; (800de84 <RecvpayloadCallback+0x8c>)
 800de5e:	4804      	ldr	r0, [pc, #16]	; (800de70 <RecvpayloadCallback+0x78>)
 800de60:	f000 fed6 	bl	800ec10 <siprintf>
 800de64:	e7e1      	b.n	800de2a <RecvpayloadCallback+0x32>
 800de66:	bf00      	nop
 800de68:	40020400 	.word	0x40020400
 800de6c:	08012817 	.word	0x08012817
 800de70:	2000c624 	.word	0x2000c624
 800de74:	2000c068 	.word	0x2000c068
 800de78:	0801282c 	.word	0x0801282c
 800de7c:	2000706c 	.word	0x2000706c
 800de80:	2000c4ec 	.word	0x2000c4ec
 800de84:	08012838 	.word	0x08012838

0800de88 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800de88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de8c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
//httpd_init();

 uint16_t years_int, Month_int, hours_int, mintues_int, days_int, second_int;
char url[500];
char domain_name[30];
volatile uint16_t h=0;
 800de90:	2500      	movs	r5, #0
MX_LWIP_Init();
 800de92:	f7ff fedd 	bl	800dc50 <MX_LWIP_Init>
httpc_connection_t *conn_settings;
httpc_state_t *connection;
conn_settings->use_proxy = 0;   //no proxy usage
conn_settings->headers_done_fn = RecvHttpHeaderCallback;
 800de96:	4bc0      	ldr	r3, [pc, #768]	; (800e198 <StartDefaultTask+0x310>)
conn_settings->use_proxy = 0;   //no proxy usage
 800de98:	71ad      	strb	r5, [r5, #6]
conn_settings->result_fn = HttpClientResultCallback;
strcpy(domain_name, "api.timezonedb.com");
 800de9a:	a813      	add	r0, sp, #76	; 0x4c
conn_settings->headers_done_fn = RecvHttpHeaderCallback;
 800de9c:	60eb      	str	r3, [r5, #12]
conn_settings->result_fn = HttpClientResultCallback;
 800de9e:	4bbf      	ldr	r3, [pc, #764]	; (800e19c <StartDefaultTask+0x314>)
strcpy(domain_name, "api.timezonedb.com");
 800dea0:	49bf      	ldr	r1, [pc, #764]	; (800e1a0 <StartDefaultTask+0x318>)
conn_settings->result_fn = HttpClientResultCallback;
 800dea2:	60ab      	str	r3, [r5, #8]
volatile uint16_t h=0;
 800dea4:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
strcpy(domain_name, "api.timezonedb.com");
 800dea8:	f000 fed6 	bl	800ec58 <strcpy>
strcpy(url, "/v2.1/get-time-zone?key=H77HZBELV1YH&format=json&by=zone&zone=Africa/Cairo");
 800deac:	49bd      	ldr	r1, [pc, #756]	; (800e1a4 <StartDefaultTask+0x31c>)
 800deae:	a81b      	add	r0, sp, #108	; 0x6c
 800deb0:	f000 fed2 	bl	800ec58 <strcpy>
sprintf(buf,"url:\n%s\n", url);
 800deb4:	aa1b      	add	r2, sp, #108	; 0x6c
 800deb6:	49bc      	ldr	r1, [pc, #752]	; (800e1a8 <StartDefaultTask+0x320>)
 800deb8:	48bc      	ldr	r0, [pc, #752]	; (800e1ac <StartDefaultTask+0x324>)
 800deba:	f000 fea9 	bl	800ec10 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800debe:	48bb      	ldr	r0, [pc, #748]	; (800e1ac <StartDefaultTask+0x324>)
 800dec0:	f7f2 f9be 	bl	8000240 <strlen>
 800dec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dec8:	b282      	uxth	r2, r0
 800deca:	49b8      	ldr	r1, [pc, #736]	; (800e1ac <StartDefaultTask+0x324>)
 800decc:	48b8      	ldr	r0, [pc, #736]	; (800e1b0 <StartDefaultTask+0x328>)
 800dece:	f7f4 fc91 	bl	80027f4 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,"\n\r",2,1000);
 800ded2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ded6:	2202      	movs	r2, #2
 800ded8:	49b6      	ldr	r1, [pc, #728]	; (800e1b4 <StartDefaultTask+0x32c>)
 800deda:	48b5      	ldr	r0, [pc, #724]	; (800e1b0 <StartDefaultTask+0x328>)
 800dedc:	f7f4 fc8a 	bl	80027f4 <HAL_UART_Transmit>
err_t error;
//dns_gethostbyname();
error = httpc_get_file_dns(domain_name, 80, url, conn_settings,RecvpayloadCallback, NULL, &connection);   //Send HTTP message
 800dee0:	ab0b      	add	r3, sp, #44	; 0x2c
 800dee2:	9501      	str	r5, [sp, #4]
 800dee4:	aa1b      	add	r2, sp, #108	; 0x6c
 800dee6:	9302      	str	r3, [sp, #8]
 800dee8:	2150      	movs	r1, #80	; 0x50
 800deea:	4bb3      	ldr	r3, [pc, #716]	; (800e1b8 <StartDefaultTask+0x330>)
 800deec:	a813      	add	r0, sp, #76	; 0x4c
sprintf(buf,"\n\rerror: %d\n", error);
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
osDelay(5000);
while(timerequestflag!=true){
 800deee:	4cb3      	ldr	r4, [pc, #716]	; (800e1bc <StartDefaultTask+0x334>)
error = httpc_get_file_dns(domain_name, 80, url, conn_settings,RecvpayloadCallback, NULL, &connection);   //Send HTTP message
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	462b      	mov	r3, r5
 800def4:	f7f7 f8ca 	bl	800508c <httpc_get_file_dns>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800def8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
sprintf(buf,"\n\rerror: %d\n", error);
 800defc:	4602      	mov	r2, r0
 800defe:	49b0      	ldr	r1, [pc, #704]	; (800e1c0 <StartDefaultTask+0x338>)
 800df00:	48aa      	ldr	r0, [pc, #680]	; (800e1ac <StartDefaultTask+0x324>)
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800df02:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
sprintf(buf,"\n\rerror: %d\n", error);
 800df06:	f000 fe83 	bl	800ec10 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df0a:	48a8      	ldr	r0, [pc, #672]	; (800e1ac <StartDefaultTask+0x324>)
 800df0c:	f7f2 f998 	bl	8000240 <strlen>
	osDelay(50);
	h++;
	if(h>800){
		sprintf(buf,"timeout with dns \n");
 800df10:	4eac      	ldr	r6, [pc, #688]	; (800e1c4 <StartDefaultTask+0x33c>)
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df12:	b282      	uxth	r2, r0
 800df14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df18:	49a4      	ldr	r1, [pc, #656]	; (800e1ac <StartDefaultTask+0x324>)
 800df1a:	48a5      	ldr	r0, [pc, #660]	; (800e1b0 <StartDefaultTask+0x328>)
 800df1c:	f7f4 fc6a 	bl	80027f4 <HAL_UART_Transmit>
osDelay(5000);
 800df20:	f241 3088 	movw	r0, #5000	; 0x1388
 800df24:	f7f4 ff22 	bl	8002d6c <osDelay>
while(timerequestflag!=true){
 800df28:	7823      	ldrb	r3, [r4, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 80d5 	beq.w	800e0da <StartDefaultTask+0x252>
		 timerequestflag=true;
	}
}

char * pch;
h=0;
 800df30:	2400      	movs	r4, #0
pch = strstr (timerbuffer,"formatted");
 800df32:	49a5      	ldr	r1, [pc, #660]	; (800e1c8 <StartDefaultTask+0x340>)
 800df34:	48a5      	ldr	r0, [pc, #660]	; (800e1cc <StartDefaultTask+0x344>)
h=0;
 800df36:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
pch = strstr (timerbuffer,"formatted");
 800df3a:	f000 feaa 	bl	800ec92 <strstr>
for(int j=0;j<33;j++){
 800df3e:	4623      	mov	r3, r4
 800df40:	3301      	adds	r3, #1
second[0] = *(pch);break;
case 30:
second[1] = *(pch);break;
default:
    break;}
	*pch++;
 800df42:	3001      	adds	r0, #1
for(int j=0;j<33;j++){
 800df44:	2b21      	cmp	r3, #33	; 0x21
 800df46:	f040 80ed 	bne.w	800e124 <StartDefaultTask+0x29c>
}
years_int = atoi(years);
 800df4a:	a805      	add	r0, sp, #20
 800df4c:	f000 fd51 	bl	800e9f2 <atoi>
sprintf(buf,"Value years is %d \n\r",years_int);
 800df50:	499f      	ldr	r1, [pc, #636]	; (800e1d0 <StartDefaultTask+0x348>)
 800df52:	b282      	uxth	r2, r0
years_int = atoi(years);
 800df54:	4681      	mov	r9, r0
sprintf(buf,"Value years is %d \n\r",years_int);
 800df56:	4895      	ldr	r0, [pc, #596]	; (800e1ac <StartDefaultTask+0x324>)
 800df58:	f000 fe5a 	bl	800ec10 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df5c:	4893      	ldr	r0, [pc, #588]	; (800e1ac <StartDefaultTask+0x324>)
 800df5e:	f7f2 f96f 	bl	8000240 <strlen>
 800df62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df66:	b282      	uxth	r2, r0
 800df68:	4990      	ldr	r1, [pc, #576]	; (800e1ac <StartDefaultTask+0x324>)
 800df6a:	4891      	ldr	r0, [pc, #580]	; (800e1b0 <StartDefaultTask+0x328>)
 800df6c:	f7f4 fc42 	bl	80027f4 <HAL_UART_Transmit>
Month_int = atoi(Month);
 800df70:	a806      	add	r0, sp, #24
 800df72:	f000 fd3e 	bl	800e9f2 <atoi>
sprintf(buf,"Value  Mon:%d \n\r",Month_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df76:	4997      	ldr	r1, [pc, #604]	; (800e1d4 <StartDefaultTask+0x34c>)
 800df78:	b282      	uxth	r2, r0
Month_int = atoi(Month);
 800df7a:	4680      	mov	r8, r0
sprintf(buf,"Value  Mon:%d \n\r",Month_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df7c:	488b      	ldr	r0, [pc, #556]	; (800e1ac <StartDefaultTask+0x324>)
 800df7e:	f000 fe47 	bl	800ec10 <siprintf>
 800df82:	488a      	ldr	r0, [pc, #552]	; (800e1ac <StartDefaultTask+0x324>)
 800df84:	f7f2 f95c 	bl	8000240 <strlen>
 800df88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df8c:	b282      	uxth	r2, r0
 800df8e:	4987      	ldr	r1, [pc, #540]	; (800e1ac <StartDefaultTask+0x324>)
 800df90:	4887      	ldr	r0, [pc, #540]	; (800e1b0 <StartDefaultTask+0x328>)
 800df92:	f7f4 fc2f 	bl	80027f4 <HAL_UART_Transmit>
days_int = atoi(days);
 800df96:	a809      	add	r0, sp, #36	; 0x24
 800df98:	f000 fd2b 	bl	800e9f2 <atoi>
sprintf(buf,"Value  days:%d \n\r",days_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800df9c:	498e      	ldr	r1, [pc, #568]	; (800e1d8 <StartDefaultTask+0x350>)
 800df9e:	b282      	uxth	r2, r0
days_int = atoi(days);
 800dfa0:	4607      	mov	r7, r0
sprintf(buf,"Value  days:%d \n\r",days_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dfa2:	4882      	ldr	r0, [pc, #520]	; (800e1ac <StartDefaultTask+0x324>)
 800dfa4:	f000 fe34 	bl	800ec10 <siprintf>
 800dfa8:	4880      	ldr	r0, [pc, #512]	; (800e1ac <StartDefaultTask+0x324>)
 800dfaa:	f7f2 f949 	bl	8000240 <strlen>
 800dfae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dfb2:	b282      	uxth	r2, r0
 800dfb4:	497d      	ldr	r1, [pc, #500]	; (800e1ac <StartDefaultTask+0x324>)
 800dfb6:	487e      	ldr	r0, [pc, #504]	; (800e1b0 <StartDefaultTask+0x328>)
 800dfb8:	f7f4 fc1c 	bl	80027f4 <HAL_UART_Transmit>
hours_int = atoi(hours);
 800dfbc:	a807      	add	r0, sp, #28
 800dfbe:	f000 fd18 	bl	800e9f2 <atoi>
sprintf(buf,"Value  ho:%d \n\r",hours_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dfc2:	4986      	ldr	r1, [pc, #536]	; (800e1dc <StartDefaultTask+0x354>)
 800dfc4:	b282      	uxth	r2, r0
hours_int = atoi(hours);
 800dfc6:	4606      	mov	r6, r0
sprintf(buf,"Value  ho:%d \n\r",hours_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dfc8:	4878      	ldr	r0, [pc, #480]	; (800e1ac <StartDefaultTask+0x324>)
 800dfca:	f000 fe21 	bl	800ec10 <siprintf>
 800dfce:	4877      	ldr	r0, [pc, #476]	; (800e1ac <StartDefaultTask+0x324>)
 800dfd0:	f7f2 f936 	bl	8000240 <strlen>
 800dfd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dfd8:	b282      	uxth	r2, r0
 800dfda:	4974      	ldr	r1, [pc, #464]	; (800e1ac <StartDefaultTask+0x324>)
 800dfdc:	4874      	ldr	r0, [pc, #464]	; (800e1b0 <StartDefaultTask+0x328>)
 800dfde:	f7f4 fc09 	bl	80027f4 <HAL_UART_Transmit>
mintues_int = atoi(mintues);
 800dfe2:	a808      	add	r0, sp, #32
 800dfe4:	f000 fd05 	bl	800e9f2 <atoi>
sprintf(buf,"Value mintues is %d \n\r",mintues_int);
 800dfe8:	497d      	ldr	r1, [pc, #500]	; (800e1e0 <StartDefaultTask+0x358>)
 800dfea:	b282      	uxth	r2, r0
mintues_int = atoi(mintues);
 800dfec:	4605      	mov	r5, r0
sprintf(buf,"Value mintues is %d \n\r",mintues_int);
 800dfee:	486f      	ldr	r0, [pc, #444]	; (800e1ac <StartDefaultTask+0x324>)
 800dff0:	f000 fe0e 	bl	800ec10 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800dff4:	486d      	ldr	r0, [pc, #436]	; (800e1ac <StartDefaultTask+0x324>)
 800dff6:	f7f2 f923 	bl	8000240 <strlen>
 800dffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dffe:	b282      	uxth	r2, r0
 800e000:	496a      	ldr	r1, [pc, #424]	; (800e1ac <StartDefaultTask+0x324>)
 800e002:	486b      	ldr	r0, [pc, #428]	; (800e1b0 <StartDefaultTask+0x328>)
 800e004:	f7f4 fbf6 	bl	80027f4 <HAL_UART_Transmit>
second_int = atoi(second);
 800e008:	a80a      	add	r0, sp, #40	; 0x28
 800e00a:	f000 fcf2 	bl	800e9f2 <atoi>
sprintf(buf,"Value second is %d \n\r",second_int);
 800e00e:	4975      	ldr	r1, [pc, #468]	; (800e1e4 <StartDefaultTask+0x35c>)
 800e010:	b282      	uxth	r2, r0
second_int = atoi(second);
 800e012:	4604      	mov	r4, r0
sprintf(buf,"Value second is %d \n\r",second_int);
 800e014:	4865      	ldr	r0, [pc, #404]	; (800e1ac <StartDefaultTask+0x324>)
 800e016:	f000 fdfb 	bl	800ec10 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800e01a:	4864      	ldr	r0, [pc, #400]	; (800e1ac <StartDefaultTask+0x324>)
 800e01c:	f7f2 f910 	bl	8000240 <strlen>
 800e020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e024:	b282      	uxth	r2, r0
 800e026:	4961      	ldr	r1, [pc, #388]	; (800e1ac <StartDefaultTask+0x324>)
 800e028:	4861      	ldr	r0, [pc, #388]	; (800e1b0 <StartDefaultTask+0x328>)
 800e02a:	f7f4 fbe3 	bl	80027f4 <HAL_UART_Transmit>

if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e02e:	486e      	ldr	r0, [pc, #440]	; (800e1e8 <StartDefaultTask+0x360>)
 800e030:	f7f3 fef4 	bl	8001e1c <HAL_RTC_Init>
 {
   Error_Handler();
 }

sDate.Year=years_int;
 800e034:	496d      	ldr	r1, [pc, #436]	; (800e1ec <StartDefaultTask+0x364>)
sDate.Month=Month_int;
sDate.Date=days_int;

if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN) != HAL_OK)
 800e036:	2200      	movs	r2, #0
 800e038:	486b      	ldr	r0, [pc, #428]	; (800e1e8 <StartDefaultTask+0x360>)
sDate.Year=years_int;
 800e03a:	f881 9003 	strb.w	r9, [r1, #3]
sDate.Month=Month_int;
 800e03e:	f881 8001 	strb.w	r8, [r1, #1]
sDate.Date=days_int;
 800e042:	708f      	strb	r7, [r1, #2]
if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN) != HAL_OK)
 800e044:	f7f3 ffa5 	bl	8001f92 <HAL_RTC_SetDate>
 {
   Error_Handler();
 }
sTime.Hours=hours_int;
 800e048:	4969      	ldr	r1, [pc, #420]	; (800e1f0 <StartDefaultTask+0x368>)
sTime.Minutes=mintues_int;
sTime.Seconds=second_int;
if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e04a:	2200      	movs	r2, #0
 800e04c:	4866      	ldr	r0, [pc, #408]	; (800e1e8 <StartDefaultTask+0x360>)
sTime.Hours=hours_int;
 800e04e:	700e      	strb	r6, [r1, #0]
sTime.Minutes=mintues_int;
 800e050:	704d      	strb	r5, [r1, #1]
sTime.Seconds=second_int;
 800e052:	708c      	strb	r4, [r1, #2]
if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e054:	f7f3 ff2f 	bl	8001eb6 <HAL_RTC_SetTime>
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800e058:	4e63      	ldr	r6, [pc, #396]	; (800e1e8 <StartDefaultTask+0x360>)
  sprintf((char *)showtime, "time %d:%d:%d\n\r", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800e05a:	4d66      	ldr	r5, [pc, #408]	; (800e1f4 <StartDefaultTask+0x36c>)
  sprintf((char *)showdate, "date %d-%d-%d\n\r", sdatestructureget.Date, sdatestructureget.Month,sdatestructureget.Year);
 800e05c:	4c66      	ldr	r4, [pc, #408]	; (800e1f8 <StartDefaultTask+0x370>)
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800e05e:	a90d      	add	r1, sp, #52	; 0x34
 800e060:	2200      	movs	r2, #0
 800e062:	4630      	mov	r0, r6
 800e064:	f7f3 fffd 	bl	8002062 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800e068:	a90c      	add	r1, sp, #48	; 0x30
 800e06a:	2200      	movs	r2, #0
 800e06c:	4630      	mov	r0, r6
 800e06e:	f7f4 f820 	bl	80020b2 <HAL_RTC_GetDate>
  sprintf((char *)showtime, "time %d:%d:%d\n\r", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800e072:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800e076:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800e07a:	4628      	mov	r0, r5
 800e07c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800e080:	9100      	str	r1, [sp, #0]
 800e082:	495e      	ldr	r1, [pc, #376]	; (800e1fc <StartDefaultTask+0x374>)
 800e084:	f000 fdc4 	bl	800ec10 <siprintf>
  HAL_UART_Transmit(&huart3,showtime,strlen(showtime),1000);
 800e088:	4628      	mov	r0, r5
 800e08a:	f7f2 f8d9 	bl	8000240 <strlen>
 800e08e:	4629      	mov	r1, r5
 800e090:	b282      	uxth	r2, r0
 800e092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e096:	4846      	ldr	r0, [pc, #280]	; (800e1b0 <StartDefaultTask+0x328>)
 800e098:	f7f4 fbac 	bl	80027f4 <HAL_UART_Transmit>
  sprintf((char *)showdate, "date %d-%d-%d\n\r", sdatestructureget.Date, sdatestructureget.Month,sdatestructureget.Year);
 800e09c:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
 800e0a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e0aa:	9100      	str	r1, [sp, #0]
 800e0ac:	4954      	ldr	r1, [pc, #336]	; (800e200 <StartDefaultTask+0x378>)
 800e0ae:	f000 fdaf 	bl	800ec10 <siprintf>
	HAL_UART_Transmit(&huart3,showdate,strlen(showdate),1000);
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7f2 f8c4 	bl	8000240 <strlen>
 800e0b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e0bc:	b282      	uxth	r2, r0
 800e0be:	4621      	mov	r1, r4
 800e0c0:	483b      	ldr	r0, [pc, #236]	; (800e1b0 <StartDefaultTask+0x328>)
 800e0c2:	f7f4 fb97 	bl	80027f4 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	//    osThreadTerminate(NULL);
	  RTC_CalendarShow(aShowTime, aShowDate);
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800e0c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e0ca:	484e      	ldr	r0, [pc, #312]	; (800e204 <StartDefaultTask+0x37c>)
 800e0cc:	f7f2 ffff 	bl	80010ce <HAL_GPIO_TogglePin>
	    osDelay(1000);
 800e0d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e0d4:	f7f4 fe4a 	bl	8002d6c <osDelay>
 800e0d8:	e7c1      	b.n	800e05e <StartDefaultTask+0x1d6>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800e0da:	2180      	movs	r1, #128	; 0x80
 800e0dc:	4628      	mov	r0, r5
 800e0de:	f7f2 fff6 	bl	80010ce <HAL_GPIO_TogglePin>
	osDelay(50);
 800e0e2:	2032      	movs	r0, #50	; 0x32
 800e0e4:	f7f4 fe42 	bl	8002d6c <osDelay>
	h++;
 800e0e8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	if(h>800){
 800e0f4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e0fe:	f67f af13 	bls.w	800df28 <StartDefaultTask+0xa0>
		sprintf(buf,"timeout with dns \n");
 800e102:	4631      	mov	r1, r6
 800e104:	4829      	ldr	r0, [pc, #164]	; (800e1ac <StartDefaultTask+0x324>)
 800e106:	f000 fda7 	bl	800ec58 <strcpy>
		HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800e10a:	4828      	ldr	r0, [pc, #160]	; (800e1ac <StartDefaultTask+0x324>)
 800e10c:	f7f2 f898 	bl	8000240 <strlen>
 800e110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e114:	b282      	uxth	r2, r0
 800e116:	4925      	ldr	r1, [pc, #148]	; (800e1ac <StartDefaultTask+0x324>)
 800e118:	4825      	ldr	r0, [pc, #148]	; (800e1b0 <StartDefaultTask+0x328>)
 800e11a:	f7f4 fb6b 	bl	80027f4 <HAL_UART_Transmit>
		 timerequestflag=true;
 800e11e:	2301      	movs	r3, #1
 800e120:	7023      	strb	r3, [r4, #0]
 800e122:	e701      	b.n	800df28 <StartDefaultTask+0xa0>
switch (j){
 800e124:	f1a3 020e 	sub.w	r2, r3, #14
 800e128:	2a10      	cmp	r2, #16
 800e12a:	f63f af09 	bhi.w	800df40 <StartDefaultTask+0xb8>
 800e12e:	a101      	add	r1, pc, #4	; (adr r1, 800e134 <StartDefaultTask+0x2ac>)
 800e130:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e134:	0800e179 	.word	0x0800e179
 800e138:	0800e181 	.word	0x0800e181
 800e13c:	0800df41 	.word	0x0800df41
 800e140:	0800e189 	.word	0x0800e189
 800e144:	0800e191 	.word	0x0800e191
 800e148:	0800df41 	.word	0x0800df41
 800e14c:	0800e209 	.word	0x0800e209
 800e150:	0800e211 	.word	0x0800e211
 800e154:	0800df41 	.word	0x0800df41
 800e158:	0800e219 	.word	0x0800e219
 800e15c:	0800e221 	.word	0x0800e221
 800e160:	0800df41 	.word	0x0800df41
 800e164:	0800e229 	.word	0x0800e229
 800e168:	0800e231 	.word	0x0800e231
 800e16c:	0800df41 	.word	0x0800df41
 800e170:	0800e239 	.word	0x0800e239
 800e174:	0800e241 	.word	0x0800e241
years[0] = *(pch);break;
 800e178:	7802      	ldrb	r2, [r0, #0]
 800e17a:	f88d 2014 	strb.w	r2, [sp, #20]
 800e17e:	e6df      	b.n	800df40 <StartDefaultTask+0xb8>
years[1] = *(pch);break;
 800e180:	7802      	ldrb	r2, [r0, #0]
 800e182:	f88d 2015 	strb.w	r2, [sp, #21]
 800e186:	e6db      	b.n	800df40 <StartDefaultTask+0xb8>
Month[0] = *(pch);break;
 800e188:	7802      	ldrb	r2, [r0, #0]
 800e18a:	f88d 2018 	strb.w	r2, [sp, #24]
 800e18e:	e6d7      	b.n	800df40 <StartDefaultTask+0xb8>
Month[1] = *(pch);break;
 800e190:	7802      	ldrb	r2, [r0, #0]
 800e192:	f88d 2019 	strb.w	r2, [sp, #25]
 800e196:	e6d3      	b.n	800df40 <StartDefaultTask+0xb8>
 800e198:	0800dd49 	.word	0x0800dd49
 800e19c:	0800dd85 	.word	0x0800dd85
 800e1a0:	0801284a 	.word	0x0801284a
 800e1a4:	0801285d 	.word	0x0801285d
 800e1a8:	080128a8 	.word	0x080128a8
 800e1ac:	2000c624 	.word	0x2000c624
 800e1b0:	2000c068 	.word	0x2000c068
 800e1b4:	0801294d 	.word	0x0801294d
 800e1b8:	0800ddf9 	.word	0x0800ddf9
 800e1bc:	2000706c 	.word	0x2000706c
 800e1c0:	080128b1 	.word	0x080128b1
 800e1c4:	080128be 	.word	0x080128be
 800e1c8:	080128d1 	.word	0x080128d1
 800e1cc:	2000c4ec 	.word	0x2000c4ec
 800e1d0:	080128db 	.word	0x080128db
 800e1d4:	080128f0 	.word	0x080128f0
 800e1d8:	08012901 	.word	0x08012901
 800e1dc:	08012913 	.word	0x08012913
 800e1e0:	08012923 	.word	0x08012923
 800e1e4:	0801293a 	.word	0x0801293a
 800e1e8:	2000c604 	.word	0x2000c604
 800e1ec:	20007050 	.word	0x20007050
 800e1f0:	20007054 	.word	0x20007054
 800e1f4:	2000701e 	.word	0x2000701e
 800e1f8:	20006fec 	.word	0x20006fec
 800e1fc:	08012950 	.word	0x08012950
 800e200:	08012960 	.word	0x08012960
 800e204:	40020400 	.word	0x40020400
days[0] = *(pch);break;
 800e208:	7802      	ldrb	r2, [r0, #0]
 800e20a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800e20e:	e697      	b.n	800df40 <StartDefaultTask+0xb8>
days[1] = *(pch);break;
 800e210:	7802      	ldrb	r2, [r0, #0]
 800e212:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 800e216:	e693      	b.n	800df40 <StartDefaultTask+0xb8>
hours[0] = *(pch);break;
 800e218:	7802      	ldrb	r2, [r0, #0]
 800e21a:	f88d 201c 	strb.w	r2, [sp, #28]
 800e21e:	e68f      	b.n	800df40 <StartDefaultTask+0xb8>
hours[1] = *(pch);break;
 800e220:	7802      	ldrb	r2, [r0, #0]
 800e222:	f88d 201d 	strb.w	r2, [sp, #29]
 800e226:	e68b      	b.n	800df40 <StartDefaultTask+0xb8>
mintues[0] = *(pch);break;
 800e228:	7802      	ldrb	r2, [r0, #0]
 800e22a:	f88d 2020 	strb.w	r2, [sp, #32]
 800e22e:	e687      	b.n	800df40 <StartDefaultTask+0xb8>
mintues[1] = *(pch);break;
 800e230:	7802      	ldrb	r2, [r0, #0]
 800e232:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800e236:	e683      	b.n	800df40 <StartDefaultTask+0xb8>
second[0] = *(pch);break;
 800e238:	7802      	ldrb	r2, [r0, #0]
 800e23a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800e23e:	e67f      	b.n	800df40 <StartDefaultTask+0xb8>
second[1] = *(pch);break;
 800e240:	7802      	ldrb	r2, [r0, #0]
 800e242:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e246:	e67b      	b.n	800df40 <StartDefaultTask+0xb8>

0800e248 <__io_putchar>:
{
 800e248:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 800e24a:	4d08      	ldr	r5, [pc, #32]	; (800e26c <__io_putchar+0x24>)
{
 800e24c:	ac02      	add	r4, sp, #8
 800e24e:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 800e252:	f247 5330 	movw	r3, #30000	; 0x7530
 800e256:	2201      	movs	r2, #1
 800e258:	4621      	mov	r1, r4
 800e25a:	4628      	mov	r0, r5
 800e25c:	f7f4 faca 	bl	80027f4 <HAL_UART_Transmit>
 800e260:	2800      	cmp	r0, #0
 800e262:	d1f6      	bne.n	800e252 <__io_putchar+0xa>
}
 800e264:	9801      	ldr	r0, [sp, #4]
 800e266:	b003      	add	sp, #12
 800e268:	bd30      	pop	{r4, r5, pc}
 800e26a:	bf00      	nop
 800e26c:	2000c068 	.word	0x2000c068

0800e270 <__io_getchar>:
{
 800e270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ch = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	ac02      	add	r4, sp, #8
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 800e276:	4d08      	ldr	r5, [pc, #32]	; (800e298 <__io_getchar+0x28>)
  uint8_t ch = 0;
 800e278:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 800e27c:	f247 5330 	movw	r3, #30000	; 0x7530
 800e280:	2201      	movs	r2, #1
 800e282:	4621      	mov	r1, r4
 800e284:	4628      	mov	r0, r5
 800e286:	f7f4 fb0d 	bl	80028a4 <HAL_UART_Receive>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d1f6      	bne.n	800e27c <__io_getchar+0xc>
}
 800e28e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e292:	b003      	add	sp, #12
 800e294:	bd30      	pop	{r4, r5, pc}
 800e296:	bf00      	nop
 800e298:	2000c068 	.word	0x2000c068

0800e29c <SystemClock_Config>:
{
 800e29c:	b510      	push	{r4, lr}
 800e29e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2a0:	2234      	movs	r2, #52	; 0x34
 800e2a2:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e2a4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2a6:	a807      	add	r0, sp, #28
 800e2a8:	f000 fc24 	bl	800eaf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e2ac:	2214      	movs	r2, #20
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	a802      	add	r0, sp, #8
 800e2b2:	f000 fc1f 	bl	800eaf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	2290      	movs	r2, #144	; 0x90
 800e2ba:	a814      	add	r0, sp, #80	; 0x50
 800e2bc:	f000 fc1a 	bl	800eaf4 <memset>
  HAL_PWR_EnableBkUpAccess();
 800e2c0:	f7f2 ffb6 	bl	8001230 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2c4:	4b22      	ldr	r3, [pc, #136]	; (800e350 <SystemClock_Config+0xb4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e2c6:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e2ce:	641a      	str	r2, [r3, #64]	; 0x40
 800e2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2da:	4b1e      	ldr	r3, [pc, #120]	; (800e354 <SystemClock_Config+0xb8>)
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800e2e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e2e4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2e8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e2ea:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e2ec:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e2f2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e2f4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e2f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2fa:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e2fc:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e2fe:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e300:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e302:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e304:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800e306:	22d8      	movs	r2, #216	; 0xd8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e308:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 216;
 800e30a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800e30c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e30e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e310:	f7f2 ffce 	bl	80012b0 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e314:	f7f2 ff94 	bl	8001240 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e318:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e31a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e31c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e31e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e320:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800e324:	2107      	movs	r1, #7
 800e326:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e328:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e32e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e330:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800e332:	f7f3 f9af 	bl	8001694 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800e336:	4b08      	ldr	r3, [pc, #32]	; (800e358 <SystemClock_Config+0xbc>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e338:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800e33a:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800e33c:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800e33e:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e342:	9433      	str	r4, [sp, #204]	; 0xcc
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800e344:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e346:	f7f3 fa89 	bl	800185c <HAL_RCCEx_PeriphCLKConfig>
}
 800e34a:	b038      	add	sp, #224	; 0xe0
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	40023800 	.word	0x40023800
 800e354:	40007000 	.word	0x40007000
 800e358:	00200120 	.word	0x00200120

0800e35c <main>:
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08e      	sub	sp, #56	; 0x38
/* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
MPU_InitStruct.Enable = MPU_REGION_ENABLE;
MPU_InitStruct.BaseAddress = 0x2007C000;
MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800e360:	2400      	movs	r4, #0
HAL_MPU_Disable();
 800e362:	f7f2 f9d5 	bl	8000710 <HAL_MPU_Disable>
MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800e366:	2501      	movs	r5, #1
MPU_InitStruct.BaseAddress = 0x2007C000;
 800e368:	4fad      	ldr	r7, [pc, #692]	; (800e620 <main+0x2c4>)
MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800e36a:	230d      	movs	r3, #13
MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800e36c:	2603      	movs	r6, #3
MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
MPU_InitStruct.Number = MPU_REGION_NUMBER0;
MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
MPU_InitStruct.SubRegionDisable = 0x00;
MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e36e:	a807      	add	r0, sp, #28
MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800e370:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800e374:	f88d 501c 	strb.w	r5, [sp, #28]
MPU_InitStruct.BaseAddress = 0x2007C000;
 800e378:	9708      	str	r7, [sp, #32]
MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800e37a:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800e37e:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800e382:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800e386:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800e38a:	f88d 401d 	strb.w	r4, [sp, #29]
MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800e38e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
MPU_InitStruct.SubRegionDisable = 0x00;
 800e392:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800e396:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e39a:	f7f2 f9db 	bl	8000754 <HAL_MPU_ConfigRegion>
/* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
MPU_InitStruct.Enable = MPU_REGION_ENABLE;
MPU_InitStruct.BaseAddress = 0x2007C000;
MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800e39e:	2307      	movs	r3, #7
MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
MPU_InitStruct.Number = MPU_REGION_NUMBER1;
MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
MPU_InitStruct.SubRegionDisable = 0x00;
MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e3a0:	a807      	add	r0, sp, #28
MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800e3a2:	f88d 501c 	strb.w	r5, [sp, #28]
MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800e3a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
MPU_InitStruct.BaseAddress = 0x2007C000;
 800e3aa:	9708      	str	r7, [sp, #32]
MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800e3ac:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800e3b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800e3b4:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800e3b8:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800e3bc:	f88d 501d 	strb.w	r5, [sp, #29]
MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800e3c0:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
MPU_InitStruct.SubRegionDisable = 0x00;
 800e3c4:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800e3c8:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e3cc:	f7f2 f9c2 	bl	8000754 <HAL_MPU_ConfigRegion>

	  /* Enable the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800e3d0:	2004      	movs	r0, #4
 800e3d2:	f7f2 f9ad 	bl	8000730 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800e3d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e3da:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800e3de:	4b91      	ldr	r3, [pc, #580]	; (800e624 <main+0x2c8>)
 800e3e0:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e3e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e3e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800e3ec:	695a      	ldr	r2, [r3, #20]
 800e3ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e3f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e3f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e3f8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e3fc:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e400:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800e404:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e408:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e40c:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e410:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800e414:	07a5      	lsls	r5, r4, #30
 800e416:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e418:	ea02 0e06 	and.w	lr, r2, r6
 800e41c:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e41e:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e420:	ea40 070e 	orr.w	r7, r0, lr
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800e424:	3901      	subs	r1, #1
 800e426:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e42a:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800e42e:	1c4f      	adds	r7, r1, #1
 800e430:	d1f6      	bne.n	800e420 <main+0xc4>
 800e432:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 800e434:	f112 0f20 	cmn.w	r2, #32
 800e438:	d1ee      	bne.n	800e418 <main+0xbc>
 800e43a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e43e:	695a      	ldr	r2, [r3, #20]
 800e440:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e444:	615a      	str	r2, [r3, #20]
 800e446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e44a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800e44e:	f7f2 f8d7 	bl	8000600 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e452:	2400      	movs	r4, #0
  SystemClock_Config();
 800e454:	f7ff ff22 	bl	800e29c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e458:	2214      	movs	r2, #20
 800e45a:	2100      	movs	r1, #0
 800e45c:	a807      	add	r0, sp, #28
 800e45e:	f000 fb49 	bl	800eaf4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e462:	4b71      	ldr	r3, [pc, #452]	; (800e628 <main+0x2cc>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e464:	f244 0181 	movw	r1, #16513	; 0x4081
 800e468:	4870      	ldr	r0, [pc, #448]	; (800e62c <main+0x2d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e46c:	2601      	movs	r6, #1
  hrtc.Instance = RTC;
 800e46e:	4d70      	ldr	r5, [pc, #448]	; (800e630 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e470:	f042 0204 	orr.w	r2, r2, #4
 800e474:	631a      	str	r2, [r3, #48]	; 0x30
 800e476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e478:	f002 0204 	and.w	r2, r2, #4
 800e47c:	9201      	str	r2, [sp, #4]
 800e47e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e486:	631a      	str	r2, [r3, #48]	; 0x30
 800e488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e48a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e48e:	9202      	str	r2, [sp, #8]
 800e490:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e494:	f042 0201 	orr.w	r2, r2, #1
 800e498:	631a      	str	r2, [r3, #48]	; 0x30
 800e49a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e49c:	f002 0201 	and.w	r2, r2, #1
 800e4a0:	9203      	str	r2, [sp, #12]
 800e4a2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4a6:	f042 0202 	orr.w	r2, r2, #2
 800e4aa:	631a      	str	r2, [r3, #48]	; 0x30
 800e4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4ae:	f002 0202 	and.w	r2, r2, #2
 800e4b2:	9204      	str	r2, [sp, #16]
 800e4b4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e4b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4b8:	f042 0208 	orr.w	r2, r2, #8
 800e4bc:	631a      	str	r2, [r3, #48]	; 0x30
 800e4be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4c0:	f002 0208 	and.w	r2, r2, #8
 800e4c4:	9205      	str	r2, [sp, #20]
 800e4c6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ce:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e4d0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d8:	9306      	str	r3, [sp, #24]
 800e4da:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e4dc:	f7f2 fdf2 	bl	80010c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2140      	movs	r1, #64	; 0x40
 800e4e4:	4853      	ldr	r0, [pc, #332]	; (800e634 <main+0x2d8>)
 800e4e6:	f7f2 fded 	bl	80010c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800e4ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800e4ee:	a907      	add	r1, sp, #28
 800e4f0:	4851      	ldr	r0, [pc, #324]	; (800e638 <main+0x2dc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800e4f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e4f4:	4b51      	ldr	r3, [pc, #324]	; (800e63c <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e4f8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800e4fa:	f7f2 fcf9 	bl	8000ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800e4fe:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e502:	a907      	add	r1, sp, #28
 800e504:	4849      	ldr	r0, [pc, #292]	; (800e62c <main+0x2d0>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800e506:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e508:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e50a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e50c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e50e:	f7f2 fcef 	bl	8000ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e512:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e514:	a907      	add	r1, sp, #28
 800e516:	4847      	ldr	r0, [pc, #284]	; (800e634 <main+0x2d8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e518:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e51a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e51c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e51e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e520:	f7f2 fce6 	bl	8000ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e524:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e526:	a907      	add	r1, sp, #28
 800e528:	4842      	ldr	r0, [pc, #264]	; (800e634 <main+0x2d8>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e52a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e52c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e52e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e530:	f7f2 fcde 	bl	8000ef0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e534:	4622      	mov	r2, r4
 800e536:	2105      	movs	r1, #5
 800e538:	2028      	movs	r0, #40	; 0x28
 800e53a:	f7f2 f8a3 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e53e:	2028      	movs	r0, #40	; 0x28
 800e540:	f7f2 f8d8 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 800e544:	4b3e      	ldr	r3, [pc, #248]	; (800e640 <main+0x2e4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e546:	4628      	mov	r0, r5
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e548:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e54a:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e54c:	61ac      	str	r4, [r5, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e54e:	e885 0018 	stmia.w	r5, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 800e552:	237f      	movs	r3, #127	; 0x7f
 800e554:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 800e556:	23ff      	movs	r3, #255	; 0xff
 800e558:	60eb      	str	r3, [r5, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e55a:	f7f3 fc5f 	bl	8001e1c <HAL_RTC_Init>
  sTime.Hours = 0x0;
 800e55e:	4939      	ldr	r1, [pc, #228]	; (800e644 <main+0x2e8>)
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800e560:	4632      	mov	r2, r6
 800e562:	4628      	mov	r0, r5
  sTime.Hours = 0x0;
 800e564:	700c      	strb	r4, [r1, #0]
  sTime.Minutes = 0x0;
 800e566:	704c      	strb	r4, [r1, #1]
  sTime.Seconds = 0x0;
 800e568:	708c      	strb	r4, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e56a:	610c      	str	r4, [r1, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e56c:	614c      	str	r4, [r1, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800e56e:	f7f3 fca2 	bl	8001eb6 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800e572:	4935      	ldr	r1, [pc, #212]	; (800e648 <main+0x2ec>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800e574:	4632      	mov	r2, r6
 800e576:	4628      	mov	r0, r5
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e578:	2506      	movs	r5, #6
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800e57a:	700e      	strb	r6, [r1, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800e57c:	704e      	strb	r6, [r1, #1]
  sDate.Date = 0x1;
 800e57e:	708e      	strb	r6, [r1, #2]
  sDate.Year = 0x0;
 800e580:	70cc      	strb	r4, [r1, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800e582:	f7f3 fd06 	bl	8001f92 <HAL_RTC_SetDate>
  hspi2.Instance = SPI2;
 800e586:	4831      	ldr	r0, [pc, #196]	; (800e64c <main+0x2f0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e588:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e58c:	4a30      	ldr	r2, [pc, #192]	; (800e650 <main+0x2f4>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e58e:	6084      	str	r4, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e590:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e592:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e594:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e596:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e598:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e59a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e59c:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e59e:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800e5a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e5a6:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e5a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5ac:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 800e5ae:	2307      	movs	r3, #7
 800e5b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e5b6:	f7f3 fd9c 	bl	80020f2 <HAL_SPI_Init>
  huart3.Instance = USART3;
 800e5ba:	4826      	ldr	r0, [pc, #152]	; (800e654 <main+0x2f8>)
  huart3.Init.BaudRate = 115200;
 800e5bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e5c0:	4925      	ldr	r1, [pc, #148]	; (800e658 <main+0x2fc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e5c2:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e5c4:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e5c6:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5c8:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5ca:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5cc:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5ce:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800e5d0:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e5d4:	230c      	movs	r3, #12
 800e5d6:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e5d8:	f7f4 fa06 	bl	80029e8 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5dc:	481f      	ldr	r0, [pc, #124]	; (800e65c <main+0x300>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e5de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e5e2:	61c6      	str	r6, [r0, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e5e4:	62c6      	str	r6, [r0, #44]	; 0x2c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024*4);
 800e5e6:	4e1e      	ldr	r6, [pc, #120]	; (800e660 <main+0x304>)
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5e8:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5ea:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5ec:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5ee:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e5f0:	e880 0028 	stmia.w	r0, {r3, r5}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5f4:	2302      	movs	r3, #2
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024*4);
 800e5f6:	ad07      	add	r5, sp, #28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5f8:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5fa:	6183      	str	r3, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5fc:	f7f2 fd7a 	bl	80010f4 <HAL_PCD_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024*4);
 800e600:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e604:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e608:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800e60c:	4621      	mov	r1, r4
 800e60e:	a807      	add	r0, sp, #28
 800e610:	f7f4 fb84 	bl	8002d1c <osThreadCreate>
 800e614:	4b13      	ldr	r3, [pc, #76]	; (800e664 <main+0x308>)
 800e616:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800e618:	f7f4 fb74 	bl	8002d04 <osKernelStart>
 800e61c:	e7fe      	b.n	800e61c <main+0x2c0>
 800e61e:	bf00      	nop
 800e620:	2007c000 	.word	0x2007c000
 800e624:	e000ed00 	.word	0xe000ed00
 800e628:	40023800 	.word	0x40023800
 800e62c:	40020400 	.word	0x40020400
 800e630:	2000c604 	.word	0x2000c604
 800e634:	40021800 	.word	0x40021800
 800e638:	40020800 	.word	0x40020800
 800e63c:	10110000 	.word	0x10110000
 800e640:	40002800 	.word	0x40002800
 800e644:	20007054 	.word	0x20007054
 800e648:	20007050 	.word	0x20007050
 800e64c:	2000c000 	.word	0x2000c000
 800e650:	40003800 	.word	0x40003800
 800e654:	2000c068 	.word	0x2000c068
 800e658:	40004800 	.word	0x40004800
 800e65c:	2000c0e8 	.word	0x2000c0e8
 800e660:	0800ff14 	.word	0x0800ff14
 800e664:	2000bffc 	.word	0x2000bffc

0800e668 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800e668:	6803      	ldr	r3, [r0, #0]
 800e66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e66e:	d101      	bne.n	800e674 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800e670:	f7f1 bfd2 	b.w	8000618 <HAL_IncTick>
 800e674:	4770      	bx	lr
	...

0800e678 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e678:	4b0e      	ldr	r3, [pc, #56]	; (800e6b4 <HAL_MspInit+0x3c>)
{
 800e67a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e67c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e67e:	210f      	movs	r1, #15
 800e680:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800e684:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e688:	641a      	str	r2, [r3, #64]	; 0x40
 800e68a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e68c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e690:	9200      	str	r2, [sp, #0]
 800e692:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e69a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e69c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e6a8:	f7f1 ffec 	bl	8000684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e6ac:	b003      	add	sp, #12
 800e6ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6b2:	bf00      	nop
 800e6b4:	40023800 	.word	0x40023800

0800e6b8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800e6b8:	6802      	ldr	r2, [r0, #0]
 800e6ba:	4b04      	ldr	r3, [pc, #16]	; (800e6cc <HAL_RTC_MspInit+0x14>)
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d104      	bne.n	800e6ca <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e6c0:	4a03      	ldr	r2, [pc, #12]	; (800e6d0 <HAL_RTC_MspInit+0x18>)
 800e6c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6c8:	6713      	str	r3, [r2, #112]	; 0x70
 800e6ca:	4770      	bx	lr
 800e6cc:	40002800 	.word	0x40002800
 800e6d0:	40023800 	.word	0x40023800

0800e6d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e6d4:	b570      	push	{r4, r5, r6, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6da:	2214      	movs	r2, #20
 800e6dc:	2100      	movs	r1, #0
 800e6de:	a803      	add	r0, sp, #12
 800e6e0:	f000 fa08 	bl	800eaf4 <memset>
  if(hspi->Instance==SPI2)
 800e6e4:	6822      	ldr	r2, [r4, #0]
 800e6e6:	4b1d      	ldr	r3, [pc, #116]	; (800e75c <HAL_SPI_MspInit+0x88>)
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d135      	bne.n	800e758 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e6ec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6f2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e6f4:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e6f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e6f8:	4819      	ldr	r0, [pc, #100]	; (800e760 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e6fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6fe:	641a      	str	r2, [r3, #64]	; 0x40
 800e700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e702:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800e706:	9200      	str	r2, [sp, #0]
 800e708:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e70a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e70c:	f042 0204 	orr.w	r2, r2, #4
 800e710:	631a      	str	r2, [r3, #48]	; 0x30
 800e712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e714:	f002 0204 	and.w	r2, r2, #4
 800e718:	9201      	str	r2, [sp, #4]
 800e71a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e71c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e71e:	f042 0202 	orr.w	r2, r2, #2
 800e722:	631a      	str	r2, [r3, #48]	; 0x30
 800e724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e726:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e728:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e72c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e72e:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e730:	9302      	str	r3, [sp, #8]
 800e732:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e734:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e736:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e73a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e73c:	f7f2 fbd8 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e740:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e744:	a903      	add	r1, sp, #12
 800e746:	4807      	ldr	r0, [pc, #28]	; (800e764 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e748:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e74a:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e74c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e74e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e750:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e752:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e754:	f7f2 fbcc 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e758:	b008      	add	sp, #32
 800e75a:	bd70      	pop	{r4, r5, r6, pc}
 800e75c:	40003800 	.word	0x40003800
 800e760:	40020800 	.word	0x40020800
 800e764:	40020400 	.word	0x40020400

0800e768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e768:	b510      	push	{r4, lr}
 800e76a:	b088      	sub	sp, #32
 800e76c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e76e:	2214      	movs	r2, #20
 800e770:	2100      	movs	r1, #0
 800e772:	a803      	add	r0, sp, #12
 800e774:	f000 f9be 	bl	800eaf4 <memset>
  if(huart->Instance==USART3)
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	4b13      	ldr	r3, [pc, #76]	; (800e7c8 <HAL_UART_MspInit+0x60>)
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d120      	bne.n	800e7c2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800e780:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e784:	a903      	add	r1, sp, #12
 800e786:	4811      	ldr	r0, [pc, #68]	; (800e7cc <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800e788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e78a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e78e:	641a      	str	r2, [r3, #64]	; 0x40
 800e790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e792:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800e796:	9201      	str	r2, [sp, #4]
 800e798:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e79c:	f042 0208 	orr.w	r2, r2, #8
 800e7a0:	631a      	str	r2, [r3, #48]	; 0x30
 800e7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a4:	f003 0308 	and.w	r3, r3, #8
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800e7ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e7b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e7ba:	2307      	movs	r3, #7
 800e7bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e7be:	f7f2 fb97 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e7c2:	b008      	add	sp, #32
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop
 800e7c8:	40004800 	.word	0x40004800
 800e7cc:	40020c00 	.word	0x40020c00

0800e7d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	b088      	sub	sp, #32
 800e7d4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7d6:	2214      	movs	r2, #20
 800e7d8:	2100      	movs	r1, #0
 800e7da:	a803      	add	r0, sp, #12
 800e7dc:	f000 f98a 	bl	800eaf4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7e6:	d132      	bne.n	800e84e <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7e8:	4c1a      	ldr	r4, [pc, #104]	; (800e854 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7ea:	a903      	add	r1, sp, #12
 800e7ec:	481a      	ldr	r0, [pc, #104]	; (800e858 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7f0:	f043 0301 	orr.w	r3, r3, #1
 800e7f4:	6323      	str	r3, [r4, #48]	; 0x30
 800e7f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e800:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e804:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e806:	2302      	movs	r3, #2
 800e808:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e80a:	2303      	movs	r3, #3
 800e80c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e80e:	230a      	movs	r3, #10
 800e810:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e812:	f7f2 fb6d 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e816:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e81a:	a903      	add	r1, sp, #12
 800e81c:	480e      	ldr	r0, [pc, #56]	; (800e858 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e81e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e820:	2300      	movs	r3, #0
 800e822:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e824:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e826:	f7f2 fb63 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e830:	6363      	str	r3, [r4, #52]	; 0x34
 800e832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e838:	9301      	str	r3, [sp, #4]
 800e83a:	9b01      	ldr	r3, [sp, #4]
 800e83c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e83e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e842:	6463      	str	r3, [r4, #68]	; 0x44
 800e844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e84a:	9302      	str	r3, [sp, #8]
 800e84c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800e84e:	b008      	add	sp, #32
 800e850:	bd10      	pop	{r4, pc}
 800e852:	bf00      	nop
 800e854:	40023800 	.word	0x40023800
 800e858:	40020000 	.word	0x40020000

0800e85c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e85c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800e85e:	4601      	mov	r1, r0
{
 800e860:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800e862:	2200      	movs	r2, #0
 800e864:	201c      	movs	r0, #28
 800e866:	f7f1 ff0d 	bl	8000684 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800e86a:	201c      	movs	r0, #28
 800e86c:	f7f1 ff42 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e870:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e872:	a901      	add	r1, sp, #4
 800e874:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800e878:	4c14      	ldr	r4, [pc, #80]	; (800e8cc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e87a:	f042 0201 	orr.w	r2, r2, #1
 800e87e:	641a      	str	r2, [r3, #64]	; 0x40
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	9302      	str	r3, [sp, #8]
 800e888:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e88a:	f7f2 ffc9 	bl	8001820 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800e88e:	f7f2 ffa7 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800e892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800e896:	0040      	lsls	r0, r0, #1
  htim2.Instance = TIM2;
 800e898:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800e89a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e89e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	; (800e8d0 <HAL_InitTick+0x74>)
 800e8a2:	fbb0 f0f3 	udiv	r0, r0, r3
 800e8a6:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800e8a8:	2300      	movs	r3, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 800e8aa:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800e8ac:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 800e8ae:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8b0:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800e8b2:	f7f3 fda5 	bl	8002400 <HAL_TIM_Base_Init>
 800e8b6:	b920      	cbnz	r0, 800e8c2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f7f3 fc71 	bl	80021a0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800e8be:	b008      	add	sp, #32
 800e8c0:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800e8c2:	2001      	movs	r0, #1
 800e8c4:	e7fb      	b.n	800e8be <HAL_InitTick+0x62>
 800e8c6:	bf00      	nop
 800e8c8:	40023800 	.word	0x40023800
 800e8cc:	2000d9ac 	.word	0x2000d9ac
 800e8d0:	000f4240 	.word	0x000f4240

0800e8d4 <NMI_Handler>:
 800e8d4:	4770      	bx	lr

0800e8d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e8d6:	e7fe      	b.n	800e8d6 <HardFault_Handler>

0800e8d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e8d8:	e7fe      	b.n	800e8d8 <MemManage_Handler>

0800e8da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e8da:	e7fe      	b.n	800e8da <BusFault_Handler>

0800e8dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e8dc:	e7fe      	b.n	800e8dc <UsageFault_Handler>

0800e8de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e8de:	4770      	bx	lr

0800e8e0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e8e0:	4801      	ldr	r0, [pc, #4]	; (800e8e8 <TIM2_IRQHandler+0x8>)
 800e8e2:	f7f3 bc77 	b.w	80021d4 <HAL_TIM_IRQHandler>
 800e8e6:	bf00      	nop
 800e8e8:	2000d9ac 	.word	0x2000d9ac

0800e8ec <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800e8ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e8f0:	f7f2 bbf4 	b.w	80010dc <HAL_GPIO_EXTI_IRQHandler>

0800e8f4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <ETH_IRQHandler+0x8>)
 800e8f6:	f7f2 b91a 	b.w	8000b2e <HAL_ETH_IRQHandler>
 800e8fa:	bf00      	nop
 800e8fc:	2000bf00 	.word	0x2000bf00

0800e900 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	460e      	mov	r6, r1
 800e904:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e906:	460c      	mov	r4, r1
 800e908:	1ba3      	subs	r3, r4, r6
 800e90a:	429d      	cmp	r5, r3
 800e90c:	dc01      	bgt.n	800e912 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800e90e:	4628      	mov	r0, r5
 800e910:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800e912:	f7ff fcad 	bl	800e270 <__io_getchar>
 800e916:	f804 0b01 	strb.w	r0, [r4], #1
 800e91a:	e7f5      	b.n	800e908 <_read+0x8>

0800e91c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	460e      	mov	r6, r1
 800e920:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e922:	460c      	mov	r4, r1
 800e924:	1ba3      	subs	r3, r4, r6
 800e926:	429d      	cmp	r5, r3
 800e928:	dc01      	bgt.n	800e92e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800e92a:	4628      	mov	r0, r5
 800e92c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800e92e:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e932:	f7ff fc89 	bl	800e248 <__io_putchar>
 800e936:	e7f5      	b.n	800e924 <_write+0x8>

0800e938 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <_sbrk+0x28>)
{
 800e93a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800e93c:	6819      	ldr	r1, [r3, #0]
 800e93e:	b909      	cbnz	r1, 800e944 <_sbrk+0xc>
		heap_end = &end;
 800e940:	4908      	ldr	r1, [pc, #32]	; (800e964 <_sbrk+0x2c>)
 800e942:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800e944:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800e946:	4669      	mov	r1, sp
 800e948:	4402      	add	r2, r0
 800e94a:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800e94c:	bf83      	ittte	hi
 800e94e:	220c      	movhi	r2, #12
 800e950:	4b05      	ldrhi	r3, [pc, #20]	; (800e968 <_sbrk+0x30>)
		return (caddr_t) -1;
 800e952:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800e956:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800e958:	bf88      	it	hi
 800e95a:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20007070 	.word	0x20007070
 800e964:	2000d9f0 	.word	0x2000d9f0
 800e968:	2000bef8 	.word	0x2000bef8

0800e96c <_close>:

int _close(int file)
{
	return -1;
}
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	4770      	bx	lr

0800e972 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800e972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800e976:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800e978:	604b      	str	r3, [r1, #4]
}
 800e97a:	4770      	bx	lr

0800e97c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800e97c:	2001      	movs	r0, #1
 800e97e:	4770      	bx	lr

0800e980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800e980:	2000      	movs	r0, #0
 800e982:	4770      	bx	lr

0800e984 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <SystemInit+0x18>)
 800e986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e98a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800e98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e996:	609a      	str	r2, [r3, #8]
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	e000ed00 	.word	0xe000ed00

0800e9a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e9a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e9d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e9a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e9a6:	e003      	b.n	800e9b0 <LoopCopyDataInit>

0800e9a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e9a8:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e9aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e9ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e9ae:	3104      	adds	r1, #4

0800e9b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e9b0:	480b      	ldr	r0, [pc, #44]	; (800e9e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e9b2:	4b0c      	ldr	r3, [pc, #48]	; (800e9e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e9b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e9b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e9b8:	d3f6      	bcc.n	800e9a8 <CopyDataInit>
  ldr  r2, =_sbss
 800e9ba:	4a0b      	ldr	r2, [pc, #44]	; (800e9e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e9bc:	e002      	b.n	800e9c4 <LoopFillZerobss>

0800e9be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e9be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e9c0:	f842 3b04 	str.w	r3, [r2], #4

0800e9c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e9c4:	4b09      	ldr	r3, [pc, #36]	; (800e9ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e9c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e9c8:	d3f9      	bcc.n	800e9be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e9ca:	f7ff ffdb 	bl	800e984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e9ce:	f000 f815 	bl	800e9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e9d2:	f7ff fcc3 	bl	800e35c <main>
  bx  lr    
 800e9d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e9d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e9dc:	08012b48 	.word	0x08012b48
  ldr  r0, =_sdata
 800e9e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e9e4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800e9e8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800e9ec:	2000d9ec 	.word	0x2000d9ec

0800e9f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e9f0:	e7fe      	b.n	800e9f0 <ADC_IRQHandler>

0800e9f2 <atoi>:
 800e9f2:	220a      	movs	r2, #10
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	f000 b9e7 	b.w	800edc8 <strtol>
	...

0800e9fc <__libc_init_array>:
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	4e0d      	ldr	r6, [pc, #52]	; (800ea34 <__libc_init_array+0x38>)
 800ea00:	4c0d      	ldr	r4, [pc, #52]	; (800ea38 <__libc_init_array+0x3c>)
 800ea02:	1ba4      	subs	r4, r4, r6
 800ea04:	10a4      	asrs	r4, r4, #2
 800ea06:	2500      	movs	r5, #0
 800ea08:	42a5      	cmp	r5, r4
 800ea0a:	d109      	bne.n	800ea20 <__libc_init_array+0x24>
 800ea0c:	4e0b      	ldr	r6, [pc, #44]	; (800ea3c <__libc_init_array+0x40>)
 800ea0e:	4c0c      	ldr	r4, [pc, #48]	; (800ea40 <__libc_init_array+0x44>)
 800ea10:	f001 fa66 	bl	800fee0 <_init>
 800ea14:	1ba4      	subs	r4, r4, r6
 800ea16:	10a4      	asrs	r4, r4, #2
 800ea18:	2500      	movs	r5, #0
 800ea1a:	42a5      	cmp	r5, r4
 800ea1c:	d105      	bne.n	800ea2a <__libc_init_array+0x2e>
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}
 800ea20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea24:	4798      	blx	r3
 800ea26:	3501      	adds	r5, #1
 800ea28:	e7ee      	b.n	800ea08 <__libc_init_array+0xc>
 800ea2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea2e:	4798      	blx	r3
 800ea30:	3501      	adds	r5, #1
 800ea32:	e7f2      	b.n	800ea1a <__libc_init_array+0x1e>
 800ea34:	08012b40 	.word	0x08012b40
 800ea38:	08012b40 	.word	0x08012b40
 800ea3c:	08012b40 	.word	0x08012b40
 800ea40:	08012b44 	.word	0x08012b44

0800ea44 <__locale_ctype_ptr_l>:
 800ea44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ea48:	4770      	bx	lr
	...

0800ea4c <__locale_ctype_ptr>:
 800ea4c:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <__locale_ctype_ptr+0x14>)
 800ea4e:	4a05      	ldr	r2, [pc, #20]	; (800ea64 <__locale_ctype_ptr+0x18>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6a1b      	ldr	r3, [r3, #32]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	bf08      	it	eq
 800ea58:	4613      	moveq	r3, r2
 800ea5a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ea5e:	4770      	bx	lr
 800ea60:	20000184 	.word	0x20000184
 800ea64:	20000018 	.word	0x20000018

0800ea68 <__ascii_mbtowc>:
 800ea68:	b082      	sub	sp, #8
 800ea6a:	b901      	cbnz	r1, 800ea6e <__ascii_mbtowc+0x6>
 800ea6c:	a901      	add	r1, sp, #4
 800ea6e:	b142      	cbz	r2, 800ea82 <__ascii_mbtowc+0x1a>
 800ea70:	b14b      	cbz	r3, 800ea86 <__ascii_mbtowc+0x1e>
 800ea72:	7813      	ldrb	r3, [r2, #0]
 800ea74:	600b      	str	r3, [r1, #0]
 800ea76:	7812      	ldrb	r2, [r2, #0]
 800ea78:	1c10      	adds	r0, r2, #0
 800ea7a:	bf18      	it	ne
 800ea7c:	2001      	movne	r0, #1
 800ea7e:	b002      	add	sp, #8
 800ea80:	4770      	bx	lr
 800ea82:	4610      	mov	r0, r2
 800ea84:	e7fb      	b.n	800ea7e <__ascii_mbtowc+0x16>
 800ea86:	f06f 0001 	mvn.w	r0, #1
 800ea8a:	e7f8      	b.n	800ea7e <__ascii_mbtowc+0x16>

0800ea8c <memcmp>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	3901      	subs	r1, #1
 800ea90:	4402      	add	r2, r0
 800ea92:	4290      	cmp	r0, r2
 800ea94:	d101      	bne.n	800ea9a <memcmp+0xe>
 800ea96:	2000      	movs	r0, #0
 800ea98:	bd10      	pop	{r4, pc}
 800ea9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ea9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eaa2:	42a3      	cmp	r3, r4
 800eaa4:	d0f5      	beq.n	800ea92 <memcmp+0x6>
 800eaa6:	1b18      	subs	r0, r3, r4
 800eaa8:	bd10      	pop	{r4, pc}

0800eaaa <memcpy>:
 800eaaa:	b510      	push	{r4, lr}
 800eaac:	1e43      	subs	r3, r0, #1
 800eaae:	440a      	add	r2, r1
 800eab0:	4291      	cmp	r1, r2
 800eab2:	d100      	bne.n	800eab6 <memcpy+0xc>
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eabe:	e7f7      	b.n	800eab0 <memcpy+0x6>

0800eac0 <memmove>:
 800eac0:	4288      	cmp	r0, r1
 800eac2:	b510      	push	{r4, lr}
 800eac4:	eb01 0302 	add.w	r3, r1, r2
 800eac8:	d803      	bhi.n	800ead2 <memmove+0x12>
 800eaca:	1e42      	subs	r2, r0, #1
 800eacc:	4299      	cmp	r1, r3
 800eace:	d10c      	bne.n	800eaea <memmove+0x2a>
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	4298      	cmp	r0, r3
 800ead4:	d2f9      	bcs.n	800eaca <memmove+0xa>
 800ead6:	1881      	adds	r1, r0, r2
 800ead8:	1ad2      	subs	r2, r2, r3
 800eada:	42d3      	cmn	r3, r2
 800eadc:	d100      	bne.n	800eae0 <memmove+0x20>
 800eade:	bd10      	pop	{r4, pc}
 800eae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eae8:	e7f7      	b.n	800eada <memmove+0x1a>
 800eaea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaee:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eaf2:	e7eb      	b.n	800eacc <memmove+0xc>

0800eaf4 <memset>:
 800eaf4:	4402      	add	r2, r0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d100      	bne.n	800eafe <memset+0xa>
 800eafc:	4770      	bx	lr
 800eafe:	f803 1b01 	strb.w	r1, [r3], #1
 800eb02:	e7f9      	b.n	800eaf8 <memset+0x4>

0800eb04 <iprintf>:
 800eb04:	b40f      	push	{r0, r1, r2, r3}
 800eb06:	4b0a      	ldr	r3, [pc, #40]	; (800eb30 <iprintf+0x2c>)
 800eb08:	b513      	push	{r0, r1, r4, lr}
 800eb0a:	681c      	ldr	r4, [r3, #0]
 800eb0c:	b124      	cbz	r4, 800eb18 <iprintf+0x14>
 800eb0e:	69a3      	ldr	r3, [r4, #24]
 800eb10:	b913      	cbnz	r3, 800eb18 <iprintf+0x14>
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 f9bc 	bl	800ee90 <__sinit>
 800eb18:	ab05      	add	r3, sp, #20
 800eb1a:	9a04      	ldr	r2, [sp, #16]
 800eb1c:	68a1      	ldr	r1, [r4, #8]
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 fc6d 	bl	800f400 <_vfiprintf_r>
 800eb26:	b002      	add	sp, #8
 800eb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb2c:	b004      	add	sp, #16
 800eb2e:	4770      	bx	lr
 800eb30:	20000184 	.word	0x20000184

0800eb34 <rand>:
 800eb34:	4b19      	ldr	r3, [pc, #100]	; (800eb9c <rand+0x68>)
 800eb36:	b510      	push	{r4, lr}
 800eb38:	681c      	ldr	r4, [r3, #0]
 800eb3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb3c:	b9d3      	cbnz	r3, 800eb74 <rand+0x40>
 800eb3e:	2018      	movs	r0, #24
 800eb40:	f000 fa30 	bl	800efa4 <malloc>
 800eb44:	f243 330e 	movw	r3, #13070	; 0x330e
 800eb48:	63a0      	str	r0, [r4, #56]	; 0x38
 800eb4a:	8003      	strh	r3, [r0, #0]
 800eb4c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800eb50:	8043      	strh	r3, [r0, #2]
 800eb52:	f241 2334 	movw	r3, #4660	; 0x1234
 800eb56:	8083      	strh	r3, [r0, #4]
 800eb58:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800eb5c:	80c3      	strh	r3, [r0, #6]
 800eb5e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800eb62:	8103      	strh	r3, [r0, #8]
 800eb64:	2305      	movs	r3, #5
 800eb66:	8143      	strh	r3, [r0, #10]
 800eb68:	230b      	movs	r3, #11
 800eb6a:	8183      	strh	r3, [r0, #12]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eb74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb76:	480a      	ldr	r0, [pc, #40]	; (800eba0 <rand+0x6c>)
 800eb78:	690a      	ldr	r2, [r1, #16]
 800eb7a:	694b      	ldr	r3, [r1, #20]
 800eb7c:	4c09      	ldr	r4, [pc, #36]	; (800eba4 <rand+0x70>)
 800eb7e:	4350      	muls	r0, r2
 800eb80:	fb04 0003 	mla	r0, r4, r3, r0
 800eb84:	fba2 2304 	umull	r2, r3, r2, r4
 800eb88:	3201      	adds	r2, #1
 800eb8a:	4403      	add	r3, r0
 800eb8c:	f143 0300 	adc.w	r3, r3, #0
 800eb90:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800eb94:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800eb98:	bd10      	pop	{r4, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000184 	.word	0x20000184
 800eba0:	5851f42d 	.word	0x5851f42d
 800eba4:	4c957f2d 	.word	0x4c957f2d

0800eba8 <sniprintf>:
 800eba8:	b40c      	push	{r2, r3}
 800ebaa:	b530      	push	{r4, r5, lr}
 800ebac:	4b17      	ldr	r3, [pc, #92]	; (800ec0c <sniprintf+0x64>)
 800ebae:	1e0c      	subs	r4, r1, #0
 800ebb0:	b09d      	sub	sp, #116	; 0x74
 800ebb2:	681d      	ldr	r5, [r3, #0]
 800ebb4:	da08      	bge.n	800ebc8 <sniprintf+0x20>
 800ebb6:	238b      	movs	r3, #139	; 0x8b
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	b01d      	add	sp, #116	; 0x74
 800ebc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebc4:	b002      	add	sp, #8
 800ebc6:	4770      	bx	lr
 800ebc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ebd0:	bf14      	ite	ne
 800ebd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ebd6:	4623      	moveq	r3, r4
 800ebd8:	9304      	str	r3, [sp, #16]
 800ebda:	9307      	str	r3, [sp, #28]
 800ebdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe0:	9002      	str	r0, [sp, #8]
 800ebe2:	9006      	str	r0, [sp, #24]
 800ebe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ebe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebea:	ab21      	add	r3, sp, #132	; 0x84
 800ebec:	a902      	add	r1, sp, #8
 800ebee:	4628      	mov	r0, r5
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f000 fae7 	bl	800f1c4 <_svfiprintf_r>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	bfbc      	itt	lt
 800ebfa:	238b      	movlt	r3, #139	; 0x8b
 800ebfc:	602b      	strlt	r3, [r5, #0]
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	d0dd      	beq.n	800ebbe <sniprintf+0x16>
 800ec02:	9b02      	ldr	r3, [sp, #8]
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	e7d9      	b.n	800ebbe <sniprintf+0x16>
 800ec0a:	bf00      	nop
 800ec0c:	20000184 	.word	0x20000184

0800ec10 <siprintf>:
 800ec10:	b40e      	push	{r1, r2, r3}
 800ec12:	b500      	push	{lr}
 800ec14:	b09c      	sub	sp, #112	; 0x70
 800ec16:	f44f 7102 	mov.w	r1, #520	; 0x208
 800ec1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ec1c:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ec20:	9002      	str	r0, [sp, #8]
 800ec22:	9006      	str	r0, [sp, #24]
 800ec24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec28:	480a      	ldr	r0, [pc, #40]	; (800ec54 <siprintf+0x44>)
 800ec2a:	9104      	str	r1, [sp, #16]
 800ec2c:	9107      	str	r1, [sp, #28]
 800ec2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ec32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec36:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ec3a:	6800      	ldr	r0, [r0, #0]
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	a902      	add	r1, sp, #8
 800ec40:	f000 fac0 	bl	800f1c4 <_svfiprintf_r>
 800ec44:	9b02      	ldr	r3, [sp, #8]
 800ec46:	2200      	movs	r2, #0
 800ec48:	701a      	strb	r2, [r3, #0]
 800ec4a:	b01c      	add	sp, #112	; 0x70
 800ec4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec50:	b003      	add	sp, #12
 800ec52:	4770      	bx	lr
 800ec54:	20000184 	.word	0x20000184

0800ec58 <strcpy>:
 800ec58:	4603      	mov	r3, r0
 800ec5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec5e:	f803 2b01 	strb.w	r2, [r3], #1
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	d1f9      	bne.n	800ec5a <strcpy+0x2>
 800ec66:	4770      	bx	lr

0800ec68 <strncpy>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	b902      	cbnz	r2, 800ec70 <strncpy+0x8>
 800ec6e:	bd70      	pop	{r4, r5, r6, pc}
 800ec70:	4623      	mov	r3, r4
 800ec72:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ec76:	f803 5b01 	strb.w	r5, [r3], #1
 800ec7a:	1e56      	subs	r6, r2, #1
 800ec7c:	b91d      	cbnz	r5, 800ec86 <strncpy+0x1e>
 800ec7e:	4414      	add	r4, r2
 800ec80:	42a3      	cmp	r3, r4
 800ec82:	d103      	bne.n	800ec8c <strncpy+0x24>
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
 800ec86:	461c      	mov	r4, r3
 800ec88:	4632      	mov	r2, r6
 800ec8a:	e7ef      	b.n	800ec6c <strncpy+0x4>
 800ec8c:	f803 5b01 	strb.w	r5, [r3], #1
 800ec90:	e7f6      	b.n	800ec80 <strncpy+0x18>

0800ec92 <strstr>:
 800ec92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec94:	7803      	ldrb	r3, [r0, #0]
 800ec96:	b133      	cbz	r3, 800eca6 <strstr+0x14>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	1c5e      	adds	r6, r3, #1
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	b933      	cbnz	r3, 800ecb0 <strstr+0x1e>
 800eca2:	4618      	mov	r0, r3
 800eca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eca6:	780b      	ldrb	r3, [r1, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bf18      	it	ne
 800ecac:	2000      	movne	r0, #0
 800ecae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb0:	1e4d      	subs	r5, r1, #1
 800ecb2:	1e44      	subs	r4, r0, #1
 800ecb4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	d0f3      	beq.n	800eca4 <strstr+0x12>
 800ecbc:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800ecc0:	4297      	cmp	r7, r2
 800ecc2:	4633      	mov	r3, r6
 800ecc4:	d0f6      	beq.n	800ecb4 <strstr+0x22>
 800ecc6:	e7e8      	b.n	800ec9a <strstr+0x8>

0800ecc8 <_strtol_l.isra.0>:
 800ecc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	4680      	mov	r8, r0
 800ecce:	4689      	mov	r9, r1
 800ecd0:	4692      	mov	sl, r2
 800ecd2:	461f      	mov	r7, r3
 800ecd4:	468b      	mov	fp, r1
 800ecd6:	465d      	mov	r5, fp
 800ecd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecde:	f7ff feb1 	bl	800ea44 <__locale_ctype_ptr_l>
 800ece2:	4420      	add	r0, r4
 800ece4:	7846      	ldrb	r6, [r0, #1]
 800ece6:	f016 0608 	ands.w	r6, r6, #8
 800ecea:	d10b      	bne.n	800ed04 <_strtol_l.isra.0+0x3c>
 800ecec:	2c2d      	cmp	r4, #45	; 0x2d
 800ecee:	d10b      	bne.n	800ed08 <_strtol_l.isra.0+0x40>
 800ecf0:	782c      	ldrb	r4, [r5, #0]
 800ecf2:	2601      	movs	r6, #1
 800ecf4:	f10b 0502 	add.w	r5, fp, #2
 800ecf8:	b167      	cbz	r7, 800ed14 <_strtol_l.isra.0+0x4c>
 800ecfa:	2f10      	cmp	r7, #16
 800ecfc:	d114      	bne.n	800ed28 <_strtol_l.isra.0+0x60>
 800ecfe:	2c30      	cmp	r4, #48	; 0x30
 800ed00:	d00a      	beq.n	800ed18 <_strtol_l.isra.0+0x50>
 800ed02:	e011      	b.n	800ed28 <_strtol_l.isra.0+0x60>
 800ed04:	46ab      	mov	fp, r5
 800ed06:	e7e6      	b.n	800ecd6 <_strtol_l.isra.0+0xe>
 800ed08:	2c2b      	cmp	r4, #43	; 0x2b
 800ed0a:	bf04      	itt	eq
 800ed0c:	782c      	ldrbeq	r4, [r5, #0]
 800ed0e:	f10b 0502 	addeq.w	r5, fp, #2
 800ed12:	e7f1      	b.n	800ecf8 <_strtol_l.isra.0+0x30>
 800ed14:	2c30      	cmp	r4, #48	; 0x30
 800ed16:	d127      	bne.n	800ed68 <_strtol_l.isra.0+0xa0>
 800ed18:	782b      	ldrb	r3, [r5, #0]
 800ed1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed1e:	2b58      	cmp	r3, #88	; 0x58
 800ed20:	d14b      	bne.n	800edba <_strtol_l.isra.0+0xf2>
 800ed22:	786c      	ldrb	r4, [r5, #1]
 800ed24:	2710      	movs	r7, #16
 800ed26:	3502      	adds	r5, #2
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	bf0c      	ite	eq
 800ed2c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ed30:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ed34:	2200      	movs	r2, #0
 800ed36:	fbb1 fef7 	udiv	lr, r1, r7
 800ed3a:	4610      	mov	r0, r2
 800ed3c:	fb07 1c1e 	mls	ip, r7, lr, r1
 800ed40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ed44:	2b09      	cmp	r3, #9
 800ed46:	d811      	bhi.n	800ed6c <_strtol_l.isra.0+0xa4>
 800ed48:	461c      	mov	r4, r3
 800ed4a:	42a7      	cmp	r7, r4
 800ed4c:	dd1d      	ble.n	800ed8a <_strtol_l.isra.0+0xc2>
 800ed4e:	1c53      	adds	r3, r2, #1
 800ed50:	d007      	beq.n	800ed62 <_strtol_l.isra.0+0x9a>
 800ed52:	4586      	cmp	lr, r0
 800ed54:	d316      	bcc.n	800ed84 <_strtol_l.isra.0+0xbc>
 800ed56:	d101      	bne.n	800ed5c <_strtol_l.isra.0+0x94>
 800ed58:	45a4      	cmp	ip, r4
 800ed5a:	db13      	blt.n	800ed84 <_strtol_l.isra.0+0xbc>
 800ed5c:	fb00 4007 	mla	r0, r0, r7, r4
 800ed60:	2201      	movs	r2, #1
 800ed62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed66:	e7eb      	b.n	800ed40 <_strtol_l.isra.0+0x78>
 800ed68:	270a      	movs	r7, #10
 800ed6a:	e7dd      	b.n	800ed28 <_strtol_l.isra.0+0x60>
 800ed6c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ed70:	2b19      	cmp	r3, #25
 800ed72:	d801      	bhi.n	800ed78 <_strtol_l.isra.0+0xb0>
 800ed74:	3c37      	subs	r4, #55	; 0x37
 800ed76:	e7e8      	b.n	800ed4a <_strtol_l.isra.0+0x82>
 800ed78:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ed7c:	2b19      	cmp	r3, #25
 800ed7e:	d804      	bhi.n	800ed8a <_strtol_l.isra.0+0xc2>
 800ed80:	3c57      	subs	r4, #87	; 0x57
 800ed82:	e7e2      	b.n	800ed4a <_strtol_l.isra.0+0x82>
 800ed84:	f04f 32ff 	mov.w	r2, #4294967295
 800ed88:	e7eb      	b.n	800ed62 <_strtol_l.isra.0+0x9a>
 800ed8a:	1c53      	adds	r3, r2, #1
 800ed8c:	d108      	bne.n	800eda0 <_strtol_l.isra.0+0xd8>
 800ed8e:	2322      	movs	r3, #34	; 0x22
 800ed90:	f8c8 3000 	str.w	r3, [r8]
 800ed94:	4608      	mov	r0, r1
 800ed96:	f1ba 0f00 	cmp.w	sl, #0
 800ed9a:	d107      	bne.n	800edac <_strtol_l.isra.0+0xe4>
 800ed9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda0:	b106      	cbz	r6, 800eda4 <_strtol_l.isra.0+0xdc>
 800eda2:	4240      	negs	r0, r0
 800eda4:	f1ba 0f00 	cmp.w	sl, #0
 800eda8:	d00c      	beq.n	800edc4 <_strtol_l.isra.0+0xfc>
 800edaa:	b122      	cbz	r2, 800edb6 <_strtol_l.isra.0+0xee>
 800edac:	3d01      	subs	r5, #1
 800edae:	f8ca 5000 	str.w	r5, [sl]
 800edb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb6:	464d      	mov	r5, r9
 800edb8:	e7f9      	b.n	800edae <_strtol_l.isra.0+0xe6>
 800edba:	2430      	movs	r4, #48	; 0x30
 800edbc:	2f00      	cmp	r7, #0
 800edbe:	d1b3      	bne.n	800ed28 <_strtol_l.isra.0+0x60>
 800edc0:	2708      	movs	r7, #8
 800edc2:	e7b1      	b.n	800ed28 <_strtol_l.isra.0+0x60>
 800edc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edc8 <strtol>:
 800edc8:	4b08      	ldr	r3, [pc, #32]	; (800edec <strtol+0x24>)
 800edca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edcc:	681c      	ldr	r4, [r3, #0]
 800edce:	4d08      	ldr	r5, [pc, #32]	; (800edf0 <strtol+0x28>)
 800edd0:	6a23      	ldr	r3, [r4, #32]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bf08      	it	eq
 800edd6:	462b      	moveq	r3, r5
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	4613      	mov	r3, r2
 800eddc:	460a      	mov	r2, r1
 800edde:	4601      	mov	r1, r0
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7ff ff71 	bl	800ecc8 <_strtol_l.isra.0>
 800ede6:	b003      	add	sp, #12
 800ede8:	bd30      	pop	{r4, r5, pc}
 800edea:	bf00      	nop
 800edec:	20000184 	.word	0x20000184
 800edf0:	20000018 	.word	0x20000018

0800edf4 <__ascii_wctomb>:
 800edf4:	b149      	cbz	r1, 800ee0a <__ascii_wctomb+0x16>
 800edf6:	2aff      	cmp	r2, #255	; 0xff
 800edf8:	bf85      	ittet	hi
 800edfa:	238a      	movhi	r3, #138	; 0x8a
 800edfc:	6003      	strhi	r3, [r0, #0]
 800edfe:	700a      	strbls	r2, [r1, #0]
 800ee00:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee04:	bf98      	it	ls
 800ee06:	2001      	movls	r0, #1
 800ee08:	4770      	bx	lr
 800ee0a:	4608      	mov	r0, r1
 800ee0c:	4770      	bx	lr
	...

0800ee10 <_cleanup_r>:
 800ee10:	4901      	ldr	r1, [pc, #4]	; (800ee18 <_cleanup_r+0x8>)
 800ee12:	f000 b8a9 	b.w	800ef68 <_fwalk_reent>
 800ee16:	bf00      	nop
 800ee18:	0800fcd5 	.word	0x0800fcd5

0800ee1c <std.isra.0>:
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	b510      	push	{r4, lr}
 800ee20:	4604      	mov	r4, r0
 800ee22:	6003      	str	r3, [r0, #0]
 800ee24:	6043      	str	r3, [r0, #4]
 800ee26:	6083      	str	r3, [r0, #8]
 800ee28:	8181      	strh	r1, [r0, #12]
 800ee2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee2c:	81c2      	strh	r2, [r0, #14]
 800ee2e:	6103      	str	r3, [r0, #16]
 800ee30:	6143      	str	r3, [r0, #20]
 800ee32:	6183      	str	r3, [r0, #24]
 800ee34:	4619      	mov	r1, r3
 800ee36:	2208      	movs	r2, #8
 800ee38:	305c      	adds	r0, #92	; 0x5c
 800ee3a:	f7ff fe5b 	bl	800eaf4 <memset>
 800ee3e:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <std.isra.0+0x38>)
 800ee40:	6263      	str	r3, [r4, #36]	; 0x24
 800ee42:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <std.isra.0+0x3c>)
 800ee44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee46:	4b05      	ldr	r3, [pc, #20]	; (800ee5c <std.isra.0+0x40>)
 800ee48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee4a:	4b05      	ldr	r3, [pc, #20]	; (800ee60 <std.isra.0+0x44>)
 800ee4c:	6224      	str	r4, [r4, #32]
 800ee4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee50:	bd10      	pop	{r4, pc}
 800ee52:	bf00      	nop
 800ee54:	0800f979 	.word	0x0800f979
 800ee58:	0800f99b 	.word	0x0800f99b
 800ee5c:	0800f9d3 	.word	0x0800f9d3
 800ee60:	0800f9f7 	.word	0x0800f9f7

0800ee64 <__sfmoreglue>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	1e4a      	subs	r2, r1, #1
 800ee68:	2568      	movs	r5, #104	; 0x68
 800ee6a:	4355      	muls	r5, r2
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee72:	f000 f8ed 	bl	800f050 <_malloc_r>
 800ee76:	4604      	mov	r4, r0
 800ee78:	b140      	cbz	r0, 800ee8c <__sfmoreglue+0x28>
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	e880 0042 	stmia.w	r0, {r1, r6}
 800ee80:	300c      	adds	r0, #12
 800ee82:	60a0      	str	r0, [r4, #8]
 800ee84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee88:	f7ff fe34 	bl	800eaf4 <memset>
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}

0800ee90 <__sinit>:
 800ee90:	6983      	ldr	r3, [r0, #24]
 800ee92:	b510      	push	{r4, lr}
 800ee94:	4604      	mov	r4, r0
 800ee96:	bb33      	cbnz	r3, 800eee6 <__sinit+0x56>
 800ee98:	6483      	str	r3, [r0, #72]	; 0x48
 800ee9a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800ee9c:	6503      	str	r3, [r0, #80]	; 0x50
 800ee9e:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <__sinit+0x58>)
 800eea0:	4a12      	ldr	r2, [pc, #72]	; (800eeec <__sinit+0x5c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6282      	str	r2, [r0, #40]	; 0x28
 800eea6:	4298      	cmp	r0, r3
 800eea8:	bf04      	itt	eq
 800eeaa:	2301      	moveq	r3, #1
 800eeac:	6183      	streq	r3, [r0, #24]
 800eeae:	f000 f81f 	bl	800eef0 <__sfp>
 800eeb2:	6060      	str	r0, [r4, #4]
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 f81b 	bl	800eef0 <__sfp>
 800eeba:	60a0      	str	r0, [r4, #8]
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 f817 	bl	800eef0 <__sfp>
 800eec2:	2200      	movs	r2, #0
 800eec4:	60e0      	str	r0, [r4, #12]
 800eec6:	2104      	movs	r1, #4
 800eec8:	6860      	ldr	r0, [r4, #4]
 800eeca:	f7ff ffa7 	bl	800ee1c <std.isra.0>
 800eece:	2201      	movs	r2, #1
 800eed0:	2109      	movs	r1, #9
 800eed2:	68a0      	ldr	r0, [r4, #8]
 800eed4:	f7ff ffa2 	bl	800ee1c <std.isra.0>
 800eed8:	2202      	movs	r2, #2
 800eeda:	2112      	movs	r1, #18
 800eedc:	68e0      	ldr	r0, [r4, #12]
 800eede:	f7ff ff9d 	bl	800ee1c <std.isra.0>
 800eee2:	2301      	movs	r3, #1
 800eee4:	61a3      	str	r3, [r4, #24]
 800eee6:	bd10      	pop	{r4, pc}
 800eee8:	08012b00 	.word	0x08012b00
 800eeec:	0800ee11 	.word	0x0800ee11

0800eef0 <__sfp>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	4b1c      	ldr	r3, [pc, #112]	; (800ef64 <__sfp+0x74>)
 800eef4:	681e      	ldr	r6, [r3, #0]
 800eef6:	69b3      	ldr	r3, [r6, #24]
 800eef8:	4607      	mov	r7, r0
 800eefa:	b913      	cbnz	r3, 800ef02 <__sfp+0x12>
 800eefc:	4630      	mov	r0, r6
 800eefe:	f7ff ffc7 	bl	800ee90 <__sinit>
 800ef02:	3648      	adds	r6, #72	; 0x48
 800ef04:	68b4      	ldr	r4, [r6, #8]
 800ef06:	6873      	ldr	r3, [r6, #4]
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	d503      	bpl.n	800ef14 <__sfp+0x24>
 800ef0c:	6833      	ldr	r3, [r6, #0]
 800ef0e:	b133      	cbz	r3, 800ef1e <__sfp+0x2e>
 800ef10:	6836      	ldr	r6, [r6, #0]
 800ef12:	e7f7      	b.n	800ef04 <__sfp+0x14>
 800ef14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef18:	b16d      	cbz	r5, 800ef36 <__sfp+0x46>
 800ef1a:	3468      	adds	r4, #104	; 0x68
 800ef1c:	e7f4      	b.n	800ef08 <__sfp+0x18>
 800ef1e:	2104      	movs	r1, #4
 800ef20:	4638      	mov	r0, r7
 800ef22:	f7ff ff9f 	bl	800ee64 <__sfmoreglue>
 800ef26:	6030      	str	r0, [r6, #0]
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d1f1      	bne.n	800ef10 <__sfp+0x20>
 800ef2c:	230c      	movs	r3, #12
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	4604      	mov	r4, r0
 800ef32:	4620      	mov	r0, r4
 800ef34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef3a:	81e3      	strh	r3, [r4, #14]
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	81a3      	strh	r3, [r4, #12]
 800ef40:	6665      	str	r5, [r4, #100]	; 0x64
 800ef42:	6025      	str	r5, [r4, #0]
 800ef44:	60a5      	str	r5, [r4, #8]
 800ef46:	6065      	str	r5, [r4, #4]
 800ef48:	6125      	str	r5, [r4, #16]
 800ef4a:	6165      	str	r5, [r4, #20]
 800ef4c:	61a5      	str	r5, [r4, #24]
 800ef4e:	2208      	movs	r2, #8
 800ef50:	4629      	mov	r1, r5
 800ef52:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef56:	f7ff fdcd 	bl	800eaf4 <memset>
 800ef5a:	6365      	str	r5, [r4, #52]	; 0x34
 800ef5c:	63a5      	str	r5, [r4, #56]	; 0x38
 800ef5e:	64a5      	str	r5, [r4, #72]	; 0x48
 800ef60:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ef62:	e7e6      	b.n	800ef32 <__sfp+0x42>
 800ef64:	08012b00 	.word	0x08012b00

0800ef68 <_fwalk_reent>:
 800ef68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	4689      	mov	r9, r1
 800ef70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef74:	2600      	movs	r6, #0
 800ef76:	b914      	cbnz	r4, 800ef7e <_fwalk_reent+0x16>
 800ef78:	4630      	mov	r0, r6
 800ef7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef7e:	68a5      	ldr	r5, [r4, #8]
 800ef80:	6867      	ldr	r7, [r4, #4]
 800ef82:	3f01      	subs	r7, #1
 800ef84:	d501      	bpl.n	800ef8a <_fwalk_reent+0x22>
 800ef86:	6824      	ldr	r4, [r4, #0]
 800ef88:	e7f5      	b.n	800ef76 <_fwalk_reent+0xe>
 800ef8a:	89ab      	ldrh	r3, [r5, #12]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d907      	bls.n	800efa0 <_fwalk_reent+0x38>
 800ef90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef94:	3301      	adds	r3, #1
 800ef96:	d003      	beq.n	800efa0 <_fwalk_reent+0x38>
 800ef98:	4629      	mov	r1, r5
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	47c8      	blx	r9
 800ef9e:	4306      	orrs	r6, r0
 800efa0:	3568      	adds	r5, #104	; 0x68
 800efa2:	e7ee      	b.n	800ef82 <_fwalk_reent+0x1a>

0800efa4 <malloc>:
 800efa4:	4b02      	ldr	r3, [pc, #8]	; (800efb0 <malloc+0xc>)
 800efa6:	4601      	mov	r1, r0
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f000 b851 	b.w	800f050 <_malloc_r>
 800efae:	bf00      	nop
 800efb0:	20000184 	.word	0x20000184

0800efb4 <_free_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4605      	mov	r5, r0
 800efb8:	2900      	cmp	r1, #0
 800efba:	d045      	beq.n	800f048 <_free_r+0x94>
 800efbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efc0:	1f0c      	subs	r4, r1, #4
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	bfb8      	it	lt
 800efc6:	18e4      	addlt	r4, r4, r3
 800efc8:	f000 ff24 	bl	800fe14 <__malloc_lock>
 800efcc:	4a1f      	ldr	r2, [pc, #124]	; (800f04c <_free_r+0x98>)
 800efce:	6813      	ldr	r3, [r2, #0]
 800efd0:	4610      	mov	r0, r2
 800efd2:	b933      	cbnz	r3, 800efe2 <_free_r+0x2e>
 800efd4:	6063      	str	r3, [r4, #4]
 800efd6:	6014      	str	r4, [r2, #0]
 800efd8:	4628      	mov	r0, r5
 800efda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efde:	f000 bf1a 	b.w	800fe16 <__malloc_unlock>
 800efe2:	42a3      	cmp	r3, r4
 800efe4:	d90c      	bls.n	800f000 <_free_r+0x4c>
 800efe6:	6821      	ldr	r1, [r4, #0]
 800efe8:	1862      	adds	r2, r4, r1
 800efea:	4293      	cmp	r3, r2
 800efec:	bf04      	itt	eq
 800efee:	681a      	ldreq	r2, [r3, #0]
 800eff0:	685b      	ldreq	r3, [r3, #4]
 800eff2:	6063      	str	r3, [r4, #4]
 800eff4:	bf04      	itt	eq
 800eff6:	1852      	addeq	r2, r2, r1
 800eff8:	6022      	streq	r2, [r4, #0]
 800effa:	6004      	str	r4, [r0, #0]
 800effc:	e7ec      	b.n	800efd8 <_free_r+0x24>
 800effe:	4613      	mov	r3, r2
 800f000:	685a      	ldr	r2, [r3, #4]
 800f002:	b10a      	cbz	r2, 800f008 <_free_r+0x54>
 800f004:	42a2      	cmp	r2, r4
 800f006:	d9fa      	bls.n	800effe <_free_r+0x4a>
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	1858      	adds	r0, r3, r1
 800f00c:	42a0      	cmp	r0, r4
 800f00e:	d10b      	bne.n	800f028 <_free_r+0x74>
 800f010:	6820      	ldr	r0, [r4, #0]
 800f012:	4401      	add	r1, r0
 800f014:	1858      	adds	r0, r3, r1
 800f016:	4282      	cmp	r2, r0
 800f018:	6019      	str	r1, [r3, #0]
 800f01a:	d1dd      	bne.n	800efd8 <_free_r+0x24>
 800f01c:	6810      	ldr	r0, [r2, #0]
 800f01e:	6852      	ldr	r2, [r2, #4]
 800f020:	605a      	str	r2, [r3, #4]
 800f022:	4401      	add	r1, r0
 800f024:	6019      	str	r1, [r3, #0]
 800f026:	e7d7      	b.n	800efd8 <_free_r+0x24>
 800f028:	d902      	bls.n	800f030 <_free_r+0x7c>
 800f02a:	230c      	movs	r3, #12
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	e7d3      	b.n	800efd8 <_free_r+0x24>
 800f030:	6820      	ldr	r0, [r4, #0]
 800f032:	1821      	adds	r1, r4, r0
 800f034:	428a      	cmp	r2, r1
 800f036:	bf04      	itt	eq
 800f038:	6811      	ldreq	r1, [r2, #0]
 800f03a:	6852      	ldreq	r2, [r2, #4]
 800f03c:	6062      	str	r2, [r4, #4]
 800f03e:	bf04      	itt	eq
 800f040:	1809      	addeq	r1, r1, r0
 800f042:	6021      	streq	r1, [r4, #0]
 800f044:	605c      	str	r4, [r3, #4]
 800f046:	e7c7      	b.n	800efd8 <_free_r+0x24>
 800f048:	bd38      	pop	{r3, r4, r5, pc}
 800f04a:	bf00      	nop
 800f04c:	20007074 	.word	0x20007074

0800f050 <_malloc_r>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	1ccd      	adds	r5, r1, #3
 800f054:	f025 0503 	bic.w	r5, r5, #3
 800f058:	3508      	adds	r5, #8
 800f05a:	2d0c      	cmp	r5, #12
 800f05c:	bf38      	it	cc
 800f05e:	250c      	movcc	r5, #12
 800f060:	2d00      	cmp	r5, #0
 800f062:	4606      	mov	r6, r0
 800f064:	db01      	blt.n	800f06a <_malloc_r+0x1a>
 800f066:	42a9      	cmp	r1, r5
 800f068:	d903      	bls.n	800f072 <_malloc_r+0x22>
 800f06a:	230c      	movs	r3, #12
 800f06c:	6033      	str	r3, [r6, #0]
 800f06e:	2000      	movs	r0, #0
 800f070:	bd70      	pop	{r4, r5, r6, pc}
 800f072:	f000 fecf 	bl	800fe14 <__malloc_lock>
 800f076:	4a23      	ldr	r2, [pc, #140]	; (800f104 <_malloc_r+0xb4>)
 800f078:	6814      	ldr	r4, [r2, #0]
 800f07a:	4621      	mov	r1, r4
 800f07c:	b991      	cbnz	r1, 800f0a4 <_malloc_r+0x54>
 800f07e:	4c22      	ldr	r4, [pc, #136]	; (800f108 <_malloc_r+0xb8>)
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	b91b      	cbnz	r3, 800f08c <_malloc_r+0x3c>
 800f084:	4630      	mov	r0, r6
 800f086:	f000 fc67 	bl	800f958 <_sbrk_r>
 800f08a:	6020      	str	r0, [r4, #0]
 800f08c:	4629      	mov	r1, r5
 800f08e:	4630      	mov	r0, r6
 800f090:	f000 fc62 	bl	800f958 <_sbrk_r>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d126      	bne.n	800f0e6 <_malloc_r+0x96>
 800f098:	230c      	movs	r3, #12
 800f09a:	6033      	str	r3, [r6, #0]
 800f09c:	4630      	mov	r0, r6
 800f09e:	f000 feba 	bl	800fe16 <__malloc_unlock>
 800f0a2:	e7e4      	b.n	800f06e <_malloc_r+0x1e>
 800f0a4:	680b      	ldr	r3, [r1, #0]
 800f0a6:	1b5b      	subs	r3, r3, r5
 800f0a8:	d41a      	bmi.n	800f0e0 <_malloc_r+0x90>
 800f0aa:	2b0b      	cmp	r3, #11
 800f0ac:	d90f      	bls.n	800f0ce <_malloc_r+0x7e>
 800f0ae:	600b      	str	r3, [r1, #0]
 800f0b0:	50cd      	str	r5, [r1, r3]
 800f0b2:	18cc      	adds	r4, r1, r3
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f000 feae 	bl	800fe16 <__malloc_unlock>
 800f0ba:	f104 000b 	add.w	r0, r4, #11
 800f0be:	1d23      	adds	r3, r4, #4
 800f0c0:	f020 0007 	bic.w	r0, r0, #7
 800f0c4:	1ac3      	subs	r3, r0, r3
 800f0c6:	d01b      	beq.n	800f100 <_malloc_r+0xb0>
 800f0c8:	425a      	negs	r2, r3
 800f0ca:	50e2      	str	r2, [r4, r3]
 800f0cc:	bd70      	pop	{r4, r5, r6, pc}
 800f0ce:	428c      	cmp	r4, r1
 800f0d0:	bf0d      	iteet	eq
 800f0d2:	6863      	ldreq	r3, [r4, #4]
 800f0d4:	684b      	ldrne	r3, [r1, #4]
 800f0d6:	6063      	strne	r3, [r4, #4]
 800f0d8:	6013      	streq	r3, [r2, #0]
 800f0da:	bf18      	it	ne
 800f0dc:	460c      	movne	r4, r1
 800f0de:	e7e9      	b.n	800f0b4 <_malloc_r+0x64>
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	6849      	ldr	r1, [r1, #4]
 800f0e4:	e7ca      	b.n	800f07c <_malloc_r+0x2c>
 800f0e6:	1cc4      	adds	r4, r0, #3
 800f0e8:	f024 0403 	bic.w	r4, r4, #3
 800f0ec:	42a0      	cmp	r0, r4
 800f0ee:	d005      	beq.n	800f0fc <_malloc_r+0xac>
 800f0f0:	1a21      	subs	r1, r4, r0
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f000 fc30 	bl	800f958 <_sbrk_r>
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	d0cd      	beq.n	800f098 <_malloc_r+0x48>
 800f0fc:	6025      	str	r5, [r4, #0]
 800f0fe:	e7d9      	b.n	800f0b4 <_malloc_r+0x64>
 800f100:	bd70      	pop	{r4, r5, r6, pc}
 800f102:	bf00      	nop
 800f104:	20007074 	.word	0x20007074
 800f108:	20007078 	.word	0x20007078

0800f10c <__ssputs_r>:
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	688e      	ldr	r6, [r1, #8]
 800f112:	429e      	cmp	r6, r3
 800f114:	4682      	mov	sl, r0
 800f116:	460c      	mov	r4, r1
 800f118:	4691      	mov	r9, r2
 800f11a:	4698      	mov	r8, r3
 800f11c:	d835      	bhi.n	800f18a <__ssputs_r+0x7e>
 800f11e:	898a      	ldrh	r2, [r1, #12]
 800f120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f124:	d031      	beq.n	800f18a <__ssputs_r+0x7e>
 800f126:	6825      	ldr	r5, [r4, #0]
 800f128:	6909      	ldr	r1, [r1, #16]
 800f12a:	1a6f      	subs	r7, r5, r1
 800f12c:	6965      	ldr	r5, [r4, #20]
 800f12e:	2302      	movs	r3, #2
 800f130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f134:	fb95 f5f3 	sdiv	r5, r5, r3
 800f138:	f108 0301 	add.w	r3, r8, #1
 800f13c:	443b      	add	r3, r7
 800f13e:	429d      	cmp	r5, r3
 800f140:	bf38      	it	cc
 800f142:	461d      	movcc	r5, r3
 800f144:	0553      	lsls	r3, r2, #21
 800f146:	d531      	bpl.n	800f1ac <__ssputs_r+0xa0>
 800f148:	4629      	mov	r1, r5
 800f14a:	f7ff ff81 	bl	800f050 <_malloc_r>
 800f14e:	4606      	mov	r6, r0
 800f150:	b950      	cbnz	r0, 800f168 <__ssputs_r+0x5c>
 800f152:	230c      	movs	r3, #12
 800f154:	f8ca 3000 	str.w	r3, [sl]
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f15e:	81a3      	strh	r3, [r4, #12]
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f168:	463a      	mov	r2, r7
 800f16a:	6921      	ldr	r1, [r4, #16]
 800f16c:	f7ff fc9d 	bl	800eaaa <memcpy>
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f17a:	81a3      	strh	r3, [r4, #12]
 800f17c:	6126      	str	r6, [r4, #16]
 800f17e:	6165      	str	r5, [r4, #20]
 800f180:	443e      	add	r6, r7
 800f182:	1bed      	subs	r5, r5, r7
 800f184:	6026      	str	r6, [r4, #0]
 800f186:	60a5      	str	r5, [r4, #8]
 800f188:	4646      	mov	r6, r8
 800f18a:	4546      	cmp	r6, r8
 800f18c:	bf28      	it	cs
 800f18e:	4646      	movcs	r6, r8
 800f190:	4632      	mov	r2, r6
 800f192:	4649      	mov	r1, r9
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	f7ff fc93 	bl	800eac0 <memmove>
 800f19a:	68a3      	ldr	r3, [r4, #8]
 800f19c:	1b9b      	subs	r3, r3, r6
 800f19e:	60a3      	str	r3, [r4, #8]
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	441e      	add	r6, r3
 800f1a4:	6026      	str	r6, [r4, #0]
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ac:	462a      	mov	r2, r5
 800f1ae:	f000 fe33 	bl	800fe18 <_realloc_r>
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d1e1      	bne.n	800f17c <__ssputs_r+0x70>
 800f1b8:	6921      	ldr	r1, [r4, #16]
 800f1ba:	4650      	mov	r0, sl
 800f1bc:	f7ff fefa 	bl	800efb4 <_free_r>
 800f1c0:	e7c7      	b.n	800f152 <__ssputs_r+0x46>
	...

0800f1c4 <_svfiprintf_r>:
 800f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c8:	b09d      	sub	sp, #116	; 0x74
 800f1ca:	4680      	mov	r8, r0
 800f1cc:	9303      	str	r3, [sp, #12]
 800f1ce:	898b      	ldrh	r3, [r1, #12]
 800f1d0:	061c      	lsls	r4, r3, #24
 800f1d2:	460d      	mov	r5, r1
 800f1d4:	4616      	mov	r6, r2
 800f1d6:	d50f      	bpl.n	800f1f8 <_svfiprintf_r+0x34>
 800f1d8:	690b      	ldr	r3, [r1, #16]
 800f1da:	b96b      	cbnz	r3, 800f1f8 <_svfiprintf_r+0x34>
 800f1dc:	2140      	movs	r1, #64	; 0x40
 800f1de:	f7ff ff37 	bl	800f050 <_malloc_r>
 800f1e2:	6028      	str	r0, [r5, #0]
 800f1e4:	6128      	str	r0, [r5, #16]
 800f1e6:	b928      	cbnz	r0, 800f1f4 <_svfiprintf_r+0x30>
 800f1e8:	230c      	movs	r3, #12
 800f1ea:	f8c8 3000 	str.w	r3, [r8]
 800f1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f2:	e0c5      	b.n	800f380 <_svfiprintf_r+0x1bc>
 800f1f4:	2340      	movs	r3, #64	; 0x40
 800f1f6:	616b      	str	r3, [r5, #20]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f1fc:	2320      	movs	r3, #32
 800f1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f202:	2330      	movs	r3, #48	; 0x30
 800f204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f208:	f04f 0b01 	mov.w	fp, #1
 800f20c:	4637      	mov	r7, r6
 800f20e:	463c      	mov	r4, r7
 800f210:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d13c      	bne.n	800f292 <_svfiprintf_r+0xce>
 800f218:	ebb7 0a06 	subs.w	sl, r7, r6
 800f21c:	d00b      	beq.n	800f236 <_svfiprintf_r+0x72>
 800f21e:	4653      	mov	r3, sl
 800f220:	4632      	mov	r2, r6
 800f222:	4629      	mov	r1, r5
 800f224:	4640      	mov	r0, r8
 800f226:	f7ff ff71 	bl	800f10c <__ssputs_r>
 800f22a:	3001      	adds	r0, #1
 800f22c:	f000 80a3 	beq.w	800f376 <_svfiprintf_r+0x1b2>
 800f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f232:	4453      	add	r3, sl
 800f234:	9309      	str	r3, [sp, #36]	; 0x24
 800f236:	783b      	ldrb	r3, [r7, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	f000 809c 	beq.w	800f376 <_svfiprintf_r+0x1b2>
 800f23e:	2300      	movs	r3, #0
 800f240:	f04f 32ff 	mov.w	r2, #4294967295
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	9307      	str	r3, [sp, #28]
 800f248:	9205      	str	r2, [sp, #20]
 800f24a:	9306      	str	r3, [sp, #24]
 800f24c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f250:	931a      	str	r3, [sp, #104]	; 0x68
 800f252:	2205      	movs	r2, #5
 800f254:	7821      	ldrb	r1, [r4, #0]
 800f256:	4850      	ldr	r0, [pc, #320]	; (800f398 <_svfiprintf_r+0x1d4>)
 800f258:	f7f0 fffa 	bl	8000250 <memchr>
 800f25c:	1c67      	adds	r7, r4, #1
 800f25e:	9b04      	ldr	r3, [sp, #16]
 800f260:	b9d8      	cbnz	r0, 800f29a <_svfiprintf_r+0xd6>
 800f262:	06d9      	lsls	r1, r3, #27
 800f264:	bf44      	itt	mi
 800f266:	2220      	movmi	r2, #32
 800f268:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f26c:	071a      	lsls	r2, r3, #28
 800f26e:	bf44      	itt	mi
 800f270:	222b      	movmi	r2, #43	; 0x2b
 800f272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f276:	7822      	ldrb	r2, [r4, #0]
 800f278:	2a2a      	cmp	r2, #42	; 0x2a
 800f27a:	d016      	beq.n	800f2aa <_svfiprintf_r+0xe6>
 800f27c:	9a07      	ldr	r2, [sp, #28]
 800f27e:	2100      	movs	r1, #0
 800f280:	200a      	movs	r0, #10
 800f282:	4627      	mov	r7, r4
 800f284:	3401      	adds	r4, #1
 800f286:	783b      	ldrb	r3, [r7, #0]
 800f288:	3b30      	subs	r3, #48	; 0x30
 800f28a:	2b09      	cmp	r3, #9
 800f28c:	d951      	bls.n	800f332 <_svfiprintf_r+0x16e>
 800f28e:	b1c9      	cbz	r1, 800f2c4 <_svfiprintf_r+0x100>
 800f290:	e011      	b.n	800f2b6 <_svfiprintf_r+0xf2>
 800f292:	2b25      	cmp	r3, #37	; 0x25
 800f294:	d0c0      	beq.n	800f218 <_svfiprintf_r+0x54>
 800f296:	4627      	mov	r7, r4
 800f298:	e7b9      	b.n	800f20e <_svfiprintf_r+0x4a>
 800f29a:	4a3f      	ldr	r2, [pc, #252]	; (800f398 <_svfiprintf_r+0x1d4>)
 800f29c:	1a80      	subs	r0, r0, r2
 800f29e:	fa0b f000 	lsl.w	r0, fp, r0
 800f2a2:	4318      	orrs	r0, r3
 800f2a4:	9004      	str	r0, [sp, #16]
 800f2a6:	463c      	mov	r4, r7
 800f2a8:	e7d3      	b.n	800f252 <_svfiprintf_r+0x8e>
 800f2aa:	9a03      	ldr	r2, [sp, #12]
 800f2ac:	1d11      	adds	r1, r2, #4
 800f2ae:	6812      	ldr	r2, [r2, #0]
 800f2b0:	9103      	str	r1, [sp, #12]
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	db01      	blt.n	800f2ba <_svfiprintf_r+0xf6>
 800f2b6:	9207      	str	r2, [sp, #28]
 800f2b8:	e004      	b.n	800f2c4 <_svfiprintf_r+0x100>
 800f2ba:	4252      	negs	r2, r2
 800f2bc:	f043 0302 	orr.w	r3, r3, #2
 800f2c0:	9207      	str	r2, [sp, #28]
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	783b      	ldrb	r3, [r7, #0]
 800f2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f2c8:	d10e      	bne.n	800f2e8 <_svfiprintf_r+0x124>
 800f2ca:	787b      	ldrb	r3, [r7, #1]
 800f2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ce:	f107 0101 	add.w	r1, r7, #1
 800f2d2:	d132      	bne.n	800f33a <_svfiprintf_r+0x176>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	1d1a      	adds	r2, r3, #4
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	9203      	str	r2, [sp, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfb8      	it	lt
 800f2e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2e4:	3702      	adds	r7, #2
 800f2e6:	9305      	str	r3, [sp, #20]
 800f2e8:	4c2c      	ldr	r4, [pc, #176]	; (800f39c <_svfiprintf_r+0x1d8>)
 800f2ea:	7839      	ldrb	r1, [r7, #0]
 800f2ec:	2203      	movs	r2, #3
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7f0 ffae 	bl	8000250 <memchr>
 800f2f4:	b138      	cbz	r0, 800f306 <_svfiprintf_r+0x142>
 800f2f6:	2340      	movs	r3, #64	; 0x40
 800f2f8:	1b00      	subs	r0, r0, r4
 800f2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800f2fe:	9b04      	ldr	r3, [sp, #16]
 800f300:	4303      	orrs	r3, r0
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	3701      	adds	r7, #1
 800f306:	7839      	ldrb	r1, [r7, #0]
 800f308:	4825      	ldr	r0, [pc, #148]	; (800f3a0 <_svfiprintf_r+0x1dc>)
 800f30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f30e:	2206      	movs	r2, #6
 800f310:	1c7e      	adds	r6, r7, #1
 800f312:	f7f0 ff9d 	bl	8000250 <memchr>
 800f316:	2800      	cmp	r0, #0
 800f318:	d035      	beq.n	800f386 <_svfiprintf_r+0x1c2>
 800f31a:	4b22      	ldr	r3, [pc, #136]	; (800f3a4 <_svfiprintf_r+0x1e0>)
 800f31c:	b9fb      	cbnz	r3, 800f35e <_svfiprintf_r+0x19a>
 800f31e:	9b03      	ldr	r3, [sp, #12]
 800f320:	3307      	adds	r3, #7
 800f322:	f023 0307 	bic.w	r3, r3, #7
 800f326:	3308      	adds	r3, #8
 800f328:	9303      	str	r3, [sp, #12]
 800f32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f32c:	444b      	add	r3, r9
 800f32e:	9309      	str	r3, [sp, #36]	; 0x24
 800f330:	e76c      	b.n	800f20c <_svfiprintf_r+0x48>
 800f332:	fb00 3202 	mla	r2, r0, r2, r3
 800f336:	2101      	movs	r1, #1
 800f338:	e7a3      	b.n	800f282 <_svfiprintf_r+0xbe>
 800f33a:	2300      	movs	r3, #0
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	4618      	mov	r0, r3
 800f340:	240a      	movs	r4, #10
 800f342:	460f      	mov	r7, r1
 800f344:	3101      	adds	r1, #1
 800f346:	783a      	ldrb	r2, [r7, #0]
 800f348:	3a30      	subs	r2, #48	; 0x30
 800f34a:	2a09      	cmp	r2, #9
 800f34c:	d903      	bls.n	800f356 <_svfiprintf_r+0x192>
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d0ca      	beq.n	800f2e8 <_svfiprintf_r+0x124>
 800f352:	9005      	str	r0, [sp, #20]
 800f354:	e7c8      	b.n	800f2e8 <_svfiprintf_r+0x124>
 800f356:	fb04 2000 	mla	r0, r4, r0, r2
 800f35a:	2301      	movs	r3, #1
 800f35c:	e7f1      	b.n	800f342 <_svfiprintf_r+0x17e>
 800f35e:	ab03      	add	r3, sp, #12
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	462a      	mov	r2, r5
 800f364:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <_svfiprintf_r+0x1e4>)
 800f366:	a904      	add	r1, sp, #16
 800f368:	4640      	mov	r0, r8
 800f36a:	f3af 8000 	nop.w
 800f36e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f372:	4681      	mov	r9, r0
 800f374:	d1d9      	bne.n	800f32a <_svfiprintf_r+0x166>
 800f376:	89ab      	ldrh	r3, [r5, #12]
 800f378:	065b      	lsls	r3, r3, #25
 800f37a:	f53f af38 	bmi.w	800f1ee <_svfiprintf_r+0x2a>
 800f37e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f380:	b01d      	add	sp, #116	; 0x74
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	ab03      	add	r3, sp, #12
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	462a      	mov	r2, r5
 800f38c:	4b06      	ldr	r3, [pc, #24]	; (800f3a8 <_svfiprintf_r+0x1e4>)
 800f38e:	a904      	add	r1, sp, #16
 800f390:	4640      	mov	r0, r8
 800f392:	f000 f9c1 	bl	800f718 <_printf_i>
 800f396:	e7ea      	b.n	800f36e <_svfiprintf_r+0x1aa>
 800f398:	08012b04 	.word	0x08012b04
 800f39c:	08012b0a 	.word	0x08012b0a
 800f3a0:	08012b0e 	.word	0x08012b0e
 800f3a4:	00000000 	.word	0x00000000
 800f3a8:	0800f10d 	.word	0x0800f10d

0800f3ac <__sfputc_r>:
 800f3ac:	6893      	ldr	r3, [r2, #8]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	b410      	push	{r4}
 800f3b4:	6093      	str	r3, [r2, #8]
 800f3b6:	da09      	bge.n	800f3cc <__sfputc_r+0x20>
 800f3b8:	6994      	ldr	r4, [r2, #24]
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	db02      	blt.n	800f3c4 <__sfputc_r+0x18>
 800f3be:	b2cb      	uxtb	r3, r1
 800f3c0:	2b0a      	cmp	r3, #10
 800f3c2:	d103      	bne.n	800f3cc <__sfputc_r+0x20>
 800f3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c8:	f000 bb1a 	b.w	800fa00 <__swbuf_r>
 800f3cc:	6813      	ldr	r3, [r2, #0]
 800f3ce:	1c58      	adds	r0, r3, #1
 800f3d0:	6010      	str	r0, [r2, #0]
 800f3d2:	7019      	strb	r1, [r3, #0]
 800f3d4:	b2c8      	uxtb	r0, r1
 800f3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <__sfputs_r>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	4606      	mov	r6, r0
 800f3e0:	460f      	mov	r7, r1
 800f3e2:	4614      	mov	r4, r2
 800f3e4:	18d5      	adds	r5, r2, r3
 800f3e6:	42ac      	cmp	r4, r5
 800f3e8:	d101      	bne.n	800f3ee <__sfputs_r+0x12>
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e007      	b.n	800f3fe <__sfputs_r+0x22>
 800f3ee:	463a      	mov	r2, r7
 800f3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f7ff ffd9 	bl	800f3ac <__sfputc_r>
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	d1f3      	bne.n	800f3e6 <__sfputs_r+0xa>
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f400 <_vfiprintf_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	b09d      	sub	sp, #116	; 0x74
 800f406:	460c      	mov	r4, r1
 800f408:	4617      	mov	r7, r2
 800f40a:	9303      	str	r3, [sp, #12]
 800f40c:	4606      	mov	r6, r0
 800f40e:	b118      	cbz	r0, 800f418 <_vfiprintf_r+0x18>
 800f410:	6983      	ldr	r3, [r0, #24]
 800f412:	b90b      	cbnz	r3, 800f418 <_vfiprintf_r+0x18>
 800f414:	f7ff fd3c 	bl	800ee90 <__sinit>
 800f418:	4b7c      	ldr	r3, [pc, #496]	; (800f60c <_vfiprintf_r+0x20c>)
 800f41a:	429c      	cmp	r4, r3
 800f41c:	d157      	bne.n	800f4ce <_vfiprintf_r+0xce>
 800f41e:	6874      	ldr	r4, [r6, #4]
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	0718      	lsls	r0, r3, #28
 800f424:	d55d      	bpl.n	800f4e2 <_vfiprintf_r+0xe2>
 800f426:	6923      	ldr	r3, [r4, #16]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d05a      	beq.n	800f4e2 <_vfiprintf_r+0xe2>
 800f42c:	2300      	movs	r3, #0
 800f42e:	9309      	str	r3, [sp, #36]	; 0x24
 800f430:	2320      	movs	r3, #32
 800f432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f436:	2330      	movs	r3, #48	; 0x30
 800f438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f43c:	f04f 0b01 	mov.w	fp, #1
 800f440:	46b8      	mov	r8, r7
 800f442:	4645      	mov	r5, r8
 800f444:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d155      	bne.n	800f4f8 <_vfiprintf_r+0xf8>
 800f44c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f450:	d00b      	beq.n	800f46a <_vfiprintf_r+0x6a>
 800f452:	4653      	mov	r3, sl
 800f454:	463a      	mov	r2, r7
 800f456:	4621      	mov	r1, r4
 800f458:	4630      	mov	r0, r6
 800f45a:	f7ff ffbf 	bl	800f3dc <__sfputs_r>
 800f45e:	3001      	adds	r0, #1
 800f460:	f000 80c4 	beq.w	800f5ec <_vfiprintf_r+0x1ec>
 800f464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f466:	4453      	add	r3, sl
 800f468:	9309      	str	r3, [sp, #36]	; 0x24
 800f46a:	f898 3000 	ldrb.w	r3, [r8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f000 80bc 	beq.w	800f5ec <_vfiprintf_r+0x1ec>
 800f474:	2300      	movs	r3, #0
 800f476:	f04f 32ff 	mov.w	r2, #4294967295
 800f47a:	9304      	str	r3, [sp, #16]
 800f47c:	9307      	str	r3, [sp, #28]
 800f47e:	9205      	str	r2, [sp, #20]
 800f480:	9306      	str	r3, [sp, #24]
 800f482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f486:	931a      	str	r3, [sp, #104]	; 0x68
 800f488:	2205      	movs	r2, #5
 800f48a:	7829      	ldrb	r1, [r5, #0]
 800f48c:	4860      	ldr	r0, [pc, #384]	; (800f610 <_vfiprintf_r+0x210>)
 800f48e:	f7f0 fedf 	bl	8000250 <memchr>
 800f492:	f105 0801 	add.w	r8, r5, #1
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	2800      	cmp	r0, #0
 800f49a:	d131      	bne.n	800f500 <_vfiprintf_r+0x100>
 800f49c:	06d9      	lsls	r1, r3, #27
 800f49e:	bf44      	itt	mi
 800f4a0:	2220      	movmi	r2, #32
 800f4a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4a6:	071a      	lsls	r2, r3, #28
 800f4a8:	bf44      	itt	mi
 800f4aa:	222b      	movmi	r2, #43	; 0x2b
 800f4ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4b0:	782a      	ldrb	r2, [r5, #0]
 800f4b2:	2a2a      	cmp	r2, #42	; 0x2a
 800f4b4:	d02c      	beq.n	800f510 <_vfiprintf_r+0x110>
 800f4b6:	9a07      	ldr	r2, [sp, #28]
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	200a      	movs	r0, #10
 800f4bc:	46a8      	mov	r8, r5
 800f4be:	3501      	adds	r5, #1
 800f4c0:	f898 3000 	ldrb.w	r3, [r8]
 800f4c4:	3b30      	subs	r3, #48	; 0x30
 800f4c6:	2b09      	cmp	r3, #9
 800f4c8:	d96d      	bls.n	800f5a6 <_vfiprintf_r+0x1a6>
 800f4ca:	b371      	cbz	r1, 800f52a <_vfiprintf_r+0x12a>
 800f4cc:	e026      	b.n	800f51c <_vfiprintf_r+0x11c>
 800f4ce:	4b51      	ldr	r3, [pc, #324]	; (800f614 <_vfiprintf_r+0x214>)
 800f4d0:	429c      	cmp	r4, r3
 800f4d2:	d101      	bne.n	800f4d8 <_vfiprintf_r+0xd8>
 800f4d4:	68b4      	ldr	r4, [r6, #8]
 800f4d6:	e7a3      	b.n	800f420 <_vfiprintf_r+0x20>
 800f4d8:	4b4f      	ldr	r3, [pc, #316]	; (800f618 <_vfiprintf_r+0x218>)
 800f4da:	429c      	cmp	r4, r3
 800f4dc:	bf08      	it	eq
 800f4de:	68f4      	ldreq	r4, [r6, #12]
 800f4e0:	e79e      	b.n	800f420 <_vfiprintf_r+0x20>
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	f000 faef 	bl	800fac8 <__swsetup_r>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d09e      	beq.n	800f42c <_vfiprintf_r+0x2c>
 800f4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f2:	b01d      	add	sp, #116	; 0x74
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	2b25      	cmp	r3, #37	; 0x25
 800f4fa:	d0a7      	beq.n	800f44c <_vfiprintf_r+0x4c>
 800f4fc:	46a8      	mov	r8, r5
 800f4fe:	e7a0      	b.n	800f442 <_vfiprintf_r+0x42>
 800f500:	4a43      	ldr	r2, [pc, #268]	; (800f610 <_vfiprintf_r+0x210>)
 800f502:	1a80      	subs	r0, r0, r2
 800f504:	fa0b f000 	lsl.w	r0, fp, r0
 800f508:	4318      	orrs	r0, r3
 800f50a:	9004      	str	r0, [sp, #16]
 800f50c:	4645      	mov	r5, r8
 800f50e:	e7bb      	b.n	800f488 <_vfiprintf_r+0x88>
 800f510:	9a03      	ldr	r2, [sp, #12]
 800f512:	1d11      	adds	r1, r2, #4
 800f514:	6812      	ldr	r2, [r2, #0]
 800f516:	9103      	str	r1, [sp, #12]
 800f518:	2a00      	cmp	r2, #0
 800f51a:	db01      	blt.n	800f520 <_vfiprintf_r+0x120>
 800f51c:	9207      	str	r2, [sp, #28]
 800f51e:	e004      	b.n	800f52a <_vfiprintf_r+0x12a>
 800f520:	4252      	negs	r2, r2
 800f522:	f043 0302 	orr.w	r3, r3, #2
 800f526:	9207      	str	r2, [sp, #28]
 800f528:	9304      	str	r3, [sp, #16]
 800f52a:	f898 3000 	ldrb.w	r3, [r8]
 800f52e:	2b2e      	cmp	r3, #46	; 0x2e
 800f530:	d110      	bne.n	800f554 <_vfiprintf_r+0x154>
 800f532:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f536:	2b2a      	cmp	r3, #42	; 0x2a
 800f538:	f108 0101 	add.w	r1, r8, #1
 800f53c:	d137      	bne.n	800f5ae <_vfiprintf_r+0x1ae>
 800f53e:	9b03      	ldr	r3, [sp, #12]
 800f540:	1d1a      	adds	r2, r3, #4
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	9203      	str	r2, [sp, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	bfb8      	it	lt
 800f54a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f54e:	f108 0802 	add.w	r8, r8, #2
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	4d31      	ldr	r5, [pc, #196]	; (800f61c <_vfiprintf_r+0x21c>)
 800f556:	f898 1000 	ldrb.w	r1, [r8]
 800f55a:	2203      	movs	r2, #3
 800f55c:	4628      	mov	r0, r5
 800f55e:	f7f0 fe77 	bl	8000250 <memchr>
 800f562:	b140      	cbz	r0, 800f576 <_vfiprintf_r+0x176>
 800f564:	2340      	movs	r3, #64	; 0x40
 800f566:	1b40      	subs	r0, r0, r5
 800f568:	fa03 f000 	lsl.w	r0, r3, r0
 800f56c:	9b04      	ldr	r3, [sp, #16]
 800f56e:	4303      	orrs	r3, r0
 800f570:	9304      	str	r3, [sp, #16]
 800f572:	f108 0801 	add.w	r8, r8, #1
 800f576:	f898 1000 	ldrb.w	r1, [r8]
 800f57a:	4829      	ldr	r0, [pc, #164]	; (800f620 <_vfiprintf_r+0x220>)
 800f57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f580:	2206      	movs	r2, #6
 800f582:	f108 0701 	add.w	r7, r8, #1
 800f586:	f7f0 fe63 	bl	8000250 <memchr>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d034      	beq.n	800f5f8 <_vfiprintf_r+0x1f8>
 800f58e:	4b25      	ldr	r3, [pc, #148]	; (800f624 <_vfiprintf_r+0x224>)
 800f590:	bb03      	cbnz	r3, 800f5d4 <_vfiprintf_r+0x1d4>
 800f592:	9b03      	ldr	r3, [sp, #12]
 800f594:	3307      	adds	r3, #7
 800f596:	f023 0307 	bic.w	r3, r3, #7
 800f59a:	3308      	adds	r3, #8
 800f59c:	9303      	str	r3, [sp, #12]
 800f59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a0:	444b      	add	r3, r9
 800f5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a4:	e74c      	b.n	800f440 <_vfiprintf_r+0x40>
 800f5a6:	fb00 3202 	mla	r2, r0, r2, r3
 800f5aa:	2101      	movs	r1, #1
 800f5ac:	e786      	b.n	800f4bc <_vfiprintf_r+0xbc>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9305      	str	r3, [sp, #20]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	250a      	movs	r5, #10
 800f5b6:	4688      	mov	r8, r1
 800f5b8:	3101      	adds	r1, #1
 800f5ba:	f898 2000 	ldrb.w	r2, [r8]
 800f5be:	3a30      	subs	r2, #48	; 0x30
 800f5c0:	2a09      	cmp	r2, #9
 800f5c2:	d903      	bls.n	800f5cc <_vfiprintf_r+0x1cc>
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0c5      	beq.n	800f554 <_vfiprintf_r+0x154>
 800f5c8:	9005      	str	r0, [sp, #20]
 800f5ca:	e7c3      	b.n	800f554 <_vfiprintf_r+0x154>
 800f5cc:	fb05 2000 	mla	r0, r5, r0, r2
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e7f0      	b.n	800f5b6 <_vfiprintf_r+0x1b6>
 800f5d4:	ab03      	add	r3, sp, #12
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	4622      	mov	r2, r4
 800f5da:	4b13      	ldr	r3, [pc, #76]	; (800f628 <_vfiprintf_r+0x228>)
 800f5dc:	a904      	add	r1, sp, #16
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f3af 8000 	nop.w
 800f5e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f5e8:	4681      	mov	r9, r0
 800f5ea:	d1d8      	bne.n	800f59e <_vfiprintf_r+0x19e>
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	065b      	lsls	r3, r3, #25
 800f5f0:	f53f af7d 	bmi.w	800f4ee <_vfiprintf_r+0xee>
 800f5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5f6:	e77c      	b.n	800f4f2 <_vfiprintf_r+0xf2>
 800f5f8:	ab03      	add	r3, sp, #12
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	4622      	mov	r2, r4
 800f5fe:	4b0a      	ldr	r3, [pc, #40]	; (800f628 <_vfiprintf_r+0x228>)
 800f600:	a904      	add	r1, sp, #16
 800f602:	4630      	mov	r0, r6
 800f604:	f000 f888 	bl	800f718 <_printf_i>
 800f608:	e7ec      	b.n	800f5e4 <_vfiprintf_r+0x1e4>
 800f60a:	bf00      	nop
 800f60c:	08012ac0 	.word	0x08012ac0
 800f610:	08012b04 	.word	0x08012b04
 800f614:	08012ae0 	.word	0x08012ae0
 800f618:	08012aa0 	.word	0x08012aa0
 800f61c:	08012b0a 	.word	0x08012b0a
 800f620:	08012b0e 	.word	0x08012b0e
 800f624:	00000000 	.word	0x00000000
 800f628:	0800f3dd 	.word	0x0800f3dd

0800f62c <_printf_common>:
 800f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f630:	4691      	mov	r9, r2
 800f632:	461f      	mov	r7, r3
 800f634:	688a      	ldr	r2, [r1, #8]
 800f636:	690b      	ldr	r3, [r1, #16]
 800f638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f63c:	4293      	cmp	r3, r2
 800f63e:	bfb8      	it	lt
 800f640:	4613      	movlt	r3, r2
 800f642:	f8c9 3000 	str.w	r3, [r9]
 800f646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f64a:	4606      	mov	r6, r0
 800f64c:	460c      	mov	r4, r1
 800f64e:	b112      	cbz	r2, 800f656 <_printf_common+0x2a>
 800f650:	3301      	adds	r3, #1
 800f652:	f8c9 3000 	str.w	r3, [r9]
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	0699      	lsls	r1, r3, #26
 800f65a:	bf42      	ittt	mi
 800f65c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f660:	3302      	addmi	r3, #2
 800f662:	f8c9 3000 	strmi.w	r3, [r9]
 800f666:	6825      	ldr	r5, [r4, #0]
 800f668:	f015 0506 	ands.w	r5, r5, #6
 800f66c:	d107      	bne.n	800f67e <_printf_common+0x52>
 800f66e:	f104 0a19 	add.w	sl, r4, #25
 800f672:	68e3      	ldr	r3, [r4, #12]
 800f674:	f8d9 2000 	ldr.w	r2, [r9]
 800f678:	1a9b      	subs	r3, r3, r2
 800f67a:	429d      	cmp	r5, r3
 800f67c:	db29      	blt.n	800f6d2 <_printf_common+0xa6>
 800f67e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f682:	6822      	ldr	r2, [r4, #0]
 800f684:	3300      	adds	r3, #0
 800f686:	bf18      	it	ne
 800f688:	2301      	movne	r3, #1
 800f68a:	0692      	lsls	r2, r2, #26
 800f68c:	d42e      	bmi.n	800f6ec <_printf_common+0xc0>
 800f68e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f692:	4639      	mov	r1, r7
 800f694:	4630      	mov	r0, r6
 800f696:	47c0      	blx	r8
 800f698:	3001      	adds	r0, #1
 800f69a:	d021      	beq.n	800f6e0 <_printf_common+0xb4>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	68e5      	ldr	r5, [r4, #12]
 800f6a0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6a4:	f003 0306 	and.w	r3, r3, #6
 800f6a8:	2b04      	cmp	r3, #4
 800f6aa:	bf08      	it	eq
 800f6ac:	1aad      	subeq	r5, r5, r2
 800f6ae:	68a3      	ldr	r3, [r4, #8]
 800f6b0:	6922      	ldr	r2, [r4, #16]
 800f6b2:	bf0c      	ite	eq
 800f6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6b8:	2500      	movne	r5, #0
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	bfc4      	itt	gt
 800f6be:	1a9b      	subgt	r3, r3, r2
 800f6c0:	18ed      	addgt	r5, r5, r3
 800f6c2:	f04f 0900 	mov.w	r9, #0
 800f6c6:	341a      	adds	r4, #26
 800f6c8:	454d      	cmp	r5, r9
 800f6ca:	d11b      	bne.n	800f704 <_printf_common+0xd8>
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4652      	mov	r2, sl
 800f6d6:	4639      	mov	r1, r7
 800f6d8:	4630      	mov	r0, r6
 800f6da:	47c0      	blx	r8
 800f6dc:	3001      	adds	r0, #1
 800f6de:	d103      	bne.n	800f6e8 <_printf_common+0xbc>
 800f6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e8:	3501      	adds	r5, #1
 800f6ea:	e7c2      	b.n	800f672 <_printf_common+0x46>
 800f6ec:	18e1      	adds	r1, r4, r3
 800f6ee:	1c5a      	adds	r2, r3, #1
 800f6f0:	2030      	movs	r0, #48	; 0x30
 800f6f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6f6:	4422      	add	r2, r4
 800f6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f700:	3302      	adds	r3, #2
 800f702:	e7c4      	b.n	800f68e <_printf_common+0x62>
 800f704:	2301      	movs	r3, #1
 800f706:	4622      	mov	r2, r4
 800f708:	4639      	mov	r1, r7
 800f70a:	4630      	mov	r0, r6
 800f70c:	47c0      	blx	r8
 800f70e:	3001      	adds	r0, #1
 800f710:	d0e6      	beq.n	800f6e0 <_printf_common+0xb4>
 800f712:	f109 0901 	add.w	r9, r9, #1
 800f716:	e7d7      	b.n	800f6c8 <_printf_common+0x9c>

0800f718 <_printf_i>:
 800f718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f71c:	4617      	mov	r7, r2
 800f71e:	7e0a      	ldrb	r2, [r1, #24]
 800f720:	b085      	sub	sp, #20
 800f722:	2a6e      	cmp	r2, #110	; 0x6e
 800f724:	4698      	mov	r8, r3
 800f726:	4606      	mov	r6, r0
 800f728:	460c      	mov	r4, r1
 800f72a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f72c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800f730:	f000 80bc 	beq.w	800f8ac <_printf_i+0x194>
 800f734:	d81a      	bhi.n	800f76c <_printf_i+0x54>
 800f736:	2a63      	cmp	r2, #99	; 0x63
 800f738:	d02e      	beq.n	800f798 <_printf_i+0x80>
 800f73a:	d80a      	bhi.n	800f752 <_printf_i+0x3a>
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	f000 80c8 	beq.w	800f8d2 <_printf_i+0x1ba>
 800f742:	2a58      	cmp	r2, #88	; 0x58
 800f744:	f000 808a 	beq.w	800f85c <_printf_i+0x144>
 800f748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f74c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800f750:	e02a      	b.n	800f7a8 <_printf_i+0x90>
 800f752:	2a64      	cmp	r2, #100	; 0x64
 800f754:	d001      	beq.n	800f75a <_printf_i+0x42>
 800f756:	2a69      	cmp	r2, #105	; 0x69
 800f758:	d1f6      	bne.n	800f748 <_printf_i+0x30>
 800f75a:	6821      	ldr	r1, [r4, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f762:	d023      	beq.n	800f7ac <_printf_i+0x94>
 800f764:	1d11      	adds	r1, r2, #4
 800f766:	6019      	str	r1, [r3, #0]
 800f768:	6813      	ldr	r3, [r2, #0]
 800f76a:	e027      	b.n	800f7bc <_printf_i+0xa4>
 800f76c:	2a73      	cmp	r2, #115	; 0x73
 800f76e:	f000 80b4 	beq.w	800f8da <_printf_i+0x1c2>
 800f772:	d808      	bhi.n	800f786 <_printf_i+0x6e>
 800f774:	2a6f      	cmp	r2, #111	; 0x6f
 800f776:	d02a      	beq.n	800f7ce <_printf_i+0xb6>
 800f778:	2a70      	cmp	r2, #112	; 0x70
 800f77a:	d1e5      	bne.n	800f748 <_printf_i+0x30>
 800f77c:	680a      	ldr	r2, [r1, #0]
 800f77e:	f042 0220 	orr.w	r2, r2, #32
 800f782:	600a      	str	r2, [r1, #0]
 800f784:	e003      	b.n	800f78e <_printf_i+0x76>
 800f786:	2a75      	cmp	r2, #117	; 0x75
 800f788:	d021      	beq.n	800f7ce <_printf_i+0xb6>
 800f78a:	2a78      	cmp	r2, #120	; 0x78
 800f78c:	d1dc      	bne.n	800f748 <_printf_i+0x30>
 800f78e:	2278      	movs	r2, #120	; 0x78
 800f790:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800f794:	496e      	ldr	r1, [pc, #440]	; (800f950 <_printf_i+0x238>)
 800f796:	e064      	b.n	800f862 <_printf_i+0x14a>
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800f79e:	1d11      	adds	r1, r2, #4
 800f7a0:	6019      	str	r1, [r3, #0]
 800f7a2:	6813      	ldr	r3, [r2, #0]
 800f7a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e0a3      	b.n	800f8f4 <_printf_i+0x1dc>
 800f7ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f7b0:	f102 0104 	add.w	r1, r2, #4
 800f7b4:	6019      	str	r1, [r3, #0]
 800f7b6:	d0d7      	beq.n	800f768 <_printf_i+0x50>
 800f7b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da03      	bge.n	800f7c8 <_printf_i+0xb0>
 800f7c0:	222d      	movs	r2, #45	; 0x2d
 800f7c2:	425b      	negs	r3, r3
 800f7c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7c8:	4962      	ldr	r1, [pc, #392]	; (800f954 <_printf_i+0x23c>)
 800f7ca:	220a      	movs	r2, #10
 800f7cc:	e017      	b.n	800f7fe <_printf_i+0xe6>
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	6819      	ldr	r1, [r3, #0]
 800f7d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f7d6:	d003      	beq.n	800f7e0 <_printf_i+0xc8>
 800f7d8:	1d08      	adds	r0, r1, #4
 800f7da:	6018      	str	r0, [r3, #0]
 800f7dc:	680b      	ldr	r3, [r1, #0]
 800f7de:	e006      	b.n	800f7ee <_printf_i+0xd6>
 800f7e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f7e4:	f101 0004 	add.w	r0, r1, #4
 800f7e8:	6018      	str	r0, [r3, #0]
 800f7ea:	d0f7      	beq.n	800f7dc <_printf_i+0xc4>
 800f7ec:	880b      	ldrh	r3, [r1, #0]
 800f7ee:	4959      	ldr	r1, [pc, #356]	; (800f954 <_printf_i+0x23c>)
 800f7f0:	2a6f      	cmp	r2, #111	; 0x6f
 800f7f2:	bf14      	ite	ne
 800f7f4:	220a      	movne	r2, #10
 800f7f6:	2208      	moveq	r2, #8
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800f7fe:	6865      	ldr	r5, [r4, #4]
 800f800:	60a5      	str	r5, [r4, #8]
 800f802:	2d00      	cmp	r5, #0
 800f804:	f2c0 809c 	blt.w	800f940 <_printf_i+0x228>
 800f808:	6820      	ldr	r0, [r4, #0]
 800f80a:	f020 0004 	bic.w	r0, r0, #4
 800f80e:	6020      	str	r0, [r4, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d13f      	bne.n	800f894 <_printf_i+0x17c>
 800f814:	2d00      	cmp	r5, #0
 800f816:	f040 8095 	bne.w	800f944 <_printf_i+0x22c>
 800f81a:	4675      	mov	r5, lr
 800f81c:	2a08      	cmp	r2, #8
 800f81e:	d10b      	bne.n	800f838 <_printf_i+0x120>
 800f820:	6823      	ldr	r3, [r4, #0]
 800f822:	07da      	lsls	r2, r3, #31
 800f824:	d508      	bpl.n	800f838 <_printf_i+0x120>
 800f826:	6923      	ldr	r3, [r4, #16]
 800f828:	6862      	ldr	r2, [r4, #4]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	bfde      	ittt	le
 800f82e:	2330      	movle	r3, #48	; 0x30
 800f830:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f834:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f838:	ebae 0305 	sub.w	r3, lr, r5
 800f83c:	6123      	str	r3, [r4, #16]
 800f83e:	f8cd 8000 	str.w	r8, [sp]
 800f842:	463b      	mov	r3, r7
 800f844:	aa03      	add	r2, sp, #12
 800f846:	4621      	mov	r1, r4
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff feef 	bl	800f62c <_printf_common>
 800f84e:	3001      	adds	r0, #1
 800f850:	d155      	bne.n	800f8fe <_printf_i+0x1e6>
 800f852:	f04f 30ff 	mov.w	r0, #4294967295
 800f856:	b005      	add	sp, #20
 800f858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f85c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800f860:	493c      	ldr	r1, [pc, #240]	; (800f954 <_printf_i+0x23c>)
 800f862:	6822      	ldr	r2, [r4, #0]
 800f864:	6818      	ldr	r0, [r3, #0]
 800f866:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f86a:	f100 0504 	add.w	r5, r0, #4
 800f86e:	601d      	str	r5, [r3, #0]
 800f870:	d001      	beq.n	800f876 <_printf_i+0x15e>
 800f872:	6803      	ldr	r3, [r0, #0]
 800f874:	e002      	b.n	800f87c <_printf_i+0x164>
 800f876:	0655      	lsls	r5, r2, #25
 800f878:	d5fb      	bpl.n	800f872 <_printf_i+0x15a>
 800f87a:	8803      	ldrh	r3, [r0, #0]
 800f87c:	07d0      	lsls	r0, r2, #31
 800f87e:	bf44      	itt	mi
 800f880:	f042 0220 	orrmi.w	r2, r2, #32
 800f884:	6022      	strmi	r2, [r4, #0]
 800f886:	b91b      	cbnz	r3, 800f890 <_printf_i+0x178>
 800f888:	6822      	ldr	r2, [r4, #0]
 800f88a:	f022 0220 	bic.w	r2, r2, #32
 800f88e:	6022      	str	r2, [r4, #0]
 800f890:	2210      	movs	r2, #16
 800f892:	e7b1      	b.n	800f7f8 <_printf_i+0xe0>
 800f894:	4675      	mov	r5, lr
 800f896:	fbb3 f0f2 	udiv	r0, r3, r2
 800f89a:	fb02 3310 	mls	r3, r2, r0, r3
 800f89e:	5ccb      	ldrb	r3, [r1, r3]
 800f8a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d1f5      	bne.n	800f896 <_printf_i+0x17e>
 800f8aa:	e7b7      	b.n	800f81c <_printf_i+0x104>
 800f8ac:	6808      	ldr	r0, [r1, #0]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	6949      	ldr	r1, [r1, #20]
 800f8b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f8b6:	d004      	beq.n	800f8c2 <_printf_i+0x1aa>
 800f8b8:	1d10      	adds	r0, r2, #4
 800f8ba:	6018      	str	r0, [r3, #0]
 800f8bc:	6813      	ldr	r3, [r2, #0]
 800f8be:	6019      	str	r1, [r3, #0]
 800f8c0:	e007      	b.n	800f8d2 <_printf_i+0x1ba>
 800f8c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8c6:	f102 0004 	add.w	r0, r2, #4
 800f8ca:	6018      	str	r0, [r3, #0]
 800f8cc:	6813      	ldr	r3, [r2, #0]
 800f8ce:	d0f6      	beq.n	800f8be <_printf_i+0x1a6>
 800f8d0:	8019      	strh	r1, [r3, #0]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	4675      	mov	r5, lr
 800f8d8:	e7b1      	b.n	800f83e <_printf_i+0x126>
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	1d11      	adds	r1, r2, #4
 800f8de:	6019      	str	r1, [r3, #0]
 800f8e0:	6815      	ldr	r5, [r2, #0]
 800f8e2:	6862      	ldr	r2, [r4, #4]
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f7f0 fcb2 	bl	8000250 <memchr>
 800f8ec:	b108      	cbz	r0, 800f8f2 <_printf_i+0x1da>
 800f8ee:	1b40      	subs	r0, r0, r5
 800f8f0:	6060      	str	r0, [r4, #4]
 800f8f2:	6863      	ldr	r3, [r4, #4]
 800f8f4:	6123      	str	r3, [r4, #16]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8fc:	e79f      	b.n	800f83e <_printf_i+0x126>
 800f8fe:	6923      	ldr	r3, [r4, #16]
 800f900:	462a      	mov	r2, r5
 800f902:	4639      	mov	r1, r7
 800f904:	4630      	mov	r0, r6
 800f906:	47c0      	blx	r8
 800f908:	3001      	adds	r0, #1
 800f90a:	d0a2      	beq.n	800f852 <_printf_i+0x13a>
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	079b      	lsls	r3, r3, #30
 800f910:	d507      	bpl.n	800f922 <_printf_i+0x20a>
 800f912:	2500      	movs	r5, #0
 800f914:	f104 0919 	add.w	r9, r4, #25
 800f918:	68e3      	ldr	r3, [r4, #12]
 800f91a:	9a03      	ldr	r2, [sp, #12]
 800f91c:	1a9b      	subs	r3, r3, r2
 800f91e:	429d      	cmp	r5, r3
 800f920:	db05      	blt.n	800f92e <_printf_i+0x216>
 800f922:	68e0      	ldr	r0, [r4, #12]
 800f924:	9b03      	ldr	r3, [sp, #12]
 800f926:	4298      	cmp	r0, r3
 800f928:	bfb8      	it	lt
 800f92a:	4618      	movlt	r0, r3
 800f92c:	e793      	b.n	800f856 <_printf_i+0x13e>
 800f92e:	2301      	movs	r3, #1
 800f930:	464a      	mov	r2, r9
 800f932:	4639      	mov	r1, r7
 800f934:	4630      	mov	r0, r6
 800f936:	47c0      	blx	r8
 800f938:	3001      	adds	r0, #1
 800f93a:	d08a      	beq.n	800f852 <_printf_i+0x13a>
 800f93c:	3501      	adds	r5, #1
 800f93e:	e7eb      	b.n	800f918 <_printf_i+0x200>
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1a7      	bne.n	800f894 <_printf_i+0x17c>
 800f944:	780b      	ldrb	r3, [r1, #0]
 800f946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f94a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f94e:	e765      	b.n	800f81c <_printf_i+0x104>
 800f950:	08012b26 	.word	0x08012b26
 800f954:	08012b15 	.word	0x08012b15

0800f958 <_sbrk_r>:
 800f958:	b538      	push	{r3, r4, r5, lr}
 800f95a:	4c06      	ldr	r4, [pc, #24]	; (800f974 <_sbrk_r+0x1c>)
 800f95c:	2300      	movs	r3, #0
 800f95e:	4605      	mov	r5, r0
 800f960:	4608      	mov	r0, r1
 800f962:	6023      	str	r3, [r4, #0]
 800f964:	f7fe ffe8 	bl	800e938 <_sbrk>
 800f968:	1c43      	adds	r3, r0, #1
 800f96a:	d102      	bne.n	800f972 <_sbrk_r+0x1a>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	b103      	cbz	r3, 800f972 <_sbrk_r+0x1a>
 800f970:	602b      	str	r3, [r5, #0]
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	2000bef8 	.word	0x2000bef8

0800f978 <__sread>:
 800f978:	b510      	push	{r4, lr}
 800f97a:	460c      	mov	r4, r1
 800f97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f980:	f000 fa70 	bl	800fe64 <_read_r>
 800f984:	2800      	cmp	r0, #0
 800f986:	bfab      	itete	ge
 800f988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f98a:	89a3      	ldrhlt	r3, [r4, #12]
 800f98c:	181b      	addge	r3, r3, r0
 800f98e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f992:	bfac      	ite	ge
 800f994:	6563      	strge	r3, [r4, #84]	; 0x54
 800f996:	81a3      	strhlt	r3, [r4, #12]
 800f998:	bd10      	pop	{r4, pc}

0800f99a <__swrite>:
 800f99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99e:	461f      	mov	r7, r3
 800f9a0:	898b      	ldrh	r3, [r1, #12]
 800f9a2:	05db      	lsls	r3, r3, #23
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	4616      	mov	r6, r2
 800f9aa:	d505      	bpl.n	800f9b8 <__swrite+0x1e>
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b4:	f000 f9b8 	bl	800fd28 <_lseek_r>
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9c2:	81a3      	strh	r3, [r4, #12]
 800f9c4:	4632      	mov	r2, r6
 800f9c6:	463b      	mov	r3, r7
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ce:	f000 b869 	b.w	800faa4 <_write_r>

0800f9d2 <__sseek>:
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9da:	f000 f9a5 	bl	800fd28 <_lseek_r>
 800f9de:	1c43      	adds	r3, r0, #1
 800f9e0:	89a3      	ldrh	r3, [r4, #12]
 800f9e2:	bf15      	itete	ne
 800f9e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ee:	81a3      	strheq	r3, [r4, #12]
 800f9f0:	bf18      	it	ne
 800f9f2:	81a3      	strhne	r3, [r4, #12]
 800f9f4:	bd10      	pop	{r4, pc}

0800f9f6 <__sclose>:
 800f9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fa:	f000 b8d3 	b.w	800fba4 <_close_r>
	...

0800fa00 <__swbuf_r>:
 800fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa02:	460e      	mov	r6, r1
 800fa04:	4614      	mov	r4, r2
 800fa06:	4605      	mov	r5, r0
 800fa08:	b118      	cbz	r0, 800fa12 <__swbuf_r+0x12>
 800fa0a:	6983      	ldr	r3, [r0, #24]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <__swbuf_r+0x12>
 800fa0e:	f7ff fa3f 	bl	800ee90 <__sinit>
 800fa12:	4b21      	ldr	r3, [pc, #132]	; (800fa98 <__swbuf_r+0x98>)
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d12a      	bne.n	800fa6e <__swbuf_r+0x6e>
 800fa18:	686c      	ldr	r4, [r5, #4]
 800fa1a:	69a3      	ldr	r3, [r4, #24]
 800fa1c:	60a3      	str	r3, [r4, #8]
 800fa1e:	89a3      	ldrh	r3, [r4, #12]
 800fa20:	071a      	lsls	r2, r3, #28
 800fa22:	d52e      	bpl.n	800fa82 <__swbuf_r+0x82>
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	b363      	cbz	r3, 800fa82 <__swbuf_r+0x82>
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	6820      	ldr	r0, [r4, #0]
 800fa2c:	1ac0      	subs	r0, r0, r3
 800fa2e:	6963      	ldr	r3, [r4, #20]
 800fa30:	b2f6      	uxtb	r6, r6
 800fa32:	4298      	cmp	r0, r3
 800fa34:	4637      	mov	r7, r6
 800fa36:	db04      	blt.n	800fa42 <__swbuf_r+0x42>
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f000 f94a 	bl	800fcd4 <_fflush_r>
 800fa40:	bb28      	cbnz	r0, 800fa8e <__swbuf_r+0x8e>
 800fa42:	68a3      	ldr	r3, [r4, #8]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	60a3      	str	r3, [r4, #8]
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	6022      	str	r2, [r4, #0]
 800fa4e:	701e      	strb	r6, [r3, #0]
 800fa50:	6963      	ldr	r3, [r4, #20]
 800fa52:	3001      	adds	r0, #1
 800fa54:	4298      	cmp	r0, r3
 800fa56:	d004      	beq.n	800fa62 <__swbuf_r+0x62>
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	07db      	lsls	r3, r3, #31
 800fa5c:	d519      	bpl.n	800fa92 <__swbuf_r+0x92>
 800fa5e:	2e0a      	cmp	r6, #10
 800fa60:	d117      	bne.n	800fa92 <__swbuf_r+0x92>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4628      	mov	r0, r5
 800fa66:	f000 f935 	bl	800fcd4 <_fflush_r>
 800fa6a:	b190      	cbz	r0, 800fa92 <__swbuf_r+0x92>
 800fa6c:	e00f      	b.n	800fa8e <__swbuf_r+0x8e>
 800fa6e:	4b0b      	ldr	r3, [pc, #44]	; (800fa9c <__swbuf_r+0x9c>)
 800fa70:	429c      	cmp	r4, r3
 800fa72:	d101      	bne.n	800fa78 <__swbuf_r+0x78>
 800fa74:	68ac      	ldr	r4, [r5, #8]
 800fa76:	e7d0      	b.n	800fa1a <__swbuf_r+0x1a>
 800fa78:	4b09      	ldr	r3, [pc, #36]	; (800faa0 <__swbuf_r+0xa0>)
 800fa7a:	429c      	cmp	r4, r3
 800fa7c:	bf08      	it	eq
 800fa7e:	68ec      	ldreq	r4, [r5, #12]
 800fa80:	e7cb      	b.n	800fa1a <__swbuf_r+0x1a>
 800fa82:	4621      	mov	r1, r4
 800fa84:	4628      	mov	r0, r5
 800fa86:	f000 f81f 	bl	800fac8 <__swsetup_r>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d0cc      	beq.n	800fa28 <__swbuf_r+0x28>
 800fa8e:	f04f 37ff 	mov.w	r7, #4294967295
 800fa92:	4638      	mov	r0, r7
 800fa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	08012ac0 	.word	0x08012ac0
 800fa9c:	08012ae0 	.word	0x08012ae0
 800faa0:	08012aa0 	.word	0x08012aa0

0800faa4 <_write_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	4c07      	ldr	r4, [pc, #28]	; (800fac4 <_write_r+0x20>)
 800faa8:	4605      	mov	r5, r0
 800faaa:	4608      	mov	r0, r1
 800faac:	4611      	mov	r1, r2
 800faae:	2200      	movs	r2, #0
 800fab0:	6022      	str	r2, [r4, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	f7fe ff32 	bl	800e91c <_write>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_write_r+0x1e>
 800fabc:	6823      	ldr	r3, [r4, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_write_r+0x1e>
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	2000bef8 	.word	0x2000bef8

0800fac8 <__swsetup_r>:
 800fac8:	4b32      	ldr	r3, [pc, #200]	; (800fb94 <__swsetup_r+0xcc>)
 800faca:	b570      	push	{r4, r5, r6, lr}
 800facc:	681d      	ldr	r5, [r3, #0]
 800face:	4606      	mov	r6, r0
 800fad0:	460c      	mov	r4, r1
 800fad2:	b125      	cbz	r5, 800fade <__swsetup_r+0x16>
 800fad4:	69ab      	ldr	r3, [r5, #24]
 800fad6:	b913      	cbnz	r3, 800fade <__swsetup_r+0x16>
 800fad8:	4628      	mov	r0, r5
 800fada:	f7ff f9d9 	bl	800ee90 <__sinit>
 800fade:	4b2e      	ldr	r3, [pc, #184]	; (800fb98 <__swsetup_r+0xd0>)
 800fae0:	429c      	cmp	r4, r3
 800fae2:	d10f      	bne.n	800fb04 <__swsetup_r+0x3c>
 800fae4:	686c      	ldr	r4, [r5, #4]
 800fae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faea:	b29a      	uxth	r2, r3
 800faec:	0715      	lsls	r5, r2, #28
 800faee:	d42c      	bmi.n	800fb4a <__swsetup_r+0x82>
 800faf0:	06d0      	lsls	r0, r2, #27
 800faf2:	d411      	bmi.n	800fb18 <__swsetup_r+0x50>
 800faf4:	2209      	movs	r2, #9
 800faf6:	6032      	str	r2, [r6, #0]
 800faf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafc:	81a3      	strh	r3, [r4, #12]
 800fafe:	f04f 30ff 	mov.w	r0, #4294967295
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	4b25      	ldr	r3, [pc, #148]	; (800fb9c <__swsetup_r+0xd4>)
 800fb06:	429c      	cmp	r4, r3
 800fb08:	d101      	bne.n	800fb0e <__swsetup_r+0x46>
 800fb0a:	68ac      	ldr	r4, [r5, #8]
 800fb0c:	e7eb      	b.n	800fae6 <__swsetup_r+0x1e>
 800fb0e:	4b24      	ldr	r3, [pc, #144]	; (800fba0 <__swsetup_r+0xd8>)
 800fb10:	429c      	cmp	r4, r3
 800fb12:	bf08      	it	eq
 800fb14:	68ec      	ldreq	r4, [r5, #12]
 800fb16:	e7e6      	b.n	800fae6 <__swsetup_r+0x1e>
 800fb18:	0751      	lsls	r1, r2, #29
 800fb1a:	d512      	bpl.n	800fb42 <__swsetup_r+0x7a>
 800fb1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb1e:	b141      	cbz	r1, 800fb32 <__swsetup_r+0x6a>
 800fb20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb24:	4299      	cmp	r1, r3
 800fb26:	d002      	beq.n	800fb2e <__swsetup_r+0x66>
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f7ff fa43 	bl	800efb4 <_free_r>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6363      	str	r3, [r4, #52]	; 0x34
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb38:	81a3      	strh	r3, [r4, #12]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6063      	str	r3, [r4, #4]
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f043 0308 	orr.w	r3, r3, #8
 800fb48:	81a3      	strh	r3, [r4, #12]
 800fb4a:	6923      	ldr	r3, [r4, #16]
 800fb4c:	b94b      	cbnz	r3, 800fb62 <__swsetup_r+0x9a>
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb58:	d003      	beq.n	800fb62 <__swsetup_r+0x9a>
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f000 f919 	bl	800fd94 <__smakebuf_r>
 800fb62:	89a2      	ldrh	r2, [r4, #12]
 800fb64:	f012 0301 	ands.w	r3, r2, #1
 800fb68:	d00c      	beq.n	800fb84 <__swsetup_r+0xbc>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	60a3      	str	r3, [r4, #8]
 800fb6e:	6963      	ldr	r3, [r4, #20]
 800fb70:	425b      	negs	r3, r3
 800fb72:	61a3      	str	r3, [r4, #24]
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	b953      	cbnz	r3, 800fb8e <__swsetup_r+0xc6>
 800fb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fb80:	d1ba      	bne.n	800faf8 <__swsetup_r+0x30>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	0792      	lsls	r2, r2, #30
 800fb86:	bf58      	it	pl
 800fb88:	6963      	ldrpl	r3, [r4, #20]
 800fb8a:	60a3      	str	r3, [r4, #8]
 800fb8c:	e7f2      	b.n	800fb74 <__swsetup_r+0xac>
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e7f7      	b.n	800fb82 <__swsetup_r+0xba>
 800fb92:	bf00      	nop
 800fb94:	20000184 	.word	0x20000184
 800fb98:	08012ac0 	.word	0x08012ac0
 800fb9c:	08012ae0 	.word	0x08012ae0
 800fba0:	08012aa0 	.word	0x08012aa0

0800fba4 <_close_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4c06      	ldr	r4, [pc, #24]	; (800fbc0 <_close_r+0x1c>)
 800fba8:	2300      	movs	r3, #0
 800fbaa:	4605      	mov	r5, r0
 800fbac:	4608      	mov	r0, r1
 800fbae:	6023      	str	r3, [r4, #0]
 800fbb0:	f7fe fedc 	bl	800e96c <_close>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_close_r+0x1a>
 800fbb8:	6823      	ldr	r3, [r4, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_close_r+0x1a>
 800fbbc:	602b      	str	r3, [r5, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	2000bef8 	.word	0x2000bef8

0800fbc4 <__sflush_r>:
 800fbc4:	898a      	ldrh	r2, [r1, #12]
 800fbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbca:	4605      	mov	r5, r0
 800fbcc:	0710      	lsls	r0, r2, #28
 800fbce:	460c      	mov	r4, r1
 800fbd0:	d45a      	bmi.n	800fc88 <__sflush_r+0xc4>
 800fbd2:	684b      	ldr	r3, [r1, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	dc05      	bgt.n	800fbe4 <__sflush_r+0x20>
 800fbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	dc02      	bgt.n	800fbe4 <__sflush_r+0x20>
 800fbde:	2000      	movs	r0, #0
 800fbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	d0f9      	beq.n	800fbde <__sflush_r+0x1a>
 800fbea:	2300      	movs	r3, #0
 800fbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbf0:	682f      	ldr	r7, [r5, #0]
 800fbf2:	602b      	str	r3, [r5, #0]
 800fbf4:	d033      	beq.n	800fc5e <__sflush_r+0x9a>
 800fbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	075a      	lsls	r2, r3, #29
 800fbfc:	d505      	bpl.n	800fc0a <__sflush_r+0x46>
 800fbfe:	6863      	ldr	r3, [r4, #4]
 800fc00:	1ac0      	subs	r0, r0, r3
 800fc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc04:	b10b      	cbz	r3, 800fc0a <__sflush_r+0x46>
 800fc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc08:	1ac0      	subs	r0, r0, r3
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc10:	6a21      	ldr	r1, [r4, #32]
 800fc12:	4628      	mov	r0, r5
 800fc14:	47b0      	blx	r6
 800fc16:	1c43      	adds	r3, r0, #1
 800fc18:	89a3      	ldrh	r3, [r4, #12]
 800fc1a:	d106      	bne.n	800fc2a <__sflush_r+0x66>
 800fc1c:	6829      	ldr	r1, [r5, #0]
 800fc1e:	291d      	cmp	r1, #29
 800fc20:	d84b      	bhi.n	800fcba <__sflush_r+0xf6>
 800fc22:	4a2b      	ldr	r2, [pc, #172]	; (800fcd0 <__sflush_r+0x10c>)
 800fc24:	40ca      	lsrs	r2, r1
 800fc26:	07d6      	lsls	r6, r2, #31
 800fc28:	d547      	bpl.n	800fcba <__sflush_r+0xf6>
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	6062      	str	r2, [r4, #4]
 800fc2e:	04d9      	lsls	r1, r3, #19
 800fc30:	6922      	ldr	r2, [r4, #16]
 800fc32:	6022      	str	r2, [r4, #0]
 800fc34:	d504      	bpl.n	800fc40 <__sflush_r+0x7c>
 800fc36:	1c42      	adds	r2, r0, #1
 800fc38:	d101      	bne.n	800fc3e <__sflush_r+0x7a>
 800fc3a:	682b      	ldr	r3, [r5, #0]
 800fc3c:	b903      	cbnz	r3, 800fc40 <__sflush_r+0x7c>
 800fc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800fc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc42:	602f      	str	r7, [r5, #0]
 800fc44:	2900      	cmp	r1, #0
 800fc46:	d0ca      	beq.n	800fbde <__sflush_r+0x1a>
 800fc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc4c:	4299      	cmp	r1, r3
 800fc4e:	d002      	beq.n	800fc56 <__sflush_r+0x92>
 800fc50:	4628      	mov	r0, r5
 800fc52:	f7ff f9af 	bl	800efb4 <_free_r>
 800fc56:	2000      	movs	r0, #0
 800fc58:	6360      	str	r0, [r4, #52]	; 0x34
 800fc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5e:	6a21      	ldr	r1, [r4, #32]
 800fc60:	2301      	movs	r3, #1
 800fc62:	4628      	mov	r0, r5
 800fc64:	47b0      	blx	r6
 800fc66:	1c41      	adds	r1, r0, #1
 800fc68:	d1c6      	bne.n	800fbf8 <__sflush_r+0x34>
 800fc6a:	682b      	ldr	r3, [r5, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d0c3      	beq.n	800fbf8 <__sflush_r+0x34>
 800fc70:	2b1d      	cmp	r3, #29
 800fc72:	d001      	beq.n	800fc78 <__sflush_r+0xb4>
 800fc74:	2b16      	cmp	r3, #22
 800fc76:	d101      	bne.n	800fc7c <__sflush_r+0xb8>
 800fc78:	602f      	str	r7, [r5, #0]
 800fc7a:	e7b0      	b.n	800fbde <__sflush_r+0x1a>
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc88:	690f      	ldr	r7, [r1, #16]
 800fc8a:	2f00      	cmp	r7, #0
 800fc8c:	d0a7      	beq.n	800fbde <__sflush_r+0x1a>
 800fc8e:	0793      	lsls	r3, r2, #30
 800fc90:	680e      	ldr	r6, [r1, #0]
 800fc92:	bf08      	it	eq
 800fc94:	694b      	ldreq	r3, [r1, #20]
 800fc96:	600f      	str	r7, [r1, #0]
 800fc98:	bf18      	it	ne
 800fc9a:	2300      	movne	r3, #0
 800fc9c:	eba6 0807 	sub.w	r8, r6, r7
 800fca0:	608b      	str	r3, [r1, #8]
 800fca2:	f1b8 0f00 	cmp.w	r8, #0
 800fca6:	dd9a      	ble.n	800fbde <__sflush_r+0x1a>
 800fca8:	4643      	mov	r3, r8
 800fcaa:	463a      	mov	r2, r7
 800fcac:	6a21      	ldr	r1, [r4, #32]
 800fcae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	47b0      	blx	r6
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	dc07      	bgt.n	800fcc8 <__sflush_r+0x104>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc8:	4407      	add	r7, r0
 800fcca:	eba8 0800 	sub.w	r8, r8, r0
 800fcce:	e7e8      	b.n	800fca2 <__sflush_r+0xde>
 800fcd0:	20400001 	.word	0x20400001

0800fcd4 <_fflush_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	690b      	ldr	r3, [r1, #16]
 800fcd8:	4605      	mov	r5, r0
 800fcda:	460c      	mov	r4, r1
 800fcdc:	b1db      	cbz	r3, 800fd16 <_fflush_r+0x42>
 800fcde:	b118      	cbz	r0, 800fce8 <_fflush_r+0x14>
 800fce0:	6983      	ldr	r3, [r0, #24]
 800fce2:	b90b      	cbnz	r3, 800fce8 <_fflush_r+0x14>
 800fce4:	f7ff f8d4 	bl	800ee90 <__sinit>
 800fce8:	4b0c      	ldr	r3, [pc, #48]	; (800fd1c <_fflush_r+0x48>)
 800fcea:	429c      	cmp	r4, r3
 800fcec:	d109      	bne.n	800fd02 <_fflush_r+0x2e>
 800fcee:	686c      	ldr	r4, [r5, #4]
 800fcf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf4:	b17b      	cbz	r3, 800fd16 <_fflush_r+0x42>
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcfe:	f7ff bf61 	b.w	800fbc4 <__sflush_r>
 800fd02:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <_fflush_r+0x4c>)
 800fd04:	429c      	cmp	r4, r3
 800fd06:	d101      	bne.n	800fd0c <_fflush_r+0x38>
 800fd08:	68ac      	ldr	r4, [r5, #8]
 800fd0a:	e7f1      	b.n	800fcf0 <_fflush_r+0x1c>
 800fd0c:	4b05      	ldr	r3, [pc, #20]	; (800fd24 <_fflush_r+0x50>)
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	bf08      	it	eq
 800fd12:	68ec      	ldreq	r4, [r5, #12]
 800fd14:	e7ec      	b.n	800fcf0 <_fflush_r+0x1c>
 800fd16:	2000      	movs	r0, #0
 800fd18:	bd38      	pop	{r3, r4, r5, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08012ac0 	.word	0x08012ac0
 800fd20:	08012ae0 	.word	0x08012ae0
 800fd24:	08012aa0 	.word	0x08012aa0

0800fd28 <_lseek_r>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4c07      	ldr	r4, [pc, #28]	; (800fd48 <_lseek_r+0x20>)
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	4608      	mov	r0, r1
 800fd30:	4611      	mov	r1, r2
 800fd32:	2200      	movs	r2, #0
 800fd34:	6022      	str	r2, [r4, #0]
 800fd36:	461a      	mov	r2, r3
 800fd38:	f7fe fe22 	bl	800e980 <_lseek>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	d102      	bne.n	800fd46 <_lseek_r+0x1e>
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	b103      	cbz	r3, 800fd46 <_lseek_r+0x1e>
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
 800fd48:	2000bef8 	.word	0x2000bef8

0800fd4c <__swhatbuf_r>:
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	460e      	mov	r6, r1
 800fd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd54:	2900      	cmp	r1, #0
 800fd56:	b090      	sub	sp, #64	; 0x40
 800fd58:	4614      	mov	r4, r2
 800fd5a:	461d      	mov	r5, r3
 800fd5c:	da07      	bge.n	800fd6e <__swhatbuf_r+0x22>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	602b      	str	r3, [r5, #0]
 800fd62:	89b3      	ldrh	r3, [r6, #12]
 800fd64:	061a      	lsls	r2, r3, #24
 800fd66:	d410      	bmi.n	800fd8a <__swhatbuf_r+0x3e>
 800fd68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd6c:	e00e      	b.n	800fd8c <__swhatbuf_r+0x40>
 800fd6e:	aa01      	add	r2, sp, #4
 800fd70:	f000 f88a 	bl	800fe88 <_fstat_r>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	dbf2      	blt.n	800fd5e <__swhatbuf_r+0x12>
 800fd78:	9a02      	ldr	r2, [sp, #8]
 800fd7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd82:	425a      	negs	r2, r3
 800fd84:	415a      	adcs	r2, r3
 800fd86:	602a      	str	r2, [r5, #0]
 800fd88:	e7ee      	b.n	800fd68 <__swhatbuf_r+0x1c>
 800fd8a:	2340      	movs	r3, #64	; 0x40
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	6023      	str	r3, [r4, #0]
 800fd90:	b010      	add	sp, #64	; 0x40
 800fd92:	bd70      	pop	{r4, r5, r6, pc}

0800fd94 <__smakebuf_r>:
 800fd94:	898b      	ldrh	r3, [r1, #12]
 800fd96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd98:	079d      	lsls	r5, r3, #30
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	d507      	bpl.n	800fdb0 <__smakebuf_r+0x1c>
 800fda0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	6123      	str	r3, [r4, #16]
 800fda8:	2301      	movs	r3, #1
 800fdaa:	6163      	str	r3, [r4, #20]
 800fdac:	b002      	add	sp, #8
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	ab01      	add	r3, sp, #4
 800fdb2:	466a      	mov	r2, sp
 800fdb4:	f7ff ffca 	bl	800fd4c <__swhatbuf_r>
 800fdb8:	9900      	ldr	r1, [sp, #0]
 800fdba:	4605      	mov	r5, r0
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	f7ff f947 	bl	800f050 <_malloc_r>
 800fdc2:	b948      	cbnz	r0, 800fdd8 <__smakebuf_r+0x44>
 800fdc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc8:	059a      	lsls	r2, r3, #22
 800fdca:	d4ef      	bmi.n	800fdac <__smakebuf_r+0x18>
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	f043 0302 	orr.w	r3, r3, #2
 800fdd4:	81a3      	strh	r3, [r4, #12]
 800fdd6:	e7e3      	b.n	800fda0 <__smakebuf_r+0xc>
 800fdd8:	4b0d      	ldr	r3, [pc, #52]	; (800fe10 <__smakebuf_r+0x7c>)
 800fdda:	62b3      	str	r3, [r6, #40]	; 0x28
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	6020      	str	r0, [r4, #0]
 800fde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fde4:	81a3      	strh	r3, [r4, #12]
 800fde6:	9b00      	ldr	r3, [sp, #0]
 800fde8:	6163      	str	r3, [r4, #20]
 800fdea:	9b01      	ldr	r3, [sp, #4]
 800fdec:	6120      	str	r0, [r4, #16]
 800fdee:	b15b      	cbz	r3, 800fe08 <__smakebuf_r+0x74>
 800fdf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	f000 f859 	bl	800feac <_isatty_r>
 800fdfa:	b128      	cbz	r0, 800fe08 <__smakebuf_r+0x74>
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	f043 0301 	orr.w	r3, r3, #1
 800fe06:	81a3      	strh	r3, [r4, #12]
 800fe08:	89a3      	ldrh	r3, [r4, #12]
 800fe0a:	431d      	orrs	r5, r3
 800fe0c:	81a5      	strh	r5, [r4, #12]
 800fe0e:	e7cd      	b.n	800fdac <__smakebuf_r+0x18>
 800fe10:	0800ee11 	.word	0x0800ee11

0800fe14 <__malloc_lock>:
 800fe14:	4770      	bx	lr

0800fe16 <__malloc_unlock>:
 800fe16:	4770      	bx	lr

0800fe18 <_realloc_r>:
 800fe18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1a:	4607      	mov	r7, r0
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	460e      	mov	r6, r1
 800fe20:	b921      	cbnz	r1, 800fe2c <_realloc_r+0x14>
 800fe22:	4611      	mov	r1, r2
 800fe24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe28:	f7ff b912 	b.w	800f050 <_malloc_r>
 800fe2c:	b922      	cbnz	r2, 800fe38 <_realloc_r+0x20>
 800fe2e:	f7ff f8c1 	bl	800efb4 <_free_r>
 800fe32:	4625      	mov	r5, r4
 800fe34:	4628      	mov	r0, r5
 800fe36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe38:	f000 f848 	bl	800fecc <_malloc_usable_size_r>
 800fe3c:	4284      	cmp	r4, r0
 800fe3e:	d90f      	bls.n	800fe60 <_realloc_r+0x48>
 800fe40:	4621      	mov	r1, r4
 800fe42:	4638      	mov	r0, r7
 800fe44:	f7ff f904 	bl	800f050 <_malloc_r>
 800fe48:	4605      	mov	r5, r0
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d0f2      	beq.n	800fe34 <_realloc_r+0x1c>
 800fe4e:	4631      	mov	r1, r6
 800fe50:	4622      	mov	r2, r4
 800fe52:	f7fe fe2a 	bl	800eaaa <memcpy>
 800fe56:	4631      	mov	r1, r6
 800fe58:	4638      	mov	r0, r7
 800fe5a:	f7ff f8ab 	bl	800efb4 <_free_r>
 800fe5e:	e7e9      	b.n	800fe34 <_realloc_r+0x1c>
 800fe60:	4635      	mov	r5, r6
 800fe62:	e7e7      	b.n	800fe34 <_realloc_r+0x1c>

0800fe64 <_read_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4c07      	ldr	r4, [pc, #28]	; (800fe84 <_read_r+0x20>)
 800fe68:	4605      	mov	r5, r0
 800fe6a:	4608      	mov	r0, r1
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	2200      	movs	r2, #0
 800fe70:	6022      	str	r2, [r4, #0]
 800fe72:	461a      	mov	r2, r3
 800fe74:	f7fe fd44 	bl	800e900 <_read>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_read_r+0x1e>
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_read_r+0x1e>
 800fe80:	602b      	str	r3, [r5, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	2000bef8 	.word	0x2000bef8

0800fe88 <_fstat_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4c07      	ldr	r4, [pc, #28]	; (800fea8 <_fstat_r+0x20>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4605      	mov	r5, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	4611      	mov	r1, r2
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	f7fe fd6c 	bl	800e972 <_fstat>
 800fe9a:	1c43      	adds	r3, r0, #1
 800fe9c:	d102      	bne.n	800fea4 <_fstat_r+0x1c>
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	b103      	cbz	r3, 800fea4 <_fstat_r+0x1c>
 800fea2:	602b      	str	r3, [r5, #0]
 800fea4:	bd38      	pop	{r3, r4, r5, pc}
 800fea6:	bf00      	nop
 800fea8:	2000bef8 	.word	0x2000bef8

0800feac <_isatty_r>:
 800feac:	b538      	push	{r3, r4, r5, lr}
 800feae:	4c06      	ldr	r4, [pc, #24]	; (800fec8 <_isatty_r+0x1c>)
 800feb0:	2300      	movs	r3, #0
 800feb2:	4605      	mov	r5, r0
 800feb4:	4608      	mov	r0, r1
 800feb6:	6023      	str	r3, [r4, #0]
 800feb8:	f7fe fd60 	bl	800e97c <_isatty>
 800febc:	1c43      	adds	r3, r0, #1
 800febe:	d102      	bne.n	800fec6 <_isatty_r+0x1a>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	b103      	cbz	r3, 800fec6 <_isatty_r+0x1a>
 800fec4:	602b      	str	r3, [r5, #0]
 800fec6:	bd38      	pop	{r3, r4, r5, pc}
 800fec8:	2000bef8 	.word	0x2000bef8

0800fecc <_malloc_usable_size_r>:
 800fecc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fed0:	2800      	cmp	r0, #0
 800fed2:	f1a0 0004 	sub.w	r0, r0, #4
 800fed6:	bfbc      	itt	lt
 800fed8:	580b      	ldrlt	r3, [r1, r0]
 800feda:	18c0      	addlt	r0, r0, r3
 800fedc:	4770      	bx	lr
	...

0800fee0 <_init>:
 800fee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee2:	bf00      	nop
 800fee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fee6:	bc08      	pop	{r3}
 800fee8:	469e      	mov	lr, r3
 800feea:	4770      	bx	lr

0800feec <_fini>:
 800feec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feee:	bf00      	nop
 800fef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fef2:	bc08      	pop	{r3}
 800fef4:	469e      	mov	lr, r3
 800fef6:	4770      	bx	lr
