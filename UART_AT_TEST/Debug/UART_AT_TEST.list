
UART_AT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002064  08002064  00012064  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002118  08002118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000018c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000198  20000198  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010c88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002542  00000000  00000000  00030cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008394  00000000  00000000  00033206  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0003b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  0003c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005820  00000000  00000000  0003d020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004365  00000000  00000000  00042840  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00046ba5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000022a8  00000000  00000000  00046c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800204c 	.word	0x0800204c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800204c 	.word	0x0800204c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b97a 	b.w	80004f0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	468c      	mov	ip, r1
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	9e08      	ldr	r6, [sp, #32]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d151      	bne.n	80002c8 <__udivmoddi4+0xb4>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d96d      	bls.n	8000306 <__udivmoddi4+0xf2>
 800022a:	fab2 fe82 	clz	lr, r2
 800022e:	f1be 0f00 	cmp.w	lr, #0
 8000232:	d00b      	beq.n	800024c <__udivmoddi4+0x38>
 8000234:	f1ce 0c20 	rsb	ip, lr, #32
 8000238:	fa01 f50e 	lsl.w	r5, r1, lr
 800023c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000240:	fa02 f70e 	lsl.w	r7, r2, lr
 8000244:	ea4c 0c05 	orr.w	ip, ip, r5
 8000248:	fa00 f40e 	lsl.w	r4, r0, lr
 800024c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000250:	0c25      	lsrs	r5, r4, #16
 8000252:	fbbc f8fa 	udiv	r8, ip, sl
 8000256:	fa1f f987 	uxth.w	r9, r7
 800025a:	fb0a cc18 	mls	ip, sl, r8, ip
 800025e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000262:	fb08 f309 	mul.w	r3, r8, r9
 8000266:	42ab      	cmp	r3, r5
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x6c>
 800026a:	19ed      	adds	r5, r5, r7
 800026c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000270:	f080 8123 	bcs.w	80004ba <__udivmoddi4+0x2a6>
 8000274:	42ab      	cmp	r3, r5
 8000276:	f240 8120 	bls.w	80004ba <__udivmoddi4+0x2a6>
 800027a:	f1a8 0802 	sub.w	r8, r8, #2
 800027e:	443d      	add	r5, r7
 8000280:	1aed      	subs	r5, r5, r3
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb5 f0fa 	udiv	r0, r5, sl
 8000288:	fb0a 5510 	mls	r5, sl, r0, r5
 800028c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000290:	fb00 f909 	mul.w	r9, r0, r9
 8000294:	45a1      	cmp	r9, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x98>
 8000298:	19e4      	adds	r4, r4, r7
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 810a 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80002a2:	45a1      	cmp	r9, r4
 80002a4:	f240 8107 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	eba4 0409 	sub.w	r4, r4, r9
 80002b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b4:	2100      	movs	r1, #0
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	d061      	beq.n	800037e <__udivmoddi4+0x16a>
 80002ba:	fa24 f40e 	lsr.w	r4, r4, lr
 80002be:	2300      	movs	r3, #0
 80002c0:	6034      	str	r4, [r6, #0]
 80002c2:	6073      	str	r3, [r6, #4]
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xc8>
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	d054      	beq.n	800037a <__udivmoddi4+0x166>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	f040 808e 	bne.w	8000402 <__udivmoddi4+0x1ee>
 80002e6:	42ab      	cmp	r3, r5
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xdc>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2d0>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb65 0503 	sbc.w	r5, r5, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	46ac      	mov	ip, r5
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d03f      	beq.n	800037e <__udivmoddi4+0x16a>
 80002fe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b912      	cbnz	r2, 800030e <__udivmoddi4+0xfa>
 8000308:	2701      	movs	r7, #1
 800030a:	fbb7 f7f2 	udiv	r7, r7, r2
 800030e:	fab7 fe87 	clz	lr, r7
 8000312:	f1be 0f00 	cmp.w	lr, #0
 8000316:	d134      	bne.n	8000382 <__udivmoddi4+0x16e>
 8000318:	1beb      	subs	r3, r5, r7
 800031a:	0c3a      	lsrs	r2, r7, #16
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	2101      	movs	r1, #1
 8000322:	fbb3 f8f2 	udiv	r8, r3, r2
 8000326:	0c25      	lsrs	r5, r4, #16
 8000328:	fb02 3318 	mls	r3, r2, r8, r3
 800032c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000330:	fb0c f308 	mul.w	r3, ip, r8
 8000334:	42ab      	cmp	r3, r5
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x134>
 8000338:	19ed      	adds	r5, r5, r7
 800033a:	f108 30ff 	add.w	r0, r8, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x132>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f200 80d1 	bhi.w	80004e8 <__udivmoddi4+0x2d4>
 8000346:	4680      	mov	r8, r0
 8000348:	1aed      	subs	r5, r5, r3
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000350:	fb02 5510 	mls	r5, r2, r0, r5
 8000354:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000358:	fb0c fc00 	mul.w	ip, ip, r0
 800035c:	45a4      	cmp	ip, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x15c>
 8000360:	19e4      	adds	r4, r4, r7
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x15a>
 8000368:	45a4      	cmp	ip, r4
 800036a:	f200 80b8 	bhi.w	80004de <__udivmoddi4+0x2ca>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000378:	e79d      	b.n	80002b6 <__udivmoddi4+0xa2>
 800037a:	4631      	mov	r1, r6
 800037c:	4630      	mov	r0, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	f1ce 0420 	rsb	r4, lr, #32
 8000386:	fa05 f30e 	lsl.w	r3, r5, lr
 800038a:	fa07 f70e 	lsl.w	r7, r7, lr
 800038e:	fa20 f804 	lsr.w	r8, r0, r4
 8000392:	0c3a      	lsrs	r2, r7, #16
 8000394:	fa25 f404 	lsr.w	r4, r5, r4
 8000398:	ea48 0803 	orr.w	r8, r8, r3
 800039c:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a4:	fb02 4411 	mls	r4, r2, r1, r4
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b0:	fb01 f30c 	mul.w	r3, r1, ip
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1bc>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f101 30ff 	add.w	r0, r1, #4294967295
 80003c2:	f080 808a 	bcs.w	80004da <__udivmoddi4+0x2c6>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	f240 8087 	bls.w	80004da <__udivmoddi4+0x2c6>
 80003cc:	3902      	subs	r1, #2
 80003ce:	443d      	add	r5, r7
 80003d0:	1aeb      	subs	r3, r5, r3
 80003d2:	fa1f f588 	uxth.w	r5, r8
 80003d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003da:	fb02 3310 	mls	r3, r2, r0, r3
 80003de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e2:	fb00 f30c 	mul.w	r3, r0, ip
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1e6>
 80003ea:	19ed      	adds	r5, r5, r7
 80003ec:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f0:	d26f      	bcs.n	80004d2 <__udivmoddi4+0x2be>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d96d      	bls.n	80004d2 <__udivmoddi4+0x2be>
 80003f6:	3802      	subs	r0, #2
 80003f8:	443d      	add	r5, r7
 80003fa:	1aeb      	subs	r3, r5, r3
 80003fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000400:	e78f      	b.n	8000322 <__udivmoddi4+0x10e>
 8000402:	f1c1 0720 	rsb	r7, r1, #32
 8000406:	fa22 f807 	lsr.w	r8, r2, r7
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 f401 	lsl.w	r4, r5, r1
 8000410:	ea48 0303 	orr.w	r3, r8, r3
 8000414:	fa20 fe07 	lsr.w	lr, r0, r7
 8000418:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800041c:	40fd      	lsrs	r5, r7
 800041e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000422:	fbb5 f9fc 	udiv	r9, r5, ip
 8000426:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800042a:	fb0c 5519 	mls	r5, ip, r9, r5
 800042e:	fa1f f883 	uxth.w	r8, r3
 8000432:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000436:	fb09 f408 	mul.w	r4, r9, r8
 800043a:	42ac      	cmp	r4, r5
 800043c:	fa02 f201 	lsl.w	r2, r2, r1
 8000440:	fa00 fa01 	lsl.w	sl, r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x244>
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d243      	bcs.n	80004d6 <__udivmoddi4+0x2c2>
 800044e:	42ac      	cmp	r4, r5
 8000450:	d941      	bls.n	80004d6 <__udivmoddi4+0x2c2>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	441d      	add	r5, r3
 8000458:	1b2d      	subs	r5, r5, r4
 800045a:	fa1f fe8e 	uxth.w	lr, lr
 800045e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000462:	fb0c 5510 	mls	r5, ip, r0, r5
 8000466:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45a0      	cmp	r8, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x26e>
 8000472:	18e4      	adds	r4, r4, r3
 8000474:	f100 35ff 	add.w	r5, r0, #4294967295
 8000478:	d229      	bcs.n	80004ce <__udivmoddi4+0x2ba>
 800047a:	45a0      	cmp	r8, r4
 800047c:	d927      	bls.n	80004ce <__udivmoddi4+0x2ba>
 800047e:	3802      	subs	r0, #2
 8000480:	441c      	add	r4, r3
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	464d      	mov	r5, r9
 8000494:	d315      	bcc.n	80004c2 <__udivmoddi4+0x2ae>
 8000496:	d012      	beq.n	80004be <__udivmoddi4+0x2aa>
 8000498:	b156      	cbz	r6, 80004b0 <__udivmoddi4+0x29c>
 800049a:	ebba 030e 	subs.w	r3, sl, lr
 800049e:	eb64 0405 	sbc.w	r4, r4, r5
 80004a2:	fa04 f707 	lsl.w	r7, r4, r7
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431f      	orrs	r7, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	6037      	str	r7, [r6, #0]
 80004ae:	6074      	str	r4, [r6, #4]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	4618      	mov	r0, r3
 80004b8:	e6f8      	b.n	80002ac <__udivmoddi4+0x98>
 80004ba:	4690      	mov	r8, r2
 80004bc:	e6e0      	b.n	8000280 <__udivmoddi4+0x6c>
 80004be:	45c2      	cmp	sl, r8
 80004c0:	d2ea      	bcs.n	8000498 <__udivmoddi4+0x284>
 80004c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7e4      	b.n	8000498 <__udivmoddi4+0x284>
 80004ce:	4628      	mov	r0, r5
 80004d0:	e7d7      	b.n	8000482 <__udivmoddi4+0x26e>
 80004d2:	4640      	mov	r0, r8
 80004d4:	e791      	b.n	80003fa <__udivmoddi4+0x1e6>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e7be      	b.n	8000458 <__udivmoddi4+0x244>
 80004da:	4601      	mov	r1, r0
 80004dc:	e778      	b.n	80003d0 <__udivmoddi4+0x1bc>
 80004de:	3802      	subs	r0, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	e745      	b.n	8000370 <__udivmoddi4+0x15c>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xe6>
 80004e8:	f1a8 0802 	sub.w	r8, r8, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	e72b      	b.n	8000348 <__udivmoddi4+0x134>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_InitTick+0x3c>)
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_InitTick+0x40>)
{
 80004fa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fc:	7818      	ldrb	r0, [r3, #0]
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	fbb3 f3f0 	udiv	r3, r3, r0
 8000506:	6810      	ldr	r0, [r2, #0]
 8000508:	fbb0 f0f3 	udiv	r0, r0, r3
 800050c:	f000 f8aa 	bl	8000664 <HAL_SYSTICK_Config>
 8000510:	4604      	mov	r4, r0
 8000512:	b958      	cbnz	r0, 800052c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000514:	2d0f      	cmp	r5, #15
 8000516:	d809      	bhi.n	800052c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	4602      	mov	r2, r0
 800051a:	4629      	mov	r1, r5
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f000 f85e 	bl	80005e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_InitTick+0x44>)
 8000526:	4620      	mov	r0, r4
 8000528:	601d      	str	r5, [r3, #0]
 800052a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800052e:	bd38      	pop	{r3, r4, r5, pc}
 8000530:	20000008 	.word	0x20000008
 8000534:	20000000 	.word	0x20000000
 8000538:	20000004 	.word	0x20000004

0800053c <HAL_Init>:
{
 800053c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_Init+0x30>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000546:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f82f 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffc8 	bl	80004f4 <HAL_InitTick>
  HAL_MspInit();
 8000564:	f001 fbee 	bl	8001d44 <HAL_MspInit>
}
 8000568:	2000      	movs	r0, #0
 800056a:	bd08      	pop	{r3, pc}
 800056c:	40023c00 	.word	0x40023c00

08000570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <HAL_IncTick+0x10>)
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_IncTick+0x14>)
 8000574:	6811      	ldr	r1, [r2, #0]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	440b      	add	r3, r1
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000030 	.word	0x20000030
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <HAL_GetTick+0x8>)
 800058a:	6818      	ldr	r0, [r3, #0]
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000030 	.word	0x20000030

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b538      	push	{r3, r4, r5, lr}
 8000596:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000598:	f7ff fff6 	bl	8000588 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	bf1c      	itt	ne
 80005a0:	4b05      	ldrne	r3, [pc, #20]	; (80005b8 <HAL_Delay+0x24>)
 80005a2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf18      	it	ne
 80005a8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	f7ff ffed 	bl	8000588 <HAL_GetTick>
 80005ae:	1b40      	subs	r0, r0, r5
 80005b0:	4284      	cmp	r4, r0
 80005b2:	d8fa      	bhi.n	80005aa <HAL_Delay+0x16>
  {
  }
}
 80005b4:	bd38      	pop	{r3, r4, r5, pc}
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	0200      	lsls	r0, r0, #8
 80005ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	68dc      	ldr	r4, [r3, #12]
 80005e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	bf28      	it	cs
 80005f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 0501 	mov.w	r5, #1
 80005fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000600:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000604:	bf8c      	ite	hi
 8000606:	3c03      	subhi	r4, #3
 8000608:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060a:	4019      	ands	r1, r3
 800060c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060e:	fa05 f404 	lsl.w	r4, r5, r4
 8000612:	3c01      	subs	r4, #1
 8000614:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000616:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	ea42 0201 	orr.w	r2, r2, r1
 800061c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	bfad      	iteet	ge
 8000622:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	f000 000f 	andlt.w	r0, r0, #15
 800062a:	4b06      	ldrlt	r3, [pc, #24]	; (8000644 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	bfb5      	itete	lt
 8000632:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	e000ed14 	.word	0xe000ed14

08000648 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000648:	2800      	cmp	r0, #0
 800064a:	db08      	blt.n	800065e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064c:	0942      	lsrs	r2, r0, #5
 800064e:	2301      	movs	r3, #1
 8000650:	f000 001f 	and.w	r0, r0, #31
 8000654:	fa03 f000 	lsl.w	r0, r3, r0
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_NVIC_EnableIRQ+0x18>)
 800065a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	3801      	subs	r0, #1
 8000666:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800066a:	d20a      	bcs.n	8000682 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000670:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	21f0      	movs	r1, #240	; 0xf0
 8000674:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800067c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e010 	.word	0xe000e010
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000690:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000694:	2b02      	cmp	r3, #2
 8000696:	d003      	beq.n	80006a0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800069c:	2001      	movs	r0, #1
 800069e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006a0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006a2:	2305      	movs	r3, #5
 80006a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006a8:	6813      	ldr	r3, [r2, #0]
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	4770      	bx	lr

080006b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006bc:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800084c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c0:	4a60      	ldr	r2, [pc, #384]	; (8000844 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006c4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006cc:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006d2:	42ac      	cmp	r4, r5
 80006d4:	f040 80a6 	bne.w	8000824 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d8:	684c      	ldr	r4, [r1, #4]
 80006da:	f024 0c10 	bic.w	ip, r4, #16
 80006de:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006e2:	2e01      	cmp	r6, #1
 80006e4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006e8:	d812      	bhi.n	8000710 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006ec:	2603      	movs	r6, #3
 80006ee:	fa06 f60e 	lsl.w	r6, r6, lr
 80006f2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006f6:	68ce      	ldr	r6, [r1, #12]
 80006f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006fe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000700:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000702:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000706:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070a:	409e      	lsls	r6, r3
 800070c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800070e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000710:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000712:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000714:	fa06 f60e 	lsl.w	r6, r6, lr
 8000718:	43f6      	mvns	r6, r6
 800071a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800071e:	688f      	ldr	r7, [r1, #8]
 8000720:	fa07 f70e 	lsl.w	r7, r7, lr
 8000724:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000728:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800072c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800072e:	d116      	bne.n	800075e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000730:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000734:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000738:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800073c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000740:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000744:	f04f 0c0f 	mov.w	ip, #15
 8000748:	fa0c fc0b 	lsl.w	ip, ip, fp
 800074c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000750:	690f      	ldr	r7, [r1, #16]
 8000752:	fa07 f70b 	lsl.w	r7, r7, fp
 8000756:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800075a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800075e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000760:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000762:	f004 0703 	and.w	r7, r4, #3
 8000766:	fa07 fe0e 	lsl.w	lr, r7, lr
 800076a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800076e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000770:	00e6      	lsls	r6, r4, #3
 8000772:	d557      	bpl.n	8000824 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000774:	f04f 0b00 	mov.w	fp, #0
 8000778:	f8cd b00c 	str.w	fp, [sp, #12]
 800077c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000780:	4e31      	ldr	r6, [pc, #196]	; (8000848 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000786:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800078a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800078e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000792:	9703      	str	r7, [sp, #12]
 8000794:	9f03      	ldr	r7, [sp, #12]
 8000796:	f023 0703 	bic.w	r7, r3, #3
 800079a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800079e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007ae:	f04f 0e0f 	mov.w	lr, #15
 80007b2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007bc:	d039      	beq.n	8000832 <HAL_GPIO_Init+0x17e>
 80007be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c2:	42b0      	cmp	r0, r6
 80007c4:	d037      	beq.n	8000836 <HAL_GPIO_Init+0x182>
 80007c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d035      	beq.n	800083a <HAL_GPIO_Init+0x186>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	d033      	beq.n	800083e <HAL_GPIO_Init+0x18a>
 80007d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007da:	42b0      	cmp	r0, r6
 80007dc:	bf14      	ite	ne
 80007de:	2607      	movne	r6, #7
 80007e0:	2604      	moveq	r6, #4
 80007e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80007e6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ea:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007ec:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ee:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007f4:	bf0c      	ite	eq
 80007f6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007fa:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007fc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000802:	bf0c      	ite	eq
 8000804:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000806:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000808:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800080a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf0c      	ite	eq
 8000812:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000814:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000816:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000818:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800081a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800081c:	bf54      	ite	pl
 800081e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000820:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000822:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000824:	3301      	adds	r3, #1
 8000826:	2b10      	cmp	r3, #16
 8000828:	f47f af4f 	bne.w	80006ca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800082c:	b005      	add	sp, #20
 800082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	465e      	mov	r6, fp
 8000834:	e7d5      	b.n	80007e2 <HAL_GPIO_Init+0x12e>
 8000836:	2601      	movs	r6, #1
 8000838:	e7d3      	b.n	80007e2 <HAL_GPIO_Init+0x12e>
 800083a:	2602      	movs	r6, #2
 800083c:	e7d1      	b.n	80007e2 <HAL_GPIO_Init+0x12e>
 800083e:	2603      	movs	r6, #3
 8000840:	e7cf      	b.n	80007e2 <HAL_GPIO_Init+0x12e>
 8000842:	bf00      	nop
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000850:	b10a      	cbz	r2, 8000856 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000852:	6181      	str	r1, [r0, #24]
 8000854:	4770      	bx	lr
 8000856:	0409      	lsls	r1, r1, #16
 8000858:	e7fb      	b.n	8000852 <HAL_GPIO_WritePin+0x2>

0800085a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800085a:	6943      	ldr	r3, [r0, #20]
 800085c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000860:	bf08      	it	eq
 8000862:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000864:	6181      	str	r1, [r0, #24]
 8000866:	4770      	bx	lr

08000868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800086c:	4604      	mov	r4, r0
 800086e:	b908      	cbnz	r0, 8000874 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000870:	2001      	movs	r0, #1
 8000872:	e03f      	b.n	80008f4 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	07dd      	lsls	r5, r3, #31
 8000878:	d410      	bmi.n	800089c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	0798      	lsls	r0, r3, #30
 800087e:	d45a      	bmi.n	8000936 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	071a      	lsls	r2, r3, #28
 8000884:	f100 809c 	bmi.w	80009c0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	075b      	lsls	r3, r3, #29
 800088c:	f100 80ba 	bmi.w	8000a04 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000890:	69a0      	ldr	r0, [r4, #24]
 8000892:	2800      	cmp	r0, #0
 8000894:	f040 811b 	bne.w	8000ace <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000898:	2000      	movs	r0, #0
 800089a:	e02b      	b.n	80008f4 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089c:	4ba4      	ldr	r3, [pc, #656]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	f002 020c 	and.w	r2, r2, #12
 80008a4:	2a04      	cmp	r2, #4
 80008a6:	d007      	beq.n	80008b8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ae:	2a08      	cmp	r2, #8
 80008b0:	d10a      	bne.n	80008c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	0259      	lsls	r1, r3, #9
 80008b6:	d507      	bpl.n	80008c8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b8:	4b9d      	ldr	r3, [pc, #628]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	039a      	lsls	r2, r3, #14
 80008be:	d5dc      	bpl.n	800087a <HAL_RCC_OscConfig+0x12>
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1d9      	bne.n	800087a <HAL_RCC_OscConfig+0x12>
 80008c6:	e7d3      	b.n	8000870 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	4d99      	ldr	r5, [pc, #612]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 80008cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d0:	d113      	bne.n	80008fa <HAL_RCC_OscConfig+0x92>
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008da:	f7ff fe55 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	4d94      	ldr	r5, [pc, #592]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	039b      	lsls	r3, r3, #14
 80008e6:	d4c8      	bmi.n	800087a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e8:	f7ff fe4e 	bl	8000588 <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	2864      	cmp	r0, #100	; 0x64
 80008f0:	d9f7      	bls.n	80008e2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008f2:	2003      	movs	r0, #3
}
 80008f4:	b002      	add	sp, #8
 80008f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008fe:	d104      	bne.n	800090a <HAL_RCC_OscConfig+0xa2>
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000906:	602b      	str	r3, [r5, #0]
 8000908:	e7e3      	b.n	80008d2 <HAL_RCC_OscConfig+0x6a>
 800090a:	682a      	ldr	r2, [r5, #0]
 800090c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000910:	602a      	str	r2, [r5, #0]
 8000912:	682a      	ldr	r2, [r5, #0]
 8000914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000918:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1dd      	bne.n	80008da <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800091e:	f7ff fe33 	bl	8000588 <HAL_GetTick>
 8000922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	039f      	lsls	r7, r3, #14
 8000928:	d5a7      	bpl.n	800087a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092a:	f7ff fe2d 	bl	8000588 <HAL_GetTick>
 800092e:	1b80      	subs	r0, r0, r6
 8000930:	2864      	cmp	r0, #100	; 0x64
 8000932:	d9f7      	bls.n	8000924 <HAL_RCC_OscConfig+0xbc>
 8000934:	e7dd      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000936:	4b7e      	ldr	r3, [pc, #504]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	f012 0f0c 	tst.w	r2, #12
 800093e:	d007      	beq.n	8000950 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000946:	2a08      	cmp	r2, #8
 8000948:	d111      	bne.n	800096e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	025e      	lsls	r6, r3, #9
 800094e:	d40e      	bmi.n	800096e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000950:	4b77      	ldr	r3, [pc, #476]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	0795      	lsls	r5, r2, #30
 8000956:	d502      	bpl.n	800095e <HAL_RCC_OscConfig+0xf6>
 8000958:	68e2      	ldr	r2, [r4, #12]
 800095a:	2a01      	cmp	r2, #1
 800095c:	d188      	bne.n	8000870 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	6921      	ldr	r1, [r4, #16]
 8000962:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000966:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800096a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096c:	e788      	b.n	8000880 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800096e:	68e2      	ldr	r2, [r4, #12]
 8000970:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <HAL_RCC_OscConfig+0x2cc>)
 8000972:	b1b2      	cbz	r2, 80009a2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000978:	f7ff fe06 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097c:	4d6c      	ldr	r5, [pc, #432]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800097e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	0798      	lsls	r0, r3, #30
 8000984:	d507      	bpl.n	8000996 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	6922      	ldr	r2, [r4, #16]
 800098a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800098e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000992:	602b      	str	r3, [r5, #0]
 8000994:	e774      	b.n	8000880 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000996:	f7ff fdf7 	bl	8000588 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2802      	cmp	r0, #2
 800099e:	d9ef      	bls.n	8000980 <HAL_RCC_OscConfig+0x118>
 80009a0:	e7a7      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80009a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a4:	f7ff fdf0 	bl	8000588 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a8:	4d61      	ldr	r5, [pc, #388]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	0799      	lsls	r1, r3, #30
 80009b0:	f57f af66 	bpl.w	8000880 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b4:	f7ff fde8 	bl	8000588 <HAL_GetTick>
 80009b8:	1b80      	subs	r0, r0, r6
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x144>
 80009be:	e798      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009c0:	6962      	ldr	r2, [r4, #20]
 80009c2:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <HAL_RCC_OscConfig+0x2d0>)
 80009c4:	b17a      	cbz	r2, 80009e6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ca:	f7ff fddd 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ce:	4d58      	ldr	r5, [pc, #352]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009d4:	079f      	lsls	r7, r3, #30
 80009d6:	f53f af57 	bmi.w	8000888 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009da:	f7ff fdd5 	bl	8000588 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9f6      	bls.n	80009d2 <HAL_RCC_OscConfig+0x16a>
 80009e4:	e785      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009e6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e8:	f7ff fdce 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ec:	4d50      	ldr	r5, [pc, #320]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f2:	0798      	lsls	r0, r3, #30
 80009f4:	f57f af48 	bpl.w	8000888 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f8:	f7ff fdc6 	bl	8000588 <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9f6      	bls.n	80009f0 <HAL_RCC_OscConfig+0x188>
 8000a02:	e776      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a04:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a08:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a0c:	d128      	bne.n	8000a60 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	9201      	str	r2, [sp, #4]
 8000a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a16:	641a      	str	r2, [r3, #64]	; 0x40
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a22:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a24:	4d45      	ldr	r5, [pc, #276]	; (8000b3c <HAL_RCC_OscConfig+0x2d4>)
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	05d9      	lsls	r1, r3, #23
 8000a2a:	d51b      	bpl.n	8000a64 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2c:	68a3      	ldr	r3, [r4, #8]
 8000a2e:	4d40      	ldr	r5, [pc, #256]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d127      	bne.n	8000a84 <HAL_RCC_OscConfig+0x21c>
 8000a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a3c:	f7ff fda4 	bl	8000588 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a40:	4d3b      	ldr	r5, [pc, #236]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a42:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a44:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a4a:	079b      	lsls	r3, r3, #30
 8000a4c:	d539      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	f43f af1e 	beq.w	8000890 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a54:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000a56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	e717      	b.n	8000890 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a60:	2600      	movs	r6, #0
 8000a62:	e7df      	b.n	8000a24 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fd8c 	bl	8000588 <HAL_GetTick>
 8000a70:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	05da      	lsls	r2, r3, #23
 8000a76:	d4d9      	bmi.n	8000a2c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a78:	f7ff fd86 	bl	8000588 <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f7      	bls.n	8000a72 <HAL_RCC_OscConfig+0x20a>
 8000a82:	e736      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d104      	bne.n	8000a92 <HAL_RCC_OscConfig+0x22a>
 8000a88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a90:	e7d0      	b.n	8000a34 <HAL_RCC_OscConfig+0x1cc>
 8000a92:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	672a      	str	r2, [r5, #112]	; 0x70
 8000a9a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a9c:	f022 0204 	bic.w	r2, r2, #4
 8000aa0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1ca      	bne.n	8000a3c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fd6f 	bl	8000588 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab2:	0798      	lsls	r0, r3, #30
 8000ab4:	d5cb      	bpl.n	8000a4e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab6:	f7ff fd67 	bl	8000588 <HAL_GetTick>
 8000aba:	1bc0      	subs	r0, r0, r7
 8000abc:	4540      	cmp	r0, r8
 8000abe:	d9f7      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x248>
 8000ac0:	e717      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fd61 	bl	8000588 <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d9bd      	bls.n	8000a48 <HAL_RCC_OscConfig+0x1e0>
 8000acc:	e711      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ace:	4d18      	ldr	r5, [pc, #96]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
 8000ad0:	68ab      	ldr	r3, [r5, #8]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d047      	beq.n	8000b6a <HAL_RCC_OscConfig+0x302>
 8000ada:	4e19      	ldr	r6, [pc, #100]	; (8000b40 <HAL_RCC_OscConfig+0x2d8>)
 8000adc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ade:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ae0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ae2:	d135      	bne.n	8000b50 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fd50 	bl	8000588 <HAL_GetTick>
 8000ae8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aea:	682b      	ldr	r3, [r5, #0]
 8000aec:	0199      	lsls	r1, r3, #6
 8000aee:	d429      	bmi.n	8000b44 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af0:	6a22      	ldr	r2, [r4, #32]
 8000af2:	69e3      	ldr	r3, [r4, #28]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000af8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000afe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b06:	0852      	lsrs	r2, r2, #1
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b10:	2301      	movs	r3, #1
 8000b12:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b14:	f7ff fd38 	bl	8000588 <HAL_GetTick>
 8000b18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	019a      	lsls	r2, r3, #6
 8000b1e:	f53f aebb 	bmi.w	8000898 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b22:	f7ff fd31 	bl	8000588 <HAL_GetTick>
 8000b26:	1b40      	subs	r0, r0, r5
 8000b28:	2802      	cmp	r0, #2
 8000b2a:	d9f6      	bls.n	8000b1a <HAL_RCC_OscConfig+0x2b2>
 8000b2c:	e6e1      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	42470000 	.word	0x42470000
 8000b38:	42470e80 	.word	0x42470e80
 8000b3c:	40007000 	.word	0x40007000
 8000b40:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b44:	f7ff fd20 	bl	8000588 <HAL_GetTick>
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9cd      	bls.n	8000aea <HAL_RCC_OscConfig+0x282>
 8000b4e:	e6d0      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b50:	f7ff fd1a 	bl	8000588 <HAL_GetTick>
 8000b54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	f57f ae9d 	bpl.w	8000898 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b5e:	f7ff fd13 	bl	8000588 <HAL_GetTick>
 8000b62:	1b00      	subs	r0, r0, r4
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9f6      	bls.n	8000b56 <HAL_RCC_OscConfig+0x2ee>
 8000b68:	e6c3      	b.n	80008f2 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b6a:	2801      	cmp	r0, #1
 8000b6c:	f43f aec2 	beq.w	80008f4 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000b70:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b72:	69e3      	ldr	r3, [r4, #28]
 8000b74:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f47f ae79 	bne.w	8000870 <HAL_RCC_OscConfig+0x8>
 8000b7e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b80:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b84:	4293      	cmp	r3, r2
 8000b86:	f47f ae73 	bne.w	8000870 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b90:	4003      	ands	r3, r0
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f47f ae6c 	bne.w	8000870 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b9a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	f47f ae66 	bne.w	8000870 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000ba6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000baa:	1ac0      	subs	r0, r0, r3
 8000bac:	bf18      	it	ne
 8000bae:	2001      	movne	r0, #1
 8000bb0:	e6a0      	b.n	80008f4 <HAL_RCC_OscConfig+0x8c>
 8000bb2:	bf00      	nop

08000bb4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bb6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bb8:	688b      	ldr	r3, [r1, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d003      	beq.n	8000bca <HAL_RCC_GetSysClockFreq+0x16>
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d003      	beq.n	8000bce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bc6:	4810      	ldr	r0, [pc, #64]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bc8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bca:	4810      	ldr	r0, [pc, #64]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x58>)
 8000bcc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bd0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bd4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd8:	bf14      	ite	ne
 8000bda:	480c      	ldrne	r0, [pc, #48]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bdc:	480a      	ldreq	r0, [pc, #40]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000be2:	bf18      	it	ne
 8000be4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000be6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bea:	fba1 0100 	umull	r0, r1, r1, r0
 8000bee:	f7ff faf9 	bl	80001e4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	00f42400 	.word	0x00f42400
 8000c0c:	007a1200 	.word	0x007a1200

08000c10 <HAL_RCC_ClockConfig>:
{
 8000c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c16:	4604      	mov	r4, r0
 8000c18:	b910      	cbnz	r0, 8000c20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c20:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <HAL_RCC_ClockConfig+0x124>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	f002 020f 	and.w	r2, r2, #15
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	d329      	bcc.n	8000c80 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c2c:	6821      	ldr	r1, [r4, #0]
 8000c2e:	078f      	lsls	r7, r1, #30
 8000c30:	d42e      	bmi.n	8000c90 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c32:	07c8      	lsls	r0, r1, #31
 8000c34:	d441      	bmi.n	8000cba <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <HAL_RCC_ClockConfig+0x124>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f002 020f 	and.w	r2, r2, #15
 8000c3e:	4295      	cmp	r5, r2
 8000c40:	d367      	bcc.n	8000d12 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c42:	6822      	ldr	r2, [r4, #0]
 8000c44:	0751      	lsls	r1, r2, #29
 8000c46:	d46d      	bmi.n	8000d24 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c48:	0713      	lsls	r3, r2, #28
 8000c4a:	d507      	bpl.n	8000c5c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c4c:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000c4e:	6921      	ldr	r1, [r4, #16]
 8000c50:	6893      	ldr	r3, [r2, #8]
 8000c52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c5a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c5c:	f7ff ffaa 	bl	8000bb4 <HAL_RCC_GetSysClockFreq>
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000c62:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_RCC_ClockConfig+0x12c>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	40d8      	lsrs	r0, r3
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <HAL_RCC_ClockConfig+0x130>)
 8000c70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <HAL_RCC_ClockConfig+0x134>)
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	f7ff fc3d 	bl	80004f4 <HAL_InitTick>
  return HAL_OK;
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c80:	b2ca      	uxtb	r2, r1
 8000c82:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d1c5      	bne.n	8000c1a <HAL_RCC_ClockConfig+0xa>
 8000c8e:	e7cd      	b.n	8000c2c <HAL_RCC_ClockConfig+0x1c>
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c92:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c96:	bf1e      	ittt	ne
 8000c98:	689a      	ldrne	r2, [r3, #8]
 8000c9a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c9e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca2:	bf42      	ittt	mi
 8000ca4:	689a      	ldrmi	r2, [r3, #8]
 8000ca6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000caa:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	68a0      	ldr	r0, [r4, #8]
 8000cb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cb4:	4302      	orrs	r2, r0
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	e7bb      	b.n	8000c32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cba:	6862      	ldr	r2, [r4, #4]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000cbe:	2a01      	cmp	r2, #1
 8000cc0:	d11d      	bne.n	8000cfe <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	d0a7      	beq.n	8000c1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cca:	4e1b      	ldr	r6, [pc, #108]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000ccc:	68b3      	ldr	r3, [r6, #8]
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fc57 	bl	8000588 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cda:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cde:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce0:	68b3      	ldr	r3, [r6, #8]
 8000ce2:	6862      	ldr	r2, [r4, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cec:	d0a3      	beq.n	8000c36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cee:	f7ff fc4b 	bl	8000588 <HAL_GetTick>
 8000cf2:	1bc0      	subs	r0, r0, r7
 8000cf4:	4540      	cmp	r0, r8
 8000cf6:	d9f3      	bls.n	8000ce0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000cf8:	2003      	movs	r0, #3
}
 8000cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfe:	1e91      	subs	r1, r2, #2
 8000d00:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d02:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d04:	d802      	bhi.n	8000d0c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d0a:	e7dd      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0c:	f013 0f02 	tst.w	r3, #2
 8000d10:	e7da      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d12:	b2ea      	uxtb	r2, r5
 8000d14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	f47f af7c 	bne.w	8000c1a <HAL_RCC_ClockConfig+0xa>
 8000d22:	e78e      	b.n	8000c42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <HAL_RCC_ClockConfig+0x128>)
 8000d26:	68e0      	ldr	r0, [r4, #12]
 8000d28:	688b      	ldr	r3, [r1, #8]
 8000d2a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	608b      	str	r3, [r1, #8]
 8000d32:	e789      	b.n	8000c48 <HAL_RCC_ClockConfig+0x38>
 8000d34:	40023c00 	.word	0x40023c00
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	080020ff 	.word	0x080020ff
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d56:	6810      	ldr	r0, [r2, #0]
}
 8000d58:	40d8      	lsrs	r0, r3
 8000d5a:	4770      	bx	lr
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	0800210f 	.word	0x0800210f
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d76:	6810      	ldr	r0, [r2, #0]
}
 8000d78:	40d8      	lsrs	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	0800210f 	.word	0x0800210f
 8000d84:	20000008 	.word	0x20000008

08000d88 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460e      	mov	r6, r1
 8000d8e:	4615      	mov	r5, r2
 8000d90:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000d92:	6821      	ldr	r1, [r4, #0]
 8000d94:	688a      	ldr	r2, [r1, #8]
 8000d96:	ea36 0302 	bics.w	r3, r6, r2
 8000d9a:	d001      	beq.n	8000da0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
}
 8000d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000da0:	1c6b      	adds	r3, r5, #1
 8000da2:	d0f7      	beq.n	8000d94 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000da4:	f7ff fbf0 	bl	8000588 <HAL_GetTick>
 8000da8:	1bc0      	subs	r0, r0, r7
 8000daa:	4285      	cmp	r5, r0
 8000dac:	d8f1      	bhi.n	8000d92 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000db6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000db8:	6862      	ldr	r2, [r4, #4]
 8000dba:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dbe:	d10a      	bne.n	8000dd6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000dc0:	68a2      	ldr	r2, [r4, #8]
 8000dc2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dc6:	d002      	beq.n	8000dce <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dc8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dcc:	d103      	bne.n	8000dd6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dd4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ddc:	d107      	bne.n	8000dee <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dec:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000df4:	2300      	movs	r3, #0
 8000df6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e02:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <SPI_EndRxTxTransaction+0x54>)
 8000e06:	4e14      	ldr	r6, [pc, #80]	; (8000e58 <SPI_EndRxTxTransaction+0x58>)
 8000e08:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e0a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e0c:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e10:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e14:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e16:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e1a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e1c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e1e:	d10d      	bne.n	8000e3c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e20:	460a      	mov	r2, r1
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	f7ff ffb0 	bl	8000d88 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e28:	b910      	cbnz	r0, 8000e30 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e2a:	2000      	movs	r0, #0
}
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e38:	2003      	movs	r0, #3
 8000e3a:	e7f7      	b.n	8000e2c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e3c:	9b01      	ldr	r3, [sp, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f3      	beq.n	8000e2a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000e42:	9b01      	ldr	r3, [sp, #4]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	d4f5      	bmi.n	8000e3c <SPI_EndRxTxTransaction+0x3c>
 8000e50:	e7eb      	b.n	8000e2a <SPI_EndRxTxTransaction+0x2a>
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	016e3600 	.word	0x016e3600

08000e5c <HAL_SPI_Init>:
{
 8000e5c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000e5e:	4604      	mov	r4, r0
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d036      	beq.n	8000ed2 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e68:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e70:	b91b      	cbnz	r3, 8000e7a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e72:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e76:	f000 ff85 	bl	8001d84 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e7a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e7c:	68a0      	ldr	r0, [r4, #8]
 8000e7e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e86:	680b      	ldr	r3, [r1, #0]
 8000e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e8c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e8e:	6863      	ldr	r3, [r4, #4]
 8000e90:	4303      	orrs	r3, r0
 8000e92:	68e0      	ldr	r0, [r4, #12]
 8000e94:	4303      	orrs	r3, r0
 8000e96:	6920      	ldr	r0, [r4, #16]
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	6960      	ldr	r0, [r4, #20]
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	69e0      	ldr	r0, [r4, #28]
 8000ea0:	4303      	orrs	r3, r0
 8000ea2:	6a20      	ldr	r0, [r4, #32]
 8000ea4:	4303      	orrs	r3, r0
 8000ea6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ea8:	4303      	orrs	r3, r0
 8000eaa:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000eae:	4303      	orrs	r3, r0
 8000eb0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eb2:	0c12      	lsrs	r2, r2, #16
 8000eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eb6:	f002 0204 	and.w	r2, r2, #4
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ebe:	69cb      	ldr	r3, [r1, #28]
 8000ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ec4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ec6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000ec8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eca:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ecc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000ed0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ed2:	2001      	movs	r0, #1
}
 8000ed4:	bd10      	pop	{r4, pc}

08000ed6 <HAL_SPI_Transmit>:
{
 8000ed6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000eda:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000edc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000ee0:	2b01      	cmp	r3, #1
{
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460d      	mov	r5, r1
 8000ee6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000ee8:	f000 809b 	beq.w	8001022 <HAL_SPI_Transmit+0x14c>
 8000eec:	2301      	movs	r3, #1
 8000eee:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ef2:	f7ff fb49 	bl	8000588 <HAL_GetTick>
 8000ef6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000ef8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000efc:	b2c0      	uxtb	r0, r0
 8000efe:	2801      	cmp	r0, #1
 8000f00:	f040 808d 	bne.w	800101e <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d05d      	beq.n	8000fc4 <HAL_SPI_Transmit+0xee>
 8000f08:	f1b8 0f00 	cmp.w	r8, #0
 8000f0c:	d05a      	beq.n	8000fc4 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f14:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f16:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f18:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000f1a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000f1c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000f20:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000f22:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000f24:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000f26:	6420      	str	r0, [r4, #64]	; 0x40
 8000f28:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000f2a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000f30:	bf08      	it	eq
 8000f32:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000f34:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000f38:	bf04      	itt	eq
 8000f3a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000f3e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f40:	6803      	ldr	r3, [r0, #0]
 8000f42:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000f44:	bf5e      	ittt	pl
 8000f46:	6803      	ldrpl	r3, [r0, #0]
 8000f48:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000f4c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	d13e      	bne.n	8000fd6 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f58:	b113      	cbz	r3, 8000f60 <HAL_SPI_Transmit+0x8a>
 8000f5a:	f1b8 0f01 	cmp.w	r8, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f60:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000f64:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f66:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b9a3      	cbnz	r3, 8000fa0 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f76:	463a      	mov	r2, r7
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff ff40 	bl	8000e00 <SPI_EndRxTxTransaction>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d149      	bne.n	8001018 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f84:	68a3      	ldr	r3, [r4, #8]
 8000f86:	b933      	cbnz	r3, 8000f96 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f98:	3000      	adds	r0, #0
 8000f9a:	bf18      	it	ne
 8000f9c:	2001      	movne	r0, #1
 8000f9e:	e011      	b.n	8000fc4 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fa0:	6822      	ldr	r2, [r4, #0]
 8000fa2:	6893      	ldr	r3, [r2, #8]
 8000fa4:	0798      	lsls	r0, r3, #30
 8000fa6:	d505      	bpl.n	8000fb4 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000faa:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000fae:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fb0:	6323      	str	r3, [r4, #48]	; 0x30
 8000fb2:	e7d9      	b.n	8000f68 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000fb4:	f7ff fae8 	bl	8000588 <HAL_GetTick>
 8000fb8:	1bc0      	subs	r0, r0, r7
 8000fba:	42b0      	cmp	r0, r6
 8000fbc:	d3d8      	bcc.n	8000f70 <HAL_SPI_Transmit+0x9a>
 8000fbe:	1c71      	adds	r1, r6, #1
 8000fc0:	d0d6      	beq.n	8000f70 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000fd0:	b002      	add	sp, #8
 8000fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fd6:	b113      	cbz	r3, 8000fde <HAL_SPI_Transmit+0x108>
 8000fd8:	f1b8 0f01 	cmp.w	r8, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000fde:	782b      	ldrb	r3, [r5, #0]
 8000fe0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000fe8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ff0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0be      	beq.n	8000f76 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	0792      	lsls	r2, r2, #30
 8000ffe:	d503      	bpl.n	8001008 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001000:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	731a      	strb	r2, [r3, #12]
 8001006:	e7ec      	b.n	8000fe2 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001008:	f7ff fabe 	bl	8000588 <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	4286      	cmp	r6, r0
 8001010:	d8ee      	bhi.n	8000ff0 <HAL_SPI_Transmit+0x11a>
 8001012:	1c73      	adds	r3, r6, #1
 8001014:	d0ec      	beq.n	8000ff0 <HAL_SPI_Transmit+0x11a>
 8001016:	e7d4      	b.n	8000fc2 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001018:	2320      	movs	r3, #32
 800101a:	6563      	str	r3, [r4, #84]	; 0x54
 800101c:	e7b2      	b.n	8000f84 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 800101e:	2002      	movs	r0, #2
 8001020:	e7d0      	b.n	8000fc4 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001022:	2002      	movs	r0, #2
 8001024:	e7d4      	b.n	8000fd0 <HAL_SPI_Transmit+0xfa>

08001026 <HAL_TIM_PeriodElapsedCallback>:
 8001026:	4770      	bx	lr

08001028 <HAL_TIM_OC_DelayElapsedCallback>:
 8001028:	4770      	bx	lr

0800102a <HAL_TIM_IC_CaptureCallback>:
 800102a:	4770      	bx	lr

0800102c <HAL_TIM_PWM_PulseFinishedCallback>:
 800102c:	4770      	bx	lr

0800102e <HAL_TIM_TriggerCallback>:
 800102e:	4770      	bx	lr

08001030 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001030:	6803      	ldr	r3, [r0, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	0791      	lsls	r1, r2, #30
{
 8001036:	b510      	push	{r4, lr}
 8001038:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800103a:	d50e      	bpl.n	800105a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	0792      	lsls	r2, r2, #30
 8001040:	d50b      	bpl.n	800105a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001042:	f06f 0202 	mvn.w	r2, #2
 8001046:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001048:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800104a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800104c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800104e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001050:	d077      	beq.n	8001142 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001052:	f7ff ffea 	bl	800102a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001056:	2300      	movs	r3, #0
 8001058:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	0750      	lsls	r0, r2, #29
 8001060:	d510      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	0751      	lsls	r1, r2, #29
 8001066:	d50d      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001068:	f06f 0204 	mvn.w	r2, #4
 800106c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800106e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001070:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001072:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001076:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001078:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800107a:	d068      	beq.n	800114e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800107c:	f7ff ffd5 	bl	800102a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001080:	2300      	movs	r3, #0
 8001082:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	0712      	lsls	r2, r2, #28
 800108a:	d50f      	bpl.n	80010ac <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	0710      	lsls	r0, r2, #28
 8001090:	d50c      	bpl.n	80010ac <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001092:	f06f 0208 	mvn.w	r2, #8
 8001096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001098:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800109a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800109c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800109e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010a2:	d05a      	beq.n	800115a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80010a4:	f7ff ffc1 	bl	800102a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010a8:	2300      	movs	r3, #0
 80010aa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	06d2      	lsls	r2, r2, #27
 80010b2:	d510      	bpl.n	80010d6 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	06d0      	lsls	r0, r2, #27
 80010b8:	d50d      	bpl.n	80010d6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010ba:	f06f 0210 	mvn.w	r2, #16
 80010be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010c0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010c2:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010c4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010c8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010cc:	d04b      	beq.n	8001166 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	f7ff ffac 	bl	800102a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d2:	2300      	movs	r3, #0
 80010d4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	07d1      	lsls	r1, r2, #31
 80010dc:	d508      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	07d2      	lsls	r2, r2, #31
 80010e2:	d505      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010e4:	f06f 0201 	mvn.w	r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f7ff ff9b 	bl	8001026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	0610      	lsls	r0, r2, #24
 80010f6:	d508      	bpl.n	800110a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	0611      	lsls	r1, r2, #24
 80010fc:	d505      	bpl.n	800110a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001104:	4620      	mov	r0, r4
 8001106:	f000 f976 	bl	80013f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	0652      	lsls	r2, r2, #25
 8001110:	d508      	bpl.n	8001124 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	0650      	lsls	r0, r2, #25
 8001116:	d505      	bpl.n	8001124 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800111c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff85 	bl	800102e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	0691      	lsls	r1, r2, #26
 800112a:	d522      	bpl.n	8001172 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	0692      	lsls	r2, r2, #26
 8001130:	d51f      	bpl.n	8001172 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001132:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001136:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001138:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800113a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800113e:	f000 b959 	b.w	80013f4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001142:	f7ff ff71 	bl	8001028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff ff70 	bl	800102c <HAL_TIM_PWM_PulseFinishedCallback>
 800114c:	e783      	b.n	8001056 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114e:	f7ff ff6b 	bl	8001028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff ff6a 	bl	800102c <HAL_TIM_PWM_PulseFinishedCallback>
 8001158:	e792      	b.n	8001080 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800115a:	f7ff ff65 	bl	8001028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff ff64 	bl	800102c <HAL_TIM_PWM_PulseFinishedCallback>
 8001164:	e7a0      	b.n	80010a8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001166:	f7ff ff5f 	bl	8001028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ff5e 	bl	800102c <HAL_TIM_PWM_PulseFinishedCallback>
 8001170:	e7af      	b.n	80010d2 <HAL_TIM_IRQHandler+0xa2>
 8001172:	bd10      	pop	{r4, pc}

08001174 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001176:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001178:	4290      	cmp	r0, r2
 800117a:	d00e      	beq.n	800119a <TIM_Base_SetConfig+0x26>
 800117c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001180:	d00b      	beq.n	800119a <TIM_Base_SetConfig+0x26>
 8001182:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001186:	4290      	cmp	r0, r2
 8001188:	d007      	beq.n	800119a <TIM_Base_SetConfig+0x26>
 800118a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118e:	4290      	cmp	r0, r2
 8001190:	d003      	beq.n	800119a <TIM_Base_SetConfig+0x26>
 8001192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001196:	4290      	cmp	r0, r2
 8001198:	d115      	bne.n	80011c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800119a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800119c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011a0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <TIM_Base_SetConfig+0x94>)
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d019      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011ac:	d016      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011b2:	4290      	cmp	r0, r2
 80011b4:	d012      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d00e      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c2:	4290      	cmp	r0, r2
 80011c4:	d00a      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <TIM_Base_SetConfig+0x98>)
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d007      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d003      	beq.n	80011dc <TIM_Base_SetConfig+0x68>
 80011d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d8:	4290      	cmp	r0, r2
 80011da:	d103      	bne.n	80011e4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011dc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011e2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011e4:	694a      	ldr	r2, [r1, #20]
 80011e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ea:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011ec:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011ee:	688b      	ldr	r3, [r1, #8]
 80011f0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011f2:	680b      	ldr	r3, [r1, #0]
 80011f4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <TIM_Base_SetConfig+0x94>)
 80011f8:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011fa:	bf04      	itt	eq
 80011fc:	690b      	ldreq	r3, [r1, #16]
 80011fe:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001200:	2301      	movs	r3, #1
 8001202:	6143      	str	r3, [r0, #20]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40010000 	.word	0x40010000
 800120c:	40014000 	.word	0x40014000

08001210 <HAL_TIM_Base_Init>:
{
 8001210:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001212:	4604      	mov	r4, r0
 8001214:	b1a0      	cbz	r0, 8001240 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001216:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800121a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800121e:	b91b      	cbnz	r3, 8001228 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001220:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001224:	f000 fdfc 	bl	8001e20 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001228:	2302      	movs	r3, #2
 800122a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800122e:	6820      	ldr	r0, [r4, #0]
 8001230:	1d21      	adds	r1, r4, #4
 8001232:	f7ff ff9f 	bl	8001174 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001236:	2301      	movs	r3, #1
 8001238:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800123c:	2000      	movs	r0, #0
 800123e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
}
 8001242:	bd10      	pop	{r4, pc}

08001244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001244:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001246:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001248:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800124a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800124e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001252:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001254:	6083      	str	r3, [r0, #8]
 8001256:	bd10      	pop	{r4, pc}

08001258 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001258:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800125c:	2b01      	cmp	r3, #1
{
 800125e:	b570      	push	{r4, r5, r6, lr}
 8001260:	4604      	mov	r4, r0
 8001262:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001266:	d019      	beq.n	800129c <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001268:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800126c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800126e:	2301      	movs	r3, #1
 8001270:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001274:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800127a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800127e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001280:	680b      	ldr	r3, [r1, #0]
 8001282:	2b40      	cmp	r3, #64	; 0x40
 8001284:	d065      	beq.n	8001352 <HAL_TIM_ConfigClockSource+0xfa>
 8001286:	d815      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x5c>
 8001288:	2b10      	cmp	r3, #16
 800128a:	d00c      	beq.n	80012a6 <HAL_TIM_ConfigClockSource+0x4e>
 800128c:	d807      	bhi.n	800129e <HAL_TIM_ConfigClockSource+0x46>
 800128e:	b153      	cbz	r3, 80012a6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001290:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001292:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001298:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800129c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800129e:	2b20      	cmp	r3, #32
 80012a0:	d001      	beq.n	80012a6 <HAL_TIM_ConfigClockSource+0x4e>
 80012a2:	2b30      	cmp	r3, #48	; 0x30
 80012a4:	d1f4      	bne.n	8001290 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80012a6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012a8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80012ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012b0:	4313      	orrs	r3, r2
 80012b2:	e01a      	b.n	80012ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80012b4:	2b60      	cmp	r3, #96	; 0x60
 80012b6:	d034      	beq.n	8001322 <HAL_TIM_ConfigClockSource+0xca>
 80012b8:	d819      	bhi.n	80012ee <HAL_TIM_ConfigClockSource+0x96>
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	d1e8      	bne.n	8001290 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012be:	684a      	ldr	r2, [r1, #4]
 80012c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012c4:	6a05      	ldr	r5, [r0, #32]
 80012c6:	f025 0501 	bic.w	r5, r5, #1
 80012ca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012cc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012d6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80012da:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80012dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012e0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012e6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80012ea:	6083      	str	r3, [r0, #8]
 80012ec:	e7d0      	b.n	8001290 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80012ee:	2b70      	cmp	r3, #112	; 0x70
 80012f0:	d00c      	beq.n	800130c <HAL_TIM_ConfigClockSource+0xb4>
 80012f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f6:	d1cb      	bne.n	8001290 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80012f8:	68cb      	ldr	r3, [r1, #12]
 80012fa:	684a      	ldr	r2, [r1, #4]
 80012fc:	6889      	ldr	r1, [r1, #8]
 80012fe:	f7ff ffa1 	bl	8001244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	6893      	ldr	r3, [r2, #8]
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	e008      	b.n	800131e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800130c:	68cb      	ldr	r3, [r1, #12]
 800130e:	684a      	ldr	r2, [r1, #4]
 8001310:	6889      	ldr	r1, [r1, #8]
 8001312:	f7ff ff97 	bl	8001244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800131a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800131e:	6093      	str	r3, [r2, #8]
      break;
 8001320:	e7b6      	b.n	8001290 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001322:	684d      	ldr	r5, [r1, #4]
 8001324:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001326:	6a01      	ldr	r1, [r0, #32]
 8001328:	f021 0110 	bic.w	r1, r1, #16
 800132c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800132e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001330:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001332:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800133a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800133e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001342:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001344:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001346:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800134c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001350:	e7cb      	b.n	80012ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001352:	684a      	ldr	r2, [r1, #4]
 8001354:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001356:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001358:	6a05      	ldr	r5, [r0, #32]
 800135a:	f025 0501 	bic.w	r5, r5, #1
 800135e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001360:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001362:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800136a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800136e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001370:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001372:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001374:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800137a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800137e:	e7b4      	b.n	80012ea <HAL_TIM_ConfigClockSource+0x92>

08001380 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001380:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001384:	2b01      	cmp	r3, #1
{
 8001386:	b530      	push	{r4, r5, lr}
 8001388:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800138c:	d02d      	beq.n	80013ea <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800138e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001392:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001394:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001396:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001398:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 800139c:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800139e:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80013a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80013a4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80013a6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013a8:	4c11      	ldr	r4, [pc, #68]	; (80013f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80013aa:	42a3      	cmp	r3, r4
 80013ac:	d012      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b2:	d00f      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013b4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80013b8:	42a3      	cmp	r3, r4
 80013ba:	d00b      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013c0:	42a3      	cmp	r3, r4
 80013c2:	d007      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d003      	beq.n	80013d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80013cc:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80013d0:	42a3      	cmp	r3, r4
 80013d2:	d104      	bne.n	80013de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013d4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80013d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013da:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80013dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80013de:	2301      	movs	r3, #1
 80013e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013e4:	2300      	movs	r3, #0
 80013e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80013ea:	4618      	mov	r0, r3

  return HAL_OK;
}
 80013ec:	bd30      	pop	{r4, r5, pc}
 80013ee:	bf00      	nop
 80013f0:	40010000 	.word	0x40010000

080013f4 <HAL_TIMEx_CommutCallback>:
 80013f4:	4770      	bx	lr

080013f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013f6:	4770      	bx	lr

080013f8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001400:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800140a:	2320      	movs	r3, #32
 800140c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001410:	4770      	bx	lr
	...

08001414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001414:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001416:	6803      	ldr	r3, [r0, #0]
 8001418:	68c1      	ldr	r1, [r0, #12]
 800141a:	691a      	ldr	r2, [r3, #16]
{
 800141c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800141e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001422:	430a      	orrs	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001426:	6925      	ldr	r5, [r4, #16]
 8001428:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800142a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800142c:	69c0      	ldr	r0, [r0, #28]
 800142e:	432a      	orrs	r2, r5
 8001430:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001432:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001436:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001438:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800143c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800143e:	430a      	orrs	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	69a1      	ldr	r1, [r4, #24]
 8001446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800144a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800144c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001454:	d129      	bne.n	80014aa <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001456:	4293      	cmp	r3, r2
 8001458:	d003      	beq.n	8001462 <UART_SetConfig+0x4e>
 800145a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800145e:	4293      	cmp	r3, r2
 8001460:	d120      	bne.n	80014a4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001462:	f7ff fc81 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001466:	6862      	ldr	r2, [r4, #4]
 8001468:	6825      	ldr	r5, [r4, #0]
 800146a:	1892      	adds	r2, r2, r2
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f04f 0119 	mov.w	r1, #25
 8001474:	415b      	adcs	r3, r3
 8001476:	fba0 0101 	umull	r0, r1, r0, r1
 800147a:	f7fe feb3 	bl	80001e4 <__aeabi_uldivmod>
 800147e:	2164      	movs	r1, #100	; 0x64
 8001480:	fbb0 f4f1 	udiv	r4, r0, r1
 8001484:	fb01 0314 	mls	r3, r1, r4, r0
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	3332      	adds	r3, #50	; 0x32
 800148c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001490:	f003 0207 	and.w	r2, r3, #7
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800149a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800149e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014a0:	60ab      	str	r3, [r5, #8]
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80014a4:	f7ff fc50 	bl	8000d48 <HAL_RCC_GetPCLK1Freq>
 80014a8:	e7dd      	b.n	8001466 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d002      	beq.n	80014b4 <UART_SetConfig+0xa0>
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <UART_SetConfig+0xd8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d116      	bne.n	80014e2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80014b4:	f7ff fc58 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	6825      	ldr	r5, [r4, #0]
 80014bc:	2119      	movs	r1, #25
 80014be:	009a      	lsls	r2, r3, #2
 80014c0:	fba0 0101 	umull	r0, r1, r0, r1
 80014c4:	0f9b      	lsrs	r3, r3, #30
 80014c6:	f7fe fe8d 	bl	80001e4 <__aeabi_uldivmod>
 80014ca:	2264      	movs	r2, #100	; 0x64
 80014cc:	fbb0 f1f2 	udiv	r1, r0, r2
 80014d0:	fb02 0311 	mls	r3, r2, r1, r0
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	3332      	adds	r3, #50	; 0x32
 80014d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80014e0:	e7de      	b.n	80014a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80014e2:	f7ff fc31 	bl	8000d48 <HAL_RCC_GetPCLK1Freq>
 80014e6:	e7e7      	b.n	80014b8 <UART_SetConfig+0xa4>
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400

080014f0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	4604      	mov	r4, r0
 80014f4:	460e      	mov	r6, r1
 80014f6:	4617      	mov	r7, r2
 80014f8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014fa:	6821      	ldr	r1, [r4, #0]
 80014fc:	680b      	ldr	r3, [r1, #0]
 80014fe:	ea36 0303 	bics.w	r3, r6, r3
 8001502:	d101      	bne.n	8001508 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
}
 8001506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001508:	1c6b      	adds	r3, r5, #1
 800150a:	d0f7      	beq.n	80014fc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800150c:	b995      	cbnz	r5, 8001534 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001516:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001520:	2320      	movs	r3, #32
 8001522:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001526:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800152a:	2300      	movs	r3, #0
 800152c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001530:	2003      	movs	r0, #3
 8001532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001534:	f7ff f828 	bl	8000588 <HAL_GetTick>
 8001538:	1bc0      	subs	r0, r0, r7
 800153a:	4285      	cmp	r5, r0
 800153c:	d2dd      	bcs.n	80014fa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800153e:	e7e6      	b.n	800150e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001540 <HAL_UART_Init>:
{
 8001540:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001542:	4604      	mov	r4, r0
 8001544:	b340      	cbz	r0, 8001598 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001546:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800154a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800154e:	b91b      	cbnz	r3, 8001558 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001550:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001554:	f000 fcb0 	bl	8001eb8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001558:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800155a:	2324      	movs	r3, #36	; 0x24
 800155c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001560:	68d3      	ldr	r3, [r2, #12]
 8001562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001566:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ff53 	bl	8001414 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001576:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800157e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001586:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001588:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800158a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800158c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800158e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001592:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001596:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
}
 800159a:	bd10      	pop	{r4, pc}

0800159c <HAL_UART_Transmit>:
{
 800159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015a6:	2b20      	cmp	r3, #32
{
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
 80015ac:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80015ae:	d151      	bne.n	8001654 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80015b0:	2900      	cmp	r1, #0
 80015b2:	d04c      	beq.n	800164e <HAL_UART_Transmit+0xb2>
 80015b4:	2a00      	cmp	r2, #0
 80015b6:	d04a      	beq.n	800164e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80015b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d049      	beq.n	8001654 <HAL_UART_Transmit+0xb8>
 80015c0:	2301      	movs	r3, #1
 80015c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c6:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ca:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015cc:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015d4:	f7fe ffd8 	bl	8000588 <HAL_GetTick>
    huart->TxXferSize = Size;
 80015d8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80015dc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80015de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80015e2:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80015e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b95b      	cbnz	r3, 8001604 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4632      	mov	r2, r6
 80015f0:	2140      	movs	r1, #64	; 0x40
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff7c 	bl	80014f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015f8:	b9a0      	cbnz	r0, 8001624 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80015fa:	2320      	movs	r3, #32
 80015fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001604:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001606:	3b01      	subs	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800160c:	68a3      	ldr	r3, [r4, #8]
 800160e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	4632      	mov	r2, r6
 8001614:	463b      	mov	r3, r7
 8001616:	f04f 0180 	mov.w	r1, #128	; 0x80
 800161a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800161c:	d10e      	bne.n	800163c <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800161e:	f7ff ff67 	bl	80014f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001622:	b110      	cbz	r0, 800162a <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800162a:	882b      	ldrh	r3, [r5, #0]
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001632:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b943      	cbnz	r3, 800164a <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001638:	3502      	adds	r5, #2
 800163a:	e7d4      	b.n	80015e6 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800163c:	f7ff ff58 	bl	80014f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1ef      	bne.n	8001624 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	782a      	ldrb	r2, [r5, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	3501      	adds	r5, #1
 800164c:	e7cb      	b.n	80015e6 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001654:	2002      	movs	r0, #2
}
 8001656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800165a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800165a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800165e:	2b20      	cmp	r3, #32
 8001660:	d120      	bne.n	80016a4 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001662:	b1e9      	cbz	r1, 80016a0 <HAL_UART_Receive_IT+0x46>
 8001664:	b1e2      	cbz	r2, 80016a0 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001666:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800166a:	2b01      	cmp	r3, #1
 800166c:	d01a      	beq.n	80016a4 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800166e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001670:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001674:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001676:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001678:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800167c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800167e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001680:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001682:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001686:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800168a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800168c:	6951      	ldr	r1, [r2, #20]
 800168e:	f041 0101 	orr.w	r1, r1, #1
 8001692:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001694:	68d1      	ldr	r1, [r2, #12]
 8001696:	f041 0120 	orr.w	r1, r1, #32
 800169a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800169c:	4618      	mov	r0, r3
 800169e:	4770      	bx	lr
      return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	4770      	bx	lr
    return HAL_BUSY;
 80016a4:	2002      	movs	r0, #2
}
 80016a6:	4770      	bx	lr

080016a8 <HAL_UART_TxCpltCallback>:
 80016a8:	4770      	bx	lr

080016aa <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016aa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016ae:	2b22      	cmp	r3, #34	; 0x22
{
 80016b0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016b2:	d136      	bne.n	8001722 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016b4:	6883      	ldr	r3, [r0, #8]
 80016b6:	6901      	ldr	r1, [r0, #16]
 80016b8:	6802      	ldr	r2, [r0, #0]
 80016ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016c0:	d123      	bne.n	800170a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016c2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80016c4:	b9e9      	cbnz	r1, 8001702 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016ca:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80016ce:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80016d0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80016d2:	3c01      	subs	r4, #1
 80016d4:	b2a4      	uxth	r4, r4
 80016d6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80016d8:	b98c      	cbnz	r4, 80016fe <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80016da:	6803      	ldr	r3, [r0, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	f022 0220 	bic.w	r2, r2, #32
 80016e2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ea:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80016f4:	2320      	movs	r3, #32
 80016f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80016fa:	f000 fa67 	bl	8001bcc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80016fe:	2000      	movs	r0, #0
}
 8001700:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f823 2b01 	strh.w	r2, [r3], #1
 8001708:	e7e1      	b.n	80016ce <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800170a:	b921      	cbnz	r1, 8001716 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800170c:	1c59      	adds	r1, r3, #1
 800170e:	6852      	ldr	r2, [r2, #4]
 8001710:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e7dc      	b.n	80016d0 <UART_Receive_IT+0x26>
 8001716:	6852      	ldr	r2, [r2, #4]
 8001718:	1c59      	adds	r1, r3, #1
 800171a:	6281      	str	r1, [r0, #40]	; 0x28
 800171c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001720:	e7f7      	b.n	8001712 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001722:	2002      	movs	r0, #2
 8001724:	bd10      	pop	{r4, pc}

08001726 <HAL_UART_ErrorCallback>:
 8001726:	4770      	bx	lr

08001728 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001728:	6803      	ldr	r3, [r0, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800172c:	68d9      	ldr	r1, [r3, #12]
{
 800172e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001730:	0716      	lsls	r6, r2, #28
{
 8001732:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001734:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001736:	d107      	bne.n	8001748 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001738:	0696      	lsls	r6, r2, #26
 800173a:	d55c      	bpl.n	80017f6 <HAL_UART_IRQHandler+0xce>
 800173c:	068d      	lsls	r5, r1, #26
 800173e:	d55a      	bpl.n	80017f6 <HAL_UART_IRQHandler+0xce>
}
 8001740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001744:	f7ff bfb1 	b.w	80016aa <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001748:	f015 0501 	ands.w	r5, r5, #1
 800174c:	d102      	bne.n	8001754 <HAL_UART_IRQHandler+0x2c>
 800174e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001752:	d050      	beq.n	80017f6 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001754:	07d0      	lsls	r0, r2, #31
 8001756:	d505      	bpl.n	8001764 <HAL_UART_IRQHandler+0x3c>
 8001758:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800175a:	bf42      	ittt	mi
 800175c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800175e:	f043 0301 	orrmi.w	r3, r3, #1
 8001762:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001764:	0756      	lsls	r6, r2, #29
 8001766:	d504      	bpl.n	8001772 <HAL_UART_IRQHandler+0x4a>
 8001768:	b11d      	cbz	r5, 8001772 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800176a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001772:	0790      	lsls	r0, r2, #30
 8001774:	d504      	bpl.n	8001780 <HAL_UART_IRQHandler+0x58>
 8001776:	b11d      	cbz	r5, 8001780 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001780:	0713      	lsls	r3, r2, #28
 8001782:	d506      	bpl.n	8001792 <HAL_UART_IRQHandler+0x6a>
 8001784:	068e      	lsls	r6, r1, #26
 8001786:	d400      	bmi.n	800178a <HAL_UART_IRQHandler+0x62>
 8001788:	b11d      	cbz	r5, 8001792 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800178a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d066      	beq.n	8001866 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001798:	0695      	lsls	r5, r2, #26
 800179a:	d504      	bpl.n	80017a6 <HAL_UART_IRQHandler+0x7e>
 800179c:	0688      	lsls	r0, r1, #26
 800179e:	d502      	bpl.n	80017a6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff82 	bl	80016aa <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017ac:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80017ae:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017b0:	d402      	bmi.n	80017b8 <HAL_UART_IRQHandler+0x90>
 80017b2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80017b6:	d01a      	beq.n	80017ee <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80017b8:	f7ff fe1e 	bl	80013f8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	0652      	lsls	r2, r2, #25
 80017c2:	d510      	bpl.n	80017e6 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017c4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80017c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017cc:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80017ce:	b150      	cbz	r0, 80017e6 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_UART_IRQHandler+0x140>)
 80017d2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017d4:	f7fe ff5c 	bl	8000690 <HAL_DMA_Abort_IT>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d044      	beq.n	8001866 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80017de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80017e4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ff9d 	bl	8001726 <HAL_UART_ErrorCallback>
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80017ee:	f7ff ff9a 	bl	8001726 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017f6:	0616      	lsls	r6, r2, #24
 80017f8:	d527      	bpl.n	800184a <HAL_UART_IRQHandler+0x122>
 80017fa:	060d      	lsls	r5, r1, #24
 80017fc:	d525      	bpl.n	800184a <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017fe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001802:	2a21      	cmp	r2, #33	; 0x21
 8001804:	d12f      	bne.n	8001866 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001806:	68a2      	ldr	r2, [r4, #8]
 8001808:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800180c:	6a22      	ldr	r2, [r4, #32]
 800180e:	d117      	bne.n	8001840 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001810:	8811      	ldrh	r1, [r2, #0]
 8001812:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001816:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001818:	6921      	ldr	r1, [r4, #16]
 800181a:	b979      	cbnz	r1, 800183c <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 800181c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800181e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001820:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001822:	3a01      	subs	r2, #1
 8001824:	b292      	uxth	r2, r2
 8001826:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001828:	b9ea      	cbnz	r2, 8001866 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001830:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800183c:	3201      	adds	r2, #1
 800183e:	e7ee      	b.n	800181e <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001840:	1c51      	adds	r1, r2, #1
 8001842:	6221      	str	r1, [r4, #32]
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	e7ea      	b.n	8001820 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800184a:	0650      	lsls	r0, r2, #25
 800184c:	d50b      	bpl.n	8001866 <HAL_UART_IRQHandler+0x13e>
 800184e:	064a      	lsls	r2, r1, #25
 8001850:	d509      	bpl.n	8001866 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001858:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800185a:	2320      	movs	r3, #32
 800185c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001860:	4620      	mov	r0, r4
 8001862:	f7ff ff21 	bl	80016a8 <HAL_UART_TxCpltCallback>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	0800186d 	.word	0x0800186d

0800186c <UART_DMAAbortOnError>:
{
 800186c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800186e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001874:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001876:	f7ff ff56 	bl	8001726 <HAL_UART_ErrorCallback>
 800187a:	bd08      	pop	{r3, pc}

0800187c <init>:
int flag1r=0,counter=0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 800187c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ST7735_Init();
 800187e:	f000 fa3b 	bl	8001cf8 <ST7735_Init>

    const char ready[] = "Ready!\r\n";
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <init+0x28>)
 8001884:	6810      	ldr	r0, [r2, #0]
 8001886:	6851      	ldr	r1, [r2, #4]
 8001888:	7a12      	ldrb	r2, [r2, #8]
 800188a:	ab01      	add	r3, sp, #4
 800188c:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 800188e:	a901      	add	r1, sp, #4
    const char ready[] = "Ready!\r\n";
 8001890:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <init+0x2c>)
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	2208      	movs	r2, #8
 800189a:	f7ff fe7f 	bl	800159c <HAL_UART_Transmit>
}
 800189e:	b005      	add	sp, #20
 80018a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a4:	08002064 	.word	0x08002064
 80018a8:	20000158 	.word	0x20000158

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b530      	push	{r4, r5, lr}
 80018ae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b0:	2230      	movs	r2, #48	; 0x30
 80018b2:	2100      	movs	r1, #0
 80018b4:	a808      	add	r0, sp, #32
 80018b6:	f000 fbb9 	bl	800202c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ba:	2100      	movs	r1, #0
 80018bc:	2214      	movs	r2, #20
 80018be:	a803      	add	r0, sp, #12
 80018c0:	f000 fbb4 	bl	800202c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	2500      	movs	r5, #0
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <SystemClock_Config+0x90>)
 80018c8:	9501      	str	r5, [sp, #4]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018de:	9502      	str	r5, [sp, #8]
 80018e0:	6813      	ldr	r3, [r2, #0]
 80018e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001904:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001906:	2304      	movs	r3, #4
 8001908:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800190a:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 80;
 800190e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001912:	2307      	movs	r3, #7
 8001914:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191a:	f7fe ffa5 	bl	8000868 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001922:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001930:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001932:	f7ff f96d 	bl	8000c10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001936:	b015      	add	sp, #84	; 0x54
 8001938:	bd30      	pop	{r4, r5, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <main>:
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 8001948:	f7fe fdf8 	bl	800053c <HAL_Init>
  SystemClock_Config();
 800194c:	f7ff ffae 	bl	80018ac <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2214      	movs	r2, #20
 8001952:	2100      	movs	r1, #0
 8001954:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f000 fb68 	bl	800202c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195c:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <main+0x240>)
 800195e:	9401      	str	r4, [sp, #4]
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001962:	4889      	ldr	r0, [pc, #548]	; (8001b88 <main+0x244>)
  htim2.Instance = TIM2;
 8001964:	4d89      	ldr	r5, [pc, #548]	; (8001b8c <main+0x248>)
  htim4.Instance = TIM4;
 8001966:	4e8a      	ldr	r6, [pc, #552]	; (8001b90 <main+0x24c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	f042 0204 	orr.w	r2, r2, #4
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	f002 0204 	and.w	r2, r2, #4
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001978:	9402      	str	r4, [sp, #8]
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
 8001982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001984:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001988:	9202      	str	r2, [sp, #8]
 800198a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	9403      	str	r4, [sp, #12]
 800198e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	631a      	str	r2, [r3, #48]	; 0x30
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001998:	f002 0201 	and.w	r2, r2, #1
 800199c:	9203      	str	r2, [sp, #12]
 800199e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	9404      	str	r4, [sp, #16]
 80019a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a4:	f042 0202 	orr.w	r2, r2, #2
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80019b0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80019b4:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80019b8:	f7fe ff4a 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019bc:	4622      	mov	r2, r4
 80019be:	2120      	movs	r1, #32
 80019c0:	4874      	ldr	r0, [pc, #464]	; (8001b94 <main+0x250>)
 80019c2:	f7fe ff45 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019c6:	4622      	mov	r2, r4
 80019c8:	2101      	movs	r1, #1
 80019ca:	4873      	ldr	r0, [pc, #460]	; (8001b98 <main+0x254>)
 80019cc:	f7fe ff40 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d8:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <main+0x258>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019da:	486b      	ldr	r0, [pc, #428]	; (8001b88 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019dc:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f7fe fe67 	bl	80006b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019e6:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	a907      	add	r1, sp, #28
 80019ea:	4867      	ldr	r0, [pc, #412]	; (8001b88 <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f4:	f7fe fe5e 	bl	80006b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019f8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019fa:	a907      	add	r1, sp, #28
 80019fc:	4865      	ldr	r0, [pc, #404]	; (8001b94 <main+0x250>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80019fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f7fe fe55 	bl	80006b4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	a907      	add	r1, sp, #28
 8001a0c:	4862      	ldr	r0, [pc, #392]	; (8001b98 <main+0x254>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a12:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f7fe fe4d 	bl	80006b4 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 8001a1a:	4861      	ldr	r0, [pc, #388]	; (8001ba0 <main+0x25c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a1c:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <main+0x260>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a20:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a24:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001a2e:	230a      	movs	r3, #10
 8001a30:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a32:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a34:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a36:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a38:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3e:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a40:	f7ff fa0c 	bl	8000e5c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a44:	2210      	movs	r2, #16
 8001a46:	4621      	mov	r1, r4
 8001a48:	a807      	add	r0, sp, #28
 8001a4a:	f000 faef 	bl	800202c <memset>
  htim2.Init.Prescaler = 80;
 8001a4e:	f04f 0a50 	mov.w	sl, #80	; 0x50
 8001a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFF;
 8001a56:	f64f 79ff 	movw	r9, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a5a:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 80;
 8001a5c:	e885 0408 	stmia.w	r5, {r3, sl}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6a:	9405      	str	r4, [sp, #20]
 8001a6c:	9406      	str	r4, [sp, #24]
  htim2.Init.Period = 0xFFFF;
 8001a6e:	f8c5 900c 	str.w	r9, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a72:	f7ff fbcd 	bl	8001210 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a76:	a907      	add	r1, sp, #28
 8001a78:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f7ff fbeb 	bl	8001258 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a82:	a905      	add	r1, sp, #20
 8001a84:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	9405      	str	r4, [sp, #20]
  htim3.Instance = TIM3;
 8001a88:	4d47      	ldr	r5, [pc, #284]	; (8001ba8 <main+0x264>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8c:	f7ff fc78 	bl	8001380 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a90:	2210      	movs	r2, #16
 8001a92:	4621      	mov	r1, r4
 8001a94:	a807      	add	r0, sp, #28
 8001a96:	f000 fac9 	bl	800202c <memset>
  htim3.Instance = TIM3;
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <main+0x268>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9e:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 80;
 8001aa0:	e885 0408 	stmia.w	r5, {r3, sl}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	9405      	str	r4, [sp, #20]
 8001aaa:	9406      	str	r4, [sp, #24]
  htim3.Init.Period = 0xFFFF;
 8001aac:	f8c5 900c 	str.w	r9, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab0:	f7ff fbae 	bl	8001210 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab4:	a907      	add	r1, sp, #28
 8001ab6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001abc:	f7ff fbcc 	bl	8001258 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac0:	a905      	add	r1, sp, #20
 8001ac2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	9405      	str	r4, [sp, #20]
  huart2.Instance = USART2;
 8001ac6:	4d3a      	ldr	r5, [pc, #232]	; (8001bb0 <main+0x26c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aca:	f7ff fc59 	bl	8001380 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 8001ace:	4939      	ldr	r1, [pc, #228]	; (8001bb4 <main+0x270>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad0:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 8001ad2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ad6:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ada:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	230c      	movs	r3, #12
 8001ade:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae2:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae4:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae6:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae8:	f7ff fd2a 	bl	8001540 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aec:	2210      	movs	r2, #16
 8001aee:	4621      	mov	r1, r4
 8001af0:	a807      	add	r0, sp, #28
 8001af2:	f000 fa9b 	bl	800202c <memset>
  htim4.Instance = TIM4;
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <main+0x274>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001afa:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 80;
 8001afc:	e886 0408 	stmia.w	r6, {r3, sl}
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	9405      	str	r4, [sp, #20]
 8001b06:	9406      	str	r4, [sp, #24]
  htim4.Init.Period = 0xFFFF;
 8001b08:	f8c6 900c 	str.w	r9, [r6, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b0c:	f7ff fb80 	bl	8001210 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b10:	a907      	add	r1, sp, #28
 8001b12:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b18:	f7ff fb9e 	bl	8001258 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1c:	a905      	add	r1, sp, #20
 8001b1e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b24:	f7ff fc2c 	bl	8001380 <HAL_TIMEx_MasterConfigSynchronization>
  init();
 8001b28:	f7ff fea8 	bl	800187c <init>
  sprintf(i,"Hello Mohamed How are you ?\n\n\r");
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <main+0x278>)
if( flag1r > 0 ){
 8001b2e:	4c24      	ldr	r4, [pc, #144]	; (8001bc0 <main+0x27c>)
	HAL_UART_Transmit(&huart2, byte2, strlen(byte2), 100);
 8001b30:	4e24      	ldr	r6, [pc, #144]	; (8001bc4 <main+0x280>)
  sprintf(i,"Hello Mohamed How are you ?\n\n\r");
 8001b32:	a807      	add	r0, sp, #28
 8001b34:	f000 fa82 	bl	800203c <strcpy>
  HAL_UART_Transmit(&huart2,i,strlen(i),100);
 8001b38:	a807      	add	r0, sp, #28
 8001b3a:	f7fe fb4b 	bl	80001d4 <strlen>
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	b282      	uxth	r2, r0
 8001b42:	a907      	add	r1, sp, #28
 8001b44:	4628      	mov	r0, r5
 8001b46:	f7ff fd29 	bl	800159c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &byte1, 1);
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <main+0x284>)
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f7ff fd83 	bl	800165a <HAL_UART_Receive_IT>
if( flag1r > 0 ){
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	ddfd      	ble.n	8001b56 <main+0x212>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <main+0x250>)
 8001b5e:	f7fe fe7c 	bl	800085a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, byte2, strlen(byte2), 100);
 8001b62:	4630      	mov	r0, r6
 8001b64:	f7fe fb36 	bl	80001d4 <strlen>
 8001b68:	2364      	movs	r3, #100	; 0x64
 8001b6a:	b282      	uxth	r2, r0
 8001b6c:	4631      	mov	r1, r6
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f7ff fd14 	bl	800159c <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, &byte1, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <main+0x284>)
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f7ff fd6e 	bl	800165a <HAL_UART_Receive_IT>
	flag1r=0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6023      	str	r3, [r4, #0]
 8001b82:	e7e7      	b.n	8001b54 <main+0x210>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	20000118 	.word	0x20000118
 8001b90:	20000098 	.word	0x20000098
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	2000003c 	.word	0x2000003c
 8001ba4:	40003800 	.word	0x40003800
 8001ba8:	200000d8 	.word	0x200000d8
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	20000158 	.word	0x20000158
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	0800206d 	.word	0x0800206d
 8001bc0:	2000002c 	.word	0x2000002c
 8001bc4:	20000034 	.word	0x20000034
 8001bc8:	20000094 	.word	0x20000094

08001bcc <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	 if (huart->Instance == USART2)
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_RxCpltCallback+0x58>)
 8001bd0:	429a      	cmp	r2, r3
{
 8001bd2:	b570      	push	{r4, r5, r6, lr}
	 if (huart->Instance == USART2)
 8001bd4:	d124      	bne.n	8001c20 <HAL_UART_RxCpltCallback+0x54>
	  {

		 byte2[counter]=byte1;
 8001bd6:	4c14      	ldr	r4, [pc, #80]	; (8001c28 <HAL_UART_RxCpltCallback+0x5c>)
 8001bd8:	4d14      	ldr	r5, [pc, #80]	; (8001c2c <HAL_UART_RxCpltCallback+0x60>)
 8001bda:	4e15      	ldr	r6, [pc, #84]	; (8001c30 <HAL_UART_RxCpltCallback+0x64>)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	7832      	ldrb	r2, [r6, #0]
 8001be0:	54ea      	strb	r2, [r5, r3]
		HAL_UART_Transmit(&huart2, byte2, strlen(byte2), 100);
 8001be2:	4628      	mov	r0, r5
 8001be4:	f7fe faf6 	bl	80001d4 <strlen>
 8001be8:	2364      	movs	r3, #100	; 0x64
 8001bea:	b282      	uxth	r2, r0
 8001bec:	4629      	mov	r1, r5
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <HAL_UART_RxCpltCallback+0x68>)
 8001bf0:	f7ff fcd4 	bl	800159c <HAL_UART_Transmit>
	    /* Transmit one byte with 100 ms timeout */
	    /* Receive one byte in interrupt mode */
	    HAL_UART_Receive_IT(&huart2, &byte1, 1);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4631      	mov	r1, r6
 8001bf8:	480e      	ldr	r0, [pc, #56]	; (8001c34 <HAL_UART_RxCpltCallback+0x68>)
 8001bfa:	f7ff fd2e 	bl	800165a <HAL_UART_Receive_IT>
        if(counter>6){
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	dd0a      	ble.n	8001c1a <HAL_UART_RxCpltCallback+0x4e>
       		 		 counter=-1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	6023      	str	r3, [r4, #0]
       		 			flag1r=10;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_UART_RxCpltCallback+0x6c>)
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	601a      	str	r2, [r3, #0]
       		 	    memset(byte2, '-1', sizeof(byte2));
 8001c10:	f04f 3331 	mov.w	r3, #825307441	; 0x31313131
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	f8c5 3003 	str.w	r3, [r5, #3]

       		 		}
        counter ++;
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
 8001c22:	bf00      	nop
 8001c24:	40004400 	.word	0x40004400
 8001c28:	20000028 	.word	0x20000028
 8001c2c:	20000034 	.word	0x20000034
 8001c30:	20000094 	.word	0x20000094
 8001c34:	20000158 	.word	0x20000158
 8001c38:	2000002c 	.word	0x2000002c

08001c3c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4801      	ldr	r0, [pc, #4]	; (8001c48 <ST7735_Select+0xc>)
 8001c42:	f7fe be05 	b.w	8000850 <HAL_GPIO_WritePin>
 8001c46:	bf00      	nop
 8001c48:	40020800 	.word	0x40020800

08001c4c <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8001c4c:	b513      	push	{r0, r1, r4, lr}
 8001c4e:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
static void ST7735_WriteCommand(uint8_t cmd) {
 8001c52:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c56:	2101      	movs	r1, #1
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <ST7735_WriteCommand+0x24>)
 8001c5a:	f7fe fdf9 	bl	8000850 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	2201      	movs	r2, #1
 8001c64:	4621      	mov	r1, r4
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <ST7735_WriteCommand+0x28>)
 8001c68:	f7ff f935 	bl	8000ed6 <HAL_SPI_Transmit>
}
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd10      	pop	{r4, pc}
 8001c70:	40020400 	.word	0x40020400
 8001c74:	2000003c 	.word	0x2000003c

08001c78 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001c78:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001c80:	4806      	ldr	r0, [pc, #24]	; (8001c9c <ST7735_WriteData+0x24>)
 8001c82:	4611      	mov	r1, r2
 8001c84:	f7fe fde4 	bl	8000850 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001c88:	b2aa      	uxth	r2, r5
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <ST7735_WriteData+0x28>)
}
 8001c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001c96:	f7ff b91e 	b.w	8000ed6 <HAL_SPI_Transmit>
 8001c9a:	bf00      	nop
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	2000003c 	.word	0x2000003c

08001ca4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001ca6:	7805      	ldrb	r5, [r0, #0]
 8001ca8:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 8001caa:	b905      	cbnz	r5, 8001cae <ST7735_ExecuteCommandList+0xa>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 8001cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 8001cae:	4634      	mov	r4, r6
 8001cb0:	f814 0b02 	ldrb.w	r0, [r4], #2
 8001cb4:	f7ff ffca 	bl	8001c4c <ST7735_WriteCommand>
        numArgs = *addr++;
 8001cb8:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 8001cba:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 8001cbe:	d004      	beq.n	8001cca <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4639      	mov	r1, r7
 8001cc4:	f7ff ffd8 	bl	8001c78 <ST7735_WriteData>
            addr += numArgs;
 8001cc8:	443c      	add	r4, r7
        if(ms) {
 8001cca:	0633      	lsls	r3, r6, #24
 8001ccc:	d508      	bpl.n	8001ce0 <ST7735_ExecuteCommandList+0x3c>
            ms = *addr++;
 8001cce:	7820      	ldrb	r0, [r4, #0]
            if(ms == 255) ms = 500;
 8001cd0:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8001cd2:	bf08      	it	eq
 8001cd4:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 8001cd8:	f7fe fc5c 	bl	8000594 <HAL_Delay>
            ms = *addr++;
 8001cdc:	1c66      	adds	r6, r4, #1
 8001cde:	4634      	mov	r4, r6
 8001ce0:	3d01      	subs	r5, #1
 8001ce2:	b2ed      	uxtb	r5, r5
 8001ce4:	4626      	mov	r6, r4
 8001ce6:	e7e0      	b.n	8001caa <ST7735_ExecuteCommandList+0x6>

08001ce8 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2102      	movs	r1, #2
 8001cec:	4801      	ldr	r0, [pc, #4]	; (8001cf4 <ST7735_Unselect+0xc>)
 8001cee:	f7fe bdaf 	b.w	8000850 <HAL_GPIO_WritePin>
 8001cf2:	bf00      	nop
 8001cf4:	40020800 	.word	0x40020800

08001cf8 <ST7735_Init>:

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}

void ST7735_Init() {
 8001cf8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001cfa:	4c0e      	ldr	r4, [pc, #56]	; (8001d34 <ST7735_Init+0x3c>)
    ST7735_Select();
 8001cfc:	f7ff ff9e 	bl	8001c3c <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2101      	movs	r1, #1
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7fe fda3 	bl	8000850 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f7fe fc42 	bl	8000594 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	4611      	mov	r1, r2
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7fe fd9b 	bl	8000850 <HAL_GPIO_WritePin>
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <ST7735_Init+0x40>)
 8001d1c:	f7ff ffc2 	bl	8001ca4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001d20:	4806      	ldr	r0, [pc, #24]	; (8001d3c <ST7735_Init+0x44>)
 8001d22:	f7ff ffbf 	bl	8001ca4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <ST7735_Init+0x48>)
 8001d28:	f7ff ffbc 	bl	8001ca4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
}
 8001d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8001d30:	f7ff bfda 	b.w	8001ce8 <ST7735_Unselect>
 8001d34:	40020800 	.word	0x40020800
 8001d38:	0800208c 	.word	0x0800208c
 8001d3c:	080020c7 	.word	0x080020c7
 8001d40:	080020d4 	.word	0x080020d4

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_MspInit+0x3c>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	9100      	str	r1, [sp, #0]
 8001d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
 8001d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d56:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	9101      	str	r1, [sp, #4]
 8001d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d70:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d74:	f7fe fc22 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d78:	b003      	add	sp, #12
 8001d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	4604      	mov	r4, r0
 8001d88:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	2214      	movs	r2, #20
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	a803      	add	r0, sp, #12
 8001d90:	f000 f94c 	bl	800202c <memset>
  if(hspi->Instance==SPI2)
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <HAL_SPI_MspInit+0x90>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d138      	bne.n	8001e0e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001da0:	2400      	movs	r4, #0
 8001da2:	9400      	str	r4, [sp, #0]
 8001da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	481c      	ldr	r0, [pc, #112]	; (8001e18 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
 8001dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001db4:	9200      	str	r2, [sp, #0]
 8001db6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	9401      	str	r4, [sp, #4]
 8001dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbc:	f042 0204 	orr.w	r2, r2, #4
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc4:	f002 0204 	and.w	r2, r2, #4
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	9402      	str	r4, [sp, #8]
 8001dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd0:	f042 0202 	orr.w	r2, r2, #2
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de0:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dea:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f7fe fc5e 	bl	80006b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	a903      	add	r1, sp, #12
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e08:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f7fe fc53 	bl	80006b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e0e:	b009      	add	sp, #36	; 0x24
 8001e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40003800 	.word	0x40003800
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020400 	.word	0x40020400

08001e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM2)
 8001e22:	6803      	ldr	r3, [r0, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d116      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e34:	f041 0101 	orr.w	r1, r1, #1
 8001e38:	6419      	str	r1, [r3, #64]	; 0x40
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e42:	201c      	movs	r0, #28
 8001e44:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e48:	f7fe fbca 	bl	80005e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e4c:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e4e:	f7fe fbfb 	bl	8000648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e52:	b005      	add	sp, #20
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_TIM_Base_MspInit+0x8c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d111      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_Base_MspInit+0x90>)
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e66:	f041 0102 	orr.w	r1, r1, #2
 8001e6a:	6419      	str	r1, [r3, #64]	; 0x40
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e74:	201d      	movs	r0, #29
 8001e76:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e78:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e7a:	f7fe fbb1 	bl	80005e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e7e:	201d      	movs	r0, #29
 8001e80:	e7e5      	b.n	8001e4e <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM4)
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x94>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d1e4      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x90>)
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e90:	f041 0104 	orr.w	r1, r1, #4
 8001e94:	6419      	str	r1, [r3, #64]	; 0x40
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e9e:	201e      	movs	r0, #30
 8001ea0:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ea4:	f7fe fb9c 	bl	80005e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ea8:	201e      	movs	r0, #30
 8001eaa:	e7d0      	b.n	8001e4e <HAL_TIM_Base_MspInit+0x2e>
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	2214      	movs	r2, #20
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	a803      	add	r0, sp, #12
 8001ec4:	f000 f8b2 	bl	800202c <memset>
  if(huart->Instance==USART2)
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0x70>)
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d128      	bne.n	8001f22 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	9401      	str	r4, [sp, #4]
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001edc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	9402      	str	r4, [sp, #8]
 8001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f00:	230c      	movs	r3, #12
 8001f02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f7fe fbd1 	bl	80006b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f12:	2026      	movs	r0, #38	; 0x26
 8001f14:	4622      	mov	r2, r4
 8001f16:	4621      	mov	r1, r4
 8001f18:	f7fe fb62 	bl	80005e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f1c:	2026      	movs	r0, #38	; 0x26
 8001f1e:	f7fe fb93 	bl	8000648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f22:	b008      	add	sp, #32
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	bf00      	nop
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40020000 	.word	0x40020000

08001f30 <NMI_Handler>:
 8001f30:	4770      	bx	lr

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler>

08001f3a <SVC_Handler>:
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f7fe bb16 	b.w	8000570 <HAL_IncTick>

08001f44 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f44:	4801      	ldr	r0, [pc, #4]	; (8001f4c <TIM2_IRQHandler+0x8>)
 8001f46:	f7ff b873 	b.w	8001030 <HAL_TIM_IRQHandler>
 8001f4a:	bf00      	nop
 8001f4c:	20000118 	.word	0x20000118

08001f50 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <TIM3_IRQHandler+0x8>)
 8001f52:	f7ff b86d 	b.w	8001030 <HAL_TIM_IRQHandler>
 8001f56:	bf00      	nop
 8001f58:	200000d8 	.word	0x200000d8

08001f5c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f5c:	4801      	ldr	r0, [pc, #4]	; (8001f64 <TIM4_IRQHandler+0x8>)
 8001f5e:	f7ff b867 	b.w	8001030 <HAL_TIM_IRQHandler>
 8001f62:	bf00      	nop
 8001f64:	20000098 	.word	0x20000098

08001f68 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f68:	4801      	ldr	r0, [pc, #4]	; (8001f70 <USART2_IRQHandler+0x8>)
 8001f6a:	f7ff bbdd 	b.w	8001728 <HAL_UART_IRQHandler>
 8001f6e:	bf00      	nop
 8001f70:	20000158 	.word	0x20000158

08001f74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SystemInit+0x18>)
 8001f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f7a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f96:	e003      	b.n	8001fa0 <LoopCopyDataInit>

08001f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f9e:	3104      	adds	r1, #4

08001fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa8:	d3f6      	bcc.n	8001f98 <CopyDataInit>
  ldr  r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fac:	e002      	b.n	8001fb4 <LoopFillZerobss>

08001fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb0:	f842 3b04 	str.w	r3, [r2], #4

08001fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb8:	d3f9      	bcc.n	8001fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fba:	f7ff ffdb 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f000 f811 	bl	8001fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff fcbf 	bl	8001944 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001fcc:	08002128 	.word	0x08002128
  ldr  r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fd8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fdc:	20000198 	.word	0x20000198

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <__libc_init_array>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	4e0d      	ldr	r6, [pc, #52]	; (800201c <__libc_init_array+0x38>)
 8001fe8:	4c0d      	ldr	r4, [pc, #52]	; (8002020 <__libc_init_array+0x3c>)
 8001fea:	1ba4      	subs	r4, r4, r6
 8001fec:	10a4      	asrs	r4, r4, #2
 8001fee:	2500      	movs	r5, #0
 8001ff0:	42a5      	cmp	r5, r4
 8001ff2:	d109      	bne.n	8002008 <__libc_init_array+0x24>
 8001ff4:	4e0b      	ldr	r6, [pc, #44]	; (8002024 <__libc_init_array+0x40>)
 8001ff6:	4c0c      	ldr	r4, [pc, #48]	; (8002028 <__libc_init_array+0x44>)
 8001ff8:	f000 f828 	bl	800204c <_init>
 8001ffc:	1ba4      	subs	r4, r4, r6
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	2500      	movs	r5, #0
 8002002:	42a5      	cmp	r5, r4
 8002004:	d105      	bne.n	8002012 <__libc_init_array+0x2e>
 8002006:	bd70      	pop	{r4, r5, r6, pc}
 8002008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800200c:	4798      	blx	r3
 800200e:	3501      	adds	r5, #1
 8002010:	e7ee      	b.n	8001ff0 <__libc_init_array+0xc>
 8002012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002016:	4798      	blx	r3
 8002018:	3501      	adds	r5, #1
 800201a:	e7f2      	b.n	8002002 <__libc_init_array+0x1e>
 800201c:	08002120 	.word	0x08002120
 8002020:	08002120 	.word	0x08002120
 8002024:	08002120 	.word	0x08002120
 8002028:	08002124 	.word	0x08002124

0800202c <memset>:
 800202c:	4402      	add	r2, r0
 800202e:	4603      	mov	r3, r0
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <memset+0xa>
 8002034:	4770      	bx	lr
 8002036:	f803 1b01 	strb.w	r1, [r3], #1
 800203a:	e7f9      	b.n	8002030 <memset+0x4>

0800203c <strcpy>:
 800203c:	4603      	mov	r3, r0
 800203e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002042:	f803 2b01 	strb.w	r2, [r3], #1
 8002046:	2a00      	cmp	r2, #0
 8002048:	d1f9      	bne.n	800203e <strcpy+0x2>
 800204a:	4770      	bx	lr

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
