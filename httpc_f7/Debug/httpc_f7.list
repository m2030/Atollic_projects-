
httpc_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015edc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e48  080160dc  080160dc  000260dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f24  08019f24  00029f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f2c  08019f2c  00029f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019f30  08019f30  00029f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08019f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ae94  20000080  08019fb4  00030080  2**2
                  ALLOC
  8 ._user_heap_stack 00001804  2000af14  08019fb4  0003af14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040b1f  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000763d  00000000  00000000  00070bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002240  00000000  00000000  00078210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002100  00000000  00000000  0007a450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000167a7  00000000  00000000  0007c550  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b1ce  00000000  00000000  00092cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009dec5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000092b0  00000000  00000000  0009df44  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .RxDecripSection 00000080  2007c000  2007c000  0003c000  2**2
                  ALLOC
 19 .TxDescripSection 00000080  2007c080  2007c080  0003c080  2**2
                  ALLOC
 20 .RxarraySection 000017d0  2007c100  2007c100  0003c100  2**2
                  ALLOC
 21 .TxarraySection 000017d0  2007d8d0  2007d8d0  0003d8d0  2**2
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	080160c4 	.word	0x080160c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	080160c4 	.word	0x080160c4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2000009c 	.word	0x2000009c
 8000650:	200000f0 	.word	0x200000f0

08000654 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800065c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <SCB_EnableICache+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800066c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <SCB_EnableICache+0x3c>)
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <SCB_EnableICache+0x3c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000680:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SCB_EnableDCache+0x7c>)
 800069c:	2200      	movs	r2, #0
 800069e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <SCB_EnableDCache+0x7c>)
 80006a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006ac:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	0b5b      	lsrs	r3, r3, #13
 80006b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006b6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006c0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c2:	4913      	ldr	r1, [pc, #76]	; (8000710 <SCB_EnableDCache+0x7c>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	015a      	lsls	r2, r3, #5
 80006c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006d2:	4313      	orrs	r3, r2
 80006d4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1ef      	bne.n	80006c2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	60fa      	str	r2, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1e5      	bne.n	80006b8 <SCB_EnableDCache+0x24>
 80006ec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <SCB_EnableDCache+0x7c>)
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <SCB_EnableDCache+0x7c>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fa:	6153      	str	r3, [r2, #20]
 80006fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000700:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 800071c:	bf00      	nop
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	f247 5330 	movw	r3, #30000	; 0x7530
 8000724:	2201      	movs	r2, #1
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <__io_putchar+0x28>)
 8000728:	f003 fffe 	bl	8004728 <HAL_UART_Transmit>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f5      	bne.n	800071e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200072fc 	.word	0x200072fc

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000746:	f000 fa55 	bl	8000bf4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800074a:	f7ff ff83 	bl	8000654 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800074e:	f7ff ffa1 	bl	8000694 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fc97 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f821 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f97d 	bl	8000a58 <MX_GPIO_Init>
  MX_TIM2_Init();
 800075e:	f000 f8af 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000762:	f000 f8fb 	bl	800095c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000766:	f000 f947 	bl	80009f8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024*5);
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <main+0x54>)
 800076c:	1d3c      	adds	r4, r7, #4
 800076e:	461d      	mov	r5, r3
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f005 f956 	bl	8005a32 <osThreadCreate>
 8000786:	4602      	mov	r2, r0
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <main+0x58>)
 800078a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800078c:	f005 f93a 	bl	8005a04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000790:	e7fe      	b.n	8000790 <main+0x50>
 8000792:	bf00      	nop
 8000794:	080160e8 	.word	0x080160e8
 8000798:	200072ac 	.word	0x200072ac

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b8      	sub	sp, #224	; 0xe0
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a6:	2234      	movs	r2, #52	; 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f014 fd28 	bl	8015200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2290      	movs	r2, #144	; 0x90
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f014 fd19 	bl	8015200 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f002 f947 	bl	8002a60 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <SystemClock_Config+0x11c>)
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <SystemClock_Config+0x11c>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <SystemClock_Config+0x11c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	4a34      	ldr	r2, [pc, #208]	; (80008bc <SystemClock_Config+0x120>)
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <SystemClock_Config+0x120>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <SystemClock_Config+0x120>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000824:	23d8      	movs	r3, #216	; 0xd8
 8000826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000830:	2309      	movs	r3, #9
 8000832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f970 	bl	8002b20 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000846:	f000 fa29 	bl	8000c9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084a:	f002 f919 	bl	8002a80 <HAL_PWREx_EnableOverDrive>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000854:	f000 fa22 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800087a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800087e:	2107      	movs	r1, #7
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fbfb 	bl	800307c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800088c:	f000 fa06 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000894:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000896:	2300      	movs	r3, #0
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fe16 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x112>
  {
    Error_Handler();
 80008aa:	f000 f9f7 	bl	8000c9c <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	37e0      	adds	r7, #224	; 0xe0
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM2_Init+0x98>)
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_TIM2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_TIM2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0x98>)
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_TIM2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_TIM2_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_TIM2_Init+0x98>)
 8000908:	f003 fa08 	bl	8003d1c <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000912:	f000 f9c3 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM2_Init+0x98>)
 8000924:	f003 fbea 	bl	80040fc <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800092e:	f000 f9b5 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_TIM2_Init+0x98>)
 8000940:	f003 fdf8 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800094a:	f000 f9a7 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20007380 	.word	0x20007380

0800095c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM4_Init+0x94>)
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <MX_TIM4_Init+0x98>)
 800097e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM4_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM4_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM4_Init+0x94>)
 800098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000992:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_TIM4_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM4_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_TIM4_Init+0x94>)
 80009a2:	f003 f9bb 	bl	8003d1c <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80009ac:	f000 f976 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM4_Init+0x94>)
 80009be:	f003 fb9d 	bl	80040fc <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80009c8:	f000 f968 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM4_Init+0x94>)
 80009da:	f003 fdab 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f95a 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200072b0 	.word	0x200072b0
 80009f4:	40000800 	.word	0x40000800

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_USART3_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a3c:	f003 fe26 	bl	800468c <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f929 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200072fc 	.word	0x200072fc
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4a55      	ldr	r2, [pc, #340]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a70:	4b54      	ldr	r3, [pc, #336]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4a4f      	ldr	r2, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a88:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4a49      	ldr	r2, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000aa0:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4a43      	ldr	r2, [pc, #268]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ab8:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4a3d      	ldr	r2, [pc, #244]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae6:	4a37      	ldr	r2, [pc, #220]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <MX_GPIO_Init+0x16c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b04:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0x170>)
 8000b06:	f001 ff91 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	482f      	ldr	r0, [pc, #188]	; (8000bcc <MX_GPIO_Init+0x174>)
 8000b10:	f001 ff8c 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0x178>)
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0x17c>)
 8000b2a:	f001 fdd5 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b2e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4820      	ldr	r0, [pc, #128]	; (8000bc8 <MX_GPIO_Init+0x170>)
 8000b48:	f001 fdc6 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <MX_GPIO_Init+0x174>)
 8000b64:	f001 fdb8 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <MX_GPIO_Init+0x174>)
 8000b7c:	f001 fdac 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b80:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b92:	230a      	movs	r3, #10
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0x180>)
 8000b9e:	f001 fd9b 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x180>)
 8000bb8:	f001 fd8e 	bl	80026d8 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	10110000 	.word	0x10110000
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000be4:	f004 f9fa 	bl	8004fdc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8000be8:	f008 fda4 	bl	8009734 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f004 ff6c 	bl	8005aca <osDelay>
 8000bf2:	e7fb      	b.n	8000bec <StartDefaultTask+0x10>

08000bf4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

	MPU_Region_InitTypeDef MPU_InitStruct;
	/* Disable the MPU */
	HAL_MPU_Disable();
 8000bfa:	f000 fb73 	bl	80012e4 <HAL_MPU_Disable>
	/* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MPU_Config+0x80>)
 8000c04:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c06:	230d      	movs	r3, #13
 8000c08:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fb8d 	bl	800134c <HAL_MPU_ConfigRegion>
	/* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x2007C000;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MPU_Config+0x80>)
 8000c38:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fb73 	bl	800134c <HAL_MPU_ConfigRegion>

		  /* Enable the MPU */
		  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c66:	2004      	movs	r0, #4
 8000c68:	f000 fb52 	bl	8001310 <HAL_MPU_Enable>

}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2007c000 	.word	0x2007c000

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 fa09 	bl	80010a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40000400 	.word	0x40000400

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x6>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210f      	movs	r1, #15
 8000cde:	f06f 0001 	mvn.w	r0, #1
 8000ce2:	f000 fad5 	bl	8001290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d114      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	201c      	movs	r0, #28
 8000d24:	f000 fab4 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d28:	201c      	movs	r0, #28
 8000d2a:	f000 facd 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d2e:	e018      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_TIM_Base_MspInit+0x7c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d113      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_TIM_Base_MspInit+0x78>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	201e      	movs	r0, #30
 8000d58:	f000 fa9a 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d5c:	201e      	movs	r0, #30
 8000d5e:	f000 fab3 	bl	80012c8 <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40000800 	.word	0x40000800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0x7c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d128      	bne.n	8000de8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000de4:	f001 fc78 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	201d      	movs	r0, #29
 8000e12:	f000 fa3d 	bl	8001290 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e16:	201d      	movs	r0, #29
 8000e18:	f000 fa56 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_InitTick+0xa0>)
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_InitTick+0xa0>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_InitTick+0xa0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb14 	bl	800346c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e44:	f002 faea 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e50:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	0c9b      	lsrs	r3, r3, #18
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <HAL_InitTick+0xac>)
 8000e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e68:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e7e:	f002 ff4d 	bl	8003d1c <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d104      	bne.n	8000e92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e8a:	f002 ff9f 	bl	8003dcc <HAL_TIM_Base_Start_IT>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	431bde83 	.word	0x431bde83
 8000ea4:	200073cc 	.word	0x200073cc
 8000ea8:	40000400 	.word	0x40000400

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f002 ffed 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20007380 	.word	0x20007380

08000eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM3_IRQHandler+0x10>)
 8000ef2:	f002 ffe3 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200073cc 	.word	0x200073cc

08000f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM4_IRQHandler+0x10>)
 8000f06:	f002 ffd9 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200072b0 	.word	0x200072b0

08000f14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <ETH_IRQHandler+0x10>)
 8000f1a:	f000 fe3f 	bl	8001b9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20007474 	.word	0x20007474

08000f28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00a      	b.n	8000f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f3a:	68bc      	ldr	r4, [r7, #8]
 8000f3c:	1c63      	adds	r3, r4, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	f3af 8000 	nop.w
 8000f44:	4603      	mov	r3, r0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf0      	blt.n	8000f3a <_read+0x12>
	}

return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}

08000f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e009      	b.n	8000f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbc9 	bl	8000714 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf1      	blt.n	8000f74 <_write+0x12>
	}
	return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x50>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x16>
		heap_end = &end;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <_sbrk+0x50>)
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <_sbrk+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_sbrk+0x50>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <_sbrk+0x50>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	466a      	mov	r2, sp
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d905      	bls.n	8000fd2 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <_sbrk+0x58>)
 8000fc8:	220c      	movs	r2, #12
 8000fca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	e006      	b.n	8000fe0 <_sbrk+0x44>
	}

	heap_end += incr;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <_sbrk+0x50>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <_sbrk+0x50>)
 8000fdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200002f0 	.word	0x200002f0
 8000ff0:	2000af18 	.word	0x2000af18
 8000ff4:	2000af0c 	.word	0x2000af0c

08000ff8 <_close>:

int _close(int file)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	return -1;
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001020:	605a      	str	r2, [r3, #4]
	return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_isatty>:

int _isatty(int file)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	return 1;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f8f6 	bl	800127a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff feb4 	bl	8000dfc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fe06 	bl	8000ca4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20007418 	.word	0x20007418

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20007418 	.word	0x20007418

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_Delay+0x40>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3f7      	bcc.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	4909      	ldr	r1, [pc, #36]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	f002 021f 	and.w	r2, r2, #31
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	490d      	ldr	r1, [pc, #52]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	4909      	ldr	r1, [pc, #36]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	2201      	movs	r2, #1
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125e:	2101      	movs	r1, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	1e59      	subs	r1, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff4e 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a2:	f7ff ff63 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff ffb3 	bl	8001218 <NVIC_EncodePriority>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff82 	bl	80011c4 <__NVIC_SetPriority>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff56 	bl	8001188 <__NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e8:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_MPU_Disable+0x24>)
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MPU_Disable+0x24>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_MPU_Disable+0x28>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	e000ed90 	.word	0xe000ed90

08001310 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_MPU_Enable+0x34>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_MPU_Enable+0x38>)
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MPU_Enable+0x38>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800132e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001332:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed90 	.word	0xe000ed90
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_MPU_ConfigRegion+0x84>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d028      	beq.n	80013b6 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_MPU_ConfigRegion+0x84>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800136c:	4918      	ldr	r1, [pc, #96]	; (80013d0 <HAL_MPU_ConfigRegion+0x84>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7b1b      	ldrb	r3, [r3, #12]
 8001372:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7adb      	ldrb	r3, [r3, #11]
 8001378:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800137a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7a9b      	ldrb	r3, [r3, #10]
 8001380:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001382:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7b5b      	ldrb	r3, [r3, #13]
 8001388:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800138a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7b9b      	ldrb	r3, [r3, #14]
 8001390:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001392:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7bdb      	ldrb	r3, [r3, #15]
 8001398:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800139a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a5b      	ldrb	r3, [r3, #9]
 80013a0:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7a1b      	ldrb	r3, [r3, #8]
 80013a8:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013aa:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013b0:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b2:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013b4:	e005      	b.n	80013c2 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_MPU_ConfigRegion+0x84>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_MPU_ConfigRegion+0x84>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed90 	.word	0xe000ed90

080013d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013e4:	4ba9      	ldr	r3, [pc, #676]	; (800168c <HAL_ETH_Init+0x2b8>)
 80013e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e183      	b.n	8001702 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f003 feb2 	bl	8005178 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4a9e      	ldr	r2, [pc, #632]	; (8001690 <HAL_ETH_Init+0x2bc>)
 8001416:	4b9e      	ldr	r3, [pc, #632]	; (8001690 <HAL_ETH_Init+0x2bc>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141e:	6453      	str	r3, [r2, #68]	; 0x44
 8001420:	4b9b      	ldr	r3, [pc, #620]	; (8001690 <HAL_ETH_Init+0x2bc>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800142c:	4a99      	ldr	r2, [pc, #612]	; (8001694 <HAL_ETH_Init+0x2c0>)
 800142e:	4b99      	ldr	r3, [pc, #612]	; (8001694 <HAL_ETH_Init+0x2c0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001436:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001438:	4996      	ldr	r1, [pc, #600]	; (8001694 <HAL_ETH_Init+0x2c0>)
 800143a:	4b96      	ldr	r3, [pc, #600]	; (8001694 <HAL_ETH_Init+0x2c0>)
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	f042 0201 	orr.w	r2, r2, #1
 8001458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800145e:	f7ff fe33 	bl	80010c8 <HAL_GetTick>
 8001462:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001464:	e011      	b.n	800148a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001466:	f7ff fe2f 	bl	80010c8 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001474:	d909      	bls.n	800148a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e13b      	b.n	8001702 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e4      	bne.n	8001466 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f023 031c 	bic.w	r3, r3, #28
 80014aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014ac:	f001 ffaa 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 80014b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4a78      	ldr	r2, [pc, #480]	; (8001698 <HAL_ETH_Init+0x2c4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d908      	bls.n	80014cc <HAL_ETH_Init+0xf8>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4a77      	ldr	r2, [pc, #476]	; (800169c <HAL_ETH_Init+0x2c8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d804      	bhi.n	80014cc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e027      	b.n	800151c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	4a73      	ldr	r2, [pc, #460]	; (800169c <HAL_ETH_Init+0x2c8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d908      	bls.n	80014e6 <HAL_ETH_Init+0x112>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4a72      	ldr	r2, [pc, #456]	; (80016a0 <HAL_ETH_Init+0x2cc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d804      	bhi.n	80014e6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f043 030c 	orr.w	r3, r3, #12
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	e01a      	b.n	800151c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4a6d      	ldr	r2, [pc, #436]	; (80016a0 <HAL_ETH_Init+0x2cc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d903      	bls.n	80014f6 <HAL_ETH_Init+0x122>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <HAL_ETH_Init+0x2d0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d911      	bls.n	800151a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4a6a      	ldr	r2, [pc, #424]	; (80016a4 <HAL_ETH_Init+0x2d0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d908      	bls.n	8001510 <HAL_ETH_Init+0x13c>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_ETH_Init+0x2d4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d804      	bhi.n	8001510 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e005      	b.n	800151c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	e000      	b.n	800151c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800151a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001528:	2100      	movs	r1, #0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fc19 	bl	8001d62 <HAL_ETH_WritePHYRegister>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fdcd 	bl	80020dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0d9      	b.n	8001702 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800154e:	20ff      	movs	r0, #255	; 0xff
 8001550:	f7ff fdc6 	bl	80010e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a7 	beq.w	80016ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800155e:	f7ff fdb3 	bl	80010c8 <HAL_GetTick>
 8001562:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	461a      	mov	r2, r3
 800156a:	2101      	movs	r1, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fb90 	bl	8001c92 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001572:	f7ff fda9 	bl	80010c8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d90f      	bls.n	80015a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fda6 	bl	80020dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0ae      	b.n	8001702 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0da      	beq.n	8001564 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b2:	2100      	movs	r1, #0
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fbd4 	bl	8001d62 <HAL_ETH_WritePHYRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fd88 	bl	80020dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015d4:	2301      	movs	r3, #1
 80015d6:	e094      	b.n	8001702 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fd76 	bl	80010c8 <HAL_GetTick>
 80015dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fb53 	bl	8001c92 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015ec:	f7ff fd6c 	bl	80010c8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d90f      	bls.n	800161e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fd69 	bl	80020dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e071      	b.n	8001702 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0da      	beq.n	80015de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	461a      	mov	r2, r3
 800162e:	211f      	movs	r1, #31
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fb2e 	bl	8001c92 <HAL_ETH_ReadPHYRegister>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fd4a 	bl	80020dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001650:	2301      	movs	r3, #1
 8001652:	e056      	b.n	8001702 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	e002      	b.n	800166e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	e037      	b.n	80016f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e032      	b.n	80016f0 <HAL_ETH_Init+0x31c>
 800168a:	bf00      	nop
 800168c:	03938700 	.word	0x03938700
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	01312cff 	.word	0x01312cff
 800169c:	02160ebf 	.word	0x02160ebf
 80016a0:	039386ff 	.word	0x039386ff
 80016a4:	05f5e0ff 	.word	0x05f5e0ff
 80016a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016bc:	4313      	orrs	r3, r2
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	2100      	movs	r1, #0
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fb4c 	bl	8001d62 <HAL_ETH_WritePHYRegister>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fd00 	bl	80020dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e00c      	b.n	8001702 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016ec:	f7ff fcf8 	bl	80010e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fcf2 	bl	80020dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop

0800170c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_ETH_DMATxDescListInit+0x20>
 8001728:	2302      	movs	r3, #2
 800172a:	e052      	b.n	80017d2 <HAL_ETH_DMATxDescListInit+0xc6>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e030      	b.n	80017aa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	015b      	lsls	r3, r3, #5
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001758:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	461a      	mov	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d908      	bls.n	800179e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	015b      	lsls	r3, r3, #5
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	461a      	mov	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	e002      	b.n	80017a4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3ca      	bcc.n	8001748 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f241 0310 	movw	r3, #4112	; 0x1010
 80017bc:	440b      	add	r3, r1
 80017be:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ETH_DMARxDescListInit+0x20>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e056      	b.n	80018ac <HAL_ETH_DMARxDescListInit+0xce>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e034      	b.n	8001884 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800182a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001832:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	461a      	mov	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	1e5a      	subs	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	429a      	cmp	r2, r3
 8001864:	d908      	bls.n	8001878 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e002      	b.n	800187e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3c6      	bcc.n	800181a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	f241 030c 	movw	r3, #4108	; 0x100c
 8001896:	440b      	add	r3, r1
 8001898:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ETH_TransmitFrame+0x24>
 80018d8:	2302      	movs	r3, #2
 80018da:	e0cd      	b.n	8001a78 <HAL_ETH_TransmitFrame+0x1c0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001902:	2301      	movs	r3, #1
 8001904:	e0b8      	b.n	8001a78 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da09      	bge.n	8001924 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2212      	movs	r2, #18
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0a9      	b.n	8001a78 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800192a:	4293      	cmp	r3, r2
 800192c:	d915      	bls.n	800195a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	4a54      	ldr	r2, [pc, #336]	; (8001a84 <HAL_ETH_TransmitFrame+0x1cc>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <HAL_ETH_TransmitFrame+0x1cc>)
 800193e:	fba3 1302 	umull	r1, r3, r3, r2
 8001942:	0a9b      	lsrs	r3, r3, #10
 8001944:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e001      	b.n	800195e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d11c      	bne.n	800199e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001972:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800197e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800198e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
 800199c:	e04b      	b.n	8001a36 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e044      	b.n	8001a2e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019d2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d116      	bne.n	8001a0c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019ec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_ETH_TransmitFrame+0x1d0>)
 80019f2:	fb02 f203 	mul.w	r2, r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019fe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a0a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a1a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3b6      	bcc.n	80019a4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00d      	beq.n	8001a66 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a52:	4413      	add	r3, r2
 8001a54:	2204      	movs	r2, #4
 8001a56:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a60:	4413      	add	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	ac02b00b 	.word	0xac02b00b
 8001a88:	fffffa0c 	.word	0xfffffa0c

08001a8c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e074      	b.n	8001b90 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ab6:	e05a      	b.n	8001b6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d10d      	bne.n	8001aea <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ae8:	e041      	b.n	8001b6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b0e:	e02e      	b.n	8001b6e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d103      	bne.n	8001b32 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b3e:	1f1a      	subs	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e010      	b.n	8001b90 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db02      	blt.n	8001b7e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d99c      	bls.n	8001ab8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d112      	bne.n	8001bde <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f003 fb9d 	bl	80052f8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bdc:	e01b      	b.n	8001c16 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be6:	4413      	add	r3, r2
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d111      	bne.n	8001c16 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f839 	bl	8001c6a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c00:	4413      	add	r3, r2
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c1e:	4413      	add	r3, r2
 8001c20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c24:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c2e:	4413      	add	r3, r2
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d112      	bne.n	8001c62 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f81e 	bl	8001c7e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c50:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b82      	cmp	r3, #130	; 0x82
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e050      	b.n	8001d5a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2282      	movs	r2, #130	; 0x82
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 031c 	and.w	r3, r3, #28
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8a1b      	ldrh	r3, [r3, #16]
 8001cd4:	02db      	lsls	r3, r3, #11
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff f9e0 	bl	80010c8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d0a:	e015      	b.n	8001d38 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d0c:	f7ff f9dc 	bl	80010c8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d309      	bcc.n	8001d30 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e014      	b.n	8001d5a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e4      	bne.n	8001d0c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b42      	cmp	r3, #66	; 0x42
 8001d82:	d101      	bne.n	8001d88 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
 8001d86:	e04e      	b.n	8001e26 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2242      	movs	r2, #66	; 0x42
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 031c 	and.w	r3, r3, #28
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8a1b      	ldrh	r3, [r3, #16]
 8001da4:	02db      	lsls	r3, r3, #11
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dde:	f7ff f973 	bl	80010c8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de4:	e015      	b.n	8001e12 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001de6:	f7ff f96f 	bl	80010c8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d309      	bcc.n	8001e0a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e00d      	b.n	8001e26 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e4      	bne.n	8001de6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ETH_Start+0x16>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e01f      	b.n	8001e84 <HAL_ETH_Start+0x56>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb41 	bl	80024dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fb78 	bl	8002550 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fc0f 	bl	8002684 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fbac 	bl	80025c4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fbd9 	bl	8002624 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ETH_Stop+0x16>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e01f      	b.n	8001ee2 <HAL_ETH_Stop+0x56>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fb9e 	bl	80025f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fbcb 	bl	8002654 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fb63 	bl	800258a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fbdd 	bl	8002684 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb23 	bl	8002516 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ETH_ConfigMAC+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0e3      	b.n	80020d0 <HAL_ETH_ConfigMAC+0x1e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80b0 	beq.w	8002080 <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <HAL_ETH_ConfigMAC+0x1ec>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f38:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f3e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f44:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f4a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f50:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f56:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f5c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f62:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f68:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f6e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f74:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f7a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff f8a4 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fac:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fb2:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception | 
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fb8:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fbe:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001fc4:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fca:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 8001fd0:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd2:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff f87f 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ff2:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ffc:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f64f 7341 	movw	r3, #65345	; 0xff41
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800201a:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002020:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002026:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800202c:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002032:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff f848 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	6f12      	ldr	r2, [r2, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002064:	430a      	orrs	r2, r1
 8002066:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff f835 	bl	80010e0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	61da      	str	r2, [r3, #28]
 800207e:	e01e      	b.n	80020be <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800208e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7ff f815 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	ff20810f 	.word	0xff20810f

080020dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b0      	sub	sp, #192	; 0xc0
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002100:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800210a:	2300      	movs	r3, #0
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002126:	663b      	str	r3, [r7, #96]	; 0x60
 8002128:	e001      	b.n	800212e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800212e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002132:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002138:	2300      	movs	r3, #0
 800213a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b4:	4baa      	ldr	r3, [pc, #680]	; (8002460 <ETH_MACDMAConfig+0x384>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021c0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021c4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021c8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021ce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021d2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021d6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021dc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021e0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021e4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021e8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021ec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002204:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe ff65 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002226:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002228:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 800222a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800222c:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 800222e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002232:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8002234:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002238:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 800223a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800223e:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8002240:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002244:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8002246:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 800224a:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800224c:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe ff41 	bl	80010e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002270:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800227a:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800228e:	4013      	ands	r3, r2
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002298:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800229a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800229e:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022a4:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022aa:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022b0:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022b6:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ca:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe ff02 	bl	80010e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e4:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002300:	2001      	movs	r0, #1
 8002302:	f7fe feed 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230e:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002318:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800231e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002322:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002334:	2304      	movs	r3, #4
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800233e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800234a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002358:	2300      	movs	r3, #0
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f241 0318 	movw	r3, #4120	; 0x1018
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800236c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002370:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <ETH_MACDMAConfig+0x388>)
 8002372:	4013      	ands	r3, r2
 8002374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002378:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800237a:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800237c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800237e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002380:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002382:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002384:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002386:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002388:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800238a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800238c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800238e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002390:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002394:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002398:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800239a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023ac:	4413      	add	r3, r2
 80023ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b2:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7fe fe8b 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80023d2:	4413      	add	r3, r2
 80023d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d8:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023e2:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023e6:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80023e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023ea:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80023ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023ee:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 80023f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023f2:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023f4:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80023f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023f8:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fe64 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10d      	bne.n	800244a <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f241 031c 	movw	r3, #4124	; 0x101c
 800243a:	4413      	add	r3, r2
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <ETH_MACDMAConfig+0x38c>)
 8002440:	431a      	orrs	r2, r3
 8002442:	f241 031c 	movw	r3, #4124	; 0x101c
 8002446:	440b      	add	r3, r1
 8002448:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	461a      	mov	r2, r3
 8002450:	2100      	movs	r1, #0
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f80a 	bl	800246c <ETH_MACAddressConfig>
}
 8002458:	bf00      	nop
 800245a:	37c0      	adds	r7, #192	; 0xc0
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	ff20810f 	.word	0xff20810f
 8002464:	f8de3f23 	.word	0xf8de3f23
 8002468:	00010040 	.word	0x00010040

0800246c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3305      	adds	r3, #5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	3204      	adds	r2, #4
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <ETH_MACAddressConfig+0x68>)
 800248e:	4413      	add	r3, r2
 8002490:	461a      	mov	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3303      	adds	r3, #3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	061a      	lsls	r2, r3, #24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3302      	adds	r3, #2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	4313      	orrs	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <ETH_MACAddressConfig+0x6c>)
 80024be:	4413      	add	r3, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40028040 	.word	0x40028040
 80024d8:	40028044 	.word	0x40028044

080024dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002500:	2001      	movs	r0, #1
 8002502:	f7fe fded 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800253a:	2001      	movs	r0, #1
 800253c:	f7fe fdd0 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	f042 0204 	orr.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002574:	2001      	movs	r0, #1
 8002576:	f7fe fdb3 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	f022 0204 	bic.w	r2, r2, #4
 80025a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7fe fd96 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d8:	4413      	add	r3, r2
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e4:	440b      	add	r3, r1
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f241 0318 	movw	r3, #4120	; 0x1018
 8002608:	4413      	add	r3, r2
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002610:	f241 0318 	movw	r3, #4120	; 0x1018
 8002614:	440b      	add	r3, r1
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f241 0318 	movw	r3, #4120	; 0x1018
 8002638:	4413      	add	r3, r2
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f241 0318 	movw	r3, #4120	; 0x1018
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0202 	bic.w	r2, r3, #2
 8002670:	f241 0318 	movw	r3, #4120	; 0x1018
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f241 0318 	movw	r3, #4120	; 0x1018
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026a8:	440b      	add	r3, r1
 80026aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026b4:	4413      	add	r3, r2
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7fe fd10 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80026ca:	440b      	add	r3, r1
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	e175      	b.n	80029e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8164 	bne.w	80029de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d00b      	beq.n	8002736 <HAL_GPIO_Init+0x5e>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800272a:	2b11      	cmp	r3, #17
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b12      	cmp	r3, #18
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x100>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80be 	beq.w	80029de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_GPIO_Init+0x320>)
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_GPIO_Init+0x320>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_GPIO_Init+0x320>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800287a:	4a60      	ldr	r2, [pc, #384]	; (80029fc <HAL_GPIO_Init+0x324>)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_GPIO_Init+0x328>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d037      	beq.n	8002916 <HAL_GPIO_Init+0x23e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_GPIO_Init+0x32c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d031      	beq.n	8002912 <HAL_GPIO_Init+0x23a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <HAL_GPIO_Init+0x330>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02b      	beq.n	800290e <HAL_GPIO_Init+0x236>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_GPIO_Init+0x334>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d025      	beq.n	800290a <HAL_GPIO_Init+0x232>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_GPIO_Init+0x338>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01f      	beq.n	8002906 <HAL_GPIO_Init+0x22e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_GPIO_Init+0x33c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x22a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_GPIO_Init+0x340>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x226>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_GPIO_Init+0x344>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x222>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_GPIO_Init+0x348>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x21e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4e      	ldr	r2, [pc, #312]	; (8002a24 <HAL_GPIO_Init+0x34c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x21a>
 80028ee:	2309      	movs	r3, #9
 80028f0:	e012      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028f2:	230a      	movs	r3, #10
 80028f4:	e010      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028f6:	2308      	movs	r3, #8
 80028f8:	e00e      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00c      	b.n	8002918 <HAL_GPIO_Init+0x240>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00a      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002902:	2305      	movs	r3, #5
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002906:	2304      	movs	r3, #4
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x240>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x240>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x240>
 8002916:	2300      	movs	r3, #0
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002928:	4934      	ldr	r1, [pc, #208]	; (80029fc <HAL_GPIO_Init+0x324>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002936:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_GPIO_Init+0x350>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295a:	4a33      	ldr	r2, [pc, #204]	; (8002a28 <HAL_GPIO_Init+0x350>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_GPIO_Init+0x350>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <HAL_GPIO_Init+0x350>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_GPIO_Init+0x350>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_GPIO_Init+0x350>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_GPIO_Init+0x350>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_GPIO_Init+0x350>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	f67f ae86 	bls.w	80026f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3724      	adds	r7, #36	; 0x24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40021400 	.word	0x40021400
 8002a18:	40021800 	.word	0x40021800
 8002a1c:	40021c00 	.word	0x40021c00
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40022400 	.word	0x40022400
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a64:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40007000 	.word	0x40007000

08002a80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aae:	f7fe fb0b 	bl	80010c8 <HAL_GetTick>
 8002ab2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ab4:	e009      	b.n	8002aca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ab6:	f7fe fb07 	bl	80010c8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac4:	d901      	bls.n	8002aca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e022      	b.n	8002b10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d1ee      	bne.n	8002ab6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ad8:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae4:	f7fe faf0 	bl	80010c8 <HAL_GetTick>
 8002ae8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aea:	e009      	b.n	8002b00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aec:	f7fe faec 	bl	80010c8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afa:	d901      	bls.n	8002b00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e007      	b.n	8002b10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0c:	d1ee      	bne.n	8002aec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e29b      	b.n	800306e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8087 	beq.w	8002c52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	4b96      	ldr	r3, [pc, #600]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d00c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b50:	4b93      	ldr	r3, [pc, #588]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d112      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62>
 8002b5c:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b68:	d10b      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d06c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x130>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d168      	bne.n	8002c50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e275      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x7a>
 8002b8c:	4a84      	ldr	r2, [pc, #528]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	4b84      	ldr	r3, [pc, #528]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e02e      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x9c>
 8002ba2:	4a7f      	ldr	r2, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4a7c      	ldr	r2, [pc, #496]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0xc0>
 8002bc6:	4a76      	ldr	r2, [pc, #472]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd8>
 8002be0:	4a6f      	ldr	r2, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4a6c      	ldr	r2, [pc, #432]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fa62 	bl	80010c8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa5e 	bl	80010c8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e229      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe8>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fa4e 	bl	80010c8 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe fa4a 	bl	80010c8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e215      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x110>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d069      	beq.n	8002d32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5e:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x190>
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x17a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1e9      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4941      	ldr	r1, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e040      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fa00 	bl	80010c8 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe f9fc 	bl	80010c8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1c7      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	492d      	ldr	r1, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
 8002cfe:	e018      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe f9dc 	bl	80010c8 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe f9d8 	bl	80010c8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1a3      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d038      	beq.n	8002db0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe f9b9 	bl	80010c8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f9b5 	bl	80010c8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e180      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x23a>
 8002d78:	e01a      	b.n	8002db0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe f99f 	bl	80010c8 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f99b 	bl	80010c8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d903      	bls.n	8002da4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e166      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
 8002da0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a4 	beq.w	8002f06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbe:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4a89      	ldr	r2, [pc, #548]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b86      	ldr	r3, [pc, #536]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b83      	ldr	r3, [pc, #524]	; (8002ff4 <HAL_RCC_OscConfig+0x4d4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d118      	bne.n	8002e24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002df2:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x4d4>)
 8002df4:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x4d4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f963 	bl	80010c8 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7fe f95f 	bl	80010c8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e12a      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e18:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCC_OscConfig+0x4d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x31a>
 8002e2c:	4a70      	ldr	r2, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e02d      	b.n	8002e96 <HAL_RCC_OscConfig+0x376>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x33c>
 8002e42:	4a6b      	ldr	r2, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4a68      	ldr	r2, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	e01c      	b.n	8002e96 <HAL_RCC_OscConfig+0x376>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x35e>
 8002e64:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4a5f      	ldr	r2, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x376>
 8002e7e:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4a59      	ldr	r2, [pc, #356]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f913 	bl	80010c8 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe f90f 	bl	80010c8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0d8      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x386>
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe f8fd 	bl	80010c8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe f8f9 	bl	80010c8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0c2      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80ae 	beq.w	800306c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d06d      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d14b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4a32      	ldr	r2, [pc, #200]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe f8ca 	bl	80010c8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f8c6 	bl	80010c8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e091      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f56:	4926      	ldr	r1, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	019b      	lsls	r3, r3, #6
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	071b      	lsls	r3, r3, #28
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe f898 	bl	80010c8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe f894 	bl	80010c8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e05f      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x47c>
 8002fba:	e057      	b.n	800306c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f87e 	bl	80010c8 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe f87a 	bl	80010c8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e045      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4b0>
 8002fee:	e03d      	b.n	800306c <HAL_RCC_OscConfig+0x54c>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_RCC_OscConfig+0x558>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d030      	beq.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d129      	bne.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d122      	bne.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800302e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	4293      	cmp	r3, r2
 8003032:	d119      	bne.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	3b01      	subs	r3, #1
 8003042:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d10f      	bne.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d0      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4967      	ldr	r1, [pc, #412]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 020f 	bic.w	r2, r3, #15
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	4b59      	ldr	r3, [pc, #356]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4a53      	ldr	r2, [pc, #332]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4950      	ldr	r1, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d040      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d115      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e073      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4939      	ldr	r1, [pc, #228]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 0203 	bic.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fd ffaa 	bl	80010c8 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fd ffa6 	bl	80010c8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e053      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4924      	ldr	r1, [pc, #144]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 020f 	bic.w	r2, r3, #15
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4919      	ldr	r1, [pc, #100]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fa:	4912      	ldr	r1, [pc, #72]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f821 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003212:	4601      	mov	r1, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	fa21 f303 	lsr.w	r3, r1, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1d4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd fde4 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	08018f2c 	.word	0x08018f2c
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	b08f      	sub	sp, #60	; 0x3c
 800325a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326c:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b04      	cmp	r3, #4
 8003276:	d007      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x34>
 8003278:	2b08      	cmp	r3, #8
 800327a:	d008      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x3a>
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 80b2 	bne.w	80033e6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003282:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003286:	e0b1      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800328c:	e0ae      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003298:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d04e      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a4:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	f04f 0400 	mov.w	r4, #0
 80032ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	ea01 0103 	and.w	r1, r1, r3
 80032ba:	ea02 0204 	and.w	r2, r2, r4
 80032be:	460b      	mov	r3, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	0160      	lsls	r0, r4, #5
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24
 80032c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24
 80032ce:	015b      	lsls	r3, r3, #5
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032d6:	1a5b      	subs	r3, r3, r1
 80032d8:	eb64 0402 	sbc.w	r4, r4, r2
 80032dc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80032e0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80032e4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80032e8:	ebb8 0803 	subs.w	r8, r8, r3
 80032ec:	eb69 0904 	sbc.w	r9, r9, r4
 80032f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003308:	eb18 0801 	adds.w	r8, r8, r1
 800330c:	eb49 0902 	adc.w	r9, r9, r2
 8003310:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003328:	4640      	mov	r0, r8
 800332a:	4649      	mov	r1, r9
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	461a      	mov	r2, r3
 8003334:	4623      	mov	r3, r4
 8003336:	f7fc ffeb 	bl	8000310 <__aeabi_uldivmod>
 800333a:	4603      	mov	r3, r0
 800333c:	460c      	mov	r4, r1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	e043      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	ea01 0103 	and.w	r1, r1, r3
 8003358:	ea02 0204 	and.w	r2, r2, r4
 800335c:	460b      	mov	r3, r1
 800335e:	4614      	mov	r4, r2
 8003360:	0160      	lsls	r0, r4, #5
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003374:	1a5b      	subs	r3, r3, r1
 8003376:	eb64 0402 	sbc.w	r4, r4, r2
 800337a:	01a6      	lsls	r6, r4, #6
 800337c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003380:	019d      	lsls	r5, r3, #6
 8003382:	1aed      	subs	r5, r5, r3
 8003384:	eb66 0604 	sbc.w	r6, r6, r4
 8003388:	00f3      	lsls	r3, r6, #3
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	00eb      	lsls	r3, r5, #3
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	e897 0060 	ldmia.w	r7, {r5, r6}
 800339c:	186d      	adds	r5, r5, r1
 800339e:	eb46 0602 	adc.w	r6, r6, r2
 80033a2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80033a6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80033aa:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80033ae:	4655      	mov	r5, sl
 80033b0:	465e      	mov	r6, fp
 80033b2:	4628      	mov	r0, r5
 80033b4:	4631      	mov	r1, r6
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	f04f 0400 	mov.w	r4, #0
 80033bc:	461a      	mov	r2, r3
 80033be:	4623      	mov	r3, r4
 80033c0:	f7fc ffa6 	bl	8000310 <__aeabi_uldivmod>
 80033c4:	4603      	mov	r3, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	3301      	adds	r3, #1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 80033da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	373c      	adds	r7, #60	; 0x3c
 80033f2:	46bd      	mov	sp, r7
 80033f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4601      	mov	r1, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08018f3c 	.word	0x08018f3c

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4601      	mov	r1, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4a03      	ldr	r2, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	08018f3c 	.word	0x08018f3c

0800346c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	220f      	movs	r2, #15
 800347a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_GetClockConfig+0x5c>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	08db      	lsrs	r3, r3, #3
 80034a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCC_GetClockConfig+0x60>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40023c00 	.word	0x40023c00

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f8:	4a69      	ldr	r2, [pc, #420]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4b69      	ldr	r3, [pc, #420]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003502:	6093      	str	r3, [r2, #8]
 8003504:	4966      	ldr	r1, [pc, #408]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352a:	495d      	ldr	r1, [pc, #372]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d017      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003566:	494e      	ldr	r1, [pc, #312]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 808b 	beq.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4a3a      	ldr	r2, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6413      	str	r3, [r2, #64]	; 0x40
 80035c0:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035cc:	4a35      	ldr	r2, [pc, #212]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fd fd76 	bl	80010c8 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fd fd72 	bl	80010c8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e38d      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d035      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d02e      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003632:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d114      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fd3a 	bl	80010c8 <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd fd36 	bl	80010c8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e34f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003686:	d111      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003698:	400b      	ands	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	6083      	str	r3, [r0, #8]
 800369e:	e00b      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	0ffffcff 	.word	0x0ffffcff
 80036ac:	4ab2      	ldr	r2, [pc, #712]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036ae:	4bb2      	ldr	r3, [pc, #712]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	49af      	ldr	r1, [pc, #700]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036ba:	4baf      	ldr	r3, [pc, #700]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c6:	4313      	orrs	r3, r2
 80036c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036d6:	4aa8      	ldr	r2, [pc, #672]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036d8:	4ba7      	ldr	r3, [pc, #668]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036e6:	49a4      	ldr	r1, [pc, #656]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036e8:	4ba3      	ldr	r3, [pc, #652]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80036ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003704:	499c      	ldr	r1, [pc, #624]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003706:	4b9c      	ldr	r3, [pc, #624]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003726:	4994      	ldr	r1, [pc, #592]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003728:	4b93      	ldr	r3, [pc, #588]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003748:	498b      	ldr	r1, [pc, #556]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376a:	4983      	ldr	r1, [pc, #524]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800376c:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800378c:	497a      	ldr	r1, [pc, #488]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f023 0203 	bic.w	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ae:	4972      	ldr	r1, [pc, #456]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037b0:	4b71      	ldr	r3, [pc, #452]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f023 020c 	bic.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d0:	4969      	ldr	r1, [pc, #420]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037d2:	4b69      	ldr	r3, [pc, #420]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f2:	4961      	ldr	r1, [pc, #388]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037f4:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003814:	4958      	ldr	r1, [pc, #352]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003836:	4950      	ldr	r1, [pc, #320]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003838:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003858:	4947      	ldr	r1, [pc, #284]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800387a:	493f      	ldr	r1, [pc, #252]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800389c:	4936      	ldr	r1, [pc, #216]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d011      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038be:	492e      	ldr	r1, [pc, #184]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fe:	491e      	ldr	r1, [pc, #120]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003920:	4915      	ldr	r1, [pc, #84]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003970:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	e001      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003978:	40023800 	.word	0x40023800
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003992:	4981      	ldr	r1, [pc, #516]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003994:	4b80      	ldr	r3, [pc, #512]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d006      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80d6 	beq.w	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039be:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039c0:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ca:	f7fd fb7d 	bl	80010c8 <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d2:	f7fd fb79 	bl	80010c8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e194      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e4:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f0      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d021      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a04:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a12:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a18:	0e1b      	lsrs	r3, r3, #24
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a20:	495d      	ldr	r1, [pc, #372]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	019a      	lsls	r2, r3, #6
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	071b      	lsls	r3, r3, #28
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6a:	d129      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a80:	0f1b      	lsrs	r3, r3, #28
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a88:	4943      	ldr	r1, [pc, #268]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	019a      	lsls	r2, r3, #6
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	071b      	lsls	r3, r3, #28
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aa8:	493b      	ldr	r1, [pc, #236]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab0:	f023 021f 	bic.w	r2, r3, #31
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad2:	0e1b      	lsrs	r3, r3, #24
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ada:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae0:	0f1b      	lsrs	r3, r3, #28
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ae8:	492b      	ldr	r1, [pc, #172]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	019a      	lsls	r2, r3, #6
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	071b      	lsls	r3, r3, #28
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b14:	4920      	ldr	r1, [pc, #128]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	019a      	lsls	r2, r3, #6
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd fac0 	bl	80010c8 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b4c:	f7fd fabc 	bl	80010c8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0d7      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 80cd 	bne.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7e:	f7fd faa3 	bl	80010c8 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b86:	f7fd fa9f 	bl	80010c8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d903      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0ba      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003b98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba8:	d0ed      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d12a      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bd2:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be0:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	0f1b      	lsrs	r3, r3, #28
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bee:	494a      	ldr	r1, [pc, #296]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	019a      	lsls	r2, r3, #6
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c0e:	4942      	ldr	r1, [pc, #264]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3c:	d11d      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	0e1b      	lsrs	r3, r3, #24
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	0f1b      	lsrs	r3, r3, #28
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c5a:	492f      	ldr	r1, [pc, #188]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	019a      	lsls	r2, r3, #6
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	071b      	lsls	r3, r3, #28
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ca2:	491d      	ldr	r1, [pc, #116]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019a      	lsls	r2, r3, #6
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	071b      	lsls	r3, r3, #28
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cc2:	4915      	ldr	r1, [pc, #84]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cd8:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd f9f0 	bl	80010c8 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cec:	f7fd f9ec 	bl	80010c8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e007      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0a:	d1ef      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e049      	b.n	8003dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc ffd6 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fab0 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e054      	b.n	8003e8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d022      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0e:	d01d      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_TIM_Base_Start_IT+0xe0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x80>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d115      	bne.n	8003e78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xec>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d015      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0xbe>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d011      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	e008      	b.n	8003e8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e000      	b.n	8003e8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40001800 	.word	0x40001800
 8003eb8:	00010007 	.word	0x00010007

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0202 	mvn.w	r2, #2
 8003ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c0 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9b2 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9c3 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d122      	bne.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d11b      	bne.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f996 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f988 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f999 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0208 	mvn.w	r2, #8
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f96c 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f95e 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f96f 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f942 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f934 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f945 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0201 	mvn.w	r2, #1
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fe1c 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	d10e      	bne.n	800406c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d107      	bne.n	800406c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fafc 	bl	8004664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d10e      	bne.n	800409a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d107      	bne.n	800409a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 faef 	bl	8004678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d10e      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8f3 	bl	80042ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d10e      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d107      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f06f 0220 	mvn.w	r2, #32
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 faaf 	bl	8004650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIM_ConfigClockSource+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e0a6      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x166>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_TIM_ConfigClockSource+0x170>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d067      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x120>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d80b      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x6c>
 8004150:	2b10      	cmp	r3, #16
 8004152:	d073      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x140>
 8004154:	2b10      	cmp	r3, #16
 8004156:	d802      	bhi.n	800415e <HAL_TIM_ConfigClockSource+0x62>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d06f      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800415c:	e078      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800415e:	2b20      	cmp	r3, #32
 8004160:	d06c      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x140>
 8004162:	2b30      	cmp	r3, #48	; 0x30
 8004164:	d06a      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004166:	e073      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d00d      	beq.n	8004188 <HAL_TIM_ConfigClockSource+0x8c>
 800416c:	2b70      	cmp	r3, #112	; 0x70
 800416e:	d804      	bhi.n	800417a <HAL_TIM_ConfigClockSource+0x7e>
 8004170:	2b50      	cmp	r3, #80	; 0x50
 8004172:	d033      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0xe0>
 8004174:	2b60      	cmp	r3, #96	; 0x60
 8004176:	d041      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004178:	e06a      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d066      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x152>
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004184:	d017      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004186:	e063      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6899      	ldr	r1, [r3, #8]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f000 f9ac 	bl	80044f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]
      break;
 80041b4:	e04c      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f000 f995 	bl	80044f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d8:	609a      	str	r2, [r3, #8]
      break;
 80041da:	e039      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f000 f909 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2150      	movs	r1, #80	; 0x50
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f962 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 80041fa:	e029      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	461a      	mov	r2, r3
 800420a:	f000 f928 	bl	800445e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2160      	movs	r1, #96	; 0x60
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f952 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 800421a:	e019      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	461a      	mov	r2, r3
 800422a:	f000 f8e9 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f942 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 800423a:	e009      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 f939 	bl	80044be <TIM_ITRx_SetConfig>
        break;
 800424c:	e000      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800424e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	fffeff88 	.word	0xfffeff88

08004270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3d      	ldr	r2, [pc, #244]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d027      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <TIM_Base_SetConfig+0x118>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d023      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <TIM_Base_SetConfig+0x11c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <TIM_Base_SetConfig+0x120>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d017      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <TIM_Base_SetConfig+0x128>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <TIM_Base_SetConfig+0x12c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <TIM_Base_SetConfig+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <TIM_Base_SetConfig+0x134>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <TIM_Base_SetConfig+0x138>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <TIM_Base_SetConfig+0x13c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <TIM_Base_SetConfig+0x114>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <TIM_Base_SetConfig+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	615a      	str	r2, [r3, #20]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800
 80043f4:	40001800 	.word	0x40001800
 80043f8:	40001c00 	.word	0x40001c00
 80043fc:	40002000 	.word	0x40002000

08004400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 030a 	bic.w	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e06d      	b.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d108      	bne.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004586:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d022      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d01d      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d018      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00e      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a16      	ldr	r2, [pc, #88]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10c      	bne.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004602:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e040      	b.n	8004720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc fb60 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f8be 	bl	800484c <UART_SetConfig>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e022      	b.n	8004720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fb12 	bl	8004d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	6852      	ldr	r2, [r2, #4]
 80046f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb99 	bl	8004e50 <UART_CheckIdleState>
 800471e:	4603      	mov	r3, r0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473c:	2b20      	cmp	r3, #32
 800473e:	d17f      	bne.n	8004840 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Transmit+0x24>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e078      	b.n	8004842 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UART_Transmit+0x36>
 800475a:	2302      	movs	r3, #2
 800475c:	e071      	b.n	8004842 <HAL_UART_Transmit+0x11a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004774:	f7fc fca8 	bl	80010c8 <HAL_GetTick>
 8004778:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d108      	bne.n	80047a6 <HAL_UART_Transmit+0x7e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e003      	b.n	80047ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047b6:	e02b      	b.n	8004810 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	2180      	movs	r1, #128	; 0x80
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fb8d 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e037      	b.n	8004842 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	8812      	ldrh	r2, [r2, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e007      	b.n	80047fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1cd      	bne.n	80047b8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb5b 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e005      	b.n	8004842 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	4bb3      	ldr	r3, [pc, #716]	; (8004b48 <UART_SetConfig+0x2fc>)
 800487c:	400b      	ands	r3, r1
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	430b      	orrs	r3, r1
 8004882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4aa2      	ldr	r2, [pc, #648]	; (8004b4c <UART_SetConfig+0x300>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d121      	bne.n	800490c <UART_SetConfig+0xc0>
 80048c8:	4ba1      	ldr	r3, [pc, #644]	; (8004b50 <UART_SetConfig+0x304>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d816      	bhi.n	8004904 <UART_SetConfig+0xb8>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x90>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048f9 	.word	0x080048f9
 80048e4:	080048f3 	.word	0x080048f3
 80048e8:	080048ff 	.word	0x080048ff
 80048ec:	2301      	movs	r3, #1
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e150      	b.n	8004b94 <UART_SetConfig+0x348>
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e14d      	b.n	8004b94 <UART_SetConfig+0x348>
 80048f8:	2304      	movs	r3, #4
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e14a      	b.n	8004b94 <UART_SetConfig+0x348>
 80048fe:	2308      	movs	r3, #8
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e147      	b.n	8004b94 <UART_SetConfig+0x348>
 8004904:	2310      	movs	r3, #16
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	bf00      	nop
 800490a:	e143      	b.n	8004b94 <UART_SetConfig+0x348>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a90      	ldr	r2, [pc, #576]	; (8004b54 <UART_SetConfig+0x308>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d134      	bne.n	8004980 <UART_SetConfig+0x134>
 8004916:	4b8e      	ldr	r3, [pc, #568]	; (8004b50 <UART_SetConfig+0x304>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d829      	bhi.n	8004978 <UART_SetConfig+0x12c>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0xe0>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004979 	.word	0x08004979
 8004934:	08004979 	.word	0x08004979
 8004938:	08004979 	.word	0x08004979
 800493c:	0800496d 	.word	0x0800496d
 8004940:	08004979 	.word	0x08004979
 8004944:	08004979 	.word	0x08004979
 8004948:	08004979 	.word	0x08004979
 800494c:	08004967 	.word	0x08004967
 8004950:	08004979 	.word	0x08004979
 8004954:	08004979 	.word	0x08004979
 8004958:	08004979 	.word	0x08004979
 800495c:	08004973 	.word	0x08004973
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e116      	b.n	8004b94 <UART_SetConfig+0x348>
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e113      	b.n	8004b94 <UART_SetConfig+0x348>
 800496c:	2304      	movs	r3, #4
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e110      	b.n	8004b94 <UART_SetConfig+0x348>
 8004972:	2308      	movs	r3, #8
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e10d      	b.n	8004b94 <UART_SetConfig+0x348>
 8004978:	2310      	movs	r3, #16
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	bf00      	nop
 800497e:	e109      	b.n	8004b94 <UART_SetConfig+0x348>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a74      	ldr	r2, [pc, #464]	; (8004b58 <UART_SetConfig+0x30c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d120      	bne.n	80049cc <UART_SetConfig+0x180>
 800498a:	4b71      	ldr	r3, [pc, #452]	; (8004b50 <UART_SetConfig+0x304>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004994:	2b10      	cmp	r3, #16
 8004996:	d00f      	beq.n	80049b8 <UART_SetConfig+0x16c>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d802      	bhi.n	80049a2 <UART_SetConfig+0x156>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0x160>
 80049a0:	e010      	b.n	80049c4 <UART_SetConfig+0x178>
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d005      	beq.n	80049b2 <UART_SetConfig+0x166>
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d009      	beq.n	80049be <UART_SetConfig+0x172>
 80049aa:	e00b      	b.n	80049c4 <UART_SetConfig+0x178>
 80049ac:	2300      	movs	r3, #0
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e0f0      	b.n	8004b94 <UART_SetConfig+0x348>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e0ed      	b.n	8004b94 <UART_SetConfig+0x348>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e0ea      	b.n	8004b94 <UART_SetConfig+0x348>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e0e7      	b.n	8004b94 <UART_SetConfig+0x348>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	bf00      	nop
 80049ca:	e0e3      	b.n	8004b94 <UART_SetConfig+0x348>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a62      	ldr	r2, [pc, #392]	; (8004b5c <UART_SetConfig+0x310>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d120      	bne.n	8004a18 <UART_SetConfig+0x1cc>
 80049d6:	4b5e      	ldr	r3, [pc, #376]	; (8004b50 <UART_SetConfig+0x304>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d00f      	beq.n	8004a04 <UART_SetConfig+0x1b8>
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d802      	bhi.n	80049ee <UART_SetConfig+0x1a2>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <UART_SetConfig+0x1ac>
 80049ec:	e010      	b.n	8004a10 <UART_SetConfig+0x1c4>
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d005      	beq.n	80049fe <UART_SetConfig+0x1b2>
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d009      	beq.n	8004a0a <UART_SetConfig+0x1be>
 80049f6:	e00b      	b.n	8004a10 <UART_SetConfig+0x1c4>
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e0ca      	b.n	8004b94 <UART_SetConfig+0x348>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e0c7      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0c4      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0c1      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	bf00      	nop
 8004a16:	e0bd      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a50      	ldr	r2, [pc, #320]	; (8004b60 <UART_SetConfig+0x314>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d124      	bne.n	8004a6c <UART_SetConfig+0x220>
 8004a22:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <UART_SetConfig+0x304>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d012      	beq.n	8004a58 <UART_SetConfig+0x20c>
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a36:	d802      	bhi.n	8004a3e <UART_SetConfig+0x1f2>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <UART_SetConfig+0x200>
 8004a3c:	e012      	b.n	8004a64 <UART_SetConfig+0x218>
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d006      	beq.n	8004a52 <UART_SetConfig+0x206>
 8004a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a48:	d009      	beq.n	8004a5e <UART_SetConfig+0x212>
 8004a4a:	e00b      	b.n	8004a64 <UART_SetConfig+0x218>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e0a0      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e09d      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e09a      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e097      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	bf00      	nop
 8004a6a:	e093      	b.n	8004b94 <UART_SetConfig+0x348>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <UART_SetConfig+0x318>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d124      	bne.n	8004ac0 <UART_SetConfig+0x274>
 8004a76:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <UART_SetConfig+0x304>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d012      	beq.n	8004aac <UART_SetConfig+0x260>
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d802      	bhi.n	8004a92 <UART_SetConfig+0x246>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <UART_SetConfig+0x254>
 8004a90:	e012      	b.n	8004ab8 <UART_SetConfig+0x26c>
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d006      	beq.n	8004aa6 <UART_SetConfig+0x25a>
 8004a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a9c:	d009      	beq.n	8004ab2 <UART_SetConfig+0x266>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x26c>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e076      	b.n	8004b94 <UART_SetConfig+0x348>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e073      	b.n	8004b94 <UART_SetConfig+0x348>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e070      	b.n	8004b94 <UART_SetConfig+0x348>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e06d      	b.n	8004b94 <UART_SetConfig+0x348>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	bf00      	nop
 8004abe:	e069      	b.n	8004b94 <UART_SetConfig+0x348>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a28      	ldr	r2, [pc, #160]	; (8004b68 <UART_SetConfig+0x31c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d124      	bne.n	8004b14 <UART_SetConfig+0x2c8>
 8004aca:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <UART_SetConfig+0x304>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d012      	beq.n	8004b00 <UART_SetConfig+0x2b4>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d802      	bhi.n	8004ae6 <UART_SetConfig+0x29a>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <UART_SetConfig+0x2a8>
 8004ae4:	e012      	b.n	8004b0c <UART_SetConfig+0x2c0>
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d006      	beq.n	8004afa <UART_SetConfig+0x2ae>
 8004aec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004af0:	d009      	beq.n	8004b06 <UART_SetConfig+0x2ba>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x2c0>
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e04c      	b.n	8004b94 <UART_SetConfig+0x348>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e049      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e046      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e043      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	bf00      	nop
 8004b12:	e03f      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <UART_SetConfig+0x320>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d138      	bne.n	8004b90 <UART_SetConfig+0x344>
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <UART_SetConfig+0x304>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2c:	d026      	beq.n	8004b7c <UART_SetConfig+0x330>
 8004b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b32:	d802      	bhi.n	8004b3a <UART_SetConfig+0x2ee>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <UART_SetConfig+0x324>
 8004b38:	e026      	b.n	8004b88 <UART_SetConfig+0x33c>
 8004b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3e:	d01a      	beq.n	8004b76 <UART_SetConfig+0x32a>
 8004b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b44:	d01d      	beq.n	8004b82 <UART_SetConfig+0x336>
 8004b46:	e01f      	b.n	8004b88 <UART_SetConfig+0x33c>
 8004b48:	efff69f3 	.word	0xefff69f3
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	40007800 	.word	0x40007800
 8004b6c:	40007c00 	.word	0x40007c00
 8004b70:	2300      	movs	r3, #0
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e00e      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b76:	2302      	movs	r3, #2
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e00b      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e008      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b82:	2308      	movs	r3, #8
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e005      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	bf00      	nop
 8004b8e:	e001      	b.n	8004b94 <UART_SetConfig+0x348>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9c:	d15c      	bne.n	8004c58 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d828      	bhi.n	8004bf6 <UART_SetConfig+0x3aa>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <UART_SetConfig+0x360>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004bf7 	.word	0x08004bf7
 8004bbc:	08004be7 	.word	0x08004be7
 8004bc0:	08004bf7 	.word	0x08004bf7
 8004bc4:	08004bf7 	.word	0x08004bf7
 8004bc8:	08004bf7 	.word	0x08004bf7
 8004bcc:	08004bef 	.word	0x08004bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fe fc24 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004bd4:	61b8      	str	r0, [r7, #24]
        break;
 8004bd6:	e013      	b.n	8004c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd8:	f7fe fc34 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e00f      	b.n	8004c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be0:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <UART_SetConfig+0x4bc>)
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e00c      	b.n	8004c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be6:	f7fe fb35 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8004bea:	61b8      	str	r0, [r7, #24]
        break;
 8004bec:	e008      	b.n	8004c00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e004      	b.n	8004c00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d074      	beq.n	8004cf0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	005a      	lsls	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	441a      	add	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d916      	bls.n	8004c52 <UART_SetConfig+0x406>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d212      	bcs.n	8004c52 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	89fb      	ldrh	r3, [r7, #14]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	89fa      	ldrh	r2, [r7, #14]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e04e      	b.n	8004cf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77bb      	strb	r3, [r7, #30]
 8004c56:	e04b      	b.n	8004cf0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d827      	bhi.n	8004cae <UART_SetConfig+0x462>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x418>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004caf 	.word	0x08004caf
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004caf 	.word	0x08004caf
 8004c7c:	08004caf 	.word	0x08004caf
 8004c80:	08004caf 	.word	0x08004caf
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fe fbc8 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004c8c:	61b8      	str	r0, [r7, #24]
        break;
 8004c8e:	e013      	b.n	8004cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fe fbd8 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004c94:	61b8      	str	r0, [r7, #24]
        break;
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <UART_SetConfig+0x4bc>)
 8004c9a:	61bb      	str	r3, [r7, #24]
        break;
 8004c9c:	e00c      	b.n	8004cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fe fad9 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8004ca2:	61b8      	str	r0, [r7, #24]
        break;
 8004ca4:	e008      	b.n	8004cb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004caa:	61bb      	str	r3, [r7, #24]
        break;
 8004cac:	e004      	b.n	8004cb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8004cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085a      	lsrs	r2, r3, #1
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	441a      	add	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d908      	bls.n	8004cec <UART_SetConfig+0x4a0>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce0:	d204      	bcs.n	8004cec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e001      	b.n	8004cf0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	00f42400 	.word	0x00f42400

08004d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	6852      	ldr	r2, [r2, #4]
 8004d2a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	6852      	ldr	r2, [r2, #4]
 8004d4c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	6852      	ldr	r2, [r2, #4]
 8004d6e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6852      	ldr	r2, [r2, #4]
 8004d90:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	6892      	ldr	r2, [r2, #8]
 8004db2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	6852      	ldr	r2, [r2, #4]
 8004df6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d10a      	bne.n	8004e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e60:	f7fc f932 	bl	80010c8 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d10e      	bne.n	8004e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f82d 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e023      	b.n	8004eda <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d10e      	bne.n	8004ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f817 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00d      	b.n	8004eda <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	e05e      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d05a      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fc f8e4 	bl	80010c8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d802      	bhi.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d11b      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e043      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02c      	beq.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f66:	d124      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e00f      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	401a      	ands	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d091      	beq.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 8004fe2:	4b53      	ldr	r3, [pc, #332]	; (8005130 <MX_LWIP_Init+0x154>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004fe8:	4b51      	ldr	r3, [pc, #324]	; (8005130 <MX_LWIP_Init+0x154>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004fee:	4b50      	ldr	r3, [pc, #320]	; (8005130 <MX_LWIP_Init+0x154>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 8004ff4:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <MX_LWIP_Init+0x154>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8004ffa:	4b4e      	ldr	r3, [pc, #312]	; (8005134 <MX_LWIP_Init+0x158>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <MX_LWIP_Init+0x158>)
 8005002:	2200      	movs	r2, #0
 8005004:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8005006:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <MX_LWIP_Init+0x158>)
 8005008:	2200      	movs	r2, #0
 800500a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800500c:	4b49      	ldr	r3, [pc, #292]	; (8005134 <MX_LWIP_Init+0x158>)
 800500e:	2200      	movs	r2, #0
 8005010:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005012:	4b49      	ldr	r3, [pc, #292]	; (8005138 <MX_LWIP_Init+0x15c>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005018:	4b47      	ldr	r3, [pc, #284]	; (8005138 <MX_LWIP_Init+0x15c>)
 800501a:	2200      	movs	r2, #0
 800501c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800501e:	4b46      	ldr	r3, [pc, #280]	; (8005138 <MX_LWIP_Init+0x15c>)
 8005020:	2200      	movs	r2, #0
 8005022:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005024:	4b44      	ldr	r3, [pc, #272]	; (8005138 <MX_LWIP_Init+0x15c>)
 8005026:	2200      	movs	r2, #0
 8005028:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800502a:	2100      	movs	r1, #0
 800502c:	2000      	movs	r0, #0
 800502e:	f003 fd3d 	bl	8008aac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */

  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8005032:	4b42      	ldr	r3, [pc, #264]	; (800513c <MX_LWIP_Init+0x160>)
 8005034:	4a42      	ldr	r2, [pc, #264]	; (8005140 <MX_LWIP_Init+0x164>)
 8005036:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8005038:	4b42      	ldr	r3, [pc, #264]	; (8005144 <MX_LWIP_Init+0x168>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 800503e:	4b42      	ldr	r3, [pc, #264]	; (8005148 <MX_LWIP_Init+0x16c>)
 8005040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005044:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 8005046:	4b41      	ldr	r3, [pc, #260]	; (800514c <MX_LWIP_Init+0x170>)
 8005048:	4a41      	ldr	r2, [pc, #260]	; (8005150 <MX_LWIP_Init+0x174>)
 800504a:	601a      	str	r2, [r3, #0]
  dns_setserver (0, &dnsserver);
 800504c:	493f      	ldr	r1, [pc, #252]	; (800514c <MX_LWIP_Init+0x170>)
 800504e:	2000      	movs	r0, #0
 8005050:	f004 fbfc 	bl	800984c <dns_setserver>

  printf("MyIP %d.%d.%d.%d\n\r",(ipaddr.addr & 0xff), ((ipaddr.addr >> 8) & 0xff), ((ipaddr.addr >> 16) & 0xff), (ipaddr.addr >> 24));
 8005054:	4b39      	ldr	r3, [pc, #228]	; (800513c <MX_LWIP_Init+0x160>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	b2d9      	uxtb	r1, r3
 800505a:	4b38      	ldr	r3, [pc, #224]	; (800513c <MX_LWIP_Init+0x160>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <MX_LWIP_Init+0x160>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	b2d8      	uxtb	r0, r3
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <MX_LWIP_Init+0x160>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4603      	mov	r3, r0
 8005074:	4837      	ldr	r0, [pc, #220]	; (8005154 <MX_LWIP_Init+0x178>)
 8005076:	f010 f8cb 	bl	8015210 <iprintf>
  printf("dnsserverIP %d.%d.%d.%d\n\r",(dnsserver.addr & 0xff), ((dnsserver.addr >> 8) & 0xff), ((dnsserver.addr >> 16) & 0xff), (dnsserver.addr >> 24));
 800507a:	4b34      	ldr	r3, [pc, #208]	; (800514c <MX_LWIP_Init+0x170>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	b2d9      	uxtb	r1, r3
 8005080:	4b32      	ldr	r3, [pc, #200]	; (800514c <MX_LWIP_Init+0x170>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	b2da      	uxtb	r2, r3
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <MX_LWIP_Init+0x170>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	b2d8      	uxtb	r0, r3
 8005090:	4b2e      	ldr	r3, [pc, #184]	; (800514c <MX_LWIP_Init+0x170>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0e1b      	lsrs	r3, r3, #24
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4603      	mov	r3, r0
 800509a:	482f      	ldr	r0, [pc, #188]	; (8005158 <MX_LWIP_Init+0x17c>)
 800509c:	f010 f8b8 	bl	8015210 <iprintf>

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80050a0:	4b2e      	ldr	r3, [pc, #184]	; (800515c <MX_LWIP_Init+0x180>)
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <MX_LWIP_Init+0x184>)
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	2300      	movs	r3, #0
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <MX_LWIP_Init+0x168>)
 80050ae:	4a26      	ldr	r2, [pc, #152]	; (8005148 <MX_LWIP_Init+0x16c>)
 80050b0:	4922      	ldr	r1, [pc, #136]	; (800513c <MX_LWIP_Init+0x160>)
 80050b2:	482c      	ldr	r0, [pc, #176]	; (8005164 <MX_LWIP_Init+0x188>)
 80050b4:	f007 fd98 	bl	800cbe8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80050b8:	482a      	ldr	r0, [pc, #168]	; (8005164 <MX_LWIP_Init+0x188>)
 80050ba:	f007 ff47 	bl	800cf4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80050be:	4b29      	ldr	r3, [pc, #164]	; (8005164 <MX_LWIP_Init+0x188>)
 80050c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <MX_LWIP_Init+0xf8>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80050cc:	4825      	ldr	r0, [pc, #148]	; (8005164 <MX_LWIP_Init+0x188>)
 80050ce:	f007 ff4d 	bl	800cf6c <netif_set_up>
 80050d2:	e002      	b.n	80050da <MX_LWIP_Init+0xfe>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80050d4:	4823      	ldr	r0, [pc, #140]	; (8005164 <MX_LWIP_Init+0x188>)
 80050d6:	f007 ffb5 	bl	800d044 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80050da:	4923      	ldr	r1, [pc, #140]	; (8005168 <MX_LWIP_Init+0x18c>)
 80050dc:	4821      	ldr	r0, [pc, #132]	; (8005164 <MX_LWIP_Init+0x188>)
 80050de:	f008 f847 	bl	800d170 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80050ea:	f107 0320 	add.w	r3, r7, #32
 80050ee:	2101      	movs	r1, #1
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fd9b 	bl	8005c2c <osSemaphoreCreate>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b1c      	ldr	r3, [pc, #112]	; (800516c <MX_LWIP_Init+0x190>)
 80050fa:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80050fc:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <MX_LWIP_Init+0x194>)
 80050fe:	4a19      	ldr	r2, [pc, #100]	; (8005164 <MX_LWIP_Init+0x188>)
 8005100:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <MX_LWIP_Init+0x190>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <MX_LWIP_Init+0x194>)
 8005108:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <MX_LWIP_Init+0x198>)
 800510c:	1d3c      	adds	r4, r7, #4
 800510e:	461d      	mov	r5, r3
 8005110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	4914      	ldr	r1, [pc, #80]	; (8005170 <MX_LWIP_Init+0x194>)
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fc86 	bl	8005a32 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005126:	bf00      	nop
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bdb0      	pop	{r4, r5, r7, pc}
 800512e:	bf00      	nop
 8005130:	20007464 	.word	0x20007464
 8005134:	20007460 	.word	0x20007460
 8005138:	20007424 	.word	0x20007424
 800513c:	2000745c 	.word	0x2000745c
 8005140:	cdd7fea9 	.word	0xcdd7fea9
 8005144:	20007470 	.word	0x20007470
 8005148:	2000746c 	.word	0x2000746c
 800514c:	20007468 	.word	0x20007468
 8005150:	c66ef03e 	.word	0xc66ef03e
 8005154:	08016104 	.word	0x08016104
 8005158:	08016118 	.word	0x08016118
 800515c:	080089e9 	.word	0x080089e9
 8005160:	080057cd 	.word	0x080057cd
 8005164:	20007428 	.word	0x20007428
 8005168:	080058ad 	.word	0x080058ad
 800516c:	200002f4 	.word	0x200002f4
 8005170:	2000741c 	.word	0x2000741c
 8005174:	0801613c 	.word	0x0801613c

08005178 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a52      	ldr	r2, [pc, #328]	; (80052e0 <HAL_ETH_MspInit+0x168>)
 8005196:	4293      	cmp	r3, r2
 8005198:	f040 809e 	bne.w	80052d8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800519c:	4a51      	ldr	r2, [pc, #324]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051a6:	6313      	str	r3, [r2, #48]	; 0x30
 80051a8:	4b4e      	ldr	r3, [pc, #312]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051b6:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051be:	6313      	str	r3, [r2, #48]	; 0x30
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4a45      	ldr	r2, [pc, #276]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051ce:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051d6:	6313      	str	r3, [r2, #48]	; 0x30
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e4:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051e6:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f043 0304 	orr.w	r3, r3, #4
 80051ee:	6313      	str	r3, [r2, #48]	; 0x30
 80051f0:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fc:	4a39      	ldr	r2, [pc, #228]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6313      	str	r3, [r2, #48]	; 0x30
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005214:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 8005216:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f043 0302 	orr.w	r3, r3, #2
 800521e:	6313      	str	r3, [r2, #48]	; 0x30
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800522c:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 800522e:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005236:	6313      	str	r3, [r2, #48]	; 0x30
 8005238:	4b2a      	ldr	r3, [pc, #168]	; (80052e4 <HAL_ETH_MspInit+0x16c>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005244:	2332      	movs	r3, #50	; 0x32
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005254:	230b      	movs	r3, #11
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525c:	4619      	mov	r1, r3
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <HAL_ETH_MspInit+0x170>)
 8005260:	f7fd fa3a 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005264:	2386      	movs	r3, #134	; 0x86
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2303      	movs	r3, #3
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005274:	230b      	movs	r3, #11
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800527c:	4619      	mov	r1, r3
 800527e:	481b      	ldr	r0, [pc, #108]	; (80052ec <HAL_ETH_MspInit+0x174>)
 8005280:	f7fd fa2a 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005292:	2303      	movs	r3, #3
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005296:	230b      	movs	r3, #11
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800529a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529e:	4619      	mov	r1, r3
 80052a0:	4813      	ldr	r0, [pc, #76]	; (80052f0 <HAL_ETH_MspInit+0x178>)
 80052a2:	f7fd fa19 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80052a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ac:	2302      	movs	r3, #2
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2303      	movs	r3, #3
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052b8:	230b      	movs	r3, #11
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80052bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c0:	4619      	mov	r1, r3
 80052c2:	480c      	ldr	r0, [pc, #48]	; (80052f4 <HAL_ETH_MspInit+0x17c>)
 80052c4:	f7fd fa08 	bl	80026d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2105      	movs	r1, #5
 80052cc:	203d      	movs	r0, #61	; 0x3d
 80052ce:	f7fb ffdf 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80052d2:	203d      	movs	r0, #61	; 0x3d
 80052d4:	f7fb fff8 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80052d8:	bf00      	nop
 80052da:	3738      	adds	r7, #56	; 0x38
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40028000 	.word	0x40028000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020800 	.word	0x40020800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40020400 	.word	0x40020400
 80052f4:	40021800 	.word	0x40021800

080052f8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <HAL_ETH_RxCpltCallback+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fd13 	bl	8005d30 <osSemaphoreRelease>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200002f8 	.word	0x200002f8

08005318 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005318:	b5b0      	push	{r4, r5, r7, lr}
 800531a:	b090      	sub	sp, #64	; 0x40
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005324:	4b60      	ldr	r3, [pc, #384]	; (80054a8 <low_level_init+0x190>)
 8005326:	4a61      	ldr	r2, [pc, #388]	; (80054ac <low_level_init+0x194>)
 8005328:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <low_level_init+0x190>)
 800532c:	2201      	movs	r2, #1
 800532e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005330:	4b5d      	ldr	r3, [pc, #372]	; (80054a8 <low_level_init+0x190>)
 8005332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005336:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005338:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <low_level_init+0x190>)
 800533a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800533e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005340:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <low_level_init+0x190>)
 8005342:	2200      	movs	r2, #0
 8005344:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8005352:	23e1      	movs	r3, #225	; 0xe1
 8005354:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800536a:	4a4f      	ldr	r2, [pc, #316]	; (80054a8 <low_level_init+0x190>)
 800536c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005370:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005372:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <low_level_init+0x190>)
 8005374:	2201      	movs	r2, #1
 8005376:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005378:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <low_level_init+0x190>)
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <low_level_init+0x190>)
 8005380:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005384:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005386:	4848      	ldr	r0, [pc, #288]	; (80054a8 <low_level_init+0x190>)
 8005388:	f7fc f824 	bl	80013d4 <HAL_ETH_Init>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005392:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053a0:	f043 0304 	orr.w	r3, r3, #4
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80053ac:	2304      	movs	r3, #4
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <low_level_init+0x198>)
 80053b0:	4940      	ldr	r1, [pc, #256]	; (80054b4 <low_level_init+0x19c>)
 80053b2:	483d      	ldr	r0, [pc, #244]	; (80054a8 <low_level_init+0x190>)
 80053b4:	f7fc f9aa 	bl	800170c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80053b8:	2304      	movs	r3, #4
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <low_level_init+0x1a0>)
 80053bc:	493f      	ldr	r1, [pc, #252]	; (80054bc <low_level_init+0x1a4>)
 80053be:	483a      	ldr	r0, [pc, #232]	; (80054a8 <low_level_init+0x190>)
 80053c0:	f7fc fa0d 	bl	80017de <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2206      	movs	r2, #6
 80053c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80053cc:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <low_level_init+0x190>)
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80053d8:	4b33      	ldr	r3, [pc, #204]	; (80054a8 <low_level_init+0x190>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	785a      	ldrb	r2, [r3, #1]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <low_level_init+0x190>)
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	789a      	ldrb	r2, [r3, #2]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80053f0:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <low_level_init+0x190>)
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	78da      	ldrb	r2, [r3, #3]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80053fc:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <low_level_init+0x190>)
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	791a      	ldrb	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005408:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <low_level_init+0x190>)
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	795a      	ldrb	r2, [r3, #5]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800541a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005422:	f043 030a 	orr.w	r3, r3, #10
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800542e:	2300      	movs	r3, #0
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
 8005432:	2300      	movs	r3, #0
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fbf5 	bl	8005c2c <osSemaphoreCreate>
 8005442:	4602      	mov	r2, r0
 8005444:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <low_level_init+0x1a8>)
 8005446:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <low_level_init+0x1ac>)
 800544a:	f107 040c 	add.w	r4, r7, #12
 800544e:	461d      	mov	r5, r3
 8005450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fae5 	bl	8005a32 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005468:	480f      	ldr	r0, [pc, #60]	; (80054a8 <low_level_init+0x190>)
 800546a:	f7fc fce0 	bl	8001e2e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800546e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005472:	461a      	mov	r2, r3
 8005474:	211d      	movs	r1, #29
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <low_level_init+0x190>)
 8005478:	f7fc fc0b 	bl	8001c92 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	f043 030b 	orr.w	r3, r3, #11
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	461a      	mov	r2, r3
 8005488:	211d      	movs	r1, #29
 800548a:	4807      	ldr	r0, [pc, #28]	; (80054a8 <low_level_init+0x190>)
 800548c:	f7fc fc69 	bl	8001d62 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005494:	461a      	mov	r2, r3
 8005496:	211d      	movs	r1, #29
 8005498:	4803      	ldr	r0, [pc, #12]	; (80054a8 <low_level_init+0x190>)
 800549a:	f7fc fbfa 	bl	8001c92 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800549e:	bf00      	nop
 80054a0:	3740      	adds	r7, #64	; 0x40
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bdb0      	pop	{r4, r5, r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20007474 	.word	0x20007474
 80054ac:	40028000 	.word	0x40028000
 80054b0:	2007d8d0 	.word	0x2007d8d0
 80054b4:	2007c080 	.word	0x2007c080
 80054b8:	2007c100 	.word	0x2007c100
 80054bc:	2007c000 	.word	0x2007c000
 80054c0:	200002f8 	.word	0x200002f8
 80054c4:	08016160 	.word	0x08016160

080054c8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80054d2:	4b4b      	ldr	r3, [pc, #300]	; (8005600 <low_level_output+0x138>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80054ea:	4b45      	ldr	r3, [pc, #276]	; (8005600 <low_level_output+0x138>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	e05a      	b.n	80055b0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da03      	bge.n	800550a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005502:	23f8      	movs	r3, #248	; 0xf8
 8005504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005508:	e05c      	b.n	80055c4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	895b      	ldrh	r3, [r3, #10]
 800550e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005514:	e02f      	b.n	8005576 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	18d0      	adds	r0, r2, r3
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	18d1      	adds	r1, r2, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	461a      	mov	r2, r3
 800552e:	f00f fe5c 	bl	80151ea <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da03      	bge.n	8005548 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005540:	23f8      	movs	r3, #248	; 0xf8
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005546:	e03d      	b.n	80055c4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005558:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005564:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005570:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005580:	4293      	cmp	r3, r2
 8005582:	d8c8      	bhi.n	8005516 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	18d0      	adds	r0, r2, r3
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4619      	mov	r1, r3
 8005596:	f00f fe28 	bl	80151ea <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1a1      	bne.n	80054fa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	4811      	ldr	r0, [pc, #68]	; (8005600 <low_level_output+0x138>)
 80055ba:	f7fc f97d 	bl	80018b8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <low_level_output+0x138>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	f241 0314 	movw	r3, #4116	; 0x1014
 80055cc:	4413      	add	r3, r2
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00d      	beq.n	80055f4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <low_level_output+0x138>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80055e0:	4413      	add	r3, r2
 80055e2:	2220      	movs	r2, #32
 80055e4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <low_level_output+0x138>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80055ee:	4413      	add	r3, r2
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80055f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3728      	adds	r7, #40	; 0x28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20007474 	.word	0x20007474

08005604 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	; 0x30
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800560c:	2300      	movs	r3, #0
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005628:	484f      	ldr	r0, [pc, #316]	; (8005768 <low_level_input+0x164>)
 800562a:	f7fc fa2f 	bl	8001a8c <HAL_ETH_GetReceivedFrame_IT>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <low_level_input+0x34>

    return NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	e092      	b.n	800575e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005638:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <low_level_input+0x164>)
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800563e:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <low_level_input+0x164>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005644:	89fb      	ldrh	r3, [r7, #14]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800564a:	89fb      	ldrh	r3, [r7, #14]
 800564c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005650:	4619      	mov	r1, r3
 8005652:	2000      	movs	r0, #0
 8005654:	f007 fe56 	bl	800d304 <pbuf_alloc>
 8005658:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d04b      	beq.n	80056f8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005660:	4b41      	ldr	r3, [pc, #260]	; (8005768 <low_level_input+0x164>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
 800566e:	e040      	b.n	80056f2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	895b      	ldrh	r3, [r3, #10]
 8005674:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800567a:	e021      	b.n	80056c0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	18d0      	adds	r0, r2, r3
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	18d1      	adds	r1, r2, r3
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	461a      	mov	r2, r3
 8005694:	f00f fda9 	bl	80151ea <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80056ae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80056ba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d8d6      	bhi.n	800567c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	18d0      	adds	r0, r2, r3
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4619      	mov	r1, r3
 80056e0:	f00f fd83 	bl	80151ea <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1bb      	bne.n	8005670 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <low_level_input+0x164>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	e00b      	b.n	800571c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3301      	adds	r3, #1
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	4b12      	ldr	r3, [pc, #72]	; (8005768 <low_level_input+0x164>)
 800571e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8ee      	bhi.n	8005704 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <low_level_input+0x164>)
 8005728:	2200      	movs	r2, #0
 800572a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <low_level_input+0x164>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f241 0314 	movw	r3, #4116	; 0x1014
 8005734:	4413      	add	r3, r2
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00d      	beq.n	800575c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <low_level_input+0x164>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	f241 0314 	movw	r3, #4116	; 0x1014
 8005748:	4413      	add	r3, r2
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <low_level_input+0x164>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f241 0308 	movw	r3, #4104	; 0x1008
 8005756:	4413      	add	r3, r2
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800575e:	4618      	mov	r0, r3
 8005760:	3730      	adds	r7, #48	; 0x30
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20007474 	.word	0x20007474

0800576c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <ethernetif_input+0x58>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f04f 31ff 	mov.w	r1, #4294967295
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa87 	bl	8005c94 <osSemaphoreWait>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f5      	bne.n	8005778 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800578c:	480e      	ldr	r0, [pc, #56]	; (80057c8 <ethernetif_input+0x5c>)
 800578e:	f00f fc6f 	bl	8015070 <sys_mutex_lock>
        p = low_level_input( netif );
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff ff36 	bl	8005604 <low_level_input>
 8005798:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	68b8      	ldr	r0, [r7, #8]
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f008 f889 	bl	800d8c8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80057b6:	4804      	ldr	r0, [pc, #16]	; (80057c8 <ethernetif_input+0x5c>)
 80057b8:	f00f fc69 	bl	801508e <sys_mutex_unlock>
      } while(p!=NULL);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e4      	bne.n	800578c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80057c2:	e7d9      	b.n	8005778 <ethernetif_input+0xc>
 80057c4:	200002f8 	.word	0x200002f8
 80057c8:	200074bc 	.word	0x200074bc

080057cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <ethernetif_init+0x1c>
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <ethernetif_init+0x48>)
 80057dc:	f240 222a 	movw	r2, #554	; 0x22a
 80057e0:	490d      	ldr	r1, [pc, #52]	; (8005818 <ethernetif_init+0x4c>)
 80057e2:	480e      	ldr	r0, [pc, #56]	; (800581c <ethernetif_init+0x50>)
 80057e4:	f00f fd14 	bl	8015210 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2273      	movs	r2, #115	; 0x73
 80057ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2274      	movs	r2, #116	; 0x74
 80057f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <ethernetif_init+0x54>)
 80057fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <ethernetif_init+0x58>)
 8005802:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fd87 	bl	8005318 <low_level_init>

  return ERR_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	0801617c 	.word	0x0801617c
 8005818:	08016198 	.word	0x08016198
 800581c:	080161a8 	.word	0x080161a8
 8005820:	0800a6e5 	.word	0x0800a6e5
 8005824:	080054c9 	.word	0x080054c9

08005828 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800582c:	f7fb fc4c 	bl	80010c8 <HAL_GetTick>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	461a      	mov	r2, r3
 800584e:	2101      	movs	r1, #1
 8005850:	4815      	ldr	r0, [pc, #84]	; (80058a8 <ethernetif_set_link+0x70>)
 8005852:	f7fc fa1e 	bl	8001c92 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <ethernetif_set_link+0x48>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f007 fc15 	bl	800d0a8 <netif_set_link_up>
 800587e:	e00f      	b.n	80058a0 <ethernetif_set_link+0x68>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <ethernetif_set_link+0x68>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <ethernetif_set_link+0x68>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f007 fc38 	bl	800d110 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80058a0:	20c8      	movs	r0, #200	; 0xc8
 80058a2:	f000 f912 	bl	8005aca <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80058a6:	e7cf      	b.n	8005848 <ethernetif_set_link+0x10>
 80058a8:	20007474 	.word	0x20007474

080058ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d05b      	beq.n	8005982 <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <ethernetif_update_config+0xec>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d040      	beq.n	8005954 <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80058d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d6:	2100      	movs	r1, #0
 80058d8:	482f      	ldr	r0, [pc, #188]	; (8005998 <ethernetif_update_config+0xec>)
 80058da:	f7fc fa42 	bl	8001d62 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80058de:	f7fb fbf3 	bl	80010c8 <HAL_GetTick>
 80058e2:	4603      	mov	r3, r0
 80058e4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	461a      	mov	r2, r3
 80058ec:	2101      	movs	r1, #1
 80058ee:	482a      	ldr	r0, [pc, #168]	; (8005998 <ethernetif_update_config+0xec>)
 80058f0:	f7fc f9cf 	bl	8001c92 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80058f4:	f7fb fbe8 	bl	80010c8 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005902:	d826      	bhi.n	8005952 <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0eb      	beq.n	80058e6 <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	461a      	mov	r2, r3
 8005914:	211f      	movs	r1, #31
 8005916:	4820      	ldr	r0, [pc, #128]	; (8005998 <ethernetif_update_config+0xec>)
 8005918:	f7fc f9bb 	bl	8001c92 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <ethernetif_update_config+0xec>)
 8005928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e002      	b.n	8005936 <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <ethernetif_update_config+0xec>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <ethernetif_update_config+0xec>)
 8005942:	2200      	movs	r2, #0
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	e014      	b.n	8005972 <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <ethernetif_update_config+0xec>)
 800594a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	e00f      	b.n	8005972 <ethernetif_update_config+0xc6>
          goto error;
 8005952:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <ethernetif_update_config+0xec>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	08db      	lsrs	r3, r3, #3
 800595a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <ethernetif_update_config+0xec>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005964:	4313      	orrs	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	2100      	movs	r1, #0
 800596c:	480a      	ldr	r0, [pc, #40]	; (8005998 <ethernetif_update_config+0xec>)
 800596e:	f7fc f9f8 	bl	8001d62 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005972:	2100      	movs	r1, #0
 8005974:	4808      	ldr	r0, [pc, #32]	; (8005998 <ethernetif_update_config+0xec>)
 8005976:	f7fc fab9 	bl	8001eec <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800597a:	4807      	ldr	r0, [pc, #28]	; (8005998 <ethernetif_update_config+0xec>)
 800597c:	f7fc fa57 	bl	8001e2e <HAL_ETH_Start>
 8005980:	e002      	b.n	8005988 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <ethernetif_update_config+0xec>)
 8005984:	f7fc fa82 	bl	8001e8c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f807 	bl	800599c <ethernetif_notify_conn_changed>
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20007474 	.word	0x20007474

0800599c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c2:	2b84      	cmp	r3, #132	; 0x84
 80059c4:	d005      	beq.n	80059d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	3303      	adds	r3, #3
 80059d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059d2:	68fb      	ldr	r3, [r7, #12]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e6:	f3ef 8305 	mrs	r3, IPSR
 80059ea:	607b      	str	r3, [r7, #4]
  return(result);
 80059ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a08:	f002 f896 	bl	8007b38 <vTaskStartScheduler>
  
  return osOK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005a16:	f7ff ffe3 	bl	80059e0 <inHandlerMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005a20:	f002 f9a8 	bl	8007d74 <xTaskGetTickCountFromISR>
 8005a24:	4603      	mov	r3, r0
 8005a26:	e002      	b.n	8005a2e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005a28:	f002 f994 	bl	8007d54 <xTaskGetTickCount>
 8005a2c:	4603      	mov	r3, r0
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a34:	b089      	sub	sp, #36	; 0x24
 8005a36:	af04      	add	r7, sp, #16
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <osThreadCreate+0x54>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01c      	beq.n	8005a86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685c      	ldr	r4, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681d      	ldr	r5, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691e      	ldr	r6, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ffa6 	bl	80059b0 <makeFreeRtosPriority>
 8005a64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6e:	9202      	str	r2, [sp, #8]
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	9100      	str	r1, [sp, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4632      	mov	r2, r6
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f001 fe8f 	bl	800779e <xTaskCreateStatic>
 8005a80:	4603      	mov	r3, r0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e01c      	b.n	8005ac0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685c      	ldr	r4, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a92:	b29e      	uxth	r6, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff88 	bl	80059b0 <makeFreeRtosPriority>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	9200      	str	r2, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	4632      	mov	r2, r6
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f001 fed4 	bl	800785e <xTaskCreate>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d001      	beq.n	8005ac0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <osDelay+0x16>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	e000      	b.n	8005ae2 <osDelay+0x18>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fff2 	bl	8007acc <vTaskDelay>
  
  return osOK;
 8005ae8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4619      	mov	r1, r3
 8005b08:	2001      	movs	r0, #1
 8005b0a:	f001 f860 	bl	8006bce <xQueueCreateMutexStatic>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	e003      	b.n	8005b1a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b12:	2001      	movs	r0, #1
 8005b14:	f001 f843 	bl	8006b9e <xQueueCreateMutex>
 8005b18:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <osMutexWait+0x18>
    return osErrorParameter;
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	e03a      	b.n	8005bb2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e009      	b.n	8005b64 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d006      	beq.n	8005b64 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <osMutexWait+0x40>
      ticks = 1;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b64:	f7ff ff3c 	bl	80059e0 <inHandlerMode>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	461a      	mov	r2, r3
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fc66 	bl	8007448 <xQueueReceiveFromISR>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <osMutexWait+0x62>
      return osErrorOS;
 8005b82:	23ff      	movs	r3, #255	; 0xff
 8005b84:	e015      	b.n	8005bb2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d011      	beq.n	8005bb0 <osMutexWait+0x8c>
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <osMutexWait+0x98>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	e008      	b.n	8005bb0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 fb41 	bl	8007228 <xQueueSemaphoreTake>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <osMutexWait+0x8c>
    return osErrorOS;
 8005bac:	23ff      	movs	r3, #255	; 0xff
 8005bae:	e000      	b.n	8005bb2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005bd0:	f7ff ff06 	bl	80059e0 <inHandlerMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d016      	beq.n	8005c08 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f9ad 	bl	8006f40 <xQueueGiveFromISR>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d001      	beq.n	8005bf0 <osMutexRelease+0x30>
      return osErrorOS;
 8005bec:	23ff      	movs	r3, #255	; 0xff
 8005bee:	e017      	b.n	8005c20 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <osMutexRelease+0x5e>
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <osMutexRelease+0x68>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e00a      	b.n	8005c1e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fff8 	bl	8006c04 <xQueueGenericSend>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005c1a:	23ff      	movs	r3, #255	; 0xff
 8005c1c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d10b      	bne.n	8005c5c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	2303      	movs	r3, #3
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	2001      	movs	r0, #1
 8005c54:	f000 feac 	bl	80069b0 <xQueueGenericCreateStatic>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	e016      	b.n	8005c8a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e014      	b.n	8005c8a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d110      	bne.n	8005c88 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005c66:	2203      	movs	r2, #3
 8005c68:	2100      	movs	r1, #0
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f000 ff1d 	bl	8006aaa <xQueueGenericCreate>
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <osSemaphoreCreate+0x58>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 ffc0 	bl	8006c04 <xQueueGenericSend>
      return sema;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	e000      	b.n	8005c8a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005c88:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	e03a      	b.n	8005d22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d103      	bne.n	8005cc0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e009      	b.n	8005cd4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <osSemaphoreWait+0x40>
      ticks = 1;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005cd4:	f7ff fe84 	bl	80059e0 <inHandlerMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fbae 	bl	8007448 <xQueueReceiveFromISR>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d001      	beq.n	8005cf6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005cf2:	23ff      	movs	r3, #255	; 0xff
 8005cf4:	e015      	b.n	8005d22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <osSemaphoreWait+0x8c>
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <osSemaphoreWait+0x98>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	e008      	b.n	8005d20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 fa89 	bl	8007228 <xQueueSemaphoreTake>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d001      	beq.n	8005d20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005d1c:	23ff      	movs	r3, #255	; 0xff
 8005d1e:	e000      	b.n	8005d22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005d40:	f7ff fe4e 	bl	80059e0 <inHandlerMode>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f8f5 	bl	8006f40 <xQueueGiveFromISR>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005d5c:	23ff      	movs	r3, #255	; 0xff
 8005d5e:	e017      	b.n	8005d90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <osSemaphoreRelease+0x5e>
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <osSemaphoreRelease+0x68>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	e00a      	b.n	8005d8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 ff40 	bl	8006c04 <xQueueGenericSend>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005d8a:	23ff      	movs	r3, #255	; 0xff
 8005d8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d012      	beq.n	8005dd4 <osMessageCreate+0x38>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00e      	beq.n	8005dd4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68dc      	ldr	r4, [r3, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	4623      	mov	r3, r4
 8005dcc:	f000 fdf0 	bl	80069b0 <xQueueGenericCreateStatic>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	e008      	b.n	8005de6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4619      	mov	r1, r3
 8005de0:	f000 fe63 	bl	8006aaa <xQueueGenericCreate>
 8005de4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
	...

08005df0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <osMessagePut+0x1e>
    ticks = 1;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e0e:	f7ff fde7 	bl	80059e0 <inHandlerMode>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d018      	beq.n	8005e4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e18:	f107 0210 	add.w	r2, r7, #16
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	2300      	movs	r3, #0
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fff0 	bl	8006e08 <xQueueGenericSendFromISR>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d001      	beq.n	8005e32 <osMessagePut+0x42>
      return osErrorOS;
 8005e2e:	23ff      	movs	r3, #255	; 0xff
 8005e30:	e018      	b.n	8005e64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d014      	beq.n	8005e62 <osMessagePut+0x72>
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <osMessagePut+0x7c>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	e00b      	b.n	8005e62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005e4a:	f107 0108 	add.w	r1, r7, #8
 8005e4e:	2300      	movs	r3, #0
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fed6 	bl	8006c04 <xQueueGenericSend>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d001      	beq.n	8005e62 <osMessagePut+0x72>
      return osErrorOS;
 8005e5e:	23ff      	movs	r3, #255	; 0xff
 8005e60:	e000      	b.n	8005e64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b08b      	sub	sp, #44	; 0x2c
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	617b      	str	r3, [r7, #20]
    return event;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	461c      	mov	r4, r3
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e9e:	e054      	b.n	8005f4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d103      	bne.n	8005eb8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb6:	e009      	b.n	8005ecc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <osMessageGet+0x5c>
      ticks = 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ecc:	f7ff fd88 	bl	80059e0 <inHandlerMode>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01c      	beq.n	8005f10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ed6:	f107 0220 	add.w	r2, r7, #32
 8005eda:	f107 0314 	add.w	r3, r7, #20
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f001 fab0 	bl	8007448 <xQueueReceiveFromISR>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005eee:	2310      	movs	r3, #16
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e001      	b.n	8005ef8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01d      	beq.n	8005f3a <osMessageGet+0xca>
 8005efe:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <osMessageGet+0xe4>)
 8005f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	e014      	b.n	8005f3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	3304      	adds	r3, #4
 8005f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68b8      	ldr	r0, [r7, #8]
 8005f1c:	f001 f8a2 	bl	8007064 <xQueueReceive>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d102      	bne.n	8005f2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f26:	2310      	movs	r3, #16
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e006      	b.n	8005f3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <osMessageGet+0xc6>
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <osMessageGet+0xc8>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	372c      	adds	r7, #44	; 0x2c
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f103 0208 	add.w	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f103 0208 	add.w	r2, r3, #8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f103 0208 	add.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e00c      	b.n	8006034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3308      	adds	r3, #8
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e002      	b.n	8006028 <vListInsert+0x2e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	429a      	cmp	r2, r3
 8006032:	d9f6      	bls.n	8006022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6892      	ldr	r2, [r2, #8]
 8006082:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6852      	ldr	r2, [r2, #4]
 800608c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d103      	bne.n	80060a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	1e5a      	subs	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3b04      	subs	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b04      	subs	r3, #4
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <pxPortInitialiseStack+0x64>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3b14      	subs	r3, #20
 80060fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3b04      	subs	r3, #4
 8006106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f06f 0202 	mvn.w	r2, #2
 800610e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b20      	subs	r3, #32
 8006114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	08006129 	.word	0x08006129

08006128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <prvTaskExitError+0x58>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d00b      	beq.n	8006154 <prvTaskExitError+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	b672      	cpsid	i
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	b662      	cpsie	i
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e7fe      	b.n	8006152 <prvTaskExitError+0x2a>
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	b672      	cpsid	i
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	b662      	cpsie	i
 8006168:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800616a:	bf00      	nop
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0fc      	beq.n	800616c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	2000000c 	.word	0x2000000c
	...

08006190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <pxCurrentTCBConst2>)
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	f380 8809 	msr	PSP, r0
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8811 	msr	BASEPRI, r0
 80061aa:	4770      	bx	lr
 80061ac:	f3af 8000 	nop.w

080061b0 <pxCurrentTCBConst2>:
 80061b0:	2000671c 	.word	0x2000671c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061b8:	4808      	ldr	r0, [pc, #32]	; (80061dc <prvPortStartFirstTask+0x24>)
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f380 8808 	msr	MSP, r0
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8814 	msr	CONTROL, r0
 80061ca:	b662      	cpsie	i
 80061cc:	b661      	cpsie	f
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	df00      	svc	0
 80061d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061da:	bf00      	nop
 80061dc:	e000ed08 	.word	0xe000ed08

080061e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <xPortStartScheduler+0xe0>)
 80061e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b2e      	ldr	r3, [pc, #184]	; (80062c4 <xPortStartScheduler+0xe4>)
 800620c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800620e:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <xPortStartScheduler+0xe8>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006214:	e009      	b.n	800622a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006216:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <xPortStartScheduler+0xe8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <xPortStartScheduler+0xe8>)
 800621e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d0ef      	beq.n	8006216 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <xPortStartScheduler+0xe8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1c3 0307 	rsb	r3, r3, #7
 800623e:	2b04      	cmp	r3, #4
 8006240:	d00b      	beq.n	800625a <xPortStartScheduler+0x7a>
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	b672      	cpsid	i
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	b662      	cpsie	i
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	e7fe      	b.n	8006258 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <xPortStartScheduler+0xe8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <xPortStartScheduler+0xe8>)
 8006262:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006264:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <xPortStartScheduler+0xe8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <xPortStartScheduler+0xe8>)
 800626e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <xPortStartScheduler+0xec>)
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <xPortStartScheduler+0xec>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006282:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006284:	4a11      	ldr	r2, [pc, #68]	; (80062cc <xPortStartScheduler+0xec>)
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <xPortStartScheduler+0xec>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800628e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006290:	f000 f8d4 	bl	800643c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <xPortStartScheduler+0xf0>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800629a:	f000 f8f3 	bl	8006484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800629e:	4a0d      	ldr	r2, [pc, #52]	; (80062d4 <xPortStartScheduler+0xf4>)
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <xPortStartScheduler+0xf4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062aa:	f7ff ff85 	bl	80061b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062ae:	f001 fe2d 	bl	8007f0c <vTaskSwitchContext>
	prvTaskExitError();
 80062b2:	f7ff ff39 	bl	8006128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000e400 	.word	0xe000e400
 80062c4:	200002fc 	.word	0x200002fc
 80062c8:	20000300 	.word	0x20000300
 80062cc:	e000ed20 	.word	0xe000ed20
 80062d0:	2000000c 	.word	0x2000000c
 80062d4:	e000ef34 	.word	0xe000ef34

080062d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	b672      	cpsid	i
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	b662      	cpsie	i
 80062f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <vPortEnterCritical+0x5c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a0e      	ldr	r2, [pc, #56]	; (8006334 <vPortEnterCritical+0x5c>)
 80062fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <vPortEnterCritical+0x5c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d110      	bne.n	8006328 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <vPortEnterCritical+0x60>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <vPortEnterCritical+0x50>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	e7fe      	b.n	8006326 <vPortEnterCritical+0x4e>
	}
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	2000000c 	.word	0x2000000c
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <vPortExitCritical+0x26>
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e7fe      	b.n	8006360 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <vPortExitCritical+0x50>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3b01      	subs	r3, #1
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <vPortExitCritical+0x50>)
 800636a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <vPortExitCritical+0x50>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <vPortExitCritical+0x42>
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c

08006390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006390:	f3ef 8009 	mrs	r0, PSP
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <pxCurrentTCBConst>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f01e 0f10 	tst.w	lr, #16
 80063a0:	bf08      	it	eq
 80063a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	6010      	str	r0, [r2, #0]
 80063ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063b4:	b672      	cpsid	i
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	b662      	cpsie	i
 80063c4:	f001 fda2 	bl	8007f0c <vTaskSwitchContext>
 80063c8:	f04f 0000 	mov.w	r0, #0
 80063cc:	f380 8811 	msr	BASEPRI, r0
 80063d0:	bc09      	pop	{r0, r3}
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	6808      	ldr	r0, [r1, #0]
 80063d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	f01e 0f10 	tst.w	lr, #16
 80063de:	bf08      	it	eq
 80063e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063e4:	f380 8809 	msr	PSP, r0
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <pxCurrentTCBConst>:
 80063f0:	2000671c 	.word	0x2000671c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	b672      	cpsid	i
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	b662      	cpsie	i
 8006412:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006414:	f001 fcc0 	bl	8007d98 <xTaskIncrementTick>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <SysTick_Handler+0x40>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	2300      	movs	r3, #0
 8006428:	603b      	str	r3, [r7, #0]
	__asm volatile
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <vPortSetupTimerInterrupt+0x34>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <vPortSetupTimerInterrupt+0x38>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800644c:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <vPortSetupTimerInterrupt+0x3c>)
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <vPortSetupTimerInterrupt+0x40>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	490b      	ldr	r1, [pc, #44]	; (8006480 <vPortSetupTimerInterrupt+0x44>)
 8006454:	fba1 1303 	umull	r1, r3, r1, r3
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	3b01      	subs	r3, #1
 800645c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <vPortSetupTimerInterrupt+0x34>)
 8006460:	2207      	movs	r2, #7
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	e000e010 	.word	0xe000e010
 8006474:	e000e018 	.word	0xe000e018
 8006478:	e000e014 	.word	0xe000e014
 800647c:	20000000 	.word	0x20000000
 8006480:	10624dd3 	.word	0x10624dd3

08006484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006494 <vPortEnableVFP+0x10>
 8006488:	6801      	ldr	r1, [r0, #0]
 800648a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800648e:	6001      	str	r1, [r0, #0]
 8006490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006492:	bf00      	nop
 8006494:	e000ed88 	.word	0xe000ed88

08006498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800649e:	f3ef 8305 	mrs	r3, IPSR
 80064a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d915      	bls.n	80064d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064aa:	4a18      	ldr	r2, [pc, #96]	; (800650c <vPortValidateInterruptPriority+0x74>)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064b4:	4b16      	ldr	r3, [pc, #88]	; (8006510 <vPortValidateInterruptPriority+0x78>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	7afa      	ldrb	r2, [r7, #11]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d20b      	bcs.n	80064d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	e7fe      	b.n	80064d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <vPortValidateInterruptPriority+0x7c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064de:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <vPortValidateInterruptPriority+0x80>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d90b      	bls.n	80064fe <vPortValidateInterruptPriority+0x66>
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	b672      	cpsid	i
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	b662      	cpsie	i
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	e7fe      	b.n	80064fc <vPortValidateInterruptPriority+0x64>
	}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	e000e3f0 	.word	0xe000e3f0
 8006510:	200002fc 	.word	0x200002fc
 8006514:	e000ed0c 	.word	0xe000ed0c
 8006518:	20000300 	.word	0x20000300

0800651c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08a      	sub	sp, #40	; 0x28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006528:	f001 fb68 	bl	8007bfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800652c:	4b5a      	ldr	r3, [pc, #360]	; (8006698 <pvPortMalloc+0x17c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006534:	f000 f916 	bl	8006764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006538:	4b58      	ldr	r3, [pc, #352]	; (800669c <pvPortMalloc+0x180>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	f040 8090 	bne.w	8006666 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800654c:	2208      	movs	r2, #8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4413      	add	r3, r2
 8006552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d015      	beq.n	800658a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f023 0307 	bic.w	r3, r3, #7
 8006564:	3308      	adds	r3, #8
 8006566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <pvPortMalloc+0x6e>
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	b672      	cpsid	i
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	b662      	cpsie	i
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e7fe      	b.n	8006588 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d06a      	beq.n	8006666 <pvPortMalloc+0x14a>
 8006590:	4b43      	ldr	r3, [pc, #268]	; (80066a0 <pvPortMalloc+0x184>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d865      	bhi.n	8006666 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800659a:	4b42      	ldr	r3, [pc, #264]	; (80066a4 <pvPortMalloc+0x188>)
 800659c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800659e:	4b41      	ldr	r3, [pc, #260]	; (80066a4 <pvPortMalloc+0x188>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065a4:	e004      	b.n	80065b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d203      	bcs.n	80065c2 <pvPortMalloc+0xa6>
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f1      	bne.n	80065a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065c2:	4b35      	ldr	r3, [pc, #212]	; (8006698 <pvPortMalloc+0x17c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d04c      	beq.n	8006666 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2208      	movs	r2, #8
 80065d2:	4413      	add	r3, r2
 80065d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	1ad2      	subs	r2, r2, r3
 80065e6:	2308      	movs	r3, #8
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d920      	bls.n	8006630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <pvPortMalloc+0xfc>
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	b672      	cpsid	i
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	b662      	cpsie	i
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e7fe      	b.n	8006616 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800662a:	69b8      	ldr	r0, [r7, #24]
 800662c:	f000 f8fc 	bl	8006828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <pvPortMalloc+0x184>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <pvPortMalloc+0x184>)
 800663c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800663e:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <pvPortMalloc+0x184>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <pvPortMalloc+0x18c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d203      	bcs.n	8006652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <pvPortMalloc+0x184>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <pvPortMalloc+0x18c>)
 8006650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <pvPortMalloc+0x180>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	431a      	orrs	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006666:	f001 fad7 	bl	8007c18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <pvPortMalloc+0x170>
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	b672      	cpsid	i
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	b662      	cpsie	i
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e7fe      	b.n	800668a <pvPortMalloc+0x16e>
	return pvReturn;
 800668c:	69fb      	ldr	r3, [r7, #28]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3728      	adds	r7, #40	; 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2000670c 	.word	0x2000670c
 800669c:	20006718 	.word	0x20006718
 80066a0:	20006710 	.word	0x20006710
 80066a4:	20006704 	.word	0x20006704
 80066a8:	20006714 	.word	0x20006714

080066ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04a      	beq.n	8006754 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066be:	2308      	movs	r3, #8
 80066c0:	425b      	negs	r3, r3
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <vPortFree+0xb0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <vPortFree+0x46>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	b672      	cpsid	i
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	b662      	cpsie	i
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e7fe      	b.n	80066f0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <vPortFree+0x66>
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	b672      	cpsid	i
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	b662      	cpsie	i
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	e7fe      	b.n	8006710 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <vPortFree+0xb0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d019      	beq.n	8006754 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d115      	bne.n	8006754 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <vPortFree+0xb0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006738:	f001 fa60 	bl	8007bfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <vPortFree+0xb4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4413      	add	r3, r2
 8006746:	4a06      	ldr	r2, [pc, #24]	; (8006760 <vPortFree+0xb4>)
 8006748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 f86c 	bl	8006828 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006750:	f001 fa62 	bl	8007c18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20006718 	.word	0x20006718
 8006760:	20006710 	.word	0x20006710

08006764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800676a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800676e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <prvHeapInit+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <prvHeapInit+0xac>)
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <prvHeapInit+0xb0>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <prvHeapInit+0xb0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067b0:	2208      	movs	r2, #8
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <prvHeapInit+0xb4>)
 80067c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvHeapInit+0xb4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvHeapInit+0xb4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvHeapInit+0xb4>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <prvHeapInit+0xb8>)
 80067f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <prvHeapInit+0xbc>)
 80067fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <prvHeapInit+0xc0>)
 80067fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20000304 	.word	0x20000304
 8006814:	20006704 	.word	0x20006704
 8006818:	2000670c 	.word	0x2000670c
 800681c:	20006714 	.word	0x20006714
 8006820:	20006710 	.word	0x20006710
 8006824:	20006718 	.word	0x20006718

08006828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006830:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <prvInsertBlockIntoFreeList+0xac>)
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e002      	b.n	800683c <prvInsertBlockIntoFreeList+0x14>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d3f7      	bcc.n	8006836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d108      	bne.n	800686a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d118      	bne.n	80068b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d00d      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e008      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <prvInsertBlockIntoFreeList+0xb0>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e003      	b.n	80068b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d002      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20006704 	.word	0x20006704
 80068d8:	2000670c 	.word	0x2000670c

080068dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <xQueueGenericReset+0x2c>
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	b672      	cpsid	i
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	b662      	cpsie	i
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	e7fe      	b.n	8006906 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006908:	f7ff fce6 	bl	80062d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	3b01      	subs	r3, #1
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	22ff      	movs	r2, #255	; 0xff
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d114      	bne.n	8006988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01a      	beq.n	800699c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3310      	adds	r3, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fb50 	bl	8008010 <xTaskRemoveFromEventList>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d012      	beq.n	800699c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <xQueueGenericReset+0xd0>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	e009      	b.n	800699c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3310      	adds	r3, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fae3 	bl	8005f58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3324      	adds	r3, #36	; 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fade 	bl	8005f58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f7ff fcce 	bl	800633c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069a0:	2301      	movs	r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	; 0x38
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <xQueueGenericCreateStatic+0x2c>
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	e7fe      	b.n	80069da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <xQueueGenericCreateStatic+0x4a>
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	b672      	cpsid	i
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	b662      	cpsie	i
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <xQueueGenericCreateStatic+0x56>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <xQueueGenericCreateStatic+0x5a>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericCreateStatic+0x5c>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <xQueueGenericCreateStatic+0x78>
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	b672      	cpsid	i
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	b662      	cpsie	i
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <xQueueGenericCreateStatic+0x84>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <xQueueGenericCreateStatic+0x88>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <xQueueGenericCreateStatic+0x8a>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <xQueueGenericCreateStatic+0xa6>
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	b672      	cpsid	i
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	b662      	cpsie	i
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a56:	2348      	movs	r3, #72	; 0x48
 8006a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b48      	cmp	r3, #72	; 0x48
 8006a5e:	d00b      	beq.n	8006a78 <xQueueGenericCreateStatic+0xc8>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	b672      	cpsid	i
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	b662      	cpsie	i
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e7fe      	b.n	8006a76 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f846 	bl	8006b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3730      	adds	r7, #48	; 0x30
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b08a      	sub	sp, #40	; 0x28
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <xQueueGenericCreate+0x2c>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	b672      	cpsid	i
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	b662      	cpsie	i
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e004      	b.n	8006aec <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3348      	adds	r3, #72	; 0x48
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fd13 	bl	800651c <pvPortMalloc>
 8006af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	3348      	adds	r3, #72	; 0x48
 8006b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b10:	79fa      	ldrb	r2, [r7, #7]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f805 	bl	8006b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b22:	69bb      	ldr	r3, [r7, #24]
	}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	69b8      	ldr	r0, [r7, #24]
 8006b5e:	f7ff febd 	bl	80068dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f837 	bl	8006c04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6939      	ldr	r1, [r7, #16]
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f7ff ff77 	bl	8006aaa <xQueueGenericCreate>
 8006bbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff ffd3 	bl	8006b6a <prvInitialiseMutex>

		return xNewQueue;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b088      	sub	sp, #32
 8006bd2:	af02      	add	r7, sp, #8
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	6039      	str	r1, [r7, #0]
 8006bd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2200      	movs	r2, #0
 8006bea:	6939      	ldr	r1, [r7, #16]
 8006bec:	6978      	ldr	r0, [r7, #20]
 8006bee:	f7ff fedf 	bl	80069b0 <xQueueGenericCreateStatic>
 8006bf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff ffb8 	bl	8006b6a <prvInitialiseMutex>

		return xNewQueue;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
	}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <xQueueGenericSend+0x34>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c36:	e7fe      	b.n	8006c36 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <xQueueGenericSend+0x42>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <xQueueGenericSend+0x46>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <xQueueGenericSend+0x48>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <xQueueGenericSend+0x64>
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	b672      	cpsid	i
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	b662      	cpsie	i
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	e7fe      	b.n	8006c66 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d103      	bne.n	8006c76 <xQueueGenericSend+0x72>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <xQueueGenericSend+0x76>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <xQueueGenericSend+0x78>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <xQueueGenericSend+0x94>
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	b672      	cpsid	i
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	b662      	cpsie	i
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	e7fe      	b.n	8006c96 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c98:	f001 fb78 	bl	800838c <xTaskGetSchedulerState>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <xQueueGenericSend+0xa4>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueGenericSend+0xa8>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xQueueGenericSend+0xaa>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <xQueueGenericSend+0xc6>
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	b672      	cpsid	i
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	b662      	cpsie	i
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cca:	f7ff fb05 	bl	80062d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <xQueueGenericSend+0xdc>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d129      	bne.n	8006d34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce6:	f000 fc4a 	bl	800757e <prvCopyDataToQueue>
 8006cea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	3324      	adds	r3, #36	; 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f989 	bl	8008010 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d013      	beq.n	8006d2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b3f      	ldr	r3, [pc, #252]	; (8006e04 <xQueueGenericSend+0x200>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e00a      	b.n	8006d2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <xQueueGenericSend+0x200>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d2c:	f7ff fb06 	bl	800633c <vPortExitCritical>
				return pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e063      	b.n	8006dfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d3a:	f7ff faff 	bl	800633c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e05c      	b.n	8006dfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 f9c3 	bl	80080d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d56:	f7ff faf1 	bl	800633c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5a:	f000 ff4f 	bl	8007bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d5e:	f7ff fabb 	bl	80062d8 <vPortEnterCritical>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d103      	bne.n	8006d78 <xQueueGenericSend+0x174>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x18a>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8e:	f7ff fad5 	bl	800633c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f9b2 	bl	8008104 <xTaskCheckForTimeOut>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d124      	bne.n	8006df0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da8:	f000 fce1 	bl	800776e <prvIsQueueFull>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d018      	beq.n	8006de4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 f902 	bl	8007fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fc6c 	bl	800769e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dc6:	f000 ff27 	bl	8007c18 <xTaskResumeAll>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f af7c 	bne.w	8006cca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <xQueueGenericSend+0x200>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	e772      	b.n	8006cca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de6:	f000 fc5a 	bl	800769e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dea:	f000 ff15 	bl	8007c18 <xTaskResumeAll>
 8006dee:	e76c      	b.n	8006cca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df2:	f000 fc54 	bl	800769e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006df6:	f000 ff0f 	bl	8007c18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	; 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08e      	sub	sp, #56	; 0x38
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <xQueueGenericSendFromISR+0x30>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
 8006e36:	e7fe      	b.n	8006e36 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <xQueueGenericSendFromISR+0x3e>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <xQueueGenericSendFromISR+0x42>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <xQueueGenericSendFromISR+0x44>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <xQueueGenericSendFromISR+0x60>
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	623b      	str	r3, [r7, #32]
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSendFromISR+0x6e>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <xQueueGenericSendFromISR+0x72>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <xQueueGenericSendFromISR+0x74>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <xQueueGenericSendFromISR+0x90>
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	e7fe      	b.n	8006e96 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e98:	f7ff fafe 	bl	8006498 <vPortValidateInterruptPriority>
	__asm volatile
 8006e9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	61ba      	str	r2, [r7, #24]
 8006eb6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d302      	bcc.n	8006ece <xQueueGenericSendFromISR+0xc6>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d12c      	bne.n	8006f28 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ede:	f000 fb4e 	bl	800757e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ee2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d112      	bne.n	8006f12 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d016      	beq.n	8006f22 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f889 	bl	8008010 <xTaskRemoveFromEventList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	b25a      	sxtb	r2, r3
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f22:	2301      	movs	r3, #1
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f26:	e001      	b.n	8006f2c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3738      	adds	r7, #56	; 0x38
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	; 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	b672      	cpsid	i
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	b662      	cpsie	i
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	e7fe      	b.n	8006f6a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <xQueueGiveFromISR+0x4c>
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	b672      	cpsid	i
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	b662      	cpsie	i
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	e7fe      	b.n	8006f8a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <xQueueGiveFromISR+0x5c>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <xQueueGiveFromISR+0x60>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <xQueueGiveFromISR+0x62>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <xQueueGiveFromISR+0x7e>
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	b672      	cpsid	i
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	b662      	cpsie	i
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	e7fe      	b.n	8006fbc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fbe:	f7ff fa6b 	bl	8006498 <vPortValidateInterruptPriority>
	__asm volatile
 8006fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	b672      	cpsid	i
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	b662      	cpsie	i
 8006fda:	617a      	str	r2, [r7, #20]
 8006fdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d92b      	bls.n	800704a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d112      	bne.n	8007034 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d016      	beq.n	8007044 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fff8 	bl	8008010 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00e      	beq.n	8007044 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e007      	b.n	8007044 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	3301      	adds	r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	b25a      	sxtb	r2, r3
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007044:	2301      	movs	r3, #1
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
 8007048:	e001      	b.n	800704e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800705a:	4618      	mov	r0, r3
 800705c:	3738      	adds	r7, #56	; 0x38
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10b      	bne.n	8007096 <xQueueReceive+0x32>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	b672      	cpsid	i
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	b662      	cpsie	i
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	e7fe      	b.n	8007094 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <xQueueReceive+0x40>
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <xQueueReceive+0x44>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <xQueueReceive+0x46>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <xQueueReceive+0x62>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	b672      	cpsid	i
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	b662      	cpsie	i
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e7fe      	b.n	80070c4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c6:	f001 f961 	bl	800838c <xTaskGetSchedulerState>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <xQueueReceive+0x72>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <xQueueReceive+0x76>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <xQueueReceive+0x78>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10b      	bne.n	80070f8 <xQueueReceive+0x94>
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	b672      	cpsid	i
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	b662      	cpsie	i
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	e7fe      	b.n	80070f6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f8:	f7ff f8ee 	bl	80062d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01f      	beq.n	8007148 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710c:	f000 faa1 	bl	8007652 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	1e5a      	subs	r2, r3, #1
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	3310      	adds	r3, #16
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ff73 	bl	8008010 <xTaskRemoveFromEventList>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007130:	4b3c      	ldr	r3, [pc, #240]	; (8007224 <xQueueReceive+0x1c0>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007140:	f7ff f8fc 	bl	800633c <vPortExitCritical>
				return pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	e069      	b.n	800721c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d103      	bne.n	8007156 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800714e:	f7ff f8f5 	bl	800633c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007152:	2300      	movs	r3, #0
 8007154:	e062      	b.n	800721c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800715c:	f107 0310 	add.w	r3, r7, #16
 8007160:	4618      	mov	r0, r3
 8007162:	f000 ffb9 	bl	80080d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800716a:	f7ff f8e7 	bl	800633c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800716e:	f000 fd45 	bl	8007bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007172:	f7ff f8b1 	bl	80062d8 <vPortEnterCritical>
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <xQueueReceive+0x128>
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007192:	b25b      	sxtb	r3, r3
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d103      	bne.n	80071a2 <xQueueReceive+0x13e>
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a2:	f7ff f8cb 	bl	800633c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071a6:	1d3a      	adds	r2, r7, #4
 80071a8:	f107 0310 	add.w	r3, r7, #16
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 ffa8 	bl	8008104 <xTaskCheckForTimeOut>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d123      	bne.n	8007202 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071bc:	f000 fac1 	bl	8007742 <prvIsQueueEmpty>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d017      	beq.n	80071f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fef8 	bl	8007fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f000 fa62 	bl	800769e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071da:	f000 fd1d 	bl	8007c18 <xTaskResumeAll>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d189      	bne.n	80070f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <xQueueReceive+0x1c0>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	e780      	b.n	80070f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f8:	f000 fa51 	bl	800769e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071fc:	f000 fd0c 	bl	8007c18 <xTaskResumeAll>
 8007200:	e77a      	b.n	80070f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007204:	f000 fa4b 	bl	800769e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007208:	f000 fd06 	bl	8007c18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800720c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720e:	f000 fa98 	bl	8007742 <prvIsQueueEmpty>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	f43f af6f 	beq.w	80070f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800721a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800721c:	4618      	mov	r0, r3
 800721e:	3730      	adds	r7, #48	; 0x30
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08e      	sub	sp, #56	; 0x38
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007232:	2300      	movs	r3, #0
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <xQueueSemaphoreTake+0x34>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	b672      	cpsid	i
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	b662      	cpsie	i
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	e7fe      	b.n	800725a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <xQueueSemaphoreTake+0x54>
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	b672      	cpsid	i
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	b662      	cpsie	i
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	e7fe      	b.n	800727a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800727c:	f001 f886 	bl	800838c <xTaskGetSchedulerState>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <xQueueSemaphoreTake+0x64>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <xQueueSemaphoreTake+0x68>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <xQueueSemaphoreTake+0x6a>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <xQueueSemaphoreTake+0x86>
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	b672      	cpsid	i
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	b662      	cpsie	i
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e7fe      	b.n	80072ac <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072ae:	f7ff f813 	bl	80062d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d024      	beq.n	8007308 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072ce:	f001 fa1f 	bl	8008710 <pvTaskIncrementMutexHeldCount>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00f      	beq.n	8007300 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	3310      	adds	r3, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fe93 	bl	8008010 <xTaskRemoveFromEventList>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d007      	beq.n	8007300 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072f0:	4b54      	ldr	r3, [pc, #336]	; (8007444 <xQueueSemaphoreTake+0x21c>)
 80072f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007300:	f7ff f81c 	bl	800633c <vPortExitCritical>
				return pdPASS;
 8007304:	2301      	movs	r3, #1
 8007306:	e098      	b.n	800743a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d112      	bne.n	8007334 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <xQueueSemaphoreTake+0x104>
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	b672      	cpsid	i
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	b662      	cpsie	i
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e7fe      	b.n	800732a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800732c:	f7ff f806 	bl	800633c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007330:	2300      	movs	r3, #0
 8007332:	e082      	b.n	800743a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800733a:	f107 030c 	add.w	r3, r7, #12
 800733e:	4618      	mov	r0, r3
 8007340:	f000 feca 	bl	80080d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007348:	f7fe fff8 	bl	800633c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800734c:	f000 fc56 	bl	8007bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007350:	f7fe ffc2 	bl	80062d8 <vPortEnterCritical>
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800735a:	b25b      	sxtb	r3, r3
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d103      	bne.n	800736a <xQueueSemaphoreTake+0x142>
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007370:	b25b      	sxtb	r3, r3
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d103      	bne.n	8007380 <xQueueSemaphoreTake+0x158>
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007380:	f7fe ffdc 	bl	800633c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007384:	463a      	mov	r2, r7
 8007386:	f107 030c 	add.w	r3, r7, #12
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f000 feb9 	bl	8008104 <xTaskCheckForTimeOut>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d132      	bne.n	80073fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739a:	f000 f9d2 	bl	8007742 <prvIsQueueEmpty>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d026      	beq.n	80073f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80073ac:	f7fe ff94 	bl	80062d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 f807 	bl	80083c8 <xTaskPriorityInherit>
 80073ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073bc:	f7fe ffbe 	bl	800633c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	3324      	adds	r3, #36	; 0x24
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fdfb 	bl	8007fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d0:	f000 f965 	bl	800769e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073d4:	f000 fc20 	bl	8007c18 <xTaskResumeAll>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f47f af67 	bne.w	80072ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <xQueueSemaphoreTake+0x21c>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e75d      	b.n	80072ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073f4:	f000 f953 	bl	800769e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073f8:	f000 fc0e 	bl	8007c18 <xTaskResumeAll>
 80073fc:	e757      	b.n	80072ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007400:	f000 f94d 	bl	800769e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007404:	f000 fc08 	bl	8007c18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800740a:	f000 f99a 	bl	8007742 <prvIsQueueEmpty>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	f43f af4c 	beq.w	80072ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00d      	beq.n	8007438 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800741c:	f7fe ff5c 	bl	80062d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007422:	f000 f894 	bl	800754e <prvGetDisinheritPriorityAfterTimeout>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f8d2 	bl	80085d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007434:	f7fe ff82 	bl	800633c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007438:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800743a:	4618      	mov	r0, r3
 800743c:	3738      	adds	r7, #56	; 0x38
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08e      	sub	sp, #56	; 0x38
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <xQueueReceiveFromISR+0x2e>
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	b672      	cpsid	i
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	b662      	cpsie	i
 8007472:	623b      	str	r3, [r7, #32]
 8007474:	e7fe      	b.n	8007474 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <xQueueReceiveFromISR+0x3c>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <xQueueReceiveFromISR+0x40>
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <xQueueReceiveFromISR+0x42>
 8007488:	2300      	movs	r3, #0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <xQueueReceiveFromISR+0x5e>
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	b672      	cpsid	i
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	b662      	cpsie	i
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e7fe      	b.n	80074a4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a6:	f7fe fff7 	bl	8006498 <vPortValidateInterruptPriority>
	__asm volatile
 80074aa:	f3ef 8211 	mrs	r2, BASEPRI
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	b672      	cpsid	i
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	b662      	cpsie	i
 80074c2:	61ba      	str	r2, [r7, #24]
 80074c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d02f      	beq.n	8007536 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e4:	f000 f8b5 	bl	8007652 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d112      	bne.n	8007520 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d016      	beq.n	8007530 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	3310      	adds	r3, #16
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fd82 	bl	8008010 <xTaskRemoveFromEventList>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e007      	b.n	8007530 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007524:	3301      	adds	r3, #1
 8007526:	b2db      	uxtb	r3, r3
 8007528:	b25a      	sxtb	r2, r3
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
 8007534:	e001      	b.n	800753a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8007536:	2300      	movs	r3, #0
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007546:	4618      	mov	r0, r3
 8007548:	3738      	adds	r7, #56	; 0x38
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d006      	beq.n	800756c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f1c3 0307 	rsb	r3, r3, #7
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e001      	b.n	8007570 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007570:	68fb      	ldr	r3, [r7, #12]
	}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10d      	bne.n	80075b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d14d      	bne.n	8007640 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 ff8d 	bl	80084c8 <xTaskPriorityDisinherit>
 80075ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	e043      	b.n	8007640 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d119      	bne.n	80075f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6858      	ldr	r0, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	461a      	mov	r2, r3
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	f00d fe0e 	bl	80151ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d32b      	bcc.n	8007640 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	605a      	str	r2, [r3, #4]
 80075f0:	e026      	b.n	8007640 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68d8      	ldr	r0, [r3, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	461a      	mov	r2, r3
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	f00d fdf4 	bl	80151ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	425b      	negs	r3, r3
 800760c:	441a      	add	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d207      	bcs.n	800762e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	425b      	negs	r3, r3
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d105      	bne.n	8007640 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3b01      	subs	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007648:	697b      	ldr	r3, [r7, #20]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d018      	beq.n	8007696 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	441a      	add	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	d303      	bcc.n	8007686 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68d9      	ldr	r1, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	461a      	mov	r2, r3
 8007690:	6838      	ldr	r0, [r7, #0]
 8007692:	f00d fdaa 	bl	80151ea <memcpy>
	}
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076a6:	f7fe fe17 	bl	80062d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076b2:	e011      	b.n	80076d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d012      	beq.n	80076e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3324      	adds	r3, #36	; 0x24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fca5 	bl	8008010 <xTaskRemoveFromEventList>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076cc:	f000 fd7e 	bl	80081cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dce9      	bgt.n	80076b4 <prvUnlockQueue+0x16>
 80076e0:	e000      	b.n	80076e4 <prvUnlockQueue+0x46>
					break;
 80076e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	22ff      	movs	r2, #255	; 0xff
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076ec:	f7fe fe26 	bl	800633c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076f0:	f7fe fdf2 	bl	80062d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076fc:	e011      	b.n	8007722 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d012      	beq.n	800772c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3310      	adds	r3, #16
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fc80 	bl	8008010 <xTaskRemoveFromEventList>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007716:	f000 fd59 	bl	80081cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	3b01      	subs	r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dce9      	bgt.n	80076fe <prvUnlockQueue+0x60>
 800772a:	e000      	b.n	800772e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800772c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	22ff      	movs	r2, #255	; 0xff
 8007732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007736:	f7fe fe01 	bl	800633c <vPortExitCritical>
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800774a:	f7fe fdc5 	bl	80062d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e001      	b.n	8007760 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007760:	f7fe fdec 	bl	800633c <vPortExitCritical>

	return xReturn;
 8007764:	68fb      	ldr	r3, [r7, #12]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007776:	f7fe fdaf 	bl	80062d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	429a      	cmp	r2, r3
 8007784:	d102      	bne.n	800778c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007786:	2301      	movs	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e001      	b.n	8007790 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007790:	f7fe fdd4 	bl	800633c <vPortExitCritical>

	return xReturn;
 8007794:	68fb      	ldr	r3, [r7, #12]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b08e      	sub	sp, #56	; 0x38
 80077a2:	af04      	add	r7, sp, #16
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <xTaskCreateStatic+0x2c>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	b672      	cpsid	i
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	b662      	cpsie	i
 80077c6:	623b      	str	r3, [r7, #32]
 80077c8:	e7fe      	b.n	80077c8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10b      	bne.n	80077e8 <xTaskCreateStatic+0x4a>
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	b672      	cpsid	i
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	b662      	cpsie	i
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e7fe      	b.n	80077e6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077e8:	2354      	movs	r3, #84	; 0x54
 80077ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b54      	cmp	r3, #84	; 0x54
 80077f0:	d00b      	beq.n	800780a <xTaskCreateStatic+0x6c>
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	b672      	cpsid	i
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	b662      	cpsie	i
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e7fe      	b.n	8007808 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800780a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01e      	beq.n	8007850 <xTaskCreateStatic+0xb2>
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01b      	beq.n	8007850 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007820:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	2202      	movs	r2, #2
 8007826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800782a:	2300      	movs	r3, #0
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	9302      	str	r3, [sp, #8]
 8007832:	f107 0314 	add.w	r3, r7, #20
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f850 	bl	80078e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800784a:	f000 f8d5 	bl	80079f8 <prvAddNewTaskToReadyList>
 800784e:	e001      	b.n	8007854 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007854:	697b      	ldr	r3, [r7, #20]
	}
 8007856:	4618      	mov	r0, r3
 8007858:	3728      	adds	r7, #40	; 0x28
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800785e:	b580      	push	{r7, lr}
 8007860:	b08c      	sub	sp, #48	; 0x30
 8007862:	af04      	add	r7, sp, #16
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fe52 	bl	800651c <pvPortMalloc>
 8007878:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00e      	beq.n	800789e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007880:	2054      	movs	r0, #84	; 0x54
 8007882:	f7fe fe4b 	bl	800651c <pvPortMalloc>
 8007886:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
 8007894:	e005      	b.n	80078a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007896:	6978      	ldr	r0, [r7, #20]
 8007898:	f7fe ff08 	bl	80066ac <vPortFree>
 800789c:	e001      	b.n	80078a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d017      	beq.n	80078d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	2300      	movs	r3, #0
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f80e 	bl	80078e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078cc:	69f8      	ldr	r0, [r7, #28]
 80078ce:	f000 f893 	bl	80079f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e002      	b.n	80078de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295
 80078dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078de:	69bb      	ldr	r3, [r7, #24]
	}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007900:	440b      	add	r3, r1
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <prvInitialiseNewTask+0x4a>
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	b672      	cpsid	i
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	b662      	cpsie	i
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e7fe      	b.n	8007930 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01f      	beq.n	8007978 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
 800793c:	e012      	b.n	8007964 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	7819      	ldrb	r1, [r3, #0]
 8007946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	4413      	add	r3, r2
 800794c:	3334      	adds	r3, #52	; 0x34
 800794e:	460a      	mov	r2, r1
 8007950:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	4413      	add	r3, r2
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	3301      	adds	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d9e9      	bls.n	800793e <prvInitialiseNewTask+0x56>
 800796a:	e000      	b.n	800796e <prvInitialiseNewTask+0x86>
			{
				break;
 800796c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007976:	e003      	b.n	8007980 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b06      	cmp	r3, #6
 8007984:	d901      	bls.n	800798a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007986:	2306      	movs	r3, #6
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007994:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2200      	movs	r2, #0
 800799a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe faf9 	bl	8005f98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	3318      	adds	r3, #24
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe faf4 	bl	8005f98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	f1c3 0207 	rsb	r2, r3, #7
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2200      	movs	r2, #0
 80079ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	69b8      	ldr	r0, [r7, #24]
 80079da:	f7fe fb71 	bl	80060c0 <pxPortInitialiseStack>
 80079de:	4602      	mov	r2, r0
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f0:	bf00      	nop
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a00:	f7fe fc6a 	bl	80062d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a04:	4b2a      	ldr	r3, [pc, #168]	; (8007ab0 <prvAddNewTaskToReadyList+0xb8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	4a29      	ldr	r2, [pc, #164]	; (8007ab0 <prvAddNewTaskToReadyList+0xb8>)
 8007a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <prvAddNewTaskToReadyList+0xbc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a16:	4a27      	ldr	r2, [pc, #156]	; (8007ab4 <prvAddNewTaskToReadyList+0xbc>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a1c:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <prvAddNewTaskToReadyList+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d110      	bne.n	8007a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a24:	f000 fbf6 	bl	8008214 <prvInitialiseTaskLists>
 8007a28:	e00d      	b.n	8007a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a2a:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <prvAddNewTaskToReadyList+0xc0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a32:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <prvAddNewTaskToReadyList+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d802      	bhi.n	8007a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a40:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <prvAddNewTaskToReadyList+0xbc>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <prvAddNewTaskToReadyList+0xc4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <prvAddNewTaskToReadyList+0xc4>)
 8007a4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	2201      	movs	r2, #1
 8007a56:	409a      	lsls	r2, r3
 8007a58:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <prvAddNewTaskToReadyList+0xc8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <prvAddNewTaskToReadyList+0xc8>)
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <prvAddNewTaskToReadyList+0xcc>)
 8007a70:	441a      	add	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f7fe fa9a 	bl	8005fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a7e:	f7fe fc5d 	bl	800633c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a82:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <prvAddNewTaskToReadyList+0xc0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00e      	beq.n	8007aa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <prvAddNewTaskToReadyList+0xbc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d207      	bcs.n	8007aa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvAddNewTaskToReadyList+0xd0>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	2000681c 	.word	0x2000681c
 8007ab4:	2000671c 	.word	0x2000671c
 8007ab8:	20006828 	.word	0x20006828
 8007abc:	20006838 	.word	0x20006838
 8007ac0:	20006824 	.word	0x20006824
 8007ac4:	20006720 	.word	0x20006720
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d018      	beq.n	8007b10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ade:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <vTaskDelay+0x64>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <vTaskDelay+0x32>
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	b672      	cpsid	i
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	b662      	cpsie	i
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	e7fe      	b.n	8007afc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007afe:	f000 f87d 	bl	8007bfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fe17 	bl	8008738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b0a:	f000 f885 	bl	8007c18 <xTaskResumeAll>
 8007b0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <vTaskDelay+0x68>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20006844 	.word	0x20006844
 8007b34:	e000ed04 	.word	0xe000ed04

08007b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b46:	463a      	mov	r2, r7
 8007b48:	1d39      	adds	r1, r7, #4
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7f8 fd66 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	9202      	str	r2, [sp, #8]
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	2300      	movs	r3, #0
 8007b64:	460a      	mov	r2, r1
 8007b66:	491f      	ldr	r1, [pc, #124]	; (8007be4 <vTaskStartScheduler+0xac>)
 8007b68:	481f      	ldr	r0, [pc, #124]	; (8007be8 <vTaskStartScheduler+0xb0>)
 8007b6a:	f7ff fe18 	bl	800779e <xTaskCreateStatic>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	4b1e      	ldr	r3, [pc, #120]	; (8007bec <vTaskStartScheduler+0xb4>)
 8007b72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <vTaskStartScheduler+0xb4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	e001      	b.n	8007b86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d117      	bne.n	8007bbc <vTaskStartScheduler+0x84>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <vTaskStartScheduler+0xb8>)
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <vTaskStartScheduler+0xbc>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <vTaskStartScheduler+0xc0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bb6:	f7fe fb13 	bl	80061e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bba:	e00f      	b.n	8007bdc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d10b      	bne.n	8007bdc <vTaskStartScheduler+0xa4>
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	b672      	cpsid	i
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	b662      	cpsie	i
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e7fe      	b.n	8007bda <vTaskStartScheduler+0xa2>
}
 8007bdc:	bf00      	nop
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	080161d0 	.word	0x080161d0
 8007be8:	080081e5 	.word	0x080081e5
 8007bec:	20006840 	.word	0x20006840
 8007bf0:	2000683c 	.word	0x2000683c
 8007bf4:	20006828 	.word	0x20006828
 8007bf8:	20006820 	.word	0x20006820

08007bfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <vTaskSuspendAll+0x18>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a03      	ldr	r2, [pc, #12]	; (8007c14 <vTaskSuspendAll+0x18>)
 8007c08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c0a:	bf00      	nop
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20006844 	.word	0x20006844

08007c18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c26:	4b42      	ldr	r3, [pc, #264]	; (8007d30 <xTaskResumeAll+0x118>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <xTaskResumeAll+0x2e>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	e7fe      	b.n	8007c44 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c46:	f7fe fb47 	bl	80062d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c4a:	4b39      	ldr	r3, [pc, #228]	; (8007d30 <xTaskResumeAll+0x118>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4a37      	ldr	r2, [pc, #220]	; (8007d30 <xTaskResumeAll+0x118>)
 8007c52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c54:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <xTaskResumeAll+0x118>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d161      	bne.n	8007d20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <xTaskResumeAll+0x11c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05d      	beq.n	8007d20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c64:	e02e      	b.n	8007cc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c66:	4b34      	ldr	r3, [pc, #208]	; (8007d38 <xTaskResumeAll+0x120>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe f9fa 	bl	800606c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe f9f5 	bl	800606c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	2201      	movs	r2, #1
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <xTaskResumeAll+0x124>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <xTaskResumeAll+0x124>)
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <xTaskResumeAll+0x128>)
 8007ca2:	441a      	add	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7fe f981 	bl	8005fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <xTaskResumeAll+0x12c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007cbe:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <xTaskResumeAll+0x130>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <xTaskResumeAll+0x120>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1cc      	bne.n	8007c66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cd2:	f000 fb3b 	bl	800834c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTaskResumeAll+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ce2:	f000 f859 	bl	8007d98 <xTaskIncrementTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <xTaskResumeAll+0x130>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f1      	bne.n	8007ce2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <xTaskResumeAll+0x134>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d04:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <xTaskResumeAll+0x130>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d009      	beq.n	8007d20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d10:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <xTaskResumeAll+0x138>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d20:	f7fe fb0c 	bl	800633c <vPortExitCritical>

	return xAlreadyYielded;
 8007d24:	68bb      	ldr	r3, [r7, #8]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20006844 	.word	0x20006844
 8007d34:	2000681c 	.word	0x2000681c
 8007d38:	200067dc 	.word	0x200067dc
 8007d3c:	20006824 	.word	0x20006824
 8007d40:	20006720 	.word	0x20006720
 8007d44:	2000671c 	.word	0x2000671c
 8007d48:	20006830 	.word	0x20006830
 8007d4c:	2000682c 	.word	0x2000682c
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <xTaskGetTickCount+0x1c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d60:	687b      	ldr	r3, [r7, #4]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20006820 	.word	0x20006820

08007d74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d7a:	f7fe fb8d 	bl	8006498 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007d82:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <xTaskGetTickCountFromISR+0x20>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d88:	683b      	ldr	r3, [r7, #0]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20006820 	.word	0x20006820

08007d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da2:	4b4f      	ldr	r3, [pc, #316]	; (8007ee0 <xTaskIncrementTick+0x148>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f040 8089 	bne.w	8007ebe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dac:	4b4d      	ldr	r3, [pc, #308]	; (8007ee4 <xTaskIncrementTick+0x14c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007db4:	4a4b      	ldr	r2, [pc, #300]	; (8007ee4 <xTaskIncrementTick+0x14c>)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d121      	bne.n	8007e04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dc0:	4b49      	ldr	r3, [pc, #292]	; (8007ee8 <xTaskIncrementTick+0x150>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <xTaskIncrementTick+0x4a>
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	e7fe      	b.n	8007de0 <xTaskIncrementTick+0x48>
 8007de2:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <xTaskIncrementTick+0x150>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	4b40      	ldr	r3, [pc, #256]	; (8007eec <xTaskIncrementTick+0x154>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a3e      	ldr	r2, [pc, #248]	; (8007ee8 <xTaskIncrementTick+0x150>)
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	4a3e      	ldr	r2, [pc, #248]	; (8007eec <xTaskIncrementTick+0x154>)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <xTaskIncrementTick+0x158>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	4a3c      	ldr	r2, [pc, #240]	; (8007ef0 <xTaskIncrementTick+0x158>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	f000 faa4 	bl	800834c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e04:	4b3b      	ldr	r3, [pc, #236]	; (8007ef4 <xTaskIncrementTick+0x15c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d348      	bcc.n	8007ea0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e0e:	4b36      	ldr	r3, [pc, #216]	; (8007ee8 <xTaskIncrementTick+0x150>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e18:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <xTaskIncrementTick+0x15c>)
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	601a      	str	r2, [r3, #0]
					break;
 8007e20:	e03e      	b.n	8007ea0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e22:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <xTaskIncrementTick+0x150>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d203      	bcs.n	8007e42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e3a:	4a2e      	ldr	r2, [pc, #184]	; (8007ef4 <xTaskIncrementTick+0x15c>)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e40:	e02e      	b.n	8007ea0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe f910 	bl	800606c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3318      	adds	r3, #24
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe f907 	bl	800606c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	2201      	movs	r2, #1
 8007e64:	409a      	lsls	r2, r3
 8007e66:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <xTaskIncrementTick+0x160>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	4a22      	ldr	r2, [pc, #136]	; (8007ef8 <xTaskIncrementTick+0x160>)
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4a1f      	ldr	r2, [pc, #124]	; (8007efc <xTaskIncrementTick+0x164>)
 8007e7e:	441a      	add	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f7fe f893 	bl	8005fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <xTaskIncrementTick+0x168>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d3b9      	bcc.n	8007e0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e9e:	e7b6      	b.n	8007e0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <xTaskIncrementTick+0x168>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea6:	4915      	ldr	r1, [pc, #84]	; (8007efc <xTaskIncrementTick+0x164>)
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d907      	bls.n	8007ec8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e004      	b.n	8007ec8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <xTaskIncrementTick+0x16c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	; (8007f04 <xTaskIncrementTick+0x16c>)
 8007ec6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <xTaskIncrementTick+0x170>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ed4:	697b      	ldr	r3, [r7, #20]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20006844 	.word	0x20006844
 8007ee4:	20006820 	.word	0x20006820
 8007ee8:	200067d4 	.word	0x200067d4
 8007eec:	200067d8 	.word	0x200067d8
 8007ef0:	20006834 	.word	0x20006834
 8007ef4:	2000683c 	.word	0x2000683c
 8007ef8:	20006824 	.word	0x20006824
 8007efc:	20006720 	.word	0x20006720
 8007f00:	2000671c 	.word	0x2000671c
 8007f04:	2000682c 	.word	0x2000682c
 8007f08:	20006830 	.word	0x20006830

08007f0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f12:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <vTaskSwitchContext+0xa4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f1a:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <vTaskSwitchContext+0xa8>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f20:	e040      	b.n	8007fa4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <vTaskSwitchContext+0xa8>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f28:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <vTaskSwitchContext+0xac>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	fab3 f383 	clz	r3, r3
 8007f34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	f1c3 031f 	rsb	r3, r3, #31
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	491f      	ldr	r1, [pc, #124]	; (8007fbc <vTaskSwitchContext+0xb0>)
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	b672      	cpsid	i
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	b662      	cpsie	i
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	e7fe      	b.n	8007f68 <vTaskSwitchContext+0x5c>
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a11      	ldr	r2, [pc, #68]	; (8007fbc <vTaskSwitchContext+0xb0>)
 8007f76:	4413      	add	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d104      	bne.n	8007f9a <vTaskSwitchContext+0x8e>
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <vTaskSwitchContext+0xb4>)
 8007fa2:	6013      	str	r3, [r2, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	20006844 	.word	0x20006844
 8007fb4:	20006830 	.word	0x20006830
 8007fb8:	20006824 	.word	0x20006824
 8007fbc:	20006720 	.word	0x20006720
 8007fc0:	2000671c 	.word	0x2000671c

08007fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <vTaskPlaceOnEventList+0x28>
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e7fe      	b.n	8007fea <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <vTaskPlaceOnEventList+0x48>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3318      	adds	r3, #24
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fe f800 	bl	8005ffa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6838      	ldr	r0, [r7, #0]
 8007ffe:	f000 fb9b 	bl	8008738 <prvAddCurrentTaskToDelayedList>
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	2000671c 	.word	0x2000671c

08008010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <xTaskRemoveFromEventList+0x2e>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	b672      	cpsid	i
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	b662      	cpsie	i
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e7fe      	b.n	800803c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3318      	adds	r3, #24
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe f812 	bl	800606c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <xTaskRemoveFromEventList+0xb0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d11c      	bne.n	800808a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3304      	adds	r3, #4
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe f809 	bl	800606c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	2201      	movs	r2, #1
 8008060:	409a      	lsls	r2, r3
 8008062:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <xTaskRemoveFromEventList+0xb4>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4313      	orrs	r3, r2
 8008068:	4a16      	ldr	r2, [pc, #88]	; (80080c4 <xTaskRemoveFromEventList+0xb4>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <xTaskRemoveFromEventList+0xb8>)
 800807a:	441a      	add	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7fd ff95 	bl	8005fb2 <vListInsertEnd>
 8008088:	e005      	b.n	8008096 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3318      	adds	r3, #24
 800808e:	4619      	mov	r1, r3
 8008090:	480e      	ldr	r0, [pc, #56]	; (80080cc <xTaskRemoveFromEventList+0xbc>)
 8008092:	f7fd ff8e 	bl	8005fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <xTaskRemoveFromEventList+0xc0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d905      	bls.n	80080b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <xTaskRemoveFromEventList+0xc4>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e001      	b.n	80080b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080b4:	697b      	ldr	r3, [r7, #20]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20006844 	.word	0x20006844
 80080c4:	20006824 	.word	0x20006824
 80080c8:	20006720 	.word	0x20006720
 80080cc:	200067dc 	.word	0x200067dc
 80080d0:	2000671c 	.word	0x2000671c
 80080d4:	20006830 	.word	0x20006830

080080d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <vTaskInternalSetTimeOutState+0x24>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <vTaskInternalSetTimeOutState+0x28>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	605a      	str	r2, [r3, #4]
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	20006834 	.word	0x20006834
 8008100:	20006820 	.word	0x20006820

08008104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <xTaskCheckForTimeOut+0x28>
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	b672      	cpsid	i
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	b662      	cpsie	i
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	e7fe      	b.n	800812a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <xTaskCheckForTimeOut+0x46>
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e7fe      	b.n	8008148 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800814a:	f7fe f8c5 	bl	80062d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800814e:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <xTaskCheckForTimeOut+0xc0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d102      	bne.n	800816e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	e023      	b.n	80081b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <xTaskCheckForTimeOut+0xc4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d007      	beq.n	800818a <xTaskCheckForTimeOut+0x86>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	429a      	cmp	r2, r3
 8008182:	d802      	bhi.n	800818a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	e015      	b.n	80081b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	429a      	cmp	r2, r3
 8008192:	d90b      	bls.n	80081ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff99 	bl	80080d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
 80081aa:	e004      	b.n	80081b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081b6:	f7fe f8c1 	bl	800633c <vPortExitCritical>

	return xReturn;
 80081ba:	69fb      	ldr	r3, [r7, #28]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3720      	adds	r7, #32
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20006820 	.word	0x20006820
 80081c8:	20006834 	.word	0x20006834

080081cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <vTaskMissedYield+0x14>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	20006830 	.word	0x20006830

080081e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081ec:	f000 f852 	bl	8008294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <prvIdleTask+0x28>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d9f9      	bls.n	80081ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <prvIdleTask+0x2c>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008208:	e7f0      	b.n	80081ec <prvIdleTask+0x8>
 800820a:	bf00      	nop
 800820c:	20006720 	.word	0x20006720
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800821a:	2300      	movs	r3, #0
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	e00c      	b.n	800823a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4a12      	ldr	r2, [pc, #72]	; (8008274 <prvInitialiseTaskLists+0x60>)
 800822c:	4413      	add	r3, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7fd fe92 	bl	8005f58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3301      	adds	r3, #1
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b06      	cmp	r3, #6
 800823e:	d9ef      	bls.n	8008220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008240:	480d      	ldr	r0, [pc, #52]	; (8008278 <prvInitialiseTaskLists+0x64>)
 8008242:	f7fd fe89 	bl	8005f58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008246:	480d      	ldr	r0, [pc, #52]	; (800827c <prvInitialiseTaskLists+0x68>)
 8008248:	f7fd fe86 	bl	8005f58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800824c:	480c      	ldr	r0, [pc, #48]	; (8008280 <prvInitialiseTaskLists+0x6c>)
 800824e:	f7fd fe83 	bl	8005f58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008252:	480c      	ldr	r0, [pc, #48]	; (8008284 <prvInitialiseTaskLists+0x70>)
 8008254:	f7fd fe80 	bl	8005f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008258:	480b      	ldr	r0, [pc, #44]	; (8008288 <prvInitialiseTaskLists+0x74>)
 800825a:	f7fd fe7d 	bl	8005f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <prvInitialiseTaskLists+0x78>)
 8008260:	4a05      	ldr	r2, [pc, #20]	; (8008278 <prvInitialiseTaskLists+0x64>)
 8008262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008264:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <prvInitialiseTaskLists+0x7c>)
 8008266:	4a05      	ldr	r2, [pc, #20]	; (800827c <prvInitialiseTaskLists+0x68>)
 8008268:	601a      	str	r2, [r3, #0]
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20006720 	.word	0x20006720
 8008278:	200067ac 	.word	0x200067ac
 800827c:	200067c0 	.word	0x200067c0
 8008280:	200067dc 	.word	0x200067dc
 8008284:	200067f0 	.word	0x200067f0
 8008288:	20006808 	.word	0x20006808
 800828c:	200067d4 	.word	0x200067d4
 8008290:	200067d8 	.word	0x200067d8

08008294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800829a:	e019      	b.n	80082d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800829c:	f7fe f81c 	bl	80062d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a0:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <prvCheckTasksWaitingTermination+0x4c>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fedd 	bl	800606c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <prvCheckTasksWaitingTermination+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	4a0a      	ldr	r2, [pc, #40]	; (80082e4 <prvCheckTasksWaitingTermination+0x50>)
 80082ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <prvCheckTasksWaitingTermination+0x54>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <prvCheckTasksWaitingTermination+0x54>)
 80082c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082c6:	f7fe f839 	bl	800633c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f80e 	bl	80082ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <prvCheckTasksWaitingTermination+0x54>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e1      	bne.n	800829c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200067f0 	.word	0x200067f0
 80082e4:	2000681c 	.word	0x2000681c
 80082e8:	20006804 	.word	0x20006804

080082ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d108      	bne.n	8008310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe f9d2 	bl	80066ac <vPortFree>
				vPortFree( pxTCB );
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fe f9cf 	bl	80066ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800830e:	e019      	b.n	8008344 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008316:	2b01      	cmp	r3, #1
 8008318:	d103      	bne.n	8008322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fe f9c6 	bl	80066ac <vPortFree>
	}
 8008320:	e010      	b.n	8008344 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008328:	2b02      	cmp	r3, #2
 800832a:	d00b      	beq.n	8008344 <prvDeleteTCB+0x58>
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	b672      	cpsid	i
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	b662      	cpsie	i
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e7fe      	b.n	8008342 <prvDeleteTCB+0x56>
	}
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <prvResetNextTaskUnblockTime+0x38>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <prvResetNextTaskUnblockTime+0x3c>)
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008364:	e008      	b.n	8008378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008366:	4b07      	ldr	r3, [pc, #28]	; (8008384 <prvResetNextTaskUnblockTime+0x38>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4a04      	ldr	r2, [pc, #16]	; (8008388 <prvResetNextTaskUnblockTime+0x3c>)
 8008376:	6013      	str	r3, [r2, #0]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	200067d4 	.word	0x200067d4
 8008388:	2000683c 	.word	0x2000683c

0800838c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008392:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <xTaskGetSchedulerState+0x34>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800839a:	2301      	movs	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	e008      	b.n	80083b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a0:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <xTaskGetSchedulerState+0x38>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083a8:	2302      	movs	r3, #2
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	e001      	b.n	80083b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083b2:	687b      	ldr	r3, [r7, #4]
	}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20006828 	.word	0x20006828
 80083c4:	20006844 	.word	0x20006844

080083c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d069      	beq.n	80084b2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	4b36      	ldr	r3, [pc, #216]	; (80084bc <xTaskPriorityInherit+0xf4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d259      	bcs.n	80084a0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	db06      	blt.n	8008402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f4:	4b31      	ldr	r3, [pc, #196]	; (80084bc <xTaskPriorityInherit+0xf4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	f1c3 0207 	rsb	r2, r3, #7
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6959      	ldr	r1, [r3, #20]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4a2b      	ldr	r2, [pc, #172]	; (80084c0 <xTaskPriorityInherit+0xf8>)
 8008414:	4413      	add	r3, r2
 8008416:	4299      	cmp	r1, r3
 8008418:	d13a      	bne.n	8008490 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	3304      	adds	r3, #4
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd fe24 	bl	800606c <uxListRemove>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d115      	bne.n	8008456 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842e:	4924      	ldr	r1, [pc, #144]	; (80084c0 <xTaskPriorityInherit+0xf8>)
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xTaskPriorityInherit+0x8e>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	2201      	movs	r2, #1
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	43da      	mvns	r2, r3
 800844c:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <xTaskPriorityInherit+0xfc>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4013      	ands	r3, r2
 8008452:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <xTaskPriorityInherit+0xfc>)
 8008454:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008456:	4b19      	ldr	r3, [pc, #100]	; (80084bc <xTaskPriorityInherit+0xf4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	2201      	movs	r2, #1
 8008466:	409a      	lsls	r2, r3
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <xTaskPriorityInherit+0xfc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4313      	orrs	r3, r2
 800846e:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <xTaskPriorityInherit+0xfc>)
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <xTaskPriorityInherit+0xf8>)
 8008480:	441a      	add	r2, r3
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fd fd92 	bl	8005fb2 <vListInsertEnd>
 800848e:	e004      	b.n	800849a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <xTaskPriorityInherit+0xf4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800849a:	2301      	movs	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e008      	b.n	80084b2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <xTaskPriorityInherit+0xf4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d201      	bcs.n	80084b2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084ae:	2301      	movs	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084b2:	68fb      	ldr	r3, [r7, #12]
	}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	2000671c 	.word	0x2000671c
 80084c0:	20006720 	.word	0x20006720
 80084c4:	20006824 	.word	0x20006824

080084c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d070      	beq.n	80085c0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084de:	4b3b      	ldr	r3, [pc, #236]	; (80085cc <xTaskPriorityDisinherit+0x104>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d00b      	beq.n	8008500 <xTaskPriorityDisinherit+0x38>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	b672      	cpsid	i
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	b662      	cpsie	i
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e7fe      	b.n	80084fe <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <xTaskPriorityDisinherit+0x58>
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	e7fe      	b.n	800851e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008524:	1e5a      	subs	r2, r3, #1
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	429a      	cmp	r2, r3
 8008534:	d044      	beq.n	80085c0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	2b00      	cmp	r3, #0
 800853c:	d140      	bne.n	80085c0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fd92 	bl	800606c <uxListRemove>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d115      	bne.n	800857a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008552:	491f      	ldr	r1, [pc, #124]	; (80085d0 <xTaskPriorityDisinherit+0x108>)
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xTaskPriorityDisinherit+0xb2>
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	2201      	movs	r2, #1
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <xTaskPriorityDisinherit+0x10c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4013      	ands	r3, r2
 8008576:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <xTaskPriorityDisinherit+0x10c>)
 8008578:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f1c3 0207 	rsb	r2, r3, #7
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	2201      	movs	r2, #1
 8008594:	409a      	lsls	r2, r3
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <xTaskPriorityDisinherit+0x10c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	4a0d      	ldr	r2, [pc, #52]	; (80085d4 <xTaskPriorityDisinherit+0x10c>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <xTaskPriorityDisinherit+0x108>)
 80085ae:	441a      	add	r2, r3
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7fd fcfb 	bl	8005fb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085c0:	697b      	ldr	r3, [r7, #20]
	}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	2000671c 	.word	0x2000671c
 80085d0:	20006720 	.word	0x20006720
 80085d4:	20006824 	.word	0x20006824

080085d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8085 	beq.w	80086fc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	b672      	cpsid	i
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	b662      	cpsie	i
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e7fe      	b.n	8008610 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d202      	bcs.n	8008622 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e002      	b.n	8008628 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	429a      	cmp	r2, r3
 8008630:	d064      	beq.n	80086fc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	429a      	cmp	r2, r3
 800863a:	d15f      	bne.n	80086fc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800863c:	4b31      	ldr	r3, [pc, #196]	; (8008704 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	429a      	cmp	r2, r3
 8008644:	d10b      	bne.n	800865e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	b672      	cpsid	i
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	b662      	cpsie	i
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	e7fe      	b.n	800865c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	db04      	blt.n	800867c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	f1c3 0207 	rsb	r2, r3, #7
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	6959      	ldr	r1, [r3, #20]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a1f      	ldr	r2, [pc, #124]	; (8008708 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800868c:	4413      	add	r3, r2
 800868e:	4299      	cmp	r1, r3
 8008690:	d134      	bne.n	80086fc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fd fce8 	bl	800606c <uxListRemove>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d115      	bne.n	80086ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	4918      	ldr	r1, [pc, #96]	; (8008708 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	2201      	movs	r2, #1
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43da      	mvns	r2, r3
 80086c4:	4b11      	ldr	r3, [pc, #68]	; (800870c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4013      	ands	r3, r2
 80086ca:	4a10      	ldr	r2, [pc, #64]	; (800870c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80086cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	2201      	movs	r2, #1
 80086d4:	409a      	lsls	r2, r3
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	4a0b      	ldr	r2, [pc, #44]	; (800870c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a06      	ldr	r2, [pc, #24]	; (8008708 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80086ee:	441a      	add	r2, r3
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7fd fc5b 	bl	8005fb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086fc:	bf00      	nop
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	2000671c 	.word	0x2000671c
 8008708:	20006720 	.word	0x20006720
 800870c:	20006824 	.word	0x20006824

08008710 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <pvTaskIncrementMutexHeldCount+0x24>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800871c:	4b05      	ldr	r3, [pc, #20]	; (8008734 <pvTaskIncrementMutexHeldCount+0x24>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008722:	3201      	adds	r2, #1
 8008724:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008726:	4b03      	ldr	r3, [pc, #12]	; (8008734 <pvTaskIncrementMutexHeldCount+0x24>)
 8008728:	681b      	ldr	r3, [r3, #0]
	}
 800872a:	4618      	mov	r0, r3
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	2000671c 	.word	0x2000671c

08008738 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008742:	4b29      	ldr	r3, [pc, #164]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008748:	4b28      	ldr	r3, [pc, #160]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	f7fd fc8c 	bl	800606c <uxListRemove>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800875a:	4b24      	ldr	r3, [pc, #144]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	2201      	movs	r2, #1
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43da      	mvns	r2, r3
 8008768:	4b21      	ldr	r3, [pc, #132]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4013      	ands	r3, r2
 800876e:	4a20      	ldr	r2, [pc, #128]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008770:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d10a      	bne.n	8008790 <prvAddCurrentTaskToDelayedList+0x58>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008780:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	481a      	ldr	r0, [pc, #104]	; (80087f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800878a:	f7fd fc12 	bl	8005fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800878e:	e026      	b.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d209      	bcs.n	80087bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a8:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f7fd fc20 	bl	8005ffa <vListInsert>
}
 80087ba:	e010      	b.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7fd fc16 	bl	8005ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d202      	bcs.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6013      	str	r3, [r2, #0]
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20006820 	.word	0x20006820
 80087ec:	2000671c 	.word	0x2000671c
 80087f0:	20006824 	.word	0x20006824
 80087f4:	20006808 	.word	0x20006808
 80087f8:	200067d8 	.word	0x200067d8
 80087fc:	200067d4 	.word	0x200067d4
 8008800:	2000683c 	.word	0x2000683c

08008804 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800880e:	f00b fdfb 	bl	8014408 <sys_timeouts_sleeptime>
 8008812:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d10b      	bne.n	8008834 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800881c:	4813      	ldr	r0, [pc, #76]	; (800886c <tcpip_timeouts_mbox_fetch+0x68>)
 800881e:	f00c fc36 	bl	801508e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008822:	2200      	movs	r2, #0
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f00c fba8 	bl	8014f7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800882c:	480f      	ldr	r0, [pc, #60]	; (800886c <tcpip_timeouts_mbox_fetch+0x68>)
 800882e:	f00c fc1f 	bl	8015070 <sys_mutex_lock>
    return;
 8008832:	e018      	b.n	8008866 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800883a:	f00b fdaf 	bl	801439c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800883e:	e7e6      	b.n	800880e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008840:	480a      	ldr	r0, [pc, #40]	; (800886c <tcpip_timeouts_mbox_fetch+0x68>)
 8008842:	f00c fc24 	bl	801508e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f00c fb96 	bl	8014f7c <sys_arch_mbox_fetch>
 8008850:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008852:	4806      	ldr	r0, [pc, #24]	; (800886c <tcpip_timeouts_mbox_fetch+0x68>)
 8008854:	f00c fc0c 	bl	8015070 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d102      	bne.n	8008866 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008860:	f00b fd9c 	bl	801439c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008864:	e7d3      	b.n	800880e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200074bc 	.word	0x200074bc

08008870 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008878:	4810      	ldr	r0, [pc, #64]	; (80088bc <tcpip_thread+0x4c>)
 800887a:	f00c fbf9 	bl	8015070 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <tcpip_thread+0x50>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008886:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <tcpip_thread+0x50>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <tcpip_thread+0x54>)
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	4610      	mov	r0, r2
 8008890:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008892:	f107 030c 	add.w	r3, r7, #12
 8008896:	4619      	mov	r1, r3
 8008898:	480b      	ldr	r0, [pc, #44]	; (80088c8 <tcpip_thread+0x58>)
 800889a:	f7ff ffb3 	bl	8008804 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80088a4:	4b09      	ldr	r3, [pc, #36]	; (80088cc <tcpip_thread+0x5c>)
 80088a6:	2291      	movs	r2, #145	; 0x91
 80088a8:	4909      	ldr	r1, [pc, #36]	; (80088d0 <tcpip_thread+0x60>)
 80088aa:	480a      	ldr	r0, [pc, #40]	; (80088d4 <tcpip_thread+0x64>)
 80088ac:	f00c fcb0 	bl	8015210 <iprintf>
      continue;
 80088b0:	e003      	b.n	80088ba <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 f80f 	bl	80088d8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80088ba:	e7ea      	b.n	8008892 <tcpip_thread+0x22>
 80088bc:	200074bc 	.word	0x200074bc
 80088c0:	20006848 	.word	0x20006848
 80088c4:	2000684c 	.word	0x2000684c
 80088c8:	20006850 	.word	0x20006850
 80088cc:	080161d8 	.word	0x080161d8
 80088d0:	08016208 	.word	0x08016208
 80088d4:	08016228 	.word	0x08016228

080088d8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d018      	beq.n	800891a <tcpip_thread_handle_msg+0x42>
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d021      	beq.n	8008930 <tcpip_thread_handle_msg+0x58>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d126      	bne.n	800893e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6850      	ldr	r0, [r2, #4]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6892      	ldr	r2, [r2, #8]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4798      	blx	r3
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	4618      	mov	r0, r3
 800890c:	f004 ffdc 	bl	800d8c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	2009      	movs	r0, #9
 8008914:	f004 f936 	bl	800cb84 <memp_free>
      break;
 8008918:	e018      	b.n	800894c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6892      	ldr	r2, [r2, #8]
 8008922:	4610      	mov	r0, r2
 8008924:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	2008      	movs	r0, #8
 800892a:	f004 f92b 	bl	800cb84 <memp_free>
      break;
 800892e:	e00d      	b.n	800894c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6892      	ldr	r2, [r2, #8]
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
      break;
 800893c:	e006      	b.n	800894c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <tcpip_thread_handle_msg+0x7c>)
 8008940:	22cf      	movs	r2, #207	; 0xcf
 8008942:	4905      	ldr	r1, [pc, #20]	; (8008958 <tcpip_thread_handle_msg+0x80>)
 8008944:	4805      	ldr	r0, [pc, #20]	; (800895c <tcpip_thread_handle_msg+0x84>)
 8008946:	f00c fc63 	bl	8015210 <iprintf>
      break;
 800894a:	bf00      	nop
  }
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	080161d8 	.word	0x080161d8
 8008958:	08016208 	.word	0x08016208
 800895c:	08016228 	.word	0x08016228

08008960 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800896c:	481a      	ldr	r0, [pc, #104]	; (80089d8 <tcpip_inpkt+0x78>)
 800896e:	f00c fb44 	bl	8014ffa <sys_mbox_valid>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <tcpip_inpkt+0x24>
 8008978:	4b18      	ldr	r3, [pc, #96]	; (80089dc <tcpip_inpkt+0x7c>)
 800897a:	22fc      	movs	r2, #252	; 0xfc
 800897c:	4918      	ldr	r1, [pc, #96]	; (80089e0 <tcpip_inpkt+0x80>)
 800897e:	4819      	ldr	r0, [pc, #100]	; (80089e4 <tcpip_inpkt+0x84>)
 8008980:	f00c fc46 	bl	8015210 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008984:	2009      	movs	r0, #9
 8008986:	f004 f8ab 	bl	800cae0 <memp_malloc>
 800898a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	e01a      	b.n	80089ce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80089b0:	6979      	ldr	r1, [r7, #20]
 80089b2:	4809      	ldr	r0, [pc, #36]	; (80089d8 <tcpip_inpkt+0x78>)
 80089b4:	f00c fac8 	bl	8014f48 <sys_mbox_trypost>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d006      	beq.n	80089cc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	2009      	movs	r0, #9
 80089c2:	f004 f8df 	bl	800cb84 <memp_free>
    return ERR_MEM;
 80089c6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ca:	e000      	b.n	80089ce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80089cc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20006850 	.word	0x20006850
 80089dc:	080161d8 	.word	0x080161d8
 80089e0:	08016250 	.word	0x08016250
 80089e4:	08016228 	.word	0x08016228

080089e8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089f8:	f003 0318 	and.w	r3, r3, #24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008a00:	4a08      	ldr	r2, [pc, #32]	; (8008a24 <tcpip_input+0x3c>)
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff ffab 	bl	8008960 <tcpip_inpkt>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	e005      	b.n	8008a1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008a0e:	4a06      	ldr	r2, [pc, #24]	; (8008a28 <tcpip_input+0x40>)
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff ffa4 	bl	8008960 <tcpip_inpkt>
 8008a18:	4603      	mov	r3, r0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	08014d59 	.word	0x08014d59
 8008a28:	0800b12d 	.word	0x0800b12d

08008a2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008a36:	4819      	ldr	r0, [pc, #100]	; (8008a9c <tcpip_try_callback+0x70>)
 8008a38:	f00c fadf 	bl	8014ffa <sys_mbox_valid>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <tcpip_try_callback+0x24>
 8008a42:	4b17      	ldr	r3, [pc, #92]	; (8008aa0 <tcpip_try_callback+0x74>)
 8008a44:	f240 125d 	movw	r2, #349	; 0x15d
 8008a48:	4916      	ldr	r1, [pc, #88]	; (8008aa4 <tcpip_try_callback+0x78>)
 8008a4a:	4817      	ldr	r0, [pc, #92]	; (8008aa8 <tcpip_try_callback+0x7c>)
 8008a4c:	f00c fbe0 	bl	8015210 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008a50:	2008      	movs	r0, #8
 8008a52:	f004 f845 	bl	800cae0 <memp_malloc>
 8008a56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a62:	e017      	b.n	8008a94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <tcpip_try_callback+0x70>)
 8008a7a:	f00c fa65 	bl	8014f48 <sys_mbox_trypost>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008a84:	68f9      	ldr	r1, [r7, #12]
 8008a86:	2008      	movs	r0, #8
 8008a88:	f004 f87c 	bl	800cb84 <memp_free>
    return ERR_MEM;
 8008a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a90:	e000      	b.n	8008a94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20006850 	.word	0x20006850
 8008aa0:	080161d8 	.word	0x080161d8
 8008aa4:	08016250 	.word	0x08016250
 8008aa8:	08016228 	.word	0x08016228

08008aac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008ab6:	f001 f9af 	bl	8009e18 <lwip_init>

  tcpip_init_done = initfunc;
 8008aba:	4a17      	ldr	r2, [pc, #92]	; (8008b18 <tcpip_init+0x6c>)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008ac0:	4a16      	ldr	r2, [pc, #88]	; (8008b1c <tcpip_init+0x70>)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008ac6:	2106      	movs	r1, #6
 8008ac8:	4815      	ldr	r0, [pc, #84]	; (8008b20 <tcpip_init+0x74>)
 8008aca:	f00c fa1b 	bl	8014f04 <sys_mbox_new>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <tcpip_init+0x78>)
 8008ad6:	f240 2261 	movw	r2, #609	; 0x261
 8008ada:	4913      	ldr	r1, [pc, #76]	; (8008b28 <tcpip_init+0x7c>)
 8008adc:	4813      	ldr	r0, [pc, #76]	; (8008b2c <tcpip_init+0x80>)
 8008ade:	f00c fb97 	bl	8015210 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008ae2:	4813      	ldr	r0, [pc, #76]	; (8008b30 <tcpip_init+0x84>)
 8008ae4:	f00c faa8 	bl	8015038 <sys_mutex_new>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d006      	beq.n	8008afc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <tcpip_init+0x78>)
 8008af0:	f240 2265 	movw	r2, #613	; 0x265
 8008af4:	490f      	ldr	r1, [pc, #60]	; (8008b34 <tcpip_init+0x88>)
 8008af6:	480d      	ldr	r0, [pc, #52]	; (8008b2c <tcpip_init+0x80>)
 8008af8:	f00c fb8a 	bl	8015210 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b04:	2200      	movs	r2, #0
 8008b06:	490c      	ldr	r1, [pc, #48]	; (8008b38 <tcpip_init+0x8c>)
 8008b08:	480c      	ldr	r0, [pc, #48]	; (8008b3c <tcpip_init+0x90>)
 8008b0a:	f00c facd 	bl	80150a8 <sys_thread_new>
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20006848 	.word	0x20006848
 8008b1c:	2000684c 	.word	0x2000684c
 8008b20:	20006850 	.word	0x20006850
 8008b24:	080161d8 	.word	0x080161d8
 8008b28:	08016260 	.word	0x08016260
 8008b2c:	08016228 	.word	0x08016228
 8008b30:	200074bc 	.word	0x200074bc
 8008b34:	08016284 	.word	0x08016284
 8008b38:	08008871 	.word	0x08008871
 8008b3c:	080162a8 	.word	0x080162a8

08008b40 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <fs_open+0x16>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <fs_open+0x1c>
    return ERR_ARG;
 8008b56:	f06f 030f 	mvn.w	r3, #15
 8008b5a:	e028      	b.n	8008bae <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008b5c:	4b16      	ldr	r3, [pc, #88]	; (8008bb8 <fs_open+0x78>)
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	e020      	b.n	8008ba4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6838      	ldr	r0, [r7, #0]
 8008b6a:	f7f7 fb69 	bl	8000240 <strcmp>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d114      	bne.n	8008b9e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	7c1a      	ldrb	r2, [r3, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e007      	b.n	8008bae <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1db      	bne.n	8008b62 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8008baa:	f06f 0305 	mvn.w	r3, #5
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	08019d0c 	.word	0x08019d0c

08008bbc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	1ad3      	subs	r3, r2, r3
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008bf6:	222c      	movs	r2, #44	; 0x2c
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f00c fb00 	bl	8015200 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008c0e:	202c      	movs	r0, #44	; 0x2c
 8008c10:	f003 fde4 	bl	800c7dc <mem_malloc>
 8008c14:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <http_state_alloc+0x1a>
    http_state_init(ret);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ffe6 	bl	8008bee <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008c22:	687b      	ldr	r3, [r7, #4]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d007      	beq.n	8008c4c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff ffbb 	bl	8008bbc <fs_close>
    hs->handle = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f004 fe35 	bl	800d8c8 <pbuf_free>
    hs->req = NULL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <http_state_free+0x1a>
    http_state_eof(hs);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff ffd6 	bl	8008c2c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f003 fc11 	bl	800c4a8 <mem_free>
  }
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <http_write+0x22>
 8008ca4:	4b2c      	ldr	r3, [pc, #176]	; (8008d58 <http_write+0xc8>)
 8008ca6:	f240 2219 	movw	r2, #537	; 0x219
 8008caa:	492c      	ldr	r1, [pc, #176]	; (8008d5c <http_write+0xcc>)
 8008cac:	482c      	ldr	r0, [pc, #176]	; (8008d60 <http_write+0xd0>)
 8008cae:	f00c faaf 	bl	8015210 <iprintf>
  len = *length;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008cb8:	8afb      	ldrh	r3, [r7, #22]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <http_write+0x32>
    return ERR_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e045      	b.n	8008d4e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008cc8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008cca:	8aba      	ldrh	r2, [r7, #20]
 8008ccc:	8afb      	ldrh	r3, [r7, #22]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d201      	bcs.n	8008cd6 <http_write+0x46>
    len = max_len;
 8008cd2:	8abb      	ldrh	r3, [r7, #20]
 8008cd4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008cde:	8afa      	ldrh	r2, [r7, #22]
 8008ce0:	8abb      	ldrh	r3, [r7, #20]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d901      	bls.n	8008cea <http_write+0x5a>
    len = max_len;
 8008ce6:	8abb      	ldrh	r3, [r7, #20]
 8008ce8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	8afa      	ldrh	r2, [r7, #22]
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f009 fcd9 	bl	80126a8 <tcp_write>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008cfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d02:	d10f      	bne.n	8008d24 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d902      	bls.n	8008d1e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	82fb      	strh	r3, [r7, #22]
 8008d1c:	e002      	b.n	8008d24 <http_write+0x94>
      } else {
        len /= 2;
 8008d1e:	8afb      	ldrh	r3, [r7, #22]
 8008d20:	085b      	lsrs	r3, r3, #1
 8008d22:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008d24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d102      	bne.n	8008d34 <http_write+0xa4>
 8008d2e:	8afb      	ldrh	r3, [r7, #22]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d8da      	bhi.n	8008cea <http_write+0x5a>

  if (err == ERR_OK) {
 8008d34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8afa      	ldrh	r2, [r7, #22]
 8008d40:	801a      	strh	r2, [r3, #0]
 8008d42:	e002      	b.n	8008d4a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008d4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	080162f8 	.word	0x080162f8
 8008d5c:	08016330 	.word	0x08016330
 8008d60:	08016340 	.word	0x08016340

08008d64 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008d72:	2100      	movs	r1, #0
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f006 fd59 	bl	800f82c <tcp_arg>
  altcp_recv(pcb, NULL);
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f006 fd67 	bl	800f850 <tcp_recv>
  altcp_err(pcb, NULL);
 8008d82:	2100      	movs	r1, #0
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f006 fda7 	bl	800f8d8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f006 fddc 	bl	800f94c <tcp_poll>
  altcp_sent(pcb, NULL);
 8008d94:	2100      	movs	r1, #0
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f006 fd7c 	bl	800f894 <tcp_sent>
  if (hs != NULL) {
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008da2:	68b8      	ldr	r0, [r7, #8]
 8008da4:	f7ff ff62 	bl	8008c6c <http_state_free>
  }

  if (abort_conn) {
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f005 fc80 	bl	800e6b4 <tcp_abort>
    return ERR_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e00f      	b.n	8008dd8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f005 fb91 	bl	800e4e0 <tcp_close>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008dca:	2204      	movs	r2, #4
 8008dcc:	4904      	ldr	r1, [pc, #16]	; (8008de0 <http_close_or_abort_conn+0x7c>)
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f006 fdbc 	bl	800f94c <tcp_poll>
  }
  return err;
 8008dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	080094a7 	.word	0x080094a7

08008de4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008dee:	2200      	movs	r2, #0
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff ffb6 	bl	8008d64 <http_close_or_abort_conn>
 8008df8:	4603      	mov	r3, r0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff ffe8 	bl	8008de4 <http_close_conn>
  }
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d105      	bne.n	8008e3a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff ffe6 	bl	8008e02 <http_eof>
    return 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e016      	b.n	8008e68 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fec6 	bl	8008bd0 <fs_bytes_left>
 8008e44:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc05      	bgt.n	8008e58 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff ffd7 	bl	8008e02 <http_eof>
    return 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e007      	b.n	8008e68 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <http_check_eof+0x54>)
 8008e5a:	f240 429d 	movw	r2, #1181	; 0x49d
 8008e5e:	4905      	ldr	r1, [pc, #20]	; (8008e74 <http_check_eof+0x58>)
 8008e60:	4805      	ldr	r0, [pc, #20]	; (8008e78 <http_check_eof+0x5c>)
 8008e62:	f00c f9d5 	bl	8015210 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008e66:	2301      	movs	r3, #1
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	080162f8 	.word	0x080162f8
 8008e74:	08016368 	.word	0x08016368
 8008e78:	08016340 	.word	0x08016340

08008e7c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d803      	bhi.n	8008e9e <http_send_data_nonssi+0x22>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	e001      	b.n	8008ea2 <http_send_data_nonssi+0x26>
 8008e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ea2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6999      	ldr	r1, [r3, #24]
 8008ea8:	f107 020c 	add.w	r2, r7, #12
 8008eac:	2300      	movs	r3, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff feee 	bl	8008c90 <http_write>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10d      	bne.n	8008edc <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	89ba      	ldrh	r2, [r7, #12]
 8008eca:	441a      	add	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	89ba      	ldrh	r2, [r7, #12]
 8008ed6:	1a9a      	subs	r2, r3, r2
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <http_send+0x18>
    return 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e025      	b.n	8008f4a <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d108      	bne.n	8008f18 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ff87 	bl	8008e1c <http_check_eof>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <http_send+0x32>
      return 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e018      	b.n	8008f4a <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff ffae 	bl	8008e7c <http_send_data_nonssi>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10d      	bne.n	8008f48 <http_send+0x62>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fe4d 	bl	8008bd0 <fs_bytes_left>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dc05      	bgt.n	8008f48 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff ff5f 	bl	8008e02 <http_eof>
    return 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e000      	b.n	8008f4a <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	4a1c      	ldr	r2, [pc, #112]	; (8008fd4 <http_get_404_file+0x80>)
 8008f62:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	f7ff fde7 	bl	8008b40 <fs_open>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d024      	beq.n	8008fc8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <http_get_404_file+0x84>)
 8008f82:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7ff fdd7 	bl	8008b40 <fs_open>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d014      	beq.n	8008fc8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	4a0e      	ldr	r2, [pc, #56]	; (8008fdc <http_get_404_file+0x88>)
 8008fa2:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4619      	mov	r1, r3
 8008fac:	4610      	mov	r0, r2
 8008fae:	f7ff fdc7 	bl	8008b40 <fs_open>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8008fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
        return NULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8008fc8:	687b      	ldr	r3, [r7, #4]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	080163a0 	.word	0x080163a0
 8008fd8:	080163ac 	.word	0x080163ac
 8008fdc:	080163b8 	.word	0x080163b8

08008fe0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08e      	sub	sp, #56	; 0x38
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <http_parse_request+0x24>
 8008ff6:	4b65      	ldr	r3, [pc, #404]	; (800918c <http_parse_request+0x1ac>)
 8008ff8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8008ffc:	4964      	ldr	r1, [pc, #400]	; (8009190 <http_parse_request+0x1b0>)
 8008ffe:	4865      	ldr	r0, [pc, #404]	; (8009194 <http_parse_request+0x1b4>)
 8009000:	f00c f906 	bl	8015210 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <http_parse_request+0x38>
 800900a:	4b60      	ldr	r3, [pc, #384]	; (800918c <http_parse_request+0x1ac>)
 800900c:	f240 72af 	movw	r2, #1967	; 0x7af
 8009010:	4961      	ldr	r1, [pc, #388]	; (8009198 <http_parse_request+0x1b8>)
 8009012:	4860      	ldr	r0, [pc, #384]	; (8009194 <http_parse_request+0x1b4>)
 8009014:	f00c f8fc 	bl	8015210 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d103      	bne.n	8009028 <http_parse_request+0x48>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009028:	f06f 0307 	mvn.w	r3, #7
 800902c:	e0aa      	b.n	8009184 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d103      	bne.n	800903e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	621a      	str	r2, [r3, #32]
 800903c:	e005      	b.n	800904a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009044:	4618      	mov	r0, r3
 8009046:	f004 fd0d 	bl	800da64 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800904a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800904c:	f004 fce2 	bl	800da14 <pbuf_ref>

  if (hs->req->next != NULL) {
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d012      	beq.n	8009080 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	891b      	ldrh	r3, [r3, #8]
 8009060:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009064:	4293      	cmp	r3, r2
 8009066:	bf28      	it	cs
 8009068:	4613      	movcs	r3, r2
 800906a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	6a18      	ldr	r0, [r3, #32]
 8009070:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009072:	2300      	movs	r3, #0
 8009074:	4949      	ldr	r1, [pc, #292]	; (800919c <http_parse_request+0x1bc>)
 8009076:	f004 fe2d 	bl	800dcd4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800907a:	4b48      	ldr	r3, [pc, #288]	; (800919c <http_parse_request+0x1bc>)
 800907c:	637b      	str	r3, [r7, #52]	; 0x34
 800907e:	e005      	b.n	800908c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	895b      	ldrh	r3, [r3, #10]
 800908a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800908c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800908e:	2b06      	cmp	r3, #6
 8009090:	d963      	bls.n	800915a <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009092:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009094:	461a      	mov	r2, r3
 8009096:	4942      	ldr	r1, [pc, #264]	; (80091a0 <http_parse_request+0x1c0>)
 8009098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800909a:	f000 fb99 	bl	80097d0 <lwip_strnstr>
 800909e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d059      	beq.n	800915a <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80090aa:	2204      	movs	r2, #4
 80090ac:	493d      	ldr	r1, [pc, #244]	; (80091a4 <http_parse_request+0x1c4>)
 80090ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80090b0:	f00c f90e 	bl	80152d0 <strncmp>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d117      	bne.n	80090ea <http_parse_request+0x10a>
        sp1 = data + 3;
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090bc:	3303      	adds	r3, #3
 80090be:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	3301      	adds	r3, #1
 80090c4:	461a      	mov	r2, r3
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	3301      	adds	r3, #1
 80090d6:	8b7a      	ldrh	r2, [r7, #26]
 80090d8:	4933      	ldr	r1, [pc, #204]	; (80091a8 <http_parse_request+0x1c8>)
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fb78 	bl	80097d0 <lwip_strnstr>
 80090e0:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d111      	bne.n	800910c <http_parse_request+0x12c>
 80090e8:	e006      	b.n	80090f8 <http_parse_request+0x118>
        data[4] = 0;
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	3304      	adds	r3, #4
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80090f2:	f06f 030f 	mvn.w	r3, #15
 80090f6:	e045      	b.n	8009184 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3301      	adds	r3, #1
 80090fc:	8b7a      	ldrh	r2, [r7, #26]
 80090fe:	4928      	ldr	r1, [pc, #160]	; (80091a0 <http_parse_request+0x1c0>)
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fb65 	bl	80097d0 <lwip_strnstr>
 8009106:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009108:	2301      	movs	r3, #1
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	3201      	adds	r2, #1
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01e      	beq.n	800915a <http_parse_request+0x17a>
 800911c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	429a      	cmp	r2, r3
 8009122:	d91a      	bls.n	800915a <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009124:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009126:	461a      	mov	r2, r3
 8009128:	4920      	ldr	r1, [pc, #128]	; (80091ac <http_parse_request+0x1cc>)
 800912a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800912c:	f000 fb50 	bl	80097d0 <lwip_strnstr>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d011      	beq.n	800915a <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3301      	adds	r3, #1
 800913a:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009142:	8b3b      	ldrh	r3, [r7, #24]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4413      	add	r3, r2
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	6979      	ldr	r1, [r7, #20]
 8009150:	68b8      	ldr	r0, [r7, #8]
 8009152:	f000 f82d 	bl	80091b0 <http_find_file>
 8009156:	4603      	mov	r3, r0
 8009158:	e014      	b.n	8009184 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	4618      	mov	r0, r3
 8009160:	f004 fc40 	bl	800d9e4 <pbuf_clen>
 8009164:	4603      	mov	r3, r0
 8009166:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	891b      	ldrh	r3, [r3, #8]
 800916e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009172:	d205      	bcs.n	8009180 <http_parse_request+0x1a0>
 8009174:	8a7b      	ldrh	r3, [r7, #18]
 8009176:	2b05      	cmp	r3, #5
 8009178:	d802      	bhi.n	8009180 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800917a:	f06f 0304 	mvn.w	r3, #4
 800917e:	e001      	b.n	8009184 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009180:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009184:	4618      	mov	r0, r3
 8009186:	3738      	adds	r7, #56	; 0x38
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	080162f8 	.word	0x080162f8
 8009190:	080163c4 	.word	0x080163c4
 8009194:	08016340 	.word	0x08016340
 8009198:	080163d0 	.word	0x080163d0
 800919c:	20006854 	.word	0x20006854
 80091a0:	080163dc 	.word	0x080163dc
 80091a4:	080163e0 	.word	0x080163e0
 80091a8:	080163e8 	.word	0x080163e8
 80091ac:	080163ec 	.word	0x080163ec

080091b0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b092      	sub	sp, #72	; 0x48
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f7 f841 	bl	8000254 <strlen>
 80091d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d06b      	beq.n	80092b2 <http_find_file+0x102>
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	3b01      	subs	r3, #1
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b2f      	cmp	r3, #47	; 0x2f
 80091e6:	d164      	bne.n	80092b2 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80091e8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80091ea:	4a53      	ldr	r2, [pc, #332]	; (8009338 <http_find_file+0x188>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d102      	bne.n	80091f6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d15d      	bne.n	80092b2 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	3b01      	subs	r3, #1
 80091fa:	2b3f      	cmp	r3, #63	; 0x3f
 80091fc:	bf28      	it	cs
 80091fe:	233f      	movcs	r3, #63	; 0x3f
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920c:	4619      	mov	r1, r3
 800920e:	484a      	ldr	r0, [pc, #296]	; (8009338 <http_find_file+0x188>)
 8009210:	f00b ffeb 	bl	80151ea <memcpy>
      http_uri_buf[copy_len] = 0;
 8009214:	4a48      	ldr	r2, [pc, #288]	; (8009338 <http_find_file+0x188>)
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	4413      	add	r3, r2
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009222:	e043      	b.n	80092ac <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d028      	beq.n	800927c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8009230:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01e      	beq.n	8009276 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009238:	4a40      	ldr	r2, [pc, #256]	; (800933c <http_find_file+0x18c>)
 800923a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009240:	4618      	mov	r0, r3
 8009242:	f7f7 f807 	bl	8000254 <strlen>
 8009246:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009248:	69fa      	ldr	r2, [r7, #28]
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	4293      	cmp	r3, r2
 800924e:	bf28      	it	cs
 8009250:	4613      	movcs	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	4a38      	ldr	r2, [pc, #224]	; (8009338 <http_find_file+0x188>)
 8009258:	1898      	adds	r0, r3, r2
 800925a:	4a38      	ldr	r2, [pc, #224]	; (800933c <http_find_file+0x18c>)
 800925c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	4619      	mov	r1, r3
 8009266:	f00b ffc0 	bl	80151ea <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800926a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	4413      	add	r3, r2
 8009270:	4a31      	ldr	r2, [pc, #196]	; (8009338 <http_find_file+0x188>)
 8009272:	2100      	movs	r1, #0
 8009274:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009276:	4b30      	ldr	r3, [pc, #192]	; (8009338 <http_find_file+0x188>)
 8009278:	633b      	str	r3, [r7, #48]	; 0x30
 800927a:	e004      	b.n	8009286 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800927c:	4a2f      	ldr	r2, [pc, #188]	; (800933c <http_find_file+0x18c>)
 800927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009284:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fc58 	bl	8008b40 <fs_open>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8009294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <http_find_file+0xf6>
        uri = file_name;
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80092a4:	e005      	b.n	80092b2 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	3301      	adds	r3, #1
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d9b8      	bls.n	8009224 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d124      	bne.n	8009302 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	213f      	movs	r1, #63	; 0x3f
 80092bc:	4618      	mov	r0, r3
 80092be:	f00b fff9 	bl	80152b4 <strchr>
 80092c2:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80092c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80092ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]
      params++;
 80092d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d2:	3301      	adds	r3, #1
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fc2f 	bl	8008b40 <fs_open>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80092e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <http_find_file+0x144>
      file = &hs->file_handle;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f2:	e006      	b.n	8009302 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80092f4:	f107 0308 	add.w	r3, r7, #8
 80092f8:	4619      	mov	r1, r3
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fe2a 	bl	8008f54 <http_get_404_file>
 8009300:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff fe20 	bl	8008f54 <http_get_404_file>
 8009314:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	4613      	mov	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f809 	bl	8009340 <http_init_file>
 800932e:	4603      	mov	r3, r0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3740      	adds	r7, #64	; 0x40
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20006c54 	.word	0x20006c54
 800933c:	08019d20 	.word	0x08019d20

08009340 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05d      	beq.n	8009410 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <http_init_file+0x2a>
 800935c:	4b35      	ldr	r3, [pc, #212]	; (8009434 <http_init_file+0xf4>)
 800935e:	f640 120b 	movw	r2, #2315	; 0x90b
 8009362:	4935      	ldr	r1, [pc, #212]	; (8009438 <http_init_file+0xf8>)
 8009364:	4835      	ldr	r0, [pc, #212]	; (800943c <http_init_file+0xfc>)
 8009366:	f00b ff53 	bl	8015210 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	da06      	bge.n	800938e <http_init_file+0x4e>
 8009380:	4b2c      	ldr	r3, [pc, #176]	; (8009434 <http_init_file+0xf4>)
 8009382:	f640 1234 	movw	r2, #2356	; 0x934
 8009386:	492e      	ldr	r1, [pc, #184]	; (8009440 <http_init_file+0x100>)
 8009388:	482c      	ldr	r0, [pc, #176]	; (800943c <http_init_file+0xfc>)
 800938a:	f00b ff41 	bl	8015210 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	461a      	mov	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	7c1b      	ldrb	r3, [r3, #16]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d106      	bne.n	80093bc <http_init_file+0x7c>
 80093ae:	4b21      	ldr	r3, [pc, #132]	; (8009434 <http_init_file+0xf4>)
 80093b0:	f640 1244 	movw	r2, #2372	; 0x944
 80093b4:	4923      	ldr	r1, [pc, #140]	; (8009444 <http_init_file+0x104>)
 80093b6:	4821      	ldr	r0, [pc, #132]	; (800943c <http_init_file+0xfc>)
 80093b8:	f00b ff2a 	bl	8015210 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d033      	beq.n	800942a <http_init_file+0xea>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	7c1b      	ldrb	r3, [r3, #16]
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d02c      	beq.n	800942a <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6998      	ldr	r0, [r3, #24]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	461a      	mov	r2, r3
 80093da:	491b      	ldr	r1, [pc, #108]	; (8009448 <http_init_file+0x108>)
 80093dc:	f000 f9f8 	bl	80097d0 <lwip_strnstr>
 80093e0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d020      	beq.n	800942a <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	3304      	adds	r3, #4
 80093ec:	461a      	mov	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	441a      	add	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad2      	subs	r2, r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	625a      	str	r2, [r3, #36]	; 0x24
 800940e:	e00c      	b.n	800942a <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	080162f8 	.word	0x080162f8
 8009438:	080163f4 	.word	0x080163f4
 800943c:	08016340 	.word	0x08016340
 8009440:	08016408 	.word	0x08016408
 8009444:	08016428 	.word	0x08016428
 8009448:	080163ec 	.word	0x080163ec

0800944c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <http_err+0x1c>
    http_state_free(hs);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff fc02 	bl	8008c6c <http_state_free>
  }
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <http_sent+0x1c>
    return ERR_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	e008      	b.n	800949e <http_sent+0x2e>
  }

  hs->retries = 0;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8009494:	6979      	ldr	r1, [r7, #20]
 8009496:	68b8      	ldr	r0, [r7, #8]
 8009498:	f7ff fd25 	bl	8008ee6 <http_send>

  return ERR_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80094ba:	2100      	movs	r1, #0
 80094bc:	6838      	ldr	r0, [r7, #0]
 80094be:	f7ff fc91 	bl	8008de4 <http_close_conn>
 80094c2:	4603      	mov	r3, r0
 80094c4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e021      	b.n	800950e <http_poll+0x68>
  } else {
    hs->retries++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d0:	3301      	adds	r3, #1
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d105      	bne.n	80094f0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80094e4:	68f9      	ldr	r1, [r7, #12]
 80094e6:	6838      	ldr	r0, [r7, #0]
 80094e8:	f7ff fc7c 	bl	8008de4 <http_close_conn>
      return ERR_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e00e      	b.n	800950e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80094f8:	68f9      	ldr	r1, [r7, #12]
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	f7ff fcf3 	bl	8008ee6 <http_send>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009506:	6838      	ldr	r0, [r7, #0]
 8009508:	f009 febe 	bl	8013288 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800952a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d105      	bne.n	800953e <http_recv+0x26>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <http_recv+0x26>
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d111      	bne.n	8009562 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	4619      	mov	r1, r3
 800954a:	68b8      	ldr	r0, [r7, #8]
 800954c:	f005 fa8e 	bl	800ea6c <tcp_recved>
      pbuf_free(p);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f004 f9b9 	bl	800d8c8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	68b8      	ldr	r0, [r7, #8]
 800955a:	f7ff fc43 	bl	8008de4 <http_close_conn>
    return ERR_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e055      	b.n	800960e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	4619      	mov	r1, r3
 8009568:	68b8      	ldr	r0, [r7, #8]
 800956a:	f005 fa7f 	bl	800ea6c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d147      	bne.n	8009606 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	6979      	ldr	r1, [r7, #20]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fd30 	bl	8008fe0 <http_parse_request>
 8009580:	4603      	mov	r3, r0
 8009582:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d015      	beq.n	80095b8 <http_recv+0xa0>
 800958c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009590:	f113 0f05 	cmn.w	r3, #5
 8009594:	d010      	beq.n	80095b8 <http_recv+0xa0>
 8009596:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800959a:	f113 0f10 	cmn.w	r3, #16
 800959e:	d00b      	beq.n	80095b8 <http_recv+0xa0>
 80095a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095a4:	f113 0f08 	cmn.w	r3, #8
 80095a8:	d006      	beq.n	80095b8 <http_recv+0xa0>
 80095aa:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <http_recv+0x100>)
 80095ac:	f640 2205 	movw	r2, #2565	; 0xa05
 80095b0:	491a      	ldr	r1, [pc, #104]	; (800961c <http_recv+0x104>)
 80095b2:	481b      	ldr	r0, [pc, #108]	; (8009620 <http_recv+0x108>)
 80095b4:	f00b fe2c 	bl	8015210 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80095b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095bc:	f113 0f05 	cmn.w	r3, #5
 80095c0:	d00b      	beq.n	80095da <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <http_recv+0xc2>
          pbuf_free(hs->req);
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f004 f97a 	bl	800d8c8 <pbuf_free>
          hs->req = NULL;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2200      	movs	r2, #0
 80095d8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f004 f974 	bl	800d8c8 <pbuf_free>
      if (parsed == ERR_OK) {
 80095e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d104      	bne.n	80095f2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80095e8:	6979      	ldr	r1, [r7, #20]
 80095ea:	68b8      	ldr	r0, [r7, #8]
 80095ec:	f7ff fc7b 	bl	8008ee6 <http_send>
 80095f0:	e00c      	b.n	800960c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80095f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095f6:	f113 0f10 	cmn.w	r3, #16
 80095fa:	d107      	bne.n	800960c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80095fc:	6979      	ldr	r1, [r7, #20]
 80095fe:	68b8      	ldr	r0, [r7, #8]
 8009600:	f7ff fbf0 	bl	8008de4 <http_close_conn>
 8009604:	e002      	b.n	800960c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f004 f95e 	bl	800d8c8 <pbuf_free>
    }
  }
  return ERR_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	080162f8 	.word	0x080162f8
 800961c:	08016454 	.word	0x08016454
 8009620:	08016340 	.word	0x08016340

08009624 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8009632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <http_accept+0x1c>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <http_accept+0x22>
    return ERR_VAL;
 8009640:	f06f 0305 	mvn.w	r3, #5
 8009644:	e025      	b.n	8009692 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009646:	2101      	movs	r1, #1
 8009648:	68b8      	ldr	r0, [r7, #8]
 800964a:	f005 feef 	bl	800f42c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800964e:	f7ff fadb 	bl	8008c08 <http_state_alloc>
 8009652:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295
 800965e:	e018      	b.n	8009692 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f006 f8df 	bl	800f82c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800966e:	490b      	ldr	r1, [pc, #44]	; (800969c <http_accept+0x78>)
 8009670:	68b8      	ldr	r0, [r7, #8]
 8009672:	f006 f8ed 	bl	800f850 <tcp_recv>
  altcp_err(pcb, http_err);
 8009676:	490a      	ldr	r1, [pc, #40]	; (80096a0 <http_accept+0x7c>)
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f006 f92d 	bl	800f8d8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800967e:	2204      	movs	r2, #4
 8009680:	4908      	ldr	r1, [pc, #32]	; (80096a4 <http_accept+0x80>)
 8009682:	68b8      	ldr	r0, [r7, #8]
 8009684:	f006 f962 	bl	800f94c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009688:	4907      	ldr	r1, [pc, #28]	; (80096a8 <http_accept+0x84>)
 800968a:	68b8      	ldr	r0, [r7, #8]
 800968c:	f006 f902 	bl	800f894 <tcp_sent>

  return ERR_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	08009519 	.word	0x08009519
 80096a0:	0800944d 	.word	0x0800944d
 80096a4:	080094a7 	.word	0x080094a7
 80096a8:	08009471 	.word	0x08009471

080096ac <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d029      	beq.n	8009712 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80096be:	2101      	movs	r1, #1
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f005 feb3 	bl	800f42c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	461a      	mov	r2, r3
 80096ca:	4914      	ldr	r1, [pc, #80]	; (800971c <httpd_init_pcb+0x70>)
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f004 fffd 	bl	800e6cc <tcp_bind>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80096d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d006      	beq.n	80096ec <httpd_init_pcb+0x40>
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <httpd_init_pcb+0x74>)
 80096e0:	f640 2257 	movw	r2, #2647	; 0xa57
 80096e4:	490f      	ldr	r1, [pc, #60]	; (8009724 <httpd_init_pcb+0x78>)
 80096e6:	4810      	ldr	r0, [pc, #64]	; (8009728 <httpd_init_pcb+0x7c>)
 80096e8:	f00b fd92 	bl	8015210 <iprintf>
    pcb = altcp_listen(pcb);
 80096ec:	21ff      	movs	r1, #255	; 0xff
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f005 f8a4 	bl	800e83c <tcp_listen_with_backlog>
 80096f4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <httpd_init_pcb+0x5e>
 80096fc:	4b08      	ldr	r3, [pc, #32]	; (8009720 <httpd_init_pcb+0x74>)
 80096fe:	f640 2259 	movw	r2, #2649	; 0xa59
 8009702:	490a      	ldr	r1, [pc, #40]	; (800972c <httpd_init_pcb+0x80>)
 8009704:	4808      	ldr	r0, [pc, #32]	; (8009728 <httpd_init_pcb+0x7c>)
 8009706:	f00b fd83 	bl	8015210 <iprintf>
    altcp_accept(pcb, http_accept);
 800970a:	4909      	ldr	r1, [pc, #36]	; (8009730 <httpd_init_pcb+0x84>)
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f006 f905 	bl	800f91c <tcp_accept>
  }
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	08019d48 	.word	0x08019d48
 8009720:	080162f8 	.word	0x080162f8
 8009724:	08016480 	.word	0x08016480
 8009728:	08016340 	.word	0x08016340
 800972c:	0801649c 	.word	0x0801649c
 8009730:	08009625 	.word	0x08009625

08009734 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800973a:	202e      	movs	r0, #46	; 0x2e
 800973c:	f006 f868 	bl	800f810 <tcp_new_ip_type>
 8009740:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d106      	bne.n	8009756 <httpd_init+0x22>
 8009748:	4b07      	ldr	r3, [pc, #28]	; (8009768 <httpd_init+0x34>)
 800974a:	f640 2272 	movw	r2, #2674	; 0xa72
 800974e:	4907      	ldr	r1, [pc, #28]	; (800976c <httpd_init+0x38>)
 8009750:	4807      	ldr	r0, [pc, #28]	; (8009770 <httpd_init+0x3c>)
 8009752:	f00b fd5d 	bl	8015210 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009756:	2150      	movs	r1, #80	; 0x50
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff ffa7 	bl	80096ac <httpd_init_pcb>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	080162f8 	.word	0x080162f8
 800976c:	080164bc 	.word	0x080164bc
 8009770:	08016340 	.word	0x08016340

08009774 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	b21a      	sxth	r2, r3
 8009784:	88fb      	ldrh	r3, [r7, #6]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	b21b      	sxth	r3, r3
 800978c:	4313      	orrs	r3, r2
 800978e:	b21b      	sxth	r3, r3
 8009790:	b29b      	uxth	r3, r3
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	061a      	lsls	r2, r3, #24
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	0e1b      	lsrs	r3, r3, #24
 80097c2:	4313      	orrs	r3, r2
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80097dc:	68b8      	ldr	r0, [r7, #8]
 80097de:	f7f6 fd39 	bl	8000254 <strlen>
 80097e2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	e022      	b.n	8009834 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	e012      	b.n	800981a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d109      	bne.n	8009814 <lwip_strnstr+0x44>
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	6978      	ldr	r0, [r7, #20]
 8009806:	f00b fd63 	bl	80152d0 <strncmp>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	e00f      	b.n	8009834 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	3301      	adds	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <lwip_strnstr+0x62>
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	441a      	add	r2, r3
 8009828:	68f9      	ldr	r1, [r7, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	440b      	add	r3, r1
 800982e:	429a      	cmp	r2, r3
 8009830:	d9e0      	bls.n	80097f4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d80f      	bhi.n	800987e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d006      	beq.n	8009872 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	4909      	ldr	r1, [pc, #36]	; (800988c <dns_setserver+0x40>)
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8009870:	e005      	b.n	800987e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	4905      	ldr	r1, [pc, #20]	; (800988c <dns_setserver+0x40>)
 8009876:	4a06      	ldr	r2, [pc, #24]	; (8009890 <dns_setserver+0x44>)
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20007114 	.word	0x20007114
 8009890:	08019d48 	.word	0x08019d48

08009894 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8009898:	f000 faaa 	bl	8009df0 <dns_check_entries>
}
 800989c:	bf00      	nop
 800989e:	bd80      	pop	{r7, pc}

080098a0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b090      	sub	sp, #64	; 0x40
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80098aa:	79fa      	ldrb	r2, [r7, #7]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	4413      	add	r3, r2
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	4a6c      	ldr	r2, [pc, #432]	; (8009a68 <dns_send+0x1c8>)
 80098b6:	4413      	add	r3, r2
 80098b8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	7adb      	ldrb	r3, [r3, #11]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d906      	bls.n	80098d0 <dns_send+0x30>
 80098c2:	4b6a      	ldr	r3, [pc, #424]	; (8009a6c <dns_send+0x1cc>)
 80098c4:	f240 22fa 	movw	r2, #762	; 0x2fa
 80098c8:	4969      	ldr	r1, [pc, #420]	; (8009a70 <dns_send+0x1d0>)
 80098ca:	486a      	ldr	r0, [pc, #424]	; (8009a74 <dns_send+0x1d4>)
 80098cc:	f00b fca0 	bl	8015210 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	7adb      	ldrb	r3, [r3, #11]
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b68      	ldr	r3, [pc, #416]	; (8009a78 <dns_send+0x1d8>)
 80098d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d109      	bne.n	80098f4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f8cb 	bl	8009a80 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	2200      	movs	r2, #0
 80098ee:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	e0b4      	b.n	8009a5e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	3310      	adds	r3, #16
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f6 fcab 	bl	8000254 <strlen>
 80098fe:	4603      	mov	r3, r0
 8009900:	b29b      	uxth	r3, r3
 8009902:	3312      	adds	r3, #18
 8009904:	b29b      	uxth	r3, r3
 8009906:	f44f 7220 	mov.w	r2, #640	; 0x280
 800990a:	4619      	mov	r1, r3
 800990c:	2036      	movs	r0, #54	; 0x36
 800990e:	f003 fcf9 	bl	800d304 <pbuf_alloc>
 8009912:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8095 	beq.w	8009a46 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800991c:	f107 0310 	add.w	r3, r7, #16
 8009920:	220c      	movs	r2, #12
 8009922:	2100      	movs	r1, #0
 8009924:	4618      	mov	r0, r3
 8009926:	f00b fc6b 	bl	8015200 <memset>
    hdr.id = lwip_htons(entry->txid);
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	891b      	ldrh	r3, [r3, #8]
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff ff20 	bl	8009774 <lwip_htons>
 8009934:	4603      	mov	r3, r0
 8009936:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8009938:	2301      	movs	r3, #1
 800993a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800993c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009940:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8009942:	f107 0310 	add.w	r3, r7, #16
 8009946:	220c      	movs	r2, #12
 8009948:	4619      	mov	r1, r3
 800994a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800994c:	f004 fa70 	bl	800de30 <pbuf_take>
    hostname = entry->name;
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	3310      	adds	r3, #16
 8009954:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	3b01      	subs	r3, #1
 800995a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800995c:	230c      	movs	r3, #12
 800995e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	3301      	adds	r3, #1
 8009964:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800996a:	2300      	movs	r3, #0
 800996c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009970:	e007      	b.n	8009982 <dns_send+0xe2>
        ++n;
 8009972:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009976:	3301      	adds	r3, #1
 8009978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	3301      	adds	r3, #1
 8009980:	63bb      	str	r3, [r7, #56]	; 0x38
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b2e      	cmp	r3, #46	; 0x2e
 8009988:	d003      	beq.n	8009992 <dns_send+0xf2>
 800998a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1ef      	bne.n	8009972 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8009992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800999a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800999c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099a0:	4413      	add	r3, r2
 80099a2:	3301      	adds	r3, #1
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a8:	da53      	bge.n	8009a52 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80099aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80099ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099b0:	4619      	mov	r1, r3
 80099b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099b4:	f004 fb6a 	bl	800e08c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80099b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099ba:	3301      	adds	r3, #1
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099c4:	f004 fac6 	bl	800df54 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80099c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099d0:	4413      	add	r3, r2
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3301      	adds	r3, #1
 80099d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80099d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1bf      	bne.n	8009960 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80099e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099e2:	2200      	movs	r2, #0
 80099e4:	4619      	mov	r1, r3
 80099e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099e8:	f004 fb50 	bl	800e08c <pbuf_put_at>
    query_idx++;
 80099ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099ee:	3301      	adds	r3, #1
 80099f0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80099f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80099f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099fc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80099fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a00:	f107 010c 	add.w	r1, r7, #12
 8009a04:	2204      	movs	r2, #4
 8009a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a08:	f004 faa4 	bl	800df54 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	7bdb      	ldrb	r3, [r3, #15]
 8009a10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8009a14:	2335      	movs	r3, #53	; 0x35
 8009a16:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	7adb      	ldrb	r3, [r3, #11]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4a16      	ldr	r2, [pc, #88]	; (8009a78 <dns_send+0x1d8>)
 8009a20:	4413      	add	r3, r2
 8009a22:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8009a24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009a28:	4a14      	ldr	r2, [pc, #80]	; (8009a7c <dns_send+0x1dc>)
 8009a2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a34:	f00a fede 	bl	80147f4 <udp_sendto>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8009a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a40:	f003 ff42 	bl	800d8c8 <pbuf_free>
 8009a44:	e002      	b.n	8009a4c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8009a46:	23ff      	movs	r3, #255	; 0xff
 8009a48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8009a4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a50:	e005      	b.n	8009a5e <dns_send+0x1be>
        goto overflow_return;
 8009a52:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8009a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a56:	f003 ff37 	bl	800d8c8 <pbuf_free>
  return ERR_VAL;
 8009a5a:	f06f 0305 	mvn.w	r3, #5
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3740      	adds	r7, #64	; 0x40
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20006ca4 	.word	0x20006ca4
 8009a6c:	080164d8 	.word	0x080164d8
 8009a70:	08016508 	.word	0x08016508
 8009a74:	08016520 	.word	0x08016520
 8009a78:	20007114 	.word	0x20007114
 8009a7c:	20006c94 	.word	0x20006c94

08009a80 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
 8009a90:	e03d      	b.n	8009b0e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8009a92:	7bfa      	ldrb	r2, [r7, #15]
 8009a94:	4957      	ldr	r1, [pc, #348]	; (8009bf4 <dns_call_found+0x174>)
 8009a96:	4613      	mov	r3, r2
 8009a98:	005b      	lsls	r3, r3, #1
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d030      	beq.n	8009b08 <dns_call_found+0x88>
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	4952      	ldr	r1, [pc, #328]	; (8009bf4 <dns_call_found+0x174>)
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	79fa      	ldrb	r2, [r7, #7]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d124      	bne.n	8009b08 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8009abe:	7bfa      	ldrb	r2, [r7, #15]
 8009ac0:	494c      	ldr	r1, [pc, #304]	; (8009bf4 <dns_call_found+0x174>)
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	681c      	ldr	r4, [r3, #0]
 8009ace:	79fa      	ldrb	r2, [r7, #7]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	4413      	add	r3, r2
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	3310      	adds	r3, #16
 8009ada:	4a47      	ldr	r2, [pc, #284]	; (8009bf8 <dns_call_found+0x178>)
 8009adc:	1898      	adds	r0, r3, r2
 8009ade:	7bfa      	ldrb	r2, [r7, #15]
 8009ae0:	4944      	ldr	r1, [pc, #272]	; (8009bf4 <dns_call_found+0x174>)
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	3304      	adds	r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8009af6:	7bfa      	ldrb	r2, [r7, #15]
 8009af8:	493e      	ldr	r1, [pc, #248]	; (8009bf4 <dns_call_found+0x174>)
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d9be      	bls.n	8009a92 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
 8009b18:	e031      	b.n	8009b7e <dns_call_found+0xfe>
    if (i == idx) {
 8009b1a:	7bfa      	ldrb	r2, [r7, #15]
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d029      	beq.n	8009b76 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8009b22:	7bfa      	ldrb	r2, [r7, #15]
 8009b24:	4934      	ldr	r1, [pc, #208]	; (8009bf8 <dns_call_found+0x178>)
 8009b26:	4613      	mov	r3, r2
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	4413      	add	r3, r2
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	440b      	add	r3, r1
 8009b30:	330a      	adds	r3, #10
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d11f      	bne.n	8009b78 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8009b38:	7bfa      	ldrb	r2, [r7, #15]
 8009b3a:	492f      	ldr	r1, [pc, #188]	; (8009bf8 <dns_call_found+0x178>)
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	4413      	add	r3, r2
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	440b      	add	r3, r1
 8009b46:	330f      	adds	r3, #15
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	79fa      	ldrb	r2, [r7, #7]
 8009b4c:	482a      	ldr	r0, [pc, #168]	; (8009bf8 <dns_call_found+0x178>)
 8009b4e:	4613      	mov	r3, r2
 8009b50:	011b      	lsls	r3, r3, #4
 8009b52:	4413      	add	r3, r2
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	4403      	add	r3, r0
 8009b58:	330f      	adds	r3, #15
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	d10b      	bne.n	8009b78 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009b60:	79fa      	ldrb	r2, [r7, #7]
 8009b62:	4925      	ldr	r1, [pc, #148]	; (8009bf8 <dns_call_found+0x178>)
 8009b64:	4613      	mov	r3, r2
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	4413      	add	r3, r2
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	440b      	add	r3, r1
 8009b6e:	330f      	adds	r3, #15
 8009b70:	2204      	movs	r2, #4
 8009b72:	701a      	strb	r2, [r3, #0]
        break;
 8009b74:	e006      	b.n	8009b84 <dns_call_found+0x104>
      continue; /* only check other requests */
 8009b76:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d9ca      	bls.n	8009b1a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	491c      	ldr	r1, [pc, #112]	; (8009bf8 <dns_call_found+0x178>)
 8009b88:	4613      	mov	r3, r2
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	4413      	add	r3, r2
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	440b      	add	r3, r1
 8009b92:	330f      	adds	r3, #15
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d827      	bhi.n	8009bea <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8009b9a:	79fa      	ldrb	r2, [r7, #7]
 8009b9c:	4916      	ldr	r1, [pc, #88]	; (8009bf8 <dns_call_found+0x178>)
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	4413      	add	r3, r2
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	440b      	add	r3, r1
 8009ba8:	330f      	adds	r3, #15
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <dns_call_found+0x17c>)
 8009bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f00b f85d 	bl	8014c74 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8009bba:	79fa      	ldrb	r2, [r7, #7]
 8009bbc:	490e      	ldr	r1, [pc, #56]	; (8009bf8 <dns_call_found+0x178>)
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	4413      	add	r3, r2
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	440b      	add	r3, r1
 8009bc8:	330f      	adds	r3, #15
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4b0b      	ldr	r3, [pc, #44]	; (8009bfc <dns_call_found+0x17c>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	4907      	ldr	r1, [pc, #28]	; (8009bf8 <dns_call_found+0x178>)
 8009bda:	4613      	mov	r3, r2
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	4413      	add	r3, r2
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	440b      	add	r3, r1
 8009be4:	330f      	adds	r3, #15
 8009be6:	2204      	movs	r2, #4
 8009be8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd90      	pop	{r4, r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200070e4 	.word	0x200070e4
 8009bf8:	20006ca4 	.word	0x20006ca4
 8009bfc:	20006c94 	.word	0x20006c94

08009c00 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8009c06:	f00b fb1b 	bl	8015240 <rand>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009c0e:	2300      	movs	r3, #0
 8009c10:	71fb      	strb	r3, [r7, #7]
 8009c12:	e01a      	b.n	8009c4a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009c14:	79fa      	ldrb	r2, [r7, #7]
 8009c16:	4911      	ldr	r1, [pc, #68]	; (8009c5c <dns_create_txid+0x5c>)
 8009c18:	4613      	mov	r3, r2
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	4413      	add	r3, r2
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	440b      	add	r3, r1
 8009c22:	330a      	adds	r3, #10
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d10c      	bne.n	8009c44 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8009c2a:	79fa      	ldrb	r2, [r7, #7]
 8009c2c:	490b      	ldr	r1, [pc, #44]	; (8009c5c <dns_create_txid+0x5c>)
 8009c2e:	4613      	mov	r3, r2
 8009c30:	011b      	lsls	r3, r3, #4
 8009c32:	4413      	add	r3, r2
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	440b      	add	r3, r1
 8009c38:	3308      	adds	r3, #8
 8009c3a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009c3c:	88ba      	ldrh	r2, [r7, #4]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d100      	bne.n	8009c44 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8009c42:	e7e0      	b.n	8009c06 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	3301      	adds	r3, #1
 8009c48:	71fb      	strb	r3, [r7, #7]
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d9e1      	bls.n	8009c14 <dns_create_txid+0x14>
    }
  }

  return txid;
 8009c50:	88bb      	ldrh	r3, [r7, #4]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20006ca4 	.word	0x20006ca4

08009c60 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00e      	beq.n	8009c90 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7adb      	ldrb	r3, [r3, #11]
 8009c76:	3301      	adds	r3, #1
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	dc09      	bgt.n	8009c90 <dns_backupserver_available+0x30>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7adb      	ldrb	r3, [r3, #11]
 8009c80:	3301      	adds	r3, #1
 8009c82:	4a07      	ldr	r2, [pc, #28]	; (8009ca0 <dns_backupserver_available+0x40>)
 8009c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <dns_backupserver_available+0x30>
      ret = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20007114 	.word	0x20007114

08009ca4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8009cae:	79fa      	ldrb	r2, [r7, #7]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	4a48      	ldr	r2, [pc, #288]	; (8009ddc <dns_check_entry+0x138>)
 8009cba:	4413      	add	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d906      	bls.n	8009cd2 <dns_check_entry+0x2e>
 8009cc4:	4b46      	ldr	r3, [pc, #280]	; (8009de0 <dns_check_entry+0x13c>)
 8009cc6:	f240 421c 	movw	r2, #1052	; 0x41c
 8009cca:	4946      	ldr	r1, [pc, #280]	; (8009de4 <dns_check_entry+0x140>)
 8009ccc:	4846      	ldr	r0, [pc, #280]	; (8009de8 <dns_check_entry+0x144>)
 8009cce:	f00b fa9f 	bl	8015210 <iprintf>

  switch (entry->state) {
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	7a9b      	ldrb	r3, [r3, #10]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d86f      	bhi.n	8009dba <dns_check_entry+0x116>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <dns_check_entry+0x3c>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009dcb 	.word	0x08009dcb
 8009ce4:	08009cf1 	.word	0x08009cf1
 8009ce8:	08009d23 	.word	0x08009d23
 8009cec:	08009d99 	.word	0x08009d99
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8009cf0:	f7ff ff86 	bl	8009c00 <dns_create_txid>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fdc2 	bl	80098a0 <dns_send>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8009d20:	e058      	b.n	8009dd4 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	7b1b      	ldrb	r3, [r3, #12]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	731a      	strb	r2, [r3, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	7b1b      	ldrb	r3, [r3, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d14b      	bne.n	8009dce <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	7b5b      	ldrb	r3, [r3, #13]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	735a      	strb	r2, [r3, #13]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	7b5b      	ldrb	r3, [r3, #13]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d11b      	bne.n	8009d82 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7ff ff88 	bl	8009c60 <dns_backupserver_available>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00c      	beq.n	8009d70 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	7adb      	ldrb	r3, [r3, #11]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	735a      	strb	r2, [r3, #13]
 8009d6e:	e00c      	b.n	8009d8a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fe83 	bl	8009a80 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	729a      	strb	r2, [r3, #10]
            break;
 8009d80:	e028      	b.n	8009dd4 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	7b5a      	ldrb	r2, [r3, #13]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff fd87 	bl	80098a0 <dns_send>
 8009d92:	4603      	mov	r3, r0
 8009d94:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8009d96:	e01a      	b.n	8009dce <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d008      	beq.n	8009db2 <dns_check_entry+0x10e>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	1e5a      	subs	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10f      	bne.n	8009dd2 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	729a      	strb	r2, [r3, #10]
      }
      break;
 8009db8:	e00b      	b.n	8009dd2 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <dns_check_entry+0x13c>)
 8009dbc:	f240 425b 	movw	r2, #1115	; 0x45b
 8009dc0:	490a      	ldr	r1, [pc, #40]	; (8009dec <dns_check_entry+0x148>)
 8009dc2:	4809      	ldr	r0, [pc, #36]	; (8009de8 <dns_check_entry+0x144>)
 8009dc4:	f00b fa24 	bl	8015210 <iprintf>
      break;
 8009dc8:	e004      	b.n	8009dd4 <dns_check_entry+0x130>
      break;
 8009dca:	bf00      	nop
 8009dcc:	e002      	b.n	8009dd4 <dns_check_entry+0x130>
      break;
 8009dce:	bf00      	nop
 8009dd0:	e000      	b.n	8009dd4 <dns_check_entry+0x130>
      break;
 8009dd2:	bf00      	nop
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20006ca4 	.word	0x20006ca4
 8009de0:	080164d8 	.word	0x080164d8
 8009de4:	08016548 	.word	0x08016548
 8009de8:	08016520 	.word	0x08016520
 8009dec:	08016564 	.word	0x08016564

08009df0 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009df6:	2300      	movs	r3, #0
 8009df8:	71fb      	strb	r3, [r7, #7]
 8009dfa:	e006      	b.n	8009e0a <dns_check_entries+0x1a>
    dns_check_entry(i);
 8009dfc:	79fb      	ldrb	r3, [r7, #7]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff ff50 	bl	8009ca4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	3301      	adds	r3, #1
 8009e08:	71fb      	strb	r3, [r7, #7]
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d9f5      	bls.n	8009dfc <dns_check_entries+0xc>
  }
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009e22:	f00b f8fb 	bl	801501c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009e26:	f002 fab1 	bl	800c38c <mem_init>
  memp_init();
 8009e2a:	f002 fe0d 	bl	800ca48 <memp_init>
  pbuf_init();
  netif_init();
 8009e2e:	f002 fed3 	bl	800cbd8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009e32:	f00a fb1d 	bl	8014470 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009e36:	f004 f94b 	bl	800e0d0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8009e3a:	f7ff fcff 	bl	800983c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009e3e:	f00a fa67 	bl	8014310 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009e54:	4915      	ldr	r1, [pc, #84]	; (8009eac <etharp_free_entry+0x60>)
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	440b      	add	r3, r1
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d013      	beq.n	8009e90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009e68:	4910      	ldr	r1, [pc, #64]	; (8009eac <etharp_free_entry+0x60>)
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	4413      	add	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	440b      	add	r3, r1
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f003 fd25 	bl	800d8c8 <pbuf_free>
    arp_table[i].q = NULL;
 8009e7e:	490b      	ldr	r1, [pc, #44]	; (8009eac <etharp_free_entry+0x60>)
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	4413      	add	r3, r2
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	440b      	add	r3, r1
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009e90:	4906      	ldr	r1, [pc, #24]	; (8009eac <etharp_free_entry+0x60>)
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	4613      	mov	r3, r2
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	440b      	add	r3, r1
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	2000711c 	.word	0x2000711c

08009eb0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	e096      	b.n	8009fea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009ebc:	494f      	ldr	r1, [pc, #316]	; (8009ffc <etharp_tmr+0x14c>)
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	440b      	add	r3, r1
 8009eca:	3314      	adds	r3, #20
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8086 	beq.w	8009fe4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8009ed8:	4948      	ldr	r1, [pc, #288]	; (8009ffc <etharp_tmr+0x14c>)
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	4413      	add	r3, r2
 8009ee2:	00db      	lsls	r3, r3, #3
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3312      	adds	r3, #18
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	b298      	uxth	r0, r3
 8009eee:	4943      	ldr	r1, [pc, #268]	; (8009ffc <etharp_tmr+0x14c>)
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	440b      	add	r3, r1
 8009efc:	3312      	adds	r3, #18
 8009efe:	4602      	mov	r2, r0
 8009f00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009f02:	493e      	ldr	r1, [pc, #248]	; (8009ffc <etharp_tmr+0x14c>)
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	440b      	add	r3, r1
 8009f10:	3312      	adds	r3, #18
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f18:	d215      	bcs.n	8009f46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009f1a:	4938      	ldr	r1, [pc, #224]	; (8009ffc <etharp_tmr+0x14c>)
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	4413      	add	r3, r2
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	440b      	add	r3, r1
 8009f28:	3314      	adds	r3, #20
 8009f2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d10e      	bne.n	8009f4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009f30:	4932      	ldr	r1, [pc, #200]	; (8009ffc <etharp_tmr+0x14c>)
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	4613      	mov	r3, r2
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	4413      	add	r3, r2
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	440b      	add	r3, r1
 8009f3e:	3312      	adds	r3, #18
 8009f40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d903      	bls.n	8009f4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff ff80 	bl	8009e4c <etharp_free_entry>
 8009f4c:	e04a      	b.n	8009fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009f4e:	492b      	ldr	r1, [pc, #172]	; (8009ffc <etharp_tmr+0x14c>)
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	4413      	add	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d10a      	bne.n	8009f7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009f64:	4925      	ldr	r1, [pc, #148]	; (8009ffc <etharp_tmr+0x14c>)
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	4413      	add	r3, r2
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	440b      	add	r3, r1
 8009f72:	3314      	adds	r3, #20
 8009f74:	2204      	movs	r2, #4
 8009f76:	701a      	strb	r2, [r3, #0]
 8009f78:	e034      	b.n	8009fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009f7a:	4920      	ldr	r1, [pc, #128]	; (8009ffc <etharp_tmr+0x14c>)
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	440b      	add	r3, r1
 8009f88:	3314      	adds	r3, #20
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d10a      	bne.n	8009fa6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009f90:	491a      	ldr	r1, [pc, #104]	; (8009ffc <etharp_tmr+0x14c>)
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4613      	mov	r3, r2
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3314      	adds	r3, #20
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	701a      	strb	r2, [r3, #0]
 8009fa4:	e01e      	b.n	8009fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009fa6:	4915      	ldr	r1, [pc, #84]	; (8009ffc <etharp_tmr+0x14c>)
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4613      	mov	r3, r2
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	440b      	add	r3, r1
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d113      	bne.n	8009fe4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009fbc:	490f      	ldr	r1, [pc, #60]	; (8009ffc <etharp_tmr+0x14c>)
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	4413      	add	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	440b      	add	r3, r1
 8009fca:	3308      	adds	r3, #8
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <etharp_tmr+0x14c>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f000 fe6e 	bl	800acc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	607b      	str	r3, [r7, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b09      	cmp	r3, #9
 8009fee:	f77f af65 	ble.w	8009ebc <etharp_tmr+0xc>
      }
    }
  }
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2000711c 	.word	0x2000711c

0800a000 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08a      	sub	sp, #40	; 0x28
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	460b      	mov	r3, r1
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a00e:	230a      	movs	r3, #10
 800a010:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a012:	230a      	movs	r3, #10
 800a014:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a016:	230a      	movs	r3, #10
 800a018:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a01e:	230a      	movs	r3, #10
 800a020:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	83bb      	strh	r3, [r7, #28]
 800a026:	2300      	movs	r3, #0
 800a028:	837b      	strh	r3, [r7, #26]
 800a02a:	2300      	movs	r3, #0
 800a02c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a02e:	2300      	movs	r3, #0
 800a030:	843b      	strh	r3, [r7, #32]
 800a032:	e0ae      	b.n	800a192 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a038:	49a6      	ldr	r1, [pc, #664]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a03a:	4613      	mov	r3, r2
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4413      	add	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	440b      	add	r3, r1
 800a044:	3314      	adds	r3, #20
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a04a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a04e:	2b0a      	cmp	r3, #10
 800a050:	d105      	bne.n	800a05e <etharp_find_entry+0x5e>
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a058:	8c3b      	ldrh	r3, [r7, #32]
 800a05a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a05c:	e095      	b.n	800a18a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 8092 	beq.w	800a18a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d009      	beq.n	800a080 <etharp_find_entry+0x80>
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d806      	bhi.n	800a080 <etharp_find_entry+0x80>
 800a072:	4b99      	ldr	r3, [pc, #612]	; (800a2d8 <etharp_find_entry+0x2d8>)
 800a074:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a078:	4998      	ldr	r1, [pc, #608]	; (800a2dc <etharp_find_entry+0x2dc>)
 800a07a:	4899      	ldr	r0, [pc, #612]	; (800a2e0 <etharp_find_entry+0x2e0>)
 800a07c:	f00b f8c8 	bl	8015210 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d020      	beq.n	800a0c8 <etharp_find_entry+0xc8>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a08e:	4891      	ldr	r0, [pc, #580]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a090:	4613      	mov	r3, r2
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4413      	add	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4403      	add	r3, r0
 800a09a:	3304      	adds	r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	d112      	bne.n	800a0c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00c      	beq.n	800a0c2 <etharp_find_entry+0xc2>
 800a0a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0ac:	4989      	ldr	r1, [pc, #548]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	440b      	add	r3, r1
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d102      	bne.n	800a0c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a0c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a0c6:	e100      	b.n	800a2ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d140      	bne.n	800a150 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a0ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0d2:	4980      	ldr	r1, [pc, #512]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	4413      	add	r3, r2
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	440b      	add	r3, r1
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01a      	beq.n	800a11a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a0e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a0e8:	497a      	ldr	r1, [pc, #488]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3312      	adds	r3, #18
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	8bba      	ldrh	r2, [r7, #28]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d845      	bhi.n	800a18a <etharp_find_entry+0x18a>
            old_queue = i;
 800a0fe:	8c3b      	ldrh	r3, [r7, #32]
 800a100:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a102:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a106:	4973      	ldr	r1, [pc, #460]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	3312      	adds	r3, #18
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	83bb      	strh	r3, [r7, #28]
 800a118:	e037      	b.n	800a18a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a11a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a11e:	496d      	ldr	r1, [pc, #436]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	440b      	add	r3, r1
 800a12a:	3312      	adds	r3, #18
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	8b7a      	ldrh	r2, [r7, #26]
 800a130:	429a      	cmp	r2, r3
 800a132:	d82a      	bhi.n	800a18a <etharp_find_entry+0x18a>
            old_pending = i;
 800a134:	8c3b      	ldrh	r3, [r7, #32]
 800a136:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800a138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a13c:	4965      	ldr	r1, [pc, #404]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a13e:	4613      	mov	r3, r2
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	4413      	add	r3, r2
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	440b      	add	r3, r1
 800a148:	3312      	adds	r3, #18
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	837b      	strh	r3, [r7, #26]
 800a14e:	e01c      	b.n	800a18a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a150:	7dfb      	ldrb	r3, [r7, #23]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d919      	bls.n	800a18a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a15a:	495e      	ldr	r1, [pc, #376]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a15c:	4613      	mov	r3, r2
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	4413      	add	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	440b      	add	r3, r1
 800a166:	3312      	adds	r3, #18
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	8b3a      	ldrh	r2, [r7, #24]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d80c      	bhi.n	800a18a <etharp_find_entry+0x18a>
            old_stable = i;
 800a170:	8c3b      	ldrh	r3, [r7, #32]
 800a172:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800a174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a178:	4956      	ldr	r1, [pc, #344]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	440b      	add	r3, r1
 800a184:	3312      	adds	r3, #18
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a18a:	8c3b      	ldrh	r3, [r7, #32]
 800a18c:	3301      	adds	r3, #1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	843b      	strh	r3, [r7, #32]
 800a192:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a196:	2b09      	cmp	r3, #9
 800a198:	f77f af4c 	ble.w	800a034 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d108      	bne.n	800a1b8 <etharp_find_entry+0x1b8>
 800a1a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a1aa:	2b0a      	cmp	r3, #10
 800a1ac:	d107      	bne.n	800a1be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1bc:	e085      	b.n	800a2ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a1be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	dc02      	bgt.n	800a1cc <etharp_find_entry+0x1cc>
    i = empty;
 800a1c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1c8:	843b      	strh	r3, [r7, #32]
 800a1ca:	e039      	b.n	800a240 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a1cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a1d0:	2b09      	cmp	r3, #9
 800a1d2:	dc14      	bgt.n	800a1fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a1d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a1dc:	493d      	ldr	r1, [pc, #244]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d018      	beq.n	800a220 <etharp_find_entry+0x220>
 800a1ee:	4b3a      	ldr	r3, [pc, #232]	; (800a2d8 <etharp_find_entry+0x2d8>)
 800a1f0:	f240 126d 	movw	r2, #365	; 0x16d
 800a1f4:	493b      	ldr	r1, [pc, #236]	; (800a2e4 <etharp_find_entry+0x2e4>)
 800a1f6:	483a      	ldr	r0, [pc, #232]	; (800a2e0 <etharp_find_entry+0x2e0>)
 800a1f8:	f00b f80a 	bl	8015210 <iprintf>
 800a1fc:	e010      	b.n	800a220 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a1fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a202:	2b09      	cmp	r3, #9
 800a204:	dc02      	bgt.n	800a20c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a208:	843b      	strh	r3, [r7, #32]
 800a20a:	e009      	b.n	800a220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a20c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a210:	2b09      	cmp	r3, #9
 800a212:	dc02      	bgt.n	800a21a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a214:	8bfb      	ldrh	r3, [r7, #30]
 800a216:	843b      	strh	r3, [r7, #32]
 800a218:	e002      	b.n	800a220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
 800a21e:	e054      	b.n	800a2ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a220:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a224:	2b09      	cmp	r3, #9
 800a226:	dd06      	ble.n	800a236 <etharp_find_entry+0x236>
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <etharp_find_entry+0x2d8>)
 800a22a:	f240 127f 	movw	r2, #383	; 0x17f
 800a22e:	492e      	ldr	r1, [pc, #184]	; (800a2e8 <etharp_find_entry+0x2e8>)
 800a230:	482b      	ldr	r0, [pc, #172]	; (800a2e0 <etharp_find_entry+0x2e0>)
 800a232:	f00a ffed 	bl	8015210 <iprintf>
    etharp_free_entry(i);
 800a236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff fe06 	bl	8009e4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a240:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a244:	2b09      	cmp	r3, #9
 800a246:	dd06      	ble.n	800a256 <etharp_find_entry+0x256>
 800a248:	4b23      	ldr	r3, [pc, #140]	; (800a2d8 <etharp_find_entry+0x2d8>)
 800a24a:	f240 1283 	movw	r2, #387	; 0x183
 800a24e:	4926      	ldr	r1, [pc, #152]	; (800a2e8 <etharp_find_entry+0x2e8>)
 800a250:	4823      	ldr	r0, [pc, #140]	; (800a2e0 <etharp_find_entry+0x2e0>)
 800a252:	f00a ffdd 	bl	8015210 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a25a:	491e      	ldr	r1, [pc, #120]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a25c:	4613      	mov	r3, r2
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	4413      	add	r3, r2
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	440b      	add	r3, r1
 800a266:	3314      	adds	r3, #20
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d006      	beq.n	800a27c <etharp_find_entry+0x27c>
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <etharp_find_entry+0x2d8>)
 800a270:	f240 1285 	movw	r2, #389	; 0x185
 800a274:	491d      	ldr	r1, [pc, #116]	; (800a2ec <etharp_find_entry+0x2ec>)
 800a276:	481a      	ldr	r0, [pc, #104]	; (800a2e0 <etharp_find_entry+0x2e0>)
 800a278:	f00a ffca 	bl	8015210 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6819      	ldr	r1, [r3, #0]
 800a28a:	4812      	ldr	r0, [pc, #72]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a28c:	4613      	mov	r3, r2
 800a28e:	005b      	lsls	r3, r3, #1
 800a290:	4413      	add	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4403      	add	r3, r0
 800a296:	3304      	adds	r3, #4
 800a298:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a29a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a29e:	490d      	ldr	r1, [pc, #52]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	4413      	add	r3, r2
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	440b      	add	r3, r1
 800a2aa:	3312      	adds	r3, #18
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a2b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a2b4:	4907      	ldr	r1, [pc, #28]	; (800a2d4 <etharp_find_entry+0x2d4>)
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	4413      	add	r3, r2
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	440b      	add	r3, r1
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a2c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3728      	adds	r7, #40	; 0x28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	2000711c 	.word	0x2000711c
 800a2d8:	08016584 	.word	0x08016584
 800a2dc:	080165bc 	.word	0x080165bc
 800a2e0:	080165fc 	.word	0x080165fc
 800a2e4:	08016624 	.word	0x08016624
 800a2e8:	0801663c 	.word	0x0801663c
 800a2ec:	08016650 	.word	0x08016650

0800a2f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a304:	2b06      	cmp	r3, #6
 800a306:	d006      	beq.n	800a316 <etharp_update_arp_entry+0x26>
 800a308:	4b48      	ldr	r3, [pc, #288]	; (800a42c <etharp_update_arp_entry+0x13c>)
 800a30a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800a30e:	4948      	ldr	r1, [pc, #288]	; (800a430 <etharp_update_arp_entry+0x140>)
 800a310:	4848      	ldr	r0, [pc, #288]	; (800a434 <etharp_update_arp_entry+0x144>)
 800a312:	f00a ff7d 	bl	8015210 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d012      	beq.n	800a342 <etharp_update_arp_entry+0x52>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00e      	beq.n	800a342 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68f9      	ldr	r1, [r7, #12]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 f8f6 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800a330:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a33e:	2be0      	cmp	r3, #224	; 0xe0
 800a340:	d102      	bne.n	800a348 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a342:	f06f 030f 	mvn.w	r3, #15
 800a346:	e06c      	b.n	800a422 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4619      	mov	r1, r3
 800a34e:	68b8      	ldr	r0, [r7, #8]
 800a350:	f7ff fe56 	bl	800a000 <etharp_find_entry>
 800a354:	4603      	mov	r3, r0
 800a356:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a358:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da02      	bge.n	800a366 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a360:	8afb      	ldrh	r3, [r7, #22]
 800a362:	b25b      	sxtb	r3, r3
 800a364:	e05d      	b.n	800a422 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a366:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a36a:	4933      	ldr	r1, [pc, #204]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a36c:	4613      	mov	r3, r2
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	4413      	add	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	440b      	add	r3, r1
 800a376:	3314      	adds	r3, #20
 800a378:	2202      	movs	r2, #2
 800a37a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a37c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a380:	492d      	ldr	r1, [pc, #180]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	440b      	add	r3, r1
 800a38c:	3308      	adds	r3, #8
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a396:	4613      	mov	r3, r2
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	4413      	add	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	3308      	adds	r3, #8
 800a3a0:	4a25      	ldr	r2, [pc, #148]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a3a2:	4413      	add	r3, r2
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	2206      	movs	r2, #6
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f00a ff1d 	bl	80151ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a3b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a3b4:	4920      	ldr	r1, [pc, #128]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	4413      	add	r3, r2
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	440b      	add	r3, r1
 800a3c0:	3312      	adds	r3, #18
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a3c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a3ca:	491b      	ldr	r1, [pc, #108]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	4413      	add	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	440b      	add	r3, r1
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d021      	beq.n	800a420 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a3dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a3e0:	4915      	ldr	r1, [pc, #84]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4413      	add	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	440b      	add	r3, r1
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a3f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a3f4:	4910      	ldr	r1, [pc, #64]	; (800a438 <etharp_update_arp_entry+0x148>)
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	4413      	add	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	440b      	add	r3, r1
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800a40a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6939      	ldr	r1, [r7, #16]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f00a fd2d 	bl	8014e74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f003 fa54 	bl	800d8c8 <pbuf_free>
  }
  return ERR_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	08016584 	.word	0x08016584
 800a430:	0801667c 	.word	0x0801667c
 800a434:	080165fc 	.word	0x080165fc
 800a438:	2000711c 	.word	0x2000711c

0800a43c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	e01e      	b.n	800a488 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a44a:	4913      	ldr	r1, [pc, #76]	; (800a498 <etharp_cleanup_netif+0x5c>)
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	440b      	add	r3, r1
 800a458:	3314      	adds	r3, #20
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a45e:	7afb      	ldrb	r3, [r7, #11]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00e      	beq.n	800a482 <etharp_cleanup_netif+0x46>
 800a464:	490c      	ldr	r1, [pc, #48]	; (800a498 <etharp_cleanup_netif+0x5c>)
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4613      	mov	r3, r2
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	4413      	add	r3, r2
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	440b      	add	r3, r1
 800a472:	3308      	adds	r3, #8
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d102      	bne.n	800a482 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7ff fce5 	bl	8009e4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3301      	adds	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b09      	cmp	r3, #9
 800a48c:	dddd      	ble.n	800a44a <etharp_cleanup_netif+0xe>
    }
  }
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	2000711c 	.word	0x2000711c

0800a49c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a49c:	b5b0      	push	{r4, r5, r7, lr}
 800a49e:	b08a      	sub	sp, #40	; 0x28
 800a4a0:	af04      	add	r7, sp, #16
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d107      	bne.n	800a4bc <etharp_input+0x20>
 800a4ac:	4b3d      	ldr	r3, [pc, #244]	; (800a5a4 <etharp_input+0x108>)
 800a4ae:	f240 228a 	movw	r2, #650	; 0x28a
 800a4b2:	493d      	ldr	r1, [pc, #244]	; (800a5a8 <etharp_input+0x10c>)
 800a4b4:	483d      	ldr	r0, [pc, #244]	; (800a5ac <etharp_input+0x110>)
 800a4b6:	f00a feab 	bl	8015210 <iprintf>
 800a4ba:	e06f      	b.n	800a59c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4cc:	d10c      	bne.n	800a4e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a4d2:	2b06      	cmp	r3, #6
 800a4d4:	d108      	bne.n	800a4e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d104      	bne.n	800a4e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	885b      	ldrh	r3, [r3, #2]
 800a4e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d003      	beq.n	800a4f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f003 f9ed 	bl	800d8c8 <pbuf_free>
    return;
 800a4ee:	e055      	b.n	800a59c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	330e      	adds	r3, #14
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3318      	adds	r3, #24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	3304      	adds	r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <etharp_input+0x74>
    for_us = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75fb      	strb	r3, [r7, #23]
 800a50e:	e009      	b.n	800a524 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	3304      	adds	r3, #4
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	429a      	cmp	r2, r3
 800a51a:	bf0c      	ite	eq
 800a51c:	2301      	moveq	r3, #1
 800a51e:	2300      	movne	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f103 0208 	add.w	r2, r3, #8
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <etharp_input+0x98>
 800a530:	2301      	movs	r3, #1
 800a532:	e000      	b.n	800a536 <etharp_input+0x9a>
 800a534:	2302      	movs	r3, #2
 800a536:	f107 010c 	add.w	r1, r7, #12
 800a53a:	6838      	ldr	r0, [r7, #0]
 800a53c:	f7ff fed8 	bl	800a2f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	88db      	ldrh	r3, [r3, #6]
 800a544:	b29b      	uxth	r3, r3
 800a546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a54a:	d003      	beq.n	800a554 <etharp_input+0xb8>
 800a54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a550:	d01e      	beq.n	800a590 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a552:	e020      	b.n	800a596 <etharp_input+0xfa>
      if (for_us) {
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d01c      	beq.n	800a594 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a574:	2102      	movs	r1, #2
 800a576:	9103      	str	r1, [sp, #12]
 800a578:	f107 010c 	add.w	r1, r7, #12
 800a57c:	9102      	str	r1, [sp, #8]
 800a57e:	9201      	str	r2, [sp, #4]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	462b      	mov	r3, r5
 800a584:	4622      	mov	r2, r4
 800a586:	4601      	mov	r1, r0
 800a588:	6838      	ldr	r0, [r7, #0]
 800a58a:	f000 faeb 	bl	800ab64 <etharp_raw>
      break;
 800a58e:	e001      	b.n	800a594 <etharp_input+0xf8>
      break;
 800a590:	bf00      	nop
 800a592:	e000      	b.n	800a596 <etharp_input+0xfa>
      break;
 800a594:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f003 f996 	bl	800d8c8 <pbuf_free>
}
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	08016584 	.word	0x08016584
 800a5a8:	080166d4 	.word	0x080166d4
 800a5ac:	080165fc 	.word	0x080165fc

0800a5b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a5be:	79fa      	ldrb	r2, [r7, #7]
 800a5c0:	4944      	ldr	r1, [pc, #272]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4413      	add	r3, r2
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d806      	bhi.n	800a5e2 <etharp_output_to_arp_index+0x32>
 800a5d4:	4b40      	ldr	r3, [pc, #256]	; (800a6d8 <etharp_output_to_arp_index+0x128>)
 800a5d6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800a5da:	4940      	ldr	r1, [pc, #256]	; (800a6dc <etharp_output_to_arp_index+0x12c>)
 800a5dc:	4840      	ldr	r0, [pc, #256]	; (800a6e0 <etharp_output_to_arp_index+0x130>)
 800a5de:	f00a fe17 	bl	8015210 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a5e2:	79fa      	ldrb	r2, [r7, #7]
 800a5e4:	493b      	ldr	r1, [pc, #236]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	440b      	add	r3, r1
 800a5f0:	3314      	adds	r3, #20
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d153      	bne.n	800a6a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a5f8:	79fa      	ldrb	r2, [r7, #7]
 800a5fa:	4936      	ldr	r1, [pc, #216]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	440b      	add	r3, r1
 800a606:	3312      	adds	r3, #18
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a60e:	d919      	bls.n	800a644 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a610:	79fa      	ldrb	r2, [r7, #7]
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	4a2e      	ldr	r2, [pc, #184]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a61c:	4413      	add	r3, r2
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fb4c 	bl	800acc0 <etharp_request>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d138      	bne.n	800a6a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a62e:	79fa      	ldrb	r2, [r7, #7]
 800a630:	4928      	ldr	r1, [pc, #160]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a632:	4613      	mov	r3, r2
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	4413      	add	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	440b      	add	r3, r1
 800a63c:	3314      	adds	r3, #20
 800a63e:	2203      	movs	r2, #3
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	e02d      	b.n	800a6a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a644:	79fa      	ldrb	r2, [r7, #7]
 800a646:	4923      	ldr	r1, [pc, #140]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a648:	4613      	mov	r3, r2
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	440b      	add	r3, r1
 800a652:	3312      	adds	r3, #18
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a65a:	d321      	bcc.n	800a6a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a65c:	79fa      	ldrb	r2, [r7, #7]
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	4a1b      	ldr	r2, [pc, #108]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a668:	4413      	add	r3, r2
 800a66a:	1d19      	adds	r1, r3, #4
 800a66c:	79fa      	ldrb	r2, [r7, #7]
 800a66e:	4613      	mov	r3, r2
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4413      	add	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	3308      	adds	r3, #8
 800a678:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a67a:	4413      	add	r3, r2
 800a67c:	3304      	adds	r3, #4
 800a67e:	461a      	mov	r2, r3
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fafb 	bl	800ac7c <etharp_request_dst>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a68c:	79fa      	ldrb	r2, [r7, #7]
 800a68e:	4911      	ldr	r1, [pc, #68]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a690:	4613      	mov	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	4413      	add	r3, r2
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	440b      	add	r3, r1
 800a69a:	3314      	adds	r3, #20
 800a69c:	2203      	movs	r2, #3
 800a69e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800a6a6:	79fa      	ldrb	r2, [r7, #7]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	4413      	add	r3, r2
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <etharp_output_to_arp_index+0x124>)
 800a6b4:	4413      	add	r3, r2
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f00a fbd5 	bl	8014e74 <ethernet_output>
 800a6ca:	4603      	mov	r3, r0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	2000711c 	.word	0x2000711c
 800a6d8:	08016584 	.word	0x08016584
 800a6dc:	080166f4 	.word	0x080166f4
 800a6e0:	080165fc 	.word	0x080165fc

0800a6e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	; 0x28
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <etharp_output+0x24>
 800a6fa:	4b73      	ldr	r3, [pc, #460]	; (800a8c8 <etharp_output+0x1e4>)
 800a6fc:	f240 321e 	movw	r2, #798	; 0x31e
 800a700:	4972      	ldr	r1, [pc, #456]	; (800a8cc <etharp_output+0x1e8>)
 800a702:	4873      	ldr	r0, [pc, #460]	; (800a8d0 <etharp_output+0x1ec>)
 800a704:	f00a fd84 	bl	8015210 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <etharp_output+0x38>
 800a70e:	4b6e      	ldr	r3, [pc, #440]	; (800a8c8 <etharp_output+0x1e4>)
 800a710:	f240 321f 	movw	r2, #799	; 0x31f
 800a714:	496f      	ldr	r1, [pc, #444]	; (800a8d4 <etharp_output+0x1f0>)
 800a716:	486e      	ldr	r0, [pc, #440]	; (800a8d0 <etharp_output+0x1ec>)
 800a718:	f00a fd7a 	bl	8015210 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <etharp_output+0x4c>
 800a722:	4b69      	ldr	r3, [pc, #420]	; (800a8c8 <etharp_output+0x1e4>)
 800a724:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a728:	496b      	ldr	r1, [pc, #428]	; (800a8d8 <etharp_output+0x1f4>)
 800a72a:	4869      	ldr	r0, [pc, #420]	; (800a8d0 <etharp_output+0x1ec>)
 800a72c:	f00a fd70 	bl	8015210 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68f9      	ldr	r1, [r7, #12]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fef0 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a742:	4b66      	ldr	r3, [pc, #408]	; (800a8dc <etharp_output+0x1f8>)
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	e0af      	b.n	800a8a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a750:	2be0      	cmp	r3, #224	; 0xe0
 800a752:	d118      	bne.n	800a786 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a754:	2301      	movs	r3, #1
 800a756:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a758:	2300      	movs	r3, #0
 800a75a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a75c:	235e      	movs	r3, #94	; 0x5e
 800a75e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3301      	adds	r3, #1
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3302      	adds	r3, #2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3303      	adds	r3, #3
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	61fb      	str	r3, [r7, #28]
 800a784:	e090      	b.n	800a8a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3304      	adds	r3, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	405a      	eors	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3308      	adds	r3, #8
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4013      	ands	r3, r2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d012      	beq.n	800a7c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a7a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00b      	beq.n	800a7c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	330c      	adds	r3, #12
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	330c      	adds	r3, #12
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	e002      	b.n	800a7c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a7be:	f06f 0303 	mvn.w	r3, #3
 800a7c2:	e07d      	b.n	800a8c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a7c4:	4b46      	ldr	r3, [pc, #280]	; (800a8e0 <etharp_output+0x1fc>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4a46      	ldr	r2, [pc, #280]	; (800a8e4 <etharp_output+0x200>)
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	440b      	add	r3, r1
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3314      	adds	r3, #20
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d925      	bls.n	800a82a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a7de:	4b40      	ldr	r3, [pc, #256]	; (800a8e0 <etharp_output+0x1fc>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4a3f      	ldr	r2, [pc, #252]	; (800a8e4 <etharp_output+0x200>)
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	440b      	add	r3, r1
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d117      	bne.n	800a82a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b38      	ldr	r3, [pc, #224]	; (800a8e0 <etharp_output+0x1fc>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	4937      	ldr	r1, [pc, #220]	; (800a8e4 <etharp_output+0x200>)
 800a806:	4603      	mov	r3, r0
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	4403      	add	r3, r0
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	440b      	add	r3, r1
 800a810:	3304      	adds	r3, #4
 800a812:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a814:	429a      	cmp	r2, r3
 800a816:	d108      	bne.n	800a82a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a818:	4b31      	ldr	r3, [pc, #196]	; (800a8e0 <etharp_output+0x1fc>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff fec5 	bl	800a5b0 <etharp_output_to_arp_index>
 800a826:	4603      	mov	r3, r0
 800a828:	e04a      	b.n	800a8c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a82a:	2300      	movs	r3, #0
 800a82c:	75fb      	strb	r3, [r7, #23]
 800a82e:	e031      	b.n	800a894 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a830:	7dfa      	ldrb	r2, [r7, #23]
 800a832:	492c      	ldr	r1, [pc, #176]	; (800a8e4 <etharp_output+0x200>)
 800a834:	4613      	mov	r3, r2
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3314      	adds	r3, #20
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d923      	bls.n	800a88e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800a846:	7dfa      	ldrb	r2, [r7, #23]
 800a848:	4926      	ldr	r1, [pc, #152]	; (800a8e4 <etharp_output+0x200>)
 800a84a:	4613      	mov	r3, r2
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	3308      	adds	r3, #8
 800a856:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d117      	bne.n	800a88e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	6819      	ldr	r1, [r3, #0]
 800a862:	7dfa      	ldrb	r2, [r7, #23]
 800a864:	481f      	ldr	r0, [pc, #124]	; (800a8e4 <etharp_output+0x200>)
 800a866:	4613      	mov	r3, r2
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4413      	add	r3, r2
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	4403      	add	r3, r0
 800a870:	3304      	adds	r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800a874:	4299      	cmp	r1, r3
 800a876:	d10a      	bne.n	800a88e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800a878:	4a19      	ldr	r2, [pc, #100]	; (800a8e0 <etharp_output+0x1fc>)
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	461a      	mov	r2, r3
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fe93 	bl	800a5b0 <etharp_output_to_arp_index>
 800a88a:	4603      	mov	r3, r0
 800a88c:	e018      	b.n	800a8c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	3301      	adds	r3, #1
 800a892:	75fb      	strb	r3, [r7, #23]
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b09      	cmp	r3, #9
 800a898:	d9ca      	bls.n	800a830 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	69b9      	ldr	r1, [r7, #24]
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 f822 	bl	800a8e8 <etharp_query>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	e00b      	b.n	800a8c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800a8ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f00a fadb 	bl	8014e74 <ethernet_output>
 800a8be:	4603      	mov	r3, r0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	08016584 	.word	0x08016584
 800a8cc:	080166d4 	.word	0x080166d4
 800a8d0:	080165fc 	.word	0x080165fc
 800a8d4:	08016724 	.word	0x08016724
 800a8d8:	080166c4 	.word	0x080166c4
 800a8dc:	08019e74 	.word	0x08019e74
 800a8e0:	2000720c 	.word	0x2000720c
 800a8e4:	2000711c 	.word	0x2000711c

0800a8e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08c      	sub	sp, #48	; 0x30
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3326      	adds	r3, #38	; 0x26
 800a8f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a8fa:	23ff      	movs	r3, #255	; 0xff
 800a8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68f9      	ldr	r1, [r7, #12]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fe06 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10c      	bne.n	800a930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a91e:	2be0      	cmp	r3, #224	; 0xe0
 800a920:	d006      	beq.n	800a930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a930:	f06f 030f 	mvn.w	r3, #15
 800a934:	e102      	b.n	800ab3c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	2101      	movs	r1, #1
 800a93a:	68b8      	ldr	r0, [r7, #8]
 800a93c:	f7ff fb60 	bl	800a000 <etharp_find_entry>
 800a940:	4603      	mov	r3, r0
 800a942:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800a944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	da02      	bge.n	800a952 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800a94c:	8a7b      	ldrh	r3, [r7, #18]
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	e0f4      	b.n	800ab3c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a952:	8a7b      	ldrh	r3, [r7, #18]
 800a954:	2b7e      	cmp	r3, #126	; 0x7e
 800a956:	d906      	bls.n	800a966 <etharp_query+0x7e>
 800a958:	4b7a      	ldr	r3, [pc, #488]	; (800ab44 <etharp_query+0x25c>)
 800a95a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800a95e:	497a      	ldr	r1, [pc, #488]	; (800ab48 <etharp_query+0x260>)
 800a960:	487a      	ldr	r0, [pc, #488]	; (800ab4c <etharp_query+0x264>)
 800a962:	f00a fc55 	bl	8015210 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800a966:	8a7b      	ldrh	r3, [r7, #18]
 800a968:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a96a:	7c7a      	ldrb	r2, [r7, #17]
 800a96c:	4978      	ldr	r1, [pc, #480]	; (800ab50 <etharp_query+0x268>)
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	440b      	add	r3, r1
 800a978:	3314      	adds	r3, #20
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d115      	bne.n	800a9ac <etharp_query+0xc4>
    is_new_entry = 1;
 800a980:	2301      	movs	r3, #1
 800a982:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a984:	7c7a      	ldrb	r2, [r7, #17]
 800a986:	4972      	ldr	r1, [pc, #456]	; (800ab50 <etharp_query+0x268>)
 800a988:	4613      	mov	r3, r2
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	4413      	add	r3, r2
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	440b      	add	r3, r1
 800a992:	3314      	adds	r3, #20
 800a994:	2201      	movs	r2, #1
 800a996:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a998:	7c7a      	ldrb	r2, [r7, #17]
 800a99a:	496d      	ldr	r1, [pc, #436]	; (800ab50 <etharp_query+0x268>)
 800a99c:	4613      	mov	r3, r2
 800a99e:	005b      	lsls	r3, r3, #1
 800a9a0:	4413      	add	r3, r2
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	440b      	add	r3, r1
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a9ac:	7c7a      	ldrb	r2, [r7, #17]
 800a9ae:	4968      	ldr	r1, [pc, #416]	; (800ab50 <etharp_query+0x268>)
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	440b      	add	r3, r1
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d011      	beq.n	800a9e6 <etharp_query+0xfe>
 800a9c2:	7c7a      	ldrb	r2, [r7, #17]
 800a9c4:	4962      	ldr	r1, [pc, #392]	; (800ab50 <etharp_query+0x268>)
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	440b      	add	r3, r1
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d806      	bhi.n	800a9e6 <etharp_query+0xfe>
 800a9d8:	4b5a      	ldr	r3, [pc, #360]	; (800ab44 <etharp_query+0x25c>)
 800a9da:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a9de:	495d      	ldr	r1, [pc, #372]	; (800ab54 <etharp_query+0x26c>)
 800a9e0:	485a      	ldr	r0, [pc, #360]	; (800ab4c <etharp_query+0x264>)
 800a9e2:	f00a fc15 	bl	8015210 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <etharp_query+0x10a>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10c      	bne.n	800aa0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f963 	bl	800acc0 <etharp_request>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d102      	bne.n	800aa0c <etharp_query+0x124>
      return result;
 800aa06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa0a:	e097      	b.n	800ab3c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <etharp_query+0x138>
 800aa12:	4b4c      	ldr	r3, [pc, #304]	; (800ab44 <etharp_query+0x25c>)
 800aa14:	f240 32e1 	movw	r2, #993	; 0x3e1
 800aa18:	494f      	ldr	r1, [pc, #316]	; (800ab58 <etharp_query+0x270>)
 800aa1a:	484c      	ldr	r0, [pc, #304]	; (800ab4c <etharp_query+0x264>)
 800aa1c:	f00a fbf8 	bl	8015210 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800aa20:	7c7a      	ldrb	r2, [r7, #17]
 800aa22:	494b      	ldr	r1, [pc, #300]	; (800ab50 <etharp_query+0x268>)
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	440b      	add	r3, r1
 800aa2e:	3314      	adds	r3, #20
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d918      	bls.n	800aa68 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800aa36:	4a49      	ldr	r2, [pc, #292]	; (800ab5c <etharp_query+0x274>)
 800aa38:	7c7b      	ldrb	r3, [r7, #17]
 800aa3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800aa3c:	7c7a      	ldrb	r2, [r7, #17]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	4413      	add	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	3308      	adds	r3, #8
 800aa48:	4a41      	ldr	r2, [pc, #260]	; (800ab50 <etharp_query+0x268>)
 800aa4a:	4413      	add	r3, r2
 800aa4c:	1d1a      	adds	r2, r3, #4
 800aa4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4613      	mov	r3, r2
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f00a fa0a 	bl	8014e74 <ethernet_output>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa66:	e067      	b.n	800ab38 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aa68:	7c7a      	ldrb	r2, [r7, #17]
 800aa6a:	4939      	ldr	r1, [pc, #228]	; (800ab50 <etharp_query+0x268>)
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	4413      	add	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	440b      	add	r3, r1
 800aa76:	3314      	adds	r3, #20
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d15c      	bne.n	800ab38 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	61fb      	str	r3, [r7, #28]
    while (p) {
 800aa86:	e01c      	b.n	800aac2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	895a      	ldrh	r2, [r3, #10]
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	891b      	ldrh	r3, [r3, #8]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d10a      	bne.n	800aaaa <etharp_query+0x1c2>
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <etharp_query+0x1c2>
 800aa9c:	4b29      	ldr	r3, [pc, #164]	; (800ab44 <etharp_query+0x25c>)
 800aa9e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800aaa2:	492f      	ldr	r1, [pc, #188]	; (800ab60 <etharp_query+0x278>)
 800aaa4:	4829      	ldr	r0, [pc, #164]	; (800ab4c <etharp_query+0x264>)
 800aaa6:	f00a fbb3 	bl	8015210 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	7b1b      	ldrb	r3, [r3, #12]
 800aaae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <etharp_query+0x1d4>
        copy_needed = 1;
 800aab6:	2301      	movs	r3, #1
 800aab8:	61bb      	str	r3, [r7, #24]
        break;
 800aaba:	e005      	b.n	800aac8 <etharp_query+0x1e0>
      }
      p = p->next;
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1df      	bne.n	800aa88 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d007      	beq.n	800aade <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800aad4:	200e      	movs	r0, #14
 800aad6:	f003 faa7 	bl	800e028 <pbuf_clone>
 800aada:	61f8      	str	r0, [r7, #28]
 800aadc:	e004      	b.n	800aae8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800aae2:	69f8      	ldr	r0, [r7, #28]
 800aae4:	f002 ff96 	bl	800da14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d021      	beq.n	800ab32 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800aaee:	7c7a      	ldrb	r2, [r7, #17]
 800aaf0:	4917      	ldr	r1, [pc, #92]	; (800ab50 <etharp_query+0x268>)
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	440b      	add	r3, r1
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ab02:	7c7a      	ldrb	r2, [r7, #17]
 800ab04:	4912      	ldr	r1, [pc, #72]	; (800ab50 <etharp_query+0x268>)
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	440b      	add	r3, r1
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 fed8 	bl	800d8c8 <pbuf_free>
      }
      arp_table[i].q = p;
 800ab18:	7c7a      	ldrb	r2, [r7, #17]
 800ab1a:	490d      	ldr	r1, [pc, #52]	; (800ab50 <etharp_query+0x268>)
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	4413      	add	r3, r2
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	440b      	add	r3, r1
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab30:	e002      	b.n	800ab38 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ab32:	23ff      	movs	r3, #255	; 0xff
 800ab34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ab38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3728      	adds	r7, #40	; 0x28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	08016584 	.word	0x08016584
 800ab48:	08016730 	.word	0x08016730
 800ab4c:	080165fc 	.word	0x080165fc
 800ab50:	2000711c 	.word	0x2000711c
 800ab54:	08016740 	.word	0x08016740
 800ab58:	08016724 	.word	0x08016724
 800ab5c:	2000720c 	.word	0x2000720c
 800ab60:	08016768 	.word	0x08016768

0800ab64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	; 0x28
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d106      	bne.n	800ab8a <etharp_raw+0x26>
 800ab7c:	4b3a      	ldr	r3, [pc, #232]	; (800ac68 <etharp_raw+0x104>)
 800ab7e:	f240 4257 	movw	r2, #1111	; 0x457
 800ab82:	493a      	ldr	r1, [pc, #232]	; (800ac6c <etharp_raw+0x108>)
 800ab84:	483a      	ldr	r0, [pc, #232]	; (800ac70 <etharp_raw+0x10c>)
 800ab86:	f00a fb43 	bl	8015210 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ab8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab8e:	211c      	movs	r1, #28
 800ab90:	200e      	movs	r0, #14
 800ab92:	f002 fbb7 	bl	800d304 <pbuf_alloc>
 800ab96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aba2:	e05d      	b.n	800ac60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	895b      	ldrh	r3, [r3, #10]
 800aba8:	2b1b      	cmp	r3, #27
 800abaa:	d806      	bhi.n	800abba <etharp_raw+0x56>
 800abac:	4b2e      	ldr	r3, [pc, #184]	; (800ac68 <etharp_raw+0x104>)
 800abae:	f240 4263 	movw	r2, #1123	; 0x463
 800abb2:	4930      	ldr	r1, [pc, #192]	; (800ac74 <etharp_raw+0x110>)
 800abb4:	482e      	ldr	r0, [pc, #184]	; (800ac70 <etharp_raw+0x10c>)
 800abb6:	f00a fb2b 	bl	8015210 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800abc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fdd6 	bl	8009774 <lwip_htons>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800abd6:	2b06      	cmp	r3, #6
 800abd8:	d006      	beq.n	800abe8 <etharp_raw+0x84>
 800abda:	4b23      	ldr	r3, [pc, #140]	; (800ac68 <etharp_raw+0x104>)
 800abdc:	f240 426a 	movw	r2, #1130	; 0x46a
 800abe0:	4925      	ldr	r1, [pc, #148]	; (800ac78 <etharp_raw+0x114>)
 800abe2:	4823      	ldr	r0, [pc, #140]	; (800ac70 <etharp_raw+0x10c>)
 800abe4:	f00a fb14 	bl	8015210 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	3308      	adds	r3, #8
 800abec:	2206      	movs	r2, #6
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f00a fafa 	bl	80151ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	3312      	adds	r3, #18
 800abfa:	2206      	movs	r2, #6
 800abfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abfe:	4618      	mov	r0, r3
 800ac00:	f00a faf3 	bl	80151ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	330e      	adds	r3, #14
 800ac08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	3318      	adds	r3, #24
 800ac12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	701a      	strb	r2, [r3, #0]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f042 0201 	orr.w	r2, r2, #1
 800ac24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f042 0208 	orr.w	r2, r2, #8
 800ac2e:	709a      	strb	r2, [r3, #2]
 800ac30:	2200      	movs	r2, #0
 800ac32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2206      	movs	r2, #6
 800ac38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ac40:	f640 0306 	movw	r3, #2054	; 0x806
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	69b9      	ldr	r1, [r7, #24]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f00a f911 	bl	8014e74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ac52:	69b8      	ldr	r0, [r7, #24]
 800ac54:	f002 fe38 	bl	800d8c8 <pbuf_free>
  p = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ac5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08016584 	.word	0x08016584
 800ac6c:	080166d4 	.word	0x080166d4
 800ac70:	080165fc 	.word	0x080165fc
 800ac74:	08016784 	.word	0x08016784
 800ac78:	080167b8 	.word	0x080167b8

0800ac7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ac98:	2201      	movs	r2, #1
 800ac9a:	9203      	str	r2, [sp, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	9202      	str	r2, [sp, #8]
 800aca0:	4a06      	ldr	r2, [pc, #24]	; (800acbc <etharp_request_dst+0x40>)
 800aca2:	9201      	str	r2, [sp, #4]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4603      	mov	r3, r0
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff ff5a 	bl	800ab64 <etharp_raw>
 800acb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	08019e7c 	.word	0x08019e7c

0800acc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800acca:	4a05      	ldr	r2, [pc, #20]	; (800ace0 <etharp_request+0x20>)
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff ffd4 	bl	800ac7c <etharp_request_dst>
 800acd4:	4603      	mov	r3, r0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	08019e74 	.word	0x08019e74

0800ace4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08e      	sub	sp, #56	; 0x38
 800ace8:	af04      	add	r7, sp, #16
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800acee:	4b79      	ldr	r3, [pc, #484]	; (800aed4 <icmp_input+0x1f0>)
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ad04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad06:	2b13      	cmp	r3, #19
 800ad08:	f240 80cd 	bls.w	800aea6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	895b      	ldrh	r3, [r3, #10]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	f240 80ca 	bls.w	800aeaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ad20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80b7 	beq.w	800ae98 <icmp_input+0x1b4>
 800ad2a:	2b08      	cmp	r3, #8
 800ad2c:	f040 80b7 	bne.w	800ae9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ad30:	4b69      	ldr	r3, [pc, #420]	; (800aed8 <icmp_input+0x1f4>)
 800ad32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ad34:	4b67      	ldr	r3, [pc, #412]	; (800aed4 <icmp_input+0x1f0>)
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad3c:	2be0      	cmp	r3, #224	; 0xe0
 800ad3e:	f000 80bb 	beq.w	800aeb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ad42:	4b64      	ldr	r3, [pc, #400]	; (800aed4 <icmp_input+0x1f0>)
 800ad44:	695a      	ldr	r2, [r3, #20]
 800ad46:	4b63      	ldr	r3, [pc, #396]	; (800aed4 <icmp_input+0x1f0>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f000 fbe5 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 80b1 	bne.w	800aebc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	891b      	ldrh	r3, [r3, #8]
 800ad5e:	2b07      	cmp	r3, #7
 800ad60:	f240 80a5 	bls.w	800aeae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ad64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad66:	330e      	adds	r3, #14
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f002 fd16 	bl	800d79c <pbuf_add_header>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d04b      	beq.n	800ae0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	891a      	ldrh	r2, [r3, #8]
 800ad7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad7c:	4413      	add	r3, r2
 800ad7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	891b      	ldrh	r3, [r3, #8]
 800ad84:	8b7a      	ldrh	r2, [r7, #26]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	f0c0 809a 	bcc.w	800aec0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ad8c:	8b7b      	ldrh	r3, [r7, #26]
 800ad8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ad92:	4619      	mov	r1, r3
 800ad94:	200e      	movs	r0, #14
 800ad96:	f002 fab5 	bl	800d304 <pbuf_alloc>
 800ad9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 8090 	beq.w	800aec4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	895b      	ldrh	r3, [r3, #10]
 800ada8:	461a      	mov	r2, r3
 800adaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adac:	3308      	adds	r3, #8
 800adae:	429a      	cmp	r2, r3
 800adb0:	d203      	bcs.n	800adba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800adb2:	6978      	ldr	r0, [r7, #20]
 800adb4:	f002 fd88 	bl	800d8c8 <pbuf_free>
          goto icmperr;
 800adb8:	e085      	b.n	800aec6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800adc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f00a fa11 	bl	80151ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800adc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adca:	4619      	mov	r1, r3
 800adcc:	6978      	ldr	r0, [r7, #20]
 800adce:	f002 fcf5 	bl	800d7bc <pbuf_remove_header>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d009      	beq.n	800adec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800add8:	4b40      	ldr	r3, [pc, #256]	; (800aedc <icmp_input+0x1f8>)
 800adda:	22b6      	movs	r2, #182	; 0xb6
 800addc:	4940      	ldr	r1, [pc, #256]	; (800aee0 <icmp_input+0x1fc>)
 800adde:	4841      	ldr	r0, [pc, #260]	; (800aee4 <icmp_input+0x200>)
 800ade0:	f00a fa16 	bl	8015210 <iprintf>
          pbuf_free(r);
 800ade4:	6978      	ldr	r0, [r7, #20]
 800ade6:	f002 fd6f 	bl	800d8c8 <pbuf_free>
          goto icmperr;
 800adea:	e06c      	b.n	800aec6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	f002 fe9e 	bl	800db30 <pbuf_copy>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800adfa:	6978      	ldr	r0, [r7, #20]
 800adfc:	f002 fd64 	bl	800d8c8 <pbuf_free>
          goto icmperr;
 800ae00:	e061      	b.n	800aec6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f002 fd60 	bl	800d8c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	e00f      	b.n	800ae2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ae0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae10:	330e      	adds	r3, #14
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f002 fcd1 	bl	800d7bc <pbuf_remove_header>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d006      	beq.n	800ae2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ae20:	4b2e      	ldr	r3, [pc, #184]	; (800aedc <icmp_input+0x1f8>)
 800ae22:	22c7      	movs	r2, #199	; 0xc7
 800ae24:	4930      	ldr	r1, [pc, #192]	; (800aee8 <icmp_input+0x204>)
 800ae26:	482f      	ldr	r0, [pc, #188]	; (800aee4 <icmp_input+0x200>)
 800ae28:	f00a f9f2 	bl	8015210 <iprintf>
          goto icmperr;
 800ae2c:	e04b      	b.n	800aec6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ae34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f002 fcaf 	bl	800d79c <pbuf_add_header>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d12b      	bne.n	800ae9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ae52:	4b20      	ldr	r3, [pc, #128]	; (800aed4 <icmp_input+0x1f0>)
 800ae54:	691a      	ldr	r2, [r3, #16]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	2200      	movs	r2, #0
 800ae64:	709a      	strb	r2, [r3, #2]
 800ae66:	2200      	movs	r2, #0
 800ae68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	22ff      	movs	r2, #255	; 0xff
 800ae6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	729a      	strb	r2, [r3, #10]
 800ae76:	2200      	movs	r2, #0
 800ae78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	2301      	movs	r3, #1
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	2300      	movs	r3, #0
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	23ff      	movs	r3, #255	; 0xff
 800ae88:	2200      	movs	r2, #0
 800ae8a:	69f9      	ldr	r1, [r7, #28]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fa6d 	bl	800b36c <ip4_output_if>
 800ae92:	4603      	mov	r3, r0
 800ae94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ae96:	e001      	b.n	800ae9c <icmp_input+0x1b8>
      break;
 800ae98:	bf00      	nop
 800ae9a:	e000      	b.n	800ae9e <icmp_input+0x1ba>
      break;
 800ae9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 fd12 	bl	800d8c8 <pbuf_free>
  return;
 800aea4:	e013      	b.n	800aece <icmp_input+0x1ea>
    goto lenerr;
 800aea6:	bf00      	nop
 800aea8:	e002      	b.n	800aeb0 <icmp_input+0x1cc>
    goto lenerr;
 800aeaa:	bf00      	nop
 800aeac:	e000      	b.n	800aeb0 <icmp_input+0x1cc>
        goto lenerr;
 800aeae:	bf00      	nop
lenerr:
  pbuf_free(p);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f002 fd09 	bl	800d8c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800aeb6:	e00a      	b.n	800aece <icmp_input+0x1ea>
        goto icmperr;
 800aeb8:	bf00      	nop
 800aeba:	e004      	b.n	800aec6 <icmp_input+0x1e2>
        goto icmperr;
 800aebc:	bf00      	nop
 800aebe:	e002      	b.n	800aec6 <icmp_input+0x1e2>
          goto icmperr;
 800aec0:	bf00      	nop
 800aec2:	e000      	b.n	800aec6 <icmp_input+0x1e2>
          goto icmperr;
 800aec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f002 fcfe 	bl	800d8c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800aecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800aece:	3728      	adds	r7, #40	; 0x28
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	200074c0 	.word	0x200074c0
 800aed8:	200074d4 	.word	0x200074d4
 800aedc:	080167fc 	.word	0x080167fc
 800aee0:	08016834 	.word	0x08016834
 800aee4:	0801686c 	.word	0x0801686c
 800aee8:	08016894 	.word	0x08016894

0800aeec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	461a      	mov	r2, r3
 800aefc:	2103      	movs	r1, #3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f814 	bl	800af2c <icmp_send_response>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	461a      	mov	r2, r3
 800af1c:	210b      	movs	r1, #11
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f804 	bl	800af2c <icmp_send_response>
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08c      	sub	sp, #48	; 0x30
 800af30:	af04      	add	r7, sp, #16
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
 800af38:	4613      	mov	r3, r2
 800af3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800af3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af40:	2124      	movs	r1, #36	; 0x24
 800af42:	2022      	movs	r0, #34	; 0x22
 800af44:	f002 f9de 	bl	800d304 <pbuf_alloc>
 800af48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d04c      	beq.n	800afea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	895b      	ldrh	r3, [r3, #10]
 800af54:	2b23      	cmp	r3, #35	; 0x23
 800af56:	d806      	bhi.n	800af66 <icmp_send_response+0x3a>
 800af58:	4b26      	ldr	r3, [pc, #152]	; (800aff4 <icmp_send_response+0xc8>)
 800af5a:	f240 1269 	movw	r2, #361	; 0x169
 800af5e:	4926      	ldr	r1, [pc, #152]	; (800aff8 <icmp_send_response+0xcc>)
 800af60:	4826      	ldr	r0, [pc, #152]	; (800affc <icmp_send_response+0xd0>)
 800af62:	f00a f955 	bl	8015210 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	78ba      	ldrb	r2, [r7, #2]
 800af7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2200      	movs	r2, #0
 800af82:	711a      	strb	r2, [r3, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2200      	movs	r2, #0
 800af8c:	719a      	strb	r2, [r3, #6]
 800af8e:	2200      	movs	r2, #0
 800af90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f103 0008 	add.w	r0, r3, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	221c      	movs	r2, #28
 800afa0:	4619      	mov	r1, r3
 800afa2:	f00a f922 	bl	80151ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800afac:	f107 030c 	add.w	r3, r7, #12
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 f825 	bl	800b000 <ip4_route>
 800afb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d011      	beq.n	800afe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2200      	movs	r2, #0
 800afc2:	709a      	strb	r2, [r3, #2]
 800afc4:	2200      	movs	r2, #0
 800afc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800afc8:	f107 020c 	add.w	r2, r7, #12
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	2301      	movs	r3, #1
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	2300      	movs	r3, #0
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	23ff      	movs	r3, #255	; 0xff
 800afda:	2100      	movs	r1, #0
 800afdc:	69f8      	ldr	r0, [r7, #28]
 800afde:	f000 f9c5 	bl	800b36c <ip4_output_if>
  }
  pbuf_free(q);
 800afe2:	69f8      	ldr	r0, [r7, #28]
 800afe4:	f002 fc70 	bl	800d8c8 <pbuf_free>
 800afe8:	e000      	b.n	800afec <icmp_send_response+0xc0>
    return;
 800afea:	bf00      	nop
}
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	080167fc 	.word	0x080167fc
 800aff8:	080168c8 	.word	0x080168c8
 800affc:	0801686c 	.word	0x0801686c

0800b000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b008:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <ip4_route+0xd0>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e033      	b.n	800b078 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d029      	beq.n	800b072 <ip4_route+0x72>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d022      	beq.n	800b072 <ip4_route+0x72>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3304      	adds	r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01d      	beq.n	800b072 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3304      	adds	r3, #4
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	405a      	eors	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3308      	adds	r3, #8
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4013      	ands	r3, r2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	e038      	b.n	800b0c4 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d108      	bne.n	800b072 <ip4_route+0x72>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	330c      	adds	r3, #12
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d101      	bne.n	800b072 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	e028      	b.n	800b0c4 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1c8      	bne.n	800b010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b07e:	4b15      	ldr	r3, [pc, #84]	; (800b0d4 <ip4_route+0xd4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d01a      	beq.n	800b0bc <ip4_route+0xbc>
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <ip4_route+0xd4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d012      	beq.n	800b0bc <ip4_route+0xbc>
 800b096:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <ip4_route+0xd4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <ip4_route+0xd4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b7f      	cmp	r3, #127	; 0x7f
 800b0ba:	d101      	bne.n	800b0c0 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e001      	b.n	800b0c4 <ip4_route+0xc4>
  }

  return netif_default;
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <ip4_route+0xd4>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	2000aee0 	.word	0x2000aee0
 800b0d4:	2000aee4 	.word	0x2000aee4

0800b0d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d016      	beq.n	800b11c <ip4_input_accept+0x44>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d011      	beq.n	800b11c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b0f8:	4b0b      	ldr	r3, [pc, #44]	; (800b128 <ip4_input_accept+0x50>)
 800b0fa:	695a      	ldr	r2, [r3, #20]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3304      	adds	r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d008      	beq.n	800b118 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b106:	4b08      	ldr	r3, [pc, #32]	; (800b128 <ip4_input_accept+0x50>)
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fa05 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800b112:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b118:	2301      	movs	r3, #1
 800b11a:	e000      	b.n	800b11e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	200074c0 	.word	0x200074c0

0800b12c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	091b      	lsrs	r3, r3, #4
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b04      	cmp	r3, #4
 800b146:	d004      	beq.n	800b152 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f002 fbbd 	bl	800d8c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e104      	b.n	800b35c <ip4_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	b29b      	uxth	r3, r3
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fb03 	bl	8009774 <lwip_htons>
 800b16e:	4603      	mov	r3, r0
 800b170:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	891b      	ldrh	r3, [r3, #8]
 800b176:	89ba      	ldrh	r2, [r7, #12]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d204      	bcs.n	800b186 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800b17c:	89bb      	ldrh	r3, [r7, #12]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fa19 	bl	800d5b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	895b      	ldrh	r3, [r3, #10]
 800b18a:	89fa      	ldrh	r2, [r7, #14]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d807      	bhi.n	800b1a0 <ip4_input+0x74>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	891b      	ldrh	r3, [r3, #8]
 800b194:	89ba      	ldrh	r2, [r7, #12]
 800b196:	429a      	cmp	r2, r3
 800b198:	d802      	bhi.n	800b1a0 <ip4_input+0x74>
 800b19a:	89fb      	ldrh	r3, [r7, #14]
 800b19c:	2b13      	cmp	r3, #19
 800b19e:	d804      	bhi.n	800b1aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f002 fb91 	bl	800d8c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e0d8      	b.n	800b35c <ip4_input+0x230>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	4a6d      	ldr	r2, [pc, #436]	; (800b364 <ip4_input+0x238>)
 800b1b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	4a6b      	ldr	r2, [pc, #428]	; (800b364 <ip4_input+0x238>)
 800b1b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b1ba:	4b6a      	ldr	r3, [pc, #424]	; (800b364 <ip4_input+0x238>)
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1c2:	2be0      	cmp	r3, #224	; 0xe0
 800b1c4:	d111      	bne.n	800b1ea <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d007      	beq.n	800b1e4 <ip4_input+0xb8>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <ip4_input+0xb8>
      netif = inp;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	613b      	str	r3, [r7, #16]
 800b1e2:	e02a      	b.n	800b23a <ip4_input+0x10e>
    } else {
      netif = NULL;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	e027      	b.n	800b23a <ip4_input+0x10e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b1ea:	6838      	ldr	r0, [r7, #0]
 800b1ec:	f7ff ff74 	bl	800b0d8 <ip4_input_accept>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <ip4_input+0xd0>
      netif = inp;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	613b      	str	r3, [r7, #16]
 800b1fa:	e01e      	b.n	800b23a <ip4_input+0x10e>
    } else {
      netif = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b200:	4b58      	ldr	r3, [pc, #352]	; (800b364 <ip4_input+0x238>)
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b7f      	cmp	r3, #127	; 0x7f
 800b208:	d017      	beq.n	800b23a <ip4_input+0x10e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b20a:	4b57      	ldr	r3, [pc, #348]	; (800b368 <ip4_input+0x23c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	613b      	str	r3, [r7, #16]
 800b210:	e00e      	b.n	800b230 <ip4_input+0x104>
          if (netif == inp) {
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d006      	beq.n	800b228 <ip4_input+0xfc>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b21a:	6938      	ldr	r0, [r7, #16]
 800b21c:	f7ff ff5c 	bl	800b0d8 <ip4_input_accept>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d108      	bne.n	800b238 <ip4_input+0x10c>
 800b226:	e000      	b.n	800b22a <ip4_input+0xfe>
            continue;
 800b228:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	613b      	str	r3, [r7, #16]
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1ed      	bne.n	800b212 <ip4_input+0xe6>
 800b236:	e000      	b.n	800b23a <ip4_input+0x10e>
            break;
 800b238:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b23a:	4b4a      	ldr	r3, [pc, #296]	; (800b364 <ip4_input+0x238>)
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f96b 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d105      	bne.n	800b258 <ip4_input+0x12c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b24c:	4b45      	ldr	r3, [pc, #276]	; (800b364 <ip4_input+0x238>)
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b254:	2be0      	cmp	r3, #224	; 0xe0
 800b256:	d104      	bne.n	800b262 <ip4_input+0x136>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f002 fb35 	bl	800d8c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	e07c      	b.n	800b35c <ip4_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <ip4_input+0x146>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f002 fb2d 	bl	800d8c8 <pbuf_free>
    return ERR_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	e074      	b.n	800b35c <ip4_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	88db      	ldrh	r3, [r3, #6]
 800b276:	b29b      	uxth	r3, r3
 800b278:	461a      	mov	r2, r3
 800b27a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b27e:	4013      	ands	r3, r2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00b      	beq.n	800b29c <ip4_input+0x170>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fc8f 	bl	800bba8 <ip4_reass>
 800b28a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <ip4_input+0x16a>
      return ERR_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	e062      	b.n	800b35c <ip4_input+0x230>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b29c:	4a31      	ldr	r2, [pc, #196]	; (800b364 <ip4_input+0x238>)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b2a2:	4a30      	ldr	r2, [pc, #192]	; (800b364 <ip4_input+0x238>)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b2a8:	4a2e      	ldr	r2, [pc, #184]	; (800b364 <ip4_input+0x238>)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	4b29      	ldr	r3, [pc, #164]	; (800b364 <ip4_input+0x238>)
 800b2c0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f002 fa78 	bl	800d7bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	7a5b      	ldrb	r3, [r3, #9]
 800b2d0:	2b06      	cmp	r3, #6
 800b2d2:	d009      	beq.n	800b2e8 <ip4_input+0x1bc>
 800b2d4:	2b11      	cmp	r3, #17
 800b2d6:	d002      	beq.n	800b2de <ip4_input+0x1b2>
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d00a      	beq.n	800b2f2 <ip4_input+0x1c6>
 800b2dc:	e00e      	b.n	800b2fc <ip4_input+0x1d0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f009 f973 	bl	80145cc <udp_input>
        break;
 800b2e6:	e026      	b.n	800b336 <ip4_input+0x20a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f004 fd26 	bl	800fd3c <tcp_input>
        break;
 800b2f0:	e021      	b.n	800b336 <ip4_input+0x20a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff fcf5 	bl	800ace4 <icmp_input>
        break;
 800b2fa:	e01c      	b.n	800b336 <ip4_input+0x20a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <ip4_input+0x238>)
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	6939      	ldr	r1, [r7, #16]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 f90a 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10f      	bne.n	800b32e <ip4_input+0x202>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b30e:	4b15      	ldr	r3, [pc, #84]	; (800b364 <ip4_input+0x238>)
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b316:	2be0      	cmp	r3, #224	; 0xe0
 800b318:	d009      	beq.n	800b32e <ip4_input+0x202>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b31a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f002 fabe 	bl	800d8a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b326:	2102      	movs	r1, #2
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff fddf 	bl	800aeec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f002 faca 	bl	800d8c8 <pbuf_free>
        break;
 800b334:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b336:	4b0b      	ldr	r3, [pc, #44]	; (800b364 <ip4_input+0x238>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <ip4_input+0x238>)
 800b33e:	2200      	movs	r2, #0
 800b340:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b342:	4b08      	ldr	r3, [pc, #32]	; (800b364 <ip4_input+0x238>)
 800b344:	2200      	movs	r2, #0
 800b346:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <ip4_input+0x238>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <ip4_input+0x238>)
 800b350:	2200      	movs	r2, #0
 800b352:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b354:	4b03      	ldr	r3, [pc, #12]	; (800b364 <ip4_input+0x238>)
 800b356:	2200      	movs	r2, #0
 800b358:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200074c0 	.word	0x200074c0
 800b368:	2000aee0 	.word	0x2000aee0

0800b36c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08a      	sub	sp, #40	; 0x28
 800b370:	af04      	add	r7, sp, #16
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <ip4_output_if+0x26>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	3304      	adds	r3, #4
 800b396:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b398:	78fa      	ldrb	r2, [r7, #3]
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	9302      	str	r3, [sp, #8]
 800b39e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6979      	ldr	r1, [r7, #20]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f805 	bl	800b3c0 <ip4_output_if_src>
 800b3b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	7b9b      	ldrb	r3, [r3, #14]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d006      	beq.n	800b3e4 <ip4_output_if_src+0x24>
 800b3d6:	4b4b      	ldr	r3, [pc, #300]	; (800b504 <ip4_output_if_src+0x144>)
 800b3d8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b3dc:	494a      	ldr	r1, [pc, #296]	; (800b508 <ip4_output_if_src+0x148>)
 800b3de:	484b      	ldr	r0, [pc, #300]	; (800b50c <ip4_output_if_src+0x14c>)
 800b3e0:	f009 ff16 	bl	8015210 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d060      	beq.n	800b4ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b3ea:	2314      	movs	r3, #20
 800b3ec:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b3ee:	2114      	movs	r1, #20
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f002 f9d3 	bl	800d79c <pbuf_add_header>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b3fc:	f06f 0301 	mvn.w	r3, #1
 800b400:	e07c      	b.n	800b4fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	895b      	ldrh	r3, [r3, #10]
 800b40c:	2b13      	cmp	r3, #19
 800b40e:	d806      	bhi.n	800b41e <ip4_output_if_src+0x5e>
 800b410:	4b3c      	ldr	r3, [pc, #240]	; (800b504 <ip4_output_if_src+0x144>)
 800b412:	f240 3289 	movw	r2, #905	; 0x389
 800b416:	493e      	ldr	r1, [pc, #248]	; (800b510 <ip4_output_if_src+0x150>)
 800b418:	483c      	ldr	r0, [pc, #240]	; (800b50c <ip4_output_if_src+0x14c>)
 800b41a:	f009 fef9 	bl	8015210 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b42a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b434:	8bfb      	ldrh	r3, [r7, #30]
 800b436:	089b      	lsrs	r3, r3, #2
 800b438:	b29b      	uxth	r3, r3
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b440:	b2da      	uxtb	r2, r3
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b44c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	891b      	ldrh	r3, [r3, #8]
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe f98e 	bl	8009774 <lwip_htons>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	2200      	movs	r2, #0
 800b464:	719a      	strb	r2, [r3, #6]
 800b466:	2200      	movs	r2, #0
 800b468:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b46a:	4b2a      	ldr	r3, [pc, #168]	; (800b514 <ip4_output_if_src+0x154>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe f980 	bl	8009774 <lwip_htons>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <ip4_output_if_src+0x154>)
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	4b23      	ldr	r3, [pc, #140]	; (800b514 <ip4_output_if_src+0x154>)
 800b486:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b48e:	4b22      	ldr	r3, [pc, #136]	; (800b518 <ip4_output_if_src+0x158>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	60da      	str	r2, [r3, #12]
 800b496:	e003      	b.n	800b4a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	729a      	strb	r2, [r3, #10]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	72da      	strb	r2, [r3, #11]
 800b4aa:	e00f      	b.n	800b4cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	895b      	ldrh	r3, [r3, #10]
 800b4b0:	2b13      	cmp	r3, #19
 800b4b2:	d802      	bhi.n	800b4ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b4b4:	f06f 0301 	mvn.w	r3, #1
 800b4b8:	e020      	b.n	800b4fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b4c6:	f107 0314 	add.w	r3, r7, #20
 800b4ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <ip4_output_if_src+0x12e>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	891a      	ldrh	r2, [r3, #8]
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d906      	bls.n	800b4ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 fd47 	bl	800bf78 <ip4_frag>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	e006      	b.n	800b4fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	68f9      	ldr	r1, [r7, #12]
 800b4f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4f8:	4798      	blx	r3
 800b4fa:	4603      	mov	r3, r0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	080168f4 	.word	0x080168f4
 800b508:	08016928 	.word	0x08016928
 800b50c:	08016934 	.word	0x08016934
 800b510:	0801695c 	.word	0x0801695c
 800b514:	2000720e 	.word	0x2000720e
 800b518:	08019d48 	.word	0x08019d48

0800b51c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b530:	d002      	beq.n	800b538 <ip4_addr_isbroadcast_u32+0x1c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b538:	2301      	movs	r3, #1
 800b53a:	e02a      	b.n	800b592 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e021      	b.n	800b592 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	3304      	adds	r3, #4
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	429a      	cmp	r2, r3
 800b558:	d101      	bne.n	800b55e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	e019      	b.n	800b592 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	3304      	adds	r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	405a      	eors	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	3308      	adds	r3, #8
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4013      	ands	r3, r2
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10d      	bne.n	800b590 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	3308      	adds	r3, #8
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	43da      	mvns	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b588:	429a      	cmp	r2, r3
 800b58a:	d101      	bne.n	800b590 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b590:	2300      	movs	r3, #0
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
	...

0800b5a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b5aa:	4b12      	ldr	r3, [pc, #72]	; (800b5f4 <ip_reass_tmr+0x54>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b5b0:	e018      	b.n	800b5e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	7fdb      	ldrb	r3, [r3, #31]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00b      	beq.n	800b5d2 <ip_reass_tmr+0x32>
      r->timer--;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	7fdb      	ldrb	r3, [r3, #31]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	e008      	b.n	800b5e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f80a 	bl	800b5f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e3      	bne.n	800b5b2 <ip_reass_tmr+0x12>
    }
  }
}
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20007210 	.word	0x20007210

0800b5f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d105      	bne.n	800b61a <ip_reass_free_complete_datagram+0x22>
 800b60e:	4b45      	ldr	r3, [pc, #276]	; (800b724 <ip_reass_free_complete_datagram+0x12c>)
 800b610:	22ab      	movs	r2, #171	; 0xab
 800b612:	4945      	ldr	r1, [pc, #276]	; (800b728 <ip_reass_free_complete_datagram+0x130>)
 800b614:	4845      	ldr	r0, [pc, #276]	; (800b72c <ip_reass_free_complete_datagram+0x134>)
 800b616:	f009 fdfb 	bl	8015210 <iprintf>
  if (prev != NULL) {
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00a      	beq.n	800b636 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	429a      	cmp	r2, r3
 800b628:	d005      	beq.n	800b636 <ip_reass_free_complete_datagram+0x3e>
 800b62a:	4b3e      	ldr	r3, [pc, #248]	; (800b724 <ip_reass_free_complete_datagram+0x12c>)
 800b62c:	22ad      	movs	r2, #173	; 0xad
 800b62e:	4940      	ldr	r1, [pc, #256]	; (800b730 <ip_reass_free_complete_datagram+0x138>)
 800b630:	483e      	ldr	r0, [pc, #248]	; (800b72c <ip_reass_free_complete_datagram+0x134>)
 800b632:	f009 fded 	bl	8015210 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	889b      	ldrh	r3, [r3, #4]
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d12a      	bne.n	800b69e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	6858      	ldr	r0, [r3, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3308      	adds	r3, #8
 800b65e:	2214      	movs	r2, #20
 800b660:	4619      	mov	r1, r3
 800b662:	f009 fdc2 	bl	80151ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b666:	2101      	movs	r1, #1
 800b668:	69b8      	ldr	r0, [r7, #24]
 800b66a:	f7ff fc4f 	bl	800af0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b66e:	69b8      	ldr	r0, [r7, #24]
 800b670:	f002 f9b8 	bl	800d9e4 <pbuf_clen>
 800b674:	4603      	mov	r3, r0
 800b676:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b678:	8bfa      	ldrh	r2, [r7, #30]
 800b67a:	8a7b      	ldrh	r3, [r7, #18]
 800b67c:	4413      	add	r3, r2
 800b67e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b682:	db05      	blt.n	800b690 <ip_reass_free_complete_datagram+0x98>
 800b684:	4b27      	ldr	r3, [pc, #156]	; (800b724 <ip_reass_free_complete_datagram+0x12c>)
 800b686:	22bc      	movs	r2, #188	; 0xbc
 800b688:	492a      	ldr	r1, [pc, #168]	; (800b734 <ip_reass_free_complete_datagram+0x13c>)
 800b68a:	4828      	ldr	r0, [pc, #160]	; (800b72c <ip_reass_free_complete_datagram+0x134>)
 800b68c:	f009 fdc0 	bl	8015210 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b690:	8bfa      	ldrh	r2, [r7, #30]
 800b692:	8a7b      	ldrh	r3, [r7, #18]
 800b694:	4413      	add	r3, r2
 800b696:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b698:	69b8      	ldr	r0, [r7, #24]
 800b69a:	f002 f915 	bl	800d8c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b6a4:	e01f      	b.n	800b6e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f002 f994 	bl	800d9e4 <pbuf_clen>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b6c0:	8bfa      	ldrh	r2, [r7, #30]
 800b6c2:	8a7b      	ldrh	r3, [r7, #18]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ca:	db05      	blt.n	800b6d8 <ip_reass_free_complete_datagram+0xe0>
 800b6cc:	4b15      	ldr	r3, [pc, #84]	; (800b724 <ip_reass_free_complete_datagram+0x12c>)
 800b6ce:	22cc      	movs	r2, #204	; 0xcc
 800b6d0:	4918      	ldr	r1, [pc, #96]	; (800b734 <ip_reass_free_complete_datagram+0x13c>)
 800b6d2:	4816      	ldr	r0, [pc, #88]	; (800b72c <ip_reass_free_complete_datagram+0x134>)
 800b6d4:	f009 fd9c 	bl	8015210 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b6d8:	8bfa      	ldrh	r2, [r7, #30]
 800b6da:	8a7b      	ldrh	r3, [r7, #18]
 800b6dc:	4413      	add	r3, r2
 800b6de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f002 f8f1 	bl	800d8c8 <pbuf_free>
  while (p != NULL) {
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1dc      	bne.n	800b6a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f8c2 	bl	800b878 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b6f4:	4b10      	ldr	r3, [pc, #64]	; (800b738 <ip_reass_free_complete_datagram+0x140>)
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	8bfa      	ldrh	r2, [r7, #30]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d905      	bls.n	800b70a <ip_reass_free_complete_datagram+0x112>
 800b6fe:	4b09      	ldr	r3, [pc, #36]	; (800b724 <ip_reass_free_complete_datagram+0x12c>)
 800b700:	22d2      	movs	r2, #210	; 0xd2
 800b702:	490e      	ldr	r1, [pc, #56]	; (800b73c <ip_reass_free_complete_datagram+0x144>)
 800b704:	4809      	ldr	r0, [pc, #36]	; (800b72c <ip_reass_free_complete_datagram+0x134>)
 800b706:	f009 fd83 	bl	8015210 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b70a:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <ip_reass_free_complete_datagram+0x140>)
 800b70c:	881a      	ldrh	r2, [r3, #0]
 800b70e:	8bfb      	ldrh	r3, [r7, #30]
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	b29a      	uxth	r2, r3
 800b714:	4b08      	ldr	r3, [pc, #32]	; (800b738 <ip_reass_free_complete_datagram+0x140>)
 800b716:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b718:	8bfb      	ldrh	r3, [r7, #30]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3720      	adds	r7, #32
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	0801698c 	.word	0x0801698c
 800b728:	080169c8 	.word	0x080169c8
 800b72c:	080169d4 	.word	0x080169d4
 800b730:	080169fc 	.word	0x080169fc
 800b734:	08016a10 	.word	0x08016a10
 800b738:	20007214 	.word	0x20007214
 800b73c:	08016a30 	.word	0x08016a30

0800b740 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b74a:	2300      	movs	r3, #0
 800b74c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b75e:	4b28      	ldr	r3, [pc, #160]	; (800b800 <ip_reass_remove_oldest_datagram+0xc0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b764:	e030      	b.n	800b7c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	695a      	ldr	r2, [r3, #20]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d10c      	bne.n	800b78c <ip_reass_remove_oldest_datagram+0x4c>
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	699a      	ldr	r2, [r3, #24]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d106      	bne.n	800b78c <ip_reass_remove_oldest_datagram+0x4c>
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	899a      	ldrh	r2, [r3, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	889b      	ldrh	r3, [r3, #4]
 800b786:	b29b      	uxth	r3, r3
 800b788:	429a      	cmp	r2, r3
 800b78a:	d014      	beq.n	800b7b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	3301      	adds	r3, #1
 800b790:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	e009      	b.n	800b7b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	7fda      	ldrb	r2, [r3, #31]
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	7fdb      	ldrb	r3, [r3, #31]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d803      	bhi.n	800b7b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1cb      	bne.n	800b766 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b7d4:	69b9      	ldr	r1, [r7, #24]
 800b7d6:	6a38      	ldr	r0, [r7, #32]
 800b7d8:	f7ff ff0e 	bl	800b5f8 <ip_reass_free_complete_datagram>
 800b7dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	da02      	bge.n	800b7f4 <ip_reass_remove_oldest_datagram+0xb4>
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	dcac      	bgt.n	800b74e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b7f4:	697b      	ldr	r3, [r7, #20]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3728      	adds	r7, #40	; 0x28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	20007210 	.word	0x20007210

0800b804 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b80e:	2004      	movs	r0, #4
 800b810:	f001 f966 	bl	800cae0 <memp_malloc>
 800b814:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d110      	bne.n	800b83e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff ff8e 	bl	800b740 <ip_reass_remove_oldest_datagram>
 800b824:	4602      	mov	r2, r0
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	db03      	blt.n	800b834 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b82c:	2004      	movs	r0, #4
 800b82e:	f001 f957 	bl	800cae0 <memp_malloc>
 800b832:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	e016      	b.n	800b86c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b83e:	2220      	movs	r2, #32
 800b840:	2100      	movs	r1, #0
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f009 fcdc 	bl	8015200 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	220f      	movs	r2, #15
 800b84c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b84e:	4b09      	ldr	r3, [pc, #36]	; (800b874 <ip_reass_enqueue_new_datagram+0x70>)
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b856:	4a07      	ldr	r2, [pc, #28]	; (800b874 <ip_reass_enqueue_new_datagram+0x70>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3308      	adds	r3, #8
 800b860:	2214      	movs	r2, #20
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f009 fcc0 	bl	80151ea <memcpy>
  return ipr;
 800b86a:	68fb      	ldr	r3, [r7, #12]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20007210 	.word	0x20007210

0800b878 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b882:	4b10      	ldr	r3, [pc, #64]	; (800b8c4 <ip_reass_dequeue_datagram+0x4c>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d104      	bne.n	800b896 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a0c      	ldr	r2, [pc, #48]	; (800b8c4 <ip_reass_dequeue_datagram+0x4c>)
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	e00d      	b.n	800b8b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <ip_reass_dequeue_datagram+0x32>
 800b89c:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <ip_reass_dequeue_datagram+0x50>)
 800b89e:	f240 1245 	movw	r2, #325	; 0x145
 800b8a2:	490a      	ldr	r1, [pc, #40]	; (800b8cc <ip_reass_dequeue_datagram+0x54>)
 800b8a4:	480a      	ldr	r0, [pc, #40]	; (800b8d0 <ip_reass_dequeue_datagram+0x58>)
 800b8a6:	f009 fcb3 	bl	8015210 <iprintf>
    prev->next = ipr->next;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	2004      	movs	r0, #4
 800b8b6:	f001 f965 	bl	800cb84 <memp_free>
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20007210 	.word	0x20007210
 800b8c8:	0801698c 	.word	0x0801698c
 800b8cc:	08016a54 	.word	0x08016a54
 800b8d0:	080169d4 	.word	0x080169d4

0800b8d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	; 0x30
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	885b      	ldrh	r3, [r3, #2]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fd ff3d 	bl	8009774 <lwip_htons>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	f003 030f 	and.w	r3, r3, #15
 800b906:	b2db      	uxtb	r3, r3
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800b90c:	7e7b      	ldrb	r3, [r7, #25]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	8b7a      	ldrh	r2, [r7, #26]
 800b912:	429a      	cmp	r2, r3
 800b914:	d202      	bcs.n	800b91c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b916:	f04f 33ff 	mov.w	r3, #4294967295
 800b91a:	e135      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800b91c:	7e7b      	ldrb	r3, [r7, #25]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	8b7a      	ldrh	r2, [r7, #26]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	88db      	ldrh	r3, [r3, #6]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fd ff21 	bl	8009774 <lwip_htons>
 800b932:	4603      	mov	r3, r0
 800b934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b938:	b29b      	uxth	r3, r3
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	2200      	movs	r2, #0
 800b94c:	705a      	strb	r2, [r3, #1]
 800b94e:	2200      	movs	r2, #0
 800b950:	709a      	strb	r2, [r3, #2]
 800b952:	2200      	movs	r2, #0
 800b954:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	8afa      	ldrh	r2, [r7, #22]
 800b95a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800b95c:	8afa      	ldrh	r2, [r7, #22]
 800b95e:	8b7b      	ldrh	r3, [r7, #26]
 800b960:	4413      	add	r3, r2
 800b962:	b29a      	uxth	r2, r3
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	88db      	ldrh	r3, [r3, #6]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	8afa      	ldrh	r2, [r7, #22]
 800b970:	429a      	cmp	r2, r3
 800b972:	d902      	bls.n	800b97a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b974:	f04f 33ff 	mov.w	r3, #4294967295
 800b978:	e106      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
 800b980:	e068      	b.n	800ba54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	889b      	ldrh	r3, [r3, #4]
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	889b      	ldrh	r3, [r3, #4]
 800b992:	b29b      	uxth	r3, r3
 800b994:	429a      	cmp	r2, r3
 800b996:	d235      	bcs.n	800ba04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b99c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d020      	beq.n	800b9e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a6:	889b      	ldrh	r3, [r3, #4]
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	88db      	ldrh	r3, [r3, #6]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d307      	bcc.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	88db      	ldrh	r3, [r3, #6]
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	889b      	ldrh	r3, [r3, #4]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d902      	bls.n	800b9ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	e0de      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	88db      	ldrh	r3, [r3, #6]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	889b      	ldrh	r3, [r3, #4]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d03d      	beq.n	800ba5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b9e4:	e03a      	b.n	800ba5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e8:	88db      	ldrh	r3, [r3, #6]
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	889b      	ldrh	r3, [r3, #4]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d902      	bls.n	800b9fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fa:	e0c5      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	605a      	str	r2, [r3, #4]
      break;
 800ba02:	e02b      	b.n	800ba5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	889b      	ldrh	r3, [r3, #4]
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	889b      	ldrh	r3, [r3, #4]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d102      	bne.n	800ba1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295
 800ba18:	e0b6      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	889b      	ldrh	r3, [r3, #4]
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	88db      	ldrh	r3, [r3, #6]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d202      	bcs.n	800ba30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ba2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba2e:	e0ab      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	88db      	ldrh	r3, [r3, #6]
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	889b      	ldrh	r3, [r3, #4]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d001      	beq.n	800ba4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d193      	bne.n	800b982 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ba5a:	e000      	b.n	800ba5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ba5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d12d      	bne.n	800bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01c      	beq.n	800baa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	889b      	ldrh	r3, [r3, #4]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d906      	bls.n	800ba88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ba7a:	4b45      	ldr	r3, [pc, #276]	; (800bb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ba7c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ba80:	4944      	ldr	r1, [pc, #272]	; (800bb94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ba82:	4845      	ldr	r0, [pc, #276]	; (800bb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ba84:	f009 fbc4 	bl	8015210 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	88db      	ldrh	r3, [r3, #6]
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	889b      	ldrh	r3, [r3, #4]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d010      	beq.n	800bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	623b      	str	r3, [r7, #32]
 800baa2:	e00d      	b.n	800bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d006      	beq.n	800baba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800baac:	4b38      	ldr	r3, [pc, #224]	; (800bb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800baae:	f240 12bf 	movw	r2, #447	; 0x1bf
 800bab2:	493a      	ldr	r1, [pc, #232]	; (800bb9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bab4:	4838      	ldr	r0, [pc, #224]	; (800bb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bab6:	f009 fbab 	bl	8015210 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d105      	bne.n	800bad2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	7f9b      	ldrb	r3, [r3, #30]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d059      	beq.n	800bb86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d04f      	beq.n	800bb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d006      	beq.n	800baee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	889b      	ldrh	r3, [r3, #4]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	623b      	str	r3, [r7, #32]
 800baf2:	e041      	b.n	800bb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bafe:	e012      	b.n	800bb26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	889b      	ldrh	r3, [r3, #4]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d002      	beq.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	623b      	str	r3, [r7, #32]
            break;
 800bb1a:	e007      	b.n	800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1e9      	bne.n	800bb00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d022      	beq.n	800bb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bb3a:	4b15      	ldr	r3, [pc, #84]	; (800bb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb3c:	f240 12df 	movw	r2, #479	; 0x1df
 800bb40:	4917      	ldr	r1, [pc, #92]	; (800bba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bb42:	4815      	ldr	r0, [pc, #84]	; (800bb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb44:	f009 fb64 	bl	8015210 <iprintf>
          LWIP_ASSERT("sanity check",
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d106      	bne.n	800bb62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bb54:	4b0e      	ldr	r3, [pc, #56]	; (800bb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb56:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bb5a:	4911      	ldr	r1, [pc, #68]	; (800bba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bb5c:	480e      	ldr	r0, [pc, #56]	; (800bb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb5e:	f009 fb57 	bl	8015210 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d006      	beq.n	800bb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb6c:	f240 12e3 	movw	r2, #483	; 0x1e3
 800bb70:	490c      	ldr	r1, [pc, #48]	; (800bba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bb72:	4809      	ldr	r0, [pc, #36]	; (800bb98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb74:	f009 fb4c 	bl	8015210 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bf14      	ite	ne
 800bb7e:	2301      	movne	r3, #1
 800bb80:	2300      	moveq	r3, #0
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	e000      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3730      	adds	r7, #48	; 0x30
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	0801698c 	.word	0x0801698c
 800bb94:	08016a70 	.word	0x08016a70
 800bb98:	080169d4 	.word	0x080169d4
 800bb9c:	08016a90 	.word	0x08016a90
 800bba0:	08016ac8 	.word	0x08016ac8
 800bba4:	08016ad8 	.word	0x08016ad8

0800bba8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	; 0x38
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	f003 030f 	and.w	r3, r3, #15
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b14      	cmp	r3, #20
 800bbc6:	f040 8165 	bne.w	800be94 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	88db      	ldrh	r3, [r3, #6]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fd fdcf 	bl	8009774 <lwip_htons>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe4:	885b      	ldrh	r3, [r3, #2]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fd fdc3 	bl	8009774 <lwip_htons>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	f003 030f 	and.w	r3, r3, #15
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800bc02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	f0c0 8144 	bcc.w	800be98 <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800bc10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 fee1 	bl	800d9e4 <pbuf_clen>
 800bc22:	4603      	mov	r3, r0
 800bc24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bc26:	4ba1      	ldr	r3, [pc, #644]	; (800beac <ip4_reass+0x304>)
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	8c3b      	ldrh	r3, [r7, #32]
 800bc2e:	4413      	add	r3, r2
 800bc30:	2b0a      	cmp	r3, #10
 800bc32:	dd10      	ble.n	800bc56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bc34:	8c3b      	ldrh	r3, [r7, #32]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3a:	f7ff fd81 	bl	800b740 <ip_reass_remove_oldest_datagram>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 812a 	beq.w	800be9a <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bc46:	4b99      	ldr	r3, [pc, #612]	; (800beac <ip4_reass+0x304>)
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	8c3b      	ldrh	r3, [r7, #32]
 800bc4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bc50:	2b0a      	cmp	r3, #10
 800bc52:	f300 8122 	bgt.w	800be9a <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bc56:	4b96      	ldr	r3, [pc, #600]	; (800beb0 <ip4_reass+0x308>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc5c:	e015      	b.n	800bc8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	695a      	ldr	r2, [r3, #20]
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d10c      	bne.n	800bc84 <ip4_reass+0xdc>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d106      	bne.n	800bc84 <ip4_reass+0xdc>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	899a      	ldrh	r2, [r3, #12]
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	889b      	ldrh	r3, [r3, #4]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d006      	beq.n	800bc92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	633b      	str	r3, [r7, #48]	; 0x30
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e6      	bne.n	800bc5e <ip4_reass+0xb6>
 800bc90:	e000      	b.n	800bc94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800bc92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d109      	bne.n	800bcae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bc9a:	8c3b      	ldrh	r3, [r7, #32]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca0:	f7ff fdb0 	bl	800b804 <ip_reass_enqueue_new_datagram>
 800bca4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d11c      	bne.n	800bce6 <ip4_reass+0x13e>
      goto nullreturn;
 800bcac:	e0f5      	b.n	800be9a <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	88db      	ldrh	r3, [r3, #6]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fd fd5d 	bl	8009774 <lwip_htons>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d110      	bne.n	800bce6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	89db      	ldrh	r3, [r3, #14]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fd fd53 	bl	8009774 <lwip_htons>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d006      	beq.n	800bce6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	3308      	adds	r3, #8
 800bcdc:	2214      	movs	r2, #20
 800bcde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bce0:	4618      	mov	r0, r3
 800bce2:	f009 fa82 	bl	80151ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	88db      	ldrh	r3, [r3, #6]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f003 0320 	and.w	r3, r3, #32
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bf0c      	ite	eq
 800bcf4:	2301      	moveq	r3, #1
 800bcf6:	2300      	movne	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00e      	beq.n	800bd20 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800bd02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bd04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd06:	4413      	add	r3, r2
 800bd08:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bd0a:	8b7a      	ldrh	r2, [r7, #26]
 800bd0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	f0c0 80a1 	bcc.w	800be56 <ip4_reass+0x2ae>
 800bd14:	8b7b      	ldrh	r3, [r7, #26]
 800bd16:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	f200 809b 	bhi.w	800be56 <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd26:	f7ff fdd5 	bl	800b8d4 <ip_reass_chain_frag_into_datagram_and_validate>
 800bd2a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	f000 808f 	beq.w	800be54 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bd36:	4b5d      	ldr	r3, [pc, #372]	; (800beac <ip4_reass+0x304>)
 800bd38:	881a      	ldrh	r2, [r3, #0]
 800bd3a:	8c3b      	ldrh	r3, [r7, #32]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	4b5a      	ldr	r3, [pc, #360]	; (800beac <ip4_reass+0x304>)
 800bd42:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00d      	beq.n	800bd66 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800bd4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd4e:	4413      	add	r3, r2
 800bd50:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	8a7a      	ldrh	r2, [r7, #18]
 800bd56:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	7f9b      	ldrb	r3, [r3, #30]
 800bd5c:	f043 0301 	orr.w	r3, r3, #1
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d171      	bne.n	800be50 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	8b9b      	ldrh	r3, [r3, #28]
 800bd70:	3314      	adds	r3, #20
 800bd72:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	3308      	adds	r3, #8
 800bd8a:	2214      	movs	r2, #20
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd90:	f009 fa2b 	bl	80151ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800bd94:	8a3b      	ldrh	r3, [r7, #16]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fd fcec 	bl	8009774 <lwip_htons>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	2200      	movs	r2, #0
 800bda8:	719a      	strb	r2, [r3, #6]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	729a      	strb	r2, [r3, #10]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bdbe:	e00d      	b.n	800bddc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800bdc6:	2114      	movs	r1, #20
 800bdc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bdca:	f001 fcf7 	bl	800d7bc <pbuf_remove_header>
      pbuf_cat(p, r);
 800bdce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 fe47 	bl	800da64 <pbuf_cat>
      r = iprh->next_pbuf;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1ee      	bne.n	800bdc0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bde2:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <ip4_reass+0x308>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d102      	bne.n	800bdf2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800bdec:	2300      	movs	r3, #0
 800bdee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdf0:	e010      	b.n	800be14 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bdf2:	4b2f      	ldr	r3, [pc, #188]	; (800beb0 <ip4_reass+0x308>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdf8:	e007      	b.n	800be0a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	429a      	cmp	r2, r3
 800be02:	d006      	beq.n	800be12 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1f4      	bne.n	800bdfa <ip4_reass+0x252>
 800be10:	e000      	b.n	800be14 <ip4_reass+0x26c>
          break;
 800be12:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800be14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be18:	f7ff fd2e 	bl	800b878 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 fde1 	bl	800d9e4 <pbuf_clen>
 800be22:	4603      	mov	r3, r0
 800be24:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800be26:	4b21      	ldr	r3, [pc, #132]	; (800beac <ip4_reass+0x304>)
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	8c3a      	ldrh	r2, [r7, #32]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d906      	bls.n	800be3e <ip4_reass+0x296>
 800be30:	4b20      	ldr	r3, [pc, #128]	; (800beb4 <ip4_reass+0x30c>)
 800be32:	f240 229b 	movw	r2, #667	; 0x29b
 800be36:	4920      	ldr	r1, [pc, #128]	; (800beb8 <ip4_reass+0x310>)
 800be38:	4820      	ldr	r0, [pc, #128]	; (800bebc <ip4_reass+0x314>)
 800be3a:	f009 f9e9 	bl	8015210 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800be3e:	4b1b      	ldr	r3, [pc, #108]	; (800beac <ip4_reass+0x304>)
 800be40:	881a      	ldrh	r2, [r3, #0]
 800be42:	8c3b      	ldrh	r3, [r7, #32]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	b29a      	uxth	r2, r3
 800be48:	4b18      	ldr	r3, [pc, #96]	; (800beac <ip4_reass+0x304>)
 800be4a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	e028      	b.n	800bea2 <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800be50:	2300      	movs	r3, #0
 800be52:	e026      	b.n	800bea2 <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 800be54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <ip4_reass+0x2c2>
 800be5c:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <ip4_reass+0x30c>)
 800be5e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800be62:	4917      	ldr	r1, [pc, #92]	; (800bec0 <ip4_reass+0x318>)
 800be64:	4815      	ldr	r0, [pc, #84]	; (800bebc <ip4_reass+0x314>)
 800be66:	f009 f9d3 	bl	8015210 <iprintf>
  if (ipr->p == NULL) {
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d113      	bne.n	800be9a <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <ip4_reass+0x308>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be78:	429a      	cmp	r2, r3
 800be7a:	d006      	beq.n	800be8a <ip4_reass+0x2e2>
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <ip4_reass+0x30c>)
 800be7e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be82:	4910      	ldr	r1, [pc, #64]	; (800bec4 <ip4_reass+0x31c>)
 800be84:	480d      	ldr	r0, [pc, #52]	; (800bebc <ip4_reass+0x314>)
 800be86:	f009 f9c3 	bl	8015210 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800be8a:	2100      	movs	r1, #0
 800be8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8e:	f7ff fcf3 	bl	800b878 <ip_reass_dequeue_datagram>
 800be92:	e002      	b.n	800be9a <ip4_reass+0x2f2>
    goto nullreturn;
 800be94:	bf00      	nop
 800be96:	e000      	b.n	800be9a <ip4_reass+0x2f2>
    goto nullreturn;
 800be98:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f001 fd14 	bl	800d8c8 <pbuf_free>
  return NULL;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3738      	adds	r7, #56	; 0x38
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20007214 	.word	0x20007214
 800beb0:	20007210 	.word	0x20007210
 800beb4:	0801698c 	.word	0x0801698c
 800beb8:	08016afc 	.word	0x08016afc
 800bebc:	080169d4 	.word	0x080169d4
 800bec0:	08016b18 	.word	0x08016b18
 800bec4:	08016b24 	.word	0x08016b24

0800bec8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800becc:	2005      	movs	r0, #5
 800bece:	f000 fe07 	bl	800cae0 <memp_malloc>
 800bed2:	4603      	mov	r3, r0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800bee8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800beec:	4906      	ldr	r1, [pc, #24]	; (800bf08 <ip_frag_free_pbuf_custom_ref+0x30>)
 800beee:	4807      	ldr	r0, [pc, #28]	; (800bf0c <ip_frag_free_pbuf_custom_ref+0x34>)
 800bef0:	f009 f98e 	bl	8015210 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	2005      	movs	r0, #5
 800bef8:	f000 fe44 	bl	800cb84 <memp_free>
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	0801698c 	.word	0x0801698c
 800bf08:	08016b44 	.word	0x08016b44
 800bf0c:	080169d4 	.word	0x080169d4

0800bf10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <ipfrag_free_pbuf_custom+0x20>
 800bf22:	4b11      	ldr	r3, [pc, #68]	; (800bf68 <ipfrag_free_pbuf_custom+0x58>)
 800bf24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800bf28:	4910      	ldr	r1, [pc, #64]	; (800bf6c <ipfrag_free_pbuf_custom+0x5c>)
 800bf2a:	4811      	ldr	r0, [pc, #68]	; (800bf70 <ipfrag_free_pbuf_custom+0x60>)
 800bf2c:	f009 f970 	bl	8015210 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d006      	beq.n	800bf46 <ipfrag_free_pbuf_custom+0x36>
 800bf38:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <ipfrag_free_pbuf_custom+0x58>)
 800bf3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800bf3e:	490d      	ldr	r1, [pc, #52]	; (800bf74 <ipfrag_free_pbuf_custom+0x64>)
 800bf40:	480b      	ldr	r0, [pc, #44]	; (800bf70 <ipfrag_free_pbuf_custom+0x60>)
 800bf42:	f009 f965 	bl	8015210 <iprintf>
  if (pcr->original != NULL) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d004      	beq.n	800bf58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 fcb8 	bl	800d8c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f7ff ffbd 	bl	800bed8 <ip_frag_free_pbuf_custom_ref>
}
 800bf5e:	bf00      	nop
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	0801698c 	.word	0x0801698c
 800bf6c:	08016b50 	.word	0x08016b50
 800bf70:	080169d4 	.word	0x080169d4
 800bf74:	08016b5c 	.word	0x08016b5c

0800bf78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b094      	sub	sp, #80	; 0x50
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bf8e:	3b14      	subs	r3, #20
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da00      	bge.n	800bf96 <ip4_frag+0x1e>
 800bf94:	3307      	adds	r3, #7
 800bf96:	10db      	asrs	r3, r3, #3
 800bf98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800bf9a:	2314      	movs	r3, #20
 800bf9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800bfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 030f 	and.w	r3, r3, #15
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b14      	cmp	r3, #20
 800bfb8:	d002      	beq.n	800bfc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800bfba:	f06f 0305 	mvn.w	r3, #5
 800bfbe:	e10f      	b.n	800c1e0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	895b      	ldrh	r3, [r3, #10]
 800bfc4:	2b13      	cmp	r3, #19
 800bfc6:	d809      	bhi.n	800bfdc <ip4_frag+0x64>
 800bfc8:	4b87      	ldr	r3, [pc, #540]	; (800c1e8 <ip4_frag+0x270>)
 800bfca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800bfce:	4987      	ldr	r1, [pc, #540]	; (800c1ec <ip4_frag+0x274>)
 800bfd0:	4887      	ldr	r0, [pc, #540]	; (800c1f0 <ip4_frag+0x278>)
 800bfd2:	f009 f91d 	bl	8015210 <iprintf>
 800bfd6:	f06f 0305 	mvn.w	r3, #5
 800bfda:	e101      	b.n	800c1e0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	88db      	ldrh	r3, [r3, #6]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd fbc6 	bl	8009774 <lwip_htons>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800bfec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800bff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bffc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	891b      	ldrh	r3, [r3, #8]
 800c002:	3b14      	subs	r3, #20
 800c004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c008:	e0e0      	b.n	800c1cc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c00a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	b29a      	uxth	r2, r3
 800c010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c014:	4293      	cmp	r3, r2
 800c016:	bf28      	it	cs
 800c018:	4613      	movcs	r3, r2
 800c01a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c01c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c020:	2114      	movs	r1, #20
 800c022:	200e      	movs	r0, #14
 800c024:	f001 f96e 	bl	800d304 <pbuf_alloc>
 800c028:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 80d4 	beq.w	800c1da <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	895b      	ldrh	r3, [r3, #10]
 800c036:	2b13      	cmp	r3, #19
 800c038:	d806      	bhi.n	800c048 <ip4_frag+0xd0>
 800c03a:	4b6b      	ldr	r3, [pc, #428]	; (800c1e8 <ip4_frag+0x270>)
 800c03c:	f240 3225 	movw	r2, #805	; 0x325
 800c040:	496c      	ldr	r1, [pc, #432]	; (800c1f4 <ip4_frag+0x27c>)
 800c042:	486b      	ldr	r0, [pc, #428]	; (800c1f0 <ip4_frag+0x278>)
 800c044:	f009 f8e4 	bl	8015210 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	2214      	movs	r2, #20
 800c04e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c050:	4618      	mov	r0, r3
 800c052:	f009 f8ca 	bl	80151ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c05c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c05e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c062:	e064      	b.n	800c12e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	895a      	ldrh	r2, [r3, #10]
 800c068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	895b      	ldrh	r3, [r3, #10]
 800c072:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c074:	429a      	cmp	r2, r3
 800c076:	d906      	bls.n	800c086 <ip4_frag+0x10e>
 800c078:	4b5b      	ldr	r3, [pc, #364]	; (800c1e8 <ip4_frag+0x270>)
 800c07a:	f240 322d 	movw	r2, #813	; 0x32d
 800c07e:	495e      	ldr	r1, [pc, #376]	; (800c1f8 <ip4_frag+0x280>)
 800c080:	485b      	ldr	r0, [pc, #364]	; (800c1f0 <ip4_frag+0x278>)
 800c082:	f009 f8c5 	bl	8015210 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c086:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bf28      	it	cs
 800c090:	4613      	movcs	r3, r2
 800c092:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d105      	bne.n	800c0aa <ip4_frag+0x132>
        poff = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	60fb      	str	r3, [r7, #12]
        continue;
 800c0a8:	e041      	b.n	800c12e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c0aa:	f7ff ff0d 	bl	800bec8 <ip_frag_alloc_pbuf_custom_ref>
 800c0ae:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d103      	bne.n	800c0be <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b8:	f001 fc06 	bl	800d8c8 <pbuf_free>
        goto memerr;
 800c0bc:	e08e      	b.n	800c1dc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c0be:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c0c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c0cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c0d0:	9201      	str	r2, [sp, #4]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2241      	movs	r2, #65	; 0x41
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f001 fa39 	bl	800d550 <pbuf_alloced_custom>
 800c0de:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d106      	bne.n	800c0f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c0e6:	69f8      	ldr	r0, [r7, #28]
 800c0e8:	f7ff fef6 	bl	800bed8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c0ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0ee:	f001 fbeb 	bl	800d8c8 <pbuf_free>
        goto memerr;
 800c0f2:	e073      	b.n	800c1dc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f001 fc8d 	bl	800da14 <pbuf_ref>
      pcr->original = p;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	4a3e      	ldr	r2, [pc, #248]	; (800c1fc <ip4_frag+0x284>)
 800c104:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c106:	69b9      	ldr	r1, [r7, #24]
 800c108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c10a:	f001 fcab 	bl	800da64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c10e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c11c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <ip4_frag+0x1b6>
        poff = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c12e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c132:	2b00      	cmp	r3, #0
 800c134:	d196      	bne.n	800c064 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c136:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c13c:	4413      	add	r3, r2
 800c13e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c148:	3b14      	subs	r3, #20
 800c14a:	429a      	cmp	r2, r3
 800c14c:	bfd4      	ite	le
 800c14e:	2301      	movle	r3, #1
 800c150:	2300      	movgt	r3, #0
 800c152:	b2db      	uxtb	r3, r3
 800c154:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c156:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c15a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c15e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d002      	beq.n	800c16c <ip4_frag+0x1f4>
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c16c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c16e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c172:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c174:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c176:	4618      	mov	r0, r3
 800c178:	f7fd fafc 	bl	8009774 <lwip_htons>
 800c17c:	4603      	mov	r3, r0
 800c17e:	461a      	mov	r2, r3
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c184:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c186:	3314      	adds	r3, #20
 800c188:	b29b      	uxth	r3, r3
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fd faf2 	bl	8009774 <lwip_htons>
 800c190:	4603      	mov	r3, r0
 800c192:	461a      	mov	r2, r3
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2200      	movs	r2, #0
 800c19c:	729a      	strb	r2, [r3, #10]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1aa:	68b8      	ldr	r0, [r7, #8]
 800c1ac:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c1ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1b0:	f001 fb8a 	bl	800d8c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c1b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c1c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c1c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c1cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f47f af1a 	bne.w	800c00a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e002      	b.n	800c1e0 <ip4_frag+0x268>
      goto memerr;
 800c1da:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c1dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3748      	adds	r7, #72	; 0x48
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0801698c 	.word	0x0801698c
 800c1ec:	08016b68 	.word	0x08016b68
 800c1f0:	080169d4 	.word	0x080169d4
 800c1f4:	08016b84 	.word	0x08016b84
 800c1f8:	08016ba4 	.word	0x08016ba4
 800c1fc:	0800bf11 	.word	0x0800bf11

0800c200 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <ptr_to_mem+0x20>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	88fb      	ldrh	r3, [r7, #6]
 800c210:	4413      	add	r3, r2
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20007218 	.word	0x20007218

0800c224 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a05      	ldr	r2, [pc, #20]	; (800c244 <mem_to_ptr+0x20>)
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	1a9b      	subs	r3, r3, r2
 800c234:	b29b      	uxth	r3, r3
}
 800c236:	4618      	mov	r0, r3
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	20007218 	.word	0x20007218

0800c248 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c248:	b590      	push	{r4, r7, lr}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c250:	4b45      	ldr	r3, [pc, #276]	; (800c368 <plug_holes+0x120>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	429a      	cmp	r2, r3
 800c258:	d206      	bcs.n	800c268 <plug_holes+0x20>
 800c25a:	4b44      	ldr	r3, [pc, #272]	; (800c36c <plug_holes+0x124>)
 800c25c:	f240 12df 	movw	r2, #479	; 0x1df
 800c260:	4943      	ldr	r1, [pc, #268]	; (800c370 <plug_holes+0x128>)
 800c262:	4844      	ldr	r0, [pc, #272]	; (800c374 <plug_holes+0x12c>)
 800c264:	f008 ffd4 	bl	8015210 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c268:	4b43      	ldr	r3, [pc, #268]	; (800c378 <plug_holes+0x130>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d306      	bcc.n	800c280 <plug_holes+0x38>
 800c272:	4b3e      	ldr	r3, [pc, #248]	; (800c36c <plug_holes+0x124>)
 800c274:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c278:	4940      	ldr	r1, [pc, #256]	; (800c37c <plug_holes+0x134>)
 800c27a:	483e      	ldr	r0, [pc, #248]	; (800c374 <plug_holes+0x12c>)
 800c27c:	f008 ffc8 	bl	8015210 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	791b      	ldrb	r3, [r3, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <plug_holes+0x4e>
 800c288:	4b38      	ldr	r3, [pc, #224]	; (800c36c <plug_holes+0x124>)
 800c28a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c28e:	493c      	ldr	r1, [pc, #240]	; (800c380 <plug_holes+0x138>)
 800c290:	4838      	ldr	r0, [pc, #224]	; (800c374 <plug_holes+0x12c>)
 800c292:	f008 ffbd 	bl	8015210 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c29e:	d906      	bls.n	800c2ae <plug_holes+0x66>
 800c2a0:	4b32      	ldr	r3, [pc, #200]	; (800c36c <plug_holes+0x124>)
 800c2a2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c2a6:	4937      	ldr	r1, [pc, #220]	; (800c384 <plug_holes+0x13c>)
 800c2a8:	4832      	ldr	r0, [pc, #200]	; (800c374 <plug_holes+0x12c>)
 800c2aa:	f008 ffb1 	bl	8015210 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff ffa4 	bl	800c200 <ptr_to_mem>
 800c2b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d024      	beq.n	800c30c <plug_holes+0xc4>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	791b      	ldrb	r3, [r3, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d120      	bne.n	800c30c <plug_holes+0xc4>
 800c2ca:	4b2b      	ldr	r3, [pc, #172]	; (800c378 <plug_holes+0x130>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d01b      	beq.n	800c30c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c2d4:	4b2c      	ldr	r3, [pc, #176]	; (800c388 <plug_holes+0x140>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d102      	bne.n	800c2e4 <plug_holes+0x9c>
      lfree = mem;
 800c2de:	4a2a      	ldr	r2, [pc, #168]	; (800c388 <plug_holes+0x140>)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	881a      	ldrh	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2f4:	d00a      	beq.n	800c30c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff ff80 	bl	800c200 <ptr_to_mem>
 800c300:	4604      	mov	r4, r0
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff ff8e 	bl	800c224 <mem_to_ptr>
 800c308:	4603      	mov	r3, r0
 800c30a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	885b      	ldrh	r3, [r3, #2]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ff75 	bl	800c200 <ptr_to_mem>
 800c316:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d01f      	beq.n	800c360 <plug_holes+0x118>
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	791b      	ldrb	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d11b      	bne.n	800c360 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c328:	4b17      	ldr	r3, [pc, #92]	; (800c388 <plug_holes+0x140>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d102      	bne.n	800c338 <plug_holes+0xf0>
      lfree = pmem;
 800c332:	4a15      	ldr	r2, [pc, #84]	; (800c388 <plug_holes+0x140>)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	881a      	ldrh	r2, [r3, #0]
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c348:	d00a      	beq.n	800c360 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff ff56 	bl	800c200 <ptr_to_mem>
 800c354:	4604      	mov	r4, r0
 800c356:	68b8      	ldr	r0, [r7, #8]
 800c358:	f7ff ff64 	bl	800c224 <mem_to_ptr>
 800c35c:	4603      	mov	r3, r0
 800c35e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	bd90      	pop	{r4, r7, pc}
 800c368:	20007218 	.word	0x20007218
 800c36c:	08016bb4 	.word	0x08016bb4
 800c370:	08016be4 	.word	0x08016be4
 800c374:	08016bfc 	.word	0x08016bfc
 800c378:	2000721c 	.word	0x2000721c
 800c37c:	08016c24 	.word	0x08016c24
 800c380:	08016c40 	.word	0x08016c40
 800c384:	08016c5c 	.word	0x08016c5c
 800c388:	20007224 	.word	0x20007224

0800c38c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c392:	4b1f      	ldr	r3, [pc, #124]	; (800c410 <mem_init+0x84>)
 800c394:	3303      	adds	r3, #3
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	461a      	mov	r2, r3
 800c39c:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <mem_init+0x88>)
 800c39e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c3a0:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <mem_init+0x88>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c3ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c3ba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c3be:	f7ff ff1f 	bl	800c200 <ptr_to_mem>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	4b14      	ldr	r3, [pc, #80]	; (800c418 <mem_init+0x8c>)
 800c3c6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <mem_init+0x8c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c3d0:	4b11      	ldr	r3, [pc, #68]	; (800c418 <mem_init+0x8c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c3d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <mem_init+0x8c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c3e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <mem_init+0x88>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a0c      	ldr	r2, [pc, #48]	; (800c41c <mem_init+0x90>)
 800c3ea:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c3ec:	480c      	ldr	r0, [pc, #48]	; (800c420 <mem_init+0x94>)
 800c3ee:	f008 fe23 	bl	8015038 <sys_mutex_new>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <mem_init+0x98>)
 800c3fa:	f240 221f 	movw	r2, #543	; 0x21f
 800c3fe:	490a      	ldr	r1, [pc, #40]	; (800c428 <mem_init+0x9c>)
 800c400:	480a      	ldr	r0, [pc, #40]	; (800c42c <mem_init+0xa0>)
 800c402:	f008 ff05 	bl	8015210 <iprintf>
  }
}
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	200074d8 	.word	0x200074d8
 800c414:	20007218 	.word	0x20007218
 800c418:	2000721c 	.word	0x2000721c
 800c41c:	20007224 	.word	0x20007224
 800c420:	20007220 	.word	0x20007220
 800c424:	08016bb4 	.word	0x08016bb4
 800c428:	08016c88 	.word	0x08016c88
 800c42c:	08016bfc 	.word	0x08016bfc

0800c430 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7ff fef3 	bl	800c224 <mem_to_ptr>
 800c43e:	4603      	mov	r3, r0
 800c440:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff feda 	bl	800c200 <ptr_to_mem>
 800c44c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fed4 	bl	800c200 <ptr_to_mem>
 800c458:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c462:	d818      	bhi.n	800c496 <mem_link_valid+0x66>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	885b      	ldrh	r3, [r3, #2]
 800c468:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c46c:	d813      	bhi.n	800c496 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c472:	8afa      	ldrh	r2, [r7, #22]
 800c474:	429a      	cmp	r2, r3
 800c476:	d004      	beq.n	800c482 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	8afa      	ldrh	r2, [r7, #22]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d109      	bne.n	800c496 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c482:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <mem_link_valid+0x74>)
 800c484:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d006      	beq.n	800c49a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	8afa      	ldrh	r2, [r7, #22]
 800c492:	429a      	cmp	r2, r3
 800c494:	d001      	beq.n	800c49a <mem_link_valid+0x6a>
    return 0;
 800c496:	2300      	movs	r3, #0
 800c498:	e000      	b.n	800c49c <mem_link_valid+0x6c>
  }
  return 1;
 800c49a:	2301      	movs	r3, #1
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	2000721c 	.word	0x2000721c

0800c4a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d070      	beq.n	800c598 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f003 0303 	and.w	r3, r3, #3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c4c0:	4b37      	ldr	r3, [pc, #220]	; (800c5a0 <mem_free+0xf8>)
 800c4c2:	f240 2273 	movw	r2, #627	; 0x273
 800c4c6:	4937      	ldr	r1, [pc, #220]	; (800c5a4 <mem_free+0xfc>)
 800c4c8:	4837      	ldr	r0, [pc, #220]	; (800c5a8 <mem_free+0x100>)
 800c4ca:	f008 fea1 	bl	8015210 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c4ce:	f008 fe11 	bl	80150f4 <sys_arch_protect>
 800c4d2:	61f8      	str	r0, [r7, #28]
 800c4d4:	69f8      	ldr	r0, [r7, #28]
 800c4d6:	f008 fe1b 	bl	8015110 <sys_arch_unprotect>
    return;
 800c4da:	e05e      	b.n	800c59a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3b08      	subs	r3, #8
 800c4e0:	61bb      	str	r3, [r7, #24]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c4e2:	4b32      	ldr	r3, [pc, #200]	; (800c5ac <mem_free+0x104>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69ba      	ldr	r2, [r7, #24]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d306      	bcc.n	800c4fa <mem_free+0x52>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f103 020c 	add.w	r2, r3, #12
 800c4f2:	4b2f      	ldr	r3, [pc, #188]	; (800c5b0 <mem_free+0x108>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d90d      	bls.n	800c516 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c4fa:	4b29      	ldr	r3, [pc, #164]	; (800c5a0 <mem_free+0xf8>)
 800c4fc:	f240 227f 	movw	r2, #639	; 0x27f
 800c500:	492c      	ldr	r1, [pc, #176]	; (800c5b4 <mem_free+0x10c>)
 800c502:	4829      	ldr	r0, [pc, #164]	; (800c5a8 <mem_free+0x100>)
 800c504:	f008 fe84 	bl	8015210 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c508:	f008 fdf4 	bl	80150f4 <sys_arch_protect>
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f008 fdfe 	bl	8015110 <sys_arch_unprotect>
    return;
 800c514:	e041      	b.n	800c59a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c516:	4828      	ldr	r0, [pc, #160]	; (800c5b8 <mem_free+0x110>)
 800c518:	f008 fdaa 	bl	8015070 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	791b      	ldrb	r3, [r3, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d110      	bne.n	800c546 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c524:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <mem_free+0xf8>)
 800c526:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c52a:	4924      	ldr	r1, [pc, #144]	; (800c5bc <mem_free+0x114>)
 800c52c:	481e      	ldr	r0, [pc, #120]	; (800c5a8 <mem_free+0x100>)
 800c52e:	f008 fe6f 	bl	8015210 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c532:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <mem_free+0x110>)
 800c534:	f008 fdab 	bl	801508e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c538:	f008 fddc 	bl	80150f4 <sys_arch_protect>
 800c53c:	6178      	str	r0, [r7, #20]
 800c53e:	6978      	ldr	r0, [r7, #20]
 800c540:	f008 fde6 	bl	8015110 <sys_arch_unprotect>
    return;
 800c544:	e029      	b.n	800c59a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c546:	69b8      	ldr	r0, [r7, #24]
 800c548:	f7ff ff72 	bl	800c430 <mem_link_valid>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d110      	bne.n	800c574 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c552:	4b13      	ldr	r3, [pc, #76]	; (800c5a0 <mem_free+0xf8>)
 800c554:	f240 2295 	movw	r2, #661	; 0x295
 800c558:	4919      	ldr	r1, [pc, #100]	; (800c5c0 <mem_free+0x118>)
 800c55a:	4813      	ldr	r0, [pc, #76]	; (800c5a8 <mem_free+0x100>)
 800c55c:	f008 fe58 	bl	8015210 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c560:	4815      	ldr	r0, [pc, #84]	; (800c5b8 <mem_free+0x110>)
 800c562:	f008 fd94 	bl	801508e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c566:	f008 fdc5 	bl	80150f4 <sys_arch_protect>
 800c56a:	6138      	str	r0, [r7, #16]
 800c56c:	6938      	ldr	r0, [r7, #16]
 800c56e:	f008 fdcf 	bl	8015110 <sys_arch_unprotect>
    return;
 800c572:	e012      	b.n	800c59a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	2200      	movs	r2, #0
 800c578:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c57a:	4b12      	ldr	r3, [pc, #72]	; (800c5c4 <mem_free+0x11c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	d202      	bcs.n	800c58a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c584:	4a0f      	ldr	r2, [pc, #60]	; (800c5c4 <mem_free+0x11c>)
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c58a:	69b8      	ldr	r0, [r7, #24]
 800c58c:	f7ff fe5c 	bl	800c248 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c590:	4809      	ldr	r0, [pc, #36]	; (800c5b8 <mem_free+0x110>)
 800c592:	f008 fd7c 	bl	801508e <sys_mutex_unlock>
 800c596:	e000      	b.n	800c59a <mem_free+0xf2>
    return;
 800c598:	bf00      	nop
}
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	08016bb4 	.word	0x08016bb4
 800c5a4:	08016ca4 	.word	0x08016ca4
 800c5a8:	08016bfc 	.word	0x08016bfc
 800c5ac:	20007218 	.word	0x20007218
 800c5b0:	2000721c 	.word	0x2000721c
 800c5b4:	08016cc8 	.word	0x08016cc8
 800c5b8:	20007220 	.word	0x20007220
 800c5bc:	08016ce4 	.word	0x08016ce4
 800c5c0:	08016d0c 	.word	0x08016d0c
 800c5c4:	20007224 	.word	0x20007224

0800c5c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c5d4:	887b      	ldrh	r3, [r7, #2]
 800c5d6:	3303      	adds	r3, #3
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c5e0:	8bfb      	ldrh	r3, [r7, #30]
 800c5e2:	2b0b      	cmp	r3, #11
 800c5e4:	d801      	bhi.n	800c5ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c5e6:	230c      	movs	r3, #12
 800c5e8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c5ea:	8bfb      	ldrh	r3, [r7, #30]
 800c5ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5f0:	d803      	bhi.n	800c5fa <mem_trim+0x32>
 800c5f2:	8bfa      	ldrh	r2, [r7, #30]
 800c5f4:	887b      	ldrh	r3, [r7, #2]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d201      	bcs.n	800c5fe <mem_trim+0x36>
    return NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e0d8      	b.n	800c7b0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c5fe:	4b6e      	ldr	r3, [pc, #440]	; (800c7b8 <mem_trim+0x1f0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d304      	bcc.n	800c612 <mem_trim+0x4a>
 800c608:	4b6c      	ldr	r3, [pc, #432]	; (800c7bc <mem_trim+0x1f4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d306      	bcc.n	800c620 <mem_trim+0x58>
 800c612:	4b6b      	ldr	r3, [pc, #428]	; (800c7c0 <mem_trim+0x1f8>)
 800c614:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c618:	496a      	ldr	r1, [pc, #424]	; (800c7c4 <mem_trim+0x1fc>)
 800c61a:	486b      	ldr	r0, [pc, #428]	; (800c7c8 <mem_trim+0x200>)
 800c61c:	f008 fdf8 	bl	8015210 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c620:	4b65      	ldr	r3, [pc, #404]	; (800c7b8 <mem_trim+0x1f0>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	429a      	cmp	r2, r3
 800c628:	d304      	bcc.n	800c634 <mem_trim+0x6c>
 800c62a:	4b64      	ldr	r3, [pc, #400]	; (800c7bc <mem_trim+0x1f4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d307      	bcc.n	800c644 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c634:	f008 fd5e 	bl	80150f4 <sys_arch_protect>
 800c638:	60b8      	str	r0, [r7, #8]
 800c63a:	68b8      	ldr	r0, [r7, #8]
 800c63c:	f008 fd68 	bl	8015110 <sys_arch_unprotect>
    return rmem;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	e0b5      	b.n	800c7b0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3b08      	subs	r3, #8
 800c648:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c64a:	69b8      	ldr	r0, [r7, #24]
 800c64c:	f7ff fdea 	bl	800c224 <mem_to_ptr>
 800c650:	4603      	mov	r3, r0
 800c652:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	881a      	ldrh	r2, [r3, #0]
 800c658:	8afb      	ldrh	r3, [r7, #22]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	3b08      	subs	r3, #8
 800c660:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c662:	8bfa      	ldrh	r2, [r7, #30]
 800c664:	8abb      	ldrh	r3, [r7, #20]
 800c666:	429a      	cmp	r2, r3
 800c668:	d906      	bls.n	800c678 <mem_trim+0xb0>
 800c66a:	4b55      	ldr	r3, [pc, #340]	; (800c7c0 <mem_trim+0x1f8>)
 800c66c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c670:	4956      	ldr	r1, [pc, #344]	; (800c7cc <mem_trim+0x204>)
 800c672:	4855      	ldr	r0, [pc, #340]	; (800c7c8 <mem_trim+0x200>)
 800c674:	f008 fdcc 	bl	8015210 <iprintf>
  if (newsize > size) {
 800c678:	8bfa      	ldrh	r2, [r7, #30]
 800c67a:	8abb      	ldrh	r3, [r7, #20]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d901      	bls.n	800c684 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c680:	2300      	movs	r3, #0
 800c682:	e095      	b.n	800c7b0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c684:	8bfa      	ldrh	r2, [r7, #30]
 800c686:	8abb      	ldrh	r3, [r7, #20]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d101      	bne.n	800c690 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	e08f      	b.n	800c7b0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c690:	484f      	ldr	r0, [pc, #316]	; (800c7d0 <mem_trim+0x208>)
 800c692:	f008 fced 	bl	8015070 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff fdb0 	bl	800c200 <ptr_to_mem>
 800c6a0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	791b      	ldrb	r3, [r3, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d13f      	bne.n	800c72a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6b2:	d106      	bne.n	800c6c2 <mem_trim+0xfa>
 800c6b4:	4b42      	ldr	r3, [pc, #264]	; (800c7c0 <mem_trim+0x1f8>)
 800c6b6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c6ba:	4946      	ldr	r1, [pc, #280]	; (800c7d4 <mem_trim+0x20c>)
 800c6bc:	4842      	ldr	r0, [pc, #264]	; (800c7c8 <mem_trim+0x200>)
 800c6be:	f008 fda7 	bl	8015210 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c6c8:	8afa      	ldrh	r2, [r7, #22]
 800c6ca:	8bfb      	ldrh	r3, [r7, #30]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800c6d4:	4b40      	ldr	r3, [pc, #256]	; (800c7d8 <mem_trim+0x210>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d106      	bne.n	800c6ec <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c6de:	89bb      	ldrh	r3, [r7, #12]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff fd8d 	bl	800c200 <ptr_to_mem>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	4b3b      	ldr	r3, [pc, #236]	; (800c7d8 <mem_trim+0x210>)
 800c6ea:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c6ec:	89bb      	ldrh	r3, [r7, #12]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff fd86 	bl	800c200 <ptr_to_mem>
 800c6f4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	89fa      	ldrh	r2, [r7, #14]
 800c700:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	8afa      	ldrh	r2, [r7, #22]
 800c706:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	89ba      	ldrh	r2, [r7, #12]
 800c70c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c716:	d047      	beq.n	800c7a8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff fd6f 	bl	800c200 <ptr_to_mem>
 800c722:	4602      	mov	r2, r0
 800c724:	89bb      	ldrh	r3, [r7, #12]
 800c726:	8053      	strh	r3, [r2, #2]
 800c728:	e03e      	b.n	800c7a8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c72a:	8bfb      	ldrh	r3, [r7, #30]
 800c72c:	f103 0214 	add.w	r2, r3, #20
 800c730:	8abb      	ldrh	r3, [r7, #20]
 800c732:	429a      	cmp	r2, r3
 800c734:	d838      	bhi.n	800c7a8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c736:	8afa      	ldrh	r2, [r7, #22]
 800c738:	8bfb      	ldrh	r3, [r7, #30]
 800c73a:	4413      	add	r3, r2
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	3308      	adds	r3, #8
 800c740:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c74a:	d106      	bne.n	800c75a <mem_trim+0x192>
 800c74c:	4b1c      	ldr	r3, [pc, #112]	; (800c7c0 <mem_trim+0x1f8>)
 800c74e:	f240 3216 	movw	r2, #790	; 0x316
 800c752:	4920      	ldr	r1, [pc, #128]	; (800c7d4 <mem_trim+0x20c>)
 800c754:	481c      	ldr	r0, [pc, #112]	; (800c7c8 <mem_trim+0x200>)
 800c756:	f008 fd5b 	bl	8015210 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c75a:	89bb      	ldrh	r3, [r7, #12]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fd4f 	bl	800c200 <ptr_to_mem>
 800c762:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c764:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <mem_trim+0x210>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d202      	bcs.n	800c774 <mem_trim+0x1ac>
      lfree = mem2;
 800c76e:	4a1a      	ldr	r2, [pc, #104]	; (800c7d8 <mem_trim+0x210>)
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2200      	movs	r2, #0
 800c778:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	881a      	ldrh	r2, [r3, #0]
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	8afa      	ldrh	r2, [r7, #22]
 800c786:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	89ba      	ldrh	r2, [r7, #12]
 800c78c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c796:	d007      	beq.n	800c7a8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff fd2f 	bl	800c200 <ptr_to_mem>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	89bb      	ldrh	r3, [r7, #12]
 800c7a6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c7a8:	4809      	ldr	r0, [pc, #36]	; (800c7d0 <mem_trim+0x208>)
 800c7aa:	f008 fc70 	bl	801508e <sys_mutex_unlock>
  return rmem;
 800c7ae:	687b      	ldr	r3, [r7, #4]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	20007218 	.word	0x20007218
 800c7bc:	2000721c 	.word	0x2000721c
 800c7c0:	08016bb4 	.word	0x08016bb4
 800c7c4:	08016d40 	.word	0x08016d40
 800c7c8:	08016bfc 	.word	0x08016bfc
 800c7cc:	08016d58 	.word	0x08016d58
 800c7d0:	20007220 	.word	0x20007220
 800c7d4:	08016d78 	.word	0x08016d78
 800c7d8:	20007224 	.word	0x20007224

0800c7dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c7e6:	88fb      	ldrh	r3, [r7, #6]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <mem_malloc+0x14>
    return NULL;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e0e2      	b.n	800c9b6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c7f0:	88fb      	ldrh	r3, [r7, #6]
 800c7f2:	3303      	adds	r3, #3
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	f023 0303 	bic.w	r3, r3, #3
 800c7fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c7fc:	8bbb      	ldrh	r3, [r7, #28]
 800c7fe:	2b0b      	cmp	r3, #11
 800c800:	d801      	bhi.n	800c806 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c802:	230c      	movs	r3, #12
 800c804:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c806:	8bbb      	ldrh	r3, [r7, #28]
 800c808:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c80c:	d803      	bhi.n	800c816 <mem_malloc+0x3a>
 800c80e:	8bba      	ldrh	r2, [r7, #28]
 800c810:	88fb      	ldrh	r3, [r7, #6]
 800c812:	429a      	cmp	r2, r3
 800c814:	d201      	bcs.n	800c81a <mem_malloc+0x3e>
    return NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	e0cd      	b.n	800c9b6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c81a:	4869      	ldr	r0, [pc, #420]	; (800c9c0 <mem_malloc+0x1e4>)
 800c81c:	f008 fc28 	bl	8015070 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c820:	4b68      	ldr	r3, [pc, #416]	; (800c9c4 <mem_malloc+0x1e8>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff fcfd 	bl	800c224 <mem_to_ptr>
 800c82a:	4603      	mov	r3, r0
 800c82c:	83fb      	strh	r3, [r7, #30]
 800c82e:	e0b7      	b.n	800c9a0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c830:	8bfb      	ldrh	r3, [r7, #30]
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fce4 	bl	800c200 <ptr_to_mem>
 800c838:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	791b      	ldrb	r3, [r3, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f040 80a7 	bne.w	800c992 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	8bfb      	ldrh	r3, [r7, #30]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	f1a3 0208 	sub.w	r2, r3, #8
 800c852:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c854:	429a      	cmp	r2, r3
 800c856:	f0c0 809c 	bcc.w	800c992 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	8bfb      	ldrh	r3, [r7, #30]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	f1a3 0208 	sub.w	r2, r3, #8
 800c868:	8bbb      	ldrh	r3, [r7, #28]
 800c86a:	3314      	adds	r3, #20
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d333      	bcc.n	800c8d8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c870:	8bfa      	ldrh	r2, [r7, #30]
 800c872:	8bbb      	ldrh	r3, [r7, #28]
 800c874:	4413      	add	r3, r2
 800c876:	b29b      	uxth	r3, r3
 800c878:	3308      	adds	r3, #8
 800c87a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c87c:	8a7b      	ldrh	r3, [r7, #18]
 800c87e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c882:	d106      	bne.n	800c892 <mem_malloc+0xb6>
 800c884:	4b50      	ldr	r3, [pc, #320]	; (800c9c8 <mem_malloc+0x1ec>)
 800c886:	f240 3287 	movw	r2, #903	; 0x387
 800c88a:	4950      	ldr	r1, [pc, #320]	; (800c9cc <mem_malloc+0x1f0>)
 800c88c:	4850      	ldr	r0, [pc, #320]	; (800c9d0 <mem_malloc+0x1f4>)
 800c88e:	f008 fcbf 	bl	8015210 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c892:	8a7b      	ldrh	r3, [r7, #18]
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff fcb3 	bl	800c200 <ptr_to_mem>
 800c89a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	881a      	ldrh	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	8bfa      	ldrh	r2, [r7, #30]
 800c8ae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	8a7a      	ldrh	r2, [r7, #18]
 800c8b4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8c4:	d00b      	beq.n	800c8de <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	881b      	ldrh	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7ff fc98 	bl	800c200 <ptr_to_mem>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	8a7b      	ldrh	r3, [r7, #18]
 800c8d4:	8053      	strh	r3, [r2, #2]
 800c8d6:	e002      	b.n	800c8de <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c8de:	4b39      	ldr	r3, [pc, #228]	; (800c9c4 <mem_malloc+0x1e8>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d127      	bne.n	800c938 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c8e8:	4b36      	ldr	r3, [pc, #216]	; (800c9c4 <mem_malloc+0x1e8>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c8ee:	e005      	b.n	800c8fc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	881b      	ldrh	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fc83 	bl	800c200 <ptr_to_mem>
 800c8fa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	791b      	ldrb	r3, [r3, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <mem_malloc+0x132>
 800c904:	4b33      	ldr	r3, [pc, #204]	; (800c9d4 <mem_malloc+0x1f8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d1f0      	bne.n	800c8f0 <mem_malloc+0x114>
          }
          lfree = cur;
 800c90e:	4a2d      	ldr	r2, [pc, #180]	; (800c9c4 <mem_malloc+0x1e8>)
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c914:	4b2b      	ldr	r3, [pc, #172]	; (800c9c4 <mem_malloc+0x1e8>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <mem_malloc+0x1f8>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d00b      	beq.n	800c938 <mem_malloc+0x15c>
 800c920:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <mem_malloc+0x1e8>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	791b      	ldrb	r3, [r3, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d006      	beq.n	800c938 <mem_malloc+0x15c>
 800c92a:	4b27      	ldr	r3, [pc, #156]	; (800c9c8 <mem_malloc+0x1ec>)
 800c92c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c930:	4929      	ldr	r1, [pc, #164]	; (800c9d8 <mem_malloc+0x1fc>)
 800c932:	4827      	ldr	r0, [pc, #156]	; (800c9d0 <mem_malloc+0x1f4>)
 800c934:	f008 fc6c 	bl	8015210 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c938:	4821      	ldr	r0, [pc, #132]	; (800c9c0 <mem_malloc+0x1e4>)
 800c93a:	f008 fba8 	bl	801508e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c93e:	8bba      	ldrh	r2, [r7, #28]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4413      	add	r3, r2
 800c944:	3308      	adds	r3, #8
 800c946:	4a23      	ldr	r2, [pc, #140]	; (800c9d4 <mem_malloc+0x1f8>)
 800c948:	6812      	ldr	r2, [r2, #0]
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d906      	bls.n	800c95c <mem_malloc+0x180>
 800c94e:	4b1e      	ldr	r3, [pc, #120]	; (800c9c8 <mem_malloc+0x1ec>)
 800c950:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c954:	4921      	ldr	r1, [pc, #132]	; (800c9dc <mem_malloc+0x200>)
 800c956:	481e      	ldr	r0, [pc, #120]	; (800c9d0 <mem_malloc+0x1f4>)
 800c958:	f008 fc5a 	bl	8015210 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f003 0303 	and.w	r3, r3, #3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <mem_malloc+0x198>
 800c966:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <mem_malloc+0x1ec>)
 800c968:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c96c:	491c      	ldr	r1, [pc, #112]	; (800c9e0 <mem_malloc+0x204>)
 800c96e:	4818      	ldr	r0, [pc, #96]	; (800c9d0 <mem_malloc+0x1f4>)
 800c970:	f008 fc4e 	bl	8015210 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	f003 0303 	and.w	r3, r3, #3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d006      	beq.n	800c98c <mem_malloc+0x1b0>
 800c97e:	4b12      	ldr	r3, [pc, #72]	; (800c9c8 <mem_malloc+0x1ec>)
 800c980:	f240 32be 	movw	r2, #958	; 0x3be
 800c984:	4917      	ldr	r1, [pc, #92]	; (800c9e4 <mem_malloc+0x208>)
 800c986:	4812      	ldr	r0, [pc, #72]	; (800c9d0 <mem_malloc+0x1f4>)
 800c988:	f008 fc42 	bl	8015210 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	3308      	adds	r3, #8
 800c990:	e011      	b.n	800c9b6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c992:	8bfb      	ldrh	r3, [r7, #30]
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff fc33 	bl	800c200 <ptr_to_mem>
 800c99a:	4603      	mov	r3, r0
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9a0:	8bfa      	ldrh	r2, [r7, #30]
 800c9a2:	8bbb      	ldrh	r3, [r7, #28]
 800c9a4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	f4ff af41 	bcc.w	800c830 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c9ae:	4804      	ldr	r0, [pc, #16]	; (800c9c0 <mem_malloc+0x1e4>)
 800c9b0:	f008 fb6d 	bl	801508e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20007220 	.word	0x20007220
 800c9c4:	20007224 	.word	0x20007224
 800c9c8:	08016bb4 	.word	0x08016bb4
 800c9cc:	08016d78 	.word	0x08016d78
 800c9d0:	08016bfc 	.word	0x08016bfc
 800c9d4:	2000721c 	.word	0x2000721c
 800c9d8:	08016d8c 	.word	0x08016d8c
 800c9dc:	08016da8 	.word	0x08016da8
 800c9e0:	08016dd8 	.word	0x08016dd8
 800c9e4:	08016e08 	.word	0x08016e08

0800c9e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	3303      	adds	r3, #3
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca04:	2300      	movs	r3, #0
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	e011      	b.n	800ca2e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	4413      	add	r3, r2
 800ca26:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	461a      	mov	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	dce7      	bgt.n	800ca0a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
	...

0800ca48 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ca4e:	2300      	movs	r3, #0
 800ca50:	80fb      	strh	r3, [r7, #6]
 800ca52:	e009      	b.n	800ca68 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ca54:	88fb      	ldrh	r3, [r7, #6]
 800ca56:	4a08      	ldr	r2, [pc, #32]	; (800ca78 <memp_init+0x30>)
 800ca58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff ffc3 	bl	800c9e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	3301      	adds	r3, #1
 800ca66:	80fb      	strh	r3, [r7, #6]
 800ca68:	88fb      	ldrh	r3, [r7, #6]
 800ca6a:	2b0d      	cmp	r3, #13
 800ca6c:	d9f2      	bls.n	800ca54 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	08019df4 	.word	0x08019df4

0800ca7c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ca84:	f008 fb36 	bl	80150f4 <sys_arch_protect>
 800ca88:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d015      	beq.n	800cac4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	6812      	ldr	r2, [r2, #0]
 800caa0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d006      	beq.n	800caba <do_memp_malloc_pool+0x3e>
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <do_memp_malloc_pool+0x58>)
 800caae:	f240 1219 	movw	r2, #281	; 0x119
 800cab2:	4909      	ldr	r1, [pc, #36]	; (800cad8 <do_memp_malloc_pool+0x5c>)
 800cab4:	4809      	ldr	r0, [pc, #36]	; (800cadc <do_memp_malloc_pool+0x60>)
 800cab6:	f008 fbab 	bl	8015210 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f008 fb28 	bl	8015110 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	e003      	b.n	800cacc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f008 fb23 	bl	8015110 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	08016e2c 	.word	0x08016e2c
 800cad8:	08016e5c 	.word	0x08016e5c
 800cadc:	08016e80 	.word	0x08016e80

0800cae0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	2b0d      	cmp	r3, #13
 800caee:	d908      	bls.n	800cb02 <memp_malloc+0x22>
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <memp_malloc+0x3c>)
 800caf2:	f240 1257 	movw	r2, #343	; 0x157
 800caf6:	490a      	ldr	r1, [pc, #40]	; (800cb20 <memp_malloc+0x40>)
 800caf8:	480a      	ldr	r0, [pc, #40]	; (800cb24 <memp_malloc+0x44>)
 800cafa:	f008 fb89 	bl	8015210 <iprintf>
 800cafe:	2300      	movs	r3, #0
 800cb00:	e008      	b.n	800cb14 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb02:	79fb      	ldrb	r3, [r7, #7]
 800cb04:	4a08      	ldr	r2, [pc, #32]	; (800cb28 <memp_malloc+0x48>)
 800cb06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff ffb6 	bl	800ca7c <do_memp_malloc_pool>
 800cb10:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cb12:	68fb      	ldr	r3, [r7, #12]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	08016e2c 	.word	0x08016e2c
 800cb20:	08016ebc 	.word	0x08016ebc
 800cb24:	08016e80 	.word	0x08016e80
 800cb28:	08019df4 	.word	0x08019df4

0800cb2c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	f003 0303 	and.w	r3, r3, #3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <do_memp_free_pool+0x22>
 800cb40:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <do_memp_free_pool+0x4c>)
 800cb42:	f240 126d 	movw	r2, #365	; 0x16d
 800cb46:	490d      	ldr	r1, [pc, #52]	; (800cb7c <do_memp_free_pool+0x50>)
 800cb48:	480d      	ldr	r0, [pc, #52]	; (800cb80 <do_memp_free_pool+0x54>)
 800cb4a:	f008 fb61 	bl	8015210 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cb52:	f008 facf 	bl	80150f4 <sys_arch_protect>
 800cb56:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cb6a:	68b8      	ldr	r0, [r7, #8]
 800cb6c:	f008 fad0 	bl	8015110 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cb70:	bf00      	nop
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	08016e2c 	.word	0x08016e2c
 800cb7c:	08016edc 	.word	0x08016edc
 800cb80:	08016e80 	.word	0x08016e80

0800cb84 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	2b0d      	cmp	r3, #13
 800cb94:	d907      	bls.n	800cba6 <memp_free+0x22>
 800cb96:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <memp_free+0x44>)
 800cb98:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cb9c:	490b      	ldr	r1, [pc, #44]	; (800cbcc <memp_free+0x48>)
 800cb9e:	480c      	ldr	r0, [pc, #48]	; (800cbd0 <memp_free+0x4c>)
 800cba0:	f008 fb36 	bl	8015210 <iprintf>
 800cba4:	e00c      	b.n	800cbc0 <memp_free+0x3c>

  if (mem == NULL) {
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cbac:	79fb      	ldrb	r3, [r7, #7]
 800cbae:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <memp_free+0x50>)
 800cbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff ffb8 	bl	800cb2c <do_memp_free_pool>
 800cbbc:	e000      	b.n	800cbc0 <memp_free+0x3c>
    return;
 800cbbe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	08016e2c 	.word	0x08016e2c
 800cbcc:	08016efc 	.word	0x08016efc
 800cbd0:	08016e80 	.word	0x08016e80
 800cbd4:	08019df4 	.word	0x08019df4

0800cbd8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cbdc:	bf00      	nop
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d108      	bne.n	800cc0e <netif_add+0x26>
 800cbfc:	4b57      	ldr	r3, [pc, #348]	; (800cd5c <netif_add+0x174>)
 800cbfe:	f240 1227 	movw	r2, #295	; 0x127
 800cc02:	4957      	ldr	r1, [pc, #348]	; (800cd60 <netif_add+0x178>)
 800cc04:	4857      	ldr	r0, [pc, #348]	; (800cd64 <netif_add+0x17c>)
 800cc06:	f008 fb03 	bl	8015210 <iprintf>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e0a2      	b.n	800cd54 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d108      	bne.n	800cc26 <netif_add+0x3e>
 800cc14:	4b51      	ldr	r3, [pc, #324]	; (800cd5c <netif_add+0x174>)
 800cc16:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cc1a:	4953      	ldr	r1, [pc, #332]	; (800cd68 <netif_add+0x180>)
 800cc1c:	4851      	ldr	r0, [pc, #324]	; (800cd64 <netif_add+0x17c>)
 800cc1e:	f008 faf7 	bl	8015210 <iprintf>
 800cc22:	2300      	movs	r3, #0
 800cc24:	e096      	b.n	800cd54 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cc2c:	4b4f      	ldr	r3, [pc, #316]	; (800cd6c <netif_add+0x184>)
 800cc2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cc36:	4b4d      	ldr	r3, [pc, #308]	; (800cd6c <netif_add+0x184>)
 800cc38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cc40:	4b4a      	ldr	r3, [pc, #296]	; (800cd6c <netif_add+0x184>)
 800cc42:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4a45      	ldr	r2, [pc, #276]	; (800cd70 <netif_add+0x188>)
 800cc5a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6a3a      	ldr	r2, [r7, #32]
 800cc74:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cc76:	4b3f      	ldr	r3, [pc, #252]	; (800cd74 <netif_add+0x18c>)
 800cc78:	781a      	ldrb	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc84:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f913 	bl	800ceb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	4798      	blx	r3
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <netif_add+0xba>
    return NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e058      	b.n	800cd54 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cca8:	2bff      	cmp	r3, #255	; 0xff
 800ccaa:	d103      	bne.n	800ccb4 <netif_add+0xcc>
        netif->num = 0;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ccb8:	4b2f      	ldr	r3, [pc, #188]	; (800cd78 <netif_add+0x190>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	617b      	str	r3, [r7, #20]
 800ccbe:	e02b      	b.n	800cd18 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d106      	bne.n	800ccd6 <netif_add+0xee>
 800ccc8:	4b24      	ldr	r3, [pc, #144]	; (800cd5c <netif_add+0x174>)
 800ccca:	f240 128b 	movw	r2, #395	; 0x18b
 800ccce:	492b      	ldr	r1, [pc, #172]	; (800cd7c <netif_add+0x194>)
 800ccd0:	4824      	ldr	r0, [pc, #144]	; (800cd64 <netif_add+0x17c>)
 800ccd2:	f008 fa9d 	bl	8015210 <iprintf>
        num_netifs++;
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	2bff      	cmp	r3, #255	; 0xff
 800cce0:	dd06      	ble.n	800ccf0 <netif_add+0x108>
 800cce2:	4b1e      	ldr	r3, [pc, #120]	; (800cd5c <netif_add+0x174>)
 800cce4:	f240 128d 	movw	r2, #397	; 0x18d
 800cce8:	4925      	ldr	r1, [pc, #148]	; (800cd80 <netif_add+0x198>)
 800ccea:	481e      	ldr	r0, [pc, #120]	; (800cd64 <netif_add+0x17c>)
 800ccec:	f008 fa90 	bl	8015210 <iprintf>
        if (netif2->num == netif->num) {
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d108      	bne.n	800cd12 <netif_add+0x12a>
          netif->num++;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd06:	3301      	adds	r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cd10:	e005      	b.n	800cd1e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1d0      	bne.n	800ccc0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1be      	bne.n	800cca2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd2a:	2bfe      	cmp	r3, #254	; 0xfe
 800cd2c:	d103      	bne.n	800cd36 <netif_add+0x14e>
    netif_num = 0;
 800cd2e:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <netif_add+0x18c>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	e006      	b.n	800cd44 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	4b0c      	ldr	r3, [pc, #48]	; (800cd74 <netif_add+0x18c>)
 800cd42:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cd44:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <netif_add+0x190>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cd4c:	4a0a      	ldr	r2, [pc, #40]	; (800cd78 <netif_add+0x190>)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cd52:	68fb      	ldr	r3, [r7, #12]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	08016f18 	.word	0x08016f18
 800cd60:	08016fac 	.word	0x08016fac
 800cd64:	08016f68 	.word	0x08016f68
 800cd68:	08016fc8 	.word	0x08016fc8
 800cd6c:	08019d48 	.word	0x08019d48
 800cd70:	0800d193 	.word	0x0800d193
 800cd74:	20007260 	.word	0x20007260
 800cd78:	2000aee0 	.word	0x2000aee0
 800cd7c:	08016fec 	.word	0x08016fec
 800cd80:	08017000 	.word	0x08017000

0800cd84 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f002 ff81 	bl	800fc98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f007 ffad 	bl	8014cf8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d106      	bne.n	800cdc8 <netif_do_set_ipaddr+0x20>
 800cdba:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <netif_do_set_ipaddr+0x88>)
 800cdbc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cdc0:	491c      	ldr	r1, [pc, #112]	; (800ce34 <netif_do_set_ipaddr+0x8c>)
 800cdc2:	481d      	ldr	r0, [pc, #116]	; (800ce38 <netif_do_set_ipaddr+0x90>)
 800cdc4:	f008 fa24 	bl	8015210 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d106      	bne.n	800cddc <netif_do_set_ipaddr+0x34>
 800cdce:	4b18      	ldr	r3, [pc, #96]	; (800ce30 <netif_do_set_ipaddr+0x88>)
 800cdd0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cdd4:	4917      	ldr	r1, [pc, #92]	; (800ce34 <netif_do_set_ipaddr+0x8c>)
 800cdd6:	4818      	ldr	r0, [pc, #96]	; (800ce38 <netif_do_set_ipaddr+0x90>)
 800cdd8:	f008 fa1a 	bl	8015210 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	3304      	adds	r3, #4
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d01c      	beq.n	800ce24 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cdfa:	f107 0314 	add.w	r3, r7, #20
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff ffbf 	bl	800cd84 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <netif_do_set_ipaddr+0x6a>
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	e000      	b.n	800ce14 <netif_do_set_ipaddr+0x6c>
 800ce12:	2300      	movs	r3, #0
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ce18:	2101      	movs	r1, #1
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 f8d2 	bl	800cfc4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	08016f18 	.word	0x08016f18
 800ce34:	08017030 	.word	0x08017030
 800ce38:	08016f68 	.word	0x08016f68

0800ce3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3308      	adds	r3, #8
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d00a      	beq.n	800ce6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <netif_do_set_netmask+0x26>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	e000      	b.n	800ce64 <netif_do_set_netmask+0x28>
 800ce62:	2300      	movs	r3, #0
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e000      	b.n	800ce6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b085      	sub	sp, #20
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60f8      	str	r0, [r7, #12]
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	330c      	adds	r3, #12
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d00a      	beq.n	800ceaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <netif_do_set_gw+0x26>
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	e000      	b.n	800cea2 <netif_do_set_gw+0x28>
 800cea0:	2300      	movs	r3, #0
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ced4:	4b1c      	ldr	r3, [pc, #112]	; (800cf48 <netif_set_addr+0x90>)
 800ced6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cede:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <netif_set_addr+0x90>)
 800cee0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cee8:	4b17      	ldr	r3, [pc, #92]	; (800cf48 <netif_set_addr+0x90>)
 800ceea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d003      	beq.n	800cefa <netif_set_addr+0x42>
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <netif_set_addr+0x46>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e000      	b.n	800cf00 <netif_set_addr+0x48>
 800cefe:	2300      	movs	r3, #0
 800cf00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d006      	beq.n	800cf16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf08:	f107 0310 	add.w	r3, r7, #16
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	68b9      	ldr	r1, [r7, #8]
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff ff49 	bl	800cda8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cf16:	69fa      	ldr	r2, [r7, #28]
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff ff8e 	bl	800ce3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff ffa8 	bl	800ce7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf30:	f107 0310 	add.w	r3, r7, #16
 800cf34:	461a      	mov	r2, r3
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff ff35 	bl	800cda8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cf3e:	bf00      	nop
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08019d48 	.word	0x08019d48

0800cf4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cf54:	4a04      	ldr	r2, [pc, #16]	; (800cf68 <netif_set_default+0x1c>)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cf5a:	bf00      	nop
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000aee4 	.word	0x2000aee4

0800cf6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d107      	bne.n	800cf8a <netif_set_up+0x1e>
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <netif_set_up+0x4c>)
 800cf7c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cf80:	490e      	ldr	r1, [pc, #56]	; (800cfbc <netif_set_up+0x50>)
 800cf82:	480f      	ldr	r0, [pc, #60]	; (800cfc0 <netif_set_up+0x54>)
 800cf84:	f008 f944 	bl	8015210 <iprintf>
 800cf88:	e013      	b.n	800cfb2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10c      	bne.n	800cfb2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cfaa:	2103      	movs	r1, #3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f809 	bl	800cfc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	08016f18 	.word	0x08016f18
 800cfbc:	080170a0 	.word	0x080170a0
 800cfc0:	08016f68 	.word	0x08016f68

0800cfc4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <netif_issue_reports+0x20>
 800cfd6:	4b18      	ldr	r3, [pc, #96]	; (800d038 <netif_issue_reports+0x74>)
 800cfd8:	f240 326d 	movw	r2, #877	; 0x36d
 800cfdc:	4917      	ldr	r1, [pc, #92]	; (800d03c <netif_issue_reports+0x78>)
 800cfde:	4818      	ldr	r0, [pc, #96]	; (800d040 <netif_issue_reports+0x7c>)
 800cfe0:	f008 f916 	bl	8015210 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfea:	f003 0304 	and.w	r3, r3, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01e      	beq.n	800d030 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cff8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d017      	beq.n	800d030 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d000:	78fb      	ldrb	r3, [r7, #3]
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	2b00      	cmp	r3, #0
 800d008:	d013      	beq.n	800d032 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3304      	adds	r3, #4
 800d00e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00e      	beq.n	800d032 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d01a:	f003 0308 	and.w	r3, r3, #8
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d007      	beq.n	800d032 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	3304      	adds	r3, #4
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fd fe49 	bl	800acc0 <etharp_request>
 800d02e:	e000      	b.n	800d032 <netif_issue_reports+0x6e>
    return;
 800d030:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	08016f18 	.word	0x08016f18
 800d03c:	080170bc 	.word	0x080170bc
 800d040:	08016f68 	.word	0x08016f68

0800d044 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d107      	bne.n	800d062 <netif_set_down+0x1e>
 800d052:	4b12      	ldr	r3, [pc, #72]	; (800d09c <netif_set_down+0x58>)
 800d054:	f240 329b 	movw	r2, #923	; 0x39b
 800d058:	4911      	ldr	r1, [pc, #68]	; (800d0a0 <netif_set_down+0x5c>)
 800d05a:	4812      	ldr	r0, [pc, #72]	; (800d0a4 <netif_set_down+0x60>)
 800d05c:	f008 f8d8 	bl	8015210 <iprintf>
 800d060:	e019      	b.n	800d096 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d012      	beq.n	800d096 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d076:	f023 0301 	bic.w	r3, r3, #1
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d088:	f003 0308 	and.w	r3, r3, #8
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7fd f9d3 	bl	800a43c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	08016f18 	.word	0x08016f18
 800d0a0:	080170e0 	.word	0x080170e0
 800d0a4:	08016f68 	.word	0x08016f68

0800d0a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d107      	bne.n	800d0c6 <netif_set_link_up+0x1e>
 800d0b6:	4b13      	ldr	r3, [pc, #76]	; (800d104 <netif_set_link_up+0x5c>)
 800d0b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d0bc:	4912      	ldr	r1, [pc, #72]	; (800d108 <netif_set_link_up+0x60>)
 800d0be:	4813      	ldr	r0, [pc, #76]	; (800d10c <netif_set_link_up+0x64>)
 800d0c0:	f008 f8a6 	bl	8015210 <iprintf>
 800d0c4:	e01b      	b.n	800d0fe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d114      	bne.n	800d0fe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0da:	f043 0304 	orr.w	r3, r3, #4
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d0e6:	2103      	movs	r1, #3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff ff6b 	bl	800cfc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d003      	beq.n	800d0fe <netif_set_link_up+0x56>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	08016f18 	.word	0x08016f18
 800d108:	08017100 	.word	0x08017100
 800d10c:	08016f68 	.word	0x08016f68

0800d110 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d107      	bne.n	800d12e <netif_set_link_down+0x1e>
 800d11e:	4b11      	ldr	r3, [pc, #68]	; (800d164 <netif_set_link_down+0x54>)
 800d120:	f240 4206 	movw	r2, #1030	; 0x406
 800d124:	4910      	ldr	r1, [pc, #64]	; (800d168 <netif_set_link_down+0x58>)
 800d126:	4811      	ldr	r0, [pc, #68]	; (800d16c <netif_set_link_down+0x5c>)
 800d128:	f008 f872 	bl	8015210 <iprintf>
 800d12c:	e017      	b.n	800d15e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d134:	f003 0304 	and.w	r3, r3, #4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d010      	beq.n	800d15e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d142:	f023 0304 	bic.w	r3, r3, #4
 800d146:	b2da      	uxtb	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <netif_set_link_down+0x4e>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	69db      	ldr	r3, [r3, #28]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	08016f18 	.word	0x08016f18
 800d168:	08017124 	.word	0x08017124
 800d16c:	08016f68 	.word	0x08016f68

0800d170 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	61da      	str	r2, [r3, #28]
  }
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d192:	b480      	push	{r7}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	60f8      	str	r0, [r7, #12]
 800d19a:	60b9      	str	r1, [r7, #8]
 800d19c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d19e:	f06f 030b 	mvn.w	r3, #11
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
	...

0800d1b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d1ba:	79fb      	ldrb	r3, [r7, #7]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d013      	beq.n	800d1e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <netif_get_by_index+0x48>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e00c      	b.n	800d1e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	79fa      	ldrb	r2, [r7, #7]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d101      	bne.n	800d1dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	e006      	b.n	800d1ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1ef      	bne.n	800d1c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3714      	adds	r7, #20
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	2000aee0 	.word	0x2000aee0

0800d1fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d202:	f007 ff77 	bl	80150f4 <sys_arch_protect>
 800d206:	6038      	str	r0, [r7, #0]
 800d208:	4b0d      	ldr	r3, [pc, #52]	; (800d240 <pbuf_free_ooseq+0x44>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	6838      	ldr	r0, [r7, #0]
 800d210:	f007 ff7e 	bl	8015110 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d214:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <pbuf_free_ooseq+0x48>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	e00a      	b.n	800d232 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d220:	2b00      	cmp	r3, #0
 800d222:	d003      	beq.n	800d22c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f002 fd75 	bl	800fd14 <tcp_free_ooseq>
      return;
 800d22a:	e005      	b.n	800d238 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	607b      	str	r3, [r7, #4]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1f1      	bne.n	800d21c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	2000aee8 	.word	0x2000aee8
 800d244:	2000aef0 	.word	0x2000aef0

0800d248 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d250:	f7ff ffd4 	bl	800d1fc <pbuf_free_ooseq>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d262:	f007 ff47 	bl	80150f4 <sys_arch_protect>
 800d266:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d268:	4b0f      	ldr	r3, [pc, #60]	; (800d2a8 <pbuf_pool_is_empty+0x4c>)
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d26e:	4b0e      	ldr	r3, [pc, #56]	; (800d2a8 <pbuf_pool_is_empty+0x4c>)
 800d270:	2201      	movs	r2, #1
 800d272:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f007 ff4b 	bl	8015110 <sys_arch_unprotect>

  if (!queued) {
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10f      	bne.n	800d2a0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d280:	2100      	movs	r1, #0
 800d282:	480a      	ldr	r0, [pc, #40]	; (800d2ac <pbuf_pool_is_empty+0x50>)
 800d284:	f7fb fbd2 	bl	8008a2c <tcpip_try_callback>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d008      	beq.n	800d2a0 <pbuf_pool_is_empty+0x44>
 800d28e:	f007 ff31 	bl	80150f4 <sys_arch_protect>
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	4b04      	ldr	r3, [pc, #16]	; (800d2a8 <pbuf_pool_is_empty+0x4c>)
 800d296:	2200      	movs	r2, #0
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f007 ff38 	bl	8015110 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	2000aee8 	.word	0x2000aee8
 800d2ac:	0800d249 	.word	0x0800d249

0800d2b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	461a      	mov	r2, r3
 800d2be:	460b      	mov	r3, r1
 800d2c0:	80fb      	strh	r3, [r7, #6]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	88fa      	ldrh	r2, [r7, #6]
 800d2d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	88ba      	ldrh	r2, [r7, #4]
 800d2dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d2de:	8b3b      	ldrh	r3, [r7, #24]
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	7f3a      	ldrb	r2, [r7, #28]
 800d2ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	73da      	strb	r2, [r3, #15]
}
 800d2f8:	bf00      	nop
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08c      	sub	sp, #48	; 0x30
 800d308:	af02      	add	r7, sp, #8
 800d30a:	4603      	mov	r3, r0
 800d30c:	71fb      	strb	r3, [r7, #7]
 800d30e:	460b      	mov	r3, r1
 800d310:	80bb      	strh	r3, [r7, #4]
 800d312:	4613      	mov	r3, r2
 800d314:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d31a:	887b      	ldrh	r3, [r7, #2]
 800d31c:	2b41      	cmp	r3, #65	; 0x41
 800d31e:	d00b      	beq.n	800d338 <pbuf_alloc+0x34>
 800d320:	2b41      	cmp	r3, #65	; 0x41
 800d322:	dc02      	bgt.n	800d32a <pbuf_alloc+0x26>
 800d324:	2b01      	cmp	r3, #1
 800d326:	d007      	beq.n	800d338 <pbuf_alloc+0x34>
 800d328:	e0c2      	b.n	800d4b0 <pbuf_alloc+0x1ac>
 800d32a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d32e:	d00b      	beq.n	800d348 <pbuf_alloc+0x44>
 800d330:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d334:	d070      	beq.n	800d418 <pbuf_alloc+0x114>
 800d336:	e0bb      	b.n	800d4b0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d338:	887a      	ldrh	r2, [r7, #2]
 800d33a:	88bb      	ldrh	r3, [r7, #4]
 800d33c:	4619      	mov	r1, r3
 800d33e:	2000      	movs	r0, #0
 800d340:	f000 f8d2 	bl	800d4e8 <pbuf_alloc_reference>
 800d344:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d346:	e0bd      	b.n	800d4c4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d350:	88bb      	ldrh	r3, [r7, #4]
 800d352:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d354:	200d      	movs	r0, #13
 800d356:	f7ff fbc3 	bl	800cae0 <memp_malloc>
 800d35a:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d109      	bne.n	800d376 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d362:	f7ff ff7b 	bl	800d25c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d36c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d36e:	f000 faab 	bl	800d8c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	e0a7      	b.n	800d4c6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d378:	3303      	adds	r3, #3
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	f023 0303 	bic.w	r3, r3, #3
 800d380:	b29b      	uxth	r3, r3
 800d382:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d386:	b29a      	uxth	r2, r3
 800d388:	8b7b      	ldrh	r3, [r7, #26]
 800d38a:	4293      	cmp	r3, r2
 800d38c:	bf28      	it	cs
 800d38e:	4613      	movcs	r3, r2
 800d390:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d394:	3310      	adds	r3, #16
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	4413      	add	r3, r2
 800d39a:	3303      	adds	r3, #3
 800d39c:	f023 0303 	bic.w	r3, r3, #3
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	8a79      	ldrh	r1, [r7, #18]
 800d3a4:	8b7a      	ldrh	r2, [r7, #26]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9301      	str	r3, [sp, #4]
 800d3aa:	887b      	ldrh	r3, [r7, #2]
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	6978      	ldr	r0, [r7, #20]
 800d3b4:	f7ff ff7c 	bl	800d2b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	f003 0303 	and.w	r3, r3, #3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d006      	beq.n	800d3d2 <pbuf_alloc+0xce>
 800d3c4:	4b42      	ldr	r3, [pc, #264]	; (800d4d0 <pbuf_alloc+0x1cc>)
 800d3c6:	f240 1201 	movw	r2, #257	; 0x101
 800d3ca:	4942      	ldr	r1, [pc, #264]	; (800d4d4 <pbuf_alloc+0x1d0>)
 800d3cc:	4842      	ldr	r0, [pc, #264]	; (800d4d8 <pbuf_alloc+0x1d4>)
 800d3ce:	f007 ff1f 	bl	8015210 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d3d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3d4:	3303      	adds	r3, #3
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d3de:	d106      	bne.n	800d3ee <pbuf_alloc+0xea>
 800d3e0:	4b3b      	ldr	r3, [pc, #236]	; (800d4d0 <pbuf_alloc+0x1cc>)
 800d3e2:	f240 1203 	movw	r2, #259	; 0x103
 800d3e6:	493d      	ldr	r1, [pc, #244]	; (800d4dc <pbuf_alloc+0x1d8>)
 800d3e8:	483b      	ldr	r0, [pc, #236]	; (800d4d8 <pbuf_alloc+0x1d4>)
 800d3ea:	f007 ff11 	bl	8015210 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f8:	e002      	b.n	800d400 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	697a      	ldr	r2, [r7, #20]
 800d3fe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d404:	8b7a      	ldrh	r2, [r7, #26]
 800d406:	8a7b      	ldrh	r3, [r7, #18]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d410:	8b7b      	ldrh	r3, [r7, #26]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d19e      	bne.n	800d354 <pbuf_alloc+0x50>
      break;
 800d416:	e055      	b.n	800d4c4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d41a:	3303      	adds	r3, #3
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	f023 0303 	bic.w	r3, r3, #3
 800d422:	b29a      	uxth	r2, r3
 800d424:	88bb      	ldrh	r3, [r7, #4]
 800d426:	3303      	adds	r3, #3
 800d428:	b29b      	uxth	r3, r3
 800d42a:	f023 0303 	bic.w	r3, r3, #3
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4413      	add	r3, r2
 800d432:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d434:	8a3b      	ldrh	r3, [r7, #16]
 800d436:	3310      	adds	r3, #16
 800d438:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d43a:	8a3a      	ldrh	r2, [r7, #16]
 800d43c:	88bb      	ldrh	r3, [r7, #4]
 800d43e:	3303      	adds	r3, #3
 800d440:	f023 0303 	bic.w	r3, r3, #3
 800d444:	429a      	cmp	r2, r3
 800d446:	d306      	bcc.n	800d456 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d448:	89fa      	ldrh	r2, [r7, #14]
 800d44a:	88bb      	ldrh	r3, [r7, #4]
 800d44c:	3303      	adds	r3, #3
 800d44e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d452:	429a      	cmp	r2, r3
 800d454:	d201      	bcs.n	800d45a <pbuf_alloc+0x156>
        return NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	e035      	b.n	800d4c6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d45a:	89fb      	ldrh	r3, [r7, #14]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff f9bd 	bl	800c7dc <mem_malloc>
 800d462:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <pbuf_alloc+0x16a>
        return NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e02b      	b.n	800d4c6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d46e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d470:	3310      	adds	r3, #16
 800d472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d474:	4413      	add	r3, r2
 800d476:	3303      	adds	r3, #3
 800d478:	f023 0303 	bic.w	r3, r3, #3
 800d47c:	4618      	mov	r0, r3
 800d47e:	88b9      	ldrh	r1, [r7, #4]
 800d480:	88ba      	ldrh	r2, [r7, #4]
 800d482:	2300      	movs	r3, #0
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	887b      	ldrh	r3, [r7, #2]
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	460b      	mov	r3, r1
 800d48c:	4601      	mov	r1, r0
 800d48e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d490:	f7ff ff0e 	bl	800d2b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	f003 0303 	and.w	r3, r3, #3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d010      	beq.n	800d4c2 <pbuf_alloc+0x1be>
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <pbuf_alloc+0x1cc>)
 800d4a2:	f240 1223 	movw	r2, #291	; 0x123
 800d4a6:	490e      	ldr	r1, [pc, #56]	; (800d4e0 <pbuf_alloc+0x1dc>)
 800d4a8:	480b      	ldr	r0, [pc, #44]	; (800d4d8 <pbuf_alloc+0x1d4>)
 800d4aa:	f007 feb1 	bl	8015210 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d4ae:	e008      	b.n	800d4c2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d4b0:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <pbuf_alloc+0x1cc>)
 800d4b2:	f240 1227 	movw	r2, #295	; 0x127
 800d4b6:	490b      	ldr	r1, [pc, #44]	; (800d4e4 <pbuf_alloc+0x1e0>)
 800d4b8:	4807      	ldr	r0, [pc, #28]	; (800d4d8 <pbuf_alloc+0x1d4>)
 800d4ba:	f007 fea9 	bl	8015210 <iprintf>
      return NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e001      	b.n	800d4c6 <pbuf_alloc+0x1c2>
      break;
 800d4c2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3728      	adds	r7, #40	; 0x28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08017148 	.word	0x08017148
 800d4d4:	08017178 	.word	0x08017178
 800d4d8:	080171a8 	.word	0x080171a8
 800d4dc:	080171d0 	.word	0x080171d0
 800d4e0:	08017204 	.word	0x08017204
 800d4e4:	08017230 	.word	0x08017230

0800d4e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	807b      	strh	r3, [r7, #2]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d4f8:	883b      	ldrh	r3, [r7, #0]
 800d4fa:	2b41      	cmp	r3, #65	; 0x41
 800d4fc:	d009      	beq.n	800d512 <pbuf_alloc_reference+0x2a>
 800d4fe:	883b      	ldrh	r3, [r7, #0]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d006      	beq.n	800d512 <pbuf_alloc_reference+0x2a>
 800d504:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <pbuf_alloc_reference+0x5c>)
 800d506:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d50a:	490f      	ldr	r1, [pc, #60]	; (800d548 <pbuf_alloc_reference+0x60>)
 800d50c:	480f      	ldr	r0, [pc, #60]	; (800d54c <pbuf_alloc_reference+0x64>)
 800d50e:	f007 fe7f 	bl	8015210 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d512:	200c      	movs	r0, #12
 800d514:	f7ff fae4 	bl	800cae0 <memp_malloc>
 800d518:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d520:	2300      	movs	r3, #0
 800d522:	e00b      	b.n	800d53c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d524:	8879      	ldrh	r1, [r7, #2]
 800d526:	887a      	ldrh	r2, [r7, #2]
 800d528:	2300      	movs	r3, #0
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	883b      	ldrh	r3, [r7, #0]
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	460b      	mov	r3, r1
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f7ff febb 	bl	800d2b0 <pbuf_init_alloced_pbuf>
  return p;
 800d53a:	68fb      	ldr	r3, [r7, #12]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	08017148 	.word	0x08017148
 800d548:	0801724c 	.word	0x0801724c
 800d54c:	080171a8 	.word	0x080171a8

0800d550 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af02      	add	r7, sp, #8
 800d556:	607b      	str	r3, [r7, #4]
 800d558:	4603      	mov	r3, r0
 800d55a:	73fb      	strb	r3, [r7, #15]
 800d55c:	460b      	mov	r3, r1
 800d55e:	81bb      	strh	r3, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d568:	8a7b      	ldrh	r3, [r7, #18]
 800d56a:	3303      	adds	r3, #3
 800d56c:	f023 0203 	bic.w	r2, r3, #3
 800d570:	89bb      	ldrh	r3, [r7, #12]
 800d572:	441a      	add	r2, r3
 800d574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d576:	429a      	cmp	r2, r3
 800d578:	d901      	bls.n	800d57e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	e018      	b.n	800d5b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d007      	beq.n	800d594 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d584:	8a7b      	ldrh	r3, [r7, #18]
 800d586:	3303      	adds	r3, #3
 800d588:	f023 0303 	bic.w	r3, r3, #3
 800d58c:	6a3a      	ldr	r2, [r7, #32]
 800d58e:	4413      	add	r3, r2
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	e001      	b.n	800d598 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d594:	2300      	movs	r3, #0
 800d596:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	89b9      	ldrh	r1, [r7, #12]
 800d59c:	89ba      	ldrh	r2, [r7, #12]
 800d59e:	2302      	movs	r3, #2
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	897b      	ldrh	r3, [r7, #10]
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	6979      	ldr	r1, [r7, #20]
 800d5aa:	f7ff fe81 	bl	800d2b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d5ae:	687b      	ldr	r3, [r7, #4]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <pbuf_realloc+0x20>
 800d5ca:	4b3a      	ldr	r3, [pc, #232]	; (800d6b4 <pbuf_realloc+0xfc>)
 800d5cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d5d0:	4939      	ldr	r1, [pc, #228]	; (800d6b8 <pbuf_realloc+0x100>)
 800d5d2:	483a      	ldr	r0, [pc, #232]	; (800d6bc <pbuf_realloc+0x104>)
 800d5d4:	f007 fe1c 	bl	8015210 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	891b      	ldrh	r3, [r3, #8]
 800d5dc:	887a      	ldrh	r2, [r7, #2]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d264      	bcs.n	800d6ac <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	891a      	ldrh	r2, [r3, #8]
 800d5e6:	887b      	ldrh	r3, [r7, #2]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d5ec:	887b      	ldrh	r3, [r7, #2]
 800d5ee:	817b      	strh	r3, [r7, #10]
  q = p;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d5f4:	e018      	b.n	800d628 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	895b      	ldrh	r3, [r3, #10]
 800d5fa:	897a      	ldrh	r2, [r7, #10]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	891a      	ldrh	r2, [r3, #8]
 800d604:	893b      	ldrh	r3, [r7, #8]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <pbuf_realloc+0x70>
 800d61a:	4b26      	ldr	r3, [pc, #152]	; (800d6b4 <pbuf_realloc+0xfc>)
 800d61c:	f240 12af 	movw	r2, #431	; 0x1af
 800d620:	4927      	ldr	r1, [pc, #156]	; (800d6c0 <pbuf_realloc+0x108>)
 800d622:	4826      	ldr	r0, [pc, #152]	; (800d6bc <pbuf_realloc+0x104>)
 800d624:	f007 fdf4 	bl	8015210 <iprintf>
  while (rem_len > q->len) {
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	897a      	ldrh	r2, [r7, #10]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d8e1      	bhi.n	800d5f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	7b1b      	ldrb	r3, [r3, #12]
 800d636:	f003 030f 	and.w	r3, r3, #15
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d122      	bne.n	800d684 <pbuf_realloc+0xcc>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	895b      	ldrh	r3, [r3, #10]
 800d642:	897a      	ldrh	r2, [r7, #10]
 800d644:	429a      	cmp	r2, r3
 800d646:	d01d      	beq.n	800d684 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	7b5b      	ldrb	r3, [r3, #13]
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d117      	bne.n	800d684 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	461a      	mov	r2, r3
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	b29a      	uxth	r2, r3
 800d660:	897b      	ldrh	r3, [r7, #10]
 800d662:	4413      	add	r3, r2
 800d664:	b29b      	uxth	r3, r3
 800d666:	4619      	mov	r1, r3
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7fe ffad 	bl	800c5c8 <mem_trim>
 800d66e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <pbuf_realloc+0xcc>
 800d676:	4b0f      	ldr	r3, [pc, #60]	; (800d6b4 <pbuf_realloc+0xfc>)
 800d678:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d67c:	4911      	ldr	r1, [pc, #68]	; (800d6c4 <pbuf_realloc+0x10c>)
 800d67e:	480f      	ldr	r0, [pc, #60]	; (800d6bc <pbuf_realloc+0x104>)
 800d680:	f007 fdc6 	bl	8015210 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	897a      	ldrh	r2, [r7, #10]
 800d688:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	895a      	ldrh	r2, [r3, #10]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d004      	beq.n	800d6a4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f912 	bl	800d8c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	e000      	b.n	800d6ae <pbuf_realloc+0xf6>
    return;
 800d6ac:	bf00      	nop

}
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	08017148 	.word	0x08017148
 800d6b8:	08017260 	.word	0x08017260
 800d6bc:	080171a8 	.word	0x080171a8
 800d6c0:	08017278 	.word	0x08017278
 800d6c4:	08017290 	.word	0x08017290

0800d6c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <pbuf_add_header_impl+0x22>
 800d6dc:	4b2c      	ldr	r3, [pc, #176]	; (800d790 <pbuf_add_header_impl+0xc8>)
 800d6de:	f240 12df 	movw	r2, #479	; 0x1df
 800d6e2:	492c      	ldr	r1, [pc, #176]	; (800d794 <pbuf_add_header_impl+0xcc>)
 800d6e4:	482c      	ldr	r0, [pc, #176]	; (800d798 <pbuf_add_header_impl+0xd0>)
 800d6e6:	f007 fd93 	bl	8015210 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d003      	beq.n	800d6f8 <pbuf_add_header_impl+0x30>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f6:	d301      	bcc.n	800d6fc <pbuf_add_header_impl+0x34>
    return 1;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e044      	b.n	800d786 <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <pbuf_add_header_impl+0x3e>
    return 0;
 800d702:	2300      	movs	r3, #0
 800d704:	e03f      	b.n	800d786 <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	891a      	ldrh	r2, [r3, #8]
 800d70e:	8a7b      	ldrh	r3, [r7, #18]
 800d710:	4413      	add	r3, r2
 800d712:	b29b      	uxth	r3, r3
 800d714:	8a7a      	ldrh	r2, [r7, #18]
 800d716:	429a      	cmp	r2, r3
 800d718:	d901      	bls.n	800d71e <pbuf_add_header_impl+0x56>
    return 1;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e033      	b.n	800d786 <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	7b1b      	ldrb	r3, [r3, #12]
 800d722:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d724:	8a3b      	ldrh	r3, [r7, #16]
 800d726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00d      	beq.n	800d74a <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	425b      	negs	r3, r3
 800d736:	4413      	add	r3, r2
 800d738:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f103 0210 	add.w	r2, r3, #16
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	429a      	cmp	r2, r3
 800d744:	d90d      	bls.n	800d762 <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d746:	2301      	movs	r3, #1
 800d748:	e01d      	b.n	800d786 <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d74a:	79fb      	ldrb	r3, [r7, #7]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d006      	beq.n	800d75e <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	425b      	negs	r3, r3
 800d758:	4413      	add	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	e001      	b.n	800d762 <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	e011      	b.n	800d786 <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	697a      	ldr	r2, [r7, #20]
 800d766:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	895a      	ldrh	r2, [r3, #10]
 800d76c:	8a7b      	ldrh	r3, [r7, #18]
 800d76e:	4413      	add	r3, r2
 800d770:	b29a      	uxth	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	891a      	ldrh	r2, [r3, #8]
 800d77a:	8a7b      	ldrh	r3, [r7, #18]
 800d77c:	4413      	add	r3, r2
 800d77e:	b29a      	uxth	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	811a      	strh	r2, [r3, #8]


  return 0;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	08017148 	.word	0x08017148
 800d794:	080172ac 	.word	0x080172ac
 800d798:	080171a8 	.word	0x080171a8

0800d79c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff ff8c 	bl	800d6c8 <pbuf_add_header_impl>
 800d7b0:	4603      	mov	r3, r0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <pbuf_remove_header+0x1e>
 800d7cc:	4b20      	ldr	r3, [pc, #128]	; (800d850 <pbuf_remove_header+0x94>)
 800d7ce:	f240 224b 	movw	r2, #587	; 0x24b
 800d7d2:	4920      	ldr	r1, [pc, #128]	; (800d854 <pbuf_remove_header+0x98>)
 800d7d4:	4820      	ldr	r0, [pc, #128]	; (800d858 <pbuf_remove_header+0x9c>)
 800d7d6:	f007 fd1b 	bl	8015210 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <pbuf_remove_header+0x2c>
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e6:	d301      	bcc.n	800d7ec <pbuf_remove_header+0x30>
    return 1;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e02c      	b.n	800d846 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <pbuf_remove_header+0x3a>
    return 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e027      	b.n	800d846 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	895b      	ldrh	r3, [r3, #10]
 800d7fe:	89fa      	ldrh	r2, [r7, #14]
 800d800:	429a      	cmp	r2, r3
 800d802:	d908      	bls.n	800d816 <pbuf_remove_header+0x5a>
 800d804:	4b12      	ldr	r3, [pc, #72]	; (800d850 <pbuf_remove_header+0x94>)
 800d806:	f240 2255 	movw	r2, #597	; 0x255
 800d80a:	4914      	ldr	r1, [pc, #80]	; (800d85c <pbuf_remove_header+0xa0>)
 800d80c:	4812      	ldr	r0, [pc, #72]	; (800d858 <pbuf_remove_header+0x9c>)
 800d80e:	f007 fcff 	bl	8015210 <iprintf>
 800d812:	2301      	movs	r3, #1
 800d814:	e017      	b.n	800d846 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	441a      	add	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	895a      	ldrh	r2, [r3, #10]
 800d82c:	89fb      	ldrh	r3, [r7, #14]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	b29a      	uxth	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	891a      	ldrh	r2, [r3, #8]
 800d83a:	89fb      	ldrh	r3, [r7, #14]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	b29a      	uxth	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	08017148 	.word	0x08017148
 800d854:	080172ac 	.word	0x080172ac
 800d858:	080171a8 	.word	0x080171a8
 800d85c:	080172b8 	.word	0x080172b8

0800d860 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	807b      	strh	r3, [r7, #2]
 800d86c:	4613      	mov	r3, r2
 800d86e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da08      	bge.n	800d88a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d87c:	425b      	negs	r3, r3
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff ff9b 	bl	800d7bc <pbuf_remove_header>
 800d886:	4603      	mov	r3, r0
 800d888:	e007      	b.n	800d89a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d88a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d88e:	787a      	ldrb	r2, [r7, #1]
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ff18 	bl	800d6c8 <pbuf_add_header_impl>
 800d898:	4603      	mov	r3, r0
  }
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d8ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff ffd2 	bl	800d860 <pbuf_header_impl>
 800d8bc:	4603      	mov	r3, r0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <pbuf_free+0x22>
 800d8dc:	4b3b      	ldr	r3, [pc, #236]	; (800d9cc <pbuf_free+0x104>)
 800d8de:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d8e2:	493b      	ldr	r1, [pc, #236]	; (800d9d0 <pbuf_free+0x108>)
 800d8e4:	483b      	ldr	r0, [pc, #236]	; (800d9d4 <pbuf_free+0x10c>)
 800d8e6:	f007 fc93 	bl	8015210 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e069      	b.n	800d9c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d8f2:	e062      	b.n	800d9ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d8f4:	f007 fbfe 	bl	80150f4 <sys_arch_protect>
 800d8f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7b9b      	ldrb	r3, [r3, #14]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <pbuf_free+0x48>
 800d902:	4b32      	ldr	r3, [pc, #200]	; (800d9cc <pbuf_free+0x104>)
 800d904:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d908:	4933      	ldr	r1, [pc, #204]	; (800d9d8 <pbuf_free+0x110>)
 800d90a:	4832      	ldr	r0, [pc, #200]	; (800d9d4 <pbuf_free+0x10c>)
 800d90c:	f007 fc80 	bl	8015210 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7b9b      	ldrb	r3, [r3, #14]
 800d914:	3b01      	subs	r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	739a      	strb	r2, [r3, #14]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7b9b      	ldrb	r3, [r3, #14]
 800d920:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d922:	69b8      	ldr	r0, [r7, #24]
 800d924:	f007 fbf4 	bl	8015110 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d928:	7dfb      	ldrb	r3, [r7, #23]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d143      	bne.n	800d9b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	7b1b      	ldrb	r3, [r3, #12]
 800d938:	f003 030f 	and.w	r3, r3, #15
 800d93c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	7b5b      	ldrb	r3, [r3, #13]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d011      	beq.n	800d96e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d106      	bne.n	800d964 <pbuf_free+0x9c>
 800d956:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <pbuf_free+0x104>)
 800d958:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d95c:	491f      	ldr	r1, [pc, #124]	; (800d9dc <pbuf_free+0x114>)
 800d95e:	481d      	ldr	r0, [pc, #116]	; (800d9d4 <pbuf_free+0x10c>)
 800d960:	f007 fc56 	bl	8015210 <iprintf>
        pc->custom_free_function(p);
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	4798      	blx	r3
 800d96c:	e01d      	b.n	800d9aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	2b02      	cmp	r3, #2
 800d972:	d104      	bne.n	800d97e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	200d      	movs	r0, #13
 800d978:	f7ff f904 	bl	800cb84 <memp_free>
 800d97c:	e015      	b.n	800d9aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d104      	bne.n	800d98e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	200c      	movs	r0, #12
 800d988:	f7ff f8fc 	bl	800cb84 <memp_free>
 800d98c:	e00d      	b.n	800d9aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d103      	bne.n	800d99c <pbuf_free+0xd4>
          mem_free(p);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7fe fd87 	bl	800c4a8 <mem_free>
 800d99a:	e006      	b.n	800d9aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d99c:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <pbuf_free+0x104>)
 800d99e:	f240 320f 	movw	r2, #783	; 0x30f
 800d9a2:	490f      	ldr	r1, [pc, #60]	; (800d9e0 <pbuf_free+0x118>)
 800d9a4:	480b      	ldr	r0, [pc, #44]	; (800d9d4 <pbuf_free+0x10c>)
 800d9a6:	f007 fc33 	bl	8015210 <iprintf>
        }
      }
      count++;
 800d9aa:	7ffb      	ldrb	r3, [r7, #31]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	607b      	str	r3, [r7, #4]
 800d9b4:	e001      	b.n	800d9ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d199      	bne.n	800d8f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d9c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3720      	adds	r7, #32
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08017148 	.word	0x08017148
 800d9d0:	080172ac 	.word	0x080172ac
 800d9d4:	080171a8 	.word	0x080171a8
 800d9d8:	080172d8 	.word	0x080172d8
 800d9dc:	080172f0 	.word	0x080172f0
 800d9e0:	08017314 	.word	0x08017314

0800d9e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d9f0:	e005      	b.n	800d9fe <pbuf_clen+0x1a>
    ++len;
 800d9f2:	89fb      	ldrh	r3, [r7, #14]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1f6      	bne.n	800d9f2 <pbuf_clen+0xe>
  }
  return len;
 800da04:	89fb      	ldrh	r3, [r7, #14]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d016      	beq.n	800da50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da22:	f007 fb67 	bl	80150f4 <sys_arch_protect>
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7b9b      	ldrb	r3, [r3, #14]
 800da2c:	3301      	adds	r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	739a      	strb	r2, [r3, #14]
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f007 fb6b 	bl	8015110 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7b9b      	ldrb	r3, [r3, #14]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <pbuf_ref+0x3c>
 800da42:	4b05      	ldr	r3, [pc, #20]	; (800da58 <pbuf_ref+0x44>)
 800da44:	f240 3242 	movw	r2, #834	; 0x342
 800da48:	4904      	ldr	r1, [pc, #16]	; (800da5c <pbuf_ref+0x48>)
 800da4a:	4805      	ldr	r0, [pc, #20]	; (800da60 <pbuf_ref+0x4c>)
 800da4c:	f007 fbe0 	bl	8015210 <iprintf>
  }
}
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	08017148 	.word	0x08017148
 800da5c:	08017328 	.word	0x08017328
 800da60:	080171a8 	.word	0x080171a8

0800da64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <pbuf_cat+0x16>
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d107      	bne.n	800da8a <pbuf_cat+0x26>
 800da7a:	4b20      	ldr	r3, [pc, #128]	; (800dafc <pbuf_cat+0x98>)
 800da7c:	f240 325a 	movw	r2, #858	; 0x35a
 800da80:	491f      	ldr	r1, [pc, #124]	; (800db00 <pbuf_cat+0x9c>)
 800da82:	4820      	ldr	r0, [pc, #128]	; (800db04 <pbuf_cat+0xa0>)
 800da84:	f007 fbc4 	bl	8015210 <iprintf>
 800da88:	e034      	b.n	800daf4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	e00a      	b.n	800daa6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	891a      	ldrh	r2, [r3, #8]
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	891b      	ldrh	r3, [r3, #8]
 800da98:	4413      	add	r3, r2
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1f0      	bne.n	800da90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	891a      	ldrh	r2, [r3, #8]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	895b      	ldrh	r3, [r3, #10]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d006      	beq.n	800dac8 <pbuf_cat+0x64>
 800daba:	4b10      	ldr	r3, [pc, #64]	; (800dafc <pbuf_cat+0x98>)
 800dabc:	f240 3262 	movw	r2, #866	; 0x362
 800dac0:	4911      	ldr	r1, [pc, #68]	; (800db08 <pbuf_cat+0xa4>)
 800dac2:	4810      	ldr	r0, [pc, #64]	; (800db04 <pbuf_cat+0xa0>)
 800dac4:	f007 fba4 	bl	8015210 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d006      	beq.n	800dade <pbuf_cat+0x7a>
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <pbuf_cat+0x98>)
 800dad2:	f240 3263 	movw	r2, #867	; 0x363
 800dad6:	490d      	ldr	r1, [pc, #52]	; (800db0c <pbuf_cat+0xa8>)
 800dad8:	480a      	ldr	r0, [pc, #40]	; (800db04 <pbuf_cat+0xa0>)
 800dada:	f007 fb99 	bl	8015210 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	891a      	ldrh	r2, [r3, #8]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	891b      	ldrh	r3, [r3, #8]
 800dae6:	4413      	add	r3, r2
 800dae8:	b29a      	uxth	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	08017148 	.word	0x08017148
 800db00:	0801733c 	.word	0x0801733c
 800db04:	080171a8 	.word	0x080171a8
 800db08:	08017374 	.word	0x08017374
 800db0c:	080173a4 	.word	0x080173a4

0800db10 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff ffa1 	bl	800da64 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800db22:	6838      	ldr	r0, [r7, #0]
 800db24:	f7ff ff76 	bl	800da14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800db3a:	2300      	movs	r3, #0
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	2300      	movs	r3, #0
 800db40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d008      	beq.n	800db5a <pbuf_copy+0x2a>
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d005      	beq.n	800db5a <pbuf_copy+0x2a>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	891a      	ldrh	r2, [r3, #8]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	891b      	ldrh	r3, [r3, #8]
 800db56:	429a      	cmp	r2, r3
 800db58:	d209      	bcs.n	800db6e <pbuf_copy+0x3e>
 800db5a:	4b57      	ldr	r3, [pc, #348]	; (800dcb8 <pbuf_copy+0x188>)
 800db5c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800db60:	4956      	ldr	r1, [pc, #344]	; (800dcbc <pbuf_copy+0x18c>)
 800db62:	4857      	ldr	r0, [pc, #348]	; (800dcc0 <pbuf_copy+0x190>)
 800db64:	f007 fb54 	bl	8015210 <iprintf>
 800db68:	f06f 030f 	mvn.w	r3, #15
 800db6c:	e09f      	b.n	800dcae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	895b      	ldrh	r3, [r3, #10]
 800db72:	461a      	mov	r2, r3
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	1ad2      	subs	r2, r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	895b      	ldrh	r3, [r3, #10]
 800db7c:	4619      	mov	r1, r3
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	1acb      	subs	r3, r1, r3
 800db82:	429a      	cmp	r2, r3
 800db84:	d306      	bcc.n	800db94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	895b      	ldrh	r3, [r3, #10]
 800db8a:	461a      	mov	r2, r3
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	e005      	b.n	800dba0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	895b      	ldrh	r3, [r3, #10]
 800db98:	461a      	mov	r2, r3
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	18d0      	adds	r0, r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	4413      	add	r3, r2
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f007 fb19 	bl	80151ea <memcpy>
    offset_to += len;
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	895b      	ldrh	r3, [r3, #10]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d206      	bcs.n	800dbe2 <pbuf_copy+0xb2>
 800dbd4:	4b38      	ldr	r3, [pc, #224]	; (800dcb8 <pbuf_copy+0x188>)
 800dbd6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dbda:	493a      	ldr	r1, [pc, #232]	; (800dcc4 <pbuf_copy+0x194>)
 800dbdc:	4838      	ldr	r0, [pc, #224]	; (800dcc0 <pbuf_copy+0x190>)
 800dbde:	f007 fb17 	bl	8015210 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	895b      	ldrh	r3, [r3, #10]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d206      	bcs.n	800dbfc <pbuf_copy+0xcc>
 800dbee:	4b32      	ldr	r3, [pc, #200]	; (800dcb8 <pbuf_copy+0x188>)
 800dbf0:	f240 32da 	movw	r2, #986	; 0x3da
 800dbf4:	4934      	ldr	r1, [pc, #208]	; (800dcc8 <pbuf_copy+0x198>)
 800dbf6:	4832      	ldr	r0, [pc, #200]	; (800dcc0 <pbuf_copy+0x190>)
 800dbf8:	f007 fb0a 	bl	8015210 <iprintf>
    if (offset_from >= p_from->len) {
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	461a      	mov	r2, r3
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d804      	bhi.n	800dc12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	895b      	ldrh	r3, [r3, #10]
 800dc16:	461a      	mov	r2, r3
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d114      	bne.n	800dc48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10c      	bne.n	800dc48 <pbuf_copy+0x118>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <pbuf_copy+0x118>
 800dc34:	4b20      	ldr	r3, [pc, #128]	; (800dcb8 <pbuf_copy+0x188>)
 800dc36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dc3a:	4924      	ldr	r1, [pc, #144]	; (800dccc <pbuf_copy+0x19c>)
 800dc3c:	4820      	ldr	r0, [pc, #128]	; (800dcc0 <pbuf_copy+0x190>)
 800dc3e:	f007 fae7 	bl	8015210 <iprintf>
 800dc42:	f06f 030f 	mvn.w	r3, #15
 800dc46:	e032      	b.n	800dcae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d013      	beq.n	800dc76 <pbuf_copy+0x146>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	895a      	ldrh	r2, [r3, #10]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	891b      	ldrh	r3, [r3, #8]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d10d      	bne.n	800dc76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d009      	beq.n	800dc76 <pbuf_copy+0x146>
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <pbuf_copy+0x188>)
 800dc64:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800dc68:	4919      	ldr	r1, [pc, #100]	; (800dcd0 <pbuf_copy+0x1a0>)
 800dc6a:	4815      	ldr	r0, [pc, #84]	; (800dcc0 <pbuf_copy+0x190>)
 800dc6c:	f007 fad0 	bl	8015210 <iprintf>
 800dc70:	f06f 0305 	mvn.w	r3, #5
 800dc74:	e01b      	b.n	800dcae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d013      	beq.n	800dca4 <pbuf_copy+0x174>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	895a      	ldrh	r2, [r3, #10]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	891b      	ldrh	r3, [r3, #8]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d10d      	bne.n	800dca4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <pbuf_copy+0x174>
 800dc90:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <pbuf_copy+0x188>)
 800dc92:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800dc96:	490e      	ldr	r1, [pc, #56]	; (800dcd0 <pbuf_copy+0x1a0>)
 800dc98:	4809      	ldr	r0, [pc, #36]	; (800dcc0 <pbuf_copy+0x190>)
 800dc9a:	f007 fab9 	bl	8015210 <iprintf>
 800dc9e:	f06f 0305 	mvn.w	r3, #5
 800dca2:	e004      	b.n	800dcae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f47f af61 	bne.w	800db6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3718      	adds	r7, #24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	08017148 	.word	0x08017148
 800dcbc:	080173f0 	.word	0x080173f0
 800dcc0:	080171a8 	.word	0x080171a8
 800dcc4:	08017420 	.word	0x08017420
 800dcc8:	08017438 	.word	0x08017438
 800dccc:	08017454 	.word	0x08017454
 800dcd0:	08017464 	.word	0x08017464

0800dcd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4611      	mov	r1, r2
 800dce0:	461a      	mov	r2, r3
 800dce2:	460b      	mov	r3, r1
 800dce4:	80fb      	strh	r3, [r7, #6]
 800dce6:	4613      	mov	r3, r2
 800dce8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d108      	bne.n	800dd0a <pbuf_copy_partial+0x36>
 800dcf8:	4b2b      	ldr	r3, [pc, #172]	; (800dda8 <pbuf_copy_partial+0xd4>)
 800dcfa:	f240 420a 	movw	r2, #1034	; 0x40a
 800dcfe:	492b      	ldr	r1, [pc, #172]	; (800ddac <pbuf_copy_partial+0xd8>)
 800dd00:	482b      	ldr	r0, [pc, #172]	; (800ddb0 <pbuf_copy_partial+0xdc>)
 800dd02:	f007 fa85 	bl	8015210 <iprintf>
 800dd06:	2300      	movs	r3, #0
 800dd08:	e04a      	b.n	800dda0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d108      	bne.n	800dd22 <pbuf_copy_partial+0x4e>
 800dd10:	4b25      	ldr	r3, [pc, #148]	; (800dda8 <pbuf_copy_partial+0xd4>)
 800dd12:	f240 420b 	movw	r2, #1035	; 0x40b
 800dd16:	4927      	ldr	r1, [pc, #156]	; (800ddb4 <pbuf_copy_partial+0xe0>)
 800dd18:	4825      	ldr	r0, [pc, #148]	; (800ddb0 <pbuf_copy_partial+0xdc>)
 800dd1a:	f007 fa79 	bl	8015210 <iprintf>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e03e      	b.n	800dda0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	61fb      	str	r3, [r7, #28]
 800dd26:	e034      	b.n	800dd92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dd28:	88bb      	ldrh	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <pbuf_copy_partial+0x70>
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	895b      	ldrh	r3, [r3, #10]
 800dd32:	88ba      	ldrh	r2, [r7, #4]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d305      	bcc.n	800dd44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	895b      	ldrh	r3, [r3, #10]
 800dd3c:	88ba      	ldrh	r2, [r7, #4]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	80bb      	strh	r3, [r7, #4]
 800dd42:	e023      	b.n	800dd8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	895a      	ldrh	r2, [r3, #10]
 800dd48:	88bb      	ldrh	r3, [r7, #4]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dd4e:	8b3a      	ldrh	r2, [r7, #24]
 800dd50:	88fb      	ldrh	r3, [r7, #6]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d901      	bls.n	800dd5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dd56:	88fb      	ldrh	r3, [r7, #6]
 800dd58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dd5a:	8b7b      	ldrh	r3, [r7, #26]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	18d0      	adds	r0, r2, r3
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	88bb      	ldrh	r3, [r7, #4]
 800dd66:	4413      	add	r3, r2
 800dd68:	8b3a      	ldrh	r2, [r7, #24]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	f007 fa3d 	bl	80151ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dd70:	8afa      	ldrh	r2, [r7, #22]
 800dd72:	8b3b      	ldrh	r3, [r7, #24]
 800dd74:	4413      	add	r3, r2
 800dd76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dd78:	8b7a      	ldrh	r2, [r7, #26]
 800dd7a:	8b3b      	ldrh	r3, [r7, #24]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dd80:	88fa      	ldrh	r2, [r7, #6]
 800dd82:	8b3b      	ldrh	r3, [r7, #24]
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	61fb      	str	r3, [r7, #28]
 800dd92:	88fb      	ldrh	r3, [r7, #6]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <pbuf_copy_partial+0xca>
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1c4      	bne.n	800dd28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dd9e:	8afb      	ldrh	r3, [r7, #22]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3720      	adds	r7, #32
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	08017148 	.word	0x08017148
 800ddac:	08017490 	.word	0x08017490
 800ddb0:	080171a8 	.word	0x080171a8
 800ddb4:	080174b0 	.word	0x080174b0

0800ddb8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800ddc6:	897b      	ldrh	r3, [r7, #10]
 800ddc8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800ddce:	e007      	b.n	800dde0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	895b      	ldrh	r3, [r3, #10]
 800ddd4:	8afa      	ldrh	r2, [r7, #22]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d004      	beq.n	800ddf0 <pbuf_skip_const+0x38>
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	895b      	ldrh	r3, [r3, #10]
 800ddea:	8afa      	ldrh	r2, [r7, #22]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d2ef      	bcs.n	800ddd0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	8afa      	ldrh	r2, [r7, #22]
 800ddfa:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800ddfc:	693b      	ldr	r3, [r7, #16]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	371c      	adds	r7, #28
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b086      	sub	sp, #24
 800de0e:	af00      	add	r7, sp, #0
 800de10:	60f8      	str	r0, [r7, #12]
 800de12:	460b      	mov	r3, r1
 800de14:	607a      	str	r2, [r7, #4]
 800de16:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800de18:	897b      	ldrh	r3, [r7, #10]
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	4619      	mov	r1, r3
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7ff ffca 	bl	800ddb8 <pbuf_skip_const>
 800de24:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800de26:	697b      	ldr	r3, [r7, #20]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	4613      	mov	r3, r2
 800de3c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800de3e:	88fb      	ldrh	r3, [r7, #6]
 800de40:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d109      	bne.n	800de60 <pbuf_take+0x30>
 800de4c:	4b3a      	ldr	r3, [pc, #232]	; (800df38 <pbuf_take+0x108>)
 800de4e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800de52:	493a      	ldr	r1, [pc, #232]	; (800df3c <pbuf_take+0x10c>)
 800de54:	483a      	ldr	r0, [pc, #232]	; (800df40 <pbuf_take+0x110>)
 800de56:	f007 f9db 	bl	8015210 <iprintf>
 800de5a:	f06f 030f 	mvn.w	r3, #15
 800de5e:	e067      	b.n	800df30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d109      	bne.n	800de7a <pbuf_take+0x4a>
 800de66:	4b34      	ldr	r3, [pc, #208]	; (800df38 <pbuf_take+0x108>)
 800de68:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800de6c:	4935      	ldr	r1, [pc, #212]	; (800df44 <pbuf_take+0x114>)
 800de6e:	4834      	ldr	r0, [pc, #208]	; (800df40 <pbuf_take+0x110>)
 800de70:	f007 f9ce 	bl	8015210 <iprintf>
 800de74:	f06f 030f 	mvn.w	r3, #15
 800de78:	e05a      	b.n	800df30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	891b      	ldrh	r3, [r3, #8]
 800de7e:	88fa      	ldrh	r2, [r7, #6]
 800de80:	429a      	cmp	r2, r3
 800de82:	d909      	bls.n	800de98 <pbuf_take+0x68>
 800de84:	4b2c      	ldr	r3, [pc, #176]	; (800df38 <pbuf_take+0x108>)
 800de86:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800de8a:	492f      	ldr	r1, [pc, #188]	; (800df48 <pbuf_take+0x118>)
 800de8c:	482c      	ldr	r0, [pc, #176]	; (800df40 <pbuf_take+0x110>)
 800de8e:	f007 f9bf 	bl	8015210 <iprintf>
 800de92:	f04f 33ff 	mov.w	r3, #4294967295
 800de96:	e04b      	b.n	800df30 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d007      	beq.n	800deae <pbuf_take+0x7e>
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d004      	beq.n	800deae <pbuf_take+0x7e>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	891b      	ldrh	r3, [r3, #8]
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d902      	bls.n	800deb4 <pbuf_take+0x84>
    return ERR_ARG;
 800deae:	f06f 030f 	mvn.w	r3, #15
 800deb2:	e03d      	b.n	800df30 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	61fb      	str	r3, [r7, #28]
 800deb8:	e028      	b.n	800df0c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d106      	bne.n	800dece <pbuf_take+0x9e>
 800dec0:	4b1d      	ldr	r3, [pc, #116]	; (800df38 <pbuf_take+0x108>)
 800dec2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dec6:	4921      	ldr	r1, [pc, #132]	; (800df4c <pbuf_take+0x11c>)
 800dec8:	481d      	ldr	r0, [pc, #116]	; (800df40 <pbuf_take+0x110>)
 800deca:	f007 f9a1 	bl	8015210 <iprintf>
    buf_copy_len = total_copy_len;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	895b      	ldrh	r3, [r3, #10]
 800ded6:	461a      	mov	r2, r3
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d202      	bcs.n	800dee4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	895b      	ldrh	r3, [r3, #10]
 800dee2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	6858      	ldr	r0, [r3, #4]
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	4413      	add	r3, r2
 800deee:	69ba      	ldr	r2, [r7, #24]
 800def0:	4619      	mov	r1, r3
 800def2:	f007 f97a 	bl	80151ea <memcpy>
    total_copy_len -= buf_copy_len;
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	4413      	add	r3, r2
 800df04:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	61fb      	str	r3, [r7, #28]
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1d3      	bne.n	800deba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d103      	bne.n	800df20 <pbuf_take+0xf0>
 800df18:	88fa      	ldrh	r2, [r7, #6]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d006      	beq.n	800df2e <pbuf_take+0xfe>
 800df20:	4b05      	ldr	r3, [pc, #20]	; (800df38 <pbuf_take+0x108>)
 800df22:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800df26:	490a      	ldr	r1, [pc, #40]	; (800df50 <pbuf_take+0x120>)
 800df28:	4805      	ldr	r0, [pc, #20]	; (800df40 <pbuf_take+0x110>)
 800df2a:	f007 f971 	bl	8015210 <iprintf>
  return ERR_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3720      	adds	r7, #32
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	08017148 	.word	0x08017148
 800df3c:	08017520 	.word	0x08017520
 800df40:	080171a8 	.word	0x080171a8
 800df44:	08017538 	.word	0x08017538
 800df48:	08017554 	.word	0x08017554
 800df4c:	08017574 	.word	0x08017574
 800df50:	0801758c 	.word	0x0801758c

0800df54 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	4611      	mov	r1, r2
 800df60:	461a      	mov	r2, r3
 800df62:	460b      	mov	r3, r1
 800df64:	80fb      	strh	r3, [r7, #6]
 800df66:	4613      	mov	r3, r2
 800df68:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800df6a:	f107 0210 	add.w	r2, r7, #16
 800df6e:	88bb      	ldrh	r3, [r7, #4]
 800df70:	4619      	mov	r1, r3
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7ff ff49 	bl	800de0a <pbuf_skip>
 800df78:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d047      	beq.n	800e010 <pbuf_take_at+0xbc>
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	891b      	ldrh	r3, [r3, #8]
 800df84:	461a      	mov	r2, r3
 800df86:	8a3b      	ldrh	r3, [r7, #16]
 800df88:	4619      	mov	r1, r3
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	440b      	add	r3, r1
 800df8e:	429a      	cmp	r2, r3
 800df90:	db3e      	blt.n	800e010 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800df92:	88fb      	ldrh	r3, [r7, #6]
 800df94:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	895a      	ldrh	r2, [r3, #10]
 800df9e:	8a3b      	ldrh	r3, [r7, #16]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d806      	bhi.n	800dfb2 <pbuf_take_at+0x5e>
 800dfa4:	4b1d      	ldr	r3, [pc, #116]	; (800e01c <pbuf_take_at+0xc8>)
 800dfa6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dfaa:	491d      	ldr	r1, [pc, #116]	; (800e020 <pbuf_take_at+0xcc>)
 800dfac:	481d      	ldr	r0, [pc, #116]	; (800e024 <pbuf_take_at+0xd0>)
 800dfae:	f007 f92f 	bl	8015210 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	895b      	ldrh	r3, [r3, #10]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	8a3b      	ldrh	r3, [r7, #16]
 800dfba:	1ad2      	subs	r2, r2, r3
 800dfbc:	88fb      	ldrh	r3, [r7, #6]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	da05      	bge.n	800dfce <pbuf_take_at+0x7a>
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	895a      	ldrh	r2, [r3, #10]
 800dfc6:	8a3b      	ldrh	r3, [r7, #16]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	e000      	b.n	800dfd0 <pbuf_take_at+0x7c>
 800dfce:	88fb      	ldrh	r3, [r7, #6]
 800dfd0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	8a3a      	ldrh	r2, [r7, #16]
 800dfd8:	4413      	add	r3, r2
 800dfda:	8a7a      	ldrh	r2, [r7, #18]
 800dfdc:	68b9      	ldr	r1, [r7, #8]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f007 f903 	bl	80151ea <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800dfe4:	8b7a      	ldrh	r2, [r7, #26]
 800dfe6:	8a7b      	ldrh	r3, [r7, #18]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800dfec:	8a7b      	ldrh	r3, [r7, #18]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	4413      	add	r3, r2
 800dff2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800dff4:	8b7b      	ldrh	r3, [r7, #26]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d008      	beq.n	800e00c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	8b7a      	ldrh	r2, [r7, #26]
 800e000:	6979      	ldr	r1, [r7, #20]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff ff14 	bl	800de30 <pbuf_take>
 800e008:	4603      	mov	r3, r0
 800e00a:	e003      	b.n	800e014 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800e00c:	2300      	movs	r3, #0
 800e00e:	e001      	b.n	800e014 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800e010:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e014:	4618      	mov	r0, r3
 800e016:	3720      	adds	r7, #32
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	08017148 	.word	0x08017148
 800e020:	080175a4 	.word	0x080175a4
 800e024:	080171a8 	.word	0x080171a8

0800e028 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	603a      	str	r2, [r7, #0]
 800e032:	71fb      	strb	r3, [r7, #7]
 800e034:	460b      	mov	r3, r1
 800e036:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	8919      	ldrh	r1, [r3, #8]
 800e03c:	88ba      	ldrh	r2, [r7, #4]
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff f95f 	bl	800d304 <pbuf_alloc>
 800e046:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <pbuf_clone+0x2a>
    return NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	e011      	b.n	800e076 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7ff fd6b 	bl	800db30 <pbuf_copy>
 800e05a:	4603      	mov	r3, r0
 800e05c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e05e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <pbuf_clone+0x4c>
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <pbuf_clone+0x58>)
 800e068:	f240 5224 	movw	r2, #1316	; 0x524
 800e06c:	4905      	ldr	r1, [pc, #20]	; (800e084 <pbuf_clone+0x5c>)
 800e06e:	4806      	ldr	r0, [pc, #24]	; (800e088 <pbuf_clone+0x60>)
 800e070:	f007 f8ce 	bl	8015210 <iprintf>
  return q;
 800e074:	68fb      	ldr	r3, [r7, #12]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	08017148 	.word	0x08017148
 800e084:	080175bc 	.word	0x080175bc
 800e088:	080171a8 	.word	0x080171a8

0800e08c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	807b      	strh	r3, [r7, #2]
 800e098:	4613      	mov	r3, r2
 800e09a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800e09c:	f107 020a 	add.w	r2, r7, #10
 800e0a0:	887b      	ldrh	r3, [r7, #2]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff feb0 	bl	800de0a <pbuf_skip>
 800e0aa:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <pbuf_put_at+0x3c>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	895a      	ldrh	r2, [r3, #10]
 800e0b6:	897b      	ldrh	r3, [r7, #10]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d905      	bls.n	800e0c8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	897a      	ldrh	r2, [r7, #10]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	787a      	ldrb	r2, [r7, #1]
 800e0c6:	701a      	strb	r2, [r3, #0]
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e0d4:	f007 f8b4 	bl	8015240 <rand>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	4b01      	ldr	r3, [pc, #4]	; (800e0f0 <tcp_init+0x20>)
 800e0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0ec:	bf00      	nop
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20000010 	.word	0x20000010

0800e0f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	7d1b      	ldrb	r3, [r3, #20]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d105      	bne.n	800e110 <tcp_free+0x1c>
 800e104:	4b06      	ldr	r3, [pc, #24]	; (800e120 <tcp_free+0x2c>)
 800e106:	22d4      	movs	r2, #212	; 0xd4
 800e108:	4906      	ldr	r1, [pc, #24]	; (800e124 <tcp_free+0x30>)
 800e10a:	4807      	ldr	r0, [pc, #28]	; (800e128 <tcp_free+0x34>)
 800e10c:	f007 f880 	bl	8015210 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e110:	6879      	ldr	r1, [r7, #4]
 800e112:	2001      	movs	r0, #1
 800e114:	f7fe fd36 	bl	800cb84 <memp_free>
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	08017648 	.word	0x08017648
 800e124:	08017678 	.word	0x08017678
 800e128:	0801768c 	.word	0x0801768c

0800e12c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7d1b      	ldrb	r3, [r3, #20]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d105      	bne.n	800e148 <tcp_free_listen+0x1c>
 800e13c:	4b06      	ldr	r3, [pc, #24]	; (800e158 <tcp_free_listen+0x2c>)
 800e13e:	22df      	movs	r2, #223	; 0xdf
 800e140:	4906      	ldr	r1, [pc, #24]	; (800e15c <tcp_free_listen+0x30>)
 800e142:	4807      	ldr	r0, [pc, #28]	; (800e160 <tcp_free_listen+0x34>)
 800e144:	f007 f864 	bl	8015210 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	2002      	movs	r0, #2
 800e14c:	f7fe fd1a 	bl	800cb84 <memp_free>
}
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	08017648 	.word	0x08017648
 800e15c:	080176b4 	.word	0x080176b4
 800e160:	0801768c 	.word	0x0801768c

0800e164 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e168:	f001 f854 	bl	800f214 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <tcp_tmr+0x28>)
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	3301      	adds	r3, #1
 800e172:	b2da      	uxtb	r2, r3
 800e174:	4b05      	ldr	r3, [pc, #20]	; (800e18c <tcp_tmr+0x28>)
 800e176:	701a      	strb	r2, [r3, #0]
 800e178:	4b04      	ldr	r3, [pc, #16]	; (800e18c <tcp_tmr+0x28>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e184:	f000 fd08 	bl	800eb98 <tcp_slowtmr>
  }
}
 800e188:	bf00      	nop
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	20007261 	.word	0x20007261

0800e190 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d105      	bne.n	800e1ac <tcp_remove_listener+0x1c>
 800e1a0:	4b0d      	ldr	r3, [pc, #52]	; (800e1d8 <tcp_remove_listener+0x48>)
 800e1a2:	22ff      	movs	r2, #255	; 0xff
 800e1a4:	490d      	ldr	r1, [pc, #52]	; (800e1dc <tcp_remove_listener+0x4c>)
 800e1a6:	480e      	ldr	r0, [pc, #56]	; (800e1e0 <tcp_remove_listener+0x50>)
 800e1a8:	f007 f832 	bl	8015210 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60fb      	str	r3, [r7, #12]
 800e1b0:	e00a      	b.n	800e1c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d102      	bne.n	800e1c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1f1      	bne.n	800e1b2 <tcp_remove_listener+0x22>
    }
  }
}
 800e1ce:	bf00      	nop
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	08017648 	.word	0x08017648
 800e1dc:	080176d0 	.word	0x080176d0
 800e1e0:	0801768c 	.word	0x0801768c

0800e1e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <tcp_listen_closed+0x1c>
 800e1f2:	4b14      	ldr	r3, [pc, #80]	; (800e244 <tcp_listen_closed+0x60>)
 800e1f4:	f240 1211 	movw	r2, #273	; 0x111
 800e1f8:	4913      	ldr	r1, [pc, #76]	; (800e248 <tcp_listen_closed+0x64>)
 800e1fa:	4814      	ldr	r0, [pc, #80]	; (800e24c <tcp_listen_closed+0x68>)
 800e1fc:	f007 f808 	bl	8015210 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7d1b      	ldrb	r3, [r3, #20]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d006      	beq.n	800e216 <tcp_listen_closed+0x32>
 800e208:	4b0e      	ldr	r3, [pc, #56]	; (800e244 <tcp_listen_closed+0x60>)
 800e20a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e20e:	4910      	ldr	r1, [pc, #64]	; (800e250 <tcp_listen_closed+0x6c>)
 800e210:	480e      	ldr	r0, [pc, #56]	; (800e24c <tcp_listen_closed+0x68>)
 800e212:	f006 fffd 	bl	8015210 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e216:	2301      	movs	r3, #1
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e00b      	b.n	800e234 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e21c:	4a0d      	ldr	r2, [pc, #52]	; (800e254 <tcp_listen_closed+0x70>)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7ff ffb1 	bl	800e190 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3301      	adds	r3, #1
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b03      	cmp	r3, #3
 800e238:	d9f0      	bls.n	800e21c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e23a:	bf00      	nop
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	08017648 	.word	0x08017648
 800e248:	080176f8 	.word	0x080176f8
 800e24c:	0801768c 	.word	0x0801768c
 800e250:	08017704 	.word	0x08017704
 800e254:	08019e44 	.word	0x08019e44

0800e258 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <tcp_close_shutdown+0x20>
 800e26a:	4b61      	ldr	r3, [pc, #388]	; (800e3f0 <tcp_close_shutdown+0x198>)
 800e26c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e270:	4960      	ldr	r1, [pc, #384]	; (800e3f4 <tcp_close_shutdown+0x19c>)
 800e272:	4861      	ldr	r0, [pc, #388]	; (800e3f8 <tcp_close_shutdown+0x1a0>)
 800e274:	f006 ffcc 	bl	8015210 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e278:	78fb      	ldrb	r3, [r7, #3]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d066      	beq.n	800e34c <tcp_close_shutdown+0xf4>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	7d1b      	ldrb	r3, [r3, #20]
 800e282:	2b04      	cmp	r3, #4
 800e284:	d003      	beq.n	800e28e <tcp_close_shutdown+0x36>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	7d1b      	ldrb	r3, [r3, #20]
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	d15e      	bne.n	800e34c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e292:	2b00      	cmp	r3, #0
 800e294:	d104      	bne.n	800e2a0 <tcp_close_shutdown+0x48>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e29a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e29e:	d055      	beq.n	800e34c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	8b5b      	ldrh	r3, [r3, #26]
 800e2a4:	f003 0310 	and.w	r3, r3, #16
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d106      	bne.n	800e2ba <tcp_close_shutdown+0x62>
 800e2ac:	4b50      	ldr	r3, [pc, #320]	; (800e3f0 <tcp_close_shutdown+0x198>)
 800e2ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e2b2:	4952      	ldr	r1, [pc, #328]	; (800e3fc <tcp_close_shutdown+0x1a4>)
 800e2b4:	4850      	ldr	r0, [pc, #320]	; (800e3f8 <tcp_close_shutdown+0x1a0>)
 800e2b6:	f006 ffab 	bl	8015210 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e2c2:	687d      	ldr	r5, [r7, #4]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	8ad2      	ldrh	r2, [r2, #22]
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	8b09      	ldrh	r1, [r1, #24]
 800e2d0:	9102      	str	r1, [sp, #8]
 800e2d2:	9201      	str	r2, [sp, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4601      	mov	r1, r0
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f005 fd9f 	bl	8013e20 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 fb62 	bl	800f9ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2e8:	4b45      	ldr	r3, [pc, #276]	; (800e400 <tcp_close_shutdown+0x1a8>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d105      	bne.n	800e2fe <tcp_close_shutdown+0xa6>
 800e2f2:	4b43      	ldr	r3, [pc, #268]	; (800e400 <tcp_close_shutdown+0x1a8>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	4a41      	ldr	r2, [pc, #260]	; (800e400 <tcp_close_shutdown+0x1a8>)
 800e2fa:	6013      	str	r3, [r2, #0]
 800e2fc:	e013      	b.n	800e326 <tcp_close_shutdown+0xce>
 800e2fe:	4b40      	ldr	r3, [pc, #256]	; (800e400 <tcp_close_shutdown+0x1a8>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e00c      	b.n	800e320 <tcp_close_shutdown+0xc8>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d104      	bne.n	800e31a <tcp_close_shutdown+0xc2>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68da      	ldr	r2, [r3, #12]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	60da      	str	r2, [r3, #12]
 800e318:	e005      	b.n	800e326 <tcp_close_shutdown+0xce>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	60fb      	str	r3, [r7, #12]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1ef      	bne.n	800e306 <tcp_close_shutdown+0xae>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	60da      	str	r2, [r3, #12]
 800e32c:	4b35      	ldr	r3, [pc, #212]	; (800e404 <tcp_close_shutdown+0x1ac>)
 800e32e:	2201      	movs	r2, #1
 800e330:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e332:	4b35      	ldr	r3, [pc, #212]	; (800e408 <tcp_close_shutdown+0x1b0>)
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d102      	bne.n	800e342 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e33c:	f003 fff4 	bl	8012328 <tcp_trigger_input_pcb_close>
 800e340:	e002      	b.n	800e348 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff fed6 	bl	800e0f4 <tcp_free>
      }
      return ERR_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	e04d      	b.n	800e3e8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7d1b      	ldrb	r3, [r3, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d02d      	beq.n	800e3b0 <tcp_close_shutdown+0x158>
 800e354:	2b02      	cmp	r3, #2
 800e356:	d036      	beq.n	800e3c6 <tcp_close_shutdown+0x16e>
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d13f      	bne.n	800e3dc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8adb      	ldrh	r3, [r3, #22]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d021      	beq.n	800e3a8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e364:	4b29      	ldr	r3, [pc, #164]	; (800e40c <tcp_close_shutdown+0x1b4>)
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d105      	bne.n	800e37a <tcp_close_shutdown+0x122>
 800e36e:	4b27      	ldr	r3, [pc, #156]	; (800e40c <tcp_close_shutdown+0x1b4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	4a25      	ldr	r2, [pc, #148]	; (800e40c <tcp_close_shutdown+0x1b4>)
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	e013      	b.n	800e3a2 <tcp_close_shutdown+0x14a>
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <tcp_close_shutdown+0x1b4>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	60bb      	str	r3, [r7, #8]
 800e380:	e00c      	b.n	800e39c <tcp_close_shutdown+0x144>
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	68da      	ldr	r2, [r3, #12]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d104      	bne.n	800e396 <tcp_close_shutdown+0x13e>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68da      	ldr	r2, [r3, #12]
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	60da      	str	r2, [r3, #12]
 800e394:	e005      	b.n	800e3a2 <tcp_close_shutdown+0x14a>
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	60bb      	str	r3, [r7, #8]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1ef      	bne.n	800e382 <tcp_close_shutdown+0x12a>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff fea3 	bl	800e0f4 <tcp_free>
      break;
 800e3ae:	e01a      	b.n	800e3e6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ff17 	bl	800e1e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	4815      	ldr	r0, [pc, #84]	; (800e410 <tcp_close_shutdown+0x1b8>)
 800e3ba:	f001 fb47 	bl	800fa4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff feb4 	bl	800e12c <tcp_free_listen>
      break;
 800e3c4:	e00f      	b.n	800e3e6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	480d      	ldr	r0, [pc, #52]	; (800e400 <tcp_close_shutdown+0x1a8>)
 800e3ca:	f001 fb3f 	bl	800fa4c <tcp_pcb_remove>
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <tcp_close_shutdown+0x1ac>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7ff fe8d 	bl	800e0f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e3da:	e004      	b.n	800e3e6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f819 	bl	800e414 <tcp_close_shutdown_fin>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	e000      	b.n	800e3e8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800e3f0:	08017648 	.word	0x08017648
 800e3f4:	0801771c 	.word	0x0801771c
 800e3f8:	0801768c 	.word	0x0801768c
 800e3fc:	0801773c 	.word	0x0801773c
 800e400:	2000aef0 	.word	0x2000aef0
 800e404:	2000aeec 	.word	0x2000aeec
 800e408:	2000af04 	.word	0x2000af04
 800e40c:	2000aefc 	.word	0x2000aefc
 800e410:	2000aef8 	.word	0x2000aef8

0800e414 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <tcp_close_shutdown_fin+0x1c>
 800e422:	4b2c      	ldr	r3, [pc, #176]	; (800e4d4 <tcp_close_shutdown_fin+0xc0>)
 800e424:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e428:	492b      	ldr	r1, [pc, #172]	; (800e4d8 <tcp_close_shutdown_fin+0xc4>)
 800e42a:	482c      	ldr	r0, [pc, #176]	; (800e4dc <tcp_close_shutdown_fin+0xc8>)
 800e42c:	f006 fef0 	bl	8015210 <iprintf>

  switch (pcb->state) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	7d1b      	ldrb	r3, [r3, #20]
 800e434:	2b04      	cmp	r3, #4
 800e436:	d010      	beq.n	800e45a <tcp_close_shutdown_fin+0x46>
 800e438:	2b07      	cmp	r3, #7
 800e43a:	d01b      	beq.n	800e474 <tcp_close_shutdown_fin+0x60>
 800e43c:	2b03      	cmp	r3, #3
 800e43e:	d126      	bne.n	800e48e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f004 fde1 	bl	8013008 <tcp_send_fin>
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d11f      	bne.n	800e492 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2205      	movs	r2, #5
 800e456:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e458:	e01b      	b.n	800e492 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f004 fdd4 	bl	8013008 <tcp_send_fin>
 800e460:	4603      	mov	r3, r0
 800e462:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d114      	bne.n	800e496 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2205      	movs	r2, #5
 800e470:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e472:	e010      	b.n	800e496 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f004 fdc7 	bl	8013008 <tcp_send_fin>
 800e47a:	4603      	mov	r3, r0
 800e47c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d109      	bne.n	800e49a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2209      	movs	r2, #9
 800e48a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e48c:	e005      	b.n	800e49a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	e01c      	b.n	800e4cc <tcp_close_shutdown_fin+0xb8>
      break;
 800e492:	bf00      	nop
 800e494:	e002      	b.n	800e49c <tcp_close_shutdown_fin+0x88>
      break;
 800e496:	bf00      	nop
 800e498:	e000      	b.n	800e49c <tcp_close_shutdown_fin+0x88>
      break;
 800e49a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d103      	bne.n	800e4ac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f004 feef 	bl	8013288 <tcp_output>
 800e4aa:	e00d      	b.n	800e4c8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d108      	bne.n	800e4c8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	8b5b      	ldrh	r3, [r3, #26]
 800e4ba:	f043 0308 	orr.w	r3, r3, #8
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e001      	b.n	800e4cc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	08017648 	.word	0x08017648
 800e4d8:	080176f8 	.word	0x080176f8
 800e4dc:	0801768c 	.word	0x0801768c

0800e4e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d109      	bne.n	800e502 <tcp_close+0x22>
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <tcp_close+0x4c>)
 800e4f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e4f4:	490e      	ldr	r1, [pc, #56]	; (800e530 <tcp_close+0x50>)
 800e4f6:	480f      	ldr	r0, [pc, #60]	; (800e534 <tcp_close+0x54>)
 800e4f8:	f006 fe8a 	bl	8015210 <iprintf>
 800e4fc:	f06f 030f 	mvn.w	r3, #15
 800e500:	e00f      	b.n	800e522 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	7d1b      	ldrb	r3, [r3, #20]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d006      	beq.n	800e518 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8b5b      	ldrh	r3, [r3, #26]
 800e50e:	f043 0310 	orr.w	r3, r3, #16
 800e512:	b29a      	uxth	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e518:	2101      	movs	r1, #1
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7ff fe9c 	bl	800e258 <tcp_close_shutdown>
 800e520:	4603      	mov	r3, r0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	08017648 	.word	0x08017648
 800e530:	08017758 	.word	0x08017758
 800e534:	0801768c 	.word	0x0801768c

0800e538 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b08e      	sub	sp, #56	; 0x38
 800e53c:	af04      	add	r7, sp, #16
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d107      	bne.n	800e558 <tcp_abandon+0x20>
 800e548:	4b52      	ldr	r3, [pc, #328]	; (800e694 <tcp_abandon+0x15c>)
 800e54a:	f240 223d 	movw	r2, #573	; 0x23d
 800e54e:	4952      	ldr	r1, [pc, #328]	; (800e698 <tcp_abandon+0x160>)
 800e550:	4852      	ldr	r0, [pc, #328]	; (800e69c <tcp_abandon+0x164>)
 800e552:	f006 fe5d 	bl	8015210 <iprintf>
 800e556:	e099      	b.n	800e68c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	7d1b      	ldrb	r3, [r3, #20]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d106      	bne.n	800e56e <tcp_abandon+0x36>
 800e560:	4b4c      	ldr	r3, [pc, #304]	; (800e694 <tcp_abandon+0x15c>)
 800e562:	f240 2241 	movw	r2, #577	; 0x241
 800e566:	494e      	ldr	r1, [pc, #312]	; (800e6a0 <tcp_abandon+0x168>)
 800e568:	484c      	ldr	r0, [pc, #304]	; (800e69c <tcp_abandon+0x164>)
 800e56a:	f006 fe51 	bl	8015210 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7d1b      	ldrb	r3, [r3, #20]
 800e572:	2b0a      	cmp	r3, #10
 800e574:	d107      	bne.n	800e586 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	484a      	ldr	r0, [pc, #296]	; (800e6a4 <tcp_abandon+0x16c>)
 800e57a:	f001 fa67 	bl	800fa4c <tcp_pcb_remove>
    tcp_free(pcb);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fdb8 	bl	800e0f4 <tcp_free>
 800e584:	e082      	b.n	800e68c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e592:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e598:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7d1b      	ldrb	r3, [r3, #20]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d126      	bne.n	800e5fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	8adb      	ldrh	r3, [r3, #22]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d02e      	beq.n	800e616 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5b8:	4b3b      	ldr	r3, [pc, #236]	; (800e6a8 <tcp_abandon+0x170>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d105      	bne.n	800e5ce <tcp_abandon+0x96>
 800e5c2:	4b39      	ldr	r3, [pc, #228]	; (800e6a8 <tcp_abandon+0x170>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	4a37      	ldr	r2, [pc, #220]	; (800e6a8 <tcp_abandon+0x170>)
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	e013      	b.n	800e5f6 <tcp_abandon+0xbe>
 800e5ce:	4b36      	ldr	r3, [pc, #216]	; (800e6a8 <tcp_abandon+0x170>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	61fb      	str	r3, [r7, #28]
 800e5d4:	e00c      	b.n	800e5f0 <tcp_abandon+0xb8>
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	68da      	ldr	r2, [r3, #12]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d104      	bne.n	800e5ea <tcp_abandon+0xb2>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	68da      	ldr	r2, [r3, #12]
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	60da      	str	r2, [r3, #12]
 800e5e8:	e005      	b.n	800e5f6 <tcp_abandon+0xbe>
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	61fb      	str	r3, [r7, #28]
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1ef      	bne.n	800e5d6 <tcp_abandon+0x9e>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	60da      	str	r2, [r3, #12]
 800e5fc:	e00b      	b.n	800e616 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	8adb      	ldrh	r3, [r3, #22]
 800e606:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	4828      	ldr	r0, [pc, #160]	; (800e6ac <tcp_abandon+0x174>)
 800e60c:	f001 fa1e 	bl	800fa4c <tcp_pcb_remove>
 800e610:	4b27      	ldr	r3, [pc, #156]	; (800e6b0 <tcp_abandon+0x178>)
 800e612:	2201      	movs	r2, #1
 800e614:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d004      	beq.n	800e628 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fed6 	bl	800f3d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e634:	4618      	mov	r0, r3
 800e636:	f000 fecd 	bl	800f3d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e646:	4618      	mov	r0, r3
 800e648:	f000 fec4 	bl	800f3d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00e      	beq.n	800e670 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e652:	6879      	ldr	r1, [r7, #4]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	3304      	adds	r3, #4
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	8b12      	ldrh	r2, [r2, #24]
 800e65c:	9202      	str	r2, [sp, #8]
 800e65e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e660:	9201      	str	r2, [sp, #4]
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	460b      	mov	r3, r1
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	69b9      	ldr	r1, [r7, #24]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f005 fbd8 	bl	8013e20 <tcp_rst>
    }
    last_state = pcb->state;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7d1b      	ldrb	r3, [r3, #20]
 800e674:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fd3c 	bl	800e0f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <tcp_abandon+0x154>
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	f06f 010c 	mvn.w	r1, #12
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	4798      	blx	r3
  }
}
 800e68c:	3728      	adds	r7, #40	; 0x28
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	08017648 	.word	0x08017648
 800e698:	0801778c 	.word	0x0801778c
 800e69c:	0801768c 	.word	0x0801768c
 800e6a0:	080177a8 	.word	0x080177a8
 800e6a4:	2000af00 	.word	0x2000af00
 800e6a8:	2000aefc 	.word	0x2000aefc
 800e6ac:	2000aef0 	.word	0x2000aef0
 800e6b0:	2000aeec 	.word	0x2000aeec

0800e6b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e6bc:	2101      	movs	r1, #1
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff ff3a 	bl	800e538 <tcp_abandon>
}
 800e6c4:	bf00      	nop
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b088      	sub	sp, #32
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e6da:	2304      	movs	r3, #4
 800e6dc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e6e4:	4b3e      	ldr	r3, [pc, #248]	; (800e7e0 <tcp_bind+0x114>)
 800e6e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d109      	bne.n	800e702 <tcp_bind+0x36>
 800e6ee:	4b3d      	ldr	r3, [pc, #244]	; (800e7e4 <tcp_bind+0x118>)
 800e6f0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e6f4:	493c      	ldr	r1, [pc, #240]	; (800e7e8 <tcp_bind+0x11c>)
 800e6f6:	483d      	ldr	r0, [pc, #244]	; (800e7ec <tcp_bind+0x120>)
 800e6f8:	f006 fd8a 	bl	8015210 <iprintf>
 800e6fc:	f06f 030f 	mvn.w	r3, #15
 800e700:	e06a      	b.n	800e7d8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	7d1b      	ldrb	r3, [r3, #20]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d009      	beq.n	800e71e <tcp_bind+0x52>
 800e70a:	4b36      	ldr	r3, [pc, #216]	; (800e7e4 <tcp_bind+0x118>)
 800e70c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e710:	4937      	ldr	r1, [pc, #220]	; (800e7f0 <tcp_bind+0x124>)
 800e712:	4836      	ldr	r0, [pc, #216]	; (800e7ec <tcp_bind+0x120>)
 800e714:	f006 fd7c 	bl	8015210 <iprintf>
 800e718:	f06f 0305 	mvn.w	r3, #5
 800e71c:	e05c      	b.n	800e7d8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d109      	bne.n	800e738 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e724:	f000 f9f2 	bl	800eb0c <tcp_new_port>
 800e728:	4603      	mov	r3, r0
 800e72a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d135      	bne.n	800e79e <tcp_bind+0xd2>
      return ERR_BUF;
 800e732:	f06f 0301 	mvn.w	r3, #1
 800e736:	e04f      	b.n	800e7d8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e738:	2300      	movs	r3, #0
 800e73a:	61fb      	str	r3, [r7, #28]
 800e73c:	e02b      	b.n	800e796 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e73e:	4a2d      	ldr	r2, [pc, #180]	; (800e7f4 <tcp_bind+0x128>)
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	61bb      	str	r3, [r7, #24]
 800e74a:	e01e      	b.n	800e78a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	8adb      	ldrh	r3, [r3, #22]
 800e750:	88fa      	ldrh	r2, [r7, #6]
 800e752:	429a      	cmp	r2, r3
 800e754:	d116      	bne.n	800e784 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e756:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d010      	beq.n	800e77e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00c      	beq.n	800e77e <tcp_bind+0xb2>
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d009      	beq.n	800e77e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d005      	beq.n	800e77e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d102      	bne.n	800e784 <tcp_bind+0xb8>
              return ERR_USE;
 800e77e:	f06f 0307 	mvn.w	r3, #7
 800e782:	e029      	b.n	800e7d8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	61bb      	str	r3, [r7, #24]
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1dd      	bne.n	800e74c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	3301      	adds	r3, #1
 800e794:	61fb      	str	r3, [r7, #28]
 800e796:	69fa      	ldr	r2, [r7, #28]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	dbcf      	blt.n	800e73e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00c      	beq.n	800e7be <tcp_bind+0xf2>
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d008      	beq.n	800e7be <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d002      	beq.n	800e7b8 <tcp_bind+0xec>
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	e000      	b.n	800e7ba <tcp_bind+0xee>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	88fa      	ldrh	r2, [r7, #6]
 800e7c2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e7c4:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <tcp_bind+0x12c>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	60da      	str	r2, [r3, #12]
 800e7cc:	4a0a      	ldr	r2, [pc, #40]	; (800e7f8 <tcp_bind+0x12c>)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6013      	str	r3, [r2, #0]
 800e7d2:	f005 fce9 	bl	80141a8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3720      	adds	r7, #32
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	08019d48 	.word	0x08019d48
 800e7e4:	08017648 	.word	0x08017648
 800e7e8:	080177dc 	.word	0x080177dc
 800e7ec:	0801768c 	.word	0x0801768c
 800e7f0:	080177f4 	.word	0x080177f4
 800e7f4:	08019e44 	.word	0x08019e44
 800e7f8:	2000aefc 	.word	0x2000aefc

0800e7fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d106      	bne.n	800e81e <tcp_accept_null+0x22>
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <tcp_accept_null+0x34>)
 800e812:	f240 320f 	movw	r2, #783	; 0x30f
 800e816:	4907      	ldr	r1, [pc, #28]	; (800e834 <tcp_accept_null+0x38>)
 800e818:	4807      	ldr	r0, [pc, #28]	; (800e838 <tcp_accept_null+0x3c>)
 800e81a:	f006 fcf9 	bl	8015210 <iprintf>

  tcp_abort(pcb);
 800e81e:	68b8      	ldr	r0, [r7, #8]
 800e820:	f7ff ff48 	bl	800e6b4 <tcp_abort>

  return ERR_ABRT;
 800e824:	f06f 030c 	mvn.w	r3, #12
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	08017648 	.word	0x08017648
 800e834:	0801781c 	.word	0x0801781c
 800e838:	0801768c 	.word	0x0801768c

0800e83c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e848:	78fb      	ldrb	r3, [r7, #3]
 800e84a:	2200      	movs	r2, #0
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f806 	bl	800e860 <tcp_listen_with_backlog_and_err>
 800e854:	4603      	mov	r3, r0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	460b      	mov	r3, r1
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e86e:	2300      	movs	r3, #0
 800e870:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d109      	bne.n	800e88c <tcp_listen_with_backlog_and_err+0x2c>
 800e878:	4b47      	ldr	r3, [pc, #284]	; (800e998 <tcp_listen_with_backlog_and_err+0x138>)
 800e87a:	f240 3259 	movw	r2, #857	; 0x359
 800e87e:	4947      	ldr	r1, [pc, #284]	; (800e99c <tcp_listen_with_backlog_and_err+0x13c>)
 800e880:	4847      	ldr	r0, [pc, #284]	; (800e9a0 <tcp_listen_with_backlog_and_err+0x140>)
 800e882:	f006 fcc5 	bl	8015210 <iprintf>
 800e886:	23f0      	movs	r3, #240	; 0xf0
 800e888:	76fb      	strb	r3, [r7, #27]
 800e88a:	e079      	b.n	800e980 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	7d1b      	ldrb	r3, [r3, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d009      	beq.n	800e8a8 <tcp_listen_with_backlog_and_err+0x48>
 800e894:	4b40      	ldr	r3, [pc, #256]	; (800e998 <tcp_listen_with_backlog_and_err+0x138>)
 800e896:	f240 325a 	movw	r2, #858	; 0x35a
 800e89a:	4942      	ldr	r1, [pc, #264]	; (800e9a4 <tcp_listen_with_backlog_and_err+0x144>)
 800e89c:	4840      	ldr	r0, [pc, #256]	; (800e9a0 <tcp_listen_with_backlog_and_err+0x140>)
 800e89e:	f006 fcb7 	bl	8015210 <iprintf>
 800e8a2:	23f1      	movs	r3, #241	; 0xf1
 800e8a4:	76fb      	strb	r3, [r7, #27]
 800e8a6:	e06b      	b.n	800e980 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	7d1b      	ldrb	r3, [r3, #20]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d104      	bne.n	800e8ba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e8b4:	23f7      	movs	r3, #247	; 0xf7
 800e8b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e8b8:	e062      	b.n	800e980 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e8ba:	2002      	movs	r0, #2
 800e8bc:	f7fe f910 	bl	800cae0 <memp_malloc>
 800e8c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e8c8:	23ff      	movs	r3, #255	; 0xff
 800e8ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e8cc:	e058      	b.n	800e980 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	691a      	ldr	r2, [r3, #16]
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	8ada      	ldrh	r2, [r3, #22]
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	7d5a      	ldrb	r2, [r3, #21]
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	7a5a      	ldrb	r2, [r3, #9]
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	7ada      	ldrb	r2, [r3, #11]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	7a9a      	ldrb	r2, [r3, #10]
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	8adb      	ldrh	r3, [r3, #22]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d021      	beq.n	800e95e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e91a:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <tcp_listen_with_backlog_and_err+0x148>)
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	429a      	cmp	r2, r3
 800e922:	d105      	bne.n	800e930 <tcp_listen_with_backlog_and_err+0xd0>
 800e924:	4b20      	ldr	r3, [pc, #128]	; (800e9a8 <tcp_listen_with_backlog_and_err+0x148>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	4a1f      	ldr	r2, [pc, #124]	; (800e9a8 <tcp_listen_with_backlog_and_err+0x148>)
 800e92c:	6013      	str	r3, [r2, #0]
 800e92e:	e013      	b.n	800e958 <tcp_listen_with_backlog_and_err+0xf8>
 800e930:	4b1d      	ldr	r3, [pc, #116]	; (800e9a8 <tcp_listen_with_backlog_and_err+0x148>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	617b      	str	r3, [r7, #20]
 800e936:	e00c      	b.n	800e952 <tcp_listen_with_backlog_and_err+0xf2>
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d104      	bne.n	800e94c <tcp_listen_with_backlog_and_err+0xec>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	60da      	str	r2, [r3, #12]
 800e94a:	e005      	b.n	800e958 <tcp_listen_with_backlog_and_err+0xf8>
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	617b      	str	r3, [r7, #20]
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1ef      	bne.n	800e938 <tcp_listen_with_backlog_and_err+0xd8>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7ff fbc8 	bl	800e0f4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <tcp_listen_with_backlog_and_err+0x14c>)
 800e968:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e96a:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <tcp_listen_with_backlog_and_err+0x150>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	60da      	str	r2, [r3, #12]
 800e972:	4a0f      	ldr	r2, [pc, #60]	; (800e9b0 <tcp_listen_with_backlog_and_err+0x150>)
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	6013      	str	r3, [r2, #0]
 800e978:	f005 fc16 	bl	80141a8 <tcp_timer_needed>
  res = ERR_OK;
 800e97c:	2300      	movs	r3, #0
 800e97e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7efa      	ldrb	r2, [r7, #27]
 800e98a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e98c:	69fb      	ldr	r3, [r7, #28]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3720      	adds	r7, #32
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08017648 	.word	0x08017648
 800e99c:	0801783c 	.word	0x0801783c
 800e9a0:	0801768c 	.word	0x0801768c
 800e9a4:	0801786c 	.word	0x0801786c
 800e9a8:	2000aefc 	.word	0x2000aefc
 800e9ac:	0800e7fd 	.word	0x0800e7fd
 800e9b0:	2000aef8 	.word	0x2000aef8

0800e9b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d106      	bne.n	800e9d0 <tcp_update_rcv_ann_wnd+0x1c>
 800e9c2:	4b26      	ldr	r3, [pc, #152]	; (800ea5c <tcp_update_rcv_ann_wnd+0xa8>)
 800e9c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e9c8:	4925      	ldr	r1, [pc, #148]	; (800ea60 <tcp_update_rcv_ann_wnd+0xac>)
 800e9ca:	4826      	ldr	r0, [pc, #152]	; (800ea64 <tcp_update_rcv_ann_wnd+0xb0>)
 800e9cc:	f006 fc20 	bl	8015210 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e9d8:	4413      	add	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e9e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e9e8:	d802      	bhi.n	800e9f0 <tcp_update_rcv_ann_wnd+0x3c>
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e9ee:	e001      	b.n	800e9f4 <tcp_update_rcv_ann_wnd+0x40>
 800e9f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e9f4:	4413      	add	r3, r2
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	db08      	blt.n	800ea10 <tcp_update_rcv_ann_wnd+0x5c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	e020      	b.n	800ea52 <tcp_update_rcv_ann_wnd+0x9e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	dd03      	ble.n	800ea26 <tcp_update_rcv_ann_wnd+0x72>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea24:	e014      	b.n	800ea50 <tcp_update_rcv_ann_wnd+0x9c>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea38:	d306      	bcc.n	800ea48 <tcp_update_rcv_ann_wnd+0x94>
 800ea3a:	4b08      	ldr	r3, [pc, #32]	; (800ea5c <tcp_update_rcv_ann_wnd+0xa8>)
 800ea3c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ea40:	4909      	ldr	r1, [pc, #36]	; (800ea68 <tcp_update_rcv_ann_wnd+0xb4>)
 800ea42:	4808      	ldr	r0, [pc, #32]	; (800ea64 <tcp_update_rcv_ann_wnd+0xb0>)
 800ea44:	f006 fbe4 	bl	8015210 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ea50:	2300      	movs	r3, #0
  }
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08017648 	.word	0x08017648
 800ea60:	080178a4 	.word	0x080178a4
 800ea64:	0801768c 	.word	0x0801768c
 800ea68:	080178c8 	.word	0x080178c8

0800ea6c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d107      	bne.n	800ea8e <tcp_recved+0x22>
 800ea7e:	4b1f      	ldr	r3, [pc, #124]	; (800eafc <tcp_recved+0x90>)
 800ea80:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ea84:	491e      	ldr	r1, [pc, #120]	; (800eb00 <tcp_recved+0x94>)
 800ea86:	481f      	ldr	r0, [pc, #124]	; (800eb04 <tcp_recved+0x98>)
 800ea88:	f006 fbc2 	bl	8015210 <iprintf>
 800ea8c:	e032      	b.n	800eaf4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	7d1b      	ldrb	r3, [r3, #20]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d106      	bne.n	800eaa4 <tcp_recved+0x38>
 800ea96:	4b19      	ldr	r3, [pc, #100]	; (800eafc <tcp_recved+0x90>)
 800ea98:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ea9c:	491a      	ldr	r1, [pc, #104]	; (800eb08 <tcp_recved+0x9c>)
 800ea9e:	4819      	ldr	r0, [pc, #100]	; (800eb04 <tcp_recved+0x98>)
 800eaa0:	f006 fbb6 	bl	8015210 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaa8:	887b      	ldrh	r3, [r7, #2]
 800eaaa:	4413      	add	r3, r2
 800eaac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eaae:	89fb      	ldrh	r3, [r7, #14]
 800eab0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eab4:	d804      	bhi.n	800eac0 <tcp_recved+0x54>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaba:	89fa      	ldrh	r2, [r7, #14]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d204      	bcs.n	800eaca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eac6:	851a      	strh	r2, [r3, #40]	; 0x28
 800eac8:	e002      	b.n	800ead0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	89fa      	ldrh	r2, [r7, #14]
 800eace:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff ff6f 	bl	800e9b4 <tcp_update_rcv_ann_wnd>
 800ead6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eade:	d309      	bcc.n	800eaf4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	8b5b      	ldrh	r3, [r3, #26]
 800eae4:	f043 0302 	orr.w	r3, r3, #2
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f004 fbca 	bl	8013288 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	08017648 	.word	0x08017648
 800eb00:	080178e4 	.word	0x080178e4
 800eb04:	0801768c 	.word	0x0801768c
 800eb08:	080178fc 	.word	0x080178fc

0800eb0c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb16:	4b1e      	ldr	r3, [pc, #120]	; (800eb90 <tcp_new_port+0x84>)
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	4b1c      	ldr	r3, [pc, #112]	; (800eb90 <tcp_new_port+0x84>)
 800eb20:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb22:	4b1b      	ldr	r3, [pc, #108]	; (800eb90 <tcp_new_port+0x84>)
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d103      	bne.n	800eb36 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eb2e:	4b18      	ldr	r3, [pc, #96]	; (800eb90 <tcp_new_port+0x84>)
 800eb30:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb36:	2300      	movs	r3, #0
 800eb38:	71fb      	strb	r3, [r7, #7]
 800eb3a:	e01e      	b.n	800eb7a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	4a15      	ldr	r2, [pc, #84]	; (800eb94 <tcp_new_port+0x88>)
 800eb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	603b      	str	r3, [r7, #0]
 800eb48:	e011      	b.n	800eb6e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	8ada      	ldrh	r2, [r3, #22]
 800eb4e:	4b10      	ldr	r3, [pc, #64]	; (800eb90 <tcp_new_port+0x84>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d108      	bne.n	800eb68 <tcp_new_port+0x5c>
        n++;
 800eb56:	88bb      	ldrh	r3, [r7, #4]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800eb5c:	88bb      	ldrh	r3, [r7, #4]
 800eb5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb62:	d3d8      	bcc.n	800eb16 <tcp_new_port+0xa>
          return 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	e00d      	b.n	800eb84 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1ea      	bne.n	800eb4a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	3301      	adds	r3, #1
 800eb78:	71fb      	strb	r3, [r7, #7]
 800eb7a:	79fb      	ldrb	r3, [r7, #7]
 800eb7c:	2b03      	cmp	r3, #3
 800eb7e:	d9dd      	bls.n	800eb3c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800eb80:	4b03      	ldr	r3, [pc, #12]	; (800eb90 <tcp_new_port+0x84>)
 800eb82:	881b      	ldrh	r3, [r3, #0]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	20000010 	.word	0x20000010
 800eb94:	08019e44 	.word	0x08019e44

0800eb98 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eb98:	b5b0      	push	{r4, r5, r7, lr}
 800eb9a:	b090      	sub	sp, #64	; 0x40
 800eb9c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800eba4:	4b94      	ldr	r3, [pc, #592]	; (800edf8 <tcp_slowtmr+0x260>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	4a93      	ldr	r2, [pc, #588]	; (800edf8 <tcp_slowtmr+0x260>)
 800ebac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ebae:	4b93      	ldr	r3, [pc, #588]	; (800edfc <tcp_slowtmr+0x264>)
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	b2da      	uxtb	r2, r3
 800ebb6:	4b91      	ldr	r3, [pc, #580]	; (800edfc <tcp_slowtmr+0x264>)
 800ebb8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ebbe:	4b90      	ldr	r3, [pc, #576]	; (800ee00 <tcp_slowtmr+0x268>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ebc4:	e29d      	b.n	800f102 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	7d1b      	ldrb	r3, [r3, #20]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d106      	bne.n	800ebdc <tcp_slowtmr+0x44>
 800ebce:	4b8d      	ldr	r3, [pc, #564]	; (800ee04 <tcp_slowtmr+0x26c>)
 800ebd0:	f240 42be 	movw	r2, #1214	; 0x4be
 800ebd4:	498c      	ldr	r1, [pc, #560]	; (800ee08 <tcp_slowtmr+0x270>)
 800ebd6:	488d      	ldr	r0, [pc, #564]	; (800ee0c <tcp_slowtmr+0x274>)
 800ebd8:	f006 fb1a 	bl	8015210 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	7d1b      	ldrb	r3, [r3, #20]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d106      	bne.n	800ebf2 <tcp_slowtmr+0x5a>
 800ebe4:	4b87      	ldr	r3, [pc, #540]	; (800ee04 <tcp_slowtmr+0x26c>)
 800ebe6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ebea:	4989      	ldr	r1, [pc, #548]	; (800ee10 <tcp_slowtmr+0x278>)
 800ebec:	4887      	ldr	r0, [pc, #540]	; (800ee0c <tcp_slowtmr+0x274>)
 800ebee:	f006 fb0f 	bl	8015210 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	7d1b      	ldrb	r3, [r3, #20]
 800ebf6:	2b0a      	cmp	r3, #10
 800ebf8:	d106      	bne.n	800ec08 <tcp_slowtmr+0x70>
 800ebfa:	4b82      	ldr	r3, [pc, #520]	; (800ee04 <tcp_slowtmr+0x26c>)
 800ebfc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ec00:	4984      	ldr	r1, [pc, #528]	; (800ee14 <tcp_slowtmr+0x27c>)
 800ec02:	4882      	ldr	r0, [pc, #520]	; (800ee0c <tcp_slowtmr+0x274>)
 800ec04:	f006 fb04 	bl	8015210 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	7f9a      	ldrb	r2, [r3, #30]
 800ec0c:	4b7b      	ldr	r3, [pc, #492]	; (800edfc <tcp_slowtmr+0x264>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d105      	bne.n	800ec20 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ec1e:	e270      	b.n	800f102 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ec20:	4b76      	ldr	r3, [pc, #472]	; (800edfc <tcp_slowtmr+0x264>)
 800ec22:	781a      	ldrb	r2, [r3, #0]
 800ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec26:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	7d1b      	ldrb	r3, [r3, #20]
 800ec38:	2b02      	cmp	r3, #2
 800ec3a:	d10a      	bne.n	800ec52 <tcp_slowtmr+0xba>
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	d905      	bls.n	800ec52 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ec46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec50:	e11e      	b.n	800ee90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec58:	2b0b      	cmp	r3, #11
 800ec5a:	d905      	bls.n	800ec68 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ec5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec60:	3301      	adds	r3, #1
 800ec62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec66:	e113      	b.n	800ee90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d075      	beq.n	800ed5e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d006      	beq.n	800ec88 <tcp_slowtmr+0xf0>
 800ec7a:	4b62      	ldr	r3, [pc, #392]	; (800ee04 <tcp_slowtmr+0x26c>)
 800ec7c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ec80:	4965      	ldr	r1, [pc, #404]	; (800ee18 <tcp_slowtmr+0x280>)
 800ec82:	4862      	ldr	r0, [pc, #392]	; (800ee0c <tcp_slowtmr+0x274>)
 800ec84:	f006 fac4 	bl	8015210 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d106      	bne.n	800ec9e <tcp_slowtmr+0x106>
 800ec90:	4b5c      	ldr	r3, [pc, #368]	; (800ee04 <tcp_slowtmr+0x26c>)
 800ec92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ec96:	4961      	ldr	r1, [pc, #388]	; (800ee1c <tcp_slowtmr+0x284>)
 800ec98:	485c      	ldr	r0, [pc, #368]	; (800ee0c <tcp_slowtmr+0x274>)
 800ec9a:	f006 fab9 	bl	8015210 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eca4:	2b0b      	cmp	r3, #11
 800eca6:	d905      	bls.n	800ecb4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecac:	3301      	adds	r3, #1
 800ecae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecb2:	e0ed      	b.n	800ee90 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ecb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	4a58      	ldr	r2, [pc, #352]	; (800ee20 <tcp_slowtmr+0x288>)
 800ecbe:	5cd3      	ldrb	r3, [r2, r3]
 800ecc0:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ecc8:	7ffa      	ldrb	r2, [r7, #31]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d907      	bls.n	800ecde <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ece4:	7ffa      	ldrb	r2, [r7, #31]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	f200 80d2 	bhi.w	800ee90 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ecec:	2301      	movs	r3, #1
 800ecee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d108      	bne.n	800ed0c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ecfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecfc:	f005 f986 	bl	801400c <tcp_zero_window_probe>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d014      	beq.n	800ed30 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ed06:	2300      	movs	r3, #0
 800ed08:	623b      	str	r3, [r7, #32]
 800ed0a:	e011      	b.n	800ed30 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed12:	4619      	mov	r1, r3
 800ed14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed16:	f004 f82d 	bl	8012d74 <tcp_split_unsent_seg>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d107      	bne.n	800ed30 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ed20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed22:	f004 fab1 	bl	8013288 <tcp_output>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d101      	bne.n	800ed30 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 80ac 	beq.w	800ee90 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ed40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed46:	2b06      	cmp	r3, #6
 800ed48:	f200 80a2 	bhi.w	800ee90 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed52:	3301      	adds	r3, #1
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ed5c:	e098      	b.n	800ee90 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ed5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	db0f      	blt.n	800ed88 <tcp_slowtmr+0x1f0>
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d008      	beq.n	800ed88 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3301      	adds	r3, #1
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	b21a      	sxth	r2, r3
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ed8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ed94:	429a      	cmp	r2, r3
 800ed96:	db7b      	blt.n	800ee90 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ed98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed9a:	f004 fd6f 	bl	801387c <tcp_rexmit_rto_prepare>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d007      	beq.n	800edb4 <tcp_slowtmr+0x21c>
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d171      	bne.n	800ee90 <tcp_slowtmr+0x2f8>
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d06d      	beq.n	800ee90 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	7d1b      	ldrb	r3, [r3, #20]
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d03a      	beq.n	800ee32 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800edc2:	2b0c      	cmp	r3, #12
 800edc4:	bf28      	it	cs
 800edc6:	230c      	movcs	r3, #12
 800edc8:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edd0:	10db      	asrs	r3, r3, #3
 800edd2:	b21b      	sxth	r3, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eddc:	4413      	add	r3, r2
 800edde:	7fba      	ldrb	r2, [r7, #30]
 800ede0:	4910      	ldr	r1, [pc, #64]	; (800ee24 <tcp_slowtmr+0x28c>)
 800ede2:	5c8a      	ldrb	r2, [r1, r2]
 800ede4:	4093      	lsls	r3, r2
 800ede6:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800edee:	4293      	cmp	r3, r2
 800edf0:	dc1a      	bgt.n	800ee28 <tcp_slowtmr+0x290>
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	b21a      	sxth	r2, r3
 800edf6:	e019      	b.n	800ee2c <tcp_slowtmr+0x294>
 800edf8:	2000aef4 	.word	0x2000aef4
 800edfc:	20007262 	.word	0x20007262
 800ee00:	2000aef0 	.word	0x2000aef0
 800ee04:	08017648 	.word	0x08017648
 800ee08:	0801798c 	.word	0x0801798c
 800ee0c:	0801768c 	.word	0x0801768c
 800ee10:	080179b8 	.word	0x080179b8
 800ee14:	080179e4 	.word	0x080179e4
 800ee18:	08017a14 	.word	0x08017a14
 800ee1c:	08017a48 	.word	0x08017a48
 800ee20:	08019e3c 	.word	0x08019e3c
 800ee24:	08019e2c 	.word	0x08019e2c
 800ee28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	2200      	movs	r2, #0
 800ee36:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee44:	4293      	cmp	r3, r2
 800ee46:	bf28      	it	cs
 800ee48:	4613      	movcs	r3, r2
 800ee4a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800ee4c:	8afb      	ldrh	r3, [r7, #22]
 800ee4e:	085b      	lsrs	r3, r3, #1
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee62:	005b      	lsls	r3, r3, #1
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d206      	bcs.n	800ee78 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ee78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	2200      	movs	r2, #0
 800ee86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ee8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee8c:	f004 fd66 	bl	801395c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee92:	7d1b      	ldrb	r3, [r3, #20]
 800ee94:	2b06      	cmp	r3, #6
 800ee96:	d111      	bne.n	800eebc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	8b5b      	ldrh	r3, [r3, #26]
 800ee9c:	f003 0310 	and.w	r3, r3, #16
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00b      	beq.n	800eebc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eea4:	4b9c      	ldr	r3, [pc, #624]	; (800f118 <tcp_slowtmr+0x580>)
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	6a1b      	ldr	r3, [r3, #32]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	2b28      	cmp	r3, #40	; 0x28
 800eeb0:	d904      	bls.n	800eebc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eeb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	7a5b      	ldrb	r3, [r3, #9]
 800eec0:	f003 0308 	and.w	r3, r3, #8
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d04a      	beq.n	800ef5e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eecc:	2b04      	cmp	r3, #4
 800eece:	d003      	beq.n	800eed8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eed4:	2b07      	cmp	r3, #7
 800eed6:	d142      	bne.n	800ef5e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eed8:	4b8f      	ldr	r3, [pc, #572]	; (800f118 <tcp_slowtmr+0x580>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	6a1b      	ldr	r3, [r3, #32]
 800eee0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eee8:	4b8c      	ldr	r3, [pc, #560]	; (800f11c <tcp_slowtmr+0x584>)
 800eeea:	440b      	add	r3, r1
 800eeec:	498c      	ldr	r1, [pc, #560]	; (800f120 <tcp_slowtmr+0x588>)
 800eeee:	fba1 1303 	umull	r1, r3, r1, r3
 800eef2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d90a      	bls.n	800ef0e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eefc:	3301      	adds	r3, #1
 800eefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ef02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef06:	3301      	adds	r3, #1
 800ef08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef0c:	e027      	b.n	800ef5e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef0e:	4b82      	ldr	r3, [pc, #520]	; (800f118 <tcp_slowtmr+0x580>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	6a1b      	ldr	r3, [r3, #32]
 800ef16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ef1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ef24:	4618      	mov	r0, r3
 800ef26:	4b7f      	ldr	r3, [pc, #508]	; (800f124 <tcp_slowtmr+0x58c>)
 800ef28:	fb03 f300 	mul.w	r3, r3, r0
 800ef2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ef2e:	497c      	ldr	r1, [pc, #496]	; (800f120 <tcp_slowtmr+0x588>)
 800ef30:	fba1 1303 	umull	r1, r3, r1, r3
 800ef34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d911      	bls.n	800ef5e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ef3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef3c:	f005 f826 	bl	8013f8c <tcp_keepalive>
 800ef40:	4603      	mov	r3, r0
 800ef42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ef46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d107      	bne.n	800ef5e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ef54:	3301      	adds	r3, #1
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d011      	beq.n	800ef8a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ef66:	4b6c      	ldr	r3, [pc, #432]	; (800f118 <tcp_slowtmr+0x580>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	1ad2      	subs	r2, r2, r3
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ef76:	4619      	mov	r1, r3
 800ef78:	460b      	mov	r3, r1
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	440b      	add	r3, r1
 800ef7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d302      	bcc.n	800ef8a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ef84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef86:	f000 fec5 	bl	800fd14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8c:	7d1b      	ldrb	r3, [r3, #20]
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	d10b      	bne.n	800efaa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef92:	4b61      	ldr	r3, [pc, #388]	; (800f118 <tcp_slowtmr+0x580>)
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	2b28      	cmp	r3, #40	; 0x28
 800ef9e:	d904      	bls.n	800efaa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800efa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa4:	3301      	adds	r3, #1
 800efa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	7d1b      	ldrb	r3, [r3, #20]
 800efae:	2b09      	cmp	r3, #9
 800efb0:	d10b      	bne.n	800efca <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efb2:	4b59      	ldr	r3, [pc, #356]	; (800f118 <tcp_slowtmr+0x580>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	6a1b      	ldr	r3, [r3, #32]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	2bf0      	cmp	r3, #240	; 0xf0
 800efbe:	d904      	bls.n	800efca <tcp_slowtmr+0x432>
        ++pcb_remove;
 800efc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc4:	3301      	adds	r3, #1
 800efc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800efca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d060      	beq.n	800f094 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efd8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800efda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efdc:	f000 fce6 	bl	800f9ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d010      	beq.n	800f008 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800efe6:	4b50      	ldr	r3, [pc, #320]	; (800f128 <tcp_slowtmr+0x590>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efec:	429a      	cmp	r2, r3
 800efee:	d106      	bne.n	800effe <tcp_slowtmr+0x466>
 800eff0:	4b4e      	ldr	r3, [pc, #312]	; (800f12c <tcp_slowtmr+0x594>)
 800eff2:	f240 526d 	movw	r2, #1389	; 0x56d
 800eff6:	494e      	ldr	r1, [pc, #312]	; (800f130 <tcp_slowtmr+0x598>)
 800eff8:	484e      	ldr	r0, [pc, #312]	; (800f134 <tcp_slowtmr+0x59c>)
 800effa:	f006 f909 	bl	8015210 <iprintf>
        prev->next = pcb->next;
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f004:	60da      	str	r2, [r3, #12]
 800f006:	e00f      	b.n	800f028 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f008:	4b47      	ldr	r3, [pc, #284]	; (800f128 <tcp_slowtmr+0x590>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	429a      	cmp	r2, r3
 800f010:	d006      	beq.n	800f020 <tcp_slowtmr+0x488>
 800f012:	4b46      	ldr	r3, [pc, #280]	; (800f12c <tcp_slowtmr+0x594>)
 800f014:	f240 5271 	movw	r2, #1393	; 0x571
 800f018:	4947      	ldr	r1, [pc, #284]	; (800f138 <tcp_slowtmr+0x5a0>)
 800f01a:	4846      	ldr	r0, [pc, #280]	; (800f134 <tcp_slowtmr+0x59c>)
 800f01c:	f006 f8f8 	bl	8015210 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	4a40      	ldr	r2, [pc, #256]	; (800f128 <tcp_slowtmr+0x590>)
 800f026:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d013      	beq.n	800f058 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f038:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	3304      	adds	r3, #4
 800f03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f040:	8ad2      	ldrh	r2, [r2, #22]
 800f042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f044:	8b09      	ldrh	r1, [r1, #24]
 800f046:	9102      	str	r1, [sp, #8]
 800f048:	9201      	str	r2, [sp, #4]
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	462b      	mov	r3, r5
 800f04e:	4622      	mov	r2, r4
 800f050:	4601      	mov	r1, r0
 800f052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f054:	f004 fee4 	bl	8013e20 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800f05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7ff f840 	bl	800e0f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f074:	4b31      	ldr	r3, [pc, #196]	; (800f13c <tcp_slowtmr+0x5a4>)
 800f076:	2200      	movs	r2, #0
 800f078:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d004      	beq.n	800f08a <tcp_slowtmr+0x4f2>
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	f06f 010c 	mvn.w	r1, #12
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f08a:	4b2c      	ldr	r3, [pc, #176]	; (800f13c <tcp_slowtmr+0x5a4>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d037      	beq.n	800f102 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f092:	e592      	b.n	800ebba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	7f1b      	ldrb	r3, [r3, #28]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ac:	7f1a      	ldrb	r2, [r3, #28]
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	7f5b      	ldrb	r3, [r3, #29]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d325      	bcc.n	800f102 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f0bc:	4b1f      	ldr	r3, [pc, #124]	; (800f13c <tcp_slowtmr+0x5a4>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00b      	beq.n	800f0e4 <tcp_slowtmr+0x54c>
 800f0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0d4:	6912      	ldr	r2, [r2, #16]
 800f0d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	4603      	mov	r3, r0
 800f0de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f0e2:	e002      	b.n	800f0ea <tcp_slowtmr+0x552>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f0ea:	4b14      	ldr	r3, [pc, #80]	; (800f13c <tcp_slowtmr+0x5a4>)
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d000      	beq.n	800f0f4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f0f2:	e562      	b.n	800ebba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f0f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d102      	bne.n	800f102 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0fe:	f004 f8c3 	bl	8013288 <tcp_output>
  while (pcb != NULL) {
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	2b00      	cmp	r3, #0
 800f106:	f47f ad5e 	bne.w	800ebc6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f10e:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <tcp_slowtmr+0x5a8>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f114:	e069      	b.n	800f1ea <tcp_slowtmr+0x652>
 800f116:	bf00      	nop
 800f118:	2000aef4 	.word	0x2000aef4
 800f11c:	000a4cb8 	.word	0x000a4cb8
 800f120:	10624dd3 	.word	0x10624dd3
 800f124:	000124f8 	.word	0x000124f8
 800f128:	2000aef0 	.word	0x2000aef0
 800f12c:	08017648 	.word	0x08017648
 800f130:	08017a80 	.word	0x08017a80
 800f134:	0801768c 	.word	0x0801768c
 800f138:	08017aac 	.word	0x08017aac
 800f13c:	2000aeec 	.word	0x2000aeec
 800f140:	2000af00 	.word	0x2000af00
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f146:	7d1b      	ldrb	r3, [r3, #20]
 800f148:	2b0a      	cmp	r3, #10
 800f14a:	d006      	beq.n	800f15a <tcp_slowtmr+0x5c2>
 800f14c:	4b2a      	ldr	r3, [pc, #168]	; (800f1f8 <tcp_slowtmr+0x660>)
 800f14e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f152:	492a      	ldr	r1, [pc, #168]	; (800f1fc <tcp_slowtmr+0x664>)
 800f154:	482a      	ldr	r0, [pc, #168]	; (800f200 <tcp_slowtmr+0x668>)
 800f156:	f006 f85b 	bl	8015210 <iprintf>
    pcb_remove = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f160:	4b28      	ldr	r3, [pc, #160]	; (800f204 <tcp_slowtmr+0x66c>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	2bf0      	cmp	r3, #240	; 0xf0
 800f16c:	d904      	bls.n	800f178 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f16e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f172:	3301      	adds	r3, #1
 800f174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d02f      	beq.n	800f1e0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f182:	f000 fc13 	bl	800f9ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d010      	beq.n	800f1ae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f18c:	4b1e      	ldr	r3, [pc, #120]	; (800f208 <tcp_slowtmr+0x670>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f192:	429a      	cmp	r2, r3
 800f194:	d106      	bne.n	800f1a4 <tcp_slowtmr+0x60c>
 800f196:	4b18      	ldr	r3, [pc, #96]	; (800f1f8 <tcp_slowtmr+0x660>)
 800f198:	f240 52af 	movw	r2, #1455	; 0x5af
 800f19c:	491b      	ldr	r1, [pc, #108]	; (800f20c <tcp_slowtmr+0x674>)
 800f19e:	4818      	ldr	r0, [pc, #96]	; (800f200 <tcp_slowtmr+0x668>)
 800f1a0:	f006 f836 	bl	8015210 <iprintf>
        prev->next = pcb->next;
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	68da      	ldr	r2, [r3, #12]
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	60da      	str	r2, [r3, #12]
 800f1ac:	e00f      	b.n	800f1ce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f1ae:	4b16      	ldr	r3, [pc, #88]	; (800f208 <tcp_slowtmr+0x670>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d006      	beq.n	800f1c6 <tcp_slowtmr+0x62e>
 800f1b8:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <tcp_slowtmr+0x660>)
 800f1ba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f1be:	4914      	ldr	r1, [pc, #80]	; (800f210 <tcp_slowtmr+0x678>)
 800f1c0:	480f      	ldr	r0, [pc, #60]	; (800f200 <tcp_slowtmr+0x668>)
 800f1c2:	f006 f825 	bl	8015210 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	4a0f      	ldr	r2, [pc, #60]	; (800f208 <tcp_slowtmr+0x670>)
 800f1cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f1d8:	6838      	ldr	r0, [r7, #0]
 800f1da:	f7fe ff8b 	bl	800e0f4 <tcp_free>
 800f1de:	e004      	b.n	800f1ea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1a9      	bne.n	800f144 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f1f0:	bf00      	nop
 800f1f2:	3730      	adds	r7, #48	; 0x30
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800f1f8:	08017648 	.word	0x08017648
 800f1fc:	08017ad8 	.word	0x08017ad8
 800f200:	0801768c 	.word	0x0801768c
 800f204:	2000aef4 	.word	0x2000aef4
 800f208:	2000af00 	.word	0x2000af00
 800f20c:	08017b08 	.word	0x08017b08
 800f210:	08017b30 	.word	0x08017b30

0800f214 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f21a:	4b2d      	ldr	r3, [pc, #180]	; (800f2d0 <tcp_fasttmr+0xbc>)
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	3301      	adds	r3, #1
 800f220:	b2da      	uxtb	r2, r3
 800f222:	4b2b      	ldr	r3, [pc, #172]	; (800f2d0 <tcp_fasttmr+0xbc>)
 800f224:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f226:	4b2b      	ldr	r3, [pc, #172]	; (800f2d4 <tcp_fasttmr+0xc0>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f22c:	e048      	b.n	800f2c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	7f9a      	ldrb	r2, [r3, #30]
 800f232:	4b27      	ldr	r3, [pc, #156]	; (800f2d0 <tcp_fasttmr+0xbc>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	429a      	cmp	r2, r3
 800f238:	d03f      	beq.n	800f2ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f23a:	4b25      	ldr	r3, [pc, #148]	; (800f2d0 <tcp_fasttmr+0xbc>)
 800f23c:	781a      	ldrb	r2, [r3, #0]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8b5b      	ldrh	r3, [r3, #26]
 800f246:	f003 0301 	and.w	r3, r3, #1
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d010      	beq.n	800f270 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	8b5b      	ldrh	r3, [r3, #26]
 800f252:	f043 0302 	orr.w	r3, r3, #2
 800f256:	b29a      	uxth	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f004 f813 	bl	8013288 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	8b5b      	ldrh	r3, [r3, #26]
 800f266:	f023 0303 	bic.w	r3, r3, #3
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	8b5b      	ldrh	r3, [r3, #26]
 800f274:	f003 0308 	and.w	r3, r3, #8
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d009      	beq.n	800f290 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	8b5b      	ldrh	r3, [r3, #26]
 800f280:	f023 0308 	bic.w	r3, r3, #8
 800f284:	b29a      	uxth	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff f8c2 	bl	800e414 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d00a      	beq.n	800f2b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f29e:	4b0e      	ldr	r3, [pc, #56]	; (800f2d8 <tcp_fasttmr+0xc4>)
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f819 	bl	800f2dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f2aa:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <tcp_fasttmr+0xc4>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d000      	beq.n	800f2b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f2b2:	e7b8      	b.n	800f226 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	607b      	str	r3, [r7, #4]
 800f2b8:	e002      	b.n	800f2c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1b3      	bne.n	800f22e <tcp_fasttmr+0x1a>
    }
  }
}
 800f2c6:	bf00      	nop
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20007262 	.word	0x20007262
 800f2d4:	2000aef0 	.word	0x2000aef0
 800f2d8:	2000aeec 	.word	0x2000aeec

0800f2dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d109      	bne.n	800f2fe <tcp_process_refused_data+0x22>
 800f2ea:	4b37      	ldr	r3, [pc, #220]	; (800f3c8 <tcp_process_refused_data+0xec>)
 800f2ec:	f240 6209 	movw	r2, #1545	; 0x609
 800f2f0:	4936      	ldr	r1, [pc, #216]	; (800f3cc <tcp_process_refused_data+0xf0>)
 800f2f2:	4837      	ldr	r0, [pc, #220]	; (800f3d0 <tcp_process_refused_data+0xf4>)
 800f2f4:	f005 ff8c 	bl	8015210 <iprintf>
 800f2f8:	f06f 030f 	mvn.w	r3, #15
 800f2fc:	e060      	b.n	800f3c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f302:	7b5b      	ldrb	r3, [r3, #13]
 800f304:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f30a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00b      	beq.n	800f334 <tcp_process_refused_data+0x58>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6918      	ldr	r0, [r3, #16]
 800f326:	2300      	movs	r3, #0
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	47a0      	blx	r4
 800f32e:	4603      	mov	r3, r0
 800f330:	73fb      	strb	r3, [r7, #15]
 800f332:	e007      	b.n	800f344 <tcp_process_refused_data+0x68>
 800f334:	2300      	movs	r3, #0
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	2000      	movs	r0, #0
 800f33c:	f000 f8c0 	bl	800f4c0 <tcp_recv_null>
 800f340:	4603      	mov	r3, r0
 800f342:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d12a      	bne.n	800f3a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	f003 0320 	and.w	r3, r3, #32
 800f352:	2b00      	cmp	r3, #0
 800f354:	d033      	beq.n	800f3be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f35a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f35e:	d005      	beq.n	800f36c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f364:	3301      	adds	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <tcp_process_refused_data+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6918      	ldr	r0, [r3, #16]
 800f380:	2300      	movs	r3, #0
 800f382:	2200      	movs	r2, #0
 800f384:	6879      	ldr	r1, [r7, #4]
 800f386:	47a0      	blx	r4
 800f388:	4603      	mov	r3, r0
 800f38a:	73fb      	strb	r3, [r7, #15]
 800f38c:	e001      	b.n	800f392 <tcp_process_refused_data+0xb6>
 800f38e:	2300      	movs	r3, #0
 800f390:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f396:	f113 0f0d 	cmn.w	r3, #13
 800f39a:	d110      	bne.n	800f3be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f39c:	f06f 030c 	mvn.w	r3, #12
 800f3a0:	e00e      	b.n	800f3c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3a6:	f113 0f0d 	cmn.w	r3, #13
 800f3aa:	d102      	bne.n	800f3b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f3ac:	f06f 030c 	mvn.w	r3, #12
 800f3b0:	e006      	b.n	800f3c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f3b8:	f06f 0304 	mvn.w	r3, #4
 800f3bc:	e000      	b.n	800f3c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3714      	adds	r7, #20
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd90      	pop	{r4, r7, pc}
 800f3c8:	08017648 	.word	0x08017648
 800f3cc:	08017b58 	.word	0x08017b58
 800f3d0:	0801768c 	.word	0x0801768c

0800f3d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f3dc:	e007      	b.n	800f3ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 f809 	bl	800f3fc <tcp_seg_free>
    seg = next;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1f4      	bne.n	800f3de <tcp_segs_free+0xa>
  }
}
 800f3f4:	bf00      	nop
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00c      	beq.n	800f424 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d004      	beq.n	800f41c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe fa56 	bl	800d8c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	2003      	movs	r0, #3
 800f420:	f7fd fbb0 	bl	800cb84 <memp_free>
  }
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d107      	bne.n	800f44e <tcp_setprio+0x22>
 800f43e:	4b07      	ldr	r3, [pc, #28]	; (800f45c <tcp_setprio+0x30>)
 800f440:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f444:	4906      	ldr	r1, [pc, #24]	; (800f460 <tcp_setprio+0x34>)
 800f446:	4807      	ldr	r0, [pc, #28]	; (800f464 <tcp_setprio+0x38>)
 800f448:	f005 fee2 	bl	8015210 <iprintf>
 800f44c:	e002      	b.n	800f454 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	78fa      	ldrb	r2, [r7, #3]
 800f452:	755a      	strb	r2, [r3, #21]
}
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	08017648 	.word	0x08017648
 800f460:	08017b80 	.word	0x08017b80
 800f464:	0801768c 	.word	0x0801768c

0800f468 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <tcp_seg_copy+0x1c>
 800f476:	4b0f      	ldr	r3, [pc, #60]	; (800f4b4 <tcp_seg_copy+0x4c>)
 800f478:	f240 6282 	movw	r2, #1666	; 0x682
 800f47c:	490e      	ldr	r1, [pc, #56]	; (800f4b8 <tcp_seg_copy+0x50>)
 800f47e:	480f      	ldr	r0, [pc, #60]	; (800f4bc <tcp_seg_copy+0x54>)
 800f480:	f005 fec6 	bl	8015210 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f484:	2003      	movs	r0, #3
 800f486:	f7fd fb2b 	bl	800cae0 <memp_malloc>
 800f48a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <tcp_seg_copy+0x2e>
    return NULL;
 800f492:	2300      	movs	r3, #0
 800f494:	e00a      	b.n	800f4ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f496:	2210      	movs	r2, #16
 800f498:	6879      	ldr	r1, [r7, #4]
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f005 fea5 	bl	80151ea <memcpy>
  pbuf_ref(cseg->p);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fe fab5 	bl	800da14 <pbuf_ref>
  return cseg;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	08017648 	.word	0x08017648
 800f4b8:	08017b9c 	.word	0x08017b9c
 800f4bc:	0801768c 	.word	0x0801768c

0800f4c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
 800f4cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d109      	bne.n	800f4e8 <tcp_recv_null+0x28>
 800f4d4:	4b12      	ldr	r3, [pc, #72]	; (800f520 <tcp_recv_null+0x60>)
 800f4d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f4da:	4912      	ldr	r1, [pc, #72]	; (800f524 <tcp_recv_null+0x64>)
 800f4dc:	4812      	ldr	r0, [pc, #72]	; (800f528 <tcp_recv_null+0x68>)
 800f4de:	f005 fe97 	bl	8015210 <iprintf>
 800f4e2:	f06f 030f 	mvn.w	r3, #15
 800f4e6:	e016      	b.n	800f516 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d009      	beq.n	800f502 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	891b      	ldrh	r3, [r3, #8]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68b8      	ldr	r0, [r7, #8]
 800f4f6:	f7ff fab9 	bl	800ea6c <tcp_recved>
    pbuf_free(p);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7fe f9e4 	bl	800d8c8 <pbuf_free>
 800f500:	e008      	b.n	800f514 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d104      	bne.n	800f514 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f50a:	68b8      	ldr	r0, [r7, #8]
 800f50c:	f7fe ffe8 	bl	800e4e0 <tcp_close>
 800f510:	4603      	mov	r3, r0
 800f512:	e000      	b.n	800f516 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	08017648 	.word	0x08017648
 800f524:	08017bb8 	.word	0x08017bb8
 800f528:	0801768c 	.word	0x0801768c

0800f52c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	db01      	blt.n	800f542 <tcp_kill_prio+0x16>
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	e000      	b.n	800f544 <tcp_kill_prio+0x18>
 800f542:	237f      	movs	r3, #127	; 0x7f
 800f544:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f546:	7afb      	ldrb	r3, [r7, #11]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d034      	beq.n	800f5b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f54c:	7afb      	ldrb	r3, [r7, #11]
 800f54e:	3b01      	subs	r3, #1
 800f550:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f556:	2300      	movs	r3, #0
 800f558:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f55a:	4b19      	ldr	r3, [pc, #100]	; (800f5c0 <tcp_kill_prio+0x94>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	e01f      	b.n	800f5a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	7d5b      	ldrb	r3, [r3, #21]
 800f566:	7afa      	ldrb	r2, [r7, #11]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d80c      	bhi.n	800f586 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f570:	7afa      	ldrb	r2, [r7, #11]
 800f572:	429a      	cmp	r2, r3
 800f574:	d112      	bne.n	800f59c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f576:	4b13      	ldr	r3, [pc, #76]	; (800f5c4 <tcp_kill_prio+0x98>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	429a      	cmp	r2, r3
 800f584:	d30a      	bcc.n	800f59c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f586:	4b0f      	ldr	r3, [pc, #60]	; (800f5c4 <tcp_kill_prio+0x98>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	7d5b      	ldrb	r3, [r3, #21]
 800f59a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1dc      	bne.n	800f562 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d004      	beq.n	800f5b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f5ae:	6938      	ldr	r0, [r7, #16]
 800f5b0:	f7ff f880 	bl	800e6b4 <tcp_abort>
 800f5b4:	e000      	b.n	800f5b8 <tcp_kill_prio+0x8c>
    return;
 800f5b6:	bf00      	nop
  }
}
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	2000aef0 	.word	0x2000aef0
 800f5c4:	2000aef4 	.word	0x2000aef4

0800f5c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	2b08      	cmp	r3, #8
 800f5d6:	d009      	beq.n	800f5ec <tcp_kill_state+0x24>
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	2b09      	cmp	r3, #9
 800f5dc:	d006      	beq.n	800f5ec <tcp_kill_state+0x24>
 800f5de:	4b1a      	ldr	r3, [pc, #104]	; (800f648 <tcp_kill_state+0x80>)
 800f5e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f5e4:	4919      	ldr	r1, [pc, #100]	; (800f64c <tcp_kill_state+0x84>)
 800f5e6:	481a      	ldr	r0, [pc, #104]	; (800f650 <tcp_kill_state+0x88>)
 800f5e8:	f005 fe12 	bl	8015210 <iprintf>

  inactivity = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5f4:	4b17      	ldr	r3, [pc, #92]	; (800f654 <tcp_kill_state+0x8c>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e017      	b.n	800f62c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	7d1b      	ldrb	r3, [r3, #20]
 800f600:	79fa      	ldrb	r2, [r7, #7]
 800f602:	429a      	cmp	r2, r3
 800f604:	d10f      	bne.n	800f626 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f606:	4b14      	ldr	r3, [pc, #80]	; (800f658 <tcp_kill_state+0x90>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	1ad2      	subs	r2, r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	429a      	cmp	r2, r3
 800f614:	d307      	bcc.n	800f626 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f616:	4b10      	ldr	r3, [pc, #64]	; (800f658 <tcp_kill_state+0x90>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1e4      	bne.n	800f5fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f638:	2100      	movs	r1, #0
 800f63a:	6938      	ldr	r0, [r7, #16]
 800f63c:	f7fe ff7c 	bl	800e538 <tcp_abandon>
  }
}
 800f640:	bf00      	nop
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	08017648 	.word	0x08017648
 800f64c:	08017bd4 	.word	0x08017bd4
 800f650:	0801768c 	.word	0x0801768c
 800f654:	2000aef0 	.word	0x2000aef0
 800f658:	2000aef4 	.word	0x2000aef4

0800f65c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f666:	2300      	movs	r3, #0
 800f668:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f66a:	4b12      	ldr	r3, [pc, #72]	; (800f6b4 <tcp_kill_timewait+0x58>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	e012      	b.n	800f698 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f672:	4b11      	ldr	r3, [pc, #68]	; (800f6b8 <tcp_kill_timewait+0x5c>)
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	1ad2      	subs	r2, r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d307      	bcc.n	800f692 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f682:	4b0d      	ldr	r3, [pc, #52]	; (800f6b8 <tcp_kill_timewait+0x5c>)
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	60fb      	str	r3, [r7, #12]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1e9      	bne.n	800f672 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d002      	beq.n	800f6aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f6a4:	68b8      	ldr	r0, [r7, #8]
 800f6a6:	f7ff f805 	bl	800e6b4 <tcp_abort>
  }
}
 800f6aa:	bf00      	nop
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	2000af00 	.word	0x2000af00
 800f6b8:	2000aef4 	.word	0x2000aef4

0800f6bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f6c2:	4b10      	ldr	r3, [pc, #64]	; (800f704 <tcp_handle_closepend+0x48>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f6c8:	e014      	b.n	800f6f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	8b5b      	ldrh	r3, [r3, #26]
 800f6d4:	f003 0308 	and.w	r3, r3, #8
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d009      	beq.n	800f6f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	8b5b      	ldrh	r3, [r3, #26]
 800f6e0:	f023 0308 	bic.w	r3, r3, #8
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f7fe fe92 	bl	800e414 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1e7      	bne.n	800f6ca <tcp_handle_closepend+0xe>
  }
}
 800f6fa:	bf00      	nop
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	2000aef0 	.word	0x2000aef0

0800f708 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f712:	2001      	movs	r0, #1
 800f714:	f7fd f9e4 	bl	800cae0 <memp_malloc>
 800f718:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d126      	bne.n	800f76e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f720:	f7ff ffcc 	bl	800f6bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f724:	f7ff ff9a 	bl	800f65c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f728:	2001      	movs	r0, #1
 800f72a:	f7fd f9d9 	bl	800cae0 <memp_malloc>
 800f72e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d11b      	bne.n	800f76e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f736:	2009      	movs	r0, #9
 800f738:	f7ff ff46 	bl	800f5c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f73c:	2001      	movs	r0, #1
 800f73e:	f7fd f9cf 	bl	800cae0 <memp_malloc>
 800f742:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d111      	bne.n	800f76e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f74a:	2008      	movs	r0, #8
 800f74c:	f7ff ff3c 	bl	800f5c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f750:	2001      	movs	r0, #1
 800f752:	f7fd f9c5 	bl	800cae0 <memp_malloc>
 800f756:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d107      	bne.n	800f76e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff fee3 	bl	800f52c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f766:	2001      	movs	r0, #1
 800f768:	f7fd f9ba 	bl	800cae0 <memp_malloc>
 800f76c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d03f      	beq.n	800f7f4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f774:	229c      	movs	r2, #156	; 0x9c
 800f776:	2100      	movs	r1, #0
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f005 fd41 	bl	8015200 <memset>
    pcb->prio = prio;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	79fa      	ldrb	r2, [r7, #7]
 800f782:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f78a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f794:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	22ff      	movs	r2, #255	; 0xff
 800f7a2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7aa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2206      	movs	r2, #6
 800f7b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2206      	movs	r2, #6
 800f7b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7c0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f7ca:	4b0d      	ldr	r3, [pc, #52]	; (800f800 <tcp_alloc+0xf8>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f7d2:	4b0c      	ldr	r3, [pc, #48]	; (800f804 <tcp_alloc+0xfc>)
 800f7d4:	781a      	ldrb	r2, [r3, #0]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f7e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	4a08      	ldr	r2, [pc, #32]	; (800f808 <tcp_alloc+0x100>)
 800f7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4a07      	ldr	r2, [pc, #28]	; (800f80c <tcp_alloc+0x104>)
 800f7f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	2000aef4 	.word	0x2000aef4
 800f804:	20007262 	.word	0x20007262
 800f808:	0800f4c1 	.word	0x0800f4c1
 800f80c:	006ddd00 	.word	0x006ddd00

0800f810 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f81a:	2040      	movs	r0, #64	; 0x40
 800f81c:	f7ff ff74 	bl	800f708 <tcp_alloc>
 800f820:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f822:	68fb      	ldr	r3, [r7, #12]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d002      	beq.n	800f842 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	611a      	str	r2, [r3, #16]
  }
}
 800f842:	bf00      	nop
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
	...

0800f850 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00e      	beq.n	800f87e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	7d1b      	ldrb	r3, [r3, #20]
 800f864:	2b01      	cmp	r3, #1
 800f866:	d106      	bne.n	800f876 <tcp_recv+0x26>
 800f868:	4b07      	ldr	r3, [pc, #28]	; (800f888 <tcp_recv+0x38>)
 800f86a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f86e:	4907      	ldr	r1, [pc, #28]	; (800f88c <tcp_recv+0x3c>)
 800f870:	4807      	ldr	r0, [pc, #28]	; (800f890 <tcp_recv+0x40>)
 800f872:	f005 fccd 	bl	8015210 <iprintf>
    pcb->recv = recv;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	08017648 	.word	0x08017648
 800f88c:	08017be4 	.word	0x08017be4
 800f890:	0801768c 	.word	0x0801768c

0800f894 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00e      	beq.n	800f8c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	7d1b      	ldrb	r3, [r3, #20]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d106      	bne.n	800f8ba <tcp_sent+0x26>
 800f8ac:	4b07      	ldr	r3, [pc, #28]	; (800f8cc <tcp_sent+0x38>)
 800f8ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f8b2:	4907      	ldr	r1, [pc, #28]	; (800f8d0 <tcp_sent+0x3c>)
 800f8b4:	4807      	ldr	r0, [pc, #28]	; (800f8d4 <tcp_sent+0x40>)
 800f8b6:	f005 fcab 	bl	8015210 <iprintf>
    pcb->sent = sent;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08017648 	.word	0x08017648
 800f8d0:	08017c0c 	.word	0x08017c0c
 800f8d4:	0801768c 	.word	0x0801768c

0800f8d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00e      	beq.n	800f906 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	7d1b      	ldrb	r3, [r3, #20]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d106      	bne.n	800f8fe <tcp_err+0x26>
 800f8f0:	4b07      	ldr	r3, [pc, #28]	; (800f910 <tcp_err+0x38>)
 800f8f2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f8f6:	4907      	ldr	r1, [pc, #28]	; (800f914 <tcp_err+0x3c>)
 800f8f8:	4807      	ldr	r0, [pc, #28]	; (800f918 <tcp_err+0x40>)
 800f8fa:	f005 fc89 	bl	8015210 <iprintf>
    pcb->errf = err;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f906:	bf00      	nop
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	08017648 	.word	0x08017648
 800f914:	08017c34 	.word	0x08017c34
 800f918:	0801768c 	.word	0x0801768c

0800f91c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d008      	beq.n	800f93e <tcp_accept+0x22>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	7d1b      	ldrb	r3, [r3, #20]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d104      	bne.n	800f93e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	619a      	str	r2, [r3, #24]
  }
}
 800f93e:	bf00      	nop
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
	...

0800f94c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	4613      	mov	r3, r2
 800f958:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d107      	bne.n	800f970 <tcp_poll+0x24>
 800f960:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <tcp_poll+0x50>)
 800f962:	f640 023d 	movw	r2, #2109	; 0x83d
 800f966:	490e      	ldr	r1, [pc, #56]	; (800f9a0 <tcp_poll+0x54>)
 800f968:	480e      	ldr	r0, [pc, #56]	; (800f9a4 <tcp_poll+0x58>)
 800f96a:	f005 fc51 	bl	8015210 <iprintf>
 800f96e:	e011      	b.n	800f994 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d106      	bne.n	800f986 <tcp_poll+0x3a>
 800f978:	4b08      	ldr	r3, [pc, #32]	; (800f99c <tcp_poll+0x50>)
 800f97a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f97e:	490a      	ldr	r1, [pc, #40]	; (800f9a8 <tcp_poll+0x5c>)
 800f980:	4808      	ldr	r0, [pc, #32]	; (800f9a4 <tcp_poll+0x58>)
 800f982:	f005 fc45 	bl	8015210 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	68ba      	ldr	r2, [r7, #8]
 800f98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	79fa      	ldrb	r2, [r7, #7]
 800f992:	775a      	strb	r2, [r3, #29]
}
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	08017648 	.word	0x08017648
 800f9a0:	08017c5c 	.word	0x08017c5c
 800f9a4:	0801768c 	.word	0x0801768c
 800f9a8:	08017c74 	.word	0x08017c74

0800f9ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d107      	bne.n	800f9ca <tcp_pcb_purge+0x1e>
 800f9ba:	4b21      	ldr	r3, [pc, #132]	; (800fa40 <tcp_pcb_purge+0x94>)
 800f9bc:	f640 0251 	movw	r2, #2129	; 0x851
 800f9c0:	4920      	ldr	r1, [pc, #128]	; (800fa44 <tcp_pcb_purge+0x98>)
 800f9c2:	4821      	ldr	r0, [pc, #132]	; (800fa48 <tcp_pcb_purge+0x9c>)
 800f9c4:	f005 fc24 	bl	8015210 <iprintf>
 800f9c8:	e037      	b.n	800fa3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7d1b      	ldrb	r3, [r3, #20]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d033      	beq.n	800fa3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f9d6:	2b0a      	cmp	r3, #10
 800f9d8:	d02f      	beq.n	800fa3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d02b      	beq.n	800fa3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d007      	beq.n	800f9fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fd ff6a 	bl	800d8c8 <pbuf_free>
      pcb->refused_data = NULL;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d002      	beq.n	800fa08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 f986 	bl	800fd14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fcdd 	bl	800f3d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff fcd8 	bl	800f3d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	08017648 	.word	0x08017648
 800fa44:	08017c94 	.word	0x08017c94
 800fa48:	0801768c 	.word	0x0801768c

0800fa4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d106      	bne.n	800fa6a <tcp_pcb_remove+0x1e>
 800fa5c:	4b3e      	ldr	r3, [pc, #248]	; (800fb58 <tcp_pcb_remove+0x10c>)
 800fa5e:	f640 0283 	movw	r2, #2179	; 0x883
 800fa62:	493e      	ldr	r1, [pc, #248]	; (800fb5c <tcp_pcb_remove+0x110>)
 800fa64:	483e      	ldr	r0, [pc, #248]	; (800fb60 <tcp_pcb_remove+0x114>)
 800fa66:	f005 fbd3 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <tcp_pcb_remove+0x32>
 800fa70:	4b39      	ldr	r3, [pc, #228]	; (800fb58 <tcp_pcb_remove+0x10c>)
 800fa72:	f640 0284 	movw	r2, #2180	; 0x884
 800fa76:	493b      	ldr	r1, [pc, #236]	; (800fb64 <tcp_pcb_remove+0x118>)
 800fa78:	4839      	ldr	r0, [pc, #228]	; (800fb60 <tcp_pcb_remove+0x114>)
 800fa7a:	f005 fbc9 	bl	8015210 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d105      	bne.n	800fa94 <tcp_pcb_remove+0x48>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	68da      	ldr	r2, [r3, #12]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	e013      	b.n	800fabc <tcp_pcb_remove+0x70>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60fb      	str	r3, [r7, #12]
 800fa9a:	e00c      	b.n	800fab6 <tcp_pcb_remove+0x6a>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68da      	ldr	r2, [r3, #12]
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d104      	bne.n	800fab0 <tcp_pcb_remove+0x64>
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	68da      	ldr	r2, [r3, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	60da      	str	r2, [r3, #12]
 800faae:	e005      	b.n	800fabc <tcp_pcb_remove+0x70>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	60fb      	str	r3, [r7, #12]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1ef      	bne.n	800fa9c <tcp_pcb_remove+0x50>
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2200      	movs	r2, #0
 800fac0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fac2:	6838      	ldr	r0, [r7, #0]
 800fac4:	f7ff ff72 	bl	800f9ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	7d1b      	ldrb	r3, [r3, #20]
 800facc:	2b0a      	cmp	r3, #10
 800face:	d013      	beq.n	800faf8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d00f      	beq.n	800faf8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	8b5b      	ldrh	r3, [r3, #26]
 800fadc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d009      	beq.n	800faf8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	8b5b      	ldrh	r3, [r3, #26]
 800fae8:	f043 0302 	orr.w	r3, r3, #2
 800faec:	b29a      	uxth	r2, r3
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800faf2:	6838      	ldr	r0, [r7, #0]
 800faf4:	f003 fbc8 	bl	8013288 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	7d1b      	ldrb	r3, [r3, #20]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d020      	beq.n	800fb42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d006      	beq.n	800fb16 <tcp_pcb_remove+0xca>
 800fb08:	4b13      	ldr	r3, [pc, #76]	; (800fb58 <tcp_pcb_remove+0x10c>)
 800fb0a:	f640 0293 	movw	r2, #2195	; 0x893
 800fb0e:	4916      	ldr	r1, [pc, #88]	; (800fb68 <tcp_pcb_remove+0x11c>)
 800fb10:	4813      	ldr	r0, [pc, #76]	; (800fb60 <tcp_pcb_remove+0x114>)
 800fb12:	f005 fb7d 	bl	8015210 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <tcp_pcb_remove+0xe0>
 800fb1e:	4b0e      	ldr	r3, [pc, #56]	; (800fb58 <tcp_pcb_remove+0x10c>)
 800fb20:	f640 0294 	movw	r2, #2196	; 0x894
 800fb24:	4911      	ldr	r1, [pc, #68]	; (800fb6c <tcp_pcb_remove+0x120>)
 800fb26:	480e      	ldr	r0, [pc, #56]	; (800fb60 <tcp_pcb_remove+0x114>)
 800fb28:	f005 fb72 	bl	8015210 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d006      	beq.n	800fb42 <tcp_pcb_remove+0xf6>
 800fb34:	4b08      	ldr	r3, [pc, #32]	; (800fb58 <tcp_pcb_remove+0x10c>)
 800fb36:	f640 0296 	movw	r2, #2198	; 0x896
 800fb3a:	490d      	ldr	r1, [pc, #52]	; (800fb70 <tcp_pcb_remove+0x124>)
 800fb3c:	4808      	ldr	r0, [pc, #32]	; (800fb60 <tcp_pcb_remove+0x114>)
 800fb3e:	f005 fb67 	bl	8015210 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	2200      	movs	r2, #0
 800fb46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb4e:	bf00      	nop
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	08017648 	.word	0x08017648
 800fb5c:	08017cb0 	.word	0x08017cb0
 800fb60:	0801768c 	.word	0x0801768c
 800fb64:	08017ccc 	.word	0x08017ccc
 800fb68:	08017cec 	.word	0x08017cec
 800fb6c:	08017d04 	.word	0x08017d04
 800fb70:	08017d20 	.word	0x08017d20

0800fb74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <tcp_next_iss+0x1c>
 800fb82:	4b0a      	ldr	r3, [pc, #40]	; (800fbac <tcp_next_iss+0x38>)
 800fb84:	f640 02af 	movw	r2, #2223	; 0x8af
 800fb88:	4909      	ldr	r1, [pc, #36]	; (800fbb0 <tcp_next_iss+0x3c>)
 800fb8a:	480a      	ldr	r0, [pc, #40]	; (800fbb4 <tcp_next_iss+0x40>)
 800fb8c:	f005 fb40 	bl	8015210 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fb90:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <tcp_next_iss+0x44>)
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <tcp_next_iss+0x48>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4413      	add	r3, r2
 800fb9a:	4a07      	ldr	r2, [pc, #28]	; (800fbb8 <tcp_next_iss+0x44>)
 800fb9c:	6013      	str	r3, [r2, #0]
  return iss;
 800fb9e:	4b06      	ldr	r3, [pc, #24]	; (800fbb8 <tcp_next_iss+0x44>)
 800fba0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	08017648 	.word	0x08017648
 800fbb0:	08017d38 	.word	0x08017d38
 800fbb4:	0801768c 	.word	0x0801768c
 800fbb8:	20000014 	.word	0x20000014
 800fbbc:	2000aef4 	.word	0x2000aef4

0800fbc0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b086      	sub	sp, #24
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
 800fbcc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d106      	bne.n	800fbe2 <tcp_eff_send_mss_netif+0x22>
 800fbd4:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <tcp_eff_send_mss_netif+0x68>)
 800fbd6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fbda:	4914      	ldr	r1, [pc, #80]	; (800fc2c <tcp_eff_send_mss_netif+0x6c>)
 800fbdc:	4814      	ldr	r0, [pc, #80]	; (800fc30 <tcp_eff_send_mss_netif+0x70>)
 800fbde:	f005 fb17 	bl	8015210 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fbe8:	89fb      	ldrh	r3, [r7, #14]
 800fbea:	e019      	b.n	800fc20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fbf0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fbf2:	8afb      	ldrh	r3, [r7, #22]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d012      	beq.n	800fc1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fbf8:	2328      	movs	r3, #40	; 0x28
 800fbfa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fbfc:	8afa      	ldrh	r2, [r7, #22]
 800fbfe:	8abb      	ldrh	r3, [r7, #20]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d904      	bls.n	800fc0e <tcp_eff_send_mss_netif+0x4e>
 800fc04:	8afa      	ldrh	r2, [r7, #22]
 800fc06:	8abb      	ldrh	r3, [r7, #20]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	e000      	b.n	800fc10 <tcp_eff_send_mss_netif+0x50>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fc12:	8a7a      	ldrh	r2, [r7, #18]
 800fc14:	89fb      	ldrh	r3, [r7, #14]
 800fc16:	4293      	cmp	r3, r2
 800fc18:	bf28      	it	cs
 800fc1a:	4613      	movcs	r3, r2
 800fc1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fc1e:	89fb      	ldrh	r3, [r7, #14]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	08017648 	.word	0x08017648
 800fc2c:	08017d54 	.word	0x08017d54
 800fc30:	0801768c 	.word	0x0801768c

0800fc34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d119      	bne.n	800fc7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc48:	4b10      	ldr	r3, [pc, #64]	; (800fc8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fc4e:	4910      	ldr	r1, [pc, #64]	; (800fc90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc50:	4810      	ldr	r0, [pc, #64]	; (800fc94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc52:	f005 fadd 	bl	8015210 <iprintf>

  while (pcb != NULL) {
 800fc56:	e011      	b.n	800fc7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d108      	bne.n	800fc76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7fe fd22 	bl	800e6b4 <tcp_abort>
      pcb = next;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	60fb      	str	r3, [r7, #12]
 800fc74:	e002      	b.n	800fc7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1ea      	bne.n	800fc58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fc82:	bf00      	nop
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08017648 	.word	0x08017648
 800fc90:	08017d7c 	.word	0x08017d7c
 800fc94:	0801768c 	.word	0x0801768c

0800fc98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d02a      	beq.n	800fcfe <tcp_netif_ip_addr_changed+0x66>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d026      	beq.n	800fcfe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fcb0:	4b15      	ldr	r3, [pc, #84]	; (800fd08 <tcp_netif_ip_addr_changed+0x70>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7ff ffbc 	bl	800fc34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fcbc:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <tcp_netif_ip_addr_changed+0x74>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff ffb6 	bl	800fc34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d017      	beq.n	800fcfe <tcp_netif_ip_addr_changed+0x66>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d013      	beq.n	800fcfe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcd6:	4b0e      	ldr	r3, [pc, #56]	; (800fd10 <tcp_netif_ip_addr_changed+0x78>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e00c      	b.n	800fcf8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d103      	bne.n	800fcf2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1ef      	bne.n	800fcde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fcfe:	bf00      	nop
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	2000aef0 	.word	0x2000aef0
 800fd0c:	2000aefc 	.word	0x2000aefc
 800fd10:	2000aef8 	.word	0x2000aef8

0800fd14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d007      	beq.n	800fd34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fb53 	bl	800f3d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd3c:	b590      	push	{r4, r7, lr}
 800fd3e:	b08d      	sub	sp, #52	; 0x34
 800fd40:	af04      	add	r7, sp, #16
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d105      	bne.n	800fd58 <tcp_input+0x1c>
 800fd4c:	4b9b      	ldr	r3, [pc, #620]	; (800ffbc <tcp_input+0x280>)
 800fd4e:	2283      	movs	r2, #131	; 0x83
 800fd50:	499b      	ldr	r1, [pc, #620]	; (800ffc0 <tcp_input+0x284>)
 800fd52:	489c      	ldr	r0, [pc, #624]	; (800ffc4 <tcp_input+0x288>)
 800fd54:	f005 fa5c 	bl	8015210 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	4a9a      	ldr	r2, [pc, #616]	; (800ffc8 <tcp_input+0x28c>)
 800fd5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	895b      	ldrh	r3, [r3, #10]
 800fd64:	2b13      	cmp	r3, #19
 800fd66:	f240 83c2 	bls.w	80104ee <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd6a:	4b98      	ldr	r3, [pc, #608]	; (800ffcc <tcp_input+0x290>)
 800fd6c:	695a      	ldr	r2, [r3, #20]
 800fd6e:	4b97      	ldr	r3, [pc, #604]	; (800ffcc <tcp_input+0x290>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4619      	mov	r1, r3
 800fd74:	4610      	mov	r0, r2
 800fd76:	f7fb fbd1 	bl	800b51c <ip4_addr_isbroadcast_u32>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f040 83bb 	bne.w	80104f8 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fd82:	4b92      	ldr	r3, [pc, #584]	; (800ffcc <tcp_input+0x290>)
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd8a:	2be0      	cmp	r3, #224	; 0xe0
 800fd8c:	f000 83b4 	beq.w	80104f8 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fd90:	4b8d      	ldr	r3, [pc, #564]	; (800ffc8 <tcp_input+0x28c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	899b      	ldrh	r3, [r3, #12]
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7f9 fceb 	bl	8009774 <lwip_htons>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	0b1b      	lsrs	r3, r3, #12
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fdaa:	7cbb      	ldrb	r3, [r7, #18]
 800fdac:	2b13      	cmp	r3, #19
 800fdae:	f240 83a3 	bls.w	80104f8 <tcp_input+0x7bc>
 800fdb2:	7cbb      	ldrb	r3, [r7, #18]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	891b      	ldrh	r3, [r3, #8]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	f200 839c 	bhi.w	80104f8 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fdc0:	7cbb      	ldrb	r3, [r7, #18]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	3b14      	subs	r3, #20
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	4b81      	ldr	r3, [pc, #516]	; (800ffd0 <tcp_input+0x294>)
 800fdca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fdcc:	4b81      	ldr	r3, [pc, #516]	; (800ffd4 <tcp_input+0x298>)
 800fdce:	2200      	movs	r2, #0
 800fdd0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	895a      	ldrh	r2, [r3, #10]
 800fdd6:	7cbb      	ldrb	r3, [r7, #18]
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d309      	bcc.n	800fdf2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fdde:	4b7c      	ldr	r3, [pc, #496]	; (800ffd0 <tcp_input+0x294>)
 800fde0:	881a      	ldrh	r2, [r3, #0]
 800fde2:	4b7d      	ldr	r3, [pc, #500]	; (800ffd8 <tcp_input+0x29c>)
 800fde4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fde6:	7cbb      	ldrb	r3, [r7, #18]
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7fd fce6 	bl	800d7bc <pbuf_remove_header>
 800fdf0:	e04e      	b.n	800fe90 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d105      	bne.n	800fe06 <tcp_input+0xca>
 800fdfa:	4b70      	ldr	r3, [pc, #448]	; (800ffbc <tcp_input+0x280>)
 800fdfc:	22c2      	movs	r2, #194	; 0xc2
 800fdfe:	4977      	ldr	r1, [pc, #476]	; (800ffdc <tcp_input+0x2a0>)
 800fe00:	4870      	ldr	r0, [pc, #448]	; (800ffc4 <tcp_input+0x288>)
 800fe02:	f005 fa05 	bl	8015210 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fe06:	2114      	movs	r1, #20
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7fd fcd7 	bl	800d7bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	895a      	ldrh	r2, [r3, #10]
 800fe12:	4b71      	ldr	r3, [pc, #452]	; (800ffd8 <tcp_input+0x29c>)
 800fe14:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fe16:	4b6e      	ldr	r3, [pc, #440]	; (800ffd0 <tcp_input+0x294>)
 800fe18:	881a      	ldrh	r2, [r3, #0]
 800fe1a:	4b6f      	ldr	r3, [pc, #444]	; (800ffd8 <tcp_input+0x29c>)
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fe22:	4b6d      	ldr	r3, [pc, #436]	; (800ffd8 <tcp_input+0x29c>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	4619      	mov	r1, r3
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7fd fcc7 	bl	800d7bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	8a3a      	ldrh	r2, [r7, #16]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	f200 835b 	bhi.w	80104f2 <tcp_input+0x7b6>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	4a64      	ldr	r2, [pc, #400]	; (800ffd4 <tcp_input+0x298>)
 800fe44:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	8a3a      	ldrh	r2, [r7, #16]
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fd fcb4 	bl	800d7bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	891a      	ldrh	r2, [r3, #8]
 800fe58:	8a3b      	ldrh	r3, [r7, #16]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	895b      	ldrh	r3, [r3, #10]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d005      	beq.n	800fe76 <tcp_input+0x13a>
 800fe6a:	4b54      	ldr	r3, [pc, #336]	; (800ffbc <tcp_input+0x280>)
 800fe6c:	22df      	movs	r2, #223	; 0xdf
 800fe6e:	495c      	ldr	r1, [pc, #368]	; (800ffe0 <tcp_input+0x2a4>)
 800fe70:	4854      	ldr	r0, [pc, #336]	; (800ffc4 <tcp_input+0x288>)
 800fe72:	f005 f9cd 	bl	8015210 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	891a      	ldrh	r2, [r3, #8]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	891b      	ldrh	r3, [r3, #8]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d005      	beq.n	800fe90 <tcp_input+0x154>
 800fe84:	4b4d      	ldr	r3, [pc, #308]	; (800ffbc <tcp_input+0x280>)
 800fe86:	22e0      	movs	r2, #224	; 0xe0
 800fe88:	4956      	ldr	r1, [pc, #344]	; (800ffe4 <tcp_input+0x2a8>)
 800fe8a:	484e      	ldr	r0, [pc, #312]	; (800ffc4 <tcp_input+0x288>)
 800fe8c:	f005 f9c0 	bl	8015210 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fe90:	4b4d      	ldr	r3, [pc, #308]	; (800ffc8 <tcp_input+0x28c>)
 800fe92:	681c      	ldr	r4, [r3, #0]
 800fe94:	4b4c      	ldr	r3, [pc, #304]	; (800ffc8 <tcp_input+0x28c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f9 fc69 	bl	8009774 <lwip_htons>
 800fea2:	4603      	mov	r3, r0
 800fea4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fea6:	4b48      	ldr	r3, [pc, #288]	; (800ffc8 <tcp_input+0x28c>)
 800fea8:	681c      	ldr	r4, [r3, #0]
 800feaa:	4b47      	ldr	r3, [pc, #284]	; (800ffc8 <tcp_input+0x28c>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	885b      	ldrh	r3, [r3, #2]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7f9 fc5e 	bl	8009774 <lwip_htons>
 800feb8:	4603      	mov	r3, r0
 800feba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800febc:	4b42      	ldr	r3, [pc, #264]	; (800ffc8 <tcp_input+0x28c>)
 800febe:	681c      	ldr	r4, [r3, #0]
 800fec0:	4b41      	ldr	r3, [pc, #260]	; (800ffc8 <tcp_input+0x28c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7f9 fc69 	bl	800979e <lwip_htonl>
 800fecc:	4603      	mov	r3, r0
 800fece:	6063      	str	r3, [r4, #4]
 800fed0:	6863      	ldr	r3, [r4, #4]
 800fed2:	4a45      	ldr	r2, [pc, #276]	; (800ffe8 <tcp_input+0x2ac>)
 800fed4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fed6:	4b3c      	ldr	r3, [pc, #240]	; (800ffc8 <tcp_input+0x28c>)
 800fed8:	681c      	ldr	r4, [r3, #0]
 800feda:	4b3b      	ldr	r3, [pc, #236]	; (800ffc8 <tcp_input+0x28c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f9 fc5c 	bl	800979e <lwip_htonl>
 800fee6:	4603      	mov	r3, r0
 800fee8:	60a3      	str	r3, [r4, #8]
 800feea:	68a3      	ldr	r3, [r4, #8]
 800feec:	4a3f      	ldr	r2, [pc, #252]	; (800ffec <tcp_input+0x2b0>)
 800feee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fef0:	4b35      	ldr	r3, [pc, #212]	; (800ffc8 <tcp_input+0x28c>)
 800fef2:	681c      	ldr	r4, [r3, #0]
 800fef4:	4b34      	ldr	r3, [pc, #208]	; (800ffc8 <tcp_input+0x28c>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	89db      	ldrh	r3, [r3, #14]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7f9 fc39 	bl	8009774 <lwip_htons>
 800ff02:	4603      	mov	r3, r0
 800ff04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ff06:	4b30      	ldr	r3, [pc, #192]	; (800ffc8 <tcp_input+0x28c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	899b      	ldrh	r3, [r3, #12]
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7f9 fc30 	bl	8009774 <lwip_htons>
 800ff14:	4603      	mov	r3, r0
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff1c:	b2da      	uxtb	r2, r3
 800ff1e:	4b34      	ldr	r3, [pc, #208]	; (800fff0 <tcp_input+0x2b4>)
 800ff20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	891a      	ldrh	r2, [r3, #8]
 800ff26:	4b33      	ldr	r3, [pc, #204]	; (800fff4 <tcp_input+0x2b8>)
 800ff28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ff2a:	4b31      	ldr	r3, [pc, #196]	; (800fff0 <tcp_input+0x2b4>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	f003 0303 	and.w	r3, r3, #3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00c      	beq.n	800ff50 <tcp_input+0x214>
    tcplen++;
 800ff36:	4b2f      	ldr	r3, [pc, #188]	; (800fff4 <tcp_input+0x2b8>)
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	4b2d      	ldr	r3, [pc, #180]	; (800fff4 <tcp_input+0x2b8>)
 800ff40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	891a      	ldrh	r2, [r3, #8]
 800ff46:	4b2b      	ldr	r3, [pc, #172]	; (800fff4 <tcp_input+0x2b8>)
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	f200 82d3 	bhi.w	80104f6 <tcp_input+0x7ba>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff50:	2300      	movs	r3, #0
 800ff52:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff54:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <tcp_input+0x2bc>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	61fb      	str	r3, [r7, #28]
 800ff5a:	e09d      	b.n	8010098 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	7d1b      	ldrb	r3, [r3, #20]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d105      	bne.n	800ff70 <tcp_input+0x234>
 800ff64:	4b15      	ldr	r3, [pc, #84]	; (800ffbc <tcp_input+0x280>)
 800ff66:	22fb      	movs	r2, #251	; 0xfb
 800ff68:	4924      	ldr	r1, [pc, #144]	; (800fffc <tcp_input+0x2c0>)
 800ff6a:	4816      	ldr	r0, [pc, #88]	; (800ffc4 <tcp_input+0x288>)
 800ff6c:	f005 f950 	bl	8015210 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	7d1b      	ldrb	r3, [r3, #20]
 800ff74:	2b0a      	cmp	r3, #10
 800ff76:	d105      	bne.n	800ff84 <tcp_input+0x248>
 800ff78:	4b10      	ldr	r3, [pc, #64]	; (800ffbc <tcp_input+0x280>)
 800ff7a:	22fc      	movs	r2, #252	; 0xfc
 800ff7c:	4920      	ldr	r1, [pc, #128]	; (8010000 <tcp_input+0x2c4>)
 800ff7e:	4811      	ldr	r0, [pc, #68]	; (800ffc4 <tcp_input+0x288>)
 800ff80:	f005 f946 	bl	8015210 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	7d1b      	ldrb	r3, [r3, #20]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d105      	bne.n	800ff98 <tcp_input+0x25c>
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <tcp_input+0x280>)
 800ff8e:	22fd      	movs	r2, #253	; 0xfd
 800ff90:	491c      	ldr	r1, [pc, #112]	; (8010004 <tcp_input+0x2c8>)
 800ff92:	480c      	ldr	r0, [pc, #48]	; (800ffc4 <tcp_input+0x288>)
 800ff94:	f005 f93c 	bl	8015210 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	7a1b      	ldrb	r3, [r3, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d033      	beq.n	8010008 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	7a1a      	ldrb	r2, [r3, #8]
 800ffa4:	4b09      	ldr	r3, [pc, #36]	; (800ffcc <tcp_input+0x290>)
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffac:	3301      	adds	r3, #1
 800ffae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d029      	beq.n	8010008 <tcp_input+0x2cc>
      prev = pcb;
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	61bb      	str	r3, [r7, #24]
      continue;
 800ffb8:	e06b      	b.n	8010092 <tcp_input+0x356>
 800ffba:	bf00      	nop
 800ffbc:	08017db0 	.word	0x08017db0
 800ffc0:	08017de4 	.word	0x08017de4
 800ffc4:	08017dfc 	.word	0x08017dfc
 800ffc8:	20007274 	.word	0x20007274
 800ffcc:	200074c0 	.word	0x200074c0
 800ffd0:	20007278 	.word	0x20007278
 800ffd4:	2000727c 	.word	0x2000727c
 800ffd8:	2000727a 	.word	0x2000727a
 800ffdc:	08017e24 	.word	0x08017e24
 800ffe0:	08017e34 	.word	0x08017e34
 800ffe4:	08017e40 	.word	0x08017e40
 800ffe8:	20007284 	.word	0x20007284
 800ffec:	20007288 	.word	0x20007288
 800fff0:	20007290 	.word	0x20007290
 800fff4:	2000728e 	.word	0x2000728e
 800fff8:	2000aef0 	.word	0x2000aef0
 800fffc:	08017e60 	.word	0x08017e60
 8010000:	08017e88 	.word	0x08017e88
 8010004:	08017eb4 	.word	0x08017eb4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	8b1a      	ldrh	r2, [r3, #24]
 801000c:	4b94      	ldr	r3, [pc, #592]	; (8010260 <tcp_input+0x524>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	b29b      	uxth	r3, r3
 8010014:	429a      	cmp	r2, r3
 8010016:	d13a      	bne.n	801008e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	8ada      	ldrh	r2, [r3, #22]
 801001c:	4b90      	ldr	r3, [pc, #576]	; (8010260 <tcp_input+0x524>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	885b      	ldrh	r3, [r3, #2]
 8010022:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010024:	429a      	cmp	r2, r3
 8010026:	d132      	bne.n	801008e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	685a      	ldr	r2, [r3, #4]
 801002c:	4b8d      	ldr	r3, [pc, #564]	; (8010264 <tcp_input+0x528>)
 801002e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010030:	429a      	cmp	r2, r3
 8010032:	d12c      	bne.n	801008e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	4b8a      	ldr	r3, [pc, #552]	; (8010264 <tcp_input+0x528>)
 801003a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801003c:	429a      	cmp	r2, r3
 801003e:	d126      	bne.n	801008e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	68da      	ldr	r2, [r3, #12]
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	429a      	cmp	r2, r3
 8010048:	d106      	bne.n	8010058 <tcp_input+0x31c>
 801004a:	4b87      	ldr	r3, [pc, #540]	; (8010268 <tcp_input+0x52c>)
 801004c:	f240 120d 	movw	r2, #269	; 0x10d
 8010050:	4986      	ldr	r1, [pc, #536]	; (801026c <tcp_input+0x530>)
 8010052:	4887      	ldr	r0, [pc, #540]	; (8010270 <tcp_input+0x534>)
 8010054:	f005 f8dc 	bl	8015210 <iprintf>
      if (prev != NULL) {
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00a      	beq.n	8010074 <tcp_input+0x338>
        prev->next = pcb->next;
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	68da      	ldr	r2, [r3, #12]
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010066:	4b83      	ldr	r3, [pc, #524]	; (8010274 <tcp_input+0x538>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801006e:	4a81      	ldr	r2, [pc, #516]	; (8010274 <tcp_input+0x538>)
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	68da      	ldr	r2, [r3, #12]
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	429a      	cmp	r2, r3
 801007c:	d111      	bne.n	80100a2 <tcp_input+0x366>
 801007e:	4b7a      	ldr	r3, [pc, #488]	; (8010268 <tcp_input+0x52c>)
 8010080:	f240 1215 	movw	r2, #277	; 0x115
 8010084:	497c      	ldr	r1, [pc, #496]	; (8010278 <tcp_input+0x53c>)
 8010086:	487a      	ldr	r0, [pc, #488]	; (8010270 <tcp_input+0x534>)
 8010088:	f005 f8c2 	bl	8015210 <iprintf>
      break;
 801008c:	e009      	b.n	80100a2 <tcp_input+0x366>
    }
    prev = pcb;
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	61fb      	str	r3, [r7, #28]
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	2b00      	cmp	r3, #0
 801009c:	f47f af5e 	bne.w	800ff5c <tcp_input+0x220>
 80100a0:	e000      	b.n	80100a4 <tcp_input+0x368>
      break;
 80100a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f040 8095 	bne.w	80101d6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100ac:	4b73      	ldr	r3, [pc, #460]	; (801027c <tcp_input+0x540>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	61fb      	str	r3, [r7, #28]
 80100b2:	e03f      	b.n	8010134 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	7d1b      	ldrb	r3, [r3, #20]
 80100b8:	2b0a      	cmp	r3, #10
 80100ba:	d006      	beq.n	80100ca <tcp_input+0x38e>
 80100bc:	4b6a      	ldr	r3, [pc, #424]	; (8010268 <tcp_input+0x52c>)
 80100be:	f240 121f 	movw	r2, #287	; 0x11f
 80100c2:	496f      	ldr	r1, [pc, #444]	; (8010280 <tcp_input+0x544>)
 80100c4:	486a      	ldr	r0, [pc, #424]	; (8010270 <tcp_input+0x534>)
 80100c6:	f005 f8a3 	bl	8015210 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	7a1b      	ldrb	r3, [r3, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d009      	beq.n	80100e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	7a1a      	ldrb	r2, [r3, #8]
 80100d6:	4b63      	ldr	r3, [pc, #396]	; (8010264 <tcp_input+0x528>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100de:	3301      	adds	r3, #1
 80100e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d122      	bne.n	801012c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	8b1a      	ldrh	r2, [r3, #24]
 80100ea:	4b5d      	ldr	r3, [pc, #372]	; (8010260 <tcp_input+0x524>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d11b      	bne.n	801012e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	8ada      	ldrh	r2, [r3, #22]
 80100fa:	4b59      	ldr	r3, [pc, #356]	; (8010260 <tcp_input+0x524>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	885b      	ldrh	r3, [r3, #2]
 8010100:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010102:	429a      	cmp	r2, r3
 8010104:	d113      	bne.n	801012e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	685a      	ldr	r2, [r3, #4]
 801010a:	4b56      	ldr	r3, [pc, #344]	; (8010264 <tcp_input+0x528>)
 801010c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801010e:	429a      	cmp	r2, r3
 8010110:	d10d      	bne.n	801012e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	4b53      	ldr	r3, [pc, #332]	; (8010264 <tcp_input+0x528>)
 8010118:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801011a:	429a      	cmp	r2, r3
 801011c:	d107      	bne.n	801012e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801011e:	69f8      	ldr	r0, [r7, #28]
 8010120:	f000 fb4e 	bl	80107c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7fd fbcf 	bl	800d8c8 <pbuf_free>
        return;
 801012a:	e1ea      	b.n	8010502 <tcp_input+0x7c6>
        continue;
 801012c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1bc      	bne.n	80100b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801013a:	2300      	movs	r3, #0
 801013c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801013e:	4b51      	ldr	r3, [pc, #324]	; (8010284 <tcp_input+0x548>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	617b      	str	r3, [r7, #20]
 8010144:	e02a      	b.n	801019c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	7a1b      	ldrb	r3, [r3, #8]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00c      	beq.n	8010168 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	7a1a      	ldrb	r2, [r3, #8]
 8010152:	4b44      	ldr	r3, [pc, #272]	; (8010264 <tcp_input+0x528>)
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801015a:	3301      	adds	r3, #1
 801015c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801015e:	429a      	cmp	r2, r3
 8010160:	d002      	beq.n	8010168 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	61bb      	str	r3, [r7, #24]
        continue;
 8010166:	e016      	b.n	8010196 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	8ada      	ldrh	r2, [r3, #22]
 801016c:	4b3c      	ldr	r3, [pc, #240]	; (8010260 <tcp_input+0x524>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	885b      	ldrh	r3, [r3, #2]
 8010172:	b29b      	uxth	r3, r3
 8010174:	429a      	cmp	r2, r3
 8010176:	d10c      	bne.n	8010192 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	4b39      	ldr	r3, [pc, #228]	; (8010264 <tcp_input+0x528>)
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	d00f      	beq.n	80101a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00d      	beq.n	80101a6 <tcp_input+0x46a>
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d009      	beq.n	80101a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	617b      	str	r3, [r7, #20]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1d1      	bne.n	8010146 <tcp_input+0x40a>
 80101a2:	e000      	b.n	80101a6 <tcp_input+0x46a>
            break;
 80101a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d014      	beq.n	80101d6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00a      	beq.n	80101c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	68da      	ldr	r2, [r3, #12]
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80101ba:	4b32      	ldr	r3, [pc, #200]	; (8010284 <tcp_input+0x548>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80101c2:	4a30      	ldr	r2, [pc, #192]	; (8010284 <tcp_input+0x548>)
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80101c8:	6978      	ldr	r0, [r7, #20]
 80101ca:	f000 f9fb 	bl	80105c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7fd fb7a 	bl	800d8c8 <pbuf_free>
      return;
 80101d4:	e195      	b.n	8010502 <tcp_input+0x7c6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f000 815e 	beq.w	801049a <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80101de:	4b2a      	ldr	r3, [pc, #168]	; (8010288 <tcp_input+0x54c>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	891a      	ldrh	r2, [r3, #8]
 80101e8:	4b27      	ldr	r3, [pc, #156]	; (8010288 <tcp_input+0x54c>)
 80101ea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80101ec:	4a26      	ldr	r2, [pc, #152]	; (8010288 <tcp_input+0x54c>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80101f2:	4b1b      	ldr	r3, [pc, #108]	; (8010260 <tcp_input+0x524>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a24      	ldr	r2, [pc, #144]	; (8010288 <tcp_input+0x54c>)
 80101f8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80101fa:	4b24      	ldr	r3, [pc, #144]	; (801028c <tcp_input+0x550>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010200:	4b23      	ldr	r3, [pc, #140]	; (8010290 <tcp_input+0x554>)
 8010202:	2200      	movs	r2, #0
 8010204:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010206:	4b23      	ldr	r3, [pc, #140]	; (8010294 <tcp_input+0x558>)
 8010208:	2200      	movs	r2, #0
 801020a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801020c:	4b22      	ldr	r3, [pc, #136]	; (8010298 <tcp_input+0x55c>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 0308 	and.w	r3, r3, #8
 8010214:	2b00      	cmp	r3, #0
 8010216:	d006      	beq.n	8010226 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	7b5b      	ldrb	r3, [r3, #13]
 801021c:	f043 0301 	orr.w	r3, r3, #1
 8010220:	b2da      	uxtb	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801022a:	2b00      	cmp	r3, #0
 801022c:	d038      	beq.n	80102a0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801022e:	69f8      	ldr	r0, [r7, #28]
 8010230:	f7ff f854 	bl	800f2dc <tcp_process_refused_data>
 8010234:	4603      	mov	r3, r0
 8010236:	f113 0f0d 	cmn.w	r3, #13
 801023a:	d007      	beq.n	801024c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010240:	2b00      	cmp	r3, #0
 8010242:	d02d      	beq.n	80102a0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010244:	4b15      	ldr	r3, [pc, #84]	; (801029c <tcp_input+0x560>)
 8010246:	881b      	ldrh	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d029      	beq.n	80102a0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010250:	2b00      	cmp	r3, #0
 8010252:	f040 8104 	bne.w	801045e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010256:	69f8      	ldr	r0, [r7, #28]
 8010258:	f003 fe34 	bl	8013ec4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801025c:	e0ff      	b.n	801045e <tcp_input+0x722>
 801025e:	bf00      	nop
 8010260:	20007274 	.word	0x20007274
 8010264:	200074c0 	.word	0x200074c0
 8010268:	08017db0 	.word	0x08017db0
 801026c:	08017edc 	.word	0x08017edc
 8010270:	08017dfc 	.word	0x08017dfc
 8010274:	2000aef0 	.word	0x2000aef0
 8010278:	08017f08 	.word	0x08017f08
 801027c:	2000af00 	.word	0x2000af00
 8010280:	08017f34 	.word	0x08017f34
 8010284:	2000aef8 	.word	0x2000aef8
 8010288:	20007264 	.word	0x20007264
 801028c:	20007294 	.word	0x20007294
 8010290:	20007291 	.word	0x20007291
 8010294:	2000728c 	.word	0x2000728c
 8010298:	20007290 	.word	0x20007290
 801029c:	2000728e 	.word	0x2000728e
      }
    }
    tcp_input_pcb = pcb;
 80102a0:	4a99      	ldr	r2, [pc, #612]	; (8010508 <tcp_input+0x7cc>)
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80102a6:	69f8      	ldr	r0, [r7, #28]
 80102a8:	f000 fb06 	bl	80108b8 <tcp_process>
 80102ac:	4603      	mov	r3, r0
 80102ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80102b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102b4:	f113 0f0d 	cmn.w	r3, #13
 80102b8:	f000 80dc 	beq.w	8010474 <tcp_input+0x738>
      if (recv_flags & TF_RESET) {
 80102bc:	4b93      	ldr	r3, [pc, #588]	; (801050c <tcp_input+0x7d0>)
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	f003 0308 	and.w	r3, r3, #8
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d015      	beq.n	80102f4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d008      	beq.n	80102e4 <tcp_input+0x5a8>
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102d8:	69fa      	ldr	r2, [r7, #28]
 80102da:	6912      	ldr	r2, [r2, #16]
 80102dc:	f06f 010d 	mvn.w	r1, #13
 80102e0:	4610      	mov	r0, r2
 80102e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80102e4:	69f9      	ldr	r1, [r7, #28]
 80102e6:	488a      	ldr	r0, [pc, #552]	; (8010510 <tcp_input+0x7d4>)
 80102e8:	f7ff fbb0 	bl	800fa4c <tcp_pcb_remove>
        tcp_free(pcb);
 80102ec:	69f8      	ldr	r0, [r7, #28]
 80102ee:	f7fd ff01 	bl	800e0f4 <tcp_free>
 80102f2:	e0bf      	b.n	8010474 <tcp_input+0x738>
      } else {
        err = ERR_OK;
 80102f4:	2300      	movs	r3, #0
 80102f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80102f8:	4b86      	ldr	r3, [pc, #536]	; (8010514 <tcp_input+0x7d8>)
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d01d      	beq.n	801033c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010300:	4b84      	ldr	r3, [pc, #528]	; (8010514 <tcp_input+0x7d8>)
 8010302:	881b      	ldrh	r3, [r3, #0]
 8010304:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00a      	beq.n	8010326 <tcp_input+0x5ea>
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010316:	69fa      	ldr	r2, [r7, #28]
 8010318:	6910      	ldr	r0, [r2, #16]
 801031a:	89fa      	ldrh	r2, [r7, #14]
 801031c:	69f9      	ldr	r1, [r7, #28]
 801031e:	4798      	blx	r3
 8010320:	4603      	mov	r3, r0
 8010322:	74fb      	strb	r3, [r7, #19]
 8010324:	e001      	b.n	801032a <tcp_input+0x5ee>
 8010326:	2300      	movs	r3, #0
 8010328:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801032a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801032e:	f113 0f0d 	cmn.w	r3, #13
 8010332:	f000 8096 	beq.w	8010462 <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010336:	4b77      	ldr	r3, [pc, #476]	; (8010514 <tcp_input+0x7d8>)
 8010338:	2200      	movs	r2, #0
 801033a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801033c:	69f8      	ldr	r0, [r7, #28]
 801033e:	f000 f901 	bl	8010544 <tcp_input_delayed_close>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	f040 808e 	bne.w	8010466 <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801034a:	4b73      	ldr	r3, [pc, #460]	; (8010518 <tcp_input+0x7dc>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d041      	beq.n	80103d6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010356:	2b00      	cmp	r3, #0
 8010358:	d006      	beq.n	8010368 <tcp_input+0x62c>
 801035a:	4b70      	ldr	r3, [pc, #448]	; (801051c <tcp_input+0x7e0>)
 801035c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010360:	496f      	ldr	r1, [pc, #444]	; (8010520 <tcp_input+0x7e4>)
 8010362:	4870      	ldr	r0, [pc, #448]	; (8010524 <tcp_input+0x7e8>)
 8010364:	f004 ff54 	bl	8015210 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	8b5b      	ldrh	r3, [r3, #26]
 801036c:	f003 0310 	and.w	r3, r3, #16
 8010370:	2b00      	cmp	r3, #0
 8010372:	d008      	beq.n	8010386 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010374:	4b68      	ldr	r3, [pc, #416]	; (8010518 <tcp_input+0x7dc>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4618      	mov	r0, r3
 801037a:	f7fd faa5 	bl	800d8c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801037e:	69f8      	ldr	r0, [r7, #28]
 8010380:	f7fe f998 	bl	800e6b4 <tcp_abort>
            goto aborted;
 8010384:	e076      	b.n	8010474 <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00c      	beq.n	80103aa <tcp_input+0x66e>
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	6918      	ldr	r0, [r3, #16]
 801039a:	4b5f      	ldr	r3, [pc, #380]	; (8010518 <tcp_input+0x7dc>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	2300      	movs	r3, #0
 80103a0:	69f9      	ldr	r1, [r7, #28]
 80103a2:	47a0      	blx	r4
 80103a4:	4603      	mov	r3, r0
 80103a6:	74fb      	strb	r3, [r7, #19]
 80103a8:	e008      	b.n	80103bc <tcp_input+0x680>
 80103aa:	4b5b      	ldr	r3, [pc, #364]	; (8010518 <tcp_input+0x7dc>)
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	2300      	movs	r3, #0
 80103b0:	69f9      	ldr	r1, [r7, #28]
 80103b2:	2000      	movs	r0, #0
 80103b4:	f7ff f884 	bl	800f4c0 <tcp_recv_null>
 80103b8:	4603      	mov	r3, r0
 80103ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80103bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103c0:	f113 0f0d 	cmn.w	r3, #13
 80103c4:	d051      	beq.n	801046a <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80103c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80103ce:	4b52      	ldr	r3, [pc, #328]	; (8010518 <tcp_input+0x7dc>)
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80103d6:	4b4d      	ldr	r3, [pc, #308]	; (801050c <tcp_input+0x7d0>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	f003 0320 	and.w	r3, r3, #32
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d030      	beq.n	8010444 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d009      	beq.n	80103fe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80103f2:	7b52      	ldrb	r2, [r2, #13]
 80103f4:	f042 0220 	orr.w	r2, r2, #32
 80103f8:	b2d2      	uxtb	r2, r2
 80103fa:	735a      	strb	r2, [r3, #13]
 80103fc:	e022      	b.n	8010444 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010402:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010406:	d005      	beq.n	8010414 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801040c:	3301      	adds	r3, #1
 801040e:	b29a      	uxth	r2, r3
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00b      	beq.n	8010436 <tcp_input+0x6fa>
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	6918      	ldr	r0, [r3, #16]
 8010428:	2300      	movs	r3, #0
 801042a:	2200      	movs	r2, #0
 801042c:	69f9      	ldr	r1, [r7, #28]
 801042e:	47a0      	blx	r4
 8010430:	4603      	mov	r3, r0
 8010432:	74fb      	strb	r3, [r7, #19]
 8010434:	e001      	b.n	801043a <tcp_input+0x6fe>
 8010436:	2300      	movs	r3, #0
 8010438:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801043a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801043e:	f113 0f0d 	cmn.w	r3, #13
 8010442:	d014      	beq.n	801046e <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010444:	4b30      	ldr	r3, [pc, #192]	; (8010508 <tcp_input+0x7cc>)
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801044a:	69f8      	ldr	r0, [r7, #28]
 801044c:	f000 f87a 	bl	8010544 <tcp_input_delayed_close>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d10d      	bne.n	8010472 <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010456:	69f8      	ldr	r0, [r7, #28]
 8010458:	f002 ff16 	bl	8013288 <tcp_output>
 801045c:	e00a      	b.n	8010474 <tcp_input+0x738>
        goto aborted;
 801045e:	bf00      	nop
 8010460:	e008      	b.n	8010474 <tcp_input+0x738>
              goto aborted;
 8010462:	bf00      	nop
 8010464:	e006      	b.n	8010474 <tcp_input+0x738>
          goto aborted;
 8010466:	bf00      	nop
 8010468:	e004      	b.n	8010474 <tcp_input+0x738>
            goto aborted;
 801046a:	bf00      	nop
 801046c:	e002      	b.n	8010474 <tcp_input+0x738>
              goto aborted;
 801046e:	bf00      	nop
 8010470:	e000      	b.n	8010474 <tcp_input+0x738>
          goto aborted;
 8010472:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8010474:	4b24      	ldr	r3, [pc, #144]	; (8010508 <tcp_input+0x7cc>)
 8010476:	2200      	movs	r2, #0
 8010478:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801047a:	4b27      	ldr	r3, [pc, #156]	; (8010518 <tcp_input+0x7dc>)
 801047c:	2200      	movs	r2, #0
 801047e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010480:	4b29      	ldr	r3, [pc, #164]	; (8010528 <tcp_input+0x7ec>)
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d03b      	beq.n	8010500 <tcp_input+0x7c4>
      pbuf_free(inseg.p);
 8010488:	4b27      	ldr	r3, [pc, #156]	; (8010528 <tcp_input+0x7ec>)
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	f7fd fa1b 	bl	800d8c8 <pbuf_free>
      inseg.p = NULL;
 8010492:	4b25      	ldr	r3, [pc, #148]	; (8010528 <tcp_input+0x7ec>)
 8010494:	2200      	movs	r2, #0
 8010496:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010498:	e032      	b.n	8010500 <tcp_input+0x7c4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801049a:	4b24      	ldr	r3, [pc, #144]	; (801052c <tcp_input+0x7f0>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	899b      	ldrh	r3, [r3, #12]
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7f9 f966 	bl	8009774 <lwip_htons>
 80104a8:	4603      	mov	r3, r0
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	f003 0304 	and.w	r3, r3, #4
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d118      	bne.n	80104e6 <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104b4:	4b1e      	ldr	r3, [pc, #120]	; (8010530 <tcp_input+0x7f4>)
 80104b6:	6819      	ldr	r1, [r3, #0]
 80104b8:	4b1e      	ldr	r3, [pc, #120]	; (8010534 <tcp_input+0x7f8>)
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	461a      	mov	r2, r3
 80104be:	4b1e      	ldr	r3, [pc, #120]	; (8010538 <tcp_input+0x7fc>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104c4:	4b19      	ldr	r3, [pc, #100]	; (801052c <tcp_input+0x7f0>)
 80104c6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104c8:	885b      	ldrh	r3, [r3, #2]
 80104ca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104cc:	4a17      	ldr	r2, [pc, #92]	; (801052c <tcp_input+0x7f0>)
 80104ce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d0:	8812      	ldrh	r2, [r2, #0]
 80104d2:	b292      	uxth	r2, r2
 80104d4:	9202      	str	r2, [sp, #8]
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	4b18      	ldr	r3, [pc, #96]	; (801053c <tcp_input+0x800>)
 80104da:	9300      	str	r3, [sp, #0]
 80104dc:	4b18      	ldr	r3, [pc, #96]	; (8010540 <tcp_input+0x804>)
 80104de:	4602      	mov	r2, r0
 80104e0:	2000      	movs	r0, #0
 80104e2:	f003 fc9d 	bl	8013e20 <tcp_rst>
    pbuf_free(p);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7fd f9ee 	bl	800d8c8 <pbuf_free>
  return;
 80104ec:	e008      	b.n	8010500 <tcp_input+0x7c4>
    goto dropped;
 80104ee:	bf00      	nop
 80104f0:	e002      	b.n	80104f8 <tcp_input+0x7bc>
      goto dropped;
 80104f2:	bf00      	nop
 80104f4:	e000      	b.n	80104f8 <tcp_input+0x7bc>
      goto dropped;
 80104f6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fd f9e5 	bl	800d8c8 <pbuf_free>
 80104fe:	e000      	b.n	8010502 <tcp_input+0x7c6>
  return;
 8010500:	bf00      	nop
}
 8010502:	3724      	adds	r7, #36	; 0x24
 8010504:	46bd      	mov	sp, r7
 8010506:	bd90      	pop	{r4, r7, pc}
 8010508:	2000af04 	.word	0x2000af04
 801050c:	20007291 	.word	0x20007291
 8010510:	2000aef0 	.word	0x2000aef0
 8010514:	2000728c 	.word	0x2000728c
 8010518:	20007294 	.word	0x20007294
 801051c:	08017db0 	.word	0x08017db0
 8010520:	08017f64 	.word	0x08017f64
 8010524:	08017dfc 	.word	0x08017dfc
 8010528:	20007264 	.word	0x20007264
 801052c:	20007274 	.word	0x20007274
 8010530:	20007288 	.word	0x20007288
 8010534:	2000728e 	.word	0x2000728e
 8010538:	20007284 	.word	0x20007284
 801053c:	200074d0 	.word	0x200074d0
 8010540:	200074d4 	.word	0x200074d4

08010544 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_input_delayed_close+0x1c>
 8010552:	4b17      	ldr	r3, [pc, #92]	; (80105b0 <tcp_input_delayed_close+0x6c>)
 8010554:	f240 225a 	movw	r2, #602	; 0x25a
 8010558:	4916      	ldr	r1, [pc, #88]	; (80105b4 <tcp_input_delayed_close+0x70>)
 801055a:	4817      	ldr	r0, [pc, #92]	; (80105b8 <tcp_input_delayed_close+0x74>)
 801055c:	f004 fe58 	bl	8015210 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010560:	4b16      	ldr	r3, [pc, #88]	; (80105bc <tcp_input_delayed_close+0x78>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	f003 0310 	and.w	r3, r3, #16
 8010568:	2b00      	cmp	r3, #0
 801056a:	d01c      	beq.n	80105a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8b5b      	ldrh	r3, [r3, #26]
 8010570:	f003 0310 	and.w	r3, r3, #16
 8010574:	2b00      	cmp	r3, #0
 8010576:	d10d      	bne.n	8010594 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801057e:	2b00      	cmp	r3, #0
 8010580:	d008      	beq.n	8010594 <tcp_input_delayed_close+0x50>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	6912      	ldr	r2, [r2, #16]
 801058c:	f06f 010e 	mvn.w	r1, #14
 8010590:	4610      	mov	r0, r2
 8010592:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010594:	6879      	ldr	r1, [r7, #4]
 8010596:	480a      	ldr	r0, [pc, #40]	; (80105c0 <tcp_input_delayed_close+0x7c>)
 8010598:	f7ff fa58 	bl	800fa4c <tcp_pcb_remove>
    tcp_free(pcb);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7fd fda9 	bl	800e0f4 <tcp_free>
    return 1;
 80105a2:	2301      	movs	r3, #1
 80105a4:	e000      	b.n	80105a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	08017db0 	.word	0x08017db0
 80105b4:	08017f80 	.word	0x08017f80
 80105b8:	08017dfc 	.word	0x08017dfc
 80105bc:	20007291 	.word	0x20007291
 80105c0:	2000aef0 	.word	0x2000aef0

080105c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80105c4:	b590      	push	{r4, r7, lr}
 80105c6:	b08b      	sub	sp, #44	; 0x2c
 80105c8:	af04      	add	r7, sp, #16
 80105ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80105cc:	4b6f      	ldr	r3, [pc, #444]	; (801078c <tcp_listen_input+0x1c8>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	f003 0304 	and.w	r3, r3, #4
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f040 80d3 	bne.w	8010780 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d106      	bne.n	80105ee <tcp_listen_input+0x2a>
 80105e0:	4b6b      	ldr	r3, [pc, #428]	; (8010790 <tcp_listen_input+0x1cc>)
 80105e2:	f240 2281 	movw	r2, #641	; 0x281
 80105e6:	496b      	ldr	r1, [pc, #428]	; (8010794 <tcp_listen_input+0x1d0>)
 80105e8:	486b      	ldr	r0, [pc, #428]	; (8010798 <tcp_listen_input+0x1d4>)
 80105ea:	f004 fe11 	bl	8015210 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80105ee:	4b67      	ldr	r3, [pc, #412]	; (801078c <tcp_listen_input+0x1c8>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0310 	and.w	r3, r3, #16
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d019      	beq.n	801062e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105fa:	4b68      	ldr	r3, [pc, #416]	; (801079c <tcp_listen_input+0x1d8>)
 80105fc:	6819      	ldr	r1, [r3, #0]
 80105fe:	4b68      	ldr	r3, [pc, #416]	; (80107a0 <tcp_listen_input+0x1dc>)
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	461a      	mov	r2, r3
 8010604:	4b67      	ldr	r3, [pc, #412]	; (80107a4 <tcp_listen_input+0x1e0>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801060a:	4b67      	ldr	r3, [pc, #412]	; (80107a8 <tcp_listen_input+0x1e4>)
 801060c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801060e:	885b      	ldrh	r3, [r3, #2]
 8010610:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010612:	4a65      	ldr	r2, [pc, #404]	; (80107a8 <tcp_listen_input+0x1e4>)
 8010614:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010616:	8812      	ldrh	r2, [r2, #0]
 8010618:	b292      	uxth	r2, r2
 801061a:	9202      	str	r2, [sp, #8]
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	4b63      	ldr	r3, [pc, #396]	; (80107ac <tcp_listen_input+0x1e8>)
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	4b63      	ldr	r3, [pc, #396]	; (80107b0 <tcp_listen_input+0x1ec>)
 8010624:	4602      	mov	r2, r0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f003 fbfa 	bl	8013e20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801062c:	e0aa      	b.n	8010784 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801062e:	4b57      	ldr	r3, [pc, #348]	; (801078c <tcp_listen_input+0x1c8>)
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 0302 	and.w	r3, r3, #2
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 80a4 	beq.w	8010784 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7d5b      	ldrb	r3, [r3, #21]
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff f861 	bl	800f708 <tcp_alloc>
 8010646:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d111      	bne.n	8010672 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00a      	beq.n	801066c <tcp_listen_input+0xa8>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	6910      	ldr	r0, [r2, #16]
 801065e:	f04f 32ff 	mov.w	r2, #4294967295
 8010662:	2100      	movs	r1, #0
 8010664:	4798      	blx	r3
 8010666:	4603      	mov	r3, r0
 8010668:	74fb      	strb	r3, [r7, #19]
      return;
 801066a:	e08c      	b.n	8010786 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801066c:	23f0      	movs	r3, #240	; 0xf0
 801066e:	74fb      	strb	r3, [r7, #19]
      return;
 8010670:	e089      	b.n	8010786 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010672:	4b50      	ldr	r3, [pc, #320]	; (80107b4 <tcp_listen_input+0x1f0>)
 8010674:	695a      	ldr	r2, [r3, #20]
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801067a:	4b4e      	ldr	r3, [pc, #312]	; (80107b4 <tcp_listen_input+0x1f0>)
 801067c:	691a      	ldr	r2, [r3, #16]
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	8ada      	ldrh	r2, [r3, #22]
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801068a:	4b47      	ldr	r3, [pc, #284]	; (80107a8 <tcp_listen_input+0x1e4>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	b29a      	uxth	r2, r3
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2203      	movs	r2, #3
 801069a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801069c:	4b41      	ldr	r3, [pc, #260]	; (80107a4 <tcp_listen_input+0x1e0>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	1c5a      	adds	r2, r3, #1
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80106ae:	6978      	ldr	r0, [r7, #20]
 80106b0:	f7ff fa60 	bl	800fb74 <tcp_next_iss>
 80106b4:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80106ce:	4b35      	ldr	r3, [pc, #212]	; (80107a4 <tcp_listen_input+0x1e0>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	1e5a      	subs	r2, r3, #1
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	7a5b      	ldrb	r3, [r3, #9]
 80106ea:	f003 030c 	and.w	r3, r3, #12
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	7a1a      	ldrb	r2, [r3, #8]
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80106fc:	4b2e      	ldr	r3, [pc, #184]	; (80107b8 <tcp_listen_input+0x1f4>)
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	60da      	str	r2, [r3, #12]
 8010704:	4a2c      	ldr	r2, [pc, #176]	; (80107b8 <tcp_listen_input+0x1f4>)
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	6013      	str	r3, [r2, #0]
 801070a:	f003 fd4d 	bl	80141a8 <tcp_timer_needed>
 801070e:	4b2b      	ldr	r3, [pc, #172]	; (80107bc <tcp_listen_input+0x1f8>)
 8010710:	2201      	movs	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010714:	6978      	ldr	r0, [r7, #20]
 8010716:	f001 fd93 	bl	8012240 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801071a:	4b23      	ldr	r3, [pc, #140]	; (80107a8 <tcp_listen_input+0x1e4>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	89db      	ldrh	r3, [r3, #14]
 8010720:	b29a      	uxth	r2, r3
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	3304      	adds	r3, #4
 801073c:	4618      	mov	r0, r3
 801073e:	f7fa fc5f 	bl	800b000 <ip4_route>
 8010742:	4601      	mov	r1, r0
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	3304      	adds	r3, #4
 8010748:	461a      	mov	r2, r3
 801074a:	4620      	mov	r0, r4
 801074c:	f7ff fa38 	bl	800fbc0 <tcp_eff_send_mss_netif>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010758:	2112      	movs	r1, #18
 801075a:	6978      	ldr	r0, [r7, #20]
 801075c:	f002 fca4 	bl	80130a8 <tcp_enqueue_flags>
 8010760:	4603      	mov	r3, r0
 8010762:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8010764:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d004      	beq.n	8010776 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801076c:	2100      	movs	r1, #0
 801076e:	6978      	ldr	r0, [r7, #20]
 8010770:	f7fd fee2 	bl	800e538 <tcp_abandon>
      return;
 8010774:	e007      	b.n	8010786 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8010776:	6978      	ldr	r0, [r7, #20]
 8010778:	f002 fd86 	bl	8013288 <tcp_output>
  return;
 801077c:	bf00      	nop
 801077e:	e001      	b.n	8010784 <tcp_listen_input+0x1c0>
    return;
 8010780:	bf00      	nop
 8010782:	e000      	b.n	8010786 <tcp_listen_input+0x1c2>
  return;
 8010784:	bf00      	nop
}
 8010786:	371c      	adds	r7, #28
 8010788:	46bd      	mov	sp, r7
 801078a:	bd90      	pop	{r4, r7, pc}
 801078c:	20007290 	.word	0x20007290
 8010790:	08017db0 	.word	0x08017db0
 8010794:	08017fa8 	.word	0x08017fa8
 8010798:	08017dfc 	.word	0x08017dfc
 801079c:	20007288 	.word	0x20007288
 80107a0:	2000728e 	.word	0x2000728e
 80107a4:	20007284 	.word	0x20007284
 80107a8:	20007274 	.word	0x20007274
 80107ac:	200074d0 	.word	0x200074d0
 80107b0:	200074d4 	.word	0x200074d4
 80107b4:	200074c0 	.word	0x200074c0
 80107b8:	2000aef0 	.word	0x2000aef0
 80107bc:	2000aeec 	.word	0x2000aeec

080107c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b086      	sub	sp, #24
 80107c4:	af04      	add	r7, sp, #16
 80107c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80107c8:	4b30      	ldr	r3, [pc, #192]	; (801088c <tcp_timewait_input+0xcc>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	f003 0304 	and.w	r3, r3, #4
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d154      	bne.n	801087e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <tcp_timewait_input+0x28>
 80107da:	4b2d      	ldr	r3, [pc, #180]	; (8010890 <tcp_timewait_input+0xd0>)
 80107dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80107e0:	492c      	ldr	r1, [pc, #176]	; (8010894 <tcp_timewait_input+0xd4>)
 80107e2:	482d      	ldr	r0, [pc, #180]	; (8010898 <tcp_timewait_input+0xd8>)
 80107e4:	f004 fd14 	bl	8015210 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80107e8:	4b28      	ldr	r3, [pc, #160]	; (801088c <tcp_timewait_input+0xcc>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 0302 	and.w	r3, r3, #2
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d02a      	beq.n	801084a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80107f4:	4b29      	ldr	r3, [pc, #164]	; (801089c <tcp_timewait_input+0xdc>)
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	db2d      	blt.n	801085e <tcp_timewait_input+0x9e>
 8010802:	4b26      	ldr	r3, [pc, #152]	; (801089c <tcp_timewait_input+0xdc>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801080e:	440b      	add	r3, r1
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	dc23      	bgt.n	801085e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010816:	4b22      	ldr	r3, [pc, #136]	; (80108a0 <tcp_timewait_input+0xe0>)
 8010818:	6819      	ldr	r1, [r3, #0]
 801081a:	4b22      	ldr	r3, [pc, #136]	; (80108a4 <tcp_timewait_input+0xe4>)
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	4b1e      	ldr	r3, [pc, #120]	; (801089c <tcp_timewait_input+0xdc>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010826:	4b20      	ldr	r3, [pc, #128]	; (80108a8 <tcp_timewait_input+0xe8>)
 8010828:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801082a:	885b      	ldrh	r3, [r3, #2]
 801082c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801082e:	4a1e      	ldr	r2, [pc, #120]	; (80108a8 <tcp_timewait_input+0xe8>)
 8010830:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010832:	8812      	ldrh	r2, [r2, #0]
 8010834:	b292      	uxth	r2, r2
 8010836:	9202      	str	r2, [sp, #8]
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	4b1c      	ldr	r3, [pc, #112]	; (80108ac <tcp_timewait_input+0xec>)
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	4b1c      	ldr	r3, [pc, #112]	; (80108b0 <tcp_timewait_input+0xf0>)
 8010840:	4602      	mov	r2, r0
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f003 faec 	bl	8013e20 <tcp_rst>
      return;
 8010848:	e01c      	b.n	8010884 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801084a:	4b10      	ldr	r3, [pc, #64]	; (801088c <tcp_timewait_input+0xcc>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010856:	4b17      	ldr	r3, [pc, #92]	; (80108b4 <tcp_timewait_input+0xf4>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801085e:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <tcp_timewait_input+0xe4>)
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00d      	beq.n	8010882 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8b5b      	ldrh	r3, [r3, #26]
 801086a:	f043 0302 	orr.w	r3, r3, #2
 801086e:	b29a      	uxth	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f002 fd07 	bl	8013288 <tcp_output>
  }
  return;
 801087a:	bf00      	nop
 801087c:	e001      	b.n	8010882 <tcp_timewait_input+0xc2>
    return;
 801087e:	bf00      	nop
 8010880:	e000      	b.n	8010884 <tcp_timewait_input+0xc4>
  return;
 8010882:	bf00      	nop
}
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	20007290 	.word	0x20007290
 8010890:	08017db0 	.word	0x08017db0
 8010894:	08017fc8 	.word	0x08017fc8
 8010898:	08017dfc 	.word	0x08017dfc
 801089c:	20007284 	.word	0x20007284
 80108a0:	20007288 	.word	0x20007288
 80108a4:	2000728e 	.word	0x2000728e
 80108a8:	20007274 	.word	0x20007274
 80108ac:	200074d0 	.word	0x200074d0
 80108b0:	200074d4 	.word	0x200074d4
 80108b4:	2000aef4 	.word	0x2000aef4

080108b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80108b8:	b590      	push	{r4, r7, lr}
 80108ba:	b08d      	sub	sp, #52	; 0x34
 80108bc:	af04      	add	r7, sp, #16
 80108be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80108c4:	2300      	movs	r3, #0
 80108c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d106      	bne.n	80108dc <tcp_process+0x24>
 80108ce:	4ba5      	ldr	r3, [pc, #660]	; (8010b64 <tcp_process+0x2ac>)
 80108d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80108d4:	49a4      	ldr	r1, [pc, #656]	; (8010b68 <tcp_process+0x2b0>)
 80108d6:	48a5      	ldr	r0, [pc, #660]	; (8010b6c <tcp_process+0x2b4>)
 80108d8:	f004 fc9a 	bl	8015210 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80108dc:	4ba4      	ldr	r3, [pc, #656]	; (8010b70 <tcp_process+0x2b8>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d04e      	beq.n	8010986 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7d1b      	ldrb	r3, [r3, #20]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d108      	bne.n	8010902 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108f4:	4b9f      	ldr	r3, [pc, #636]	; (8010b74 <tcp_process+0x2bc>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d123      	bne.n	8010944 <tcp_process+0x8c>
        acceptable = 1;
 80108fc:	2301      	movs	r3, #1
 80108fe:	76fb      	strb	r3, [r7, #27]
 8010900:	e020      	b.n	8010944 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010906:	4b9c      	ldr	r3, [pc, #624]	; (8010b78 <tcp_process+0x2c0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	429a      	cmp	r2, r3
 801090c:	d102      	bne.n	8010914 <tcp_process+0x5c>
        acceptable = 1;
 801090e:	2301      	movs	r3, #1
 8010910:	76fb      	strb	r3, [r7, #27]
 8010912:	e017      	b.n	8010944 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010914:	4b98      	ldr	r3, [pc, #608]	; (8010b78 <tcp_process+0x2c0>)
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	db10      	blt.n	8010944 <tcp_process+0x8c>
 8010922:	4b95      	ldr	r3, [pc, #596]	; (8010b78 <tcp_process+0x2c0>)
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092a:	6879      	ldr	r1, [r7, #4]
 801092c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801092e:	440b      	add	r3, r1
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	dc06      	bgt.n	8010944 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8b5b      	ldrh	r3, [r3, #26]
 801093a:	f043 0302 	orr.w	r3, r3, #2
 801093e:	b29a      	uxth	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010944:	7efb      	ldrb	r3, [r7, #27]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d01b      	beq.n	8010982 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7d1b      	ldrb	r3, [r3, #20]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <tcp_process+0xa8>
 8010952:	4b84      	ldr	r3, [pc, #528]	; (8010b64 <tcp_process+0x2ac>)
 8010954:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010958:	4988      	ldr	r1, [pc, #544]	; (8010b7c <tcp_process+0x2c4>)
 801095a:	4884      	ldr	r0, [pc, #528]	; (8010b6c <tcp_process+0x2b4>)
 801095c:	f004 fc58 	bl	8015210 <iprintf>
      recv_flags |= TF_RESET;
 8010960:	4b87      	ldr	r3, [pc, #540]	; (8010b80 <tcp_process+0x2c8>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f043 0308 	orr.w	r3, r3, #8
 8010968:	b2da      	uxtb	r2, r3
 801096a:	4b85      	ldr	r3, [pc, #532]	; (8010b80 <tcp_process+0x2c8>)
 801096c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	8b5b      	ldrh	r3, [r3, #26]
 8010972:	f023 0301 	bic.w	r3, r3, #1
 8010976:	b29a      	uxth	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801097c:	f06f 030d 	mvn.w	r3, #13
 8010980:	e37a      	b.n	8011078 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	e378      	b.n	8011078 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010986:	4b7a      	ldr	r3, [pc, #488]	; (8010b70 <tcp_process+0x2b8>)
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d010      	beq.n	80109b4 <tcp_process+0xfc>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	7d1b      	ldrb	r3, [r3, #20]
 8010996:	2b02      	cmp	r3, #2
 8010998:	d00c      	beq.n	80109b4 <tcp_process+0xfc>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	7d1b      	ldrb	r3, [r3, #20]
 801099e:	2b03      	cmp	r3, #3
 80109a0:	d008      	beq.n	80109b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8b5b      	ldrh	r3, [r3, #26]
 80109a6:	f043 0302 	orr.w	r3, r3, #2
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	e361      	b.n	8011078 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	8b5b      	ldrh	r3, [r3, #26]
 80109b8:	f003 0310 	and.w	r3, r3, #16
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d103      	bne.n	80109c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80109c0:	4b70      	ldr	r3, [pc, #448]	; (8010b84 <tcp_process+0x2cc>)
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f001 fc31 	bl	8012240 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	7d1b      	ldrb	r3, [r3, #20]
 80109e2:	3b02      	subs	r3, #2
 80109e4:	2b07      	cmp	r3, #7
 80109e6:	f200 8337 	bhi.w	8011058 <tcp_process+0x7a0>
 80109ea:	a201      	add	r2, pc, #4	; (adr r2, 80109f0 <tcp_process+0x138>)
 80109ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f0:	08010a11 	.word	0x08010a11
 80109f4:	08010c41 	.word	0x08010c41
 80109f8:	08010db9 	.word	0x08010db9
 80109fc:	08010de3 	.word	0x08010de3
 8010a00:	08010f07 	.word	0x08010f07
 8010a04:	08010db9 	.word	0x08010db9
 8010a08:	08010f93 	.word	0x08010f93
 8010a0c:	08011023 	.word	0x08011023
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010a10:	4b57      	ldr	r3, [pc, #348]	; (8010b70 <tcp_process+0x2b8>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	f003 0310 	and.w	r3, r3, #16
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 80e4 	beq.w	8010be6 <tcp_process+0x32e>
 8010a1e:	4b54      	ldr	r3, [pc, #336]	; (8010b70 <tcp_process+0x2b8>)
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	f003 0302 	and.w	r3, r3, #2
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 80dd 	beq.w	8010be6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a30:	1c5a      	adds	r2, r3, #1
 8010a32:	4b50      	ldr	r3, [pc, #320]	; (8010b74 <tcp_process+0x2bc>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	f040 80d5 	bne.w	8010be6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a3c:	4b4e      	ldr	r3, [pc, #312]	; (8010b78 <tcp_process+0x2c0>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010a4e:	4b49      	ldr	r3, [pc, #292]	; (8010b74 <tcp_process+0x2bc>)
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a56:	4b4c      	ldr	r3, [pc, #304]	; (8010b88 <tcp_process+0x2d0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	89db      	ldrh	r3, [r3, #14]
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010a70:	4b41      	ldr	r3, [pc, #260]	; (8010b78 <tcp_process+0x2c0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	1e5a      	subs	r2, r3, #1
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2204      	movs	r2, #4
 8010a7e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3304      	adds	r3, #4
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fa fab9 	bl	800b000 <ip4_route>
 8010a8e:	4601      	mov	r1, r0
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	3304      	adds	r3, #4
 8010a94:	461a      	mov	r2, r3
 8010a96:	4620      	mov	r0, r4
 8010a98:	f7ff f892 	bl	800fbc0 <tcp_eff_send_mss_netif>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aa8:	009a      	lsls	r2, r3, #2
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	f241 111c 	movw	r1, #4380	; 0x111c
 8010ab4:	428b      	cmp	r3, r1
 8010ab6:	bf38      	it	cc
 8010ab8:	460b      	movcc	r3, r1
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d204      	bcs.n	8010ac8 <tcp_process+0x210>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ac2:	009b      	lsls	r3, r3, #2
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	e00d      	b.n	8010ae4 <tcp_process+0x22c>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	f241 121c 	movw	r2, #4380	; 0x111c
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d904      	bls.n	8010ae0 <tcp_process+0x228>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	e001      	b.n	8010ae4 <tcp_process+0x22c>
 8010ae0:	f241 131c 	movw	r3, #4380	; 0x111c
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d106      	bne.n	8010b02 <tcp_process+0x24a>
 8010af4:	4b1b      	ldr	r3, [pc, #108]	; (8010b64 <tcp_process+0x2ac>)
 8010af6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010afa:	4924      	ldr	r1, [pc, #144]	; (8010b8c <tcp_process+0x2d4>)
 8010afc:	481b      	ldr	r0, [pc, #108]	; (8010b6c <tcp_process+0x2b4>)
 8010afe:	f004 fb87 	bl	8015210 <iprintf>
        --pcb->snd_queuelen;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	b29a      	uxth	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b16:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d111      	bne.n	8010b42 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b22:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d106      	bne.n	8010b38 <tcp_process+0x280>
 8010b2a:	4b0e      	ldr	r3, [pc, #56]	; (8010b64 <tcp_process+0x2ac>)
 8010b2c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010b30:	4917      	ldr	r1, [pc, #92]	; (8010b90 <tcp_process+0x2d8>)
 8010b32:	480e      	ldr	r0, [pc, #56]	; (8010b6c <tcp_process+0x2b4>)
 8010b34:	f004 fb6c 	bl	8015210 <iprintf>
          pcb->unsent = rseg->next;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b40:	e003      	b.n	8010b4a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010b4a:	69f8      	ldr	r0, [r7, #28]
 8010b4c:	f7fe fc56 	bl	800f3fc <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d11d      	bne.n	8010b94 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b5e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b60:	e01f      	b.n	8010ba2 <tcp_process+0x2ea>
 8010b62:	bf00      	nop
 8010b64:	08017db0 	.word	0x08017db0
 8010b68:	08017fe8 	.word	0x08017fe8
 8010b6c:	08017dfc 	.word	0x08017dfc
 8010b70:	20007290 	.word	0x20007290
 8010b74:	20007288 	.word	0x20007288
 8010b78:	20007284 	.word	0x20007284
 8010b7c:	08018004 	.word	0x08018004
 8010b80:	20007291 	.word	0x20007291
 8010b84:	2000aef4 	.word	0x2000aef4
 8010b88:	20007274 	.word	0x20007274
 8010b8c:	08018024 	.word	0x08018024
 8010b90:	0801803c 	.word	0x0801803c
        } else {
          pcb->rtime = 0;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2200      	movs	r2, #0
 8010b98:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00a      	beq.n	8010bc2 <tcp_process+0x30a>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	6910      	ldr	r0, [r2, #16]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	6879      	ldr	r1, [r7, #4]
 8010bba:	4798      	blx	r3
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	76bb      	strb	r3, [r7, #26]
 8010bc0:	e001      	b.n	8010bc6 <tcp_process+0x30e>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010bc6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010bca:	f113 0f0d 	cmn.w	r3, #13
 8010bce:	d102      	bne.n	8010bd6 <tcp_process+0x31e>
          return ERR_ABRT;
 8010bd0:	f06f 030c 	mvn.w	r3, #12
 8010bd4:	e250      	b.n	8011078 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8b5b      	ldrh	r3, [r3, #26]
 8010bda:	f043 0302 	orr.w	r3, r3, #2
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010be4:	e23a      	b.n	801105c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010be6:	4b9d      	ldr	r3, [pc, #628]	; (8010e5c <tcp_process+0x5a4>)
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	f003 0310 	and.w	r3, r3, #16
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 8234 	beq.w	801105c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bf4:	4b9a      	ldr	r3, [pc, #616]	; (8010e60 <tcp_process+0x5a8>)
 8010bf6:	6819      	ldr	r1, [r3, #0]
 8010bf8:	4b9a      	ldr	r3, [pc, #616]	; (8010e64 <tcp_process+0x5ac>)
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	4b9a      	ldr	r3, [pc, #616]	; (8010e68 <tcp_process+0x5b0>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c04:	4b99      	ldr	r3, [pc, #612]	; (8010e6c <tcp_process+0x5b4>)
 8010c06:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c08:	885b      	ldrh	r3, [r3, #2]
 8010c0a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c0c:	4a97      	ldr	r2, [pc, #604]	; (8010e6c <tcp_process+0x5b4>)
 8010c0e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c10:	8812      	ldrh	r2, [r2, #0]
 8010c12:	b292      	uxth	r2, r2
 8010c14:	9202      	str	r2, [sp, #8]
 8010c16:	9301      	str	r3, [sp, #4]
 8010c18:	4b95      	ldr	r3, [pc, #596]	; (8010e70 <tcp_process+0x5b8>)
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	4b95      	ldr	r3, [pc, #596]	; (8010e74 <tcp_process+0x5bc>)
 8010c1e:	4602      	mov	r2, r0
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f003 f8fd 	bl	8013e20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c2c:	2b05      	cmp	r3, #5
 8010c2e:	f200 8215 	bhi.w	801105c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f002 feb7 	bl	80139ac <tcp_rexmit_rto>
      break;
 8010c3e:	e20d      	b.n	801105c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c40:	4b86      	ldr	r3, [pc, #536]	; (8010e5c <tcp_process+0x5a4>)
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	f003 0310 	and.w	r3, r3, #16
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	f000 80a1 	beq.w	8010d90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c4e:	4b84      	ldr	r3, [pc, #528]	; (8010e60 <tcp_process+0x5a8>)
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	db7e      	blt.n	8010d5c <tcp_process+0x4a4>
 8010c5e:	4b80      	ldr	r3, [pc, #512]	; (8010e60 <tcp_process+0x5a8>)
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	dc77      	bgt.n	8010d5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d102      	bne.n	8010c80 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010c7a:	23fa      	movs	r3, #250	; 0xfa
 8010c7c:	76bb      	strb	r3, [r7, #26]
 8010c7e:	e01d      	b.n	8010cbc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c84:	699b      	ldr	r3, [r3, #24]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <tcp_process+0x3e0>
 8010c8a:	4b7b      	ldr	r3, [pc, #492]	; (8010e78 <tcp_process+0x5c0>)
 8010c8c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010c90:	497a      	ldr	r1, [pc, #488]	; (8010e7c <tcp_process+0x5c4>)
 8010c92:	487b      	ldr	r0, [pc, #492]	; (8010e80 <tcp_process+0x5c8>)
 8010c94:	f004 fabc 	bl	8015210 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00a      	beq.n	8010cb8 <tcp_process+0x400>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	6910      	ldr	r0, [r2, #16]
 8010cac:	2200      	movs	r2, #0
 8010cae:	6879      	ldr	r1, [r7, #4]
 8010cb0:	4798      	blx	r3
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	76bb      	strb	r3, [r7, #26]
 8010cb6:	e001      	b.n	8010cbc <tcp_process+0x404>
 8010cb8:	23f0      	movs	r3, #240	; 0xf0
 8010cba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010cbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d00a      	beq.n	8010cda <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010cc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cc8:	f113 0f0d 	cmn.w	r3, #13
 8010ccc:	d002      	beq.n	8010cd4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7fd fcf0 	bl	800e6b4 <tcp_abort>
            }
            return ERR_ABRT;
 8010cd4:	f06f 030c 	mvn.w	r3, #12
 8010cd8:	e1ce      	b.n	8011078 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fae0 	bl	80112a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010ce0:	4b68      	ldr	r3, [pc, #416]	; (8010e84 <tcp_process+0x5cc>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d005      	beq.n	8010cf4 <tcp_process+0x43c>
            recv_acked--;
 8010ce8:	4b66      	ldr	r3, [pc, #408]	; (8010e84 <tcp_process+0x5cc>)
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	4b64      	ldr	r3, [pc, #400]	; (8010e84 <tcp_process+0x5cc>)
 8010cf2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cf8:	009a      	lsls	r2, r3, #2
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d04:	428b      	cmp	r3, r1
 8010d06:	bf38      	it	cc
 8010d08:	460b      	movcc	r3, r1
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d204      	bcs.n	8010d18 <tcp_process+0x460>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	e00d      	b.n	8010d34 <tcp_process+0x47c>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d904      	bls.n	8010d30 <tcp_process+0x478>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	e001      	b.n	8010d34 <tcp_process+0x47c>
 8010d30:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d3a:	4b53      	ldr	r3, [pc, #332]	; (8010e88 <tcp_process+0x5d0>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	f003 0320 	and.w	r3, r3, #32
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d037      	beq.n	8010db6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8b5b      	ldrh	r3, [r3, #26]
 8010d4a:	f043 0302 	orr.w	r3, r3, #2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2207      	movs	r2, #7
 8010d58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010d5a:	e02c      	b.n	8010db6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d5c:	4b40      	ldr	r3, [pc, #256]	; (8010e60 <tcp_process+0x5a8>)
 8010d5e:	6819      	ldr	r1, [r3, #0]
 8010d60:	4b40      	ldr	r3, [pc, #256]	; (8010e64 <tcp_process+0x5ac>)
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	461a      	mov	r2, r3
 8010d66:	4b40      	ldr	r3, [pc, #256]	; (8010e68 <tcp_process+0x5b0>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d6c:	4b3f      	ldr	r3, [pc, #252]	; (8010e6c <tcp_process+0x5b4>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d70:	885b      	ldrh	r3, [r3, #2]
 8010d72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d74:	4a3d      	ldr	r2, [pc, #244]	; (8010e6c <tcp_process+0x5b4>)
 8010d76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d78:	8812      	ldrh	r2, [r2, #0]
 8010d7a:	b292      	uxth	r2, r2
 8010d7c:	9202      	str	r2, [sp, #8]
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	4b3b      	ldr	r3, [pc, #236]	; (8010e70 <tcp_process+0x5b8>)
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	4b3b      	ldr	r3, [pc, #236]	; (8010e74 <tcp_process+0x5bc>)
 8010d86:	4602      	mov	r2, r0
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f003 f849 	bl	8013e20 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010d8e:	e167      	b.n	8011060 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010d90:	4b32      	ldr	r3, [pc, #200]	; (8010e5c <tcp_process+0x5a4>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	f003 0302 	and.w	r3, r3, #2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f000 8161 	beq.w	8011060 <tcp_process+0x7a8>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da2:	1e5a      	subs	r2, r3, #1
 8010da4:	4b30      	ldr	r3, [pc, #192]	; (8010e68 <tcp_process+0x5b0>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	f040 8159 	bne.w	8011060 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f002 fe1e 	bl	80139f0 <tcp_rexmit>
      break;
 8010db4:	e154      	b.n	8011060 <tcp_process+0x7a8>
 8010db6:	e153      	b.n	8011060 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 fa71 	bl	80112a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010dbe:	4b32      	ldr	r3, [pc, #200]	; (8010e88 <tcp_process+0x5d0>)
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	f003 0320 	and.w	r3, r3, #32
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 814c 	beq.w	8011064 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	8b5b      	ldrh	r3, [r3, #26]
 8010dd0:	f043 0302 	orr.w	r3, r3, #2
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2207      	movs	r2, #7
 8010dde:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010de0:	e140      	b.n	8011064 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 fa5c 	bl	80112a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010de8:	4b27      	ldr	r3, [pc, #156]	; (8010e88 <tcp_process+0x5d0>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 0320 	and.w	r3, r3, #32
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d071      	beq.n	8010ed8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010df4:	4b19      	ldr	r3, [pc, #100]	; (8010e5c <tcp_process+0x5a4>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	f003 0310 	and.w	r3, r3, #16
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d060      	beq.n	8010ec2 <tcp_process+0x60a>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e04:	4b16      	ldr	r3, [pc, #88]	; (8010e60 <tcp_process+0x5a8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d15a      	bne.n	8010ec2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d156      	bne.n	8010ec2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	8b5b      	ldrh	r3, [r3, #26]
 8010e18:	f043 0302 	orr.w	r3, r3, #2
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7fe fdc2 	bl	800f9ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e28:	4b18      	ldr	r3, [pc, #96]	; (8010e8c <tcp_process+0x5d4>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d105      	bne.n	8010e3e <tcp_process+0x586>
 8010e32:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <tcp_process+0x5d4>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	4a14      	ldr	r2, [pc, #80]	; (8010e8c <tcp_process+0x5d4>)
 8010e3a:	6013      	str	r3, [r2, #0]
 8010e3c:	e02e      	b.n	8010e9c <tcp_process+0x5e4>
 8010e3e:	4b13      	ldr	r3, [pc, #76]	; (8010e8c <tcp_process+0x5d4>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	617b      	str	r3, [r7, #20]
 8010e44:	e027      	b.n	8010e96 <tcp_process+0x5de>
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	68da      	ldr	r2, [r3, #12]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d11f      	bne.n	8010e90 <tcp_process+0x5d8>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	68da      	ldr	r2, [r3, #12]
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	60da      	str	r2, [r3, #12]
 8010e58:	e020      	b.n	8010e9c <tcp_process+0x5e4>
 8010e5a:	bf00      	nop
 8010e5c:	20007290 	.word	0x20007290
 8010e60:	20007288 	.word	0x20007288
 8010e64:	2000728e 	.word	0x2000728e
 8010e68:	20007284 	.word	0x20007284
 8010e6c:	20007274 	.word	0x20007274
 8010e70:	200074d0 	.word	0x200074d0
 8010e74:	200074d4 	.word	0x200074d4
 8010e78:	08017db0 	.word	0x08017db0
 8010e7c:	08018050 	.word	0x08018050
 8010e80:	08017dfc 	.word	0x08017dfc
 8010e84:	2000728c 	.word	0x2000728c
 8010e88:	20007291 	.word	0x20007291
 8010e8c:	2000aef0 	.word	0x2000aef0
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	617b      	str	r3, [r7, #20]
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1d4      	bne.n	8010e46 <tcp_process+0x58e>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	60da      	str	r2, [r3, #12]
 8010ea2:	4b77      	ldr	r3, [pc, #476]	; (8011080 <tcp_process+0x7c8>)
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	220a      	movs	r2, #10
 8010eac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010eae:	4b75      	ldr	r3, [pc, #468]	; (8011084 <tcp_process+0x7cc>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	60da      	str	r2, [r3, #12]
 8010eb6:	4a73      	ldr	r2, [pc, #460]	; (8011084 <tcp_process+0x7cc>)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6013      	str	r3, [r2, #0]
 8010ebc:	f003 f974 	bl	80141a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010ec0:	e0d2      	b.n	8011068 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8b5b      	ldrh	r3, [r3, #26]
 8010ec6:	f043 0302 	orr.w	r3, r3, #2
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2208      	movs	r2, #8
 8010ed4:	751a      	strb	r2, [r3, #20]
      break;
 8010ed6:	e0c7      	b.n	8011068 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ed8:	4b6b      	ldr	r3, [pc, #428]	; (8011088 <tcp_process+0x7d0>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 0310 	and.w	r3, r3, #16
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80c1 	beq.w	8011068 <tcp_process+0x7b0>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010eea:	4b68      	ldr	r3, [pc, #416]	; (801108c <tcp_process+0x7d4>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	f040 80ba 	bne.w	8011068 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f040 80b5 	bne.w	8011068 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2206      	movs	r2, #6
 8010f02:	751a      	strb	r2, [r3, #20]
      break;
 8010f04:	e0b0      	b.n	8011068 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 f9ca 	bl	80112a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f0c:	4b60      	ldr	r3, [pc, #384]	; (8011090 <tcp_process+0x7d8>)
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	f003 0320 	and.w	r3, r3, #32
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 80a9 	beq.w	801106c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8b5b      	ldrh	r3, [r3, #26]
 8010f1e:	f043 0302 	orr.w	r3, r3, #2
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7fe fd3f 	bl	800f9ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f2e:	4b59      	ldr	r3, [pc, #356]	; (8011094 <tcp_process+0x7dc>)
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d105      	bne.n	8010f44 <tcp_process+0x68c>
 8010f38:	4b56      	ldr	r3, [pc, #344]	; (8011094 <tcp_process+0x7dc>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	4a55      	ldr	r2, [pc, #340]	; (8011094 <tcp_process+0x7dc>)
 8010f40:	6013      	str	r3, [r2, #0]
 8010f42:	e013      	b.n	8010f6c <tcp_process+0x6b4>
 8010f44:	4b53      	ldr	r3, [pc, #332]	; (8011094 <tcp_process+0x7dc>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	613b      	str	r3, [r7, #16]
 8010f4a:	e00c      	b.n	8010f66 <tcp_process+0x6ae>
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	68da      	ldr	r2, [r3, #12]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d104      	bne.n	8010f60 <tcp_process+0x6a8>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	68da      	ldr	r2, [r3, #12]
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	60da      	str	r2, [r3, #12]
 8010f5e:	e005      	b.n	8010f6c <tcp_process+0x6b4>
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	613b      	str	r3, [r7, #16]
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1ef      	bne.n	8010f4c <tcp_process+0x694>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	60da      	str	r2, [r3, #12]
 8010f72:	4b43      	ldr	r3, [pc, #268]	; (8011080 <tcp_process+0x7c8>)
 8010f74:	2201      	movs	r2, #1
 8010f76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	220a      	movs	r2, #10
 8010f7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f7e:	4b41      	ldr	r3, [pc, #260]	; (8011084 <tcp_process+0x7cc>)
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	60da      	str	r2, [r3, #12]
 8010f86:	4a3f      	ldr	r2, [pc, #252]	; (8011084 <tcp_process+0x7cc>)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6013      	str	r3, [r2, #0]
 8010f8c:	f003 f90c 	bl	80141a8 <tcp_timer_needed>
      }
      break;
 8010f90:	e06c      	b.n	801106c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 f984 	bl	80112a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010f98:	4b3b      	ldr	r3, [pc, #236]	; (8011088 <tcp_process+0x7d0>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f003 0310 	and.w	r3, r3, #16
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d065      	beq.n	8011070 <tcp_process+0x7b8>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fa8:	4b38      	ldr	r3, [pc, #224]	; (801108c <tcp_process+0x7d4>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d15f      	bne.n	8011070 <tcp_process+0x7b8>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d15b      	bne.n	8011070 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f7fe fcf7 	bl	800f9ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010fbe:	4b35      	ldr	r3, [pc, #212]	; (8011094 <tcp_process+0x7dc>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d105      	bne.n	8010fd4 <tcp_process+0x71c>
 8010fc8:	4b32      	ldr	r3, [pc, #200]	; (8011094 <tcp_process+0x7dc>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	4a31      	ldr	r2, [pc, #196]	; (8011094 <tcp_process+0x7dc>)
 8010fd0:	6013      	str	r3, [r2, #0]
 8010fd2:	e013      	b.n	8010ffc <tcp_process+0x744>
 8010fd4:	4b2f      	ldr	r3, [pc, #188]	; (8011094 <tcp_process+0x7dc>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	60fb      	str	r3, [r7, #12]
 8010fda:	e00c      	b.n	8010ff6 <tcp_process+0x73e>
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	68da      	ldr	r2, [r3, #12]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d104      	bne.n	8010ff0 <tcp_process+0x738>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	68da      	ldr	r2, [r3, #12]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	60da      	str	r2, [r3, #12]
 8010fee:	e005      	b.n	8010ffc <tcp_process+0x744>
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	60fb      	str	r3, [r7, #12]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1ef      	bne.n	8010fdc <tcp_process+0x724>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2200      	movs	r2, #0
 8011000:	60da      	str	r2, [r3, #12]
 8011002:	4b1f      	ldr	r3, [pc, #124]	; (8011080 <tcp_process+0x7c8>)
 8011004:	2201      	movs	r2, #1
 8011006:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	220a      	movs	r2, #10
 801100c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801100e:	4b1d      	ldr	r3, [pc, #116]	; (8011084 <tcp_process+0x7cc>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	60da      	str	r2, [r3, #12]
 8011016:	4a1b      	ldr	r2, [pc, #108]	; (8011084 <tcp_process+0x7cc>)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6013      	str	r3, [r2, #0]
 801101c:	f003 f8c4 	bl	80141a8 <tcp_timer_needed>
      }
      break;
 8011020:	e026      	b.n	8011070 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f93c 	bl	80112a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011028:	4b17      	ldr	r3, [pc, #92]	; (8011088 <tcp_process+0x7d0>)
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	f003 0310 	and.w	r3, r3, #16
 8011030:	2b00      	cmp	r3, #0
 8011032:	d01f      	beq.n	8011074 <tcp_process+0x7bc>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011038:	4b14      	ldr	r3, [pc, #80]	; (801108c <tcp_process+0x7d4>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	d119      	bne.n	8011074 <tcp_process+0x7bc>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011044:	2b00      	cmp	r3, #0
 8011046:	d115      	bne.n	8011074 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011048:	4b11      	ldr	r3, [pc, #68]	; (8011090 <tcp_process+0x7d8>)
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f043 0310 	orr.w	r3, r3, #16
 8011050:	b2da      	uxtb	r2, r3
 8011052:	4b0f      	ldr	r3, [pc, #60]	; (8011090 <tcp_process+0x7d8>)
 8011054:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011056:	e00d      	b.n	8011074 <tcp_process+0x7bc>
    default:
      break;
 8011058:	bf00      	nop
 801105a:	e00c      	b.n	8011076 <tcp_process+0x7be>
      break;
 801105c:	bf00      	nop
 801105e:	e00a      	b.n	8011076 <tcp_process+0x7be>
      break;
 8011060:	bf00      	nop
 8011062:	e008      	b.n	8011076 <tcp_process+0x7be>
      break;
 8011064:	bf00      	nop
 8011066:	e006      	b.n	8011076 <tcp_process+0x7be>
      break;
 8011068:	bf00      	nop
 801106a:	e004      	b.n	8011076 <tcp_process+0x7be>
      break;
 801106c:	bf00      	nop
 801106e:	e002      	b.n	8011076 <tcp_process+0x7be>
      break;
 8011070:	bf00      	nop
 8011072:	e000      	b.n	8011076 <tcp_process+0x7be>
      break;
 8011074:	bf00      	nop
  }
  return ERR_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3724      	adds	r7, #36	; 0x24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd90      	pop	{r4, r7, pc}
 8011080:	2000aeec 	.word	0x2000aeec
 8011084:	2000af00 	.word	0x2000af00
 8011088:	20007290 	.word	0x20007290
 801108c:	20007288 	.word	0x20007288
 8011090:	20007291 	.word	0x20007291
 8011094:	2000aef0 	.word	0x2000aef0

08011098 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011098:	b5b0      	push	{r4, r5, r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d106      	bne.n	80110b6 <tcp_oos_insert_segment+0x1e>
 80110a8:	4b3b      	ldr	r3, [pc, #236]	; (8011198 <tcp_oos_insert_segment+0x100>)
 80110aa:	f240 421f 	movw	r2, #1055	; 0x41f
 80110ae:	493b      	ldr	r1, [pc, #236]	; (801119c <tcp_oos_insert_segment+0x104>)
 80110b0:	483b      	ldr	r0, [pc, #236]	; (80111a0 <tcp_oos_insert_segment+0x108>)
 80110b2:	f004 f8ad 	bl	8015210 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	899b      	ldrh	r3, [r3, #12]
 80110bc:	b29b      	uxth	r3, r3
 80110be:	4618      	mov	r0, r3
 80110c0:	f7f8 fb58 	bl	8009774 <lwip_htons>
 80110c4:	4603      	mov	r3, r0
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d027      	beq.n	8011120 <tcp_oos_insert_segment+0x88>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80110d0:	6838      	ldr	r0, [r7, #0]
 80110d2:	f7fe f97f 	bl	800f3d4 <tcp_segs_free>
    next = NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	603b      	str	r3, [r7, #0]
 80110da:	e055      	b.n	8011188 <tcp_oos_insert_segment+0xf0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7f8 fb45 	bl	8009774 <lwip_htons>
 80110ea:	4603      	mov	r3, r0
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	f003 0301 	and.w	r3, r3, #1
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d00c      	beq.n	8011110 <tcp_oos_insert_segment+0x78>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	68dc      	ldr	r4, [r3, #12]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	899b      	ldrh	r3, [r3, #12]
 8011100:	b29d      	uxth	r5, r3
 8011102:	2001      	movs	r0, #1
 8011104:	f7f8 fb36 	bl	8009774 <lwip_htons>
 8011108:	4603      	mov	r3, r0
 801110a:	432b      	orrs	r3, r5
 801110c:	b29b      	uxth	r3, r3
 801110e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801111a:	68f8      	ldr	r0, [r7, #12]
 801111c:	f7fe f96e 	bl	800f3fc <tcp_seg_free>
    while (next &&
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00e      	beq.n	8011144 <tcp_oos_insert_segment+0xac>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	891b      	ldrh	r3, [r3, #8]
 801112a:	461a      	mov	r2, r3
 801112c:	4b1d      	ldr	r3, [pc, #116]	; (80111a4 <tcp_oos_insert_segment+0x10c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	441a      	add	r2, r3
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	8909      	ldrh	r1, [r1, #8]
 801113c:	440b      	add	r3, r1
 801113e:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011140:	2b00      	cmp	r3, #0
 8011142:	dacb      	bge.n	80110dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d01e      	beq.n	8011188 <tcp_oos_insert_segment+0xf0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	891b      	ldrh	r3, [r3, #8]
 801114e:	461a      	mov	r2, r3
 8011150:	4b14      	ldr	r3, [pc, #80]	; (80111a4 <tcp_oos_insert_segment+0x10c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	441a      	add	r2, r3
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	1ad3      	subs	r3, r2, r3
    if (next &&
 801115e:	2b00      	cmp	r3, #0
 8011160:	dd12      	ble.n	8011188 <tcp_oos_insert_segment+0xf0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	b29a      	uxth	r2, r3
 801116a:	4b0e      	ldr	r3, [pc, #56]	; (80111a4 <tcp_oos_insert_segment+0x10c>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	b29b      	uxth	r3, r3
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	b29a      	uxth	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	685a      	ldr	r2, [r3, #4]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	891b      	ldrh	r3, [r3, #8]
 8011180:	4619      	mov	r1, r3
 8011182:	4610      	mov	r0, r2
 8011184:	f7fc fa18 	bl	800d5b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	601a      	str	r2, [r3, #0]
}
 801118e:	bf00      	nop
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bdb0      	pop	{r4, r5, r7, pc}
 8011196:	bf00      	nop
 8011198:	08017db0 	.word	0x08017db0
 801119c:	08018070 	.word	0x08018070
 80111a0:	08017dfc 	.word	0x08017dfc
 80111a4:	20007284 	.word	0x20007284

080111a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80111a8:	b5b0      	push	{r4, r5, r7, lr}
 80111aa:	b086      	sub	sp, #24
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80111b6:	e03e      	b.n	8011236 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fc fc0c 	bl	800d9e4 <pbuf_clen>
 80111cc:	4603      	mov	r3, r0
 80111ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111d6:	8a7a      	ldrh	r2, [r7, #18]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d906      	bls.n	80111ea <tcp_free_acked_segments+0x42>
 80111dc:	4b2a      	ldr	r3, [pc, #168]	; (8011288 <tcp_free_acked_segments+0xe0>)
 80111de:	f240 4257 	movw	r2, #1111	; 0x457
 80111e2:	492a      	ldr	r1, [pc, #168]	; (801128c <tcp_free_acked_segments+0xe4>)
 80111e4:	482a      	ldr	r0, [pc, #168]	; (8011290 <tcp_free_acked_segments+0xe8>)
 80111e6:	f004 f813 	bl	8015210 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80111f0:	8a7b      	ldrh	r3, [r7, #18]
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	891a      	ldrh	r2, [r3, #8]
 8011200:	4b24      	ldr	r3, [pc, #144]	; (8011294 <tcp_free_acked_segments+0xec>)
 8011202:	881b      	ldrh	r3, [r3, #0]
 8011204:	4413      	add	r3, r2
 8011206:	b29a      	uxth	r2, r3
 8011208:	4b22      	ldr	r3, [pc, #136]	; (8011294 <tcp_free_acked_segments+0xec>)
 801120a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801120c:	6978      	ldr	r0, [r7, #20]
 801120e:	f7fe f8f5 	bl	800f3fc <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00c      	beq.n	8011236 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d109      	bne.n	8011236 <tcp_free_acked_segments+0x8e>
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d106      	bne.n	8011236 <tcp_free_acked_segments+0x8e>
 8011228:	4b17      	ldr	r3, [pc, #92]	; (8011288 <tcp_free_acked_segments+0xe0>)
 801122a:	f240 4262 	movw	r2, #1122	; 0x462
 801122e:	491a      	ldr	r1, [pc, #104]	; (8011298 <tcp_free_acked_segments+0xf0>)
 8011230:	4817      	ldr	r0, [pc, #92]	; (8011290 <tcp_free_acked_segments+0xe8>)
 8011232:	f003 ffed 	bl	8015210 <iprintf>
  while (seg_list != NULL &&
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d020      	beq.n	801127e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	4618      	mov	r0, r3
 8011244:	f7f8 faab 	bl	800979e <lwip_htonl>
 8011248:	4604      	mov	r4, r0
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	891b      	ldrh	r3, [r3, #8]
 801124e:	461d      	mov	r5, r3
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	899b      	ldrh	r3, [r3, #12]
 8011256:	b29b      	uxth	r3, r3
 8011258:	4618      	mov	r0, r3
 801125a:	f7f8 fa8b 	bl	8009774 <lwip_htons>
 801125e:	4603      	mov	r3, r0
 8011260:	b2db      	uxtb	r3, r3
 8011262:	f003 0303 	and.w	r3, r3, #3
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <tcp_free_acked_segments+0xc6>
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <tcp_free_acked_segments+0xc8>
 801126e:	2300      	movs	r3, #0
 8011270:	442b      	add	r3, r5
 8011272:	18e2      	adds	r2, r4, r3
 8011274:	4b09      	ldr	r3, [pc, #36]	; (801129c <tcp_free_acked_segments+0xf4>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801127a:	2b00      	cmp	r3, #0
 801127c:	dd9c      	ble.n	80111b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801127e:	68bb      	ldr	r3, [r7, #8]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3718      	adds	r7, #24
 8011284:	46bd      	mov	sp, r7
 8011286:	bdb0      	pop	{r4, r5, r7, pc}
 8011288:	08017db0 	.word	0x08017db0
 801128c:	08018098 	.word	0x08018098
 8011290:	08017dfc 	.word	0x08017dfc
 8011294:	2000728c 	.word	0x2000728c
 8011298:	080180c0 	.word	0x080180c0
 801129c:	20007288 	.word	0x20007288

080112a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80112a0:	b5b0      	push	{r4, r5, r7, lr}
 80112a2:	b094      	sub	sp, #80	; 0x50
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcp_receive+0x20>
 80112b2:	4ba6      	ldr	r3, [pc, #664]	; (801154c <tcp_receive+0x2ac>)
 80112b4:	f240 427b 	movw	r2, #1147	; 0x47b
 80112b8:	49a5      	ldr	r1, [pc, #660]	; (8011550 <tcp_receive+0x2b0>)
 80112ba:	48a6      	ldr	r0, [pc, #664]	; (8011554 <tcp_receive+0x2b4>)
 80112bc:	f003 ffa8 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7d1b      	ldrb	r3, [r3, #20]
 80112c4:	2b03      	cmp	r3, #3
 80112c6:	d806      	bhi.n	80112d6 <tcp_receive+0x36>
 80112c8:	4ba0      	ldr	r3, [pc, #640]	; (801154c <tcp_receive+0x2ac>)
 80112ca:	f240 427c 	movw	r2, #1148	; 0x47c
 80112ce:	49a2      	ldr	r1, [pc, #648]	; (8011558 <tcp_receive+0x2b8>)
 80112d0:	48a0      	ldr	r0, [pc, #640]	; (8011554 <tcp_receive+0x2b4>)
 80112d2:	f003 ff9d 	bl	8015210 <iprintf>

  if (flags & TCP_ACK) {
 80112d6:	4ba1      	ldr	r3, [pc, #644]	; (801155c <tcp_receive+0x2bc>)
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	f003 0310 	and.w	r3, r3, #16
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f000 8269 	beq.w	80117b6 <tcp_receive+0x516>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112ea:	461a      	mov	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112f0:	4413      	add	r3, r2
 80112f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112f8:	4b99      	ldr	r3, [pc, #612]	; (8011560 <tcp_receive+0x2c0>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	db1b      	blt.n	801133a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011306:	4b96      	ldr	r3, [pc, #600]	; (8011560 <tcp_receive+0x2c0>)
 8011308:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801130a:	429a      	cmp	r2, r3
 801130c:	d106      	bne.n	801131c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011312:	4b94      	ldr	r3, [pc, #592]	; (8011564 <tcp_receive+0x2c4>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	db0e      	blt.n	801133a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011320:	4b90      	ldr	r3, [pc, #576]	; (8011564 <tcp_receive+0x2c4>)
 8011322:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011324:	429a      	cmp	r2, r3
 8011326:	d125      	bne.n	8011374 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011328:	4b8f      	ldr	r3, [pc, #572]	; (8011568 <tcp_receive+0x2c8>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	89db      	ldrh	r3, [r3, #14]
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011336:	429a      	cmp	r2, r3
 8011338:	d91c      	bls.n	8011374 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801133a:	4b8b      	ldr	r3, [pc, #556]	; (8011568 <tcp_receive+0x2c8>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	89db      	ldrh	r3, [r3, #14]
 8011340:	b29a      	uxth	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011354:	429a      	cmp	r2, r3
 8011356:	d205      	bcs.n	8011364 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011364:	4b7e      	ldr	r3, [pc, #504]	; (8011560 <tcp_receive+0x2c0>)
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801136c:	4b7d      	ldr	r3, [pc, #500]	; (8011564 <tcp_receive+0x2c4>)
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011374:	4b7b      	ldr	r3, [pc, #492]	; (8011564 <tcp_receive+0x2c4>)
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	dc5d      	bgt.n	801143e <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 8011382:	4b7a      	ldr	r3, [pc, #488]	; (801156c <tcp_receive+0x2cc>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d150      	bne.n	801142c <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011394:	441a      	add	r2, r3
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	429a      	cmp	r2, r3
 801139a:	d147      	bne.n	801142c <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	db42      	blt.n	801142c <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113aa:	4b6e      	ldr	r3, [pc, #440]	; (8011564 <tcp_receive+0x2c4>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d13c      	bne.n	801142c <tcp_receive+0x18c>
              found_dupack = 1;
 80113b2:	2301      	movs	r3, #1
 80113b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113bc:	3301      	adds	r3, #1
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d907      	bls.n	80113da <tcp_receive+0x13a>
                ++pcb->dupacks;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113e0:	2b03      	cmp	r3, #3
 80113e2:	d91b      	bls.n	801141c <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113ee:	4413      	add	r3, r2
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d30a      	bcc.n	8011412 <tcp_receive+0x172>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011406:	4413      	add	r3, r2
 8011408:	b29a      	uxth	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011410:	e004      	b.n	801141c <tcp_receive+0x17c>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011422:	2b02      	cmp	r3, #2
 8011424:	d902      	bls.n	801142c <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f002 fb4e 	bl	8013ac8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801142c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801142e:	2b00      	cmp	r3, #0
 8011430:	f040 8161 	bne.w	80116f6 <tcp_receive+0x456>
        pcb->dupacks = 0;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801143c:	e15b      	b.n	80116f6 <tcp_receive+0x456>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801143e:	4b49      	ldr	r3, [pc, #292]	; (8011564 <tcp_receive+0x2c4>)
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011446:	1ad3      	subs	r3, r2, r3
 8011448:	3b01      	subs	r3, #1
 801144a:	2b00      	cmp	r3, #0
 801144c:	f2c0 814e 	blt.w	80116ec <tcp_receive+0x44c>
 8011450:	4b44      	ldr	r3, [pc, #272]	; (8011564 <tcp_receive+0x2c4>)
 8011452:	681a      	ldr	r2, [r3, #0]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	f300 8146 	bgt.w	80116ec <tcp_receive+0x44c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	8b5b      	ldrh	r3, [r3, #26]
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d010      	beq.n	801148e <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	8b5b      	ldrh	r3, [r3, #26]
 8011470:	f023 0304 	bic.w	r3, r3, #4
 8011474:	b29a      	uxth	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2200      	movs	r2, #0
 8011492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801149c:	10db      	asrs	r3, r3, #3
 801149e:	b21b      	sxth	r3, r3
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	4413      	add	r3, r2
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	b21a      	sxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80114b6:	4b2b      	ldr	r3, [pc, #172]	; (8011564 <tcp_receive+0x2c4>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	1ad3      	subs	r3, r2, r3
 80114c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80114ce:	4b25      	ldr	r3, [pc, #148]	; (8011564 <tcp_receive+0x2c4>)
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	7d1b      	ldrb	r3, [r3, #20]
 80114da:	2b03      	cmp	r3, #3
 80114dc:	f240 8097 	bls.w	801160e <tcp_receive+0x36e>
        if (pcb->cwnd < pcb->ssthresh) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d245      	bcs.n	801157c <tcp_receive+0x2dc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	8b5b      	ldrh	r3, [r3, #26]
 80114f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <tcp_receive+0x260>
 80114fc:	2301      	movs	r3, #1
 80114fe:	e000      	b.n	8011502 <tcp_receive+0x262>
 8011500:	2302      	movs	r3, #2
 8011502:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011506:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801150a:	b29a      	uxth	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011510:	fb12 f303 	smulbb	r3, r2, r3
 8011514:	b29a      	uxth	r2, r3
 8011516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011518:	4293      	cmp	r3, r2
 801151a:	bf28      	it	cs
 801151c:	4613      	movcs	r3, r2
 801151e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011528:	4413      	add	r3, r2
 801152a:	b29a      	uxth	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011532:	429a      	cmp	r2, r3
 8011534:	d31c      	bcc.n	8011570 <tcp_receive+0x2d0>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801153c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801153e:	4413      	add	r3, r2
 8011540:	b29a      	uxth	r2, r3
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011548:	e061      	b.n	801160e <tcp_receive+0x36e>
 801154a:	bf00      	nop
 801154c:	08017db0 	.word	0x08017db0
 8011550:	080180e0 	.word	0x080180e0
 8011554:	08017dfc 	.word	0x08017dfc
 8011558:	080180fc 	.word	0x080180fc
 801155c:	20007290 	.word	0x20007290
 8011560:	20007284 	.word	0x20007284
 8011564:	20007288 	.word	0x20007288
 8011568:	20007274 	.word	0x20007274
 801156c:	2000728e 	.word	0x2000728e
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801157a:	e048      	b.n	801160e <tcp_receive+0x36e>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011584:	4413      	add	r3, r2
 8011586:	b29a      	uxth	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801158e:	429a      	cmp	r2, r3
 8011590:	d309      	bcc.n	80115a6 <tcp_receive+0x306>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011598:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801159a:	4413      	add	r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80115a4:	e004      	b.n	80115b0 <tcp_receive+0x310>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115bc:	429a      	cmp	r2, r3
 80115be:	d326      	bcc.n	801160e <tcp_receive+0x36e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e0:	4413      	add	r3, r2
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d30a      	bcc.n	8011604 <tcp_receive+0x364>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f8:	4413      	add	r3, r2
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011602:	e004      	b.n	801160e <tcp_receive+0x36e>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801160a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011616:	4a98      	ldr	r2, [pc, #608]	; (8011878 <tcp_receive+0x5d8>)
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff fdc5 	bl	80111a8 <tcp_free_acked_segments>
 801161e:	4602      	mov	r2, r0
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801162c:	4a93      	ldr	r2, [pc, #588]	; (801187c <tcp_receive+0x5dc>)
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ff fdba 	bl	80111a8 <tcp_free_acked_segments>
 8011634:	4602      	mov	r2, r0
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801163e:	2b00      	cmp	r3, #0
 8011640:	d104      	bne.n	801164c <tcp_receive+0x3ac>
        pcb->rtime = -1;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011648:	861a      	strh	r2, [r3, #48]	; 0x30
 801164a:	e002      	b.n	8011652 <tcp_receive+0x3b2>
      } else {
        pcb->rtime = 0;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2200      	movs	r2, #0
 8011650:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2200      	movs	r2, #0
 8011656:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d103      	bne.n	8011668 <tcp_receive+0x3c8>
        pcb->unsent_oversize = 0;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801166e:	4b84      	ldr	r3, [pc, #528]	; (8011880 <tcp_receive+0x5e0>)
 8011670:	881b      	ldrh	r3, [r3, #0]
 8011672:	4413      	add	r3, r2
 8011674:	b29a      	uxth	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8b5b      	ldrh	r3, [r3, #26]
 8011680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011684:	2b00      	cmp	r3, #0
 8011686:	d035      	beq.n	80116f4 <tcp_receive+0x454>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801168c:	2b00      	cmp	r3, #0
 801168e:	d118      	bne.n	80116c2 <tcp_receive+0x422>
          if ((pcb->unsent == NULL) ||
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00c      	beq.n	80116b2 <tcp_receive+0x412>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7f8 f87a 	bl	800979e <lwip_htonl>
 80116aa:	4603      	mov	r3, r0
 80116ac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	dc20      	bgt.n	80116f4 <tcp_receive+0x454>
            tcp_clear_flags(pcb, TF_RTO);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8b5b      	ldrh	r3, [r3, #26]
 80116b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116c0:	e018      	b.n	80116f4 <tcp_receive+0x454>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7f8 f865 	bl	800979e <lwip_htonl>
 80116d4:	4603      	mov	r3, r0
 80116d6:	1ae3      	subs	r3, r4, r3
 80116d8:	2b00      	cmp	r3, #0
 80116da:	dc0b      	bgt.n	80116f4 <tcp_receive+0x454>
          tcp_clear_flags(pcb, TF_RTO);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	8b5b      	ldrh	r3, [r3, #26]
 80116e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116ea:	e003      	b.n	80116f4 <tcp_receive+0x454>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f002 fbe9 	bl	8013ec4 <tcp_send_empty_ack>
 80116f2:	e000      	b.n	80116f6 <tcp_receive+0x456>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116f4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d05b      	beq.n	80117b6 <tcp_receive+0x516>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011702:	4b60      	ldr	r3, [pc, #384]	; (8011884 <tcp_receive+0x5e4>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	da54      	bge.n	80117b6 <tcp_receive+0x516>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801170c:	4b5e      	ldr	r3, [pc, #376]	; (8011888 <tcp_receive+0x5e8>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	b29a      	uxth	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011716:	b29b      	uxth	r3, r3
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	b29b      	uxth	r3, r3
 801171c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011720:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801172a:	10db      	asrs	r3, r3, #3
 801172c:	b21b      	sxth	r3, r3
 801172e:	b29b      	uxth	r3, r3
 8011730:	1ad3      	subs	r3, r2, r3
 8011732:	b29b      	uxth	r3, r3
 8011734:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801173e:	b29a      	uxth	r2, r3
 8011740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011744:	4413      	add	r3, r2
 8011746:	b29b      	uxth	r3, r3
 8011748:	b21a      	sxth	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801174e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011752:	2b00      	cmp	r3, #0
 8011754:	da05      	bge.n	8011762 <tcp_receive+0x4c2>
        m = (s16_t) - m;
 8011756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801175a:	425b      	negs	r3, r3
 801175c:	b29b      	uxth	r3, r3
 801175e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011762:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801176c:	109b      	asrs	r3, r3, #2
 801176e:	b21b      	sxth	r3, r3
 8011770:	b29b      	uxth	r3, r3
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	b29b      	uxth	r3, r3
 8011776:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011780:	b29a      	uxth	r2, r3
 8011782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011786:	4413      	add	r3, r2
 8011788:	b29b      	uxth	r3, r3
 801178a:	b21a      	sxth	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011796:	10db      	asrs	r3, r3, #3
 8011798:	b21b      	sxth	r3, r3
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	4413      	add	r3, r2
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	b21a      	sxth	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80117b6:	4b35      	ldr	r3, [pc, #212]	; (801188c <tcp_receive+0x5ec>)
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f000 84df 	beq.w	801217e <tcp_receive+0xede>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	2b06      	cmp	r3, #6
 80117c6:	f200 84da 	bhi.w	801217e <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ce:	4b30      	ldr	r3, [pc, #192]	; (8011890 <tcp_receive+0x5f0>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	3b01      	subs	r3, #1
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f2c0 808e 	blt.w	80118f8 <tcp_receive+0x658>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117e0:	4b2a      	ldr	r3, [pc, #168]	; (801188c <tcp_receive+0x5ec>)
 80117e2:	881b      	ldrh	r3, [r3, #0]
 80117e4:	4619      	mov	r1, r3
 80117e6:	4b2a      	ldr	r3, [pc, #168]	; (8011890 <tcp_receive+0x5f0>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	440b      	add	r3, r1
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	3301      	adds	r3, #1
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f300 8081 	bgt.w	80118f8 <tcp_receive+0x658>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80117f6:	4b27      	ldr	r3, [pc, #156]	; (8011894 <tcp_receive+0x5f4>)
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011800:	4b23      	ldr	r3, [pc, #140]	; (8011890 <tcp_receive+0x5f0>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011808:	4b22      	ldr	r3, [pc, #136]	; (8011894 <tcp_receive+0x5f4>)
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <tcp_receive+0x57e>
 8011810:	4b21      	ldr	r3, [pc, #132]	; (8011898 <tcp_receive+0x5f8>)
 8011812:	f240 5294 	movw	r2, #1428	; 0x594
 8011816:	4921      	ldr	r1, [pc, #132]	; (801189c <tcp_receive+0x5fc>)
 8011818:	4821      	ldr	r0, [pc, #132]	; (80118a0 <tcp_receive+0x600>)
 801181a:	f003 fcf9 	bl	8015210 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011824:	4293      	cmp	r3, r2
 8011826:	d906      	bls.n	8011836 <tcp_receive+0x596>
 8011828:	4b1b      	ldr	r3, [pc, #108]	; (8011898 <tcp_receive+0x5f8>)
 801182a:	f240 5295 	movw	r2, #1429	; 0x595
 801182e:	491d      	ldr	r1, [pc, #116]	; (80118a4 <tcp_receive+0x604>)
 8011830:	481b      	ldr	r0, [pc, #108]	; (80118a0 <tcp_receive+0x600>)
 8011832:	f003 fced 	bl	8015210 <iprintf>
      off = (u16_t)off32;
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801183c:	4b15      	ldr	r3, [pc, #84]	; (8011894 <tcp_receive+0x5f4>)
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	891b      	ldrh	r3, [r3, #8]
 8011842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011846:	429a      	cmp	r2, r3
 8011848:	d906      	bls.n	8011858 <tcp_receive+0x5b8>
 801184a:	4b13      	ldr	r3, [pc, #76]	; (8011898 <tcp_receive+0x5f8>)
 801184c:	f240 5297 	movw	r2, #1431	; 0x597
 8011850:	4915      	ldr	r1, [pc, #84]	; (80118a8 <tcp_receive+0x608>)
 8011852:	4813      	ldr	r0, [pc, #76]	; (80118a0 <tcp_receive+0x600>)
 8011854:	f003 fcdc 	bl	8015210 <iprintf>
      inseg.len -= off;
 8011858:	4b0e      	ldr	r3, [pc, #56]	; (8011894 <tcp_receive+0x5f4>)
 801185a:	891a      	ldrh	r2, [r3, #8]
 801185c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	b29a      	uxth	r2, r3
 8011864:	4b0b      	ldr	r3, [pc, #44]	; (8011894 <tcp_receive+0x5f4>)
 8011866:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011868:	4b0a      	ldr	r3, [pc, #40]	; (8011894 <tcp_receive+0x5f4>)
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	891a      	ldrh	r2, [r3, #8]
 801186e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011876:	e029      	b.n	80118cc <tcp_receive+0x62c>
 8011878:	08018118 	.word	0x08018118
 801187c:	08018120 	.word	0x08018120
 8011880:	2000728c 	.word	0x2000728c
 8011884:	20007288 	.word	0x20007288
 8011888:	2000aef4 	.word	0x2000aef4
 801188c:	2000728e 	.word	0x2000728e
 8011890:	20007284 	.word	0x20007284
 8011894:	20007264 	.word	0x20007264
 8011898:	08017db0 	.word	0x08017db0
 801189c:	08018128 	.word	0x08018128
 80118a0:	08017dfc 	.word	0x08017dfc
 80118a4:	08018138 	.word	0x08018138
 80118a8:	08018148 	.word	0x08018148
        off -= p->len;
 80118ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ae:	895b      	ldrh	r3, [r3, #10]
 80118b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80118ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80118be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80118c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c2:	2200      	movs	r2, #0
 80118c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80118c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80118cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ce:	895b      	ldrh	r3, [r3, #10]
 80118d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d8e9      	bhi.n	80118ac <tcp_receive+0x60c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80118d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118dc:	4619      	mov	r1, r3
 80118de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80118e0:	f7fb ff6c 	bl	800d7bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80118e4:	4b91      	ldr	r3, [pc, #580]	; (8011b2c <tcp_receive+0x88c>)
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	687a      	ldr	r2, [r7, #4]
 80118ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80118ec:	4990      	ldr	r1, [pc, #576]	; (8011b30 <tcp_receive+0x890>)
 80118ee:	600a      	str	r2, [r1, #0]
 80118f0:	4a8f      	ldr	r2, [pc, #572]	; (8011b30 <tcp_receive+0x890>)
 80118f2:	6812      	ldr	r2, [r2, #0]
 80118f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118f6:	e00d      	b.n	8011914 <tcp_receive+0x674>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80118f8:	4b8d      	ldr	r3, [pc, #564]	; (8011b30 <tcp_receive+0x890>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	2b00      	cmp	r3, #0
 8011904:	da06      	bge.n	8011914 <tcp_receive+0x674>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8b5b      	ldrh	r3, [r3, #26]
 801190a:	f043 0302 	orr.w	r3, r3, #2
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011914:	4b86      	ldr	r3, [pc, #536]	; (8011b30 <tcp_receive+0x890>)
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	f2c0 8428 	blt.w	8012174 <tcp_receive+0xed4>
 8011924:	4b82      	ldr	r3, [pc, #520]	; (8011b30 <tcp_receive+0x890>)
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192c:	6879      	ldr	r1, [r7, #4]
 801192e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011930:	440b      	add	r3, r1
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	3301      	adds	r3, #1
 8011936:	2b00      	cmp	r3, #0
 8011938:	f300 841c 	bgt.w	8012174 <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011940:	4b7b      	ldr	r3, [pc, #492]	; (8011b30 <tcp_receive+0x890>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	429a      	cmp	r2, r3
 8011946:	f040 8298 	bne.w	8011e7a <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801194a:	4b78      	ldr	r3, [pc, #480]	; (8011b2c <tcp_receive+0x88c>)
 801194c:	891c      	ldrh	r4, [r3, #8]
 801194e:	4b77      	ldr	r3, [pc, #476]	; (8011b2c <tcp_receive+0x88c>)
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	899b      	ldrh	r3, [r3, #12]
 8011954:	b29b      	uxth	r3, r3
 8011956:	4618      	mov	r0, r3
 8011958:	f7f7 ff0c 	bl	8009774 <lwip_htons>
 801195c:	4603      	mov	r3, r0
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 0303 	and.w	r3, r3, #3
 8011964:	2b00      	cmp	r3, #0
 8011966:	d001      	beq.n	801196c <tcp_receive+0x6cc>
 8011968:	2301      	movs	r3, #1
 801196a:	e000      	b.n	801196e <tcp_receive+0x6ce>
 801196c:	2300      	movs	r3, #0
 801196e:	4423      	add	r3, r4
 8011970:	b29a      	uxth	r2, r3
 8011972:	4b70      	ldr	r3, [pc, #448]	; (8011b34 <tcp_receive+0x894>)
 8011974:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801197a:	4b6e      	ldr	r3, [pc, #440]	; (8011b34 <tcp_receive+0x894>)
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	d275      	bcs.n	8011a6e <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011982:	4b6a      	ldr	r3, [pc, #424]	; (8011b2c <tcp_receive+0x88c>)
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	899b      	ldrh	r3, [r3, #12]
 8011988:	b29b      	uxth	r3, r3
 801198a:	4618      	mov	r0, r3
 801198c:	f7f7 fef2 	bl	8009774 <lwip_htons>
 8011990:	4603      	mov	r3, r0
 8011992:	b2db      	uxtb	r3, r3
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	2b00      	cmp	r3, #0
 801199a:	d01f      	beq.n	80119dc <tcp_receive+0x73c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801199c:	4b63      	ldr	r3, [pc, #396]	; (8011b2c <tcp_receive+0x88c>)
 801199e:	68dc      	ldr	r4, [r3, #12]
 80119a0:	4b62      	ldr	r3, [pc, #392]	; (8011b2c <tcp_receive+0x88c>)
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	b21b      	sxth	r3, r3
 80119aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119ae:	b21d      	sxth	r5, r3
 80119b0:	4b5e      	ldr	r3, [pc, #376]	; (8011b2c <tcp_receive+0x88c>)
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	899b      	ldrh	r3, [r3, #12]
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7f7 fedb 	bl	8009774 <lwip_htons>
 80119be:	4603      	mov	r3, r0
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f7 fed2 	bl	8009774 <lwip_htons>
 80119d0:	4603      	mov	r3, r0
 80119d2:	b21b      	sxth	r3, r3
 80119d4:	432b      	orrs	r3, r5
 80119d6:	b21b      	sxth	r3, r3
 80119d8:	b29b      	uxth	r3, r3
 80119da:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119e0:	4b52      	ldr	r3, [pc, #328]	; (8011b2c <tcp_receive+0x88c>)
 80119e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80119e4:	4b51      	ldr	r3, [pc, #324]	; (8011b2c <tcp_receive+0x88c>)
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	899b      	ldrh	r3, [r3, #12]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7f7 fec1 	bl	8009774 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	f003 0302 	and.w	r3, r3, #2
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d005      	beq.n	8011a0a <tcp_receive+0x76a>
            inseg.len -= 1;
 80119fe:	4b4b      	ldr	r3, [pc, #300]	; (8011b2c <tcp_receive+0x88c>)
 8011a00:	891b      	ldrh	r3, [r3, #8]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	4b49      	ldr	r3, [pc, #292]	; (8011b2c <tcp_receive+0x88c>)
 8011a08:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011a0a:	4b48      	ldr	r3, [pc, #288]	; (8011b2c <tcp_receive+0x88c>)
 8011a0c:	685a      	ldr	r2, [r3, #4]
 8011a0e:	4b47      	ldr	r3, [pc, #284]	; (8011b2c <tcp_receive+0x88c>)
 8011a10:	891b      	ldrh	r3, [r3, #8]
 8011a12:	4619      	mov	r1, r3
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7fb fdcf 	bl	800d5b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011a1a:	4b44      	ldr	r3, [pc, #272]	; (8011b2c <tcp_receive+0x88c>)
 8011a1c:	891c      	ldrh	r4, [r3, #8]
 8011a1e:	4b43      	ldr	r3, [pc, #268]	; (8011b2c <tcp_receive+0x88c>)
 8011a20:	68db      	ldr	r3, [r3, #12]
 8011a22:	899b      	ldrh	r3, [r3, #12]
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7f7 fea4 	bl	8009774 <lwip_htons>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	f003 0303 	and.w	r3, r3, #3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <tcp_receive+0x79c>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	e000      	b.n	8011a3e <tcp_receive+0x79e>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4423      	add	r3, r4
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	4b3c      	ldr	r3, [pc, #240]	; (8011b34 <tcp_receive+0x894>)
 8011a44:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a46:	4b3b      	ldr	r3, [pc, #236]	; (8011b34 <tcp_receive+0x894>)
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	4b38      	ldr	r3, [pc, #224]	; (8011b30 <tcp_receive+0x890>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	441a      	add	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a5a:	440b      	add	r3, r1
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d006      	beq.n	8011a6e <tcp_receive+0x7ce>
 8011a60:	4b35      	ldr	r3, [pc, #212]	; (8011b38 <tcp_receive+0x898>)
 8011a62:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011a66:	4935      	ldr	r1, [pc, #212]	; (8011b3c <tcp_receive+0x89c>)
 8011a68:	4835      	ldr	r0, [pc, #212]	; (8011b40 <tcp_receive+0x8a0>)
 8011a6a:	f003 fbd1 	bl	8015210 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f000 80e5 	beq.w	8011c42 <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a78:	4b2c      	ldr	r3, [pc, #176]	; (8011b2c <tcp_receive+0x88c>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	899b      	ldrh	r3, [r3, #12]
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7f7 fe77 	bl	8009774 <lwip_htons>
 8011a86:	4603      	mov	r3, r0
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	f003 0301 	and.w	r3, r3, #1
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d010      	beq.n	8011ab4 <tcp_receive+0x814>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011a92:	e00a      	b.n	8011aaa <tcp_receive+0x80a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a98:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011aa4:	69f8      	ldr	r0, [r7, #28]
 8011aa6:	f7fd fca9 	bl	800f3fc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d1f0      	bne.n	8011a94 <tcp_receive+0x7f4>
 8011ab2:	e0c6      	b.n	8011c42 <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011aba:	e050      	b.n	8011b5e <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	899b      	ldrh	r3, [r3, #12]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7f7 fe55 	bl	8009774 <lwip_htons>
 8011aca:	4603      	mov	r3, r0
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d03b      	beq.n	8011b4e <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011ad6:	4b15      	ldr	r3, [pc, #84]	; (8011b2c <tcp_receive+0x88c>)
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	899b      	ldrh	r3, [r3, #12]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f7 fe48 	bl	8009774 <lwip_htons>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d12e      	bne.n	8011b4e <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011af0:	4b0e      	ldr	r3, [pc, #56]	; (8011b2c <tcp_receive+0x88c>)
 8011af2:	68dc      	ldr	r4, [r3, #12]
 8011af4:	4b0d      	ldr	r3, [pc, #52]	; (8011b2c <tcp_receive+0x88c>)
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	899b      	ldrh	r3, [r3, #12]
 8011afa:	b29d      	uxth	r5, r3
 8011afc:	2001      	movs	r0, #1
 8011afe:	f7f7 fe39 	bl	8009774 <lwip_htons>
 8011b02:	4603      	mov	r3, r0
 8011b04:	432b      	orrs	r3, r5
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011b0a:	4b08      	ldr	r3, [pc, #32]	; (8011b2c <tcp_receive+0x88c>)
 8011b0c:	891c      	ldrh	r4, [r3, #8]
 8011b0e:	4b07      	ldr	r3, [pc, #28]	; (8011b2c <tcp_receive+0x88c>)
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	899b      	ldrh	r3, [r3, #12]
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f7 fe2c 	bl	8009774 <lwip_htons>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	f003 0303 	and.w	r3, r3, #3
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d00d      	beq.n	8011b44 <tcp_receive+0x8a4>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	e00c      	b.n	8011b46 <tcp_receive+0x8a6>
 8011b2c:	20007264 	.word	0x20007264
 8011b30:	20007284 	.word	0x20007284
 8011b34:	2000728e 	.word	0x2000728e
 8011b38:	08017db0 	.word	0x08017db0
 8011b3c:	08018158 	.word	0x08018158
 8011b40:	08017dfc 	.word	0x08017dfc
 8011b44:	2300      	movs	r3, #0
 8011b46:	4423      	add	r3, r4
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	4b98      	ldr	r3, [pc, #608]	; (8011dac <tcp_receive+0xb0c>)
 8011b4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b50:	61bb      	str	r3, [r7, #24]
              next = next->next;
 8011b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011b58:	69b8      	ldr	r0, [r7, #24]
 8011b5a:	f7fd fc4f 	bl	800f3fc <tcp_seg_free>
            while (next &&
 8011b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d00e      	beq.n	8011b82 <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011b64:	4b91      	ldr	r3, [pc, #580]	; (8011dac <tcp_receive+0xb0c>)
 8011b66:	881b      	ldrh	r3, [r3, #0]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	4b91      	ldr	r3, [pc, #580]	; (8011db0 <tcp_receive+0xb10>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	441a      	add	r2, r3
 8011b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b78:	8909      	ldrh	r1, [r1, #8]
 8011b7a:	440b      	add	r3, r1
 8011b7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	da9c      	bge.n	8011abc <tcp_receive+0x81c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d059      	beq.n	8011c3c <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 8011b88:	4b88      	ldr	r3, [pc, #544]	; (8011dac <tcp_receive+0xb0c>)
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4b88      	ldr	r3, [pc, #544]	; (8011db0 <tcp_receive+0xb10>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	441a      	add	r2, r3
 8011b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd4d      	ble.n	8011c3c <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	4b81      	ldr	r3, [pc, #516]	; (8011db0 <tcp_receive+0xb10>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	4b80      	ldr	r3, [pc, #512]	; (8011db4 <tcp_receive+0xb14>)
 8011bb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011bb6:	4b7f      	ldr	r3, [pc, #508]	; (8011db4 <tcp_receive+0xb14>)
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	899b      	ldrh	r3, [r3, #12]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7f7 fdd8 	bl	8009774 <lwip_htons>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	f003 0302 	and.w	r3, r3, #2
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d005      	beq.n	8011bdc <tcp_receive+0x93c>
                inseg.len -= 1;
 8011bd0:	4b78      	ldr	r3, [pc, #480]	; (8011db4 <tcp_receive+0xb14>)
 8011bd2:	891b      	ldrh	r3, [r3, #8]
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	4b76      	ldr	r3, [pc, #472]	; (8011db4 <tcp_receive+0xb14>)
 8011bda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011bdc:	4b75      	ldr	r3, [pc, #468]	; (8011db4 <tcp_receive+0xb14>)
 8011bde:	685a      	ldr	r2, [r3, #4]
 8011be0:	4b74      	ldr	r3, [pc, #464]	; (8011db4 <tcp_receive+0xb14>)
 8011be2:	891b      	ldrh	r3, [r3, #8]
 8011be4:	4619      	mov	r1, r3
 8011be6:	4610      	mov	r0, r2
 8011be8:	f7fb fce6 	bl	800d5b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011bec:	4b71      	ldr	r3, [pc, #452]	; (8011db4 <tcp_receive+0xb14>)
 8011bee:	891c      	ldrh	r4, [r3, #8]
 8011bf0:	4b70      	ldr	r3, [pc, #448]	; (8011db4 <tcp_receive+0xb14>)
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	899b      	ldrh	r3, [r3, #12]
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7f7 fdbb 	bl	8009774 <lwip_htons>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	f003 0303 	and.w	r3, r3, #3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d001      	beq.n	8011c0e <tcp_receive+0x96e>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e000      	b.n	8011c10 <tcp_receive+0x970>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	4423      	add	r3, r4
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	4b65      	ldr	r3, [pc, #404]	; (8011dac <tcp_receive+0xb0c>)
 8011c16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011c18:	4b64      	ldr	r3, [pc, #400]	; (8011dac <tcp_receive+0xb0c>)
 8011c1a:	881b      	ldrh	r3, [r3, #0]
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	4b64      	ldr	r3, [pc, #400]	; (8011db0 <tcp_receive+0xb10>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	441a      	add	r2, r3
 8011c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d006      	beq.n	8011c3c <tcp_receive+0x99c>
 8011c2e:	4b62      	ldr	r3, [pc, #392]	; (8011db8 <tcp_receive+0xb18>)
 8011c30:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011c34:	4961      	ldr	r1, [pc, #388]	; (8011dbc <tcp_receive+0xb1c>)
 8011c36:	4862      	ldr	r0, [pc, #392]	; (8011dc0 <tcp_receive+0xb20>)
 8011c38:	f003 faea 	bl	8015210 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c42:	4b5a      	ldr	r3, [pc, #360]	; (8011dac <tcp_receive+0xb0c>)
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	461a      	mov	r2, r3
 8011c48:	4b59      	ldr	r3, [pc, #356]	; (8011db0 <tcp_receive+0xb10>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	441a      	add	r2, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c56:	4b55      	ldr	r3, [pc, #340]	; (8011dac <tcp_receive+0xb0c>)
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d206      	bcs.n	8011c6c <tcp_receive+0x9cc>
 8011c5e:	4b56      	ldr	r3, [pc, #344]	; (8011db8 <tcp_receive+0xb18>)
 8011c60:	f240 6207 	movw	r2, #1543	; 0x607
 8011c64:	4957      	ldr	r1, [pc, #348]	; (8011dc4 <tcp_receive+0xb24>)
 8011c66:	4856      	ldr	r0, [pc, #344]	; (8011dc0 <tcp_receive+0xb20>)
 8011c68:	f003 fad2 	bl	8015210 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c70:	4b4e      	ldr	r3, [pc, #312]	; (8011dac <tcp_receive+0xb0c>)
 8011c72:	881b      	ldrh	r3, [r3, #0]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7fc fe99 	bl	800e9b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011c82:	4b4c      	ldr	r3, [pc, #304]	; (8011db4 <tcp_receive+0xb14>)
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	891b      	ldrh	r3, [r3, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d006      	beq.n	8011c9a <tcp_receive+0x9fa>
          recv_data = inseg.p;
 8011c8c:	4b49      	ldr	r3, [pc, #292]	; (8011db4 <tcp_receive+0xb14>)
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	4a4d      	ldr	r2, [pc, #308]	; (8011dc8 <tcp_receive+0xb28>)
 8011c92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011c94:	4b47      	ldr	r3, [pc, #284]	; (8011db4 <tcp_receive+0xb14>)
 8011c96:	2200      	movs	r2, #0
 8011c98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c9a:	4b46      	ldr	r3, [pc, #280]	; (8011db4 <tcp_receive+0xb14>)
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	899b      	ldrh	r3, [r3, #12]
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7f7 fd66 	bl	8009774 <lwip_htons>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f000 80b8 	beq.w	8011e26 <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011cb6:	4b45      	ldr	r3, [pc, #276]	; (8011dcc <tcp_receive+0xb2c>)
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	f043 0320 	orr.w	r3, r3, #32
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	4b42      	ldr	r3, [pc, #264]	; (8011dcc <tcp_receive+0xb2c>)
 8011cc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011cc4:	e0af      	b.n	8011e26 <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cca:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	4a36      	ldr	r2, [pc, #216]	; (8011db0 <tcp_receive+0xb10>)
 8011cd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	891b      	ldrh	r3, [r3, #8]
 8011cdc:	461c      	mov	r4, r3
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7f7 fd44 	bl	8009774 <lwip_htons>
 8011cec:	4603      	mov	r3, r0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0303 	and.w	r3, r3, #3
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <tcp_receive+0xa5c>
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e000      	b.n	8011cfe <tcp_receive+0xa5e>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4423      	add	r3, r4
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011d04:	441a      	add	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d0e:	461c      	mov	r4, r3
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	891b      	ldrh	r3, [r3, #8]
 8011d14:	461d      	mov	r5, r3
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	899b      	ldrh	r3, [r3, #12]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f7 fd28 	bl	8009774 <lwip_htons>
 8011d24:	4603      	mov	r3, r0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	f003 0303 	and.w	r3, r3, #3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d001      	beq.n	8011d34 <tcp_receive+0xa94>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e000      	b.n	8011d36 <tcp_receive+0xa96>
 8011d34:	2300      	movs	r3, #0
 8011d36:	442b      	add	r3, r5
 8011d38:	429c      	cmp	r4, r3
 8011d3a:	d206      	bcs.n	8011d4a <tcp_receive+0xaaa>
 8011d3c:	4b1e      	ldr	r3, [pc, #120]	; (8011db8 <tcp_receive+0xb18>)
 8011d3e:	f240 622c 	movw	r2, #1580	; 0x62c
 8011d42:	4923      	ldr	r1, [pc, #140]	; (8011dd0 <tcp_receive+0xb30>)
 8011d44:	481e      	ldr	r0, [pc, #120]	; (8011dc0 <tcp_receive+0xb20>)
 8011d46:	f003 fa63 	bl	8015210 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	891b      	ldrh	r3, [r3, #8]
 8011d4e:	461c      	mov	r4, r3
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	899b      	ldrh	r3, [r3, #12]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f7 fd0b 	bl	8009774 <lwip_htons>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	f003 0303 	and.w	r3, r3, #3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <tcp_receive+0xace>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e000      	b.n	8011d70 <tcp_receive+0xad0>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	18e1      	adds	r1, r4, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d76:	b28b      	uxth	r3, r1
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7fc fe17 	bl	800e9b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	891b      	ldrh	r3, [r3, #8]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d028      	beq.n	8011de2 <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011d90:	4b0d      	ldr	r3, [pc, #52]	; (8011dc8 <tcp_receive+0xb28>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d01d      	beq.n	8011dd4 <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 8011d98:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <tcp_receive+0xb28>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	4619      	mov	r1, r3
 8011da2:	4610      	mov	r0, r2
 8011da4:	f7fb fe5e 	bl	800da64 <pbuf_cat>
 8011da8:	e018      	b.n	8011ddc <tcp_receive+0xb3c>
 8011daa:	bf00      	nop
 8011dac:	2000728e 	.word	0x2000728e
 8011db0:	20007284 	.word	0x20007284
 8011db4:	20007264 	.word	0x20007264
 8011db8:	08017db0 	.word	0x08017db0
 8011dbc:	08018190 	.word	0x08018190
 8011dc0:	08017dfc 	.word	0x08017dfc
 8011dc4:	080181cc 	.word	0x080181cc
 8011dc8:	20007294 	.word	0x20007294
 8011dcc:	20007291 	.word	0x20007291
 8011dd0:	080181ec 	.word	0x080181ec
            } else {
              recv_data = cseg->p;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	4a70      	ldr	r2, [pc, #448]	; (8011f9c <tcp_receive+0xcfc>)
 8011dda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	2200      	movs	r2, #0
 8011de0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	899b      	ldrh	r3, [r3, #12]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7f7 fcc2 	bl	8009774 <lwip_htons>
 8011df0:	4603      	mov	r3, r0
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	f003 0301 	and.w	r3, r3, #1
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00d      	beq.n	8011e18 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011dfc:	4b68      	ldr	r3, [pc, #416]	; (8011fa0 <tcp_receive+0xd00>)
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	f043 0320 	orr.w	r3, r3, #32
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	4b66      	ldr	r3, [pc, #408]	; (8011fa0 <tcp_receive+0xd00>)
 8011e08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	7d1b      	ldrb	r3, [r3, #20]
 8011e0e:	2b04      	cmp	r3, #4
 8011e10:	d102      	bne.n	8011e18 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2207      	movs	r2, #7
 8011e16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011e20:	6978      	ldr	r0, [r7, #20]
 8011e22:	f7fd faeb 	bl	800f3fc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d008      	beq.n	8011e40 <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	f43f af43 	beq.w	8011cc6 <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8b5b      	ldrh	r3, [r3, #26]
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00e      	beq.n	8011e6a <tcp_receive+0xbca>
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	8b5b      	ldrh	r3, [r3, #26]
 8011e50:	f023 0301 	bic.w	r3, r3, #1
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	835a      	strh	r2, [r3, #26]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f043 0302 	orr.w	r3, r3, #2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e68:	e188      	b.n	801217c <tcp_receive+0xedc>
        tcp_ack(pcb);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	8b5b      	ldrh	r3, [r3, #26]
 8011e6e:	f043 0301 	orr.w	r3, r3, #1
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e78:	e180      	b.n	801217c <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011e82:	4848      	ldr	r0, [pc, #288]	; (8011fa4 <tcp_receive+0xd04>)
 8011e84:	f7fd faf0 	bl	800f468 <tcp_seg_copy>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	675a      	str	r2, [r3, #116]	; 0x74
 8011e8e:	e16d      	b.n	801216c <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011e90:	2300      	movs	r3, #0
 8011e92:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e9a:	e157      	b.n	801214c <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	685a      	ldr	r2, [r3, #4]
 8011ea2:	4b41      	ldr	r3, [pc, #260]	; (8011fa8 <tcp_receive+0xd08>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d11d      	bne.n	8011ee6 <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011eaa:	4b3e      	ldr	r3, [pc, #248]	; (8011fa4 <tcp_receive+0xd04>)
 8011eac:	891a      	ldrh	r2, [r3, #8]
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	891b      	ldrh	r3, [r3, #8]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	f240 814f 	bls.w	8012156 <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011eb8:	483a      	ldr	r0, [pc, #232]	; (8011fa4 <tcp_receive+0xd04>)
 8011eba:	f7fd fad5 	bl	800f468 <tcp_seg_copy>
 8011ebe:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f000 8149 	beq.w	801215a <tcp_receive+0xeba>
                  if (prev != NULL) {
 8011ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d003      	beq.n	8011ed6 <tcp_receive+0xc36>
                    prev->next = cseg;
 8011ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	e002      	b.n	8011edc <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	68ba      	ldr	r2, [r7, #8]
 8011eda:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f7ff f8da 	bl	8011098 <tcp_oos_insert_segment>
                }
                break;
 8011ee4:	e139      	b.n	801215a <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d117      	bne.n	8011f1c <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011eec:	4b2e      	ldr	r3, [pc, #184]	; (8011fa8 <tcp_receive+0xd08>)
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	da57      	bge.n	8011fac <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011efc:	4829      	ldr	r0, [pc, #164]	; (8011fa4 <tcp_receive+0xd04>)
 8011efe:	f7fd fab3 	bl	800f468 <tcp_seg_copy>
 8011f02:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 8129 	beq.w	801215e <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f14:	6938      	ldr	r0, [r7, #16]
 8011f16:	f7ff f8bf 	bl	8011098 <tcp_oos_insert_segment>
                  }
                  break;
 8011f1a:	e120      	b.n	801215e <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011f1c:	4b22      	ldr	r3, [pc, #136]	; (8011fa8 <tcp_receive+0xd08>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	db3e      	blt.n	8011fac <tcp_receive+0xd0c>
 8011f2e:	4b1e      	ldr	r3, [pc, #120]	; (8011fa8 <tcp_receive+0xd08>)
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	1ad3      	subs	r3, r2, r3
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	dc35      	bgt.n	8011fac <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f40:	4818      	ldr	r0, [pc, #96]	; (8011fa4 <tcp_receive+0xd04>)
 8011f42:	f7fd fa91 	bl	800f468 <tcp_seg_copy>
 8011f46:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f000 8109 	beq.w	8012162 <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f58:	8912      	ldrh	r2, [r2, #8]
 8011f5a:	441a      	add	r2, r3
 8011f5c:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <tcp_receive+0xd08>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	dd12      	ble.n	8011f8c <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011f66:	4b10      	ldr	r3, [pc, #64]	; (8011fa8 <tcp_receive+0xd08>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f7e:	685a      	ldr	r2, [r3, #4]
 8011f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f82:	891b      	ldrh	r3, [r3, #8]
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f7fb fb16 	bl	800d5b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f7ff f87f 	bl	8011098 <tcp_oos_insert_segment>
                  }
                  break;
 8011f9a:	e0e2      	b.n	8012162 <tcp_receive+0xec2>
 8011f9c:	20007294 	.word	0x20007294
 8011fa0:	20007291 	.word	0x20007291
 8011fa4:	20007264 	.word	0x20007264
 8011fa8:	20007284 	.word	0x20007284
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f040 80c6 	bne.w	8012146 <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011fba:	4b80      	ldr	r3, [pc, #512]	; (80121bc <tcp_receive+0xf1c>)
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f340 80bd 	ble.w	8012146 <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f7 fbcd 	bl	8009774 <lwip_htons>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f040 80bf 	bne.w	8012166 <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011fe8:	4875      	ldr	r0, [pc, #468]	; (80121c0 <tcp_receive+0xf20>)
 8011fea:	f7fd fa3d 	bl	800f468 <tcp_seg_copy>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80b6 	beq.w	801216a <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012006:	8912      	ldrh	r2, [r2, #8]
 8012008:	441a      	add	r2, r3
 801200a:	4b6c      	ldr	r3, [pc, #432]	; (80121bc <tcp_receive+0xf1c>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	2b00      	cmp	r3, #0
 8012012:	dd12      	ble.n	801203a <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012014:	4b69      	ldr	r3, [pc, #420]	; (80121bc <tcp_receive+0xf1c>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	b29a      	uxth	r2, r3
 801201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	b29b      	uxth	r3, r3
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	b29a      	uxth	r2, r3
 8012026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012028:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202c:	685a      	ldr	r2, [r3, #4]
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	891b      	ldrh	r3, [r3, #8]
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fb fabf 	bl	800d5b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801203a:	4b62      	ldr	r3, [pc, #392]	; (80121c4 <tcp_receive+0xf24>)
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	4b5e      	ldr	r3, [pc, #376]	; (80121bc <tcp_receive+0xf1c>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	441a      	add	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204a:	6879      	ldr	r1, [r7, #4]
 801204c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801204e:	440b      	add	r3, r1
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	2b00      	cmp	r3, #0
 8012054:	f340 8089 	ble.w	801216a <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	899b      	ldrh	r3, [r3, #12]
 8012060:	b29b      	uxth	r3, r3
 8012062:	4618      	mov	r0, r3
 8012064:	f7f7 fb86 	bl	8009774 <lwip_htons>
 8012068:	4603      	mov	r3, r0
 801206a:	b2db      	uxtb	r3, r3
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d022      	beq.n	80120ba <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	68dc      	ldr	r4, [r3, #12]
 801207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	899b      	ldrh	r3, [r3, #12]
 8012082:	b29b      	uxth	r3, r3
 8012084:	b21b      	sxth	r3, r3
 8012086:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801208a:	b21d      	sxth	r5, r3
 801208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	899b      	ldrh	r3, [r3, #12]
 8012094:	b29b      	uxth	r3, r3
 8012096:	4618      	mov	r0, r3
 8012098:	f7f7 fb6c 	bl	8009774 <lwip_htons>
 801209c:	4603      	mov	r3, r0
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7f7 fb63 	bl	8009774 <lwip_htons>
 80120ae:	4603      	mov	r3, r0
 80120b0:	b21b      	sxth	r3, r3
 80120b2:	432b      	orrs	r3, r5
 80120b4:	b21b      	sxth	r3, r3
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80120ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80120c2:	b291      	uxth	r1, r2
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80120c8:	440a      	add	r2, r1
 80120ca:	b291      	uxth	r1, r2
 80120cc:	4a3b      	ldr	r2, [pc, #236]	; (80121bc <tcp_receive+0xf1c>)
 80120ce:	6812      	ldr	r2, [r2, #0]
 80120d0:	b292      	uxth	r2, r2
 80120d2:	1a8a      	subs	r2, r1, r2
 80120d4:	b292      	uxth	r2, r2
 80120d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	685a      	ldr	r2, [r3, #4]
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	4619      	mov	r1, r3
 80120e6:	4610      	mov	r0, r2
 80120e8:	f7fb fa66 	bl	800d5b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80120ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	891c      	ldrh	r4, [r3, #8]
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	899b      	ldrh	r3, [r3, #12]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7f7 fb39 	bl	8009774 <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	b2db      	uxtb	r3, r3
 8012106:	f003 0303 	and.w	r3, r3, #3
 801210a:	2b00      	cmp	r3, #0
 801210c:	d001      	beq.n	8012112 <tcp_receive+0xe72>
 801210e:	2301      	movs	r3, #1
 8012110:	e000      	b.n	8012114 <tcp_receive+0xe74>
 8012112:	2300      	movs	r3, #0
 8012114:	4423      	add	r3, r4
 8012116:	b29a      	uxth	r2, r3
 8012118:	4b2a      	ldr	r3, [pc, #168]	; (80121c4 <tcp_receive+0xf24>)
 801211a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801211c:	4b29      	ldr	r3, [pc, #164]	; (80121c4 <tcp_receive+0xf24>)
 801211e:	881b      	ldrh	r3, [r3, #0]
 8012120:	461a      	mov	r2, r3
 8012122:	4b26      	ldr	r3, [pc, #152]	; (80121bc <tcp_receive+0xf1c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	441a      	add	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012130:	440b      	add	r3, r1
 8012132:	429a      	cmp	r2, r3
 8012134:	d019      	beq.n	801216a <tcp_receive+0xeca>
 8012136:	4b24      	ldr	r3, [pc, #144]	; (80121c8 <tcp_receive+0xf28>)
 8012138:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801213c:	4923      	ldr	r1, [pc, #140]	; (80121cc <tcp_receive+0xf2c>)
 801213e:	4824      	ldr	r0, [pc, #144]	; (80121d0 <tcp_receive+0xf30>)
 8012140:	f003 f866 	bl	8015210 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012144:	e011      	b.n	801216a <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	63bb      	str	r3, [r7, #56]	; 0x38
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	2b00      	cmp	r3, #0
 8012150:	f47f aea4 	bne.w	8011e9c <tcp_receive+0xbfc>
 8012154:	e00a      	b.n	801216c <tcp_receive+0xecc>
                break;
 8012156:	bf00      	nop
 8012158:	e008      	b.n	801216c <tcp_receive+0xecc>
                break;
 801215a:	bf00      	nop
 801215c:	e006      	b.n	801216c <tcp_receive+0xecc>
                  break;
 801215e:	bf00      	nop
 8012160:	e004      	b.n	801216c <tcp_receive+0xecc>
                  break;
 8012162:	bf00      	nop
 8012164:	e002      	b.n	801216c <tcp_receive+0xecc>
                  break;
 8012166:	bf00      	nop
 8012168:	e000      	b.n	801216c <tcp_receive+0xecc>
                break;
 801216a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f001 fea9 	bl	8013ec4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012172:	e003      	b.n	801217c <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f001 fea5 	bl	8013ec4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801217a:	e01a      	b.n	80121b2 <tcp_receive+0xf12>
 801217c:	e019      	b.n	80121b2 <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801217e:	4b0f      	ldr	r3, [pc, #60]	; (80121bc <tcp_receive+0xf1c>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012186:	1ad3      	subs	r3, r2, r3
 8012188:	2b00      	cmp	r3, #0
 801218a:	db0a      	blt.n	80121a2 <tcp_receive+0xf02>
 801218c:	4b0b      	ldr	r3, [pc, #44]	; (80121bc <tcp_receive+0xf1c>)
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012194:	6879      	ldr	r1, [r7, #4]
 8012196:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012198:	440b      	add	r3, r1
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	3301      	adds	r3, #1
 801219e:	2b00      	cmp	r3, #0
 80121a0:	dd07      	ble.n	80121b2 <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	8b5b      	ldrh	r3, [r3, #26]
 80121a6:	f043 0302 	orr.w	r3, r3, #2
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80121b0:	e7ff      	b.n	80121b2 <tcp_receive+0xf12>
 80121b2:	bf00      	nop
 80121b4:	3750      	adds	r7, #80	; 0x50
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bdb0      	pop	{r4, r5, r7, pc}
 80121ba:	bf00      	nop
 80121bc:	20007284 	.word	0x20007284
 80121c0:	20007264 	.word	0x20007264
 80121c4:	2000728e 	.word	0x2000728e
 80121c8:	08017db0 	.word	0x08017db0
 80121cc:	08018158 	.word	0x08018158
 80121d0:	08017dfc 	.word	0x08017dfc

080121d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80121da:	4b15      	ldr	r3, [pc, #84]	; (8012230 <tcp_get_next_optbyte+0x5c>)
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	1c5a      	adds	r2, r3, #1
 80121e0:	b291      	uxth	r1, r2
 80121e2:	4a13      	ldr	r2, [pc, #76]	; (8012230 <tcp_get_next_optbyte+0x5c>)
 80121e4:	8011      	strh	r1, [r2, #0]
 80121e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80121e8:	4b12      	ldr	r3, [pc, #72]	; (8012234 <tcp_get_next_optbyte+0x60>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d004      	beq.n	80121fa <tcp_get_next_optbyte+0x26>
 80121f0:	4b11      	ldr	r3, [pc, #68]	; (8012238 <tcp_get_next_optbyte+0x64>)
 80121f2:	881b      	ldrh	r3, [r3, #0]
 80121f4:	88fa      	ldrh	r2, [r7, #6]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d208      	bcs.n	801220c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80121fa:	4b10      	ldr	r3, [pc, #64]	; (801223c <tcp_get_next_optbyte+0x68>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	3314      	adds	r3, #20
 8012200:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012202:	88fb      	ldrh	r3, [r7, #6]
 8012204:	683a      	ldr	r2, [r7, #0]
 8012206:	4413      	add	r3, r2
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	e00b      	b.n	8012224 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801220c:	88fb      	ldrh	r3, [r7, #6]
 801220e:	b2da      	uxtb	r2, r3
 8012210:	4b09      	ldr	r3, [pc, #36]	; (8012238 <tcp_get_next_optbyte+0x64>)
 8012212:	881b      	ldrh	r3, [r3, #0]
 8012214:	b2db      	uxtb	r3, r3
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801221a:	4b06      	ldr	r3, [pc, #24]	; (8012234 <tcp_get_next_optbyte+0x60>)
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	797b      	ldrb	r3, [r7, #5]
 8012220:	4413      	add	r3, r2
 8012222:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012224:	4618      	mov	r0, r3
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	20007280 	.word	0x20007280
 8012234:	2000727c 	.word	0x2000727c
 8012238:	2000727a 	.word	0x2000727a
 801223c:	20007274 	.word	0x20007274

08012240 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_parseopt+0x1c>
 801224e:	4b31      	ldr	r3, [pc, #196]	; (8012314 <tcp_parseopt+0xd4>)
 8012250:	f240 727d 	movw	r2, #1917	; 0x77d
 8012254:	4930      	ldr	r1, [pc, #192]	; (8012318 <tcp_parseopt+0xd8>)
 8012256:	4831      	ldr	r0, [pc, #196]	; (801231c <tcp_parseopt+0xdc>)
 8012258:	f002 ffda 	bl	8015210 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801225c:	4b30      	ldr	r3, [pc, #192]	; (8012320 <tcp_parseopt+0xe0>)
 801225e:	881b      	ldrh	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d053      	beq.n	801230c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012264:	4b2f      	ldr	r3, [pc, #188]	; (8012324 <tcp_parseopt+0xe4>)
 8012266:	2200      	movs	r2, #0
 8012268:	801a      	strh	r2, [r3, #0]
 801226a:	e043      	b.n	80122f4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801226c:	f7ff ffb2 	bl	80121d4 <tcp_get_next_optbyte>
 8012270:	4603      	mov	r3, r0
 8012272:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d03c      	beq.n	80122f4 <tcp_parseopt+0xb4>
 801227a:	2b02      	cmp	r3, #2
 801227c:	d002      	beq.n	8012284 <tcp_parseopt+0x44>
 801227e:	2b00      	cmp	r3, #0
 8012280:	d03f      	beq.n	8012302 <tcp_parseopt+0xc2>
 8012282:	e026      	b.n	80122d2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012284:	f7ff ffa6 	bl	80121d4 <tcp_get_next_optbyte>
 8012288:	4603      	mov	r3, r0
 801228a:	2b04      	cmp	r3, #4
 801228c:	d13b      	bne.n	8012306 <tcp_parseopt+0xc6>
 801228e:	4b25      	ldr	r3, [pc, #148]	; (8012324 <tcp_parseopt+0xe4>)
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	3302      	adds	r3, #2
 8012294:	4a22      	ldr	r2, [pc, #136]	; (8012320 <tcp_parseopt+0xe0>)
 8012296:	8812      	ldrh	r2, [r2, #0]
 8012298:	4293      	cmp	r3, r2
 801229a:	dc34      	bgt.n	8012306 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801229c:	f7ff ff9a 	bl	80121d4 <tcp_get_next_optbyte>
 80122a0:	4603      	mov	r3, r0
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	021b      	lsls	r3, r3, #8
 80122a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80122a8:	f7ff ff94 	bl	80121d4 <tcp_get_next_optbyte>
 80122ac:	4603      	mov	r3, r0
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	89bb      	ldrh	r3, [r7, #12]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80122b6:	89bb      	ldrh	r3, [r7, #12]
 80122b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80122bc:	d804      	bhi.n	80122c8 <tcp_parseopt+0x88>
 80122be:	89bb      	ldrh	r3, [r7, #12]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <tcp_parseopt+0x88>
 80122c4:	89ba      	ldrh	r2, [r7, #12]
 80122c6:	e001      	b.n	80122cc <tcp_parseopt+0x8c>
 80122c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80122d0:	e010      	b.n	80122f4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80122d2:	f7ff ff7f 	bl	80121d4 <tcp_get_next_optbyte>
 80122d6:	4603      	mov	r3, r0
 80122d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80122da:	7afb      	ldrb	r3, [r7, #11]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d914      	bls.n	801230a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80122e0:	7afb      	ldrb	r3, [r7, #11]
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	4b0f      	ldr	r3, [pc, #60]	; (8012324 <tcp_parseopt+0xe4>)
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	4413      	add	r3, r2
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	3b02      	subs	r3, #2
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	4b0c      	ldr	r3, [pc, #48]	; (8012324 <tcp_parseopt+0xe4>)
 80122f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80122f4:	4b0b      	ldr	r3, [pc, #44]	; (8012324 <tcp_parseopt+0xe4>)
 80122f6:	881a      	ldrh	r2, [r3, #0]
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <tcp_parseopt+0xe0>)
 80122fa:	881b      	ldrh	r3, [r3, #0]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d3b5      	bcc.n	801226c <tcp_parseopt+0x2c>
 8012300:	e004      	b.n	801230c <tcp_parseopt+0xcc>
          return;
 8012302:	bf00      	nop
 8012304:	e002      	b.n	801230c <tcp_parseopt+0xcc>
            return;
 8012306:	bf00      	nop
 8012308:	e000      	b.n	801230c <tcp_parseopt+0xcc>
            return;
 801230a:	bf00      	nop
      }
    }
  }
}
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	08017db0 	.word	0x08017db0
 8012318:	08018214 	.word	0x08018214
 801231c:	08017dfc 	.word	0x08017dfc
 8012320:	20007278 	.word	0x20007278
 8012324:	20007280 	.word	0x20007280

08012328 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012328:	b480      	push	{r7}
 801232a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <tcp_trigger_input_pcb_close+0x1c>)
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	f043 0310 	orr.w	r3, r3, #16
 8012334:	b2da      	uxtb	r2, r3
 8012336:	4b03      	ldr	r3, [pc, #12]	; (8012344 <tcp_trigger_input_pcb_close+0x1c>)
 8012338:	701a      	strb	r2, [r3, #0]
}
 801233a:	bf00      	nop
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr
 8012344:	20007291 	.word	0x20007291

08012348 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00a      	beq.n	8012370 <tcp_route+0x28>
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	7a1b      	ldrb	r3, [r3, #8]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d006      	beq.n	8012370 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7a1b      	ldrb	r3, [r3, #8]
 8012366:	4618      	mov	r0, r3
 8012368:	f7fa ff22 	bl	800d1b0 <netif_get_by_index>
 801236c:	4603      	mov	r3, r0
 801236e:	e003      	b.n	8012378 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7f8 fe45 	bl	800b000 <ip4_route>
 8012376:	4603      	mov	r3, r0
  }
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012380:	b590      	push	{r4, r7, lr}
 8012382:	b087      	sub	sp, #28
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	4613      	mov	r3, r2
 801238e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d105      	bne.n	80123a2 <tcp_create_segment+0x22>
 8012396:	4b45      	ldr	r3, [pc, #276]	; (80124ac <tcp_create_segment+0x12c>)
 8012398:	22a3      	movs	r2, #163	; 0xa3
 801239a:	4945      	ldr	r1, [pc, #276]	; (80124b0 <tcp_create_segment+0x130>)
 801239c:	4845      	ldr	r0, [pc, #276]	; (80124b4 <tcp_create_segment+0x134>)
 801239e:	f002 ff37 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d105      	bne.n	80123b4 <tcp_create_segment+0x34>
 80123a8:	4b40      	ldr	r3, [pc, #256]	; (80124ac <tcp_create_segment+0x12c>)
 80123aa:	22a4      	movs	r2, #164	; 0xa4
 80123ac:	4942      	ldr	r1, [pc, #264]	; (80124b8 <tcp_create_segment+0x138>)
 80123ae:	4841      	ldr	r0, [pc, #260]	; (80124b4 <tcp_create_segment+0x134>)
 80123b0:	f002 ff2e 	bl	8015210 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d001      	beq.n	80123c4 <tcp_create_segment+0x44>
 80123c0:	2304      	movs	r3, #4
 80123c2:	e000      	b.n	80123c6 <tcp_create_segment+0x46>
 80123c4:	2300      	movs	r3, #0
 80123c6:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80123c8:	2003      	movs	r0, #3
 80123ca:	f7fa fb89 	bl	800cae0 <memp_malloc>
 80123ce:	6138      	str	r0, [r7, #16]
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d104      	bne.n	80123e0 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80123d6:	68b8      	ldr	r0, [r7, #8]
 80123d8:	f7fb fa76 	bl	800d8c8 <pbuf_free>
    return NULL;
 80123dc:	2300      	movs	r3, #0
 80123de:	e061      	b.n	80124a4 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80123e6:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	2200      	movs	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	891a      	ldrh	r2, [r3, #8]
 80123f8:	7dfb      	ldrb	r3, [r7, #23]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d205      	bcs.n	801240c <tcp_create_segment+0x8c>
 8012400:	4b2a      	ldr	r3, [pc, #168]	; (80124ac <tcp_create_segment+0x12c>)
 8012402:	22b0      	movs	r2, #176	; 0xb0
 8012404:	492d      	ldr	r1, [pc, #180]	; (80124bc <tcp_create_segment+0x13c>)
 8012406:	482b      	ldr	r0, [pc, #172]	; (80124b4 <tcp_create_segment+0x134>)
 8012408:	f002 ff02 	bl	8015210 <iprintf>
  seg->len = p->tot_len - optlen;
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	891a      	ldrh	r2, [r3, #8]
 8012410:	7dfb      	ldrb	r3, [r7, #23]
 8012412:	b29b      	uxth	r3, r3
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	b29a      	uxth	r2, r3
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801241c:	2114      	movs	r1, #20
 801241e:	68b8      	ldr	r0, [r7, #8]
 8012420:	f7fb f9bc 	bl	800d79c <pbuf_add_header>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d004      	beq.n	8012434 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801242a:	6938      	ldr	r0, [r7, #16]
 801242c:	f7fc ffe6 	bl	800f3fc <tcp_seg_free>
    return NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	e037      	b.n	80124a4 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	685a      	ldr	r2, [r3, #4]
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	68dc      	ldr	r4, [r3, #12]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	8adb      	ldrh	r3, [r3, #22]
 8012446:	4618      	mov	r0, r3
 8012448:	f7f7 f994 	bl	8009774 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	68dc      	ldr	r4, [r3, #12]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	8b1b      	ldrh	r3, [r3, #24]
 8012458:	4618      	mov	r0, r3
 801245a:	f7f7 f98b 	bl	8009774 <lwip_htons>
 801245e:	4603      	mov	r3, r0
 8012460:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	68dc      	ldr	r4, [r3, #12]
 8012466:	6838      	ldr	r0, [r7, #0]
 8012468:	f7f7 f999 	bl	800979e <lwip_htonl>
 801246c:	4603      	mov	r3, r0
 801246e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	68dc      	ldr	r4, [r3, #12]
 8012474:	7dfb      	ldrb	r3, [r7, #23]
 8012476:	089b      	lsrs	r3, r3, #2
 8012478:	b2db      	uxtb	r3, r3
 801247a:	b29b      	uxth	r3, r3
 801247c:	3305      	adds	r3, #5
 801247e:	b29b      	uxth	r3, r3
 8012480:	031b      	lsls	r3, r3, #12
 8012482:	b29a      	uxth	r2, r3
 8012484:	79fb      	ldrb	r3, [r7, #7]
 8012486:	b29b      	uxth	r3, r3
 8012488:	4313      	orrs	r3, r2
 801248a:	b29b      	uxth	r3, r3
 801248c:	4618      	mov	r0, r3
 801248e:	f7f7 f971 	bl	8009774 <lwip_htons>
 8012492:	4603      	mov	r3, r0
 8012494:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	2200      	movs	r2, #0
 801249c:	749a      	strb	r2, [r3, #18]
 801249e:	2200      	movs	r2, #0
 80124a0:	74da      	strb	r2, [r3, #19]
  return seg;
 80124a2:	693b      	ldr	r3, [r7, #16]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	371c      	adds	r7, #28
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd90      	pop	{r4, r7, pc}
 80124ac:	08018230 	.word	0x08018230
 80124b0:	08018264 	.word	0x08018264
 80124b4:	08018284 	.word	0x08018284
 80124b8:	080182ac 	.word	0x080182ac
 80124bc:	080182d0 	.word	0x080182d0

080124c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b086      	sub	sp, #24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	607b      	str	r3, [r7, #4]
 80124c8:	4603      	mov	r3, r0
 80124ca:	73fb      	strb	r3, [r7, #15]
 80124cc:	460b      	mov	r3, r1
 80124ce:	81bb      	strh	r3, [r7, #12]
 80124d0:	4613      	mov	r3, r2
 80124d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80124d4:	89bb      	ldrh	r3, [r7, #12]
 80124d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d105      	bne.n	80124ea <tcp_pbuf_prealloc+0x2a>
 80124de:	4b30      	ldr	r3, [pc, #192]	; (80125a0 <tcp_pbuf_prealloc+0xe0>)
 80124e0:	22e8      	movs	r2, #232	; 0xe8
 80124e2:	4930      	ldr	r1, [pc, #192]	; (80125a4 <tcp_pbuf_prealloc+0xe4>)
 80124e4:	4830      	ldr	r0, [pc, #192]	; (80125a8 <tcp_pbuf_prealloc+0xe8>)
 80124e6:	f002 fe93 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80124ea:	6a3b      	ldr	r3, [r7, #32]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d105      	bne.n	80124fc <tcp_pbuf_prealloc+0x3c>
 80124f0:	4b2b      	ldr	r3, [pc, #172]	; (80125a0 <tcp_pbuf_prealloc+0xe0>)
 80124f2:	22e9      	movs	r2, #233	; 0xe9
 80124f4:	492d      	ldr	r1, [pc, #180]	; (80125ac <tcp_pbuf_prealloc+0xec>)
 80124f6:	482c      	ldr	r0, [pc, #176]	; (80125a8 <tcp_pbuf_prealloc+0xe8>)
 80124f8:	f002 fe8a 	bl	8015210 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80124fc:	89ba      	ldrh	r2, [r7, #12]
 80124fe:	897b      	ldrh	r3, [r7, #10]
 8012500:	429a      	cmp	r2, r3
 8012502:	d221      	bcs.n	8012548 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012508:	f003 0302 	and.w	r3, r3, #2
 801250c:	2b00      	cmp	r3, #0
 801250e:	d111      	bne.n	8012534 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012510:	6a3b      	ldr	r3, [r7, #32]
 8012512:	8b5b      	ldrh	r3, [r3, #26]
 8012514:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012518:	2b00      	cmp	r3, #0
 801251a:	d115      	bne.n	8012548 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801251c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012520:	2b00      	cmp	r3, #0
 8012522:	d007      	beq.n	8012534 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012528:	2b00      	cmp	r3, #0
 801252a:	d103      	bne.n	8012534 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801252c:	6a3b      	ldr	r3, [r7, #32]
 801252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012530:	2b00      	cmp	r3, #0
 8012532:	d009      	beq.n	8012548 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012534:	89bb      	ldrh	r3, [r7, #12]
 8012536:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801253a:	f023 0203 	bic.w	r2, r3, #3
 801253e:	897b      	ldrh	r3, [r7, #10]
 8012540:	4293      	cmp	r3, r2
 8012542:	bf28      	it	cs
 8012544:	4613      	movcs	r3, r2
 8012546:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012548:	8af9      	ldrh	r1, [r7, #22]
 801254a:	7bfb      	ldrb	r3, [r7, #15]
 801254c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012550:	4618      	mov	r0, r3
 8012552:	f7fa fed7 	bl	800d304 <pbuf_alloc>
 8012556:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d101      	bne.n	8012562 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801255e:	2300      	movs	r3, #0
 8012560:	e019      	b.n	8012596 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d006      	beq.n	8012578 <tcp_pbuf_prealloc+0xb8>
 801256a:	4b0d      	ldr	r3, [pc, #52]	; (80125a0 <tcp_pbuf_prealloc+0xe0>)
 801256c:	f240 120b 	movw	r2, #267	; 0x10b
 8012570:	490f      	ldr	r1, [pc, #60]	; (80125b0 <tcp_pbuf_prealloc+0xf0>)
 8012572:	480d      	ldr	r0, [pc, #52]	; (80125a8 <tcp_pbuf_prealloc+0xe8>)
 8012574:	f002 fe4c 	bl	8015210 <iprintf>
  *oversize = p->len - length;
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	895a      	ldrh	r2, [r3, #10]
 801257c:	89bb      	ldrh	r3, [r7, #12]
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	b29a      	uxth	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	89ba      	ldrh	r2, [r7, #12]
 801258a:	811a      	strh	r2, [r3, #8]
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	891a      	ldrh	r2, [r3, #8]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	815a      	strh	r2, [r3, #10]
  return p;
 8012594:	693b      	ldr	r3, [r7, #16]
}
 8012596:	4618      	mov	r0, r3
 8012598:	3718      	adds	r7, #24
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	08018230 	.word	0x08018230
 80125a4:	080182e8 	.word	0x080182e8
 80125a8:	08018284 	.word	0x08018284
 80125ac:	0801830c 	.word	0x0801830c
 80125b0:	0801832c 	.word	0x0801832c

080125b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	460b      	mov	r3, r1
 80125be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <tcp_write_checks+0x20>
 80125c6:	4b33      	ldr	r3, [pc, #204]	; (8012694 <tcp_write_checks+0xe0>)
 80125c8:	f240 1233 	movw	r2, #307	; 0x133
 80125cc:	4932      	ldr	r1, [pc, #200]	; (8012698 <tcp_write_checks+0xe4>)
 80125ce:	4833      	ldr	r0, [pc, #204]	; (801269c <tcp_write_checks+0xe8>)
 80125d0:	f002 fe1e 	bl	8015210 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
 80125d8:	2b04      	cmp	r3, #4
 80125da:	d00e      	beq.n	80125fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80125e0:	2b07      	cmp	r3, #7
 80125e2:	d00a      	beq.n	80125fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	d006      	beq.n	80125fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80125f0:	2b03      	cmp	r3, #3
 80125f2:	d002      	beq.n	80125fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80125f4:	f06f 030a 	mvn.w	r3, #10
 80125f8:	e048      	b.n	801268c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80125fa:	887b      	ldrh	r3, [r7, #2]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d101      	bne.n	8012604 <tcp_write_checks+0x50>
    return ERR_OK;
 8012600:	2300      	movs	r3, #0
 8012602:	e043      	b.n	801268c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801260a:	887a      	ldrh	r2, [r7, #2]
 801260c:	429a      	cmp	r2, r3
 801260e:	d909      	bls.n	8012624 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	8b5b      	ldrh	r3, [r3, #26]
 8012614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012618:	b29a      	uxth	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801261e:	f04f 33ff 	mov.w	r3, #4294967295
 8012622:	e033      	b.n	801268c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801262a:	2b08      	cmp	r3, #8
 801262c:	d909      	bls.n	8012642 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	8b5b      	ldrh	r3, [r3, #26]
 8012632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012636:	b29a      	uxth	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801263c:	f04f 33ff 	mov.w	r3, #4294967295
 8012640:	e024      	b.n	801268c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00f      	beq.n	801266c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012650:	2b00      	cmp	r3, #0
 8012652:	d11a      	bne.n	801268a <tcp_write_checks+0xd6>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d116      	bne.n	801268a <tcp_write_checks+0xd6>
 801265c:	4b0d      	ldr	r3, [pc, #52]	; (8012694 <tcp_write_checks+0xe0>)
 801265e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8012662:	490f      	ldr	r1, [pc, #60]	; (80126a0 <tcp_write_checks+0xec>)
 8012664:	480d      	ldr	r0, [pc, #52]	; (801269c <tcp_write_checks+0xe8>)
 8012666:	f002 fdd3 	bl	8015210 <iprintf>
 801266a:	e00e      	b.n	801268a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012670:	2b00      	cmp	r3, #0
 8012672:	d103      	bne.n	801267c <tcp_write_checks+0xc8>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <tcp_write_checks+0xd6>
 801267c:	4b05      	ldr	r3, [pc, #20]	; (8012694 <tcp_write_checks+0xe0>)
 801267e:	f240 1259 	movw	r2, #345	; 0x159
 8012682:	4908      	ldr	r1, [pc, #32]	; (80126a4 <tcp_write_checks+0xf0>)
 8012684:	4805      	ldr	r0, [pc, #20]	; (801269c <tcp_write_checks+0xe8>)
 8012686:	f002 fdc3 	bl	8015210 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3708      	adds	r7, #8
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	08018230 	.word	0x08018230
 8012698:	08018340 	.word	0x08018340
 801269c:	08018284 	.word	0x08018284
 80126a0:	08018360 	.word	0x08018360
 80126a4:	0801839c 	.word	0x0801839c

080126a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80126a8:	b5b0      	push	{r4, r5, r7, lr}
 80126aa:	b09a      	sub	sp, #104	; 0x68
 80126ac:	af04      	add	r7, sp, #16
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	4611      	mov	r1, r2
 80126b4:	461a      	mov	r2, r3
 80126b6:	460b      	mov	r3, r1
 80126b8:	80fb      	strh	r3, [r7, #6]
 80126ba:	4613      	mov	r3, r2
 80126bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80126be:	2300      	movs	r3, #0
 80126c0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80126c2:	2300      	movs	r3, #0
 80126c4:	653b      	str	r3, [r7, #80]	; 0x50
 80126c6:	2300      	movs	r3, #0
 80126c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126ca:	2300      	movs	r3, #0
 80126cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ce:	2300      	movs	r3, #0
 80126d0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80126d2:	2300      	movs	r3, #0
 80126d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80126d8:	2300      	movs	r3, #0
 80126da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80126e6:	2300      	movs	r3, #0
 80126e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d109      	bne.n	8012704 <tcp_write+0x5c>
 80126f0:	4ba6      	ldr	r3, [pc, #664]	; (801298c <tcp_write+0x2e4>)
 80126f2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80126f6:	49a6      	ldr	r1, [pc, #664]	; (8012990 <tcp_write+0x2e8>)
 80126f8:	48a6      	ldr	r0, [pc, #664]	; (8012994 <tcp_write+0x2ec>)
 80126fa:	f002 fd89 	bl	8015210 <iprintf>
 80126fe:	f06f 030f 	mvn.w	r3, #15
 8012702:	e32d      	b.n	8012d60 <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801270a:	085b      	lsrs	r3, r3, #1
 801270c:	b29a      	uxth	r2, r3
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012712:	4293      	cmp	r3, r2
 8012714:	bf28      	it	cs
 8012716:	4613      	movcs	r3, r2
 8012718:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801271a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801271c:	2b00      	cmp	r3, #0
 801271e:	d102      	bne.n	8012726 <tcp_write+0x7e>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012724:	e000      	b.n	8012728 <tcp_write+0x80>
 8012726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012728:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d109      	bne.n	8012744 <tcp_write+0x9c>
 8012730:	4b96      	ldr	r3, [pc, #600]	; (801298c <tcp_write+0x2e4>)
 8012732:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8012736:	4998      	ldr	r1, [pc, #608]	; (8012998 <tcp_write+0x2f0>)
 8012738:	4896      	ldr	r0, [pc, #600]	; (8012994 <tcp_write+0x2ec>)
 801273a:	f002 fd69 	bl	8015210 <iprintf>
 801273e:	f06f 030f 	mvn.w	r3, #15
 8012742:	e30d      	b.n	8012d60 <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012744:	88fb      	ldrh	r3, [r7, #6]
 8012746:	4619      	mov	r1, r3
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff ff33 	bl	80125b4 <tcp_write_checks>
 801274e:	4603      	mov	r3, r0
 8012750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012754:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <tcp_write+0xba>
    return err;
 801275c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012760:	e2fe      	b.n	8012d60 <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012768:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801276c:	2300      	movs	r3, #0
 801276e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012776:	2b00      	cmp	r3, #0
 8012778:	f000 80fa 	beq.w	8012970 <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012780:	653b      	str	r3, [r7, #80]	; 0x50
 8012782:	e002      	b.n	801278a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801278a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d1f8      	bne.n	8012784 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012794:	7a9b      	ldrb	r3, [r3, #10]
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	d001      	beq.n	80127a2 <tcp_write+0xfa>
 801279e:	2304      	movs	r3, #4
 80127a0:	e000      	b.n	80127a4 <tcp_write+0xfc>
 80127a2:	2300      	movs	r3, #0
 80127a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80127a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127aa:	891b      	ldrh	r3, [r3, #8]
 80127ac:	4619      	mov	r1, r3
 80127ae:	8c3b      	ldrh	r3, [r7, #32]
 80127b0:	440b      	add	r3, r1
 80127b2:	429a      	cmp	r2, r3
 80127b4:	da06      	bge.n	80127c4 <tcp_write+0x11c>
 80127b6:	4b75      	ldr	r3, [pc, #468]	; (801298c <tcp_write+0x2e4>)
 80127b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80127bc:	4977      	ldr	r1, [pc, #476]	; (801299c <tcp_write+0x2f4>)
 80127be:	4875      	ldr	r0, [pc, #468]	; (8012994 <tcp_write+0x2ec>)
 80127c0:	f002 fd26 	bl	8015210 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80127c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c6:	891a      	ldrh	r2, [r3, #8]
 80127c8:	8c3b      	ldrh	r3, [r7, #32]
 80127ca:	4413      	add	r3, r2
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127da:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80127dc:	8a7b      	ldrh	r3, [r7, #18]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d027      	beq.n	8012832 <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80127e2:	8a7b      	ldrh	r3, [r7, #18]
 80127e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d206      	bcs.n	80127f8 <tcp_write+0x150>
 80127ea:	4b68      	ldr	r3, [pc, #416]	; (801298c <tcp_write+0x2e4>)
 80127ec:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80127f0:	496b      	ldr	r1, [pc, #428]	; (80129a0 <tcp_write+0x2f8>)
 80127f2:	4868      	ldr	r0, [pc, #416]	; (8012994 <tcp_write+0x2ec>)
 80127f4:	f002 fd0c 	bl	8015210 <iprintf>
      seg = last_unsent;
 80127f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80127fc:	8a7b      	ldrh	r3, [r7, #18]
 80127fe:	88fa      	ldrh	r2, [r7, #6]
 8012800:	429a      	cmp	r2, r3
 8012802:	d901      	bls.n	8012808 <tcp_write+0x160>
 8012804:	8a7b      	ldrh	r3, [r7, #18]
 8012806:	e000      	b.n	801280a <tcp_write+0x162>
 8012808:	88fb      	ldrh	r3, [r7, #6]
 801280a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801280c:	4293      	cmp	r3, r2
 801280e:	bfa8      	it	ge
 8012810:	4613      	movge	r3, r2
 8012812:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801281a:	4413      	add	r3, r2
 801281c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012820:	8a7a      	ldrh	r2, [r7, #18]
 8012822:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012824:	1ad3      	subs	r3, r2, r3
 8012826:	b29b      	uxth	r3, r3
 8012828:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801282a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801282c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012832:	8a7b      	ldrh	r3, [r7, #18]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d00b      	beq.n	8012850 <tcp_write+0x1a8>
 8012838:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801283c:	88fb      	ldrh	r3, [r7, #6]
 801283e:	429a      	cmp	r2, r3
 8012840:	d006      	beq.n	8012850 <tcp_write+0x1a8>
 8012842:	4b52      	ldr	r3, [pc, #328]	; (801298c <tcp_write+0x2e4>)
 8012844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012848:	4956      	ldr	r1, [pc, #344]	; (80129a4 <tcp_write+0x2fc>)
 801284a:	4852      	ldr	r0, [pc, #328]	; (8012994 <tcp_write+0x2ec>)
 801284c:	f002 fce0 	bl	8015210 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012850:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012854:	88fb      	ldrh	r3, [r7, #6]
 8012856:	429a      	cmp	r2, r3
 8012858:	f080 8167 	bcs.w	8012b2a <tcp_write+0x482>
 801285c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801285e:	2b00      	cmp	r3, #0
 8012860:	f000 8163 	beq.w	8012b2a <tcp_write+0x482>
 8012864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012866:	891b      	ldrh	r3, [r3, #8]
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 815e 	beq.w	8012b2a <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801286e:	88fa      	ldrh	r2, [r7, #6]
 8012870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012874:	1ad2      	subs	r2, r2, r3
 8012876:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012878:	4293      	cmp	r3, r2
 801287a:	bfa8      	it	ge
 801287c:	4613      	movge	r3, r2
 801287e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012882:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012884:	797b      	ldrb	r3, [r7, #5]
 8012886:	f003 0301 	and.w	r3, r3, #1
 801288a:	2b00      	cmp	r3, #0
 801288c:	d027      	beq.n	80128de <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801288e:	f107 0012 	add.w	r0, r7, #18
 8012892:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012894:	8bf9      	ldrh	r1, [r7, #30]
 8012896:	2301      	movs	r3, #1
 8012898:	9302      	str	r3, [sp, #8]
 801289a:	797b      	ldrb	r3, [r7, #5]
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	4603      	mov	r3, r0
 80128a4:	2000      	movs	r0, #0
 80128a6:	f7ff fe0b 	bl	80124c0 <tcp_pbuf_prealloc>
 80128aa:	6578      	str	r0, [r7, #84]	; 0x54
 80128ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 8224 	beq.w	8012cfc <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80128b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128b6:	6858      	ldr	r0, [r3, #4]
 80128b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	4413      	add	r3, r2
 80128c0:	8bfa      	ldrh	r2, [r7, #30]
 80128c2:	4619      	mov	r1, r3
 80128c4:	f002 fc91 	bl	80151ea <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80128c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80128ca:	f7fb f88b 	bl	800d9e4 <pbuf_clen>
 80128ce:	4603      	mov	r3, r0
 80128d0:	461a      	mov	r2, r3
 80128d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128d6:	4413      	add	r3, r2
 80128d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80128dc:	e041      	b.n	8012962 <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80128de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	637b      	str	r3, [r7, #52]	; 0x34
 80128e4:	e002      	b.n	80128ec <tcp_write+0x244>
 80128e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	637b      	str	r3, [r7, #52]	; 0x34
 80128ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1f8      	bne.n	80128e6 <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80128f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f6:	7b1b      	ldrb	r3, [r3, #12]
 80128f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d115      	bne.n	801292c <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012906:	8952      	ldrh	r2, [r2, #10]
 8012908:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	429a      	cmp	r2, r3
 801290e:	d10d      	bne.n	801292c <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012910:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012914:	2b00      	cmp	r3, #0
 8012916:	d006      	beq.n	8012926 <tcp_write+0x27e>
 8012918:	4b1c      	ldr	r3, [pc, #112]	; (801298c <tcp_write+0x2e4>)
 801291a:	f240 2231 	movw	r2, #561	; 0x231
 801291e:	4922      	ldr	r1, [pc, #136]	; (80129a8 <tcp_write+0x300>)
 8012920:	481c      	ldr	r0, [pc, #112]	; (8012994 <tcp_write+0x2ec>)
 8012922:	f002 fc75 	bl	8015210 <iprintf>
          extendlen = seglen;
 8012926:	8bfb      	ldrh	r3, [r7, #30]
 8012928:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801292a:	e01a      	b.n	8012962 <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801292c:	8bfb      	ldrh	r3, [r7, #30]
 801292e:	2201      	movs	r2, #1
 8012930:	4619      	mov	r1, r3
 8012932:	2000      	movs	r0, #0
 8012934:	f7fa fce6 	bl	800d304 <pbuf_alloc>
 8012938:	6578      	str	r0, [r7, #84]	; 0x54
 801293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801293c:	2b00      	cmp	r3, #0
 801293e:	f000 81df 	beq.w	8012d00 <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	441a      	add	r2, r3
 801294a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801294c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801294e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012950:	f7fb f848 	bl	800d9e4 <pbuf_clen>
 8012954:	4603      	mov	r3, r0
 8012956:	461a      	mov	r2, r3
 8012958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801295c:	4413      	add	r3, r2
 801295e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012962:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012966:	8bfb      	ldrh	r3, [r7, #30]
 8012968:	4413      	add	r3, r2
 801296a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801296e:	e0dc      	b.n	8012b2a <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 80d7 	beq.w	8012b2a <tcp_write+0x482>
 801297c:	4b03      	ldr	r3, [pc, #12]	; (801298c <tcp_write+0x2e4>)
 801297e:	f240 224b 	movw	r2, #587	; 0x24b
 8012982:	490a      	ldr	r1, [pc, #40]	; (80129ac <tcp_write+0x304>)
 8012984:	4803      	ldr	r0, [pc, #12]	; (8012994 <tcp_write+0x2ec>)
 8012986:	f002 fc43 	bl	8015210 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801298a:	e0ce      	b.n	8012b2a <tcp_write+0x482>
 801298c:	08018230 	.word	0x08018230
 8012990:	080183d0 	.word	0x080183d0
 8012994:	08018284 	.word	0x08018284
 8012998:	080183e8 	.word	0x080183e8
 801299c:	0801841c 	.word	0x0801841c
 80129a0:	08018434 	.word	0x08018434
 80129a4:	08018454 	.word	0x08018454
 80129a8:	08018474 	.word	0x08018474
 80129ac:	080184a0 	.word	0x080184a0
    struct pbuf *p;
    u16_t left = len - pos;
 80129b0:	88fa      	ldrh	r2, [r7, #6]
 80129b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80129ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129be:	b29b      	uxth	r3, r3
 80129c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129c2:	1ad3      	subs	r3, r2, r3
 80129c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80129c6:	8b7a      	ldrh	r2, [r7, #26]
 80129c8:	8bbb      	ldrh	r3, [r7, #28]
 80129ca:	4293      	cmp	r3, r2
 80129cc:	bf28      	it	cs
 80129ce:	4613      	movcs	r3, r2
 80129d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129d2:	797b      	ldrb	r3, [r7, #5]
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d036      	beq.n	8012a4a <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80129dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	8b3b      	ldrh	r3, [r7, #24]
 80129e4:	4413      	add	r3, r2
 80129e6:	b299      	uxth	r1, r3
 80129e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	bf0c      	ite	eq
 80129ee:	2301      	moveq	r3, #1
 80129f0:	2300      	movne	r3, #0
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	f107 0012 	add.w	r0, r7, #18
 80129f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129fa:	9302      	str	r3, [sp, #8]
 80129fc:	797b      	ldrb	r3, [r7, #5]
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	4603      	mov	r3, r0
 8012a06:	2036      	movs	r0, #54	; 0x36
 8012a08:	f7ff fd5a 	bl	80124c0 <tcp_pbuf_prealloc>
 8012a0c:	6338      	str	r0, [r7, #48]	; 0x30
 8012a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	f000 8177 	beq.w	8012d04 <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	895b      	ldrh	r3, [r3, #10]
 8012a1a:	8b3a      	ldrh	r2, [r7, #24]
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d906      	bls.n	8012a2e <tcp_write+0x386>
 8012a20:	4b8c      	ldr	r3, [pc, #560]	; (8012c54 <tcp_write+0x5ac>)
 8012a22:	f240 2267 	movw	r2, #615	; 0x267
 8012a26:	498c      	ldr	r1, [pc, #560]	; (8012c58 <tcp_write+0x5b0>)
 8012a28:	488c      	ldr	r0, [pc, #560]	; (8012c5c <tcp_write+0x5b4>)
 8012a2a:	f002 fbf1 	bl	8015210 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012a36:	18d0      	adds	r0, r2, r3
 8012a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a3c:	68ba      	ldr	r2, [r7, #8]
 8012a3e:	4413      	add	r3, r2
 8012a40:	8b3a      	ldrh	r2, [r7, #24]
 8012a42:	4619      	mov	r1, r3
 8012a44:	f002 fbd1 	bl	80151ea <memcpy>
 8012a48:	e02f      	b.n	8012aaa <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012a4a:	8a7b      	ldrh	r3, [r7, #18]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d006      	beq.n	8012a5e <tcp_write+0x3b6>
 8012a50:	4b80      	ldr	r3, [pc, #512]	; (8012c54 <tcp_write+0x5ac>)
 8012a52:	f240 2271 	movw	r2, #625	; 0x271
 8012a56:	4982      	ldr	r1, [pc, #520]	; (8012c60 <tcp_write+0x5b8>)
 8012a58:	4880      	ldr	r0, [pc, #512]	; (8012c5c <tcp_write+0x5b4>)
 8012a5a:	f002 fbd9 	bl	8015210 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012a5e:	8b3b      	ldrh	r3, [r7, #24]
 8012a60:	2201      	movs	r2, #1
 8012a62:	4619      	mov	r1, r3
 8012a64:	2036      	movs	r0, #54	; 0x36
 8012a66:	f7fa fc4d 	bl	800d304 <pbuf_alloc>
 8012a6a:	6178      	str	r0, [r7, #20]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	f000 814a 	beq.w	8012d08 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	441a      	add	r2, r3
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	2036      	movs	r0, #54	; 0x36
 8012a8e:	f7fa fc39 	bl	800d304 <pbuf_alloc>
 8012a92:	6338      	str	r0, [r7, #48]	; 0x30
 8012a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d103      	bne.n	8012aa2 <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012a9a:	6978      	ldr	r0, [r7, #20]
 8012a9c:	f7fa ff14 	bl	800d8c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012aa0:	e135      	b.n	8012d0e <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012aa2:	6979      	ldr	r1, [r7, #20]
 8012aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012aa6:	f7fa ffdd 	bl	800da64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012aac:	f7fa ff9a 	bl	800d9e4 <pbuf_clen>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ab8:	4413      	add	r3, r2
 8012aba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012abe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ac2:	2b09      	cmp	r3, #9
 8012ac4:	d903      	bls.n	8012ace <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ac8:	f7fa fefe 	bl	800d8c8 <pbuf_free>
      goto memerr;
 8012acc:	e11f      	b.n	8012d0e <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ad2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ad6:	441a      	add	r2, r3
 8012ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012adc:	9300      	str	r3, [sp, #0]
 8012ade:	4613      	mov	r3, r2
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f7ff fc4b 	bl	8012380 <tcp_create_segment>
 8012aea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 810c 	beq.w	8012d0c <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d102      	bne.n	8012b00 <tcp_write+0x458>
      queue = seg;
 8012afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012afc:	647b      	str	r3, [r7, #68]	; 0x44
 8012afe:	e00c      	b.n	8012b1a <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d106      	bne.n	8012b14 <tcp_write+0x46c>
 8012b06:	4b53      	ldr	r3, [pc, #332]	; (8012c54 <tcp_write+0x5ac>)
 8012b08:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b0c:	4955      	ldr	r1, [pc, #340]	; (8012c64 <tcp_write+0x5bc>)
 8012b0e:	4853      	ldr	r0, [pc, #332]	; (8012c5c <tcp_write+0x5b4>)
 8012b10:	f002 fb7e 	bl	8015210 <iprintf>
      prev_seg->next = seg;
 8012b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b18:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b1c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012b1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b22:	8b3b      	ldrh	r3, [r7, #24]
 8012b24:	4413      	add	r3, r2
 8012b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012b2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b2e:	88fb      	ldrh	r3, [r7, #6]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	f4ff af3d 	bcc.w	80129b0 <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012b36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d02c      	beq.n	8012b96 <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b42:	e01e      	b.n	8012b82 <tcp_write+0x4da>
      p->tot_len += oversize_used;
 8012b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b46:	891a      	ldrh	r2, [r3, #8]
 8012b48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b4a:	4413      	add	r3, r2
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b50:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d110      	bne.n	8012b7c <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b60:	8952      	ldrh	r2, [r2, #10]
 8012b62:	4413      	add	r3, r2
 8012b64:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b66:	68b9      	ldr	r1, [r7, #8]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f002 fb3e 	bl	80151ea <memcpy>
        p->len += oversize_used;
 8012b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b70:	895a      	ldrh	r2, [r3, #10]
 8012b72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b74:	4413      	add	r3, r2
 8012b76:	b29a      	uxth	r2, r3
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d1dd      	bne.n	8012b44 <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 8012b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b8a:	891a      	ldrh	r2, [r3, #8]
 8012b8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b8e:	4413      	add	r3, r2
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b94:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012b96:	8a7a      	ldrh	r2, [r7, #18]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d018      	beq.n	8012bd6 <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <tcp_write+0x510>
 8012baa:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <tcp_write+0x5ac>)
 8012bac:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012bb0:	492d      	ldr	r1, [pc, #180]	; (8012c68 <tcp_write+0x5c0>)
 8012bb2:	482a      	ldr	r0, [pc, #168]	; (8012c5c <tcp_write+0x5b4>)
 8012bb4:	f002 fb2c 	bl	8015210 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fa ff50 	bl	800da64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bc6:	891a      	ldrh	r2, [r3, #8]
 8012bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bca:	891b      	ldrh	r3, [r3, #8]
 8012bcc:	4413      	add	r3, r2
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bd2:	811a      	strh	r2, [r3, #8]
 8012bd4:	e037      	b.n	8012c46 <tcp_write+0x59e>
  } else if (extendlen > 0) {
 8012bd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d034      	beq.n	8012c46 <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d003      	beq.n	8012bea <tcp_write+0x542>
 8012be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <tcp_write+0x550>
 8012bea:	4b1a      	ldr	r3, [pc, #104]	; (8012c54 <tcp_write+0x5ac>)
 8012bec:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012bf0:	491e      	ldr	r1, [pc, #120]	; (8012c6c <tcp_write+0x5c4>)
 8012bf2:	481a      	ldr	r0, [pc, #104]	; (8012c5c <tcp_write+0x5b4>)
 8012bf4:	f002 fb0c 	bl	8015210 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bfe:	e009      	b.n	8012c14 <tcp_write+0x56c>
      p->tot_len += extendlen;
 8012c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c02:	891a      	ldrh	r2, [r3, #8]
 8012c04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c06:	4413      	add	r3, r2
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1f1      	bne.n	8012c00 <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 8012c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1e:	891a      	ldrh	r2, [r3, #8]
 8012c20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c22:	4413      	add	r3, r2
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c28:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2c:	895a      	ldrh	r2, [r3, #10]
 8012c2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c30:	4413      	add	r3, r2
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c36:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c3a:	891a      	ldrh	r2, [r3, #8]
 8012c3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c3e:	4413      	add	r3, r2
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c44:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d111      	bne.n	8012c70 <tcp_write+0x5c8>
    pcb->unsent = queue;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c50:	66da      	str	r2, [r3, #108]	; 0x6c
 8012c52:	e010      	b.n	8012c76 <tcp_write+0x5ce>
 8012c54:	08018230 	.word	0x08018230
 8012c58:	080184d0 	.word	0x080184d0
 8012c5c:	08018284 	.word	0x08018284
 8012c60:	08018510 	.word	0x08018510
 8012c64:	08018520 	.word	0x08018520
 8012c68:	08018534 	.word	0x08018534
 8012c6c:	0801856c 	.word	0x0801856c
  } else {
    last_unsent->next = queue;
 8012c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c74:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012c7a:	88fb      	ldrh	r3, [r7, #6]
 8012c7c:	441a      	add	r2, r3
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012c88:	88fb      	ldrh	r3, [r7, #6]
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012c9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d00e      	beq.n	8012cc6 <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10a      	bne.n	8012cc6 <tcp_write+0x61e>
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d106      	bne.n	8012cc6 <tcp_write+0x61e>
 8012cb8:	4b2b      	ldr	r3, [pc, #172]	; (8012d68 <tcp_write+0x6c0>)
 8012cba:	f240 3213 	movw	r2, #787	; 0x313
 8012cbe:	492b      	ldr	r1, [pc, #172]	; (8012d6c <tcp_write+0x6c4>)
 8012cc0:	482b      	ldr	r0, [pc, #172]	; (8012d70 <tcp_write+0x6c8>)
 8012cc2:	f002 faa5 	bl	8015210 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d015      	beq.n	8012cf8 <tcp_write+0x650>
 8012ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d011      	beq.n	8012cf8 <tcp_write+0x650>
 8012cd4:	797b      	ldrb	r3, [r7, #5]
 8012cd6:	f003 0302 	and.w	r3, r3, #2
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d10c      	bne.n	8012cf8 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ce0:	68dc      	ldr	r4, [r3, #12]
 8012ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	899b      	ldrh	r3, [r3, #12]
 8012ce8:	b29d      	uxth	r5, r3
 8012cea:	2008      	movs	r0, #8
 8012cec:	f7f6 fd42 	bl	8009774 <lwip_htons>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	432b      	orrs	r3, r5
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	e031      	b.n	8012d60 <tcp_write+0x6b8>
          goto memerr;
 8012cfc:	bf00      	nop
 8012cfe:	e006      	b.n	8012d0e <tcp_write+0x666>
            goto memerr;
 8012d00:	bf00      	nop
 8012d02:	e004      	b.n	8012d0e <tcp_write+0x666>
        goto memerr;
 8012d04:	bf00      	nop
 8012d06:	e002      	b.n	8012d0e <tcp_write+0x666>
        goto memerr;
 8012d08:	bf00      	nop
 8012d0a:	e000      	b.n	8012d0e <tcp_write+0x666>
      goto memerr;
 8012d0c:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	8b5b      	ldrh	r3, [r3, #26]
 8012d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d002      	beq.n	8012d28 <tcp_write+0x680>
    pbuf_free(concat_p);
 8012d22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012d24:	f7fa fdd0 	bl	800d8c8 <pbuf_free>
  }
  if (queue != NULL) {
 8012d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <tcp_write+0x68c>
    tcp_segs_free(queue);
 8012d2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d30:	f7fc fb50 	bl	800f3d4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d00e      	beq.n	8012d5c <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10a      	bne.n	8012d5c <tcp_write+0x6b4>
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d106      	bne.n	8012d5c <tcp_write+0x6b4>
 8012d4e:	4b06      	ldr	r3, [pc, #24]	; (8012d68 <tcp_write+0x6c0>)
 8012d50:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012d54:	4905      	ldr	r1, [pc, #20]	; (8012d6c <tcp_write+0x6c4>)
 8012d56:	4806      	ldr	r0, [pc, #24]	; (8012d70 <tcp_write+0x6c8>)
 8012d58:	f002 fa5a 	bl	8015210 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3758      	adds	r7, #88	; 0x58
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bdb0      	pop	{r4, r5, r7, pc}
 8012d68:	08018230 	.word	0x08018230
 8012d6c:	080185a4 	.word	0x080185a4
 8012d70:	08018284 	.word	0x08018284

08012d74 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012d74:	b5b0      	push	{r4, r5, r7, lr}
 8012d76:	b08a      	sub	sp, #40	; 0x28
 8012d78:	af02      	add	r7, sp, #8
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012d80:	2300      	movs	r3, #0
 8012d82:	61fb      	str	r3, [r7, #28]
 8012d84:	2300      	movs	r3, #0
 8012d86:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d106      	bne.n	8012da0 <tcp_split_unsent_seg+0x2c>
 8012d92:	4b96      	ldr	r3, [pc, #600]	; (8012fec <tcp_split_unsent_seg+0x278>)
 8012d94:	f240 324b 	movw	r2, #843	; 0x34b
 8012d98:	4995      	ldr	r1, [pc, #596]	; (8012ff0 <tcp_split_unsent_seg+0x27c>)
 8012d9a:	4896      	ldr	r0, [pc, #600]	; (8012ff4 <tcp_split_unsent_seg+0x280>)
 8012d9c:	f002 fa38 	bl	8015210 <iprintf>

  useg = pcb->unsent;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d102      	bne.n	8012db2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012dac:	f04f 33ff 	mov.w	r3, #4294967295
 8012db0:	e118      	b.n	8012fe4 <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 8012db2:	887b      	ldrh	r3, [r7, #2]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d109      	bne.n	8012dcc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012db8:	4b8c      	ldr	r3, [pc, #560]	; (8012fec <tcp_split_unsent_seg+0x278>)
 8012dba:	f240 3253 	movw	r2, #851	; 0x353
 8012dbe:	498e      	ldr	r1, [pc, #568]	; (8012ff8 <tcp_split_unsent_seg+0x284>)
 8012dc0:	488c      	ldr	r0, [pc, #560]	; (8012ff4 <tcp_split_unsent_seg+0x280>)
 8012dc2:	f002 fa25 	bl	8015210 <iprintf>
    return ERR_VAL;
 8012dc6:	f06f 0305 	mvn.w	r3, #5
 8012dca:	e10b      	b.n	8012fe4 <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	891b      	ldrh	r3, [r3, #8]
 8012dd0:	887a      	ldrh	r2, [r7, #2]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d301      	bcc.n	8012dda <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e104      	b.n	8012fe4 <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dde:	887a      	ldrh	r2, [r7, #2]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d906      	bls.n	8012df2 <tcp_split_unsent_seg+0x7e>
 8012de4:	4b81      	ldr	r3, [pc, #516]	; (8012fec <tcp_split_unsent_seg+0x278>)
 8012de6:	f240 325b 	movw	r2, #859	; 0x35b
 8012dea:	4984      	ldr	r1, [pc, #528]	; (8012ffc <tcp_split_unsent_seg+0x288>)
 8012dec:	4881      	ldr	r0, [pc, #516]	; (8012ff4 <tcp_split_unsent_seg+0x280>)
 8012dee:	f002 fa0f 	bl	8015210 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	891b      	ldrh	r3, [r3, #8]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <tcp_split_unsent_seg+0x94>
 8012dfa:	4b7c      	ldr	r3, [pc, #496]	; (8012fec <tcp_split_unsent_seg+0x278>)
 8012dfc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012e00:	497f      	ldr	r1, [pc, #508]	; (8013000 <tcp_split_unsent_seg+0x28c>)
 8012e02:	487c      	ldr	r0, [pc, #496]	; (8012ff4 <tcp_split_unsent_seg+0x280>)
 8012e04:	f002 fa04 	bl	8015210 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	7a9b      	ldrb	r3, [r3, #10]
 8012e0c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
 8012e10:	f003 0301 	and.w	r3, r3, #1
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d001      	beq.n	8012e1c <tcp_split_unsent_seg+0xa8>
 8012e18:	2304      	movs	r3, #4
 8012e1a:	e000      	b.n	8012e1e <tcp_split_unsent_seg+0xaa>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	891a      	ldrh	r2, [r3, #8]
 8012e24:	887b      	ldrh	r3, [r7, #2]
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012e2a:	7bbb      	ldrb	r3, [r7, #14]
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	89bb      	ldrh	r3, [r7, #12]
 8012e30:	4413      	add	r3, r2
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e38:	4619      	mov	r1, r3
 8012e3a:	2036      	movs	r0, #54	; 0x36
 8012e3c:	f7fa fa62 	bl	800d304 <pbuf_alloc>
 8012e40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f000 80b6 	beq.w	8012fb6 <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	891a      	ldrh	r2, [r3, #8]
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	891b      	ldrh	r3, [r3, #8]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	887b      	ldrh	r3, [r7, #2]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	6858      	ldr	r0, [r3, #4]
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	685a      	ldr	r2, [r3, #4]
 8012e66:	7bbb      	ldrb	r3, [r7, #14]
 8012e68:	18d1      	adds	r1, r2, r3
 8012e6a:	897b      	ldrh	r3, [r7, #10]
 8012e6c:	89ba      	ldrh	r2, [r7, #12]
 8012e6e:	f7fa ff31 	bl	800dcd4 <pbuf_copy_partial>
 8012e72:	4603      	mov	r3, r0
 8012e74:	461a      	mov	r2, r3
 8012e76:	89bb      	ldrh	r3, [r7, #12]
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	f040 809e 	bne.w	8012fba <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	68db      	ldr	r3, [r3, #12]
 8012e82:	899b      	ldrh	r3, [r3, #12]
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7f6 fc74 	bl	8009774 <lwip_htons>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e94:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012e96:	2300      	movs	r3, #0
 8012e98:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012e9a:	7efb      	ldrb	r3, [r7, #27]
 8012e9c:	f003 0308 	and.w	r3, r3, #8
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d007      	beq.n	8012eb4 <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 8012ea4:	7efb      	ldrb	r3, [r7, #27]
 8012ea6:	f023 0308 	bic.w	r3, r3, #8
 8012eaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012eac:	7ebb      	ldrb	r3, [r7, #26]
 8012eae:	f043 0308 	orr.w	r3, r3, #8
 8012eb2:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012eb4:	7efb      	ldrb	r3, [r7, #27]
 8012eb6:	f003 0301 	and.w	r3, r3, #1
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d007      	beq.n	8012ece <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 8012ebe:	7efb      	ldrb	r3, [r7, #27]
 8012ec0:	f023 0301 	bic.w	r3, r3, #1
 8012ec4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ec6:	7ebb      	ldrb	r3, [r7, #26]
 8012ec8:	f043 0301 	orr.w	r3, r3, #1
 8012ecc:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f6 fc62 	bl	800979e <lwip_htonl>
 8012eda:	4602      	mov	r2, r0
 8012edc:	887b      	ldrh	r3, [r7, #2]
 8012ede:	18d1      	adds	r1, r2, r3
 8012ee0:	7eba      	ldrb	r2, [r7, #26]
 8012ee2:	7bfb      	ldrb	r3, [r7, #15]
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	6939      	ldr	r1, [r7, #16]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff fa48 	bl	8012380 <tcp_create_segment>
 8012ef0:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d062      	beq.n	8012fbe <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fa fd71 	bl	800d9e4 <pbuf_clen>
 8012f02:	4603      	mov	r3, r0
 8012f04:	461a      	mov	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f0c:	1a9b      	subs	r3, r3, r2
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	6858      	ldr	r0, [r3, #4]
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	891a      	ldrh	r2, [r3, #8]
 8012f20:	89bb      	ldrh	r3, [r7, #12]
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	4619      	mov	r1, r3
 8012f28:	f7fa fb46 	bl	800d5b8 <pbuf_realloc>
  useg->len -= remainder;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	891a      	ldrh	r2, [r3, #8]
 8012f30:	89bb      	ldrh	r3, [r7, #12]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	68dc      	ldr	r4, [r3, #12]
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	899b      	ldrh	r3, [r3, #12]
 8012f44:	b29d      	uxth	r5, r3
 8012f46:	7efb      	ldrb	r3, [r7, #27]
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f6 fc12 	bl	8009774 <lwip_htons>
 8012f50:	4603      	mov	r3, r0
 8012f52:	432b      	orrs	r3, r5
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fa fd41 	bl	800d9e4 <pbuf_clen>
 8012f62:	4603      	mov	r3, r0
 8012f64:	461a      	mov	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f6c:	4413      	add	r3, r2
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fa fd32 	bl	800d9e4 <pbuf_clen>
 8012f80:	4603      	mov	r3, r0
 8012f82:	461a      	mov	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f8a:	4413      	add	r3, r2
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	69fa      	ldr	r2, [r7, #28]
 8012fa0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d103      	bne.n	8012fb2 <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e016      	b.n	8012fe4 <tcp_split_unsent_seg+0x270>
    goto memerr;
 8012fb6:	bf00      	nop
 8012fb8:	e002      	b.n	8012fc0 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8012fba:	bf00      	nop
 8012fbc:	e000      	b.n	8012fc0 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8012fbe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d006      	beq.n	8012fd4 <tcp_split_unsent_seg+0x260>
 8012fc6:	4b09      	ldr	r3, [pc, #36]	; (8012fec <tcp_split_unsent_seg+0x278>)
 8012fc8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012fcc:	490d      	ldr	r1, [pc, #52]	; (8013004 <tcp_split_unsent_seg+0x290>)
 8012fce:	4809      	ldr	r0, [pc, #36]	; (8012ff4 <tcp_split_unsent_seg+0x280>)
 8012fd0:	f002 f91e 	bl	8015210 <iprintf>
  if (p != NULL) {
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 8012fda:	6938      	ldr	r0, [r7, #16]
 8012fdc:	f7fa fc74 	bl	800d8c8 <pbuf_free>
  }

  return ERR_MEM;
 8012fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3720      	adds	r7, #32
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bdb0      	pop	{r4, r5, r7, pc}
 8012fec:	08018230 	.word	0x08018230
 8012ff0:	080185c4 	.word	0x080185c4
 8012ff4:	08018284 	.word	0x08018284
 8012ff8:	080185e8 	.word	0x080185e8
 8012ffc:	0801860c 	.word	0x0801860c
 8013000:	0801861c 	.word	0x0801861c
 8013004:	0801862c 	.word	0x0801862c

08013008 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013008:	b5b0      	push	{r4, r5, r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_send_fin+0x1c>
 8013016:	4b21      	ldr	r3, [pc, #132]	; (801309c <tcp_send_fin+0x94>)
 8013018:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801301c:	4920      	ldr	r1, [pc, #128]	; (80130a0 <tcp_send_fin+0x98>)
 801301e:	4821      	ldr	r0, [pc, #132]	; (80130a4 <tcp_send_fin+0x9c>)
 8013020:	f002 f8f6 	bl	8015210 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013028:	2b00      	cmp	r3, #0
 801302a:	d02d      	beq.n	8013088 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013030:	60fb      	str	r3, [r7, #12]
 8013032:	e002      	b.n	801303a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d1f8      	bne.n	8013034 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	68db      	ldr	r3, [r3, #12]
 8013046:	899b      	ldrh	r3, [r3, #12]
 8013048:	b29b      	uxth	r3, r3
 801304a:	4618      	mov	r0, r3
 801304c:	f7f6 fb92 	bl	8009774 <lwip_htons>
 8013050:	4603      	mov	r3, r0
 8013052:	b2db      	uxtb	r3, r3
 8013054:	f003 0307 	and.w	r3, r3, #7
 8013058:	2b00      	cmp	r3, #0
 801305a:	d115      	bne.n	8013088 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	68dc      	ldr	r4, [r3, #12]
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	899b      	ldrh	r3, [r3, #12]
 8013066:	b29d      	uxth	r5, r3
 8013068:	2001      	movs	r0, #1
 801306a:	f7f6 fb83 	bl	8009774 <lwip_htons>
 801306e:	4603      	mov	r3, r0
 8013070:	432b      	orrs	r3, r5
 8013072:	b29b      	uxth	r3, r3
 8013074:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	8b5b      	ldrh	r3, [r3, #26]
 801307a:	f043 0320 	orr.w	r3, r3, #32
 801307e:	b29a      	uxth	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013084:	2300      	movs	r3, #0
 8013086:	e004      	b.n	8013092 <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013088:	2101      	movs	r1, #1
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 f80c 	bl	80130a8 <tcp_enqueue_flags>
 8013090:	4603      	mov	r3, r0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bdb0      	pop	{r4, r5, r7, pc}
 801309a:	bf00      	nop
 801309c:	08018230 	.word	0x08018230
 80130a0:	08018638 	.word	0x08018638
 80130a4:	08018284 	.word	0x08018284

080130a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b08a      	sub	sp, #40	; 0x28
 80130ac:	af02      	add	r7, sp, #8
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	460b      	mov	r3, r1
 80130b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80130b4:	2300      	movs	r3, #0
 80130b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80130b8:	2300      	movs	r3, #0
 80130ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	f003 0303 	and.w	r3, r3, #3
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d106      	bne.n	80130d4 <tcp_enqueue_flags+0x2c>
 80130c6:	4b68      	ldr	r3, [pc, #416]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 80130c8:	f240 4212 	movw	r2, #1042	; 0x412
 80130cc:	4967      	ldr	r1, [pc, #412]	; (801326c <tcp_enqueue_flags+0x1c4>)
 80130ce:	4868      	ldr	r0, [pc, #416]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 80130d0:	f002 f89e 	bl	8015210 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d106      	bne.n	80130e8 <tcp_enqueue_flags+0x40>
 80130da:	4b63      	ldr	r3, [pc, #396]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 80130dc:	f240 4213 	movw	r2, #1043	; 0x413
 80130e0:	4964      	ldr	r1, [pc, #400]	; (8013274 <tcp_enqueue_flags+0x1cc>)
 80130e2:	4863      	ldr	r0, [pc, #396]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 80130e4:	f002 f894 	bl	8015210 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80130e8:	78fb      	ldrb	r3, [r7, #3]
 80130ea:	f003 0302 	and.w	r3, r3, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d001      	beq.n	80130f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80130f2:	2301      	movs	r3, #1
 80130f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80130f6:	7ffb      	ldrb	r3, [r7, #31]
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <tcp_enqueue_flags+0x5c>
 8013100:	2304      	movs	r3, #4
 8013102:	e000      	b.n	8013106 <tcp_enqueue_flags+0x5e>
 8013104:	2300      	movs	r3, #0
 8013106:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013108:	7dfb      	ldrb	r3, [r7, #23]
 801310a:	b29b      	uxth	r3, r3
 801310c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013110:	4619      	mov	r1, r3
 8013112:	2036      	movs	r0, #54	; 0x36
 8013114:	f7fa f8f6 	bl	800d304 <pbuf_alloc>
 8013118:	6138      	str	r0, [r7, #16]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d109      	bne.n	8013134 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	8b5b      	ldrh	r3, [r3, #26]
 8013124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013128:	b29a      	uxth	r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801312e:	f04f 33ff 	mov.w	r3, #4294967295
 8013132:	e095      	b.n	8013260 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	895a      	ldrh	r2, [r3, #10]
 8013138:	7dfb      	ldrb	r3, [r7, #23]
 801313a:	b29b      	uxth	r3, r3
 801313c:	429a      	cmp	r2, r3
 801313e:	d206      	bcs.n	801314e <tcp_enqueue_flags+0xa6>
 8013140:	4b49      	ldr	r3, [pc, #292]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 8013142:	f240 423a 	movw	r2, #1082	; 0x43a
 8013146:	494c      	ldr	r1, [pc, #304]	; (8013278 <tcp_enqueue_flags+0x1d0>)
 8013148:	4849      	ldr	r0, [pc, #292]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 801314a:	f002 f861 	bl	8015210 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013152:	78fa      	ldrb	r2, [r7, #3]
 8013154:	7ffb      	ldrb	r3, [r7, #31]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	460b      	mov	r3, r1
 801315a:	6939      	ldr	r1, [r7, #16]
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ff f90f 	bl	8012380 <tcp_create_segment>
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d109      	bne.n	801317e <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8b5b      	ldrh	r3, [r3, #26]
 801316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013172:	b29a      	uxth	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013178:	f04f 33ff 	mov.w	r3, #4294967295
 801317c:	e070      	b.n	8013260 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	f003 0303 	and.w	r3, r3, #3
 8013186:	2b00      	cmp	r3, #0
 8013188:	d006      	beq.n	8013198 <tcp_enqueue_flags+0xf0>
 801318a:	4b37      	ldr	r3, [pc, #220]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 801318c:	f240 4242 	movw	r2, #1090	; 0x442
 8013190:	493a      	ldr	r1, [pc, #232]	; (801327c <tcp_enqueue_flags+0x1d4>)
 8013192:	4837      	ldr	r0, [pc, #220]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 8013194:	f002 f83c 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	891b      	ldrh	r3, [r3, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d006      	beq.n	80131ae <tcp_enqueue_flags+0x106>
 80131a0:	4b31      	ldr	r3, [pc, #196]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 80131a2:	f240 4243 	movw	r2, #1091	; 0x443
 80131a6:	4936      	ldr	r1, [pc, #216]	; (8013280 <tcp_enqueue_flags+0x1d8>)
 80131a8:	4831      	ldr	r0, [pc, #196]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 80131aa:	f002 f831 	bl	8015210 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d103      	bne.n	80131be <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80131bc:	e00d      	b.n	80131da <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c2:	61bb      	str	r3, [r7, #24]
 80131c4:	e002      	b.n	80131cc <tcp_enqueue_flags+0x124>
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	61bb      	str	r3, [r7, #24]
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d1f8      	bne.n	80131c6 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131e2:	78fb      	ldrb	r3, [r7, #3]
 80131e4:	f003 0302 	and.w	r3, r3, #2
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d104      	bne.n	80131f6 <tcp_enqueue_flags+0x14e>
 80131ec:	78fb      	ldrb	r3, [r7, #3]
 80131ee:	f003 0301 	and.w	r3, r3, #1
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d004      	beq.n	8013200 <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131fa:	1c5a      	adds	r2, r3, #1
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013200:	78fb      	ldrb	r3, [r7, #3]
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d006      	beq.n	8013218 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	8b5b      	ldrh	r3, [r3, #26]
 801320e:	f043 0320 	orr.w	r3, r3, #32
 8013212:	b29a      	uxth	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f7fa fbe1 	bl	800d9e4 <pbuf_clen>
 8013222:	4603      	mov	r3, r0
 8013224:	461a      	mov	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801322c:	4413      	add	r3, r2
 801322e:	b29a      	uxth	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00e      	beq.n	801325e <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013244:	2b00      	cmp	r3, #0
 8013246:	d10a      	bne.n	801325e <tcp_enqueue_flags+0x1b6>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801324c:	2b00      	cmp	r3, #0
 801324e:	d106      	bne.n	801325e <tcp_enqueue_flags+0x1b6>
 8013250:	4b05      	ldr	r3, [pc, #20]	; (8013268 <tcp_enqueue_flags+0x1c0>)
 8013252:	f240 4266 	movw	r2, #1126	; 0x466
 8013256:	490b      	ldr	r1, [pc, #44]	; (8013284 <tcp_enqueue_flags+0x1dc>)
 8013258:	4805      	ldr	r0, [pc, #20]	; (8013270 <tcp_enqueue_flags+0x1c8>)
 801325a:	f001 ffd9 	bl	8015210 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801325e:	2300      	movs	r3, #0
}
 8013260:	4618      	mov	r0, r3
 8013262:	3720      	adds	r7, #32
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	08018230 	.word	0x08018230
 801326c:	08018654 	.word	0x08018654
 8013270:	08018284 	.word	0x08018284
 8013274:	080186ac 	.word	0x080186ac
 8013278:	080186cc 	.word	0x080186cc
 801327c:	08018708 	.word	0x08018708
 8013280:	08018720 	.word	0x08018720
 8013284:	0801874c 	.word	0x0801874c

08013288 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013288:	b5b0      	push	{r4, r5, r7, lr}
 801328a:	b08a      	sub	sp, #40	; 0x28
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_output+0x1c>
 8013296:	4ba0      	ldr	r3, [pc, #640]	; (8013518 <tcp_output+0x290>)
 8013298:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801329c:	499f      	ldr	r1, [pc, #636]	; (801351c <tcp_output+0x294>)
 801329e:	48a0      	ldr	r0, [pc, #640]	; (8013520 <tcp_output+0x298>)
 80132a0:	f001 ffb6 	bl	8015210 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d106      	bne.n	80132ba <tcp_output+0x32>
 80132ac:	4b9a      	ldr	r3, [pc, #616]	; (8013518 <tcp_output+0x290>)
 80132ae:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80132b2:	499c      	ldr	r1, [pc, #624]	; (8013524 <tcp_output+0x29c>)
 80132b4:	489a      	ldr	r0, [pc, #616]	; (8013520 <tcp_output+0x298>)
 80132b6:	f001 ffab 	bl	8015210 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80132ba:	4b9b      	ldr	r3, [pc, #620]	; (8013528 <tcp_output+0x2a0>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d101      	bne.n	80132c8 <tcp_output+0x40>
    return ERR_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	e1d0      	b.n	801366a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d203      	bcs.n	80132e0 <tcp_output+0x58>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132de:	e002      	b.n	80132e6 <tcp_output+0x5e>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132e6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80132ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10b      	bne.n	801330c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	8b5b      	ldrh	r3, [r3, #26]
 80132f8:	f003 0302 	and.w	r3, r3, #2
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 81a9 	beq.w	8013654 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 fdde 	bl	8013ec4 <tcp_send_empty_ack>
 8013308:	4603      	mov	r3, r0
 801330a:	e1ae      	b.n	801366a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801330c:	6879      	ldr	r1, [r7, #4]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	3304      	adds	r3, #4
 8013312:	461a      	mov	r2, r3
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7ff f817 	bl	8012348 <tcp_route>
 801331a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d102      	bne.n	8013328 <tcp_output+0xa0>
    return ERR_RTE;
 8013322:	f06f 0303 	mvn.w	r3, #3
 8013326:	e1a0      	b.n	801366a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d003      	beq.n	8013336 <tcp_output+0xae>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d111      	bne.n	801335a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <tcp_output+0xba>
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	3304      	adds	r3, #4
 8013340:	e000      	b.n	8013344 <tcp_output+0xbc>
 8013342:	2300      	movs	r3, #0
 8013344:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d102      	bne.n	8013352 <tcp_output+0xca>
      return ERR_RTE;
 801334c:	f06f 0303 	mvn.w	r3, #3
 8013350:	e18b      	b.n	801366a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	4618      	mov	r0, r3
 8013362:	f7f6 fa1c 	bl	800979e <lwip_htonl>
 8013366:	4602      	mov	r2, r0
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013370:	8912      	ldrh	r2, [r2, #8]
 8013372:	441a      	add	r2, r3
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	429a      	cmp	r2, r3
 8013378:	d927      	bls.n	80133ca <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013380:	461a      	mov	r2, r3
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	429a      	cmp	r2, r3
 8013386:	d114      	bne.n	80133b2 <tcp_output+0x12a>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801338c:	2b00      	cmp	r3, #0
 801338e:	d110      	bne.n	80133b2 <tcp_output+0x12a>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013396:	2b00      	cmp	r3, #0
 8013398:	d10b      	bne.n	80133b2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2201      	movs	r2, #1
 80133a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2200      	movs	r2, #0
 80133ae:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	8b5b      	ldrh	r3, [r3, #26]
 80133b6:	f003 0302 	and.w	r3, r3, #2
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f000 814c 	beq.w	8013658 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f000 fd7f 	bl	8013ec4 <tcp_send_empty_ack>
 80133c6:	4603      	mov	r3, r0
 80133c8:	e14f      	b.n	801366a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133d6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133d8:	6a3b      	ldr	r3, [r7, #32]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	f000 811b 	beq.w	8013616 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80133e0:	e002      	b.n	80133e8 <tcp_output+0x160>
 80133e2:	6a3b      	ldr	r3, [r7, #32]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	623b      	str	r3, [r7, #32]
 80133e8:	6a3b      	ldr	r3, [r7, #32]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1f8      	bne.n	80133e2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80133f0:	e111      	b.n	8013616 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	899b      	ldrh	r3, [r3, #12]
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f6 f9ba 	bl	8009774 <lwip_htons>
 8013400:	4603      	mov	r3, r0
 8013402:	b2db      	uxtb	r3, r3
 8013404:	f003 0304 	and.w	r3, r3, #4
 8013408:	2b00      	cmp	r3, #0
 801340a:	d006      	beq.n	801341a <tcp_output+0x192>
 801340c:	4b42      	ldr	r3, [pc, #264]	; (8013518 <tcp_output+0x290>)
 801340e:	f240 5237 	movw	r2, #1335	; 0x537
 8013412:	4946      	ldr	r1, [pc, #280]	; (801352c <tcp_output+0x2a4>)
 8013414:	4842      	ldr	r0, [pc, #264]	; (8013520 <tcp_output+0x298>)
 8013416:	f001 fefb 	bl	8015210 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341e:	2b00      	cmp	r3, #0
 8013420:	d01f      	beq.n	8013462 <tcp_output+0x1da>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	8b5b      	ldrh	r3, [r3, #26]
 8013426:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801342a:	2b00      	cmp	r3, #0
 801342c:	d119      	bne.n	8013462 <tcp_output+0x1da>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013432:	2b00      	cmp	r3, #0
 8013434:	d00b      	beq.n	801344e <tcp_output+0x1c6>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d110      	bne.n	8013462 <tcp_output+0x1da>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013444:	891a      	ldrh	r2, [r3, #8]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801344a:	429a      	cmp	r2, r3
 801344c:	d209      	bcs.n	8013462 <tcp_output+0x1da>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013454:	2b00      	cmp	r3, #0
 8013456:	d004      	beq.n	8013462 <tcp_output+0x1da>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801345e:	2b08      	cmp	r3, #8
 8013460:	d901      	bls.n	8013466 <tcp_output+0x1de>
 8013462:	2301      	movs	r3, #1
 8013464:	e000      	b.n	8013468 <tcp_output+0x1e0>
 8013466:	2300      	movs	r3, #0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	8b5b      	ldrh	r3, [r3, #26]
 8013470:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013474:	2b00      	cmp	r3, #0
 8013476:	f000 80e3 	beq.w	8013640 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	7d1b      	ldrb	r3, [r3, #20]
 801347e:	2b02      	cmp	r3, #2
 8013480:	d00c      	beq.n	801349c <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	68dc      	ldr	r4, [r3, #12]
 8013486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	899b      	ldrh	r3, [r3, #12]
 801348c:	b29d      	uxth	r5, r3
 801348e:	2010      	movs	r0, #16
 8013490:	f7f6 f970 	bl	8009774 <lwip_htons>
 8013494:	4603      	mov	r3, r0
 8013496:	432b      	orrs	r3, r5
 8013498:	b29b      	uxth	r3, r3
 801349a:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801349c:	697a      	ldr	r2, [r7, #20]
 801349e:	6879      	ldr	r1, [r7, #4]
 80134a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134a2:	f000 f907 	bl	80136b4 <tcp_output_segment>
 80134a6:	4603      	mov	r3, r0
 80134a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80134aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d009      	beq.n	80134c6 <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	8b5b      	ldrh	r3, [r3, #26]
 80134b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	835a      	strh	r2, [r3, #26]
      return err;
 80134c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134c4:	e0d1      	b.n	801366a <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	7d1b      	ldrb	r3, [r3, #20]
 80134d2:	2b02      	cmp	r3, #2
 80134d4:	d006      	beq.n	80134e4 <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	8b5b      	ldrh	r3, [r3, #26]
 80134da:	f023 0303 	bic.w	r3, r3, #3
 80134de:	b29a      	uxth	r2, r3
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80134e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7f6 f957 	bl	800979e <lwip_htonl>
 80134f0:	4604      	mov	r4, r0
 80134f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f4:	891b      	ldrh	r3, [r3, #8]
 80134f6:	461d      	mov	r5, r3
 80134f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	899b      	ldrh	r3, [r3, #12]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	4618      	mov	r0, r3
 8013502:	f7f6 f937 	bl	8009774 <lwip_htons>
 8013506:	4603      	mov	r3, r0
 8013508:	b2db      	uxtb	r3, r3
 801350a:	f003 0303 	and.w	r3, r3, #3
 801350e:	2b00      	cmp	r3, #0
 8013510:	d00e      	beq.n	8013530 <tcp_output+0x2a8>
 8013512:	2301      	movs	r3, #1
 8013514:	e00d      	b.n	8013532 <tcp_output+0x2aa>
 8013516:	bf00      	nop
 8013518:	08018230 	.word	0x08018230
 801351c:	08018774 	.word	0x08018774
 8013520:	08018284 	.word	0x08018284
 8013524:	0801878c 	.word	0x0801878c
 8013528:	2000af04 	.word	0x2000af04
 801352c:	080187b4 	.word	0x080187b4
 8013530:	2300      	movs	r3, #0
 8013532:	442b      	add	r3, r5
 8013534:	4423      	add	r3, r4
 8013536:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	2b00      	cmp	r3, #0
 8013542:	da02      	bge.n	801354a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	68ba      	ldr	r2, [r7, #8]
 8013548:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354c:	891b      	ldrh	r3, [r3, #8]
 801354e:	461c      	mov	r4, r3
 8013550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	899b      	ldrh	r3, [r3, #12]
 8013556:	b29b      	uxth	r3, r3
 8013558:	4618      	mov	r0, r3
 801355a:	f7f6 f90b 	bl	8009774 <lwip_htons>
 801355e:	4603      	mov	r3, r0
 8013560:	b2db      	uxtb	r3, r3
 8013562:	f003 0303 	and.w	r3, r3, #3
 8013566:	2b00      	cmp	r3, #0
 8013568:	d001      	beq.n	801356e <tcp_output+0x2e6>
 801356a:	2301      	movs	r3, #1
 801356c:	e000      	b.n	8013570 <tcp_output+0x2e8>
 801356e:	2300      	movs	r3, #0
 8013570:	4423      	add	r3, r4
 8013572:	2b00      	cmp	r3, #0
 8013574:	d049      	beq.n	801360a <tcp_output+0x382>
      seg->next = NULL;
 8013576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013580:	2b00      	cmp	r3, #0
 8013582:	d105      	bne.n	8013590 <tcp_output+0x308>
        pcb->unacked = seg;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013588:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358c:	623b      	str	r3, [r7, #32]
 801358e:	e03f      	b.n	8013610 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	4618      	mov	r0, r3
 8013598:	f7f6 f901 	bl	800979e <lwip_htonl>
 801359c:	4604      	mov	r4, r0
 801359e:	6a3b      	ldr	r3, [r7, #32]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f6 f8fa 	bl	800979e <lwip_htonl>
 80135aa:	4603      	mov	r3, r0
 80135ac:	1ae3      	subs	r3, r4, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	da24      	bge.n	80135fc <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	3370      	adds	r3, #112	; 0x70
 80135b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135b8:	e002      	b.n	80135c0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d011      	beq.n	80135ec <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f6 f8e4 	bl	800979e <lwip_htonl>
 80135d6:	4604      	mov	r4, r0
 80135d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	4618      	mov	r0, r3
 80135e0:	f7f6 f8dd 	bl	800979e <lwip_htonl>
 80135e4:	4603      	mov	r3, r0
 80135e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	dbe6      	blt.n	80135ba <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	e009      	b.n	8013610 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80135fc:	6a3b      	ldr	r3, [r7, #32]
 80135fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013600:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013602:	6a3b      	ldr	r3, [r7, #32]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	623b      	str	r3, [r7, #32]
 8013608:	e002      	b.n	8013610 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801360a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801360c:	f7fb fef6 	bl	800f3fc <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013614:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013618:	2b00      	cmp	r3, #0
 801361a:	d012      	beq.n	8013642 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	f7f6 f8bb 	bl	800979e <lwip_htonl>
 8013628:	4602      	mov	r2, r0
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013632:	8912      	ldrh	r2, [r2, #8]
 8013634:	441a      	add	r2, r3
  while (seg != NULL &&
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	429a      	cmp	r2, r3
 801363a:	f67f aeda 	bls.w	80133f2 <tcp_output+0x16a>
 801363e:	e000      	b.n	8013642 <tcp_output+0x3ba>
      break;
 8013640:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013646:	2b00      	cmp	r3, #0
 8013648:	d107      	bne.n	801365a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013652:	e002      	b.n	801365a <tcp_output+0x3d2>
    goto output_done;
 8013654:	bf00      	nop
 8013656:	e000      	b.n	801365a <tcp_output+0x3d2>
    goto output_done;
 8013658:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	8b5b      	ldrh	r3, [r3, #26]
 801365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013662:	b29a      	uxth	r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3728      	adds	r7, #40	; 0x28
 801366e:	46bd      	mov	sp, r7
 8013670:	bdb0      	pop	{r4, r5, r7, pc}
 8013672:	bf00      	nop

08013674 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d106      	bne.n	8013690 <tcp_output_segment_busy+0x1c>
 8013682:	4b09      	ldr	r3, [pc, #36]	; (80136a8 <tcp_output_segment_busy+0x34>)
 8013684:	f240 529a 	movw	r2, #1434	; 0x59a
 8013688:	4908      	ldr	r1, [pc, #32]	; (80136ac <tcp_output_segment_busy+0x38>)
 801368a:	4809      	ldr	r0, [pc, #36]	; (80136b0 <tcp_output_segment_busy+0x3c>)
 801368c:	f001 fdc0 	bl	8015210 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	7b9b      	ldrb	r3, [r3, #14]
 8013696:	2b01      	cmp	r3, #1
 8013698:	d001      	beq.n	801369e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801369a:	2301      	movs	r3, #1
 801369c:	e000      	b.n	80136a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	08018230 	.word	0x08018230
 80136ac:	080187cc 	.word	0x080187cc
 80136b0:	08018284 	.word	0x08018284

080136b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136b4:	b5b0      	push	{r4, r5, r7, lr}
 80136b6:	b08c      	sub	sp, #48	; 0x30
 80136b8:	af04      	add	r7, sp, #16
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <tcp_output_segment+0x20>
 80136c6:	4b66      	ldr	r3, [pc, #408]	; (8013860 <tcp_output_segment+0x1ac>)
 80136c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80136cc:	4965      	ldr	r1, [pc, #404]	; (8013864 <tcp_output_segment+0x1b0>)
 80136ce:	4866      	ldr	r0, [pc, #408]	; (8013868 <tcp_output_segment+0x1b4>)
 80136d0:	f001 fd9e 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d106      	bne.n	80136e8 <tcp_output_segment+0x34>
 80136da:	4b61      	ldr	r3, [pc, #388]	; (8013860 <tcp_output_segment+0x1ac>)
 80136dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80136e0:	4962      	ldr	r1, [pc, #392]	; (801386c <tcp_output_segment+0x1b8>)
 80136e2:	4861      	ldr	r0, [pc, #388]	; (8013868 <tcp_output_segment+0x1b4>)
 80136e4:	f001 fd94 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <tcp_output_segment+0x48>
 80136ee:	4b5c      	ldr	r3, [pc, #368]	; (8013860 <tcp_output_segment+0x1ac>)
 80136f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80136f4:	495e      	ldr	r1, [pc, #376]	; (8013870 <tcp_output_segment+0x1bc>)
 80136f6:	485c      	ldr	r0, [pc, #368]	; (8013868 <tcp_output_segment+0x1b4>)
 80136f8:	f001 fd8a 	bl	8015210 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7ff ffb9 	bl	8013674 <tcp_output_segment_busy>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	e0a4      	b.n	8013856 <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	68dc      	ldr	r4, [r3, #12]
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013714:	4618      	mov	r0, r3
 8013716:	f7f6 f842 	bl	800979e <lwip_htonl>
 801371a:	4603      	mov	r3, r0
 801371c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	68dc      	ldr	r4, [r3, #12]
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013726:	4618      	mov	r0, r3
 8013728:	f7f6 f824 	bl	8009774 <lwip_htons>
 801372c:	4603      	mov	r3, r0
 801372e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013734:	68ba      	ldr	r2, [r7, #8]
 8013736:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013738:	441a      	add	r2, r3
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	3314      	adds	r3, #20
 8013744:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	7a9b      	ldrb	r3, [r3, #10]
 801374a:	f003 0301 	and.w	r3, r3, #1
 801374e:	2b00      	cmp	r3, #0
 8013750:	d015      	beq.n	801377e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	3304      	adds	r3, #4
 8013756:	461a      	mov	r2, r3
 8013758:	6879      	ldr	r1, [r7, #4]
 801375a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801375e:	f7fc fa2f 	bl	800fbc0 <tcp_eff_send_mss_netif>
 8013762:	4603      	mov	r3, r0
 8013764:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013766:	8b7b      	ldrh	r3, [r7, #26]
 8013768:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801376c:	4618      	mov	r0, r3
 801376e:	f7f6 f816 	bl	800979e <lwip_htonl>
 8013772:	4602      	mov	r2, r0
 8013774:	69fb      	ldr	r3, [r7, #28]
 8013776:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	3304      	adds	r3, #4
 801377c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013784:	2b00      	cmp	r3, #0
 8013786:	da02      	bge.n	801378e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2200      	movs	r2, #0
 801378c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013792:	2b00      	cmp	r3, #0
 8013794:	d10c      	bne.n	80137b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013796:	4b37      	ldr	r3, [pc, #220]	; (8013874 <tcp_output_segment+0x1c0>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7f5 fffa 	bl	800979e <lwip_htonl>
 80137aa:	4602      	mov	r2, r0
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	461a      	mov	r2, r3
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	6852      	ldr	r2, [r2, #4]
 80137c8:	8951      	ldrh	r1, [r2, #10]
 80137ca:	8b3a      	ldrh	r2, [r7, #24]
 80137cc:	1a8a      	subs	r2, r1, r2
 80137ce:	b292      	uxth	r2, r2
 80137d0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	6852      	ldr	r2, [r2, #4]
 80137da:	8911      	ldrh	r1, [r2, #8]
 80137dc:	8b3a      	ldrh	r2, [r7, #24]
 80137de:	1a8a      	subs	r2, r1, r2
 80137e0:	b292      	uxth	r2, r2
 80137e2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	68d2      	ldr	r2, [r2, #12]
 80137ec:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	741a      	strb	r2, [r3, #16]
 80137f6:	2200      	movs	r2, #0
 80137f8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	68db      	ldr	r3, [r3, #12]
 80137fe:	f103 0214 	add.w	r2, r3, #20
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	7a9b      	ldrb	r3, [r3, #10]
 8013806:	f003 0301 	and.w	r3, r3, #1
 801380a:	2b00      	cmp	r3, #0
 801380c:	d001      	beq.n	8013812 <tcp_output_segment+0x15e>
 801380e:	2304      	movs	r3, #4
 8013810:	e000      	b.n	8013814 <tcp_output_segment+0x160>
 8013812:	2300      	movs	r3, #0
 8013814:	441a      	add	r2, r3
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	429a      	cmp	r2, r3
 801381a:	d006      	beq.n	801382a <tcp_output_segment+0x176>
 801381c:	4b10      	ldr	r3, [pc, #64]	; (8013860 <tcp_output_segment+0x1ac>)
 801381e:	f240 621c 	movw	r2, #1564	; 0x61c
 8013822:	4915      	ldr	r1, [pc, #84]	; (8013878 <tcp_output_segment+0x1c4>)
 8013824:	4810      	ldr	r0, [pc, #64]	; (8013868 <tcp_output_segment+0x1b4>)
 8013826:	f001 fcf3 	bl	8015210 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	6858      	ldr	r0, [r3, #4]
 801382e:	68b9      	ldr	r1, [r7, #8]
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	1d1c      	adds	r4, r3, #4
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	7add      	ldrb	r5, [r3, #11]
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	7a9b      	ldrb	r3, [r3, #10]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	9202      	str	r2, [sp, #8]
 8013840:	2206      	movs	r2, #6
 8013842:	9201      	str	r2, [sp, #4]
 8013844:	9300      	str	r3, [sp, #0]
 8013846:	462b      	mov	r3, r5
 8013848:	4622      	mov	r2, r4
 801384a:	f7f7 fd8f 	bl	800b36c <ip4_output_if>
 801384e:	4603      	mov	r3, r0
 8013850:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013856:	4618      	mov	r0, r3
 8013858:	3720      	adds	r7, #32
 801385a:	46bd      	mov	sp, r7
 801385c:	bdb0      	pop	{r4, r5, r7, pc}
 801385e:	bf00      	nop
 8013860:	08018230 	.word	0x08018230
 8013864:	080187f4 	.word	0x080187f4
 8013868:	08018284 	.word	0x08018284
 801386c:	08018814 	.word	0x08018814
 8013870:	08018834 	.word	0x08018834
 8013874:	2000aef4 	.word	0x2000aef4
 8013878:	08018858 	.word	0x08018858

0801387c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801387c:	b5b0      	push	{r4, r5, r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <tcp_rexmit_rto_prepare+0x1c>
 801388a:	4b31      	ldr	r3, [pc, #196]	; (8013950 <tcp_rexmit_rto_prepare+0xd4>)
 801388c:	f240 6263 	movw	r2, #1635	; 0x663
 8013890:	4930      	ldr	r1, [pc, #192]	; (8013954 <tcp_rexmit_rto_prepare+0xd8>)
 8013892:	4831      	ldr	r0, [pc, #196]	; (8013958 <tcp_rexmit_rto_prepare+0xdc>)
 8013894:	f001 fcbc 	bl	8015210 <iprintf>

  if (pcb->unacked == NULL) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80138a0:	f06f 0305 	mvn.w	r3, #5
 80138a4:	e050      	b.n	8013948 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138aa:	60fb      	str	r3, [r7, #12]
 80138ac:	e00b      	b.n	80138c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f7ff fee0 	bl	8013674 <tcp_output_segment_busy>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80138ba:	f06f 0305 	mvn.w	r3, #5
 80138be:	e043      	b.n	8013948 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	60fb      	str	r3, [r7, #12]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d1ef      	bne.n	80138ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80138ce:	68f8      	ldr	r0, [r7, #12]
 80138d0:	f7ff fed0 	bl	8013674 <tcp_output_segment_busy>
 80138d4:	4603      	mov	r3, r0
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d002      	beq.n	80138e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80138da:	f06f 0305 	mvn.w	r3, #5
 80138de:	e033      	b.n	8013948 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2200      	movs	r2, #0
 80138f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	8b5b      	ldrh	r3, [r3, #26]
 80138fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80138fe:	b29a      	uxth	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	f7f5 ff47 	bl	800979e <lwip_htonl>
 8013910:	4604      	mov	r4, r0
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	891b      	ldrh	r3, [r3, #8]
 8013916:	461d      	mov	r5, r3
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	899b      	ldrh	r3, [r3, #12]
 801391e:	b29b      	uxth	r3, r3
 8013920:	4618      	mov	r0, r3
 8013922:	f7f5 ff27 	bl	8009774 <lwip_htons>
 8013926:	4603      	mov	r3, r0
 8013928:	b2db      	uxtb	r3, r3
 801392a:	f003 0303 	and.w	r3, r3, #3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <tcp_rexmit_rto_prepare+0xba>
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <tcp_rexmit_rto_prepare+0xbc>
 8013936:	2300      	movs	r3, #0
 8013938:	442b      	add	r3, r5
 801393a:	18e2      	adds	r2, r4, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2200      	movs	r2, #0
 8013944:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013946:	2300      	movs	r3, #0
}
 8013948:	4618      	mov	r0, r3
 801394a:	3710      	adds	r7, #16
 801394c:	46bd      	mov	sp, r7
 801394e:	bdb0      	pop	{r4, r5, r7, pc}
 8013950:	08018230 	.word	0x08018230
 8013954:	0801886c 	.word	0x0801886c
 8013958:	08018284 	.word	0x08018284

0801395c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b082      	sub	sp, #8
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d106      	bne.n	8013978 <tcp_rexmit_rto_commit+0x1c>
 801396a:	4b0d      	ldr	r3, [pc, #52]	; (80139a0 <tcp_rexmit_rto_commit+0x44>)
 801396c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013970:	490c      	ldr	r1, [pc, #48]	; (80139a4 <tcp_rexmit_rto_commit+0x48>)
 8013972:	480d      	ldr	r0, [pc, #52]	; (80139a8 <tcp_rexmit_rto_commit+0x4c>)
 8013974:	f001 fc4c 	bl	8015210 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801397e:	2bff      	cmp	r3, #255	; 0xff
 8013980:	d007      	beq.n	8013992 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013988:	3301      	adds	r3, #1
 801398a:	b2da      	uxtb	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff fc78 	bl	8013288 <tcp_output>
}
 8013998:	bf00      	nop
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	08018230 	.word	0x08018230
 80139a4:	08018890 	.word	0x08018890
 80139a8:	08018284 	.word	0x08018284

080139ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d106      	bne.n	80139c8 <tcp_rexmit_rto+0x1c>
 80139ba:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <tcp_rexmit_rto+0x38>)
 80139bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80139c0:	4909      	ldr	r1, [pc, #36]	; (80139e8 <tcp_rexmit_rto+0x3c>)
 80139c2:	480a      	ldr	r0, [pc, #40]	; (80139ec <tcp_rexmit_rto+0x40>)
 80139c4:	f001 fc24 	bl	8015210 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7ff ff57 	bl	801387c <tcp_rexmit_rto_prepare>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d102      	bne.n	80139da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff ffc1 	bl	801395c <tcp_rexmit_rto_commit>
  }
}
 80139da:	bf00      	nop
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	08018230 	.word	0x08018230
 80139e8:	080188b4 	.word	0x080188b4
 80139ec:	08018284 	.word	0x08018284

080139f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <tcp_rexmit+0x1c>
 80139fe:	4b2f      	ldr	r3, [pc, #188]	; (8013abc <tcp_rexmit+0xcc>)
 8013a00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013a04:	492e      	ldr	r1, [pc, #184]	; (8013ac0 <tcp_rexmit+0xd0>)
 8013a06:	482f      	ldr	r0, [pc, #188]	; (8013ac4 <tcp_rexmit+0xd4>)
 8013a08:	f001 fc02 	bl	8015210 <iprintf>

  if (pcb->unacked == NULL) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d102      	bne.n	8013a1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013a14:	f06f 0305 	mvn.w	r3, #5
 8013a18:	e04c      	b.n	8013ab4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7ff fe27 	bl	8013674 <tcp_output_segment_busy>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d002      	beq.n	8013a32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013a2c:	f06f 0305 	mvn.w	r3, #5
 8013a30:	e040      	b.n	8013ab4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	336c      	adds	r3, #108	; 0x6c
 8013a3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a40:	e002      	b.n	8013a48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d011      	beq.n	8013a74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	68db      	ldr	r3, [r3, #12]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f5 fea0 	bl	800979e <lwip_htonl>
 8013a5e:	4604      	mov	r4, r0
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7f5 fe99 	bl	800979e <lwip_htonl>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	dbe6      	blt.n	8013a42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	68ba      	ldr	r2, [r7, #8]
 8013a80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d103      	bne.n	8013a92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a98:	2bff      	cmp	r3, #255	; 0xff
 8013a9a:	d007      	beq.n	8013aac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	b2da      	uxtb	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3714      	adds	r7, #20
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd90      	pop	{r4, r7, pc}
 8013abc:	08018230 	.word	0x08018230
 8013ac0:	080188d0 	.word	0x080188d0
 8013ac4:	08018284 	.word	0x08018284

08013ac8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d106      	bne.n	8013ae4 <tcp_rexmit_fast+0x1c>
 8013ad6:	4b2f      	ldr	r3, [pc, #188]	; (8013b94 <tcp_rexmit_fast+0xcc>)
 8013ad8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013adc:	492e      	ldr	r1, [pc, #184]	; (8013b98 <tcp_rexmit_fast+0xd0>)
 8013ade:	482f      	ldr	r0, [pc, #188]	; (8013b9c <tcp_rexmit_fast+0xd4>)
 8013ae0:	f001 fb96 	bl	8015210 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d04f      	beq.n	8013b8c <tcp_rexmit_fast+0xc4>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	8b5b      	ldrh	r3, [r3, #26]
 8013af0:	f003 0304 	and.w	r3, r3, #4
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d149      	bne.n	8013b8c <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff ff79 	bl	80139f0 <tcp_rexmit>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d143      	bne.n	8013b8c <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d208      	bcs.n	8013b26 <tcp_rexmit_fast+0x5e>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	da00      	bge.n	8013b20 <tcp_rexmit_fast+0x58>
 8013b1e:	3301      	adds	r3, #1
 8013b20:	105b      	asrs	r3, r3, #1
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	e007      	b.n	8013b36 <tcp_rexmit_fast+0x6e>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	da00      	bge.n	8013b32 <tcp_rexmit_fast+0x6a>
 8013b30:	3301      	adds	r3, #1
 8013b32:	105b      	asrs	r3, r3, #1
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b42:	461a      	mov	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d206      	bcs.n	8013b5c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b52:	005b      	lsls	r3, r3, #1
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b66:	4619      	mov	r1, r3
 8013b68:	0049      	lsls	r1, r1, #1
 8013b6a:	440b      	add	r3, r1
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	4413      	add	r3, r2
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	8b5b      	ldrh	r3, [r3, #26]
 8013b7c:	f043 0304 	orr.w	r3, r3, #4
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013b8c:	bf00      	nop
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	08018230 	.word	0x08018230
 8013b98:	080188e8 	.word	0x080188e8
 8013b9c:	08018284 	.word	0x08018284

08013ba0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b086      	sub	sp, #24
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	607b      	str	r3, [r7, #4]
 8013baa:	460b      	mov	r3, r1
 8013bac:	817b      	strh	r3, [r7, #10]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013bb2:	897a      	ldrh	r2, [r7, #10]
 8013bb4:	893b      	ldrh	r3, [r7, #8]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	3314      	adds	r3, #20
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	2022      	movs	r0, #34	; 0x22
 8013bc6:	f7f9 fb9d 	bl	800d304 <pbuf_alloc>
 8013bca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d04e      	beq.n	8013c70 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	895b      	ldrh	r3, [r3, #10]
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	897b      	ldrh	r3, [r7, #10]
 8013bda:	3314      	adds	r3, #20
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	da06      	bge.n	8013bee <tcp_output_alloc_header_common+0x4e>
 8013be0:	4b26      	ldr	r3, [pc, #152]	; (8013c7c <tcp_output_alloc_header_common+0xdc>)
 8013be2:	f240 7224 	movw	r2, #1828	; 0x724
 8013be6:	4926      	ldr	r1, [pc, #152]	; (8013c80 <tcp_output_alloc_header_common+0xe0>)
 8013be8:	4826      	ldr	r0, [pc, #152]	; (8013c84 <tcp_output_alloc_header_common+0xe4>)
 8013bea:	f001 fb11 	bl	8015210 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013bf4:	8c3b      	ldrh	r3, [r7, #32]
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7f5 fdbc 	bl	8009774 <lwip_htons>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	461a      	mov	r2, r3
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7f5 fdb4 	bl	8009774 <lwip_htons>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	461a      	mov	r2, r3
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013c1a:	68f8      	ldr	r0, [r7, #12]
 8013c1c:	f7f5 fdbf 	bl	800979e <lwip_htonl>
 8013c20:	4602      	mov	r2, r0
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013c26:	897b      	ldrh	r3, [r7, #10]
 8013c28:	089b      	lsrs	r3, r3, #2
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	3305      	adds	r3, #5
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	031b      	lsls	r3, r3, #12
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7f5 fd98 	bl	8009774 <lwip_htons>
 8013c44:	4603      	mov	r3, r0
 8013c46:	461a      	mov	r2, r3
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013c4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f5 fd90 	bl	8009774 <lwip_htons>
 8013c54:	4603      	mov	r3, r0
 8013c56:	461a      	mov	r2, r3
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	741a      	strb	r2, [r3, #16]
 8013c62:	2200      	movs	r2, #0
 8013c64:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	749a      	strb	r2, [r3, #18]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c70:	697b      	ldr	r3, [r7, #20]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3718      	adds	r7, #24
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	08018230 	.word	0x08018230
 8013c80:	08018908 	.word	0x08018908
 8013c84:	08018284 	.word	0x08018284

08013c88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c88:	b5b0      	push	{r4, r5, r7, lr}
 8013c8a:	b08a      	sub	sp, #40	; 0x28
 8013c8c:	af04      	add	r7, sp, #16
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	607b      	str	r3, [r7, #4]
 8013c92:	460b      	mov	r3, r1
 8013c94:	817b      	strh	r3, [r7, #10]
 8013c96:	4613      	mov	r3, r2
 8013c98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d106      	bne.n	8013cae <tcp_output_alloc_header+0x26>
 8013ca0:	4b15      	ldr	r3, [pc, #84]	; (8013cf8 <tcp_output_alloc_header+0x70>)
 8013ca2:	f240 7242 	movw	r2, #1858	; 0x742
 8013ca6:	4915      	ldr	r1, [pc, #84]	; (8013cfc <tcp_output_alloc_header+0x74>)
 8013ca8:	4815      	ldr	r0, [pc, #84]	; (8013d00 <tcp_output_alloc_header+0x78>)
 8013caa:	f001 fab1 	bl	8015210 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	8adb      	ldrh	r3, [r3, #22]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	8b12      	ldrh	r2, [r2, #24]
 8013cba:	68f9      	ldr	r1, [r7, #12]
 8013cbc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013cbe:	893d      	ldrh	r5, [r7, #8]
 8013cc0:	897c      	ldrh	r4, [r7, #10]
 8013cc2:	9103      	str	r1, [sp, #12]
 8013cc4:	2110      	movs	r1, #16
 8013cc6:	9102      	str	r1, [sp, #8]
 8013cc8:	9201      	str	r2, [sp, #4]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	462a      	mov	r2, r5
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	f7ff ff65 	bl	8013ba0 <tcp_output_alloc_header_common>
 8013cd6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d006      	beq.n	8013cec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013ce6:	441a      	add	r2, r3
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013cec:	697b      	ldr	r3, [r7, #20]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3718      	adds	r7, #24
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	08018230 	.word	0x08018230
 8013cfc:	08018938 	.word	0x08018938
 8013d00:	08018284 	.word	0x08018284

08013d04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b088      	sub	sp, #32
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	4611      	mov	r1, r2
 8013d10:	461a      	mov	r2, r3
 8013d12:	460b      	mov	r3, r1
 8013d14:	71fb      	strb	r3, [r7, #7]
 8013d16:	4613      	mov	r3, r2
 8013d18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d106      	bne.n	8013d32 <tcp_output_fill_options+0x2e>
 8013d24:	4b15      	ldr	r3, [pc, #84]	; (8013d7c <tcp_output_fill_options+0x78>)
 8013d26:	f240 7256 	movw	r2, #1878	; 0x756
 8013d2a:	4915      	ldr	r1, [pc, #84]	; (8013d80 <tcp_output_fill_options+0x7c>)
 8013d2c:	4815      	ldr	r0, [pc, #84]	; (8013d84 <tcp_output_fill_options+0x80>)
 8013d2e:	f001 fa6f 	bl	8015210 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	3314      	adds	r3, #20
 8013d3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	f103 0214 	add.w	r2, r3, #20
 8013d44:	8bfb      	ldrh	r3, [r7, #30]
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	4619      	mov	r1, r3
 8013d4a:	79fb      	ldrb	r3, [r7, #7]
 8013d4c:	f003 0301 	and.w	r3, r3, #1
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d001      	beq.n	8013d58 <tcp_output_fill_options+0x54>
 8013d54:	2304      	movs	r3, #4
 8013d56:	e000      	b.n	8013d5a <tcp_output_fill_options+0x56>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	440b      	add	r3, r1
 8013d5c:	441a      	add	r2, r3
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d006      	beq.n	8013d72 <tcp_output_fill_options+0x6e>
 8013d64:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <tcp_output_fill_options+0x78>)
 8013d66:	f240 7275 	movw	r2, #1909	; 0x775
 8013d6a:	4907      	ldr	r1, [pc, #28]	; (8013d88 <tcp_output_fill_options+0x84>)
 8013d6c:	4805      	ldr	r0, [pc, #20]	; (8013d84 <tcp_output_fill_options+0x80>)
 8013d6e:	f001 fa4f 	bl	8015210 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d72:	bf00      	nop
 8013d74:	3720      	adds	r7, #32
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	08018230 	.word	0x08018230
 8013d80:	08018960 	.word	0x08018960
 8013d84:	08018284 	.word	0x08018284
 8013d88:	08018858 	.word	0x08018858

08013d8c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b08a      	sub	sp, #40	; 0x28
 8013d90:	af04      	add	r7, sp, #16
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d106      	bne.n	8013dae <tcp_output_control_segment+0x22>
 8013da0:	4b1c      	ldr	r3, [pc, #112]	; (8013e14 <tcp_output_control_segment+0x88>)
 8013da2:	f240 7287 	movw	r2, #1927	; 0x787
 8013da6:	491c      	ldr	r1, [pc, #112]	; (8013e18 <tcp_output_control_segment+0x8c>)
 8013da8:	481c      	ldr	r0, [pc, #112]	; (8013e1c <tcp_output_control_segment+0x90>)
 8013daa:	f001 fa31 	bl	8015210 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	6879      	ldr	r1, [r7, #4]
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f7fe fac8 	bl	8012348 <tcp_route>
 8013db8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d102      	bne.n	8013dc6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013dc0:	23fc      	movs	r3, #252	; 0xfc
 8013dc2:	75fb      	strb	r3, [r7, #23]
 8013dc4:	e01c      	b.n	8013e00 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d006      	beq.n	8013dda <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	7adb      	ldrb	r3, [r3, #11]
 8013dd0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	7a9b      	ldrb	r3, [r3, #10]
 8013dd6:	757b      	strb	r3, [r7, #21]
 8013dd8:	e003      	b.n	8013de2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013dda:	23ff      	movs	r3, #255	; 0xff
 8013ddc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013dde:	2300      	movs	r3, #0
 8013de0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013de2:	7dba      	ldrb	r2, [r7, #22]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	9302      	str	r3, [sp, #8]
 8013de8:	2306      	movs	r3, #6
 8013dea:	9301      	str	r3, [sp, #4]
 8013dec:	7d7b      	ldrb	r3, [r7, #21]
 8013dee:	9300      	str	r3, [sp, #0]
 8013df0:	4613      	mov	r3, r2
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	6879      	ldr	r1, [r7, #4]
 8013df6:	68b8      	ldr	r0, [r7, #8]
 8013df8:	f7f7 fab8 	bl	800b36c <ip4_output_if>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013e00:	68b8      	ldr	r0, [r7, #8]
 8013e02:	f7f9 fd61 	bl	800d8c8 <pbuf_free>
  return err;
 8013e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3718      	adds	r7, #24
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	08018230 	.word	0x08018230
 8013e18:	08018988 	.word	0x08018988
 8013e1c:	08018284 	.word	0x08018284

08013e20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013e20:	b590      	push	{r4, r7, lr}
 8013e22:	b08b      	sub	sp, #44	; 0x2c
 8013e24:	af04      	add	r7, sp, #16
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
 8013e2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d106      	bne.n	8013e42 <tcp_rst+0x22>
 8013e34:	4b1f      	ldr	r3, [pc, #124]	; (8013eb4 <tcp_rst+0x94>)
 8013e36:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013e3a:	491f      	ldr	r1, [pc, #124]	; (8013eb8 <tcp_rst+0x98>)
 8013e3c:	481f      	ldr	r0, [pc, #124]	; (8013ebc <tcp_rst+0x9c>)
 8013e3e:	f001 f9e7 	bl	8015210 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d106      	bne.n	8013e56 <tcp_rst+0x36>
 8013e48:	4b1a      	ldr	r3, [pc, #104]	; (8013eb4 <tcp_rst+0x94>)
 8013e4a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013e4e:	491c      	ldr	r1, [pc, #112]	; (8013ec0 <tcp_rst+0xa0>)
 8013e50:	481a      	ldr	r0, [pc, #104]	; (8013ebc <tcp_rst+0x9c>)
 8013e52:	f001 f9dd 	bl	8015210 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e56:	2300      	movs	r3, #0
 8013e58:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013e5a:	f246 0308 	movw	r3, #24584	; 0x6008
 8013e5e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013e60:	7dfb      	ldrb	r3, [r7, #23]
 8013e62:	b29c      	uxth	r4, r3
 8013e64:	68b8      	ldr	r0, [r7, #8]
 8013e66:	f7f5 fc9a 	bl	800979e <lwip_htonl>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	8abb      	ldrh	r3, [r7, #20]
 8013e6e:	9303      	str	r3, [sp, #12]
 8013e70:	2314      	movs	r3, #20
 8013e72:	9302      	str	r3, [sp, #8]
 8013e74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013e76:	9301      	str	r3, [sp, #4]
 8013e78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e7a:	9300      	str	r3, [sp, #0]
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	2200      	movs	r2, #0
 8013e80:	4621      	mov	r1, r4
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f7ff fe8c 	bl	8013ba0 <tcp_output_alloc_header_common>
 8013e88:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00c      	beq.n	8013eaa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e90:	7dfb      	ldrb	r3, [r7, #23]
 8013e92:	2200      	movs	r2, #0
 8013e94:	6939      	ldr	r1, [r7, #16]
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f7ff ff34 	bl	8013d04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9e:	683a      	ldr	r2, [r7, #0]
 8013ea0:	6939      	ldr	r1, [r7, #16]
 8013ea2:	68f8      	ldr	r0, [r7, #12]
 8013ea4:	f7ff ff72 	bl	8013d8c <tcp_output_control_segment>
 8013ea8:	e000      	b.n	8013eac <tcp_rst+0x8c>
    return;
 8013eaa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013eac:	371c      	adds	r7, #28
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd90      	pop	{r4, r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	08018230 	.word	0x08018230
 8013eb8:	080189b4 	.word	0x080189b4
 8013ebc:	08018284 	.word	0x08018284
 8013ec0:	080189d0 	.word	0x080189d0

08013ec4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013ec4:	b590      	push	{r4, r7, lr}
 8013ec6:	b087      	sub	sp, #28
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d106      	bne.n	8013ee8 <tcp_send_empty_ack+0x24>
 8013eda:	4b29      	ldr	r3, [pc, #164]	; (8013f80 <tcp_send_empty_ack+0xbc>)
 8013edc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ee0:	4928      	ldr	r1, [pc, #160]	; (8013f84 <tcp_send_empty_ack+0xc0>)
 8013ee2:	4829      	ldr	r0, [pc, #164]	; (8013f88 <tcp_send_empty_ack+0xc4>)
 8013ee4:	f001 f994 	bl	8015210 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ee8:	7dfb      	ldrb	r3, [r7, #23]
 8013eea:	f003 0301 	and.w	r3, r3, #1
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d001      	beq.n	8013ef6 <tcp_send_empty_ack+0x32>
 8013ef2:	2304      	movs	r3, #4
 8013ef4:	e000      	b.n	8013ef8 <tcp_send_empty_ack+0x34>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013efa:	7d7b      	ldrb	r3, [r7, #21]
 8013efc:	b29c      	uxth	r4, r3
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f5 fc4b 	bl	800979e <lwip_htonl>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	4621      	mov	r1, r4
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff feba 	bl	8013c88 <tcp_output_alloc_header>
 8013f14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d109      	bne.n	8013f30 <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	8b5b      	ldrh	r3, [r3, #26]
 8013f20:	f043 0303 	orr.w	r3, r3, #3
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013f2a:	f06f 0301 	mvn.w	r3, #1
 8013f2e:	e023      	b.n	8013f78 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013f30:	7dbb      	ldrb	r3, [r7, #22]
 8013f32:	7dfa      	ldrb	r2, [r7, #23]
 8013f34:	6939      	ldr	r1, [r7, #16]
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff fee4 	bl	8013d04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	3304      	adds	r3, #4
 8013f42:	6939      	ldr	r1, [r7, #16]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7ff ff21 	bl	8013d8c <tcp_output_control_segment>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d007      	beq.n	8013f66 <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	8b5b      	ldrh	r3, [r3, #26]
 8013f5a:	f043 0303 	orr.w	r3, r3, #3
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	835a      	strh	r2, [r3, #26]
 8013f64:	e006      	b.n	8013f74 <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	8b5b      	ldrh	r3, [r3, #26]
 8013f6a:	f023 0303 	bic.w	r3, r3, #3
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	371c      	adds	r7, #28
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd90      	pop	{r4, r7, pc}
 8013f80:	08018230 	.word	0x08018230
 8013f84:	080189ec 	.word	0x080189ec
 8013f88:	08018284 	.word	0x08018284

08013f8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f8c:	b590      	push	{r4, r7, lr}
 8013f8e:	b087      	sub	sp, #28
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f94:	2300      	movs	r3, #0
 8013f96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d106      	bne.n	8013fac <tcp_keepalive+0x20>
 8013f9e:	4b18      	ldr	r3, [pc, #96]	; (8014000 <tcp_keepalive+0x74>)
 8013fa0:	f640 0224 	movw	r2, #2084	; 0x824
 8013fa4:	4917      	ldr	r1, [pc, #92]	; (8014004 <tcp_keepalive+0x78>)
 8013fa6:	4818      	ldr	r0, [pc, #96]	; (8014008 <tcp_keepalive+0x7c>)
 8013fa8:	f001 f932 	bl	8015210 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013fac:	7dfb      	ldrb	r3, [r7, #23]
 8013fae:	b29c      	uxth	r4, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7f5 fbf1 	bl	800979e <lwip_htonl>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7ff fe60 	bl	8013c88 <tcp_output_alloc_header>
 8013fc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d102      	bne.n	8013fd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fd4:	e010      	b.n	8013ff8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fd6:	7dfb      	ldrb	r3, [r7, #23]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	6939      	ldr	r1, [r7, #16]
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff fe91 	bl	8013d04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	3304      	adds	r3, #4
 8013fe8:	6939      	ldr	r1, [r7, #16]
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7ff fece 	bl	8013d8c <tcp_output_control_segment>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	371c      	adds	r7, #28
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd90      	pop	{r4, r7, pc}
 8014000:	08018230 	.word	0x08018230
 8014004:	08018a0c 	.word	0x08018a0c
 8014008:	08018284 	.word	0x08018284

0801400c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801400c:	b590      	push	{r4, r7, lr}
 801400e:	b08b      	sub	sp, #44	; 0x2c
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014014:	2300      	movs	r3, #0
 8014016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d106      	bne.n	801402e <tcp_zero_window_probe+0x22>
 8014020:	4b4c      	ldr	r3, [pc, #304]	; (8014154 <tcp_zero_window_probe+0x148>)
 8014022:	f640 024f 	movw	r2, #2127	; 0x84f
 8014026:	494c      	ldr	r1, [pc, #304]	; (8014158 <tcp_zero_window_probe+0x14c>)
 8014028:	484c      	ldr	r0, [pc, #304]	; (801415c <tcp_zero_window_probe+0x150>)
 801402a:	f001 f8f1 	bl	8015210 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014032:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014034:	6a3b      	ldr	r3, [r7, #32]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d101      	bne.n	801403e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801403a:	2300      	movs	r3, #0
 801403c:	e086      	b.n	801414c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014044:	2bff      	cmp	r3, #255	; 0xff
 8014046:	d007      	beq.n	8014058 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801404e:	3301      	adds	r3, #1
 8014050:	b2da      	uxtb	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014058:	6a3b      	ldr	r3, [r7, #32]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	899b      	ldrh	r3, [r3, #12]
 801405e:	b29b      	uxth	r3, r3
 8014060:	4618      	mov	r0, r3
 8014062:	f7f5 fb87 	bl	8009774 <lwip_htons>
 8014066:	4603      	mov	r3, r0
 8014068:	b2db      	uxtb	r3, r3
 801406a:	f003 0301 	and.w	r3, r3, #1
 801406e:	2b00      	cmp	r3, #0
 8014070:	d005      	beq.n	801407e <tcp_zero_window_probe+0x72>
 8014072:	6a3b      	ldr	r3, [r7, #32]
 8014074:	891b      	ldrh	r3, [r3, #8]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d101      	bne.n	801407e <tcp_zero_window_probe+0x72>
 801407a:	2301      	movs	r3, #1
 801407c:	e000      	b.n	8014080 <tcp_zero_window_probe+0x74>
 801407e:	2300      	movs	r3, #0
 8014080:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014082:	7ffb      	ldrb	r3, [r7, #31]
 8014084:	2b00      	cmp	r3, #0
 8014086:	bf0c      	ite	eq
 8014088:	2301      	moveq	r3, #1
 801408a:	2300      	movne	r3, #0
 801408c:	b2db      	uxtb	r3, r3
 801408e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014094:	b299      	uxth	r1, r3
 8014096:	6a3b      	ldr	r3, [r7, #32]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	8bba      	ldrh	r2, [r7, #28]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ff fdf2 	bl	8013c88 <tcp_output_alloc_header>
 80140a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80140ac:	f04f 33ff 	mov.w	r3, #4294967295
 80140b0:	e04c      	b.n	801414c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80140b8:	7ffb      	ldrb	r3, [r7, #31]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d011      	beq.n	80140e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	899b      	ldrh	r3, [r3, #12]
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	b21b      	sxth	r3, r3
 80140c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140ca:	b21c      	sxth	r4, r3
 80140cc:	2011      	movs	r0, #17
 80140ce:	f7f5 fb51 	bl	8009774 <lwip_htons>
 80140d2:	4603      	mov	r3, r0
 80140d4:	b21b      	sxth	r3, r3
 80140d6:	4323      	orrs	r3, r4
 80140d8:	b21b      	sxth	r3, r3
 80140da:	b29a      	uxth	r2, r3
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	819a      	strh	r2, [r3, #12]
 80140e0:	e010      	b.n	8014104 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80140e2:	69bb      	ldr	r3, [r7, #24]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	3314      	adds	r3, #20
 80140e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80140ea:	6a3b      	ldr	r3, [r7, #32]
 80140ec:	6858      	ldr	r0, [r3, #4]
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	891a      	ldrh	r2, [r3, #8]
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	891b      	ldrh	r3, [r3, #8]
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	2201      	movs	r2, #1
 80140fe:	6939      	ldr	r1, [r7, #16]
 8014100:	f7f9 fde8 	bl	800dcd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014104:	6a3b      	ldr	r3, [r7, #32]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	4618      	mov	r0, r3
 801410c:	f7f5 fb47 	bl	800979e <lwip_htonl>
 8014110:	4603      	mov	r3, r0
 8014112:	3301      	adds	r3, #1
 8014114:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	da02      	bge.n	8014128 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	68fa      	ldr	r2, [r7, #12]
 8014126:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801412c:	2200      	movs	r2, #0
 801412e:	69b9      	ldr	r1, [r7, #24]
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f7ff fde7 	bl	8013d04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	3304      	adds	r3, #4
 801413c:	69b9      	ldr	r1, [r7, #24]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7ff fe24 	bl	8013d8c <tcp_output_control_segment>
 8014144:	4603      	mov	r3, r0
 8014146:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014148:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801414c:	4618      	mov	r0, r3
 801414e:	372c      	adds	r7, #44	; 0x2c
 8014150:	46bd      	mov	sp, r7
 8014152:	bd90      	pop	{r4, r7, pc}
 8014154:	08018230 	.word	0x08018230
 8014158:	08018a28 	.word	0x08018a28
 801415c:	08018284 	.word	0x08018284

08014160 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014168:	f7f9 fffc 	bl	800e164 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801416c:	4b0a      	ldr	r3, [pc, #40]	; (8014198 <tcpip_tcp_timer+0x38>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d103      	bne.n	801417c <tcpip_tcp_timer+0x1c>
 8014174:	4b09      	ldr	r3, [pc, #36]	; (801419c <tcpip_tcp_timer+0x3c>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d005      	beq.n	8014188 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801417c:	2200      	movs	r2, #0
 801417e:	4908      	ldr	r1, [pc, #32]	; (80141a0 <tcpip_tcp_timer+0x40>)
 8014180:	20fa      	movs	r0, #250	; 0xfa
 8014182:	f000 f8e5 	bl	8014350 <sys_timeout>
 8014186:	e002      	b.n	801418e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014188:	4b06      	ldr	r3, [pc, #24]	; (80141a4 <tcpip_tcp_timer+0x44>)
 801418a:	2200      	movs	r2, #0
 801418c:	601a      	str	r2, [r3, #0]
  }
}
 801418e:	bf00      	nop
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	2000aef0 	.word	0x2000aef0
 801419c:	2000af00 	.word	0x2000af00
 80141a0:	08014161 	.word	0x08014161
 80141a4:	200072a0 	.word	0x200072a0

080141a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80141ac:	4b0a      	ldr	r3, [pc, #40]	; (80141d8 <tcp_timer_needed+0x30>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10f      	bne.n	80141d4 <tcp_timer_needed+0x2c>
 80141b4:	4b09      	ldr	r3, [pc, #36]	; (80141dc <tcp_timer_needed+0x34>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d103      	bne.n	80141c4 <tcp_timer_needed+0x1c>
 80141bc:	4b08      	ldr	r3, [pc, #32]	; (80141e0 <tcp_timer_needed+0x38>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d007      	beq.n	80141d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80141c4:	4b04      	ldr	r3, [pc, #16]	; (80141d8 <tcp_timer_needed+0x30>)
 80141c6:	2201      	movs	r2, #1
 80141c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80141ca:	2200      	movs	r2, #0
 80141cc:	4905      	ldr	r1, [pc, #20]	; (80141e4 <tcp_timer_needed+0x3c>)
 80141ce:	20fa      	movs	r0, #250	; 0xfa
 80141d0:	f000 f8be 	bl	8014350 <sys_timeout>
  }
}
 80141d4:	bf00      	nop
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	200072a0 	.word	0x200072a0
 80141dc:	2000aef0 	.word	0x2000aef0
 80141e0:	2000af00 	.word	0x2000af00
 80141e4:	08014161 	.word	0x08014161

080141e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b086      	sub	sp, #24
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80141f4:	200a      	movs	r0, #10
 80141f6:	f7f8 fc73 	bl	800cae0 <memp_malloc>
 80141fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d109      	bne.n	8014216 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d149      	bne.n	801429c <sys_timeout_abs+0xb4>
 8014208:	4b26      	ldr	r3, [pc, #152]	; (80142a4 <sys_timeout_abs+0xbc>)
 801420a:	22be      	movs	r2, #190	; 0xbe
 801420c:	4926      	ldr	r1, [pc, #152]	; (80142a8 <sys_timeout_abs+0xc0>)
 801420e:	4827      	ldr	r0, [pc, #156]	; (80142ac <sys_timeout_abs+0xc4>)
 8014210:	f000 fffe 	bl	8015210 <iprintf>
    return;
 8014214:	e042      	b.n	801429c <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	2200      	movs	r2, #0
 801421a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	68fa      	ldr	r2, [r7, #12]
 801422c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801422e:	4b20      	ldr	r3, [pc, #128]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d103      	bne.n	801423e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014236:	4a1e      	ldr	r2, [pc, #120]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	6013      	str	r3, [r2, #0]
    return;
 801423c:	e02f      	b.n	801429e <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	685a      	ldr	r2, [r3, #4]
 8014242:	4b1b      	ldr	r3, [pc, #108]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	2b00      	cmp	r3, #0
 801424c:	da07      	bge.n	801425e <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 801424e:	4b18      	ldr	r3, [pc, #96]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014250:	681a      	ldr	r2, [r3, #0]
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014256:	4a16      	ldr	r2, [pc, #88]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e01f      	b.n	801429e <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801425e:	4b14      	ldr	r3, [pc, #80]	; (80142b0 <sys_timeout_abs+0xc8>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	617b      	str	r3, [r7, #20]
 8014264:	e016      	b.n	8014294 <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d007      	beq.n	801427e <sys_timeout_abs+0x96>
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	685a      	ldr	r2, [r3, #4]
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	da07      	bge.n	801428e <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	693a      	ldr	r2, [r7, #16]
 801428a:	601a      	str	r2, [r3, #0]
        break;
 801428c:	e007      	b.n	801429e <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	617b      	str	r3, [r7, #20]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1e5      	bne.n	8014266 <sys_timeout_abs+0x7e>
 801429a:	e000      	b.n	801429e <sys_timeout_abs+0xb6>
    return;
 801429c:	bf00      	nop
      }
    }
  }
}
 801429e:	3718      	adds	r7, #24
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	08018a4c 	.word	0x08018a4c
 80142a8:	08018a80 	.word	0x08018a80
 80142ac:	08018ac0 	.word	0x08018ac0
 80142b0:	20007298 	.word	0x20007298

080142b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	4798      	blx	r3

  now = sys_now();
 80142c6:	f7f1 faaf 	bl	8005828 <sys_now>
 80142ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	4b0d      	ldr	r3, [pc, #52]	; (8014308 <lwip_cyclic_timer+0x54>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4413      	add	r3, r2
 80142d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	2b00      	cmp	r3, #0
 80142e0:	da09      	bge.n	80142f6 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	4413      	add	r3, r2
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	4907      	ldr	r1, [pc, #28]	; (801430c <lwip_cyclic_timer+0x58>)
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7ff ff7a 	bl	80141e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80142f4:	e004      	b.n	8014300 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	4904      	ldr	r1, [pc, #16]	; (801430c <lwip_cyclic_timer+0x58>)
 80142fa:	68f8      	ldr	r0, [r7, #12]
 80142fc:	f7ff ff74 	bl	80141e8 <sys_timeout_abs>
}
 8014300:	bf00      	nop
 8014302:	3718      	adds	r7, #24
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	2000729c 	.word	0x2000729c
 801430c:	080142b5 	.word	0x080142b5

08014310 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014316:	2301      	movs	r3, #1
 8014318:	607b      	str	r3, [r7, #4]
 801431a:	e00e      	b.n	801433a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801431c:	4a0a      	ldr	r2, [pc, #40]	; (8014348 <sys_timeouts_init+0x38>)
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	00db      	lsls	r3, r3, #3
 8014328:	4a07      	ldr	r2, [pc, #28]	; (8014348 <sys_timeouts_init+0x38>)
 801432a:	4413      	add	r3, r2
 801432c:	461a      	mov	r2, r3
 801432e:	4907      	ldr	r1, [pc, #28]	; (801434c <sys_timeouts_init+0x3c>)
 8014330:	f000 f80e 	bl	8014350 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	3301      	adds	r3, #1
 8014338:	607b      	str	r3, [r7, #4]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2b03      	cmp	r3, #3
 801433e:	d9ed      	bls.n	801431c <sys_timeouts_init+0xc>
  }
}
 8014340:	bf00      	nop
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	08019e54 	.word	0x08019e54
 801434c:	080142b5 	.word	0x080142b5

08014350 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b086      	sub	sp, #24
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014362:	d306      	bcc.n	8014372 <sys_timeout+0x22>
 8014364:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <sys_timeout+0x40>)
 8014366:	f240 1229 	movw	r2, #297	; 0x129
 801436a:	490a      	ldr	r1, [pc, #40]	; (8014394 <sys_timeout+0x44>)
 801436c:	480a      	ldr	r0, [pc, #40]	; (8014398 <sys_timeout+0x48>)
 801436e:	f000 ff4f 	bl	8015210 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014372:	f7f1 fa59 	bl	8005828 <sys_now>
 8014376:	4602      	mov	r2, r0
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	4413      	add	r3, r2
 801437c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	6978      	ldr	r0, [r7, #20]
 8014384:	f7ff ff30 	bl	80141e8 <sys_timeout_abs>
#endif
}
 8014388:	bf00      	nop
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	08018a4c 	.word	0x08018a4c
 8014394:	08018ae8 	.word	0x08018ae8
 8014398:	08018ac0 	.word	0x08018ac0

0801439c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80143a2:	f7f1 fa41 	bl	8005828 <sys_now>
 80143a6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80143a8:	4b15      	ldr	r3, [pc, #84]	; (8014400 <sys_check_timeouts+0x64>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d01e      	beq.n	80143f2 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	68fa      	ldr	r2, [r7, #12]
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	2b00      	cmp	r3, #0
 80143be:	db1a      	blt.n	80143f6 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	4a0e      	ldr	r2, [pc, #56]	; (8014400 <sys_check_timeouts+0x64>)
 80143c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	689b      	ldr	r3, [r3, #8]
 80143cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	4a0a      	ldr	r2, [pc, #40]	; (8014404 <sys_check_timeouts+0x68>)
 80143da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	200a      	movs	r0, #10
 80143e0:	f7f8 fbd0 	bl	800cb84 <memp_free>
    if (handler != NULL) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d0de      	beq.n	80143a8 <sys_check_timeouts+0xc>
      handler(arg);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6838      	ldr	r0, [r7, #0]
 80143ee:	4798      	blx	r3
  do {
 80143f0:	e7da      	b.n	80143a8 <sys_check_timeouts+0xc>
      return;
 80143f2:	bf00      	nop
 80143f4:	e000      	b.n	80143f8 <sys_check_timeouts+0x5c>
      return;
 80143f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80143f8:	3710      	adds	r7, #16
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	20007298 	.word	0x20007298
 8014404:	2000729c 	.word	0x2000729c

08014408 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801440e:	4b14      	ldr	r3, [pc, #80]	; (8014460 <sys_timeouts_sleeptime+0x58>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d102      	bne.n	801441c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014416:	f04f 33ff 	mov.w	r3, #4294967295
 801441a:	e01c      	b.n	8014456 <sys_timeouts_sleeptime+0x4e>
  }
  now = sys_now();
 801441c:	f7f1 fa04 	bl	8005828 <sys_now>
 8014420:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014422:	4b0f      	ldr	r3, [pc, #60]	; (8014460 <sys_timeouts_sleeptime+0x58>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	685a      	ldr	r2, [r3, #4]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	2b00      	cmp	r3, #0
 801442e:	da01      	bge.n	8014434 <sys_timeouts_sleeptime+0x2c>
    return 0;
 8014430:	2300      	movs	r3, #0
 8014432:	e010      	b.n	8014456 <sys_timeouts_sleeptime+0x4e>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014434:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <sys_timeouts_sleeptime+0x58>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	685a      	ldr	r2, [r3, #4]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	1ad3      	subs	r3, r2, r3
 801443e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	da06      	bge.n	8014454 <sys_timeouts_sleeptime+0x4c>
 8014446:	4b07      	ldr	r3, [pc, #28]	; (8014464 <sys_timeouts_sleeptime+0x5c>)
 8014448:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801444c:	4906      	ldr	r1, [pc, #24]	; (8014468 <sys_timeouts_sleeptime+0x60>)
 801444e:	4807      	ldr	r0, [pc, #28]	; (801446c <sys_timeouts_sleeptime+0x64>)
 8014450:	f000 fede 	bl	8015210 <iprintf>
    return ret;
 8014454:	683b      	ldr	r3, [r7, #0]
  }
}
 8014456:	4618      	mov	r0, r3
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	20007298 	.word	0x20007298
 8014464:	08018a4c 	.word	0x08018a4c
 8014468:	08018b20 	.word	0x08018b20
 801446c:	08018ac0 	.word	0x08018ac0

08014470 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014474:	f000 fee4 	bl	8015240 <rand>
 8014478:	4603      	mov	r3, r0
 801447a:	b29b      	uxth	r3, r3
 801447c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014480:	b29b      	uxth	r3, r3
 8014482:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014486:	b29a      	uxth	r2, r3
 8014488:	4b01      	ldr	r3, [pc, #4]	; (8014490 <udp_init+0x20>)
 801448a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801448c:	bf00      	nop
 801448e:	bd80      	pop	{r7, pc}
 8014490:	20000018 	.word	0x20000018

08014494 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801449a:	2300      	movs	r3, #0
 801449c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801449e:	4b17      	ldr	r3, [pc, #92]	; (80144fc <udp_new_port+0x68>)
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	b291      	uxth	r1, r2
 80144a6:	4a15      	ldr	r2, [pc, #84]	; (80144fc <udp_new_port+0x68>)
 80144a8:	8011      	strh	r1, [r2, #0]
 80144aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d103      	bne.n	80144ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80144b2:	4b12      	ldr	r3, [pc, #72]	; (80144fc <udp_new_port+0x68>)
 80144b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80144b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144ba:	4b11      	ldr	r3, [pc, #68]	; (8014500 <udp_new_port+0x6c>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	603b      	str	r3, [r7, #0]
 80144c0:	e011      	b.n	80144e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	8a5a      	ldrh	r2, [r3, #18]
 80144c6:	4b0d      	ldr	r3, [pc, #52]	; (80144fc <udp_new_port+0x68>)
 80144c8:	881b      	ldrh	r3, [r3, #0]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d108      	bne.n	80144e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80144ce:	88fb      	ldrh	r3, [r7, #6]
 80144d0:	3301      	adds	r3, #1
 80144d2:	80fb      	strh	r3, [r7, #6]
 80144d4:	88fb      	ldrh	r3, [r7, #6]
 80144d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80144da:	d3e0      	bcc.n	801449e <udp_new_port+0xa>
        return 0;
 80144dc:	2300      	movs	r3, #0
 80144de:	e007      	b.n	80144f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	603b      	str	r3, [r7, #0]
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1ea      	bne.n	80144c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80144ec:	4b03      	ldr	r3, [pc, #12]	; (80144fc <udp_new_port+0x68>)
 80144ee:	881b      	ldrh	r3, [r3, #0]
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	370c      	adds	r7, #12
 80144f4:	46bd      	mov	sp, r7
 80144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fa:	4770      	bx	lr
 80144fc:	20000018 	.word	0x20000018
 8014500:	2000af08 	.word	0x2000af08

08014504 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	4613      	mov	r3, r2
 8014510:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d105      	bne.n	8014524 <udp_input_local_match+0x20>
 8014518:	4b27      	ldr	r3, [pc, #156]	; (80145b8 <udp_input_local_match+0xb4>)
 801451a:	2287      	movs	r2, #135	; 0x87
 801451c:	4927      	ldr	r1, [pc, #156]	; (80145bc <udp_input_local_match+0xb8>)
 801451e:	4828      	ldr	r0, [pc, #160]	; (80145c0 <udp_input_local_match+0xbc>)
 8014520:	f000 fe76 	bl	8015210 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d105      	bne.n	8014536 <udp_input_local_match+0x32>
 801452a:	4b23      	ldr	r3, [pc, #140]	; (80145b8 <udp_input_local_match+0xb4>)
 801452c:	2288      	movs	r2, #136	; 0x88
 801452e:	4925      	ldr	r1, [pc, #148]	; (80145c4 <udp_input_local_match+0xc0>)
 8014530:	4823      	ldr	r0, [pc, #140]	; (80145c0 <udp_input_local_match+0xbc>)
 8014532:	f000 fe6d 	bl	8015210 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	7a1b      	ldrb	r3, [r3, #8]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00b      	beq.n	8014556 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	7a1a      	ldrb	r2, [r3, #8]
 8014542:	4b21      	ldr	r3, [pc, #132]	; (80145c8 <udp_input_local_match+0xc4>)
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801454a:	3301      	adds	r3, #1
 801454c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801454e:	429a      	cmp	r2, r3
 8014550:	d001      	beq.n	8014556 <udp_input_local_match+0x52>
    return 0;
 8014552:	2300      	movs	r3, #0
 8014554:	e02b      	b.n	80145ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014556:	79fb      	ldrb	r3, [r7, #7]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d018      	beq.n	801458e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d013      	beq.n	801458a <udp_input_local_match+0x86>
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d00f      	beq.n	801458a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801456a:	4b17      	ldr	r3, [pc, #92]	; (80145c8 <udp_input_local_match+0xc4>)
 801456c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014572:	d00a      	beq.n	801458a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	4b13      	ldr	r3, [pc, #76]	; (80145c8 <udp_input_local_match+0xc4>)
 801457a:	695b      	ldr	r3, [r3, #20]
 801457c:	405a      	eors	r2, r3
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	3308      	adds	r3, #8
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014586:	2b00      	cmp	r3, #0
 8014588:	d110      	bne.n	80145ac <udp_input_local_match+0xa8>
          return 1;
 801458a:	2301      	movs	r3, #1
 801458c:	e00f      	b.n	80145ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d009      	beq.n	80145a8 <udp_input_local_match+0xa4>
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d005      	beq.n	80145a8 <udp_input_local_match+0xa4>
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681a      	ldr	r2, [r3, #0]
 80145a0:	4b09      	ldr	r3, [pc, #36]	; (80145c8 <udp_input_local_match+0xc4>)
 80145a2:	695b      	ldr	r3, [r3, #20]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d101      	bne.n	80145ac <udp_input_local_match+0xa8>
        return 1;
 80145a8:	2301      	movs	r3, #1
 80145aa:	e000      	b.n	80145ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80145ac:	2300      	movs	r3, #0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3710      	adds	r7, #16
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	08018b34 	.word	0x08018b34
 80145bc:	08018b64 	.word	0x08018b64
 80145c0:	08018b88 	.word	0x08018b88
 80145c4:	08018bb0 	.word	0x08018bb0
 80145c8:	200074c0 	.word	0x200074c0

080145cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80145cc:	b590      	push	{r4, r7, lr}
 80145ce:	b08d      	sub	sp, #52	; 0x34
 80145d0:	af02      	add	r7, sp, #8
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80145d6:	2300      	movs	r3, #0
 80145d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d105      	bne.n	80145ec <udp_input+0x20>
 80145e0:	4b7c      	ldr	r3, [pc, #496]	; (80147d4 <udp_input+0x208>)
 80145e2:	22cf      	movs	r2, #207	; 0xcf
 80145e4:	497c      	ldr	r1, [pc, #496]	; (80147d8 <udp_input+0x20c>)
 80145e6:	487d      	ldr	r0, [pc, #500]	; (80147dc <udp_input+0x210>)
 80145e8:	f000 fe12 	bl	8015210 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d105      	bne.n	80145fe <udp_input+0x32>
 80145f2:	4b78      	ldr	r3, [pc, #480]	; (80147d4 <udp_input+0x208>)
 80145f4:	22d0      	movs	r2, #208	; 0xd0
 80145f6:	497a      	ldr	r1, [pc, #488]	; (80147e0 <udp_input+0x214>)
 80145f8:	4878      	ldr	r0, [pc, #480]	; (80147dc <udp_input+0x210>)
 80145fa:	f000 fe09 	bl	8015210 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	895b      	ldrh	r3, [r3, #10]
 8014602:	2b07      	cmp	r3, #7
 8014604:	d803      	bhi.n	801460e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f7f9 f95e 	bl	800d8c8 <pbuf_free>
    goto end;
 801460c:	e0de      	b.n	80147cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014614:	4b73      	ldr	r3, [pc, #460]	; (80147e4 <udp_input+0x218>)
 8014616:	695a      	ldr	r2, [r3, #20]
 8014618:	4b72      	ldr	r3, [pc, #456]	; (80147e4 <udp_input+0x218>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4619      	mov	r1, r3
 801461e:	4610      	mov	r0, r2
 8014620:	f7f6 ff7c 	bl	800b51c <ip4_addr_isbroadcast_u32>
 8014624:	4603      	mov	r3, r0
 8014626:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	881b      	ldrh	r3, [r3, #0]
 801462c:	b29b      	uxth	r3, r3
 801462e:	4618      	mov	r0, r3
 8014630:	f7f5 f8a0 	bl	8009774 <lwip_htons>
 8014634:	4603      	mov	r3, r0
 8014636:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	885b      	ldrh	r3, [r3, #2]
 801463c:	b29b      	uxth	r3, r3
 801463e:	4618      	mov	r0, r3
 8014640:	f7f5 f898 	bl	8009774 <lwip_htons>
 8014644:	4603      	mov	r3, r0
 8014646:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014648:	2300      	movs	r3, #0
 801464a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801464c:	2300      	movs	r3, #0
 801464e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014650:	2300      	movs	r3, #0
 8014652:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014654:	4b64      	ldr	r3, [pc, #400]	; (80147e8 <udp_input+0x21c>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	627b      	str	r3, [r7, #36]	; 0x24
 801465a:	e054      	b.n	8014706 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465e:	8a5b      	ldrh	r3, [r3, #18]
 8014660:	89fa      	ldrh	r2, [r7, #14]
 8014662:	429a      	cmp	r2, r3
 8014664:	d14a      	bne.n	80146fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014666:	7cfb      	ldrb	r3, [r7, #19]
 8014668:	461a      	mov	r2, r3
 801466a:	6839      	ldr	r1, [r7, #0]
 801466c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801466e:	f7ff ff49 	bl	8014504 <udp_input_local_match>
 8014672:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014674:	2b00      	cmp	r3, #0
 8014676:	d041      	beq.n	80146fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467a:	7c1b      	ldrb	r3, [r3, #16]
 801467c:	f003 0304 	and.w	r3, r3, #4
 8014680:	2b00      	cmp	r3, #0
 8014682:	d11d      	bne.n	80146c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d102      	bne.n	8014690 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	61fb      	str	r3, [r7, #28]
 801468e:	e017      	b.n	80146c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014690:	7cfb      	ldrb	r3, [r7, #19]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d014      	beq.n	80146c0 <udp_input+0xf4>
 8014696:	4b53      	ldr	r3, [pc, #332]	; (80147e4 <udp_input+0x218>)
 8014698:	695b      	ldr	r3, [r3, #20]
 801469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801469e:	d10f      	bne.n	80146c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	3304      	adds	r3, #4
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d008      	beq.n	80146c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	3304      	adds	r3, #4
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d101      	bne.n	80146c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80146bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	8a9b      	ldrh	r3, [r3, #20]
 80146c4:	8a3a      	ldrh	r2, [r7, #16]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d118      	bne.n	80146fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d005      	beq.n	80146de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80146d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d4:	685a      	ldr	r2, [r3, #4]
 80146d6:	4b43      	ldr	r3, [pc, #268]	; (80147e4 <udp_input+0x218>)
 80146d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80146da:	429a      	cmp	r2, r3
 80146dc:	d10e      	bne.n	80146fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80146de:	6a3b      	ldr	r3, [r7, #32]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d014      	beq.n	801470e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80146e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e6:	68da      	ldr	r2, [r3, #12]
 80146e8:	6a3b      	ldr	r3, [r7, #32]
 80146ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80146ec:	4b3e      	ldr	r3, [pc, #248]	; (80147e8 <udp_input+0x21c>)
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80146f4:	4a3c      	ldr	r2, [pc, #240]	; (80147e8 <udp_input+0x21c>)
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80146fa:	e008      	b.n	801470e <udp_input+0x142>
      }
    }

    prev = pcb;
 80146fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	627b      	str	r3, [r7, #36]	; 0x24
 8014706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014708:	2b00      	cmp	r3, #0
 801470a:	d1a7      	bne.n	801465c <udp_input+0x90>
 801470c:	e000      	b.n	8014710 <udp_input+0x144>
        break;
 801470e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	2b00      	cmp	r3, #0
 8014714:	d101      	bne.n	801471a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	2b00      	cmp	r3, #0
 801471e:	d002      	beq.n	8014726 <udp_input+0x15a>
    for_us = 1;
 8014720:	2301      	movs	r3, #1
 8014722:	76fb      	strb	r3, [r7, #27]
 8014724:	e00a      	b.n	801473c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	3304      	adds	r3, #4
 801472a:	681a      	ldr	r2, [r3, #0]
 801472c:	4b2d      	ldr	r3, [pc, #180]	; (80147e4 <udp_input+0x218>)
 801472e:	695b      	ldr	r3, [r3, #20]
 8014730:	429a      	cmp	r2, r3
 8014732:	bf0c      	ite	eq
 8014734:	2301      	moveq	r3, #1
 8014736:	2300      	movne	r3, #0
 8014738:	b2db      	uxtb	r3, r3
 801473a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801473c:	7efb      	ldrb	r3, [r7, #27]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d041      	beq.n	80147c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014742:	2108      	movs	r1, #8
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7f9 f839 	bl	800d7bc <pbuf_remove_header>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00a      	beq.n	8014766 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014750:	4b20      	ldr	r3, [pc, #128]	; (80147d4 <udp_input+0x208>)
 8014752:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014756:	4925      	ldr	r1, [pc, #148]	; (80147ec <udp_input+0x220>)
 8014758:	4820      	ldr	r0, [pc, #128]	; (80147dc <udp_input+0x210>)
 801475a:	f000 fd59 	bl	8015210 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7f9 f8b2 	bl	800d8c8 <pbuf_free>
      goto end;
 8014764:	e032      	b.n	80147cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014768:	2b00      	cmp	r3, #0
 801476a:	d012      	beq.n	8014792 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476e:	699b      	ldr	r3, [r3, #24]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00a      	beq.n	801478a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014776:	699c      	ldr	r4, [r3, #24]
 8014778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477a:	69d8      	ldr	r0, [r3, #28]
 801477c:	8a3b      	ldrh	r3, [r7, #16]
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	4b1b      	ldr	r3, [pc, #108]	; (80147f0 <udp_input+0x224>)
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014786:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014788:	e021      	b.n	80147ce <udp_input+0x202>
        pbuf_free(p);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7f9 f89c 	bl	800d8c8 <pbuf_free>
        goto end;
 8014790:	e01c      	b.n	80147cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014792:	7cfb      	ldrb	r3, [r7, #19]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d112      	bne.n	80147be <udp_input+0x1f2>
 8014798:	4b12      	ldr	r3, [pc, #72]	; (80147e4 <udp_input+0x218>)
 801479a:	695b      	ldr	r3, [r3, #20]
 801479c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147a0:	2be0      	cmp	r3, #224	; 0xe0
 80147a2:	d00c      	beq.n	80147be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80147a4:	4b0f      	ldr	r3, [pc, #60]	; (80147e4 <udp_input+0x218>)
 80147a6:	899b      	ldrh	r3, [r3, #12]
 80147a8:	3308      	adds	r3, #8
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	b21b      	sxth	r3, r3
 80147ae:	4619      	mov	r1, r3
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f9 f876 	bl	800d8a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80147b6:	2103      	movs	r1, #3
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f7f6 fb97 	bl	800aeec <icmp_dest_unreach>
      pbuf_free(p);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7f9 f882 	bl	800d8c8 <pbuf_free>
  return;
 80147c4:	e003      	b.n	80147ce <udp_input+0x202>
    pbuf_free(p);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f7f9 f87e 	bl	800d8c8 <pbuf_free>
  return;
 80147cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80147ce:	372c      	adds	r7, #44	; 0x2c
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd90      	pop	{r4, r7, pc}
 80147d4:	08018b34 	.word	0x08018b34
 80147d8:	08018bd8 	.word	0x08018bd8
 80147dc:	08018b88 	.word	0x08018b88
 80147e0:	08018bf0 	.word	0x08018bf0
 80147e4:	200074c0 	.word	0x200074c0
 80147e8:	2000af08 	.word	0x2000af08
 80147ec:	08018c0c 	.word	0x08018c0c
 80147f0:	200074d0 	.word	0x200074d0

080147f4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af02      	add	r7, sp, #8
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d109      	bne.n	801481c <udp_sendto+0x28>
 8014808:	4b23      	ldr	r3, [pc, #140]	; (8014898 <udp_sendto+0xa4>)
 801480a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801480e:	4923      	ldr	r1, [pc, #140]	; (801489c <udp_sendto+0xa8>)
 8014810:	4823      	ldr	r0, [pc, #140]	; (80148a0 <udp_sendto+0xac>)
 8014812:	f000 fcfd 	bl	8015210 <iprintf>
 8014816:	f06f 030f 	mvn.w	r3, #15
 801481a:	e038      	b.n	801488e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d109      	bne.n	8014836 <udp_sendto+0x42>
 8014822:	4b1d      	ldr	r3, [pc, #116]	; (8014898 <udp_sendto+0xa4>)
 8014824:	f240 2219 	movw	r2, #537	; 0x219
 8014828:	491e      	ldr	r1, [pc, #120]	; (80148a4 <udp_sendto+0xb0>)
 801482a:	481d      	ldr	r0, [pc, #116]	; (80148a0 <udp_sendto+0xac>)
 801482c:	f000 fcf0 	bl	8015210 <iprintf>
 8014830:	f06f 030f 	mvn.w	r3, #15
 8014834:	e02b      	b.n	801488e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d109      	bne.n	8014850 <udp_sendto+0x5c>
 801483c:	4b16      	ldr	r3, [pc, #88]	; (8014898 <udp_sendto+0xa4>)
 801483e:	f240 221a 	movw	r2, #538	; 0x21a
 8014842:	4919      	ldr	r1, [pc, #100]	; (80148a8 <udp_sendto+0xb4>)
 8014844:	4816      	ldr	r0, [pc, #88]	; (80148a0 <udp_sendto+0xac>)
 8014846:	f000 fce3 	bl	8015210 <iprintf>
 801484a:	f06f 030f 	mvn.w	r3, #15
 801484e:	e01e      	b.n	801488e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	7a1b      	ldrb	r3, [r3, #8]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d006      	beq.n	8014866 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	7a1b      	ldrb	r3, [r3, #8]
 801485c:	4618      	mov	r0, r3
 801485e:	f7f8 fca7 	bl	800d1b0 <netif_get_by_index>
 8014862:	6178      	str	r0, [r7, #20]
 8014864:	e003      	b.n	801486e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7f6 fbca 	bl	800b000 <ip4_route>
 801486c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d102      	bne.n	801487a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014874:	f06f 0303 	mvn.w	r3, #3
 8014878:	e009      	b.n	801488e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801487a:	887a      	ldrh	r2, [r7, #2]
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	9300      	str	r3, [sp, #0]
 8014880:	4613      	mov	r3, r2
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	68b9      	ldr	r1, [r7, #8]
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f000 f810 	bl	80148ac <udp_sendto_if>
 801488c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801488e:	4618      	mov	r0, r3
 8014890:	3718      	adds	r7, #24
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	08018b34 	.word	0x08018b34
 801489c:	08018c58 	.word	0x08018c58
 80148a0:	08018b88 	.word	0x08018b88
 80148a4:	08018c70 	.word	0x08018c70
 80148a8:	08018c8c 	.word	0x08018c8c

080148ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b088      	sub	sp, #32
 80148b0:	af02      	add	r7, sp, #8
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d109      	bne.n	80148d4 <udp_sendto_if+0x28>
 80148c0:	4b2e      	ldr	r3, [pc, #184]	; (801497c <udp_sendto_if+0xd0>)
 80148c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148c6:	492e      	ldr	r1, [pc, #184]	; (8014980 <udp_sendto_if+0xd4>)
 80148c8:	482e      	ldr	r0, [pc, #184]	; (8014984 <udp_sendto_if+0xd8>)
 80148ca:	f000 fca1 	bl	8015210 <iprintf>
 80148ce:	f06f 030f 	mvn.w	r3, #15
 80148d2:	e04f      	b.n	8014974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d109      	bne.n	80148ee <udp_sendto_if+0x42>
 80148da:	4b28      	ldr	r3, [pc, #160]	; (801497c <udp_sendto_if+0xd0>)
 80148dc:	f240 2281 	movw	r2, #641	; 0x281
 80148e0:	4929      	ldr	r1, [pc, #164]	; (8014988 <udp_sendto_if+0xdc>)
 80148e2:	4828      	ldr	r0, [pc, #160]	; (8014984 <udp_sendto_if+0xd8>)
 80148e4:	f000 fc94 	bl	8015210 <iprintf>
 80148e8:	f06f 030f 	mvn.w	r3, #15
 80148ec:	e042      	b.n	8014974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d109      	bne.n	8014908 <udp_sendto_if+0x5c>
 80148f4:	4b21      	ldr	r3, [pc, #132]	; (801497c <udp_sendto_if+0xd0>)
 80148f6:	f240 2282 	movw	r2, #642	; 0x282
 80148fa:	4924      	ldr	r1, [pc, #144]	; (801498c <udp_sendto_if+0xe0>)
 80148fc:	4821      	ldr	r0, [pc, #132]	; (8014984 <udp_sendto_if+0xd8>)
 80148fe:	f000 fc87 	bl	8015210 <iprintf>
 8014902:	f06f 030f 	mvn.w	r3, #15
 8014906:	e035      	b.n	8014974 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014908:	6a3b      	ldr	r3, [r7, #32]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d109      	bne.n	8014922 <udp_sendto_if+0x76>
 801490e:	4b1b      	ldr	r3, [pc, #108]	; (801497c <udp_sendto_if+0xd0>)
 8014910:	f240 2283 	movw	r2, #643	; 0x283
 8014914:	491e      	ldr	r1, [pc, #120]	; (8014990 <udp_sendto_if+0xe4>)
 8014916:	481b      	ldr	r0, [pc, #108]	; (8014984 <udp_sendto_if+0xd8>)
 8014918:	f000 fc7a 	bl	8015210 <iprintf>
 801491c:	f06f 030f 	mvn.w	r3, #15
 8014920:	e028      	b.n	8014974 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d009      	beq.n	801493c <udp_sendto_if+0x90>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d005      	beq.n	801493c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014938:	2be0      	cmp	r3, #224	; 0xe0
 801493a:	d103      	bne.n	8014944 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801493c:	6a3b      	ldr	r3, [r7, #32]
 801493e:	3304      	adds	r3, #4
 8014940:	617b      	str	r3, [r7, #20]
 8014942:	e00b      	b.n	801495c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681a      	ldr	r2, [r3, #0]
 8014948:	6a3b      	ldr	r3, [r7, #32]
 801494a:	3304      	adds	r3, #4
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d002      	beq.n	8014958 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014952:	f06f 0303 	mvn.w	r3, #3
 8014956:	e00d      	b.n	8014974 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801495c:	887a      	ldrh	r2, [r7, #2]
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	6a3b      	ldr	r3, [r7, #32]
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	4613      	mov	r3, r2
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	68b9      	ldr	r1, [r7, #8]
 801496c:	68f8      	ldr	r0, [r7, #12]
 801496e:	f000 f811 	bl	8014994 <udp_sendto_if_src>
 8014972:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014974:	4618      	mov	r0, r3
 8014976:	3718      	adds	r7, #24
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	08018b34 	.word	0x08018b34
 8014980:	08018ca8 	.word	0x08018ca8
 8014984:	08018b88 	.word	0x08018b88
 8014988:	08018cc4 	.word	0x08018cc4
 801498c:	08018ce0 	.word	0x08018ce0
 8014990:	08018d00 	.word	0x08018d00

08014994 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b08c      	sub	sp, #48	; 0x30
 8014998:	af04      	add	r7, sp, #16
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
 80149a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d109      	bne.n	80149bc <udp_sendto_if_src+0x28>
 80149a8:	4b66      	ldr	r3, [pc, #408]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 80149aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 80149ae:	4966      	ldr	r1, [pc, #408]	; (8014b48 <udp_sendto_if_src+0x1b4>)
 80149b0:	4866      	ldr	r0, [pc, #408]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 80149b2:	f000 fc2d 	bl	8015210 <iprintf>
 80149b6:	f06f 030f 	mvn.w	r3, #15
 80149ba:	e0be      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d109      	bne.n	80149d6 <udp_sendto_if_src+0x42>
 80149c2:	4b60      	ldr	r3, [pc, #384]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 80149c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80149c8:	4961      	ldr	r1, [pc, #388]	; (8014b50 <udp_sendto_if_src+0x1bc>)
 80149ca:	4860      	ldr	r0, [pc, #384]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 80149cc:	f000 fc20 	bl	8015210 <iprintf>
 80149d0:	f06f 030f 	mvn.w	r3, #15
 80149d4:	e0b1      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d109      	bne.n	80149f0 <udp_sendto_if_src+0x5c>
 80149dc:	4b59      	ldr	r3, [pc, #356]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 80149de:	f240 22d3 	movw	r2, #723	; 0x2d3
 80149e2:	495c      	ldr	r1, [pc, #368]	; (8014b54 <udp_sendto_if_src+0x1c0>)
 80149e4:	4859      	ldr	r0, [pc, #356]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 80149e6:	f000 fc13 	bl	8015210 <iprintf>
 80149ea:	f06f 030f 	mvn.w	r3, #15
 80149ee:	e0a4      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80149f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d109      	bne.n	8014a0a <udp_sendto_if_src+0x76>
 80149f6:	4b53      	ldr	r3, [pc, #332]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 80149f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80149fc:	4956      	ldr	r1, [pc, #344]	; (8014b58 <udp_sendto_if_src+0x1c4>)
 80149fe:	4853      	ldr	r0, [pc, #332]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 8014a00:	f000 fc06 	bl	8015210 <iprintf>
 8014a04:	f06f 030f 	mvn.w	r3, #15
 8014a08:	e097      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d109      	bne.n	8014a24 <udp_sendto_if_src+0x90>
 8014a10:	4b4c      	ldr	r3, [pc, #304]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 8014a12:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014a16:	4951      	ldr	r1, [pc, #324]	; (8014b5c <udp_sendto_if_src+0x1c8>)
 8014a18:	484c      	ldr	r0, [pc, #304]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 8014a1a:	f000 fbf9 	bl	8015210 <iprintf>
 8014a1e:	f06f 030f 	mvn.w	r3, #15
 8014a22:	e08a      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	8a5b      	ldrh	r3, [r3, #18]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d10f      	bne.n	8014a4c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014a2c:	68f9      	ldr	r1, [r7, #12]
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	8a5b      	ldrh	r3, [r3, #18]
 8014a32:	461a      	mov	r2, r3
 8014a34:	68f8      	ldr	r0, [r7, #12]
 8014a36:	f000 f895 	bl	8014b64 <udp_bind>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014a3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d002      	beq.n	8014a4c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014a46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014a4a:	e076      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	891b      	ldrh	r3, [r3, #8]
 8014a50:	3308      	adds	r3, #8
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	891b      	ldrh	r3, [r3, #8]
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	d202      	bcs.n	8014a62 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8014a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a60:	e06b      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014a62:	2108      	movs	r1, #8
 8014a64:	68b8      	ldr	r0, [r7, #8]
 8014a66:	f7f8 fe99 	bl	800d79c <pbuf_add_header>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d015      	beq.n	8014a9c <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014a70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a74:	2108      	movs	r1, #8
 8014a76:	2022      	movs	r0, #34	; 0x22
 8014a78:	f7f8 fc44 	bl	800d304 <pbuf_alloc>
 8014a7c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014a84:	f04f 33ff 	mov.w	r3, #4294967295
 8014a88:	e057      	b.n	8014b3a <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	891b      	ldrh	r3, [r3, #8]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d006      	beq.n	8014aa0 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014a92:	68b9      	ldr	r1, [r7, #8]
 8014a94:	69f8      	ldr	r0, [r7, #28]
 8014a96:	f7f9 f83b 	bl	800db10 <pbuf_chain>
 8014a9a:	e001      	b.n	8014aa0 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	895b      	ldrh	r3, [r3, #10]
 8014aa4:	2b07      	cmp	r3, #7
 8014aa6:	d806      	bhi.n	8014ab6 <udp_sendto_if_src+0x122>
 8014aa8:	4b26      	ldr	r3, [pc, #152]	; (8014b44 <udp_sendto_if_src+0x1b0>)
 8014aaa:	f240 320e 	movw	r2, #782	; 0x30e
 8014aae:	492c      	ldr	r1, [pc, #176]	; (8014b60 <udp_sendto_if_src+0x1cc>)
 8014ab0:	4826      	ldr	r0, [pc, #152]	; (8014b4c <udp_sendto_if_src+0x1b8>)
 8014ab2:	f000 fbad 	bl	8015210 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	8a5b      	ldrh	r3, [r3, #18]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7f4 fe57 	bl	8009774 <lwip_htons>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	461a      	mov	r2, r3
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014ace:	887b      	ldrh	r3, [r7, #2]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7f4 fe4f 	bl	8009774 <lwip_htons>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	461a      	mov	r2, r3
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	719a      	strb	r2, [r3, #6]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	891b      	ldrh	r3, [r3, #8]
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7f4 fe41 	bl	8009774 <lwip_htons>
 8014af2:	4603      	mov	r3, r0
 8014af4:	461a      	mov	r2, r3
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014afa:	2311      	movs	r3, #17
 8014afc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	7adb      	ldrb	r3, [r3, #11]
 8014b02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	7a9b      	ldrb	r3, [r3, #10]
 8014b08:	7cb9      	ldrb	r1, [r7, #18]
 8014b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b0c:	9202      	str	r2, [sp, #8]
 8014b0e:	7cfa      	ldrb	r2, [r7, #19]
 8014b10:	9201      	str	r2, [sp, #4]
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	460b      	mov	r3, r1
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b1a:	69f8      	ldr	r0, [r7, #28]
 8014b1c:	f7f6 fc50 	bl	800b3c0 <ip4_output_if_src>
 8014b20:	4603      	mov	r3, r0
 8014b22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014b24:	69fa      	ldr	r2, [r7, #28]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d004      	beq.n	8014b36 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8014b2c:	69f8      	ldr	r0, [r7, #28]
 8014b2e:	f7f8 fecb 	bl	800d8c8 <pbuf_free>
    q = NULL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3720      	adds	r7, #32
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	08018b34 	.word	0x08018b34
 8014b48:	08018d20 	.word	0x08018d20
 8014b4c:	08018b88 	.word	0x08018b88
 8014b50:	08018d40 	.word	0x08018d40
 8014b54:	08018d60 	.word	0x08018d60
 8014b58:	08018d84 	.word	0x08018d84
 8014b5c:	08018da8 	.word	0x08018da8
 8014b60:	08018dcc 	.word	0x08018dcc

08014b64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	4613      	mov	r3, r2
 8014b70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d101      	bne.n	8014b7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014b78:	4b39      	ldr	r3, [pc, #228]	; (8014c60 <udp_bind+0xfc>)
 8014b7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d109      	bne.n	8014b96 <udp_bind+0x32>
 8014b82:	4b38      	ldr	r3, [pc, #224]	; (8014c64 <udp_bind+0x100>)
 8014b84:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014b88:	4937      	ldr	r1, [pc, #220]	; (8014c68 <udp_bind+0x104>)
 8014b8a:	4838      	ldr	r0, [pc, #224]	; (8014c6c <udp_bind+0x108>)
 8014b8c:	f000 fb40 	bl	8015210 <iprintf>
 8014b90:	f06f 030f 	mvn.w	r3, #15
 8014b94:	e060      	b.n	8014c58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b9a:	4b35      	ldr	r3, [pc, #212]	; (8014c70 <udp_bind+0x10c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	617b      	str	r3, [r7, #20]
 8014ba0:	e009      	b.n	8014bb6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014ba2:	68fa      	ldr	r2, [r7, #12]
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d102      	bne.n	8014bb0 <udp_bind+0x4c>
      rebind = 1;
 8014baa:	2301      	movs	r3, #1
 8014bac:	74fb      	strb	r3, [r7, #19]
      break;
 8014bae:	e005      	b.n	8014bbc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	617b      	str	r3, [r7, #20]
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d1f2      	bne.n	8014ba2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014bbc:	88fb      	ldrh	r3, [r7, #6]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d109      	bne.n	8014bd6 <udp_bind+0x72>
    port = udp_new_port();
 8014bc2:	f7ff fc67 	bl	8014494 <udp_new_port>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014bca:	88fb      	ldrh	r3, [r7, #6]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d12c      	bne.n	8014c2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014bd0:	f06f 0307 	mvn.w	r3, #7
 8014bd4:	e040      	b.n	8014c58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bd6:	4b26      	ldr	r3, [pc, #152]	; (8014c70 <udp_bind+0x10c>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	617b      	str	r3, [r7, #20]
 8014bdc:	e022      	b.n	8014c24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d01b      	beq.n	8014c1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	8a5b      	ldrh	r3, [r3, #18]
 8014bea:	88fa      	ldrh	r2, [r7, #6]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d116      	bne.n	8014c1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d00d      	beq.n	8014c18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00a      	beq.n	8014c18 <udp_bind+0xb4>
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d006      	beq.n	8014c18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014c0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d003      	beq.n	8014c18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d102      	bne.n	8014c1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014c18:	f06f 0307 	mvn.w	r3, #7
 8014c1c:	e01c      	b.n	8014c58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	617b      	str	r3, [r7, #20]
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d1d9      	bne.n	8014bde <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d002      	beq.n	8014c36 <udp_bind+0xd2>
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	e000      	b.n	8014c38 <udp_bind+0xd4>
 8014c36:	2300      	movs	r3, #0
 8014c38:	68fa      	ldr	r2, [r7, #12]
 8014c3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	88fa      	ldrh	r2, [r7, #6]
 8014c40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014c42:	7cfb      	ldrb	r3, [r7, #19]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d106      	bne.n	8014c56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014c48:	4b09      	ldr	r3, [pc, #36]	; (8014c70 <udp_bind+0x10c>)
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014c50:	4a07      	ldr	r2, [pc, #28]	; (8014c70 <udp_bind+0x10c>)
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014c56:	2300      	movs	r3, #0
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3718      	adds	r7, #24
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	08019d48 	.word	0x08019d48
 8014c64:	08018b34 	.word	0x08018b34
 8014c68:	08018dfc 	.word	0x08018dfc
 8014c6c:	08018b88 	.word	0x08018b88
 8014c70:	2000af08 	.word	0x2000af08

08014c74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d107      	bne.n	8014c92 <udp_remove+0x1e>
 8014c82:	4b19      	ldr	r3, [pc, #100]	; (8014ce8 <udp_remove+0x74>)
 8014c84:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014c88:	4918      	ldr	r1, [pc, #96]	; (8014cec <udp_remove+0x78>)
 8014c8a:	4819      	ldr	r0, [pc, #100]	; (8014cf0 <udp_remove+0x7c>)
 8014c8c:	f000 fac0 	bl	8015210 <iprintf>
 8014c90:	e026      	b.n	8014ce0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c92:	4b18      	ldr	r3, [pc, #96]	; (8014cf4 <udp_remove+0x80>)
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d105      	bne.n	8014ca8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c9c:	4b15      	ldr	r3, [pc, #84]	; (8014cf4 <udp_remove+0x80>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	4a14      	ldr	r2, [pc, #80]	; (8014cf4 <udp_remove+0x80>)
 8014ca4:	6013      	str	r3, [r2, #0]
 8014ca6:	e017      	b.n	8014cd8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ca8:	4b12      	ldr	r3, [pc, #72]	; (8014cf4 <udp_remove+0x80>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	e010      	b.n	8014cd2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d009      	beq.n	8014ccc <udp_remove+0x58>
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	68da      	ldr	r2, [r3, #12]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d104      	bne.n	8014ccc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	68da      	ldr	r2, [r3, #12]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	60da      	str	r2, [r3, #12]
        break;
 8014cca:	e005      	b.n	8014cd8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	60fb      	str	r3, [r7, #12]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d1eb      	bne.n	8014cb0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014cd8:	6879      	ldr	r1, [r7, #4]
 8014cda:	2000      	movs	r0, #0
 8014cdc:	f7f7 ff52 	bl	800cb84 <memp_free>
}
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	08018b34 	.word	0x08018b34
 8014cec:	08018e80 	.word	0x08018e80
 8014cf0:	08018b88 	.word	0x08018b88
 8014cf4:	2000af08 	.word	0x2000af08

08014cf8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b085      	sub	sp, #20
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d01e      	beq.n	8014d46 <udp_netif_ip_addr_changed+0x4e>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d01a      	beq.n	8014d46 <udp_netif_ip_addr_changed+0x4e>
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d017      	beq.n	8014d46 <udp_netif_ip_addr_changed+0x4e>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d013      	beq.n	8014d46 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d1e:	4b0d      	ldr	r3, [pc, #52]	; (8014d54 <udp_netif_ip_addr_changed+0x5c>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	60fb      	str	r3, [r7, #12]
 8014d24:	e00c      	b.n	8014d40 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d103      	bne.n	8014d3a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	681a      	ldr	r2, [r3, #0]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	60fb      	str	r3, [r7, #12]
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1ef      	bne.n	8014d26 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d46:	bf00      	nop
 8014d48:	3714      	adds	r7, #20
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop
 8014d54:	2000af08 	.word	0x2000af08

08014d58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b086      	sub	sp, #24
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014d62:	230e      	movs	r3, #14
 8014d64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	895b      	ldrh	r3, [r3, #10]
 8014d6a:	2b0e      	cmp	r3, #14
 8014d6c:	d96e      	bls.n	8014e4c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	7bdb      	ldrb	r3, [r3, #15]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d106      	bne.n	8014d84 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	b2da      	uxtb	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	7b1a      	ldrb	r2, [r3, #12]
 8014d8e:	7b5b      	ldrb	r3, [r3, #13]
 8014d90:	021b      	lsls	r3, r3, #8
 8014d92:	4313      	orrs	r3, r2
 8014d94:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	f003 0301 	and.w	r3, r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d023      	beq.n	8014dea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d10f      	bne.n	8014dca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	785b      	ldrb	r3, [r3, #1]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d11b      	bne.n	8014dea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014db6:	2b5e      	cmp	r3, #94	; 0x5e
 8014db8:	d117      	bne.n	8014dea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	7b5b      	ldrb	r3, [r3, #13]
 8014dbe:	f043 0310 	orr.w	r3, r3, #16
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	735a      	strb	r2, [r3, #13]
 8014dc8:	e00f      	b.n	8014dea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	2206      	movs	r2, #6
 8014dce:	4928      	ldr	r1, [pc, #160]	; (8014e70 <ethernet_input+0x118>)
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f000 f9fb 	bl	80151cc <memcmp>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d106      	bne.n	8014dea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	7b5b      	ldrb	r3, [r3, #13]
 8014de0:	f043 0308 	orr.w	r3, r3, #8
 8014de4:	b2da      	uxtb	r2, r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014dea:	89fb      	ldrh	r3, [r7, #14]
 8014dec:	2b08      	cmp	r3, #8
 8014dee:	d003      	beq.n	8014df8 <ethernet_input+0xa0>
 8014df0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014df4:	d014      	beq.n	8014e20 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014df6:	e032      	b.n	8014e5e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dfe:	f003 0308 	and.w	r3, r3, #8
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d024      	beq.n	8014e50 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e06:	8afb      	ldrh	r3, [r7, #22]
 8014e08:	4619      	mov	r1, r3
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7f8 fcd6 	bl	800d7bc <pbuf_remove_header>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d11e      	bne.n	8014e54 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014e16:	6839      	ldr	r1, [r7, #0]
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7f6 f987 	bl	800b12c <ip4_input>
      break;
 8014e1e:	e013      	b.n	8014e48 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e26:	f003 0308 	and.w	r3, r3, #8
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d014      	beq.n	8014e58 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e2e:	8afb      	ldrh	r3, [r7, #22]
 8014e30:	4619      	mov	r1, r3
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7f8 fcc2 	bl	800d7bc <pbuf_remove_header>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d10e      	bne.n	8014e5c <ethernet_input+0x104>
        etharp_input(p, netif);
 8014e3e:	6839      	ldr	r1, [r7, #0]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7f5 fb2b 	bl	800a49c <etharp_input>
      break;
 8014e46:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e00c      	b.n	8014e66 <ethernet_input+0x10e>
    goto free_and_return;
 8014e4c:	bf00      	nop
 8014e4e:	e006      	b.n	8014e5e <ethernet_input+0x106>
        goto free_and_return;
 8014e50:	bf00      	nop
 8014e52:	e004      	b.n	8014e5e <ethernet_input+0x106>
        goto free_and_return;
 8014e54:	bf00      	nop
 8014e56:	e002      	b.n	8014e5e <ethernet_input+0x106>
        goto free_and_return;
 8014e58:	bf00      	nop
 8014e5a:	e000      	b.n	8014e5e <ethernet_input+0x106>
        goto free_and_return;
 8014e5c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7f8 fd32 	bl	800d8c8 <pbuf_free>
  return ERR_OK;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3718      	adds	r7, #24
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	08019e74 	.word	0x08019e74

08014e74 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
 8014e80:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014e82:	8c3b      	ldrh	r3, [r7, #32]
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7f4 fc75 	bl	8009774 <lwip_htons>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014e8e:	210e      	movs	r1, #14
 8014e90:	68b8      	ldr	r0, [r7, #8]
 8014e92:	f7f8 fc83 	bl	800d79c <pbuf_add_header>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d125      	bne.n	8014ee8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	8afa      	ldrh	r2, [r7, #22]
 8014ea6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	2206      	movs	r2, #6
 8014eac:	6839      	ldr	r1, [r7, #0]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f000 f99b 	bl	80151ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	3306      	adds	r3, #6
 8014eb8:	2206      	movs	r2, #6
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f000 f994 	bl	80151ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014ec8:	2b06      	cmp	r3, #6
 8014eca:	d006      	beq.n	8014eda <ethernet_output+0x66>
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <ethernet_output+0x84>)
 8014ece:	f240 1233 	movw	r2, #307	; 0x133
 8014ed2:	490a      	ldr	r1, [pc, #40]	; (8014efc <ethernet_output+0x88>)
 8014ed4:	480a      	ldr	r0, [pc, #40]	; (8014f00 <ethernet_output+0x8c>)
 8014ed6:	f000 f99b 	bl	8015210 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	699b      	ldr	r3, [r3, #24]
 8014ede:	68b9      	ldr	r1, [r7, #8]
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	4798      	blx	r3
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	e002      	b.n	8014eee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014ee8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014eea:	f06f 0301 	mvn.w	r3, #1
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3718      	adds	r7, #24
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	08018e98 	.word	0x08018e98
 8014efc:	08018ed0 	.word	0x08018ed0
 8014f00:	08018f04 	.word	0x08018f04

08014f04 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b086      	sub	sp, #24
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	60bb      	str	r3, [r7, #8]
 8014f12:	2304      	movs	r3, #4
 8014f14:	60fb      	str	r3, [r7, #12]
 8014f16:	2300      	movs	r3, #0
 8014f18:	613b      	str	r3, [r7, #16]
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014f1e:	f107 0308 	add.w	r3, r7, #8
 8014f22:	2100      	movs	r1, #0
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7f0 ff39 	bl	8005d9c <osMessageCreate>
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d102      	bne.n	8014f3e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014f38:	f04f 33ff 	mov.w	r3, #4294967295
 8014f3c:	e000      	b.n	8014f40 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014f3e:	2300      	movs	r3, #0
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3718      	adds	r7, #24
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	6839      	ldr	r1, [r7, #0]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7f0 ff48 	bl	8005df0 <osMessagePut>
 8014f60:	4603      	mov	r3, r0
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d102      	bne.n	8014f6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014f66:	2300      	movs	r3, #0
 8014f68:	73fb      	strb	r3, [r7, #15]
 8014f6a:	e001      	b.n	8014f70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014f6c:	23ff      	movs	r3, #255	; 0xff
 8014f6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b08c      	sub	sp, #48	; 0x30
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	61f8      	str	r0, [r7, #28]
 8014f84:	61b9      	str	r1, [r7, #24]
 8014f86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014f88:	f7f0 fd43 	bl	8005a12 <osKernelSysTick>
 8014f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d017      	beq.n	8014fc4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	6819      	ldr	r1, [r3, #0]
 8014f98:	f107 0320 	add.w	r3, r7, #32
 8014f9c:	697a      	ldr	r2, [r7, #20]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f0 ff66 	bl	8005e70 <osMessageGet>

    if(event.status == osEventMessage)
 8014fa4:	6a3b      	ldr	r3, [r7, #32]
 8014fa6:	2b10      	cmp	r3, #16
 8014fa8:	d109      	bne.n	8014fbe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fac:	461a      	mov	r2, r3
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014fb2:	f7f0 fd2e 	bl	8005a12 <osKernelSysTick>
 8014fb6:	4602      	mov	r2, r0
 8014fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fba:	1ad3      	subs	r3, r2, r3
 8014fbc:	e019      	b.n	8014ff2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc2:	e016      	b.n	8014ff2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	6819      	ldr	r1, [r3, #0]
 8014fc8:	463b      	mov	r3, r7
 8014fca:	f04f 32ff 	mov.w	r2, #4294967295
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7f0 ff4e 	bl	8005e70 <osMessageGet>
 8014fd4:	f107 0320 	add.w	r3, r7, #32
 8014fd8:	463a      	mov	r2, r7
 8014fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8014fdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	69bb      	ldr	r3, [r7, #24]
 8014fe6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014fe8:	f7f0 fd13 	bl	8005a12 <osKernelSysTick>
 8014fec:	4602      	mov	r2, r0
 8014fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3730      	adds	r7, #48	; 0x30
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b083      	sub	sp, #12
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <sys_mbox_valid+0x14>
    return 0;
 801500a:	2300      	movs	r3, #0
 801500c:	e000      	b.n	8015010 <sys_mbox_valid+0x16>
  else
    return 1;
 801500e:	2301      	movs	r3, #1
}
 8015010:	4618      	mov	r0, r3
 8015012:	370c      	adds	r7, #12
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr

0801501c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015020:	4803      	ldr	r0, [pc, #12]	; (8015030 <sys_init+0x14>)
 8015022:	f7f0 fd66 	bl	8005af2 <osMutexCreate>
 8015026:	4602      	mov	r2, r0
 8015028:	4b02      	ldr	r3, [pc, #8]	; (8015034 <sys_init+0x18>)
 801502a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801502c:	bf00      	nop
 801502e:	bd80      	pop	{r7, pc}
 8015030:	08019e84 	.word	0x08019e84
 8015034:	2000af10 	.word	0x2000af10

08015038 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015040:	2300      	movs	r3, #0
 8015042:	60bb      	str	r3, [r7, #8]
 8015044:	2300      	movs	r3, #0
 8015046:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015048:	f107 0308 	add.w	r3, r7, #8
 801504c:	4618      	mov	r0, r3
 801504e:	f7f0 fd50 	bl	8005af2 <osMutexCreate>
 8015052:	4602      	mov	r2, r0
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d102      	bne.n	8015066 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015060:	f04f 33ff 	mov.w	r3, #4294967295
 8015064:	e000      	b.n	8015068 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015066:	2300      	movs	r3, #0
}
 8015068:	4618      	mov	r0, r3
 801506a:	3710      	adds	r7, #16
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f04f 31ff 	mov.w	r1, #4294967295
 8015080:	4618      	mov	r0, r3
 8015082:	f7f0 fd4f 	bl	8005b24 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015086:	bf00      	nop
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b082      	sub	sp, #8
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4618      	mov	r0, r3
 801509c:	f7f0 fd90 	bl	8005bc0 <osMutexRelease>
}
 80150a0:	bf00      	nop
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b08c      	sub	sp, #48	; 0x30
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	607a      	str	r2, [r7, #4]
 80150b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80150b6:	f107 0314 	add.w	r3, r7, #20
 80150ba:	2200      	movs	r2, #0
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	605a      	str	r2, [r3, #4]
 80150c0:	609a      	str	r2, [r3, #8]
 80150c2:	60da      	str	r2, [r3, #12]
 80150c4:	611a      	str	r2, [r3, #16]
 80150c6:	615a      	str	r2, [r3, #20]
 80150c8:	619a      	str	r2, [r3, #24]
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	617b      	str	r3, [r7, #20]
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	61bb      	str	r3, [r7, #24]
 80150d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d4:	b21b      	sxth	r3, r3
 80150d6:	83bb      	strh	r3, [r7, #28]
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80150dc:	f107 0314 	add.w	r3, r7, #20
 80150e0:	6879      	ldr	r1, [r7, #4]
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7f0 fca5 	bl	8005a32 <osThreadCreate>
 80150e8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3730      	adds	r7, #48	; 0x30
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
	...

080150f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80150f8:	4b04      	ldr	r3, [pc, #16]	; (801510c <sys_arch_protect+0x18>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	f04f 31ff 	mov.w	r1, #4294967295
 8015100:	4618      	mov	r0, r3
 8015102:	f7f0 fd0f 	bl	8005b24 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015106:	2301      	movs	r3, #1
}
 8015108:	4618      	mov	r0, r3
 801510a:	bd80      	pop	{r7, pc}
 801510c:	2000af10 	.word	0x2000af10

08015110 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015118:	4b04      	ldr	r3, [pc, #16]	; (801512c <sys_arch_unprotect+0x1c>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4618      	mov	r0, r3
 801511e:	f7f0 fd4f 	bl	8005bc0 <osMutexRelease>
}
 8015122:	bf00      	nop
 8015124:	3708      	adds	r7, #8
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	2000af10 	.word	0x2000af10

08015130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015134:	480d      	ldr	r0, [pc, #52]	; (801516c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015136:	490e      	ldr	r1, [pc, #56]	; (8015170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015138:	4a0e      	ldr	r2, [pc, #56]	; (8015174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801513a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801513c:	e002      	b.n	8015144 <LoopCopyDataInit>

0801513e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801513e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015142:	3304      	adds	r3, #4

08015144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015148:	d3f9      	bcc.n	801513e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801514a:	4a0b      	ldr	r2, [pc, #44]	; (8015178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801514c:	4c0b      	ldr	r4, [pc, #44]	; (801517c <LoopFillZerobss+0x26>)
  movs r3, #0
 801514e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015150:	e001      	b.n	8015156 <LoopFillZerobss>

08015152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015154:	3204      	adds	r2, #4

08015156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015158:	d3fb      	bcc.n	8015152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801515a:	f7eb ff81 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801515e:	f000 f811 	bl	8015184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015162:	f7eb faed 	bl	8000740 <main>
  bx  lr    
 8015166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 801516c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015170:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8015174:	08019f34 	.word	0x08019f34
  ldr r2, =_sbss
 8015178:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 801517c:	2000af14 	.word	0x2000af14

08015180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015180:	e7fe      	b.n	8015180 <ADC_IRQHandler>
	...

08015184 <__libc_init_array>:
 8015184:	b570      	push	{r4, r5, r6, lr}
 8015186:	4e0d      	ldr	r6, [pc, #52]	; (80151bc <__libc_init_array+0x38>)
 8015188:	4c0d      	ldr	r4, [pc, #52]	; (80151c0 <__libc_init_array+0x3c>)
 801518a:	1ba4      	subs	r4, r4, r6
 801518c:	10a4      	asrs	r4, r4, #2
 801518e:	2500      	movs	r5, #0
 8015190:	42a5      	cmp	r5, r4
 8015192:	d109      	bne.n	80151a8 <__libc_init_array+0x24>
 8015194:	4e0b      	ldr	r6, [pc, #44]	; (80151c4 <__libc_init_array+0x40>)
 8015196:	4c0c      	ldr	r4, [pc, #48]	; (80151c8 <__libc_init_array+0x44>)
 8015198:	f000 ff94 	bl	80160c4 <_init>
 801519c:	1ba4      	subs	r4, r4, r6
 801519e:	10a4      	asrs	r4, r4, #2
 80151a0:	2500      	movs	r5, #0
 80151a2:	42a5      	cmp	r5, r4
 80151a4:	d105      	bne.n	80151b2 <__libc_init_array+0x2e>
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151ac:	4798      	blx	r3
 80151ae:	3501      	adds	r5, #1
 80151b0:	e7ee      	b.n	8015190 <__libc_init_array+0xc>
 80151b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151b6:	4798      	blx	r3
 80151b8:	3501      	adds	r5, #1
 80151ba:	e7f2      	b.n	80151a2 <__libc_init_array+0x1e>
 80151bc:	08019f2c 	.word	0x08019f2c
 80151c0:	08019f2c 	.word	0x08019f2c
 80151c4:	08019f2c 	.word	0x08019f2c
 80151c8:	08019f30 	.word	0x08019f30

080151cc <memcmp>:
 80151cc:	b510      	push	{r4, lr}
 80151ce:	3901      	subs	r1, #1
 80151d0:	4402      	add	r2, r0
 80151d2:	4290      	cmp	r0, r2
 80151d4:	d101      	bne.n	80151da <memcmp+0xe>
 80151d6:	2000      	movs	r0, #0
 80151d8:	bd10      	pop	{r4, pc}
 80151da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80151de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80151e2:	42a3      	cmp	r3, r4
 80151e4:	d0f5      	beq.n	80151d2 <memcmp+0x6>
 80151e6:	1b18      	subs	r0, r3, r4
 80151e8:	bd10      	pop	{r4, pc}

080151ea <memcpy>:
 80151ea:	b510      	push	{r4, lr}
 80151ec:	1e43      	subs	r3, r0, #1
 80151ee:	440a      	add	r2, r1
 80151f0:	4291      	cmp	r1, r2
 80151f2:	d100      	bne.n	80151f6 <memcpy+0xc>
 80151f4:	bd10      	pop	{r4, pc}
 80151f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151fe:	e7f7      	b.n	80151f0 <memcpy+0x6>

08015200 <memset>:
 8015200:	4402      	add	r2, r0
 8015202:	4603      	mov	r3, r0
 8015204:	4293      	cmp	r3, r2
 8015206:	d100      	bne.n	801520a <memset+0xa>
 8015208:	4770      	bx	lr
 801520a:	f803 1b01 	strb.w	r1, [r3], #1
 801520e:	e7f9      	b.n	8015204 <memset+0x4>

08015210 <iprintf>:
 8015210:	b40f      	push	{r0, r1, r2, r3}
 8015212:	4b0a      	ldr	r3, [pc, #40]	; (801523c <iprintf+0x2c>)
 8015214:	b513      	push	{r0, r1, r4, lr}
 8015216:	681c      	ldr	r4, [r3, #0]
 8015218:	b124      	cbz	r4, 8015224 <iprintf+0x14>
 801521a:	69a3      	ldr	r3, [r4, #24]
 801521c:	b913      	cbnz	r3, 8015224 <iprintf+0x14>
 801521e:	4620      	mov	r0, r4
 8015220:	f000 f8a8 	bl	8015374 <__sinit>
 8015224:	ab05      	add	r3, sp, #20
 8015226:	9a04      	ldr	r2, [sp, #16]
 8015228:	68a1      	ldr	r1, [r4, #8]
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	4620      	mov	r0, r4
 801522e:	f000 fa09 	bl	8015644 <_vfiprintf_r>
 8015232:	b002      	add	sp, #8
 8015234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015238:	b004      	add	sp, #16
 801523a:	4770      	bx	lr
 801523c:	2000001c 	.word	0x2000001c

08015240 <rand>:
 8015240:	4b19      	ldr	r3, [pc, #100]	; (80152a8 <rand+0x68>)
 8015242:	b510      	push	{r4, lr}
 8015244:	681c      	ldr	r4, [r3, #0]
 8015246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015248:	b9d3      	cbnz	r3, 8015280 <rand+0x40>
 801524a:	2018      	movs	r0, #24
 801524c:	f000 f91c 	bl	8015488 <malloc>
 8015250:	f243 330e 	movw	r3, #13070	; 0x330e
 8015254:	63a0      	str	r0, [r4, #56]	; 0x38
 8015256:	8003      	strh	r3, [r0, #0]
 8015258:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 801525c:	8043      	strh	r3, [r0, #2]
 801525e:	f241 2334 	movw	r3, #4660	; 0x1234
 8015262:	8083      	strh	r3, [r0, #4]
 8015264:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8015268:	80c3      	strh	r3, [r0, #6]
 801526a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 801526e:	8103      	strh	r3, [r0, #8]
 8015270:	2305      	movs	r3, #5
 8015272:	8143      	strh	r3, [r0, #10]
 8015274:	230b      	movs	r3, #11
 8015276:	8183      	strh	r3, [r0, #12]
 8015278:	2201      	movs	r2, #1
 801527a:	2300      	movs	r3, #0
 801527c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015280:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015282:	480a      	ldr	r0, [pc, #40]	; (80152ac <rand+0x6c>)
 8015284:	690a      	ldr	r2, [r1, #16]
 8015286:	694b      	ldr	r3, [r1, #20]
 8015288:	4c09      	ldr	r4, [pc, #36]	; (80152b0 <rand+0x70>)
 801528a:	4350      	muls	r0, r2
 801528c:	fb04 0003 	mla	r0, r4, r3, r0
 8015290:	fba2 2304 	umull	r2, r3, r2, r4
 8015294:	3201      	adds	r2, #1
 8015296:	4403      	add	r3, r0
 8015298:	f143 0300 	adc.w	r3, r3, #0
 801529c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80152a0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80152a4:	bd10      	pop	{r4, pc}
 80152a6:	bf00      	nop
 80152a8:	2000001c 	.word	0x2000001c
 80152ac:	5851f42d 	.word	0x5851f42d
 80152b0:	4c957f2d 	.word	0x4c957f2d

080152b4 <strchr>:
 80152b4:	b2c9      	uxtb	r1, r1
 80152b6:	4603      	mov	r3, r0
 80152b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152bc:	b11a      	cbz	r2, 80152c6 <strchr+0x12>
 80152be:	4291      	cmp	r1, r2
 80152c0:	d1f9      	bne.n	80152b6 <strchr+0x2>
 80152c2:	4618      	mov	r0, r3
 80152c4:	4770      	bx	lr
 80152c6:	2900      	cmp	r1, #0
 80152c8:	bf0c      	ite	eq
 80152ca:	4618      	moveq	r0, r3
 80152cc:	2000      	movne	r0, #0
 80152ce:	4770      	bx	lr

080152d0 <strncmp>:
 80152d0:	b510      	push	{r4, lr}
 80152d2:	b16a      	cbz	r2, 80152f0 <strncmp+0x20>
 80152d4:	3901      	subs	r1, #1
 80152d6:	1884      	adds	r4, r0, r2
 80152d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80152dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80152e0:	4293      	cmp	r3, r2
 80152e2:	d103      	bne.n	80152ec <strncmp+0x1c>
 80152e4:	42a0      	cmp	r0, r4
 80152e6:	d001      	beq.n	80152ec <strncmp+0x1c>
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d1f5      	bne.n	80152d8 <strncmp+0x8>
 80152ec:	1a98      	subs	r0, r3, r2
 80152ee:	bd10      	pop	{r4, pc}
 80152f0:	4610      	mov	r0, r2
 80152f2:	bd10      	pop	{r4, pc}

080152f4 <_cleanup_r>:
 80152f4:	4901      	ldr	r1, [pc, #4]	; (80152fc <_cleanup_r+0x8>)
 80152f6:	f000 b8a9 	b.w	801544c <_fwalk_reent>
 80152fa:	bf00      	nop
 80152fc:	08015f19 	.word	0x08015f19

08015300 <std.isra.0>:
 8015300:	2300      	movs	r3, #0
 8015302:	b510      	push	{r4, lr}
 8015304:	4604      	mov	r4, r0
 8015306:	6003      	str	r3, [r0, #0]
 8015308:	6043      	str	r3, [r0, #4]
 801530a:	6083      	str	r3, [r0, #8]
 801530c:	8181      	strh	r1, [r0, #12]
 801530e:	6643      	str	r3, [r0, #100]	; 0x64
 8015310:	81c2      	strh	r2, [r0, #14]
 8015312:	6103      	str	r3, [r0, #16]
 8015314:	6143      	str	r3, [r0, #20]
 8015316:	6183      	str	r3, [r0, #24]
 8015318:	4619      	mov	r1, r3
 801531a:	2208      	movs	r2, #8
 801531c:	305c      	adds	r0, #92	; 0x5c
 801531e:	f7ff ff6f 	bl	8015200 <memset>
 8015322:	4b05      	ldr	r3, [pc, #20]	; (8015338 <std.isra.0+0x38>)
 8015324:	6263      	str	r3, [r4, #36]	; 0x24
 8015326:	4b05      	ldr	r3, [pc, #20]	; (801533c <std.isra.0+0x3c>)
 8015328:	62a3      	str	r3, [r4, #40]	; 0x28
 801532a:	4b05      	ldr	r3, [pc, #20]	; (8015340 <std.isra.0+0x40>)
 801532c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801532e:	4b05      	ldr	r3, [pc, #20]	; (8015344 <std.isra.0+0x44>)
 8015330:	6224      	str	r4, [r4, #32]
 8015332:	6323      	str	r3, [r4, #48]	; 0x30
 8015334:	bd10      	pop	{r4, pc}
 8015336:	bf00      	nop
 8015338:	08015bbd 	.word	0x08015bbd
 801533c:	08015bdf 	.word	0x08015bdf
 8015340:	08015c17 	.word	0x08015c17
 8015344:	08015c3b 	.word	0x08015c3b

08015348 <__sfmoreglue>:
 8015348:	b570      	push	{r4, r5, r6, lr}
 801534a:	1e4a      	subs	r2, r1, #1
 801534c:	2568      	movs	r5, #104	; 0x68
 801534e:	4355      	muls	r5, r2
 8015350:	460e      	mov	r6, r1
 8015352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015356:	f000 f8ed 	bl	8015534 <_malloc_r>
 801535a:	4604      	mov	r4, r0
 801535c:	b140      	cbz	r0, 8015370 <__sfmoreglue+0x28>
 801535e:	2100      	movs	r1, #0
 8015360:	e880 0042 	stmia.w	r0, {r1, r6}
 8015364:	300c      	adds	r0, #12
 8015366:	60a0      	str	r0, [r4, #8]
 8015368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801536c:	f7ff ff48 	bl	8015200 <memset>
 8015370:	4620      	mov	r0, r4
 8015372:	bd70      	pop	{r4, r5, r6, pc}

08015374 <__sinit>:
 8015374:	6983      	ldr	r3, [r0, #24]
 8015376:	b510      	push	{r4, lr}
 8015378:	4604      	mov	r4, r0
 801537a:	bb33      	cbnz	r3, 80153ca <__sinit+0x56>
 801537c:	6483      	str	r3, [r0, #72]	; 0x48
 801537e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8015380:	6503      	str	r3, [r0, #80]	; 0x50
 8015382:	4b12      	ldr	r3, [pc, #72]	; (80153cc <__sinit+0x58>)
 8015384:	4a12      	ldr	r2, [pc, #72]	; (80153d0 <__sinit+0x5c>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	6282      	str	r2, [r0, #40]	; 0x28
 801538a:	4298      	cmp	r0, r3
 801538c:	bf04      	itt	eq
 801538e:	2301      	moveq	r3, #1
 8015390:	6183      	streq	r3, [r0, #24]
 8015392:	f000 f81f 	bl	80153d4 <__sfp>
 8015396:	6060      	str	r0, [r4, #4]
 8015398:	4620      	mov	r0, r4
 801539a:	f000 f81b 	bl	80153d4 <__sfp>
 801539e:	60a0      	str	r0, [r4, #8]
 80153a0:	4620      	mov	r0, r4
 80153a2:	f000 f817 	bl	80153d4 <__sfp>
 80153a6:	2200      	movs	r2, #0
 80153a8:	60e0      	str	r0, [r4, #12]
 80153aa:	2104      	movs	r1, #4
 80153ac:	6860      	ldr	r0, [r4, #4]
 80153ae:	f7ff ffa7 	bl	8015300 <std.isra.0>
 80153b2:	2201      	movs	r2, #1
 80153b4:	2109      	movs	r1, #9
 80153b6:	68a0      	ldr	r0, [r4, #8]
 80153b8:	f7ff ffa2 	bl	8015300 <std.isra.0>
 80153bc:	2202      	movs	r2, #2
 80153be:	2112      	movs	r1, #18
 80153c0:	68e0      	ldr	r0, [r4, #12]
 80153c2:	f7ff ff9d 	bl	8015300 <std.isra.0>
 80153c6:	2301      	movs	r3, #1
 80153c8:	61a3      	str	r3, [r4, #24]
 80153ca:	bd10      	pop	{r4, pc}
 80153cc:	08019eec 	.word	0x08019eec
 80153d0:	080152f5 	.word	0x080152f5

080153d4 <__sfp>:
 80153d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d6:	4b1c      	ldr	r3, [pc, #112]	; (8015448 <__sfp+0x74>)
 80153d8:	681e      	ldr	r6, [r3, #0]
 80153da:	69b3      	ldr	r3, [r6, #24]
 80153dc:	4607      	mov	r7, r0
 80153de:	b913      	cbnz	r3, 80153e6 <__sfp+0x12>
 80153e0:	4630      	mov	r0, r6
 80153e2:	f7ff ffc7 	bl	8015374 <__sinit>
 80153e6:	3648      	adds	r6, #72	; 0x48
 80153e8:	68b4      	ldr	r4, [r6, #8]
 80153ea:	6873      	ldr	r3, [r6, #4]
 80153ec:	3b01      	subs	r3, #1
 80153ee:	d503      	bpl.n	80153f8 <__sfp+0x24>
 80153f0:	6833      	ldr	r3, [r6, #0]
 80153f2:	b133      	cbz	r3, 8015402 <__sfp+0x2e>
 80153f4:	6836      	ldr	r6, [r6, #0]
 80153f6:	e7f7      	b.n	80153e8 <__sfp+0x14>
 80153f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80153fc:	b16d      	cbz	r5, 801541a <__sfp+0x46>
 80153fe:	3468      	adds	r4, #104	; 0x68
 8015400:	e7f4      	b.n	80153ec <__sfp+0x18>
 8015402:	2104      	movs	r1, #4
 8015404:	4638      	mov	r0, r7
 8015406:	f7ff ff9f 	bl	8015348 <__sfmoreglue>
 801540a:	6030      	str	r0, [r6, #0]
 801540c:	2800      	cmp	r0, #0
 801540e:	d1f1      	bne.n	80153f4 <__sfp+0x20>
 8015410:	230c      	movs	r3, #12
 8015412:	603b      	str	r3, [r7, #0]
 8015414:	4604      	mov	r4, r0
 8015416:	4620      	mov	r0, r4
 8015418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801541a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801541e:	81e3      	strh	r3, [r4, #14]
 8015420:	2301      	movs	r3, #1
 8015422:	81a3      	strh	r3, [r4, #12]
 8015424:	6665      	str	r5, [r4, #100]	; 0x64
 8015426:	6025      	str	r5, [r4, #0]
 8015428:	60a5      	str	r5, [r4, #8]
 801542a:	6065      	str	r5, [r4, #4]
 801542c:	6125      	str	r5, [r4, #16]
 801542e:	6165      	str	r5, [r4, #20]
 8015430:	61a5      	str	r5, [r4, #24]
 8015432:	2208      	movs	r2, #8
 8015434:	4629      	mov	r1, r5
 8015436:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801543a:	f7ff fee1 	bl	8015200 <memset>
 801543e:	6365      	str	r5, [r4, #52]	; 0x34
 8015440:	63a5      	str	r5, [r4, #56]	; 0x38
 8015442:	64a5      	str	r5, [r4, #72]	; 0x48
 8015444:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015446:	e7e6      	b.n	8015416 <__sfp+0x42>
 8015448:	08019eec 	.word	0x08019eec

0801544c <_fwalk_reent>:
 801544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015450:	4680      	mov	r8, r0
 8015452:	4689      	mov	r9, r1
 8015454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015458:	2600      	movs	r6, #0
 801545a:	b914      	cbnz	r4, 8015462 <_fwalk_reent+0x16>
 801545c:	4630      	mov	r0, r6
 801545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015462:	68a5      	ldr	r5, [r4, #8]
 8015464:	6867      	ldr	r7, [r4, #4]
 8015466:	3f01      	subs	r7, #1
 8015468:	d501      	bpl.n	801546e <_fwalk_reent+0x22>
 801546a:	6824      	ldr	r4, [r4, #0]
 801546c:	e7f5      	b.n	801545a <_fwalk_reent+0xe>
 801546e:	89ab      	ldrh	r3, [r5, #12]
 8015470:	2b01      	cmp	r3, #1
 8015472:	d907      	bls.n	8015484 <_fwalk_reent+0x38>
 8015474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015478:	3301      	adds	r3, #1
 801547a:	d003      	beq.n	8015484 <_fwalk_reent+0x38>
 801547c:	4629      	mov	r1, r5
 801547e:	4640      	mov	r0, r8
 8015480:	47c8      	blx	r9
 8015482:	4306      	orrs	r6, r0
 8015484:	3568      	adds	r5, #104	; 0x68
 8015486:	e7ee      	b.n	8015466 <_fwalk_reent+0x1a>

08015488 <malloc>:
 8015488:	4b02      	ldr	r3, [pc, #8]	; (8015494 <malloc+0xc>)
 801548a:	4601      	mov	r1, r0
 801548c:	6818      	ldr	r0, [r3, #0]
 801548e:	f000 b851 	b.w	8015534 <_malloc_r>
 8015492:	bf00      	nop
 8015494:	2000001c 	.word	0x2000001c

08015498 <_free_r>:
 8015498:	b538      	push	{r3, r4, r5, lr}
 801549a:	4605      	mov	r5, r0
 801549c:	2900      	cmp	r1, #0
 801549e:	d045      	beq.n	801552c <_free_r+0x94>
 80154a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154a4:	1f0c      	subs	r4, r1, #4
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	bfb8      	it	lt
 80154aa:	18e4      	addlt	r4, r4, r3
 80154ac:	f000 fdd4 	bl	8016058 <__malloc_lock>
 80154b0:	4a1f      	ldr	r2, [pc, #124]	; (8015530 <_free_r+0x98>)
 80154b2:	6813      	ldr	r3, [r2, #0]
 80154b4:	4610      	mov	r0, r2
 80154b6:	b933      	cbnz	r3, 80154c6 <_free_r+0x2e>
 80154b8:	6063      	str	r3, [r4, #4]
 80154ba:	6014      	str	r4, [r2, #0]
 80154bc:	4628      	mov	r0, r5
 80154be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154c2:	f000 bdca 	b.w	801605a <__malloc_unlock>
 80154c6:	42a3      	cmp	r3, r4
 80154c8:	d90c      	bls.n	80154e4 <_free_r+0x4c>
 80154ca:	6821      	ldr	r1, [r4, #0]
 80154cc:	1862      	adds	r2, r4, r1
 80154ce:	4293      	cmp	r3, r2
 80154d0:	bf04      	itt	eq
 80154d2:	681a      	ldreq	r2, [r3, #0]
 80154d4:	685b      	ldreq	r3, [r3, #4]
 80154d6:	6063      	str	r3, [r4, #4]
 80154d8:	bf04      	itt	eq
 80154da:	1852      	addeq	r2, r2, r1
 80154dc:	6022      	streq	r2, [r4, #0]
 80154de:	6004      	str	r4, [r0, #0]
 80154e0:	e7ec      	b.n	80154bc <_free_r+0x24>
 80154e2:	4613      	mov	r3, r2
 80154e4:	685a      	ldr	r2, [r3, #4]
 80154e6:	b10a      	cbz	r2, 80154ec <_free_r+0x54>
 80154e8:	42a2      	cmp	r2, r4
 80154ea:	d9fa      	bls.n	80154e2 <_free_r+0x4a>
 80154ec:	6819      	ldr	r1, [r3, #0]
 80154ee:	1858      	adds	r0, r3, r1
 80154f0:	42a0      	cmp	r0, r4
 80154f2:	d10b      	bne.n	801550c <_free_r+0x74>
 80154f4:	6820      	ldr	r0, [r4, #0]
 80154f6:	4401      	add	r1, r0
 80154f8:	1858      	adds	r0, r3, r1
 80154fa:	4282      	cmp	r2, r0
 80154fc:	6019      	str	r1, [r3, #0]
 80154fe:	d1dd      	bne.n	80154bc <_free_r+0x24>
 8015500:	6810      	ldr	r0, [r2, #0]
 8015502:	6852      	ldr	r2, [r2, #4]
 8015504:	605a      	str	r2, [r3, #4]
 8015506:	4401      	add	r1, r0
 8015508:	6019      	str	r1, [r3, #0]
 801550a:	e7d7      	b.n	80154bc <_free_r+0x24>
 801550c:	d902      	bls.n	8015514 <_free_r+0x7c>
 801550e:	230c      	movs	r3, #12
 8015510:	602b      	str	r3, [r5, #0]
 8015512:	e7d3      	b.n	80154bc <_free_r+0x24>
 8015514:	6820      	ldr	r0, [r4, #0]
 8015516:	1821      	adds	r1, r4, r0
 8015518:	428a      	cmp	r2, r1
 801551a:	bf04      	itt	eq
 801551c:	6811      	ldreq	r1, [r2, #0]
 801551e:	6852      	ldreq	r2, [r2, #4]
 8015520:	6062      	str	r2, [r4, #4]
 8015522:	bf04      	itt	eq
 8015524:	1809      	addeq	r1, r1, r0
 8015526:	6021      	streq	r1, [r4, #0]
 8015528:	605c      	str	r4, [r3, #4]
 801552a:	e7c7      	b.n	80154bc <_free_r+0x24>
 801552c:	bd38      	pop	{r3, r4, r5, pc}
 801552e:	bf00      	nop
 8015530:	200072a4 	.word	0x200072a4

08015534 <_malloc_r>:
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	1ccd      	adds	r5, r1, #3
 8015538:	f025 0503 	bic.w	r5, r5, #3
 801553c:	3508      	adds	r5, #8
 801553e:	2d0c      	cmp	r5, #12
 8015540:	bf38      	it	cc
 8015542:	250c      	movcc	r5, #12
 8015544:	2d00      	cmp	r5, #0
 8015546:	4606      	mov	r6, r0
 8015548:	db01      	blt.n	801554e <_malloc_r+0x1a>
 801554a:	42a9      	cmp	r1, r5
 801554c:	d903      	bls.n	8015556 <_malloc_r+0x22>
 801554e:	230c      	movs	r3, #12
 8015550:	6033      	str	r3, [r6, #0]
 8015552:	2000      	movs	r0, #0
 8015554:	bd70      	pop	{r4, r5, r6, pc}
 8015556:	f000 fd7f 	bl	8016058 <__malloc_lock>
 801555a:	4a23      	ldr	r2, [pc, #140]	; (80155e8 <_malloc_r+0xb4>)
 801555c:	6814      	ldr	r4, [r2, #0]
 801555e:	4621      	mov	r1, r4
 8015560:	b991      	cbnz	r1, 8015588 <_malloc_r+0x54>
 8015562:	4c22      	ldr	r4, [pc, #136]	; (80155ec <_malloc_r+0xb8>)
 8015564:	6823      	ldr	r3, [r4, #0]
 8015566:	b91b      	cbnz	r3, 8015570 <_malloc_r+0x3c>
 8015568:	4630      	mov	r0, r6
 801556a:	f000 fb17 	bl	8015b9c <_sbrk_r>
 801556e:	6020      	str	r0, [r4, #0]
 8015570:	4629      	mov	r1, r5
 8015572:	4630      	mov	r0, r6
 8015574:	f000 fb12 	bl	8015b9c <_sbrk_r>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d126      	bne.n	80155ca <_malloc_r+0x96>
 801557c:	230c      	movs	r3, #12
 801557e:	6033      	str	r3, [r6, #0]
 8015580:	4630      	mov	r0, r6
 8015582:	f000 fd6a 	bl	801605a <__malloc_unlock>
 8015586:	e7e4      	b.n	8015552 <_malloc_r+0x1e>
 8015588:	680b      	ldr	r3, [r1, #0]
 801558a:	1b5b      	subs	r3, r3, r5
 801558c:	d41a      	bmi.n	80155c4 <_malloc_r+0x90>
 801558e:	2b0b      	cmp	r3, #11
 8015590:	d90f      	bls.n	80155b2 <_malloc_r+0x7e>
 8015592:	600b      	str	r3, [r1, #0]
 8015594:	50cd      	str	r5, [r1, r3]
 8015596:	18cc      	adds	r4, r1, r3
 8015598:	4630      	mov	r0, r6
 801559a:	f000 fd5e 	bl	801605a <__malloc_unlock>
 801559e:	f104 000b 	add.w	r0, r4, #11
 80155a2:	1d23      	adds	r3, r4, #4
 80155a4:	f020 0007 	bic.w	r0, r0, #7
 80155a8:	1ac3      	subs	r3, r0, r3
 80155aa:	d01b      	beq.n	80155e4 <_malloc_r+0xb0>
 80155ac:	425a      	negs	r2, r3
 80155ae:	50e2      	str	r2, [r4, r3]
 80155b0:	bd70      	pop	{r4, r5, r6, pc}
 80155b2:	428c      	cmp	r4, r1
 80155b4:	bf0d      	iteet	eq
 80155b6:	6863      	ldreq	r3, [r4, #4]
 80155b8:	684b      	ldrne	r3, [r1, #4]
 80155ba:	6063      	strne	r3, [r4, #4]
 80155bc:	6013      	streq	r3, [r2, #0]
 80155be:	bf18      	it	ne
 80155c0:	460c      	movne	r4, r1
 80155c2:	e7e9      	b.n	8015598 <_malloc_r+0x64>
 80155c4:	460c      	mov	r4, r1
 80155c6:	6849      	ldr	r1, [r1, #4]
 80155c8:	e7ca      	b.n	8015560 <_malloc_r+0x2c>
 80155ca:	1cc4      	adds	r4, r0, #3
 80155cc:	f024 0403 	bic.w	r4, r4, #3
 80155d0:	42a0      	cmp	r0, r4
 80155d2:	d005      	beq.n	80155e0 <_malloc_r+0xac>
 80155d4:	1a21      	subs	r1, r4, r0
 80155d6:	4630      	mov	r0, r6
 80155d8:	f000 fae0 	bl	8015b9c <_sbrk_r>
 80155dc:	3001      	adds	r0, #1
 80155de:	d0cd      	beq.n	801557c <_malloc_r+0x48>
 80155e0:	6025      	str	r5, [r4, #0]
 80155e2:	e7d9      	b.n	8015598 <_malloc_r+0x64>
 80155e4:	bd70      	pop	{r4, r5, r6, pc}
 80155e6:	bf00      	nop
 80155e8:	200072a4 	.word	0x200072a4
 80155ec:	200072a8 	.word	0x200072a8

080155f0 <__sfputc_r>:
 80155f0:	6893      	ldr	r3, [r2, #8]
 80155f2:	3b01      	subs	r3, #1
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	b410      	push	{r4}
 80155f8:	6093      	str	r3, [r2, #8]
 80155fa:	da09      	bge.n	8015610 <__sfputc_r+0x20>
 80155fc:	6994      	ldr	r4, [r2, #24]
 80155fe:	42a3      	cmp	r3, r4
 8015600:	db02      	blt.n	8015608 <__sfputc_r+0x18>
 8015602:	b2cb      	uxtb	r3, r1
 8015604:	2b0a      	cmp	r3, #10
 8015606:	d103      	bne.n	8015610 <__sfputc_r+0x20>
 8015608:	f85d 4b04 	ldr.w	r4, [sp], #4
 801560c:	f000 bb1a 	b.w	8015c44 <__swbuf_r>
 8015610:	6813      	ldr	r3, [r2, #0]
 8015612:	1c58      	adds	r0, r3, #1
 8015614:	6010      	str	r0, [r2, #0]
 8015616:	7019      	strb	r1, [r3, #0]
 8015618:	b2c8      	uxtb	r0, r1
 801561a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801561e:	4770      	bx	lr

08015620 <__sfputs_r>:
 8015620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015622:	4606      	mov	r6, r0
 8015624:	460f      	mov	r7, r1
 8015626:	4614      	mov	r4, r2
 8015628:	18d5      	adds	r5, r2, r3
 801562a:	42ac      	cmp	r4, r5
 801562c:	d101      	bne.n	8015632 <__sfputs_r+0x12>
 801562e:	2000      	movs	r0, #0
 8015630:	e007      	b.n	8015642 <__sfputs_r+0x22>
 8015632:	463a      	mov	r2, r7
 8015634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015638:	4630      	mov	r0, r6
 801563a:	f7ff ffd9 	bl	80155f0 <__sfputc_r>
 801563e:	1c43      	adds	r3, r0, #1
 8015640:	d1f3      	bne.n	801562a <__sfputs_r+0xa>
 8015642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015644 <_vfiprintf_r>:
 8015644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015648:	b09d      	sub	sp, #116	; 0x74
 801564a:	460c      	mov	r4, r1
 801564c:	4617      	mov	r7, r2
 801564e:	9303      	str	r3, [sp, #12]
 8015650:	4606      	mov	r6, r0
 8015652:	b118      	cbz	r0, 801565c <_vfiprintf_r+0x18>
 8015654:	6983      	ldr	r3, [r0, #24]
 8015656:	b90b      	cbnz	r3, 801565c <_vfiprintf_r+0x18>
 8015658:	f7ff fe8c 	bl	8015374 <__sinit>
 801565c:	4b7c      	ldr	r3, [pc, #496]	; (8015850 <_vfiprintf_r+0x20c>)
 801565e:	429c      	cmp	r4, r3
 8015660:	d157      	bne.n	8015712 <_vfiprintf_r+0xce>
 8015662:	6874      	ldr	r4, [r6, #4]
 8015664:	89a3      	ldrh	r3, [r4, #12]
 8015666:	0718      	lsls	r0, r3, #28
 8015668:	d55d      	bpl.n	8015726 <_vfiprintf_r+0xe2>
 801566a:	6923      	ldr	r3, [r4, #16]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d05a      	beq.n	8015726 <_vfiprintf_r+0xe2>
 8015670:	2300      	movs	r3, #0
 8015672:	9309      	str	r3, [sp, #36]	; 0x24
 8015674:	2320      	movs	r3, #32
 8015676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801567a:	2330      	movs	r3, #48	; 0x30
 801567c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015680:	f04f 0b01 	mov.w	fp, #1
 8015684:	46b8      	mov	r8, r7
 8015686:	4645      	mov	r5, r8
 8015688:	f815 3b01 	ldrb.w	r3, [r5], #1
 801568c:	2b00      	cmp	r3, #0
 801568e:	d155      	bne.n	801573c <_vfiprintf_r+0xf8>
 8015690:	ebb8 0a07 	subs.w	sl, r8, r7
 8015694:	d00b      	beq.n	80156ae <_vfiprintf_r+0x6a>
 8015696:	4653      	mov	r3, sl
 8015698:	463a      	mov	r2, r7
 801569a:	4621      	mov	r1, r4
 801569c:	4630      	mov	r0, r6
 801569e:	f7ff ffbf 	bl	8015620 <__sfputs_r>
 80156a2:	3001      	adds	r0, #1
 80156a4:	f000 80c4 	beq.w	8015830 <_vfiprintf_r+0x1ec>
 80156a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156aa:	4453      	add	r3, sl
 80156ac:	9309      	str	r3, [sp, #36]	; 0x24
 80156ae:	f898 3000 	ldrb.w	r3, [r8]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	f000 80bc 	beq.w	8015830 <_vfiprintf_r+0x1ec>
 80156b8:	2300      	movs	r3, #0
 80156ba:	f04f 32ff 	mov.w	r2, #4294967295
 80156be:	9304      	str	r3, [sp, #16]
 80156c0:	9307      	str	r3, [sp, #28]
 80156c2:	9205      	str	r2, [sp, #20]
 80156c4:	9306      	str	r3, [sp, #24]
 80156c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156ca:	931a      	str	r3, [sp, #104]	; 0x68
 80156cc:	2205      	movs	r2, #5
 80156ce:	7829      	ldrb	r1, [r5, #0]
 80156d0:	4860      	ldr	r0, [pc, #384]	; (8015854 <_vfiprintf_r+0x210>)
 80156d2:	f7ea fdcd 	bl	8000270 <memchr>
 80156d6:	f105 0801 	add.w	r8, r5, #1
 80156da:	9b04      	ldr	r3, [sp, #16]
 80156dc:	2800      	cmp	r0, #0
 80156de:	d131      	bne.n	8015744 <_vfiprintf_r+0x100>
 80156e0:	06d9      	lsls	r1, r3, #27
 80156e2:	bf44      	itt	mi
 80156e4:	2220      	movmi	r2, #32
 80156e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156ea:	071a      	lsls	r2, r3, #28
 80156ec:	bf44      	itt	mi
 80156ee:	222b      	movmi	r2, #43	; 0x2b
 80156f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156f4:	782a      	ldrb	r2, [r5, #0]
 80156f6:	2a2a      	cmp	r2, #42	; 0x2a
 80156f8:	d02c      	beq.n	8015754 <_vfiprintf_r+0x110>
 80156fa:	9a07      	ldr	r2, [sp, #28]
 80156fc:	2100      	movs	r1, #0
 80156fe:	200a      	movs	r0, #10
 8015700:	46a8      	mov	r8, r5
 8015702:	3501      	adds	r5, #1
 8015704:	f898 3000 	ldrb.w	r3, [r8]
 8015708:	3b30      	subs	r3, #48	; 0x30
 801570a:	2b09      	cmp	r3, #9
 801570c:	d96d      	bls.n	80157ea <_vfiprintf_r+0x1a6>
 801570e:	b371      	cbz	r1, 801576e <_vfiprintf_r+0x12a>
 8015710:	e026      	b.n	8015760 <_vfiprintf_r+0x11c>
 8015712:	4b51      	ldr	r3, [pc, #324]	; (8015858 <_vfiprintf_r+0x214>)
 8015714:	429c      	cmp	r4, r3
 8015716:	d101      	bne.n	801571c <_vfiprintf_r+0xd8>
 8015718:	68b4      	ldr	r4, [r6, #8]
 801571a:	e7a3      	b.n	8015664 <_vfiprintf_r+0x20>
 801571c:	4b4f      	ldr	r3, [pc, #316]	; (801585c <_vfiprintf_r+0x218>)
 801571e:	429c      	cmp	r4, r3
 8015720:	bf08      	it	eq
 8015722:	68f4      	ldreq	r4, [r6, #12]
 8015724:	e79e      	b.n	8015664 <_vfiprintf_r+0x20>
 8015726:	4621      	mov	r1, r4
 8015728:	4630      	mov	r0, r6
 801572a:	f000 faef 	bl	8015d0c <__swsetup_r>
 801572e:	2800      	cmp	r0, #0
 8015730:	d09e      	beq.n	8015670 <_vfiprintf_r+0x2c>
 8015732:	f04f 30ff 	mov.w	r0, #4294967295
 8015736:	b01d      	add	sp, #116	; 0x74
 8015738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801573c:	2b25      	cmp	r3, #37	; 0x25
 801573e:	d0a7      	beq.n	8015690 <_vfiprintf_r+0x4c>
 8015740:	46a8      	mov	r8, r5
 8015742:	e7a0      	b.n	8015686 <_vfiprintf_r+0x42>
 8015744:	4a43      	ldr	r2, [pc, #268]	; (8015854 <_vfiprintf_r+0x210>)
 8015746:	1a80      	subs	r0, r0, r2
 8015748:	fa0b f000 	lsl.w	r0, fp, r0
 801574c:	4318      	orrs	r0, r3
 801574e:	9004      	str	r0, [sp, #16]
 8015750:	4645      	mov	r5, r8
 8015752:	e7bb      	b.n	80156cc <_vfiprintf_r+0x88>
 8015754:	9a03      	ldr	r2, [sp, #12]
 8015756:	1d11      	adds	r1, r2, #4
 8015758:	6812      	ldr	r2, [r2, #0]
 801575a:	9103      	str	r1, [sp, #12]
 801575c:	2a00      	cmp	r2, #0
 801575e:	db01      	blt.n	8015764 <_vfiprintf_r+0x120>
 8015760:	9207      	str	r2, [sp, #28]
 8015762:	e004      	b.n	801576e <_vfiprintf_r+0x12a>
 8015764:	4252      	negs	r2, r2
 8015766:	f043 0302 	orr.w	r3, r3, #2
 801576a:	9207      	str	r2, [sp, #28]
 801576c:	9304      	str	r3, [sp, #16]
 801576e:	f898 3000 	ldrb.w	r3, [r8]
 8015772:	2b2e      	cmp	r3, #46	; 0x2e
 8015774:	d110      	bne.n	8015798 <_vfiprintf_r+0x154>
 8015776:	f898 3001 	ldrb.w	r3, [r8, #1]
 801577a:	2b2a      	cmp	r3, #42	; 0x2a
 801577c:	f108 0101 	add.w	r1, r8, #1
 8015780:	d137      	bne.n	80157f2 <_vfiprintf_r+0x1ae>
 8015782:	9b03      	ldr	r3, [sp, #12]
 8015784:	1d1a      	adds	r2, r3, #4
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	9203      	str	r2, [sp, #12]
 801578a:	2b00      	cmp	r3, #0
 801578c:	bfb8      	it	lt
 801578e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015792:	f108 0802 	add.w	r8, r8, #2
 8015796:	9305      	str	r3, [sp, #20]
 8015798:	4d31      	ldr	r5, [pc, #196]	; (8015860 <_vfiprintf_r+0x21c>)
 801579a:	f898 1000 	ldrb.w	r1, [r8]
 801579e:	2203      	movs	r2, #3
 80157a0:	4628      	mov	r0, r5
 80157a2:	f7ea fd65 	bl	8000270 <memchr>
 80157a6:	b140      	cbz	r0, 80157ba <_vfiprintf_r+0x176>
 80157a8:	2340      	movs	r3, #64	; 0x40
 80157aa:	1b40      	subs	r0, r0, r5
 80157ac:	fa03 f000 	lsl.w	r0, r3, r0
 80157b0:	9b04      	ldr	r3, [sp, #16]
 80157b2:	4303      	orrs	r3, r0
 80157b4:	9304      	str	r3, [sp, #16]
 80157b6:	f108 0801 	add.w	r8, r8, #1
 80157ba:	f898 1000 	ldrb.w	r1, [r8]
 80157be:	4829      	ldr	r0, [pc, #164]	; (8015864 <_vfiprintf_r+0x220>)
 80157c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157c4:	2206      	movs	r2, #6
 80157c6:	f108 0701 	add.w	r7, r8, #1
 80157ca:	f7ea fd51 	bl	8000270 <memchr>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d034      	beq.n	801583c <_vfiprintf_r+0x1f8>
 80157d2:	4b25      	ldr	r3, [pc, #148]	; (8015868 <_vfiprintf_r+0x224>)
 80157d4:	bb03      	cbnz	r3, 8015818 <_vfiprintf_r+0x1d4>
 80157d6:	9b03      	ldr	r3, [sp, #12]
 80157d8:	3307      	adds	r3, #7
 80157da:	f023 0307 	bic.w	r3, r3, #7
 80157de:	3308      	adds	r3, #8
 80157e0:	9303      	str	r3, [sp, #12]
 80157e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e4:	444b      	add	r3, r9
 80157e6:	9309      	str	r3, [sp, #36]	; 0x24
 80157e8:	e74c      	b.n	8015684 <_vfiprintf_r+0x40>
 80157ea:	fb00 3202 	mla	r2, r0, r2, r3
 80157ee:	2101      	movs	r1, #1
 80157f0:	e786      	b.n	8015700 <_vfiprintf_r+0xbc>
 80157f2:	2300      	movs	r3, #0
 80157f4:	9305      	str	r3, [sp, #20]
 80157f6:	4618      	mov	r0, r3
 80157f8:	250a      	movs	r5, #10
 80157fa:	4688      	mov	r8, r1
 80157fc:	3101      	adds	r1, #1
 80157fe:	f898 2000 	ldrb.w	r2, [r8]
 8015802:	3a30      	subs	r2, #48	; 0x30
 8015804:	2a09      	cmp	r2, #9
 8015806:	d903      	bls.n	8015810 <_vfiprintf_r+0x1cc>
 8015808:	2b00      	cmp	r3, #0
 801580a:	d0c5      	beq.n	8015798 <_vfiprintf_r+0x154>
 801580c:	9005      	str	r0, [sp, #20]
 801580e:	e7c3      	b.n	8015798 <_vfiprintf_r+0x154>
 8015810:	fb05 2000 	mla	r0, r5, r0, r2
 8015814:	2301      	movs	r3, #1
 8015816:	e7f0      	b.n	80157fa <_vfiprintf_r+0x1b6>
 8015818:	ab03      	add	r3, sp, #12
 801581a:	9300      	str	r3, [sp, #0]
 801581c:	4622      	mov	r2, r4
 801581e:	4b13      	ldr	r3, [pc, #76]	; (801586c <_vfiprintf_r+0x228>)
 8015820:	a904      	add	r1, sp, #16
 8015822:	4630      	mov	r0, r6
 8015824:	f3af 8000 	nop.w
 8015828:	f1b0 3fff 	cmp.w	r0, #4294967295
 801582c:	4681      	mov	r9, r0
 801582e:	d1d8      	bne.n	80157e2 <_vfiprintf_r+0x19e>
 8015830:	89a3      	ldrh	r3, [r4, #12]
 8015832:	065b      	lsls	r3, r3, #25
 8015834:	f53f af7d 	bmi.w	8015732 <_vfiprintf_r+0xee>
 8015838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801583a:	e77c      	b.n	8015736 <_vfiprintf_r+0xf2>
 801583c:	ab03      	add	r3, sp, #12
 801583e:	9300      	str	r3, [sp, #0]
 8015840:	4622      	mov	r2, r4
 8015842:	4b0a      	ldr	r3, [pc, #40]	; (801586c <_vfiprintf_r+0x228>)
 8015844:	a904      	add	r1, sp, #16
 8015846:	4630      	mov	r0, r6
 8015848:	f000 f888 	bl	801595c <_printf_i>
 801584c:	e7ec      	b.n	8015828 <_vfiprintf_r+0x1e4>
 801584e:	bf00      	nop
 8015850:	08019eac 	.word	0x08019eac
 8015854:	08019ef0 	.word	0x08019ef0
 8015858:	08019ecc 	.word	0x08019ecc
 801585c:	08019e8c 	.word	0x08019e8c
 8015860:	08019ef6 	.word	0x08019ef6
 8015864:	08019efa 	.word	0x08019efa
 8015868:	00000000 	.word	0x00000000
 801586c:	08015621 	.word	0x08015621

08015870 <_printf_common>:
 8015870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015874:	4691      	mov	r9, r2
 8015876:	461f      	mov	r7, r3
 8015878:	688a      	ldr	r2, [r1, #8]
 801587a:	690b      	ldr	r3, [r1, #16]
 801587c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015880:	4293      	cmp	r3, r2
 8015882:	bfb8      	it	lt
 8015884:	4613      	movlt	r3, r2
 8015886:	f8c9 3000 	str.w	r3, [r9]
 801588a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801588e:	4606      	mov	r6, r0
 8015890:	460c      	mov	r4, r1
 8015892:	b112      	cbz	r2, 801589a <_printf_common+0x2a>
 8015894:	3301      	adds	r3, #1
 8015896:	f8c9 3000 	str.w	r3, [r9]
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	0699      	lsls	r1, r3, #26
 801589e:	bf42      	ittt	mi
 80158a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80158a4:	3302      	addmi	r3, #2
 80158a6:	f8c9 3000 	strmi.w	r3, [r9]
 80158aa:	6825      	ldr	r5, [r4, #0]
 80158ac:	f015 0506 	ands.w	r5, r5, #6
 80158b0:	d107      	bne.n	80158c2 <_printf_common+0x52>
 80158b2:	f104 0a19 	add.w	sl, r4, #25
 80158b6:	68e3      	ldr	r3, [r4, #12]
 80158b8:	f8d9 2000 	ldr.w	r2, [r9]
 80158bc:	1a9b      	subs	r3, r3, r2
 80158be:	429d      	cmp	r5, r3
 80158c0:	db29      	blt.n	8015916 <_printf_common+0xa6>
 80158c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80158c6:	6822      	ldr	r2, [r4, #0]
 80158c8:	3300      	adds	r3, #0
 80158ca:	bf18      	it	ne
 80158cc:	2301      	movne	r3, #1
 80158ce:	0692      	lsls	r2, r2, #26
 80158d0:	d42e      	bmi.n	8015930 <_printf_common+0xc0>
 80158d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158d6:	4639      	mov	r1, r7
 80158d8:	4630      	mov	r0, r6
 80158da:	47c0      	blx	r8
 80158dc:	3001      	adds	r0, #1
 80158de:	d021      	beq.n	8015924 <_printf_common+0xb4>
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	68e5      	ldr	r5, [r4, #12]
 80158e4:	f8d9 2000 	ldr.w	r2, [r9]
 80158e8:	f003 0306 	and.w	r3, r3, #6
 80158ec:	2b04      	cmp	r3, #4
 80158ee:	bf08      	it	eq
 80158f0:	1aad      	subeq	r5, r5, r2
 80158f2:	68a3      	ldr	r3, [r4, #8]
 80158f4:	6922      	ldr	r2, [r4, #16]
 80158f6:	bf0c      	ite	eq
 80158f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158fc:	2500      	movne	r5, #0
 80158fe:	4293      	cmp	r3, r2
 8015900:	bfc4      	itt	gt
 8015902:	1a9b      	subgt	r3, r3, r2
 8015904:	18ed      	addgt	r5, r5, r3
 8015906:	f04f 0900 	mov.w	r9, #0
 801590a:	341a      	adds	r4, #26
 801590c:	454d      	cmp	r5, r9
 801590e:	d11b      	bne.n	8015948 <_printf_common+0xd8>
 8015910:	2000      	movs	r0, #0
 8015912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015916:	2301      	movs	r3, #1
 8015918:	4652      	mov	r2, sl
 801591a:	4639      	mov	r1, r7
 801591c:	4630      	mov	r0, r6
 801591e:	47c0      	blx	r8
 8015920:	3001      	adds	r0, #1
 8015922:	d103      	bne.n	801592c <_printf_common+0xbc>
 8015924:	f04f 30ff 	mov.w	r0, #4294967295
 8015928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801592c:	3501      	adds	r5, #1
 801592e:	e7c2      	b.n	80158b6 <_printf_common+0x46>
 8015930:	18e1      	adds	r1, r4, r3
 8015932:	1c5a      	adds	r2, r3, #1
 8015934:	2030      	movs	r0, #48	; 0x30
 8015936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801593a:	4422      	add	r2, r4
 801593c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015944:	3302      	adds	r3, #2
 8015946:	e7c4      	b.n	80158d2 <_printf_common+0x62>
 8015948:	2301      	movs	r3, #1
 801594a:	4622      	mov	r2, r4
 801594c:	4639      	mov	r1, r7
 801594e:	4630      	mov	r0, r6
 8015950:	47c0      	blx	r8
 8015952:	3001      	adds	r0, #1
 8015954:	d0e6      	beq.n	8015924 <_printf_common+0xb4>
 8015956:	f109 0901 	add.w	r9, r9, #1
 801595a:	e7d7      	b.n	801590c <_printf_common+0x9c>

0801595c <_printf_i>:
 801595c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015960:	4617      	mov	r7, r2
 8015962:	7e0a      	ldrb	r2, [r1, #24]
 8015964:	b085      	sub	sp, #20
 8015966:	2a6e      	cmp	r2, #110	; 0x6e
 8015968:	4698      	mov	r8, r3
 801596a:	4606      	mov	r6, r0
 801596c:	460c      	mov	r4, r1
 801596e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015970:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8015974:	f000 80bc 	beq.w	8015af0 <_printf_i+0x194>
 8015978:	d81a      	bhi.n	80159b0 <_printf_i+0x54>
 801597a:	2a63      	cmp	r2, #99	; 0x63
 801597c:	d02e      	beq.n	80159dc <_printf_i+0x80>
 801597e:	d80a      	bhi.n	8015996 <_printf_i+0x3a>
 8015980:	2a00      	cmp	r2, #0
 8015982:	f000 80c8 	beq.w	8015b16 <_printf_i+0x1ba>
 8015986:	2a58      	cmp	r2, #88	; 0x58
 8015988:	f000 808a 	beq.w	8015aa0 <_printf_i+0x144>
 801598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015990:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8015994:	e02a      	b.n	80159ec <_printf_i+0x90>
 8015996:	2a64      	cmp	r2, #100	; 0x64
 8015998:	d001      	beq.n	801599e <_printf_i+0x42>
 801599a:	2a69      	cmp	r2, #105	; 0x69
 801599c:	d1f6      	bne.n	801598c <_printf_i+0x30>
 801599e:	6821      	ldr	r1, [r4, #0]
 80159a0:	681a      	ldr	r2, [r3, #0]
 80159a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80159a6:	d023      	beq.n	80159f0 <_printf_i+0x94>
 80159a8:	1d11      	adds	r1, r2, #4
 80159aa:	6019      	str	r1, [r3, #0]
 80159ac:	6813      	ldr	r3, [r2, #0]
 80159ae:	e027      	b.n	8015a00 <_printf_i+0xa4>
 80159b0:	2a73      	cmp	r2, #115	; 0x73
 80159b2:	f000 80b4 	beq.w	8015b1e <_printf_i+0x1c2>
 80159b6:	d808      	bhi.n	80159ca <_printf_i+0x6e>
 80159b8:	2a6f      	cmp	r2, #111	; 0x6f
 80159ba:	d02a      	beq.n	8015a12 <_printf_i+0xb6>
 80159bc:	2a70      	cmp	r2, #112	; 0x70
 80159be:	d1e5      	bne.n	801598c <_printf_i+0x30>
 80159c0:	680a      	ldr	r2, [r1, #0]
 80159c2:	f042 0220 	orr.w	r2, r2, #32
 80159c6:	600a      	str	r2, [r1, #0]
 80159c8:	e003      	b.n	80159d2 <_printf_i+0x76>
 80159ca:	2a75      	cmp	r2, #117	; 0x75
 80159cc:	d021      	beq.n	8015a12 <_printf_i+0xb6>
 80159ce:	2a78      	cmp	r2, #120	; 0x78
 80159d0:	d1dc      	bne.n	801598c <_printf_i+0x30>
 80159d2:	2278      	movs	r2, #120	; 0x78
 80159d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80159d8:	496e      	ldr	r1, [pc, #440]	; (8015b94 <_printf_i+0x238>)
 80159da:	e064      	b.n	8015aa6 <_printf_i+0x14a>
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80159e2:	1d11      	adds	r1, r2, #4
 80159e4:	6019      	str	r1, [r3, #0]
 80159e6:	6813      	ldr	r3, [r2, #0]
 80159e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159ec:	2301      	movs	r3, #1
 80159ee:	e0a3      	b.n	8015b38 <_printf_i+0x1dc>
 80159f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80159f4:	f102 0104 	add.w	r1, r2, #4
 80159f8:	6019      	str	r1, [r3, #0]
 80159fa:	d0d7      	beq.n	80159ac <_printf_i+0x50>
 80159fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	da03      	bge.n	8015a0c <_printf_i+0xb0>
 8015a04:	222d      	movs	r2, #45	; 0x2d
 8015a06:	425b      	negs	r3, r3
 8015a08:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015a0c:	4962      	ldr	r1, [pc, #392]	; (8015b98 <_printf_i+0x23c>)
 8015a0e:	220a      	movs	r2, #10
 8015a10:	e017      	b.n	8015a42 <_printf_i+0xe6>
 8015a12:	6820      	ldr	r0, [r4, #0]
 8015a14:	6819      	ldr	r1, [r3, #0]
 8015a16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015a1a:	d003      	beq.n	8015a24 <_printf_i+0xc8>
 8015a1c:	1d08      	adds	r0, r1, #4
 8015a1e:	6018      	str	r0, [r3, #0]
 8015a20:	680b      	ldr	r3, [r1, #0]
 8015a22:	e006      	b.n	8015a32 <_printf_i+0xd6>
 8015a24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a28:	f101 0004 	add.w	r0, r1, #4
 8015a2c:	6018      	str	r0, [r3, #0]
 8015a2e:	d0f7      	beq.n	8015a20 <_printf_i+0xc4>
 8015a30:	880b      	ldrh	r3, [r1, #0]
 8015a32:	4959      	ldr	r1, [pc, #356]	; (8015b98 <_printf_i+0x23c>)
 8015a34:	2a6f      	cmp	r2, #111	; 0x6f
 8015a36:	bf14      	ite	ne
 8015a38:	220a      	movne	r2, #10
 8015a3a:	2208      	moveq	r2, #8
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8015a42:	6865      	ldr	r5, [r4, #4]
 8015a44:	60a5      	str	r5, [r4, #8]
 8015a46:	2d00      	cmp	r5, #0
 8015a48:	f2c0 809c 	blt.w	8015b84 <_printf_i+0x228>
 8015a4c:	6820      	ldr	r0, [r4, #0]
 8015a4e:	f020 0004 	bic.w	r0, r0, #4
 8015a52:	6020      	str	r0, [r4, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d13f      	bne.n	8015ad8 <_printf_i+0x17c>
 8015a58:	2d00      	cmp	r5, #0
 8015a5a:	f040 8095 	bne.w	8015b88 <_printf_i+0x22c>
 8015a5e:	4675      	mov	r5, lr
 8015a60:	2a08      	cmp	r2, #8
 8015a62:	d10b      	bne.n	8015a7c <_printf_i+0x120>
 8015a64:	6823      	ldr	r3, [r4, #0]
 8015a66:	07da      	lsls	r2, r3, #31
 8015a68:	d508      	bpl.n	8015a7c <_printf_i+0x120>
 8015a6a:	6923      	ldr	r3, [r4, #16]
 8015a6c:	6862      	ldr	r2, [r4, #4]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	bfde      	ittt	le
 8015a72:	2330      	movle	r3, #48	; 0x30
 8015a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a7c:	ebae 0305 	sub.w	r3, lr, r5
 8015a80:	6123      	str	r3, [r4, #16]
 8015a82:	f8cd 8000 	str.w	r8, [sp]
 8015a86:	463b      	mov	r3, r7
 8015a88:	aa03      	add	r2, sp, #12
 8015a8a:	4621      	mov	r1, r4
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f7ff feef 	bl	8015870 <_printf_common>
 8015a92:	3001      	adds	r0, #1
 8015a94:	d155      	bne.n	8015b42 <_printf_i+0x1e6>
 8015a96:	f04f 30ff 	mov.w	r0, #4294967295
 8015a9a:	b005      	add	sp, #20
 8015a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aa0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8015aa4:	493c      	ldr	r1, [pc, #240]	; (8015b98 <_printf_i+0x23c>)
 8015aa6:	6822      	ldr	r2, [r4, #0]
 8015aa8:	6818      	ldr	r0, [r3, #0]
 8015aaa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8015aae:	f100 0504 	add.w	r5, r0, #4
 8015ab2:	601d      	str	r5, [r3, #0]
 8015ab4:	d001      	beq.n	8015aba <_printf_i+0x15e>
 8015ab6:	6803      	ldr	r3, [r0, #0]
 8015ab8:	e002      	b.n	8015ac0 <_printf_i+0x164>
 8015aba:	0655      	lsls	r5, r2, #25
 8015abc:	d5fb      	bpl.n	8015ab6 <_printf_i+0x15a>
 8015abe:	8803      	ldrh	r3, [r0, #0]
 8015ac0:	07d0      	lsls	r0, r2, #31
 8015ac2:	bf44      	itt	mi
 8015ac4:	f042 0220 	orrmi.w	r2, r2, #32
 8015ac8:	6022      	strmi	r2, [r4, #0]
 8015aca:	b91b      	cbnz	r3, 8015ad4 <_printf_i+0x178>
 8015acc:	6822      	ldr	r2, [r4, #0]
 8015ace:	f022 0220 	bic.w	r2, r2, #32
 8015ad2:	6022      	str	r2, [r4, #0]
 8015ad4:	2210      	movs	r2, #16
 8015ad6:	e7b1      	b.n	8015a3c <_printf_i+0xe0>
 8015ad8:	4675      	mov	r5, lr
 8015ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8015ade:	fb02 3310 	mls	r3, r2, r0, r3
 8015ae2:	5ccb      	ldrb	r3, [r1, r3]
 8015ae4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d1f5      	bne.n	8015ada <_printf_i+0x17e>
 8015aee:	e7b7      	b.n	8015a60 <_printf_i+0x104>
 8015af0:	6808      	ldr	r0, [r1, #0]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	6949      	ldr	r1, [r1, #20]
 8015af6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015afa:	d004      	beq.n	8015b06 <_printf_i+0x1aa>
 8015afc:	1d10      	adds	r0, r2, #4
 8015afe:	6018      	str	r0, [r3, #0]
 8015b00:	6813      	ldr	r3, [r2, #0]
 8015b02:	6019      	str	r1, [r3, #0]
 8015b04:	e007      	b.n	8015b16 <_printf_i+0x1ba>
 8015b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015b0a:	f102 0004 	add.w	r0, r2, #4
 8015b0e:	6018      	str	r0, [r3, #0]
 8015b10:	6813      	ldr	r3, [r2, #0]
 8015b12:	d0f6      	beq.n	8015b02 <_printf_i+0x1a6>
 8015b14:	8019      	strh	r1, [r3, #0]
 8015b16:	2300      	movs	r3, #0
 8015b18:	6123      	str	r3, [r4, #16]
 8015b1a:	4675      	mov	r5, lr
 8015b1c:	e7b1      	b.n	8015a82 <_printf_i+0x126>
 8015b1e:	681a      	ldr	r2, [r3, #0]
 8015b20:	1d11      	adds	r1, r2, #4
 8015b22:	6019      	str	r1, [r3, #0]
 8015b24:	6815      	ldr	r5, [r2, #0]
 8015b26:	6862      	ldr	r2, [r4, #4]
 8015b28:	2100      	movs	r1, #0
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7ea fba0 	bl	8000270 <memchr>
 8015b30:	b108      	cbz	r0, 8015b36 <_printf_i+0x1da>
 8015b32:	1b40      	subs	r0, r0, r5
 8015b34:	6060      	str	r0, [r4, #4]
 8015b36:	6863      	ldr	r3, [r4, #4]
 8015b38:	6123      	str	r3, [r4, #16]
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b40:	e79f      	b.n	8015a82 <_printf_i+0x126>
 8015b42:	6923      	ldr	r3, [r4, #16]
 8015b44:	462a      	mov	r2, r5
 8015b46:	4639      	mov	r1, r7
 8015b48:	4630      	mov	r0, r6
 8015b4a:	47c0      	blx	r8
 8015b4c:	3001      	adds	r0, #1
 8015b4e:	d0a2      	beq.n	8015a96 <_printf_i+0x13a>
 8015b50:	6823      	ldr	r3, [r4, #0]
 8015b52:	079b      	lsls	r3, r3, #30
 8015b54:	d507      	bpl.n	8015b66 <_printf_i+0x20a>
 8015b56:	2500      	movs	r5, #0
 8015b58:	f104 0919 	add.w	r9, r4, #25
 8015b5c:	68e3      	ldr	r3, [r4, #12]
 8015b5e:	9a03      	ldr	r2, [sp, #12]
 8015b60:	1a9b      	subs	r3, r3, r2
 8015b62:	429d      	cmp	r5, r3
 8015b64:	db05      	blt.n	8015b72 <_printf_i+0x216>
 8015b66:	68e0      	ldr	r0, [r4, #12]
 8015b68:	9b03      	ldr	r3, [sp, #12]
 8015b6a:	4298      	cmp	r0, r3
 8015b6c:	bfb8      	it	lt
 8015b6e:	4618      	movlt	r0, r3
 8015b70:	e793      	b.n	8015a9a <_printf_i+0x13e>
 8015b72:	2301      	movs	r3, #1
 8015b74:	464a      	mov	r2, r9
 8015b76:	4639      	mov	r1, r7
 8015b78:	4630      	mov	r0, r6
 8015b7a:	47c0      	blx	r8
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	d08a      	beq.n	8015a96 <_printf_i+0x13a>
 8015b80:	3501      	adds	r5, #1
 8015b82:	e7eb      	b.n	8015b5c <_printf_i+0x200>
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d1a7      	bne.n	8015ad8 <_printf_i+0x17c>
 8015b88:	780b      	ldrb	r3, [r1, #0]
 8015b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b92:	e765      	b.n	8015a60 <_printf_i+0x104>
 8015b94:	08019f12 	.word	0x08019f12
 8015b98:	08019f01 	.word	0x08019f01

08015b9c <_sbrk_r>:
 8015b9c:	b538      	push	{r3, r4, r5, lr}
 8015b9e:	4c06      	ldr	r4, [pc, #24]	; (8015bb8 <_sbrk_r+0x1c>)
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	4605      	mov	r5, r0
 8015ba4:	4608      	mov	r0, r1
 8015ba6:	6023      	str	r3, [r4, #0]
 8015ba8:	f7eb f9f8 	bl	8000f9c <_sbrk>
 8015bac:	1c43      	adds	r3, r0, #1
 8015bae:	d102      	bne.n	8015bb6 <_sbrk_r+0x1a>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	b103      	cbz	r3, 8015bb6 <_sbrk_r+0x1a>
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	bd38      	pop	{r3, r4, r5, pc}
 8015bb8:	2000af0c 	.word	0x2000af0c

08015bbc <__sread>:
 8015bbc:	b510      	push	{r4, lr}
 8015bbe:	460c      	mov	r4, r1
 8015bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bc4:	f000 fa4a 	bl	801605c <_read_r>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	bfab      	itete	ge
 8015bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bce:	89a3      	ldrhlt	r3, [r4, #12]
 8015bd0:	181b      	addge	r3, r3, r0
 8015bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bd6:	bfac      	ite	ge
 8015bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015bda:	81a3      	strhlt	r3, [r4, #12]
 8015bdc:	bd10      	pop	{r4, pc}

08015bde <__swrite>:
 8015bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be2:	461f      	mov	r7, r3
 8015be4:	898b      	ldrh	r3, [r1, #12]
 8015be6:	05db      	lsls	r3, r3, #23
 8015be8:	4605      	mov	r5, r0
 8015bea:	460c      	mov	r4, r1
 8015bec:	4616      	mov	r6, r2
 8015bee:	d505      	bpl.n	8015bfc <__swrite+0x1e>
 8015bf0:	2302      	movs	r3, #2
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf8:	f000 f9b8 	bl	8015f6c <_lseek_r>
 8015bfc:	89a3      	ldrh	r3, [r4, #12]
 8015bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c06:	81a3      	strh	r3, [r4, #12]
 8015c08:	4632      	mov	r2, r6
 8015c0a:	463b      	mov	r3, r7
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c12:	f000 b869 	b.w	8015ce8 <_write_r>

08015c16 <__sseek>:
 8015c16:	b510      	push	{r4, lr}
 8015c18:	460c      	mov	r4, r1
 8015c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c1e:	f000 f9a5 	bl	8015f6c <_lseek_r>
 8015c22:	1c43      	adds	r3, r0, #1
 8015c24:	89a3      	ldrh	r3, [r4, #12]
 8015c26:	bf15      	itete	ne
 8015c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c32:	81a3      	strheq	r3, [r4, #12]
 8015c34:	bf18      	it	ne
 8015c36:	81a3      	strhne	r3, [r4, #12]
 8015c38:	bd10      	pop	{r4, pc}

08015c3a <__sclose>:
 8015c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c3e:	f000 b8d3 	b.w	8015de8 <_close_r>
	...

08015c44 <__swbuf_r>:
 8015c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c46:	460e      	mov	r6, r1
 8015c48:	4614      	mov	r4, r2
 8015c4a:	4605      	mov	r5, r0
 8015c4c:	b118      	cbz	r0, 8015c56 <__swbuf_r+0x12>
 8015c4e:	6983      	ldr	r3, [r0, #24]
 8015c50:	b90b      	cbnz	r3, 8015c56 <__swbuf_r+0x12>
 8015c52:	f7ff fb8f 	bl	8015374 <__sinit>
 8015c56:	4b21      	ldr	r3, [pc, #132]	; (8015cdc <__swbuf_r+0x98>)
 8015c58:	429c      	cmp	r4, r3
 8015c5a:	d12a      	bne.n	8015cb2 <__swbuf_r+0x6e>
 8015c5c:	686c      	ldr	r4, [r5, #4]
 8015c5e:	69a3      	ldr	r3, [r4, #24]
 8015c60:	60a3      	str	r3, [r4, #8]
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	071a      	lsls	r2, r3, #28
 8015c66:	d52e      	bpl.n	8015cc6 <__swbuf_r+0x82>
 8015c68:	6923      	ldr	r3, [r4, #16]
 8015c6a:	b363      	cbz	r3, 8015cc6 <__swbuf_r+0x82>
 8015c6c:	6923      	ldr	r3, [r4, #16]
 8015c6e:	6820      	ldr	r0, [r4, #0]
 8015c70:	1ac0      	subs	r0, r0, r3
 8015c72:	6963      	ldr	r3, [r4, #20]
 8015c74:	b2f6      	uxtb	r6, r6
 8015c76:	4298      	cmp	r0, r3
 8015c78:	4637      	mov	r7, r6
 8015c7a:	db04      	blt.n	8015c86 <__swbuf_r+0x42>
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f000 f94a 	bl	8015f18 <_fflush_r>
 8015c84:	bb28      	cbnz	r0, 8015cd2 <__swbuf_r+0x8e>
 8015c86:	68a3      	ldr	r3, [r4, #8]
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	60a3      	str	r3, [r4, #8]
 8015c8c:	6823      	ldr	r3, [r4, #0]
 8015c8e:	1c5a      	adds	r2, r3, #1
 8015c90:	6022      	str	r2, [r4, #0]
 8015c92:	701e      	strb	r6, [r3, #0]
 8015c94:	6963      	ldr	r3, [r4, #20]
 8015c96:	3001      	adds	r0, #1
 8015c98:	4298      	cmp	r0, r3
 8015c9a:	d004      	beq.n	8015ca6 <__swbuf_r+0x62>
 8015c9c:	89a3      	ldrh	r3, [r4, #12]
 8015c9e:	07db      	lsls	r3, r3, #31
 8015ca0:	d519      	bpl.n	8015cd6 <__swbuf_r+0x92>
 8015ca2:	2e0a      	cmp	r6, #10
 8015ca4:	d117      	bne.n	8015cd6 <__swbuf_r+0x92>
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	4628      	mov	r0, r5
 8015caa:	f000 f935 	bl	8015f18 <_fflush_r>
 8015cae:	b190      	cbz	r0, 8015cd6 <__swbuf_r+0x92>
 8015cb0:	e00f      	b.n	8015cd2 <__swbuf_r+0x8e>
 8015cb2:	4b0b      	ldr	r3, [pc, #44]	; (8015ce0 <__swbuf_r+0x9c>)
 8015cb4:	429c      	cmp	r4, r3
 8015cb6:	d101      	bne.n	8015cbc <__swbuf_r+0x78>
 8015cb8:	68ac      	ldr	r4, [r5, #8]
 8015cba:	e7d0      	b.n	8015c5e <__swbuf_r+0x1a>
 8015cbc:	4b09      	ldr	r3, [pc, #36]	; (8015ce4 <__swbuf_r+0xa0>)
 8015cbe:	429c      	cmp	r4, r3
 8015cc0:	bf08      	it	eq
 8015cc2:	68ec      	ldreq	r4, [r5, #12]
 8015cc4:	e7cb      	b.n	8015c5e <__swbuf_r+0x1a>
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4628      	mov	r0, r5
 8015cca:	f000 f81f 	bl	8015d0c <__swsetup_r>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	d0cc      	beq.n	8015c6c <__swbuf_r+0x28>
 8015cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cda:	bf00      	nop
 8015cdc:	08019eac 	.word	0x08019eac
 8015ce0:	08019ecc 	.word	0x08019ecc
 8015ce4:	08019e8c 	.word	0x08019e8c

08015ce8 <_write_r>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	4c07      	ldr	r4, [pc, #28]	; (8015d08 <_write_r+0x20>)
 8015cec:	4605      	mov	r5, r0
 8015cee:	4608      	mov	r0, r1
 8015cf0:	4611      	mov	r1, r2
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	6022      	str	r2, [r4, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	f7eb f933 	bl	8000f62 <_write>
 8015cfc:	1c43      	adds	r3, r0, #1
 8015cfe:	d102      	bne.n	8015d06 <_write_r+0x1e>
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	b103      	cbz	r3, 8015d06 <_write_r+0x1e>
 8015d04:	602b      	str	r3, [r5, #0]
 8015d06:	bd38      	pop	{r3, r4, r5, pc}
 8015d08:	2000af0c 	.word	0x2000af0c

08015d0c <__swsetup_r>:
 8015d0c:	4b32      	ldr	r3, [pc, #200]	; (8015dd8 <__swsetup_r+0xcc>)
 8015d0e:	b570      	push	{r4, r5, r6, lr}
 8015d10:	681d      	ldr	r5, [r3, #0]
 8015d12:	4606      	mov	r6, r0
 8015d14:	460c      	mov	r4, r1
 8015d16:	b125      	cbz	r5, 8015d22 <__swsetup_r+0x16>
 8015d18:	69ab      	ldr	r3, [r5, #24]
 8015d1a:	b913      	cbnz	r3, 8015d22 <__swsetup_r+0x16>
 8015d1c:	4628      	mov	r0, r5
 8015d1e:	f7ff fb29 	bl	8015374 <__sinit>
 8015d22:	4b2e      	ldr	r3, [pc, #184]	; (8015ddc <__swsetup_r+0xd0>)
 8015d24:	429c      	cmp	r4, r3
 8015d26:	d10f      	bne.n	8015d48 <__swsetup_r+0x3c>
 8015d28:	686c      	ldr	r4, [r5, #4]
 8015d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d2e:	b29a      	uxth	r2, r3
 8015d30:	0715      	lsls	r5, r2, #28
 8015d32:	d42c      	bmi.n	8015d8e <__swsetup_r+0x82>
 8015d34:	06d0      	lsls	r0, r2, #27
 8015d36:	d411      	bmi.n	8015d5c <__swsetup_r+0x50>
 8015d38:	2209      	movs	r2, #9
 8015d3a:	6032      	str	r2, [r6, #0]
 8015d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d40:	81a3      	strh	r3, [r4, #12]
 8015d42:	f04f 30ff 	mov.w	r0, #4294967295
 8015d46:	bd70      	pop	{r4, r5, r6, pc}
 8015d48:	4b25      	ldr	r3, [pc, #148]	; (8015de0 <__swsetup_r+0xd4>)
 8015d4a:	429c      	cmp	r4, r3
 8015d4c:	d101      	bne.n	8015d52 <__swsetup_r+0x46>
 8015d4e:	68ac      	ldr	r4, [r5, #8]
 8015d50:	e7eb      	b.n	8015d2a <__swsetup_r+0x1e>
 8015d52:	4b24      	ldr	r3, [pc, #144]	; (8015de4 <__swsetup_r+0xd8>)
 8015d54:	429c      	cmp	r4, r3
 8015d56:	bf08      	it	eq
 8015d58:	68ec      	ldreq	r4, [r5, #12]
 8015d5a:	e7e6      	b.n	8015d2a <__swsetup_r+0x1e>
 8015d5c:	0751      	lsls	r1, r2, #29
 8015d5e:	d512      	bpl.n	8015d86 <__swsetup_r+0x7a>
 8015d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d62:	b141      	cbz	r1, 8015d76 <__swsetup_r+0x6a>
 8015d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d68:	4299      	cmp	r1, r3
 8015d6a:	d002      	beq.n	8015d72 <__swsetup_r+0x66>
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f7ff fb93 	bl	8015498 <_free_r>
 8015d72:	2300      	movs	r3, #0
 8015d74:	6363      	str	r3, [r4, #52]	; 0x34
 8015d76:	89a3      	ldrh	r3, [r4, #12]
 8015d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d7c:	81a3      	strh	r3, [r4, #12]
 8015d7e:	2300      	movs	r3, #0
 8015d80:	6063      	str	r3, [r4, #4]
 8015d82:	6923      	ldr	r3, [r4, #16]
 8015d84:	6023      	str	r3, [r4, #0]
 8015d86:	89a3      	ldrh	r3, [r4, #12]
 8015d88:	f043 0308 	orr.w	r3, r3, #8
 8015d8c:	81a3      	strh	r3, [r4, #12]
 8015d8e:	6923      	ldr	r3, [r4, #16]
 8015d90:	b94b      	cbnz	r3, 8015da6 <__swsetup_r+0x9a>
 8015d92:	89a3      	ldrh	r3, [r4, #12]
 8015d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d9c:	d003      	beq.n	8015da6 <__swsetup_r+0x9a>
 8015d9e:	4621      	mov	r1, r4
 8015da0:	4630      	mov	r0, r6
 8015da2:	f000 f919 	bl	8015fd8 <__smakebuf_r>
 8015da6:	89a2      	ldrh	r2, [r4, #12]
 8015da8:	f012 0301 	ands.w	r3, r2, #1
 8015dac:	d00c      	beq.n	8015dc8 <__swsetup_r+0xbc>
 8015dae:	2300      	movs	r3, #0
 8015db0:	60a3      	str	r3, [r4, #8]
 8015db2:	6963      	ldr	r3, [r4, #20]
 8015db4:	425b      	negs	r3, r3
 8015db6:	61a3      	str	r3, [r4, #24]
 8015db8:	6923      	ldr	r3, [r4, #16]
 8015dba:	b953      	cbnz	r3, 8015dd2 <__swsetup_r+0xc6>
 8015dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015dc4:	d1ba      	bne.n	8015d3c <__swsetup_r+0x30>
 8015dc6:	bd70      	pop	{r4, r5, r6, pc}
 8015dc8:	0792      	lsls	r2, r2, #30
 8015dca:	bf58      	it	pl
 8015dcc:	6963      	ldrpl	r3, [r4, #20]
 8015dce:	60a3      	str	r3, [r4, #8]
 8015dd0:	e7f2      	b.n	8015db8 <__swsetup_r+0xac>
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	e7f7      	b.n	8015dc6 <__swsetup_r+0xba>
 8015dd6:	bf00      	nop
 8015dd8:	2000001c 	.word	0x2000001c
 8015ddc:	08019eac 	.word	0x08019eac
 8015de0:	08019ecc 	.word	0x08019ecc
 8015de4:	08019e8c 	.word	0x08019e8c

08015de8 <_close_r>:
 8015de8:	b538      	push	{r3, r4, r5, lr}
 8015dea:	4c06      	ldr	r4, [pc, #24]	; (8015e04 <_close_r+0x1c>)
 8015dec:	2300      	movs	r3, #0
 8015dee:	4605      	mov	r5, r0
 8015df0:	4608      	mov	r0, r1
 8015df2:	6023      	str	r3, [r4, #0]
 8015df4:	f7eb f900 	bl	8000ff8 <_close>
 8015df8:	1c43      	adds	r3, r0, #1
 8015dfa:	d102      	bne.n	8015e02 <_close_r+0x1a>
 8015dfc:	6823      	ldr	r3, [r4, #0]
 8015dfe:	b103      	cbz	r3, 8015e02 <_close_r+0x1a>
 8015e00:	602b      	str	r3, [r5, #0]
 8015e02:	bd38      	pop	{r3, r4, r5, pc}
 8015e04:	2000af0c 	.word	0x2000af0c

08015e08 <__sflush_r>:
 8015e08:	898a      	ldrh	r2, [r1, #12]
 8015e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e0e:	4605      	mov	r5, r0
 8015e10:	0710      	lsls	r0, r2, #28
 8015e12:	460c      	mov	r4, r1
 8015e14:	d45a      	bmi.n	8015ecc <__sflush_r+0xc4>
 8015e16:	684b      	ldr	r3, [r1, #4]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	dc05      	bgt.n	8015e28 <__sflush_r+0x20>
 8015e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	dc02      	bgt.n	8015e28 <__sflush_r+0x20>
 8015e22:	2000      	movs	r0, #0
 8015e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e2a:	2e00      	cmp	r6, #0
 8015e2c:	d0f9      	beq.n	8015e22 <__sflush_r+0x1a>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e34:	682f      	ldr	r7, [r5, #0]
 8015e36:	602b      	str	r3, [r5, #0]
 8015e38:	d033      	beq.n	8015ea2 <__sflush_r+0x9a>
 8015e3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	075a      	lsls	r2, r3, #29
 8015e40:	d505      	bpl.n	8015e4e <__sflush_r+0x46>
 8015e42:	6863      	ldr	r3, [r4, #4]
 8015e44:	1ac0      	subs	r0, r0, r3
 8015e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e48:	b10b      	cbz	r3, 8015e4e <__sflush_r+0x46>
 8015e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e4c:	1ac0      	subs	r0, r0, r3
 8015e4e:	2300      	movs	r3, #0
 8015e50:	4602      	mov	r2, r0
 8015e52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e54:	6a21      	ldr	r1, [r4, #32]
 8015e56:	4628      	mov	r0, r5
 8015e58:	47b0      	blx	r6
 8015e5a:	1c43      	adds	r3, r0, #1
 8015e5c:	89a3      	ldrh	r3, [r4, #12]
 8015e5e:	d106      	bne.n	8015e6e <__sflush_r+0x66>
 8015e60:	6829      	ldr	r1, [r5, #0]
 8015e62:	291d      	cmp	r1, #29
 8015e64:	d84b      	bhi.n	8015efe <__sflush_r+0xf6>
 8015e66:	4a2b      	ldr	r2, [pc, #172]	; (8015f14 <__sflush_r+0x10c>)
 8015e68:	40ca      	lsrs	r2, r1
 8015e6a:	07d6      	lsls	r6, r2, #31
 8015e6c:	d547      	bpl.n	8015efe <__sflush_r+0xf6>
 8015e6e:	2200      	movs	r2, #0
 8015e70:	6062      	str	r2, [r4, #4]
 8015e72:	04d9      	lsls	r1, r3, #19
 8015e74:	6922      	ldr	r2, [r4, #16]
 8015e76:	6022      	str	r2, [r4, #0]
 8015e78:	d504      	bpl.n	8015e84 <__sflush_r+0x7c>
 8015e7a:	1c42      	adds	r2, r0, #1
 8015e7c:	d101      	bne.n	8015e82 <__sflush_r+0x7a>
 8015e7e:	682b      	ldr	r3, [r5, #0]
 8015e80:	b903      	cbnz	r3, 8015e84 <__sflush_r+0x7c>
 8015e82:	6560      	str	r0, [r4, #84]	; 0x54
 8015e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e86:	602f      	str	r7, [r5, #0]
 8015e88:	2900      	cmp	r1, #0
 8015e8a:	d0ca      	beq.n	8015e22 <__sflush_r+0x1a>
 8015e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e90:	4299      	cmp	r1, r3
 8015e92:	d002      	beq.n	8015e9a <__sflush_r+0x92>
 8015e94:	4628      	mov	r0, r5
 8015e96:	f7ff faff 	bl	8015498 <_free_r>
 8015e9a:	2000      	movs	r0, #0
 8015e9c:	6360      	str	r0, [r4, #52]	; 0x34
 8015e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ea2:	6a21      	ldr	r1, [r4, #32]
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	4628      	mov	r0, r5
 8015ea8:	47b0      	blx	r6
 8015eaa:	1c41      	adds	r1, r0, #1
 8015eac:	d1c6      	bne.n	8015e3c <__sflush_r+0x34>
 8015eae:	682b      	ldr	r3, [r5, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d0c3      	beq.n	8015e3c <__sflush_r+0x34>
 8015eb4:	2b1d      	cmp	r3, #29
 8015eb6:	d001      	beq.n	8015ebc <__sflush_r+0xb4>
 8015eb8:	2b16      	cmp	r3, #22
 8015eba:	d101      	bne.n	8015ec0 <__sflush_r+0xb8>
 8015ebc:	602f      	str	r7, [r5, #0]
 8015ebe:	e7b0      	b.n	8015e22 <__sflush_r+0x1a>
 8015ec0:	89a3      	ldrh	r3, [r4, #12]
 8015ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ec6:	81a3      	strh	r3, [r4, #12]
 8015ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ecc:	690f      	ldr	r7, [r1, #16]
 8015ece:	2f00      	cmp	r7, #0
 8015ed0:	d0a7      	beq.n	8015e22 <__sflush_r+0x1a>
 8015ed2:	0793      	lsls	r3, r2, #30
 8015ed4:	680e      	ldr	r6, [r1, #0]
 8015ed6:	bf08      	it	eq
 8015ed8:	694b      	ldreq	r3, [r1, #20]
 8015eda:	600f      	str	r7, [r1, #0]
 8015edc:	bf18      	it	ne
 8015ede:	2300      	movne	r3, #0
 8015ee0:	eba6 0807 	sub.w	r8, r6, r7
 8015ee4:	608b      	str	r3, [r1, #8]
 8015ee6:	f1b8 0f00 	cmp.w	r8, #0
 8015eea:	dd9a      	ble.n	8015e22 <__sflush_r+0x1a>
 8015eec:	4643      	mov	r3, r8
 8015eee:	463a      	mov	r2, r7
 8015ef0:	6a21      	ldr	r1, [r4, #32]
 8015ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	47b0      	blx	r6
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	dc07      	bgt.n	8015f0c <__sflush_r+0x104>
 8015efc:	89a3      	ldrh	r3, [r4, #12]
 8015efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f02:	81a3      	strh	r3, [r4, #12]
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295
 8015f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f0c:	4407      	add	r7, r0
 8015f0e:	eba8 0800 	sub.w	r8, r8, r0
 8015f12:	e7e8      	b.n	8015ee6 <__sflush_r+0xde>
 8015f14:	20400001 	.word	0x20400001

08015f18 <_fflush_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	690b      	ldr	r3, [r1, #16]
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	460c      	mov	r4, r1
 8015f20:	b1db      	cbz	r3, 8015f5a <_fflush_r+0x42>
 8015f22:	b118      	cbz	r0, 8015f2c <_fflush_r+0x14>
 8015f24:	6983      	ldr	r3, [r0, #24]
 8015f26:	b90b      	cbnz	r3, 8015f2c <_fflush_r+0x14>
 8015f28:	f7ff fa24 	bl	8015374 <__sinit>
 8015f2c:	4b0c      	ldr	r3, [pc, #48]	; (8015f60 <_fflush_r+0x48>)
 8015f2e:	429c      	cmp	r4, r3
 8015f30:	d109      	bne.n	8015f46 <_fflush_r+0x2e>
 8015f32:	686c      	ldr	r4, [r5, #4]
 8015f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f38:	b17b      	cbz	r3, 8015f5a <_fflush_r+0x42>
 8015f3a:	4621      	mov	r1, r4
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f42:	f7ff bf61 	b.w	8015e08 <__sflush_r>
 8015f46:	4b07      	ldr	r3, [pc, #28]	; (8015f64 <_fflush_r+0x4c>)
 8015f48:	429c      	cmp	r4, r3
 8015f4a:	d101      	bne.n	8015f50 <_fflush_r+0x38>
 8015f4c:	68ac      	ldr	r4, [r5, #8]
 8015f4e:	e7f1      	b.n	8015f34 <_fflush_r+0x1c>
 8015f50:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <_fflush_r+0x50>)
 8015f52:	429c      	cmp	r4, r3
 8015f54:	bf08      	it	eq
 8015f56:	68ec      	ldreq	r4, [r5, #12]
 8015f58:	e7ec      	b.n	8015f34 <_fflush_r+0x1c>
 8015f5a:	2000      	movs	r0, #0
 8015f5c:	bd38      	pop	{r3, r4, r5, pc}
 8015f5e:	bf00      	nop
 8015f60:	08019eac 	.word	0x08019eac
 8015f64:	08019ecc 	.word	0x08019ecc
 8015f68:	08019e8c 	.word	0x08019e8c

08015f6c <_lseek_r>:
 8015f6c:	b538      	push	{r3, r4, r5, lr}
 8015f6e:	4c07      	ldr	r4, [pc, #28]	; (8015f8c <_lseek_r+0x20>)
 8015f70:	4605      	mov	r5, r0
 8015f72:	4608      	mov	r0, r1
 8015f74:	4611      	mov	r1, r2
 8015f76:	2200      	movs	r2, #0
 8015f78:	6022      	str	r2, [r4, #0]
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	f7eb f863 	bl	8001046 <_lseek>
 8015f80:	1c43      	adds	r3, r0, #1
 8015f82:	d102      	bne.n	8015f8a <_lseek_r+0x1e>
 8015f84:	6823      	ldr	r3, [r4, #0]
 8015f86:	b103      	cbz	r3, 8015f8a <_lseek_r+0x1e>
 8015f88:	602b      	str	r3, [r5, #0]
 8015f8a:	bd38      	pop	{r3, r4, r5, pc}
 8015f8c:	2000af0c 	.word	0x2000af0c

08015f90 <__swhatbuf_r>:
 8015f90:	b570      	push	{r4, r5, r6, lr}
 8015f92:	460e      	mov	r6, r1
 8015f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f98:	2900      	cmp	r1, #0
 8015f9a:	b090      	sub	sp, #64	; 0x40
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	461d      	mov	r5, r3
 8015fa0:	da07      	bge.n	8015fb2 <__swhatbuf_r+0x22>
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	602b      	str	r3, [r5, #0]
 8015fa6:	89b3      	ldrh	r3, [r6, #12]
 8015fa8:	061a      	lsls	r2, r3, #24
 8015faa:	d410      	bmi.n	8015fce <__swhatbuf_r+0x3e>
 8015fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fb0:	e00e      	b.n	8015fd0 <__swhatbuf_r+0x40>
 8015fb2:	aa01      	add	r2, sp, #4
 8015fb4:	f000 f864 	bl	8016080 <_fstat_r>
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	dbf2      	blt.n	8015fa2 <__swhatbuf_r+0x12>
 8015fbc:	9a02      	ldr	r2, [sp, #8]
 8015fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015fc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015fc6:	425a      	negs	r2, r3
 8015fc8:	415a      	adcs	r2, r3
 8015fca:	602a      	str	r2, [r5, #0]
 8015fcc:	e7ee      	b.n	8015fac <__swhatbuf_r+0x1c>
 8015fce:	2340      	movs	r3, #64	; 0x40
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	6023      	str	r3, [r4, #0]
 8015fd4:	b010      	add	sp, #64	; 0x40
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}

08015fd8 <__smakebuf_r>:
 8015fd8:	898b      	ldrh	r3, [r1, #12]
 8015fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015fdc:	079d      	lsls	r5, r3, #30
 8015fde:	4606      	mov	r6, r0
 8015fe0:	460c      	mov	r4, r1
 8015fe2:	d507      	bpl.n	8015ff4 <__smakebuf_r+0x1c>
 8015fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015fe8:	6023      	str	r3, [r4, #0]
 8015fea:	6123      	str	r3, [r4, #16]
 8015fec:	2301      	movs	r3, #1
 8015fee:	6163      	str	r3, [r4, #20]
 8015ff0:	b002      	add	sp, #8
 8015ff2:	bd70      	pop	{r4, r5, r6, pc}
 8015ff4:	ab01      	add	r3, sp, #4
 8015ff6:	466a      	mov	r2, sp
 8015ff8:	f7ff ffca 	bl	8015f90 <__swhatbuf_r>
 8015ffc:	9900      	ldr	r1, [sp, #0]
 8015ffe:	4605      	mov	r5, r0
 8016000:	4630      	mov	r0, r6
 8016002:	f7ff fa97 	bl	8015534 <_malloc_r>
 8016006:	b948      	cbnz	r0, 801601c <__smakebuf_r+0x44>
 8016008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801600c:	059a      	lsls	r2, r3, #22
 801600e:	d4ef      	bmi.n	8015ff0 <__smakebuf_r+0x18>
 8016010:	f023 0303 	bic.w	r3, r3, #3
 8016014:	f043 0302 	orr.w	r3, r3, #2
 8016018:	81a3      	strh	r3, [r4, #12]
 801601a:	e7e3      	b.n	8015fe4 <__smakebuf_r+0xc>
 801601c:	4b0d      	ldr	r3, [pc, #52]	; (8016054 <__smakebuf_r+0x7c>)
 801601e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016020:	89a3      	ldrh	r3, [r4, #12]
 8016022:	6020      	str	r0, [r4, #0]
 8016024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016028:	81a3      	strh	r3, [r4, #12]
 801602a:	9b00      	ldr	r3, [sp, #0]
 801602c:	6163      	str	r3, [r4, #20]
 801602e:	9b01      	ldr	r3, [sp, #4]
 8016030:	6120      	str	r0, [r4, #16]
 8016032:	b15b      	cbz	r3, 801604c <__smakebuf_r+0x74>
 8016034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016038:	4630      	mov	r0, r6
 801603a:	f000 f833 	bl	80160a4 <_isatty_r>
 801603e:	b128      	cbz	r0, 801604c <__smakebuf_r+0x74>
 8016040:	89a3      	ldrh	r3, [r4, #12]
 8016042:	f023 0303 	bic.w	r3, r3, #3
 8016046:	f043 0301 	orr.w	r3, r3, #1
 801604a:	81a3      	strh	r3, [r4, #12]
 801604c:	89a3      	ldrh	r3, [r4, #12]
 801604e:	431d      	orrs	r5, r3
 8016050:	81a5      	strh	r5, [r4, #12]
 8016052:	e7cd      	b.n	8015ff0 <__smakebuf_r+0x18>
 8016054:	080152f5 	.word	0x080152f5

08016058 <__malloc_lock>:
 8016058:	4770      	bx	lr

0801605a <__malloc_unlock>:
 801605a:	4770      	bx	lr

0801605c <_read_r>:
 801605c:	b538      	push	{r3, r4, r5, lr}
 801605e:	4c07      	ldr	r4, [pc, #28]	; (801607c <_read_r+0x20>)
 8016060:	4605      	mov	r5, r0
 8016062:	4608      	mov	r0, r1
 8016064:	4611      	mov	r1, r2
 8016066:	2200      	movs	r2, #0
 8016068:	6022      	str	r2, [r4, #0]
 801606a:	461a      	mov	r2, r3
 801606c:	f7ea ff5c 	bl	8000f28 <_read>
 8016070:	1c43      	adds	r3, r0, #1
 8016072:	d102      	bne.n	801607a <_read_r+0x1e>
 8016074:	6823      	ldr	r3, [r4, #0]
 8016076:	b103      	cbz	r3, 801607a <_read_r+0x1e>
 8016078:	602b      	str	r3, [r5, #0]
 801607a:	bd38      	pop	{r3, r4, r5, pc}
 801607c:	2000af0c 	.word	0x2000af0c

08016080 <_fstat_r>:
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	4c07      	ldr	r4, [pc, #28]	; (80160a0 <_fstat_r+0x20>)
 8016084:	2300      	movs	r3, #0
 8016086:	4605      	mov	r5, r0
 8016088:	4608      	mov	r0, r1
 801608a:	4611      	mov	r1, r2
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	f7ea ffbf 	bl	8001010 <_fstat>
 8016092:	1c43      	adds	r3, r0, #1
 8016094:	d102      	bne.n	801609c <_fstat_r+0x1c>
 8016096:	6823      	ldr	r3, [r4, #0]
 8016098:	b103      	cbz	r3, 801609c <_fstat_r+0x1c>
 801609a:	602b      	str	r3, [r5, #0]
 801609c:	bd38      	pop	{r3, r4, r5, pc}
 801609e:	bf00      	nop
 80160a0:	2000af0c 	.word	0x2000af0c

080160a4 <_isatty_r>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	4c06      	ldr	r4, [pc, #24]	; (80160c0 <_isatty_r+0x1c>)
 80160a8:	2300      	movs	r3, #0
 80160aa:	4605      	mov	r5, r0
 80160ac:	4608      	mov	r0, r1
 80160ae:	6023      	str	r3, [r4, #0]
 80160b0:	f7ea ffbe 	bl	8001030 <_isatty>
 80160b4:	1c43      	adds	r3, r0, #1
 80160b6:	d102      	bne.n	80160be <_isatty_r+0x1a>
 80160b8:	6823      	ldr	r3, [r4, #0]
 80160ba:	b103      	cbz	r3, 80160be <_isatty_r+0x1a>
 80160bc:	602b      	str	r3, [r5, #0]
 80160be:	bd38      	pop	{r3, r4, r5, pc}
 80160c0:	2000af0c 	.word	0x2000af0c

080160c4 <_init>:
 80160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c6:	bf00      	nop
 80160c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160ca:	bc08      	pop	{r3}
 80160cc:	469e      	mov	lr, r3
 80160ce:	4770      	bx	lr

080160d0 <_fini>:
 80160d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d2:	bf00      	nop
 80160d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160d6:	bc08      	pop	{r3}
 80160d8:	469e      	mov	lr, r3
 80160da:	4770      	bx	lr
