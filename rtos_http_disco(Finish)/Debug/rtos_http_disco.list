
rtos_http_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002888  0800ac00  0800ac00  0001ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d488  0800d488  0001d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d490  0800d490  0001d490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d494  0800d494  0001d494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  0800d498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  8 .bss          0000ae44  2000007c  2000007c  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000aec0  2000aec0  0002007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00041ee6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008467  00000000  00000000  00061f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001444e  00000000  00000000  0006a3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001760  00000000  00000000  0007e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002190  00000000  00000000  0007ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001138a  00000000  00000000  00082138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008e7f  00000000  00000000  000934c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0009c341  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004c24  00000000  00000000  0009c3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abe8 	.word	0x0800abe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800abe8 	.word	0x0800abe8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f82f 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f009 fae0 	bl	8009b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f009 fabc 	bl	8009b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_IncTick+0x14>)
 80005e8:	6811      	ldr	r1, [r2, #0]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000461c 	.word	0x2000461c
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000461c 	.word	0x2000461c

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
 800060a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000610:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	bf1c      	itt	ne
 8000614:	4b05      	ldrne	r3, [pc, #20]	; (800062c <HAL_Delay+0x24>)
 8000616:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000618:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800061a:	bf18      	it	ne
 800061c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	f7ff ffed 	bl	80005fc <HAL_GetTick>
 8000622:	1b40      	subs	r0, r0, r5
 8000624:	4284      	cmp	r4, r0
 8000626:	d8fa      	bhi.n	800061e <HAL_Delay+0x16>
  {
  }
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000632:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	0200      	lsls	r0, r0, #8
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800064a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800064c:	60d3      	str	r3, [r2, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	68dc      	ldr	r4, [r3, #12]
 800065a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	2b04      	cmp	r3, #4
 8000666:	bf28      	it	cs
 8000668:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 0501 	mov.w	r5, #1
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf8c      	ite	hi
 800067a:	3c03      	subhi	r4, #3
 800067c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067e:	4019      	ands	r1, r3
 8000680:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000682:	fa05 f404 	lsl.w	r4, r5, r4
 8000686:	3c01      	subs	r4, #1
 8000688:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800068a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea42 0201 	orr.w	r2, r2, r1
 8000690:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	bfad      	iteet	ge
 8000696:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f000 000f 	andlt.w	r0, r0, #15
 800069e:	4b06      	ldrlt	r3, [pc, #24]	; (80006b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfb5      	itete	lt
 80006a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006bc:	2800      	cmp	r0, #0
 80006be:	db08      	blt.n	80006d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	0942      	lsrs	r2, r0, #5
 80006c2:	2301      	movs	r3, #1
 80006c4:	f000 001f 	and.w	r0, r0, #31
 80006c8:	fa03 f000 	lsl.w	r0, r3, r0
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80006d8:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <ETH_Delay.constprop.4+0x20>)
 80006dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e6:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 80006e8:	bf00      	nop
  } 
  while (Delay --);
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f9      	bne.n	80006e8 <ETH_Delay.constprop.4+0x10>
}
 80006f4:	b002      	add	sp, #8
 80006f6:	4770      	bx	lr
 80006f8:	20000014 	.word	0x20000014

080006fc <ETH_FlushTransmitFIFO>:
{
 80006fc:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000702:	f241 0118 	movw	r1, #4120	; 0x1018
 8000706:	6803      	ldr	r3, [r0, #0]
 8000708:	585a      	ldr	r2, [r3, r1]
 800070a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800070e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000710:	585b      	ldr	r3, [r3, r1]
 8000712:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000714:	f7ff ffe0 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000718:	9a01      	ldr	r2, [sp, #4]
 800071a:	6803      	ldr	r3, [r0, #0]
 800071c:	505a      	str	r2, [r3, r1]
}
 800071e:	b003      	add	sp, #12
 8000720:	f85d fb04 	ldr.w	pc, [sp], #4

08000724 <ETH_MACDMAConfig>:
{
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000728:	b129      	cbz	r1, 8000736 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800072a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800072e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000734:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000736:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000738:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 800073a:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 800073c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800073e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000740:	68a3      	ldr	r3, [r4, #8]
 8000742:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000746:	4830      	ldr	r0, [pc, #192]	; (8000808 <ETH_MACDMAConfig+0xe4>)
 8000748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000750:	bf0c      	ite	eq
 8000752:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000756:	2100      	movne	r1, #0
 8000758:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800075a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800075c:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800075e:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8000760:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000762:	f7ff ff51 	bl	8000608 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000766:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000768:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 800076a:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800076c:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800076e:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000770:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	f7ff ff49 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800077a:	2500      	movs	r5, #0
 800077c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800077e:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8000780:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000782:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000786:	0412      	lsls	r2, r2, #16
 8000788:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800078a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800078e:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000790:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000792:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000794:	f7ff ff38 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000798:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800079a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 800079c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800079e:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007a0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a2:	f7ff ff31 	bl	8000608 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007a6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007aa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007ac:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007b2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007b4:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007b6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007ba:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007be:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007c0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	f7ff ff21 	bl	8000608 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007c6:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007d2:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007d4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d6:	f7ff ff17 	bl	8000608 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007e0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007e2:	69a3      	ldr	r3, [r4, #24]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d107      	bne.n	80007f8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80007e8:	f241 011c 	movw	r1, #4124	; 0x101c
 80007ec:	5853      	ldr	r3, [r2, r1]
 80007ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80007f8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80007fc:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80007fe:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000800:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ETH_MACDMAConfig+0xf4>)
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	ff20810f 	.word	0xff20810f
 800080c:	f8de3f23 	.word	0xf8de3f23
 8000810:	02c12080 	.word	0x02c12080
 8000814:	40028040 	.word	0x40028040
 8000818:	40028044 	.word	0x40028044

0800081c <HAL_ETH_DMATxDescListInit>:
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800081e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000822:	2c01      	cmp	r4, #1
 8000824:	f04f 0402 	mov.w	r4, #2
 8000828:	d033      	beq.n	8000892 <HAL_ETH_DMATxDescListInit+0x76>
 800082a:	2501      	movs	r5, #1
 800082c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000830:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000834:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000836:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 800083a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800083c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000840:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000844:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8000848:	429d      	cmp	r5, r3
 800084a:	d10b      	bne.n	8000864 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800084c:	6802      	ldr	r2, [r0, #0]
 800084e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000852:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000854:	2301      	movs	r3, #1
 8000856:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800085a:	2300      	movs	r3, #0
 800085c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000860:	4618      	mov	r0, r3
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000864:	fb0e 2605 	mla	r6, lr, r5, r2
 8000868:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800086c:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800086e:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000872:	b92e      	cbnz	r6, 8000880 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000874:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000878:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800087c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000880:	4565      	cmp	r5, ip
 8000882:	bf2c      	ite	cs
 8000884:	460e      	movcs	r6, r1
 8000886:	4626      	movcc	r6, r4
 8000888:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 800088c:	3501      	adds	r5, #1
 800088e:	3420      	adds	r4, #32
 8000890:	e7da      	b.n	8000848 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000892:	4620      	mov	r0, r4
}
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000896 <HAL_ETH_DMARxDescListInit>:
{
 8000896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800089a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800089e:	2c01      	cmp	r4, #1
 80008a0:	f04f 0402 	mov.w	r4, #2
 80008a4:	d030      	beq.n	8000908 <HAL_ETH_DMARxDescListInit+0x72>
 80008a6:	2501      	movs	r5, #1
 80008a8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008ac:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008b0:	6281      	str	r1, [r0, #40]	; 0x28
 80008b2:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80008b6:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008bc:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008c0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80008c4:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80008c8:	429d      	cmp	r5, r3
 80008ca:	d10c      	bne.n	80008e6 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80008cc:	6802      	ldr	r2, [r0, #0]
 80008ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80008d2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008da:	2300      	movs	r3, #0
 80008dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008e0:	4618      	mov	r0, r3
 80008e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008e6:	fb0e 2805 	mla	r8, lr, r5, r2
 80008ea:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80008ee:	4565      	cmp	r5, ip
 80008f0:	bf2c      	ite	cs
 80008f2:	4688      	movcs	r8, r1
 80008f4:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008f6:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008fa:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80008fe:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000902:	3501      	adds	r5, #1
 8000904:	3420      	adds	r4, #32
 8000906:	e7df      	b.n	80008c8 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000908:	4620      	mov	r0, r4
}
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000910 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000910:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000914:	2b01      	cmp	r3, #1
{
 8000916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000918:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800091c:	d068      	beq.n	80009f0 <HAL_ETH_TransmitFrame+0xe0>
 800091e:	2201      	movs	r2, #1
 8000920:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000924:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000928:	b929      	cbnz	r1, 8000936 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800092a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800092e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000932:	4610      	mov	r0, r2
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000938:	681c      	ldr	r4, [r3, #0]
 800093a:	2c00      	cmp	r4, #0
 800093c:	da06      	bge.n	800094c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800093e:	2312      	movs	r3, #18
 8000940:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000944:	2300      	movs	r3, #0
 8000946:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800094a:	e7f2      	b.n	8000932 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800094c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000950:	42a1      	cmp	r1, r4
 8000952:	d92e      	bls.n	80009b2 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000954:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000958:	fb04 1412 	mls	r4, r4, r2, r1
 800095c:	b33c      	cbz	r4, 80009ae <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 800095e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000960:	4c24      	ldr	r4, [pc, #144]	; (80009f4 <HAL_ETH_TransmitFrame+0xe4>)
 8000962:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8000966:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800096a:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800096e:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000970:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8000974:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000976:	681d      	ldr	r5, [r3, #0]
 8000978:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800097c:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 800097e:	b91c      	cbnz	r4, 8000988 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000980:	681d      	ldr	r5, [r3, #0]
 8000982:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000986:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8000988:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800098a:	bf08      	it	eq
 800098c:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800098e:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000990:	bf04      	itt	eq
 8000992:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8000996:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000998:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800099a:	bf08      	it	eq
 800099c:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 800099e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80009a4:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a6:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009a8:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80009aa:	d1e4      	bne.n	8000976 <HAL_ETH_TransmitFrame+0x66>
 80009ac:	e00d      	b.n	80009ca <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80009ae:	2a01      	cmp	r2, #1
 80009b0:	d1d6      	bne.n	8000960 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009b8:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ba:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009bc:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009c4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009c6:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009cc:	f241 0214 	movw	r2, #4116	; 0x1014
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	5899      	ldr	r1, [r3, r2]
 80009d4:	0749      	lsls	r1, r1, #29
 80009d6:	d505      	bpl.n	80009e4 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009d8:	2104      	movs	r1, #4
 80009da:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009dc:	f241 0204 	movw	r2, #4100	; 0x1004
 80009e0:	2100      	movs	r1, #0
 80009e2:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009ea:	2300      	movs	r3, #0
 80009ec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80009f0:	4618      	mov	r0, r3
}
 80009f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f4:	fffffa0c 	.word	0xfffffa0c

080009f8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80009f8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009fc:	2b01      	cmp	r3, #1
{
 80009fe:	b530      	push	{r4, r5, lr}
 8000a00:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a04:	d03b      	beq.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a06:	2201      	movs	r2, #1
 8000a08:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a0c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a10:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000a12:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	db01      	blt.n	8000a20 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a1c:	3c01      	subs	r4, #1
 8000a1e:	d106      	bne.n	8000a2e <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a20:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a22:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a24:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a28:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a2c:	e027      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68dd      	ldr	r5, [r3, #12]
 8000a32:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a36:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a3a:	d103      	bne.n	8000a44 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a3c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a3e:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a40:	6285      	str	r5, [r0, #40]	; 0x28
 8000a42:	e7e7      	b.n	8000a14 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a4c:	d102      	bne.n	8000a54 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000a4e:	3201      	adds	r2, #1
 8000a50:	6382      	str	r2, [r0, #56]	; 0x38
 8000a52:	e7f5      	b.n	8000a40 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000a54:	3201      	adds	r2, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000a56:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a58:	bf08      	it	eq
 8000a5a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a5c:	6343      	str	r3, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a5e:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 8000a60:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a62:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a66:	3b04      	subs	r3, #4
 8000a68:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a76:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a78:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000a7a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd30      	pop	{r4, r5, pc}

08000a82 <HAL_ETH_TxCpltCallback>:
 8000a82:	4770      	bx	lr

08000a84 <HAL_ETH_ErrorCallback>:
{
 8000a84:	4770      	bx	lr

08000a86 <HAL_ETH_IRQHandler>:
{
 8000a86:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a88:	6802      	ldr	r2, [r0, #0]
 8000a8a:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000a8e:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a90:	5995      	ldr	r5, [r2, r6]
 8000a92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000a96:	d021      	beq.n	8000adc <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000a98:	f008 fe60 	bl	800975c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	f241 0514 	movw	r5, #4116	; 0x1014
 8000ab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab8:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000aba:	595b      	ldr	r3, [r3, r5]
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	d50c      	bpl.n	8000ada <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff ffdf 	bl	8000a84 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000acc:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000adc:	5993      	ldr	r3, [r2, r6]
 8000ade:	07da      	lsls	r2, r3, #31
 8000ae0:	d5e5      	bpl.n	8000aae <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000ae2:	f7ff ffce 	bl	8000a82 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000ae6:	6822      	ldr	r2, [r4, #0]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000aec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000af0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000af4:	e7db      	b.n	8000aae <HAL_ETH_IRQHandler+0x28>

08000af6 <HAL_ETH_ReadPHYRegister>:
{
 8000af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000af8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000afc:	2b82      	cmp	r3, #130	; 0x82
{
 8000afe:	4605      	mov	r5, r0
 8000b00:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b02:	d030      	beq.n	8000b66 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b04:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b06:	2382      	movs	r3, #130	; 0x82
 8000b08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b0c:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b0e:	0189      	lsls	r1, r1, #6
 8000b10:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b14:	f003 011c 	and.w	r1, r3, #28
 8000b18:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b1a:	8a04      	ldrh	r4, [r0, #16]
 8000b1c:	02e4      	lsls	r4, r4, #11
 8000b1e:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000b20:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b22:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000b26:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b28:	f7ff fd68 	bl	80005fc <HAL_GetTick>
 8000b2c:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b2e:	f014 0001 	ands.w	r0, r4, #1
 8000b32:	d107      	bne.n	8000b44 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b44:	f7ff fd5a 	bl	80005fc <HAL_GetTick>
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b4e:	d307      	bcc.n	8000b60 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b56:	2300      	movs	r3, #0
 8000b58:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	691c      	ldr	r4, [r3, #16]
 8000b64:	e7e3      	b.n	8000b2e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b66:	2002      	movs	r0, #2
}
 8000b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b6a <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b6a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b6e:	2b42      	cmp	r3, #66	; 0x42
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b74:	d02e      	beq.n	8000bd4 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b76:	2342      	movs	r3, #66	; 0x42
 8000b78:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b7c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b7e:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b80:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b82:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b86:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b8a:	f000 001c 	and.w	r0, r0, #28
 8000b8e:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b90:	8a2c      	ldrh	r4, [r5, #16]
 8000b92:	02e4      	lsls	r4, r4, #11
 8000b94:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b96:	4304      	orrs	r4, r0
 8000b98:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b9a:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b9c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b9e:	f7ff fd2d 	bl	80005fc <HAL_GetTick>
 8000ba2:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000ba4:	f014 0001 	ands.w	r0, r4, #1
 8000ba8:	d103      	bne.n	8000bb2 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bb2:	f7ff fd23 	bl	80005fc <HAL_GetTick>
 8000bb6:	1b80      	subs	r0, r0, r6
 8000bb8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bbc:	d307      	bcc.n	8000bce <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bca:	2003      	movs	r0, #3
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	691c      	ldr	r4, [r3, #16]
 8000bd2:	e7e7      	b.n	8000ba4 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bd4:	2002      	movs	r0, #2
}
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}

08000bd8 <HAL_ETH_Init>:
{
 8000bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bde:	4604      	mov	r4, r0
 8000be0:	2800      	cmp	r0, #0
 8000be2:	f000 80de 	beq.w	8000da2 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000be6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bee:	b91b      	cbnz	r3, 8000bf8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bf0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000bf4:	f008 fd34 	bl	8009660 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_ETH_Init+0x1d0>)
 8000bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c10:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_ETH_Init+0x1d4>)
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c18:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	6a21      	ldr	r1, [r4, #32]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c30:	f7ff fce4 	bl	80005fc <HAL_GetTick>
 8000c34:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	07d0      	lsls	r0, r2, #31
 8000c40:	d41d      	bmi.n	8000c7e <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c42:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c44:	f000 fc56 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <HAL_ETH_Init+0x1d8>)
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <HAL_ETH_Init+0x1dc>)
 8000c4c:	4403      	add	r3, r0
 8000c4e:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c50:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c54:	d822      	bhi.n	8000c9c <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c56:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c5a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c60:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4620      	mov	r0, r4
 8000c66:	f7ff ff80 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	b368      	cbz	r0, 8000cca <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c72:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c74:	f7ff fd56 	bl	8000724 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c78:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c7c:	e00b      	b.n	8000c96 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c7e:	f7ff fcbd 	bl	80005fc <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c88:	d9d5      	bls.n	8000c36 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c8a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c8c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c8e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c96:	4628      	mov	r0, r5
 8000c98:	b003      	add	sp, #12
 8000c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c9c:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_ETH_Init+0x1e0>)
 8000c9e:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_ETH_Init+0x1e4>)
 8000ca0:	4403      	add	r3, r0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d802      	bhi.n	8000cac <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ca6:	f045 050c 	orr.w	r5, r5, #12
 8000caa:	e7d6      	b.n	8000c5a <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_ETH_Init+0x1e8>)
 8000cae:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_ETH_Init+0x1ec>)
 8000cb0:	4403      	add	r3, r0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d9d1      	bls.n	8000c5a <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000cb6:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <HAL_ETH_Init+0x1f0>)
 8000cb8:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <HAL_ETH_Init+0x1f4>)
 8000cba:	4403      	add	r3, r0
 8000cbc:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cbe:	bf94      	ite	ls
 8000cc0:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cc4:	f045 0510 	orrhi.w	r5, r5, #16
 8000cc8:	e7c7      	b.n	8000c5a <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	f7ff fc9c 	bl	8000608 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d053      	beq.n	8000d7e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fc91 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cda:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cde:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ce0:	466a      	mov	r2, sp
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff ff06 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cea:	f7ff fc87 	bl	80005fc <HAL_GetTick>
 8000cee:	1b80      	subs	r0, r0, r6
 8000cf0:	42b8      	cmp	r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f7ff fd14 	bl	8000724 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d02:	2300      	movs	r3, #0
 8000d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d08:	2503      	movs	r5, #3
 8000d0a:	e7c4      	b.n	8000c96 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	0759      	lsls	r1, r3, #29
 8000d10:	d5e6      	bpl.n	8000ce0 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d16:	2100      	movs	r1, #0
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff ff26 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d1a5      	bne.n	8000c6e <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000d22:	f7ff fc6b 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d26:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d2a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d2c:	466a      	mov	r2, sp
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff fee0 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d36:	f7ff fc61 	bl	80005fc <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	42b8      	cmp	r0, r7
 8000d3e:	d8d9      	bhi.n	8000cf4 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d40:	9b00      	ldr	r3, [sp, #0]
 8000d42:	069a      	lsls	r2, r3, #26
 8000d44:	d5f2      	bpl.n	8000d2c <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d46:	466a      	mov	r2, sp
 8000d48:	211f      	movs	r1, #31
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fed3 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d18c      	bne.n	8000c6e <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d54:	9b00      	ldr	r3, [sp, #0]
 8000d56:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d5a:	bf18      	it	ne
 8000d5c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d60:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d62:	bf4c      	ite	mi
 8000d64:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d66:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d6a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d6c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4620      	mov	r0, r4
 8000d72:	f7ff fcd7 	bl	8000724 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d7c:	e78b      	b.n	8000c96 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d7e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d80:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d82:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d84:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff feec 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	f47f af6b 	bne.w	8000c6e <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d9c:	f7ff fc34 	bl	8000608 <HAL_Delay>
 8000da0:	e7e5      	b.n	8000d6e <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000da2:	2501      	movs	r5, #1
 8000da4:	e777      	b.n	8000c96 <HAL_ETH_Init+0xbe>
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40013800 	.word	0x40013800
 8000db0:	feced300 	.word	0xfeced300
 8000db4:	00e4e1bf 	.word	0x00e4e1bf
 8000db8:	fde9f140 	.word	0xfde9f140
 8000dbc:	017d783f 	.word	0x017d783f
 8000dc0:	fc6c7900 	.word	0xfc6c7900
 8000dc4:	026259ff 	.word	0x026259ff
 8000dc8:	fa0a1f00 	.word	0xfa0a1f00
 8000dcc:	02faf07f 	.word	0x02faf07f

08000dd0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000dd0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000dd4:	2b01      	cmp	r3, #1
{  
 8000dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd8:	4605      	mov	r5, r0
 8000dda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dde:	d031      	beq.n	8000e44 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000de0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000de2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000de4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000de8:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dea:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000dec:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dee:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000df2:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000df6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dfc:	f7ff fc6c 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	9a01      	ldr	r2, [sp, #4]
 8000e04:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000e06:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f042 0204 	orr.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e14:	f7ff fc60 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	9a00      	ldr	r2, [sp, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e1e:	4628      	mov	r0, r5
 8000e20:	f7ff fc6c 	bl	80006fc <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e24:	682a      	ldr	r2, [r5, #0]
 8000e26:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e2a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e2c:	58d1      	ldr	r1, [r2, r3]
 8000e2e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e32:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e34:	58d1      	ldr	r1, [r2, r3]
 8000e36:	f041 0102 	orr.w	r1, r1, #2
 8000e3a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e3c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e40:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e4c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001000 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e56:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001004 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e5e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e60:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e62:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e64:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e66:	42ac      	cmp	r4, r5
 8000e68:	f040 80b0 	bne.w	8000fcc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6c:	684c      	ldr	r4, [r1, #4]
 8000e6e:	f024 0c10 	bic.w	ip, r4, #16
 8000e72:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e76:	2e01      	cmp	r6, #1
 8000e78:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e7c:	d812      	bhi.n	8000ea4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000e7e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	2603      	movs	r6, #3
 8000e82:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e86:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	68ce      	ldr	r6, [r1, #12]
 8000e8c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e90:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e92:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e94:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e96:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e9e:	409e      	lsls	r6, r3
 8000ea0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ea2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ea6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eac:	43f6      	mvns	r6, r6
 8000eae:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb2:	688f      	ldr	r7, [r1, #8]
 8000eb4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eb8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000ec0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	d116      	bne.n	8000ef2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ec8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ecc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ed8:	f04f 0c0f 	mov.w	ip, #15
 8000edc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ee0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	690f      	ldr	r7, [r1, #16]
 8000ee6:	fa07 f70b 	lsl.w	r7, r7, fp
 8000eea:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000ef2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef6:	f004 0703 	and.w	r7, r4, #3
 8000efa:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000efe:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f02:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f04:	00e6      	lsls	r6, r4, #3
 8000f06:	d561      	bpl.n	8000fcc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	f04f 0b00 	mov.w	fp, #0
 8000f0c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f10:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f14:	4e39      	ldr	r6, [pc, #228]	; (8000ffc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f1a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f1e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f22:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f26:	9703      	str	r7, [sp, #12]
 8000f28:	9f03      	ldr	r7, [sp, #12]
 8000f2a:	f023 0703 	bic.w	r7, r3, #3
 8000f2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f32:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f36:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f42:	f04f 0e0f 	mov.w	lr, #15
 8000f46:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f50:	d043      	beq.n	8000fda <HAL_GPIO_Init+0x192>
 8000f52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f56:	42b0      	cmp	r0, r6
 8000f58:	d041      	beq.n	8000fde <HAL_GPIO_Init+0x196>
 8000f5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f5e:	42b0      	cmp	r0, r6
 8000f60:	d03f      	beq.n	8000fe2 <HAL_GPIO_Init+0x19a>
 8000f62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f66:	42b0      	cmp	r0, r6
 8000f68:	d03d      	beq.n	8000fe6 <HAL_GPIO_Init+0x19e>
 8000f6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f6e:	42b0      	cmp	r0, r6
 8000f70:	d03b      	beq.n	8000fea <HAL_GPIO_Init+0x1a2>
 8000f72:	4548      	cmp	r0, r9
 8000f74:	d03b      	beq.n	8000fee <HAL_GPIO_Init+0x1a6>
 8000f76:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f7a:	42b0      	cmp	r0, r6
 8000f7c:	d039      	beq.n	8000ff2 <HAL_GPIO_Init+0x1aa>
 8000f7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f82:	42b0      	cmp	r0, r6
 8000f84:	bf14      	ite	ne
 8000f86:	2608      	movne	r6, #8
 8000f88:	2607      	moveq	r6, #7
 8000f8a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f8e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f92:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000f94:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	bf0c      	ite	eq
 8000f9e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fa0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000fa2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000faa:	bf0c      	ite	eq
 8000fac:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fae:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000fb0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	bf0c      	ite	eq
 8000fba:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fbc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000fbe:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf54      	ite	pl
 8000fc6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fc8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fca:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fcc:	3301      	adds	r3, #1
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	f47f af45 	bne.w	8000e5e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fd4:	b005      	add	sp, #20
 8000fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	465e      	mov	r6, fp
 8000fdc:	e7d5      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fde:	2601      	movs	r6, #1
 8000fe0:	e7d3      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fe2:	2602      	movs	r6, #2
 8000fe4:	e7d1      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fe6:	2603      	movs	r6, #3
 8000fe8:	e7cf      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fea:	2604      	movs	r6, #4
 8000fec:	e7cd      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fee:	2605      	movs	r6, #5
 8000ff0:	e7cb      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000ff2:	2606      	movs	r6, #6
 8000ff4:	e7c9      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000ff6:	bf00      	nop
 8000ff8:	40013c00 	.word	0x40013c00
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40023800 	.word	0x40023800
 8001004:	40021400 	.word	0x40021400

08001008 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	b10a      	cbz	r2, 800100e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	6181      	str	r1, [r0, #24]
 800100c:	4770      	bx	lr
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	e7fb      	b.n	800100a <HAL_GPIO_WritePin+0x2>
	...

08001014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001018:	4604      	mov	r4, r0
 800101a:	b908      	cbnz	r0, 8001020 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
 800101e:	e03f      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001020:	6803      	ldr	r3, [r0, #0]
 8001022:	07dd      	lsls	r5, r3, #31
 8001024:	d410      	bmi.n	8001048 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	0798      	lsls	r0, r3, #30
 800102a:	d45a      	bmi.n	80010e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	071a      	lsls	r2, r3, #28
 8001030:	f100 809c 	bmi.w	800116c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	075b      	lsls	r3, r3, #29
 8001038:	f100 80ba 	bmi.w	80011b0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800103c:	69a0      	ldr	r0, [r4, #24]
 800103e:	2800      	cmp	r0, #0
 8001040:	f040 811b 	bne.w	800127a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001044:	2000      	movs	r0, #0
 8001046:	e02b      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001048:	4ba4      	ldr	r3, [pc, #656]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	f002 020c 	and.w	r2, r2, #12
 8001050:	2a04      	cmp	r2, #4
 8001052:	d007      	beq.n	8001064 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105a:	2a08      	cmp	r2, #8
 800105c:	d10a      	bne.n	8001074 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	0259      	lsls	r1, r3, #9
 8001062:	d507      	bpl.n	8001074 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	039a      	lsls	r2, r3, #14
 800106a:	d5dc      	bpl.n	8001026 <HAL_RCC_OscConfig+0x12>
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1d9      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
 8001072:	e7d3      	b.n	800101c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	4d99      	ldr	r5, [pc, #612]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d113      	bne.n	80010a6 <HAL_RCC_OscConfig+0x92>
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001086:	f7ff fab9 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4d94      	ldr	r5, [pc, #592]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800108c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	039b      	lsls	r3, r3, #14
 8001092:	d4c8      	bmi.n	8001026 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fab2 	bl	80005fc <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	2864      	cmp	r0, #100	; 0x64
 800109c:	d9f7      	bls.n	800108e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800109e:	2003      	movs	r0, #3
}
 80010a0:	b002      	add	sp, #8
 80010a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d104      	bne.n	80010b6 <HAL_RCC_OscConfig+0xa2>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	602b      	str	r3, [r5, #0]
 80010b4:	e7e3      	b.n	800107e <HAL_RCC_OscConfig+0x6a>
 80010b6:	682a      	ldr	r2, [r5, #0]
 80010b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010bc:	602a      	str	r2, [r5, #0]
 80010be:	682a      	ldr	r2, [r5, #0]
 80010c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1dd      	bne.n	8001086 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80010ca:	f7ff fa97 	bl	80005fc <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	039f      	lsls	r7, r3, #14
 80010d4:	d5a7      	bpl.n	8001026 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fa91 	bl	80005fc <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	2864      	cmp	r0, #100	; 0x64
 80010de:	d9f7      	bls.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010e0:	e7dd      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e2:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	f012 0f0c 	tst.w	r2, #12
 80010ea:	d007      	beq.n	80010fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	2a08      	cmp	r2, #8
 80010f4:	d111      	bne.n	800111a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	025e      	lsls	r6, r3, #9
 80010fa:	d40e      	bmi.n	800111a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fc:	4b77      	ldr	r3, [pc, #476]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	0795      	lsls	r5, r2, #30
 8001102:	d502      	bpl.n	800110a <HAL_RCC_OscConfig+0xf6>
 8001104:	68e2      	ldr	r2, [r4, #12]
 8001106:	2a01      	cmp	r2, #1
 8001108:	d188      	bne.n	800101c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6921      	ldr	r1, [r4, #16]
 800110e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001112:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001116:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	e788      	b.n	800102c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800111a:	68e2      	ldr	r2, [r4, #12]
 800111c:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x2cc>)
 800111e:	b1b2      	cbz	r2, 800114e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001124:	f7ff fa6a 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4d6c      	ldr	r5, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800112a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	0798      	lsls	r0, r3, #30
 8001130:	d507      	bpl.n	8001142 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	6922      	ldr	r2, [r4, #16]
 8001136:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800113a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	e774      	b.n	800102c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fa5b 	bl	80005fc <HAL_GetTick>
 8001146:	1b80      	subs	r0, r0, r6
 8001148:	2802      	cmp	r0, #2
 800114a:	d9ef      	bls.n	800112c <HAL_RCC_OscConfig+0x118>
 800114c:	e7a7      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800114e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff fa54 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	4d61      	ldr	r5, [pc, #388]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001156:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	0799      	lsls	r1, r3, #30
 800115c:	f57f af66 	bpl.w	800102c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fa4c 	bl	80005fc <HAL_GetTick>
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	2802      	cmp	r0, #2
 8001168:	d9f6      	bls.n	8001158 <HAL_RCC_OscConfig+0x144>
 800116a:	e798      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800116c:	6962      	ldr	r2, [r4, #20]
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_RCC_OscConfig+0x2d0>)
 8001170:	b17a      	cbz	r2, 8001192 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001176:	f7ff fa41 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4d58      	ldr	r5, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800117c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001180:	079f      	lsls	r7, r3, #30
 8001182:	f53f af57 	bmi.w	8001034 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fa39 	bl	80005fc <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x16a>
 8001190:	e785      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001192:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001194:	f7ff fa32 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4d50      	ldr	r5, [pc, #320]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800119a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800119e:	0798      	lsls	r0, r3, #30
 80011a0:	f57f af48 	bpl.w	8001034 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fa2a 	bl	80005fc <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9f6      	bls.n	800119c <HAL_RCC_OscConfig+0x188>
 80011ae:	e776      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80011b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011b8:	d128      	bne.n	800120c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4d45      	ldr	r5, [pc, #276]	; (80012e8 <HAL_RCC_OscConfig+0x2d4>)
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	05d9      	lsls	r1, r3, #23
 80011d6:	d51b      	bpl.n	8001210 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	68a3      	ldr	r3, [r4, #8]
 80011da:	4d40      	ldr	r5, [pc, #256]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d127      	bne.n	8001230 <HAL_RCC_OscConfig+0x21c>
 80011e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011e8:	f7ff fa08 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	4d3b      	ldr	r5, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80011ee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d539      	bpl.n	800126e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	f43f af1e 	beq.w	800103c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4a36      	ldr	r2, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001202:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	e717      	b.n	800103c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800120c:	2600      	movs	r6, #0
 800120e:	e7df      	b.n	80011d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001218:	f7ff f9f0 	bl	80005fc <HAL_GetTick>
 800121c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	05da      	lsls	r2, r3, #23
 8001222:	d4d9      	bmi.n	80011d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001224:	f7ff f9ea 	bl	80005fc <HAL_GetTick>
 8001228:	1bc0      	subs	r0, r0, r7
 800122a:	2802      	cmp	r0, #2
 800122c:	d9f7      	bls.n	800121e <HAL_RCC_OscConfig+0x20a>
 800122e:	e736      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	2b05      	cmp	r3, #5
 8001232:	d104      	bne.n	800123e <HAL_RCC_OscConfig+0x22a>
 8001234:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	672b      	str	r3, [r5, #112]	; 0x70
 800123c:	e7d0      	b.n	80011e0 <HAL_RCC_OscConfig+0x1cc>
 800123e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	672a      	str	r2, [r5, #112]	; 0x70
 8001246:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ca      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001252:	f7ff f9d3 	bl	80005fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800125a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800125e:	0798      	lsls	r0, r3, #30
 8001260:	d5cb      	bpl.n	80011fa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff f9cb 	bl	80005fc <HAL_GetTick>
 8001266:	1bc0      	subs	r0, r0, r7
 8001268:	4540      	cmp	r0, r8
 800126a:	d9f7      	bls.n	800125c <HAL_RCC_OscConfig+0x248>
 800126c:	e717      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff f9c5 	bl	80005fc <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	4540      	cmp	r0, r8
 8001276:	d9bd      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1e0>
 8001278:	e711      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127a:	4d18      	ldr	r5, [pc, #96]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 800127c:	68ab      	ldr	r3, [r5, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d047      	beq.n	8001316 <HAL_RCC_OscConfig+0x302>
 8001286:	4e19      	ldr	r6, [pc, #100]	; (80012ec <HAL_RCC_OscConfig+0x2d8>)
 8001288:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800128c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	d135      	bne.n	80012fc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001290:	f7ff f9b4 	bl	80005fc <HAL_GetTick>
 8001294:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	0199      	lsls	r1, r3, #6
 800129a:	d429      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800129c:	6a22      	ldr	r2, [r4, #32]
 800129e:	69e3      	ldr	r3, [r4, #28]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b2:	0852      	lsrs	r2, r2, #1
 80012b4:	3a01      	subs	r2, #1
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012bc:	2301      	movs	r3, #1
 80012be:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012c0:	f7ff f99c 	bl	80005fc <HAL_GetTick>
 80012c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	019a      	lsls	r2, r3, #6
 80012ca:	f53f aebb 	bmi.w	8001044 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff f995 	bl	80005fc <HAL_GetTick>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2b2>
 80012d8:	e6e1      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
 80012e8:	40007000 	.word	0x40007000
 80012ec:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff f984 	bl	80005fc <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9cd      	bls.n	8001296 <HAL_RCC_OscConfig+0x282>
 80012fa:	e6d0      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80012fc:	f7ff f97e 	bl	80005fc <HAL_GetTick>
 8001300:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	f57f ae9d 	bpl.w	8001044 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff f977 	bl	80005fc <HAL_GetTick>
 800130e:	1b00      	subs	r0, r0, r4
 8001310:	2802      	cmp	r0, #2
 8001312:	d9f6      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ee>
 8001314:	e6c3      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001316:	2801      	cmp	r0, #1
 8001318:	f43f aec2 	beq.w	80010a0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 800131c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	69e3      	ldr	r3, [r4, #28]
 8001320:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001324:	429a      	cmp	r2, r3
 8001326:	f47f ae79 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
 800132a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800132c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	4293      	cmp	r3, r2
 8001332:	f47f ae73 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001336:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800133c:	4003      	ands	r3, r0
 800133e:	4293      	cmp	r3, r2
 8001340:	f47f ae6c 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001344:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001346:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800134a:	4293      	cmp	r3, r2
 800134c:	f47f ae66 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001350:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001352:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001356:	1ac0      	subs	r0, r0, r3
 8001358:	bf18      	it	ne
 800135a:	2001      	movne	r0, #1
 800135c:	e6a0      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
 800135e:	bf00      	nop

08001360 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001360:	4913      	ldr	r1, [pc, #76]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001362:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	688b      	ldr	r3, [r1, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x16>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001374:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001378:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001380:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001384:	bf14      	ite	ne
 8001386:	480c      	ldrne	r0, [pc, #48]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001388:	480a      	ldreq	r0, [pc, #40]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800138e:	bf18      	it	ne
 8001390:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001392:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001396:	fba1 0100 	umull	r0, r1, r1, r0
 800139a:	f7fe ff81 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x50>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013a6:	3301      	adds	r3, #1
 80013a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	00f42400 	.word	0x00f42400
 80013b8:	007a1200 	.word	0x007a1200

080013bc <HAL_RCC_ClockConfig>:
{
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013c2:	4604      	mov	r4, r0
 80013c4:	b910      	cbnz	r0, 80013cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013c6:	2001      	movs	r0, #1
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_ClockConfig+0x124>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f002 020f 	and.w	r2, r2, #15
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d329      	bcc.n	800142c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	078f      	lsls	r7, r1, #30
 80013dc:	d42e      	bmi.n	800143c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013de:	07c8      	lsls	r0, r1, #31
 80013e0:	d441      	bmi.n	8001466 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <HAL_RCC_ClockConfig+0x124>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f002 020f 	and.w	r2, r2, #15
 80013ea:	4295      	cmp	r5, r2
 80013ec:	d367      	bcc.n	80014be <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	0751      	lsls	r1, r2, #29
 80013f2:	d46d      	bmi.n	80014d0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	0713      	lsls	r3, r2, #28
 80013f6:	d507      	bpl.n	8001408 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f8:	4a3a      	ldr	r2, [pc, #232]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 80013fa:	6921      	ldr	r1, [r4, #16]
 80013fc:	6893      	ldr	r3, [r2, #8]
 80013fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001402:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001406:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001408:	f7ff ffaa 	bl	8001360 <HAL_RCC_GetSysClockFreq>
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 800140e:	4a36      	ldr	r2, [pc, #216]	; (80014e8 <HAL_RCC_ClockConfig+0x12c>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	40d8      	lsrs	r0, r3
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x130>)
 800141c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_ClockConfig+0x134>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f008 fbb9 	bl	8009b98 <HAL_InitTick>
  return HAL_OK;
 8001426:	2000      	movs	r0, #0
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4299      	cmp	r1, r3
 8001438:	d1c5      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xa>
 800143a:	e7cd      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1c>
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001442:	bf1e      	ittt	ne
 8001444:	689a      	ldrne	r2, [r3, #8]
 8001446:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800144a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800144e:	bf42      	ittt	mi
 8001450:	689a      	ldrmi	r2, [r3, #8]
 8001452:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001456:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	68a0      	ldr	r0, [r4, #8]
 800145c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001460:	4302      	orrs	r2, r0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e7bb      	b.n	80013de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	6862      	ldr	r2, [r4, #4]
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 800146a:	2a01      	cmp	r2, #1
 800146c:	d11d      	bne.n	80014aa <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	d0a7      	beq.n	80013c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4e1b      	ldr	r6, [pc, #108]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 8001478:	68b3      	ldr	r3, [r6, #8]
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	4313      	orrs	r3, r2
 8001480:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001482:	f7ff f8bb 	bl	80005fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001486:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800148a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148c:	68b3      	ldr	r3, [r6, #8]
 800148e:	6862      	ldr	r2, [r4, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001498:	d0a3      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149a:	f7ff f8af 	bl	80005fc <HAL_GetTick>
 800149e:	1bc0      	subs	r0, r0, r7
 80014a0:	4540      	cmp	r0, r8
 80014a2:	d9f3      	bls.n	800148c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
}
 80014a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	1e91      	subs	r1, r2, #2
 80014ac:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b0:	d802      	bhi.n	80014b8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b6:	e7dd      	b.n	8001474 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	f013 0f02 	tst.w	r3, #2
 80014bc:	e7da      	b.n	8001474 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	b2ea      	uxtb	r2, r5
 80014c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	429d      	cmp	r5, r3
 80014ca:	f47f af7c 	bne.w	80013c6 <HAL_RCC_ClockConfig+0xa>
 80014ce:	e78e      	b.n	80013ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 80014d2:	68e0      	ldr	r0, [r4, #12]
 80014d4:	688b      	ldr	r3, [r1, #8]
 80014d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014da:	4303      	orrs	r3, r0
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	e789      	b.n	80013f4 <HAL_RCC_ClockConfig+0x38>
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	0800d3d6 	.word	0x0800d3d6
 80014ec:	20000014 	.word	0x20000014
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <HAL_RCC_GetHCLKFreq+0x8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000014 	.word	0x20000014

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800150e:	6810      	ldr	r0, [r2, #0]
}
 8001510:	40d8      	lsrs	r0, r3
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	0800d3e6 	.word	0x0800d3e6
 800151c:	20000014 	.word	0x20000014

08001520 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001520:	230f      	movs	r3, #15
 8001522:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_GetClockConfig+0x34>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001534:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800153c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001546:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_RCC_GetClockConfig+0x38>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	600b      	str	r3, [r1, #0]
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_TIM_Base_MspInit>:
 800155c:	4770      	bx	lr

0800155e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800155e:	6803      	ldr	r3, [r0, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800156e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001570:	bf1e      	ittt	ne
 8001572:	681a      	ldrne	r2, [r3, #0]
 8001574:	f042 0201 	orrne.w	r2, r2, #1
 8001578:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800157a:	2000      	movs	r0, #0
 800157c:	4770      	bx	lr

0800157e <HAL_TIM_OC_DelayElapsedCallback>:
 800157e:	4770      	bx	lr

08001580 <HAL_TIM_IC_CaptureCallback>:
 8001580:	4770      	bx	lr

08001582 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001582:	4770      	bx	lr

08001584 <HAL_TIM_TriggerCallback>:
 8001584:	4770      	bx	lr

08001586 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001586:	6803      	ldr	r3, [r0, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	0791      	lsls	r1, r2, #30
{
 800158c:	b510      	push	{r4, lr}
 800158e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001590:	d50e      	bpl.n	80015b0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	0792      	lsls	r2, r2, #30
 8001596:	d50b      	bpl.n	80015b0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001598:	f06f 0202 	mvn.w	r2, #2
 800159c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800159e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015a0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015a4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a6:	d077      	beq.n	8001698 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015a8:	f7ff ffea 	bl	8001580 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ac:	2300      	movs	r3, #0
 80015ae:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	0750      	lsls	r0, r2, #29
 80015b6:	d510      	bpl.n	80015da <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	0751      	lsls	r1, r2, #29
 80015bc:	d50d      	bpl.n	80015da <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015be:	f06f 0204 	mvn.w	r2, #4
 80015c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015c6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015cc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ce:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d0:	d068      	beq.n	80016a4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80015d2:	f7ff ffd5 	bl	8001580 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d6:	2300      	movs	r3, #0
 80015d8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	0712      	lsls	r2, r2, #28
 80015e0:	d50f      	bpl.n	8001602 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	0710      	lsls	r0, r2, #28
 80015e6:	d50c      	bpl.n	8001602 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015e8:	f06f 0208 	mvn.w	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f8:	d05a      	beq.n	80016b0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	f7ff ffc1 	bl	8001580 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	2300      	movs	r3, #0
 8001600:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	06d2      	lsls	r2, r2, #27
 8001608:	d510      	bpl.n	800162c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	06d0      	lsls	r0, r2, #27
 800160e:	d50d      	bpl.n	800162c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001610:	f06f 0210 	mvn.w	r2, #16
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001616:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001618:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800161a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800161e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001620:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001622:	d04b      	beq.n	80016bc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001624:	f7ff ffac 	bl	8001580 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001628:	2300      	movs	r3, #0
 800162a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	07d1      	lsls	r1, r2, #31
 8001632:	d508      	bpl.n	8001646 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	07d2      	lsls	r2, r2, #31
 8001638:	d505      	bpl.n	8001646 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800163a:	f06f 0201 	mvn.w	r2, #1
 800163e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001640:	4620      	mov	r0, r4
 8001642:	f008 fa7d 	bl	8009b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	0610      	lsls	r0, r2, #24
 800164c:	d508      	bpl.n	8001660 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	0611      	lsls	r1, r2, #24
 8001652:	d505      	bpl.n	8001660 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800165a:	4620      	mov	r0, r4
 800165c:	f000 f8b7 	bl	80017ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	0652      	lsls	r2, r2, #25
 8001666:	d508      	bpl.n	800167a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	0650      	lsls	r0, r2, #25
 800166c:	d505      	bpl.n	800167a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800166e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ff85 	bl	8001584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	0691      	lsls	r1, r2, #26
 8001680:	d522      	bpl.n	80016c8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	0692      	lsls	r2, r2, #26
 8001686:	d51f      	bpl.n	80016c8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001688:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800168c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800168e:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001694:	f000 b89a 	b.w	80017cc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001698:	f7ff ff71 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff ff70 	bl	8001582 <HAL_TIM_PWM_PulseFinishedCallback>
 80016a2:	e783      	b.n	80015ac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a4:	f7ff ff6b 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff ff6a 	bl	8001582 <HAL_TIM_PWM_PulseFinishedCallback>
 80016ae:	e792      	b.n	80015d6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b0:	f7ff ff65 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7ff ff64 	bl	8001582 <HAL_TIM_PWM_PulseFinishedCallback>
 80016ba:	e7a0      	b.n	80015fe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016bc:	f7ff ff5f 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff ff5e 	bl	8001582 <HAL_TIM_PWM_PulseFinishedCallback>
 80016c6:	e7af      	b.n	8001628 <HAL_TIM_IRQHandler+0xa2>
 80016c8:	bd10      	pop	{r4, pc}
	...

080016cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016cc:	4a30      	ldr	r2, [pc, #192]	; (8001790 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80016ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016d0:	4290      	cmp	r0, r2
 80016d2:	d012      	beq.n	80016fa <TIM_Base_SetConfig+0x2e>
 80016d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016d8:	d00f      	beq.n	80016fa <TIM_Base_SetConfig+0x2e>
 80016da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016de:	4290      	cmp	r0, r2
 80016e0:	d00b      	beq.n	80016fa <TIM_Base_SetConfig+0x2e>
 80016e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e6:	4290      	cmp	r0, r2
 80016e8:	d007      	beq.n	80016fa <TIM_Base_SetConfig+0x2e>
 80016ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d003      	beq.n	80016fa <TIM_Base_SetConfig+0x2e>
 80016f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016f6:	4290      	cmp	r0, r2
 80016f8:	d119      	bne.n	800172e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001700:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <TIM_Base_SetConfig+0xc4>)
 8001704:	4290      	cmp	r0, r2
 8001706:	d029      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001708:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800170c:	d026      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 800170e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001712:	4290      	cmp	r0, r2
 8001714:	d022      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800171a:	4290      	cmp	r0, r2
 800171c:	d01e      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 800171e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001722:	4290      	cmp	r0, r2
 8001724:	d01a      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001726:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800172a:	4290      	cmp	r0, r2
 800172c:	d016      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <TIM_Base_SetConfig+0xc8>)
 8001730:	4290      	cmp	r0, r2
 8001732:	d013      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001738:	4290      	cmp	r0, r2
 800173a:	d00f      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 800173c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001740:	4290      	cmp	r0, r2
 8001742:	d00b      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001744:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001748:	4290      	cmp	r0, r2
 800174a:	d007      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 800174c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001750:	4290      	cmp	r0, r2
 8001752:	d003      	beq.n	800175c <TIM_Base_SetConfig+0x90>
 8001754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001758:	4290      	cmp	r0, r2
 800175a:	d103      	bne.n	8001764 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800175c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800175e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001762:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001764:	694a      	ldr	r2, [r1, #20]
 8001766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800176a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800176c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800176e:	688b      	ldr	r3, [r1, #8]
 8001770:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001772:	680b      	ldr	r3, [r1, #0]
 8001774:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <TIM_Base_SetConfig+0xc4>)
 8001778:	4298      	cmp	r0, r3
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0xb8>
 800177c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001780:	4298      	cmp	r0, r3
 8001782:	d101      	bne.n	8001788 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001784:	690b      	ldr	r3, [r1, #16]
 8001786:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001788:	2301      	movs	r3, #1
 800178a:	6143      	str	r3, [r0, #20]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40010000 	.word	0x40010000
 8001794:	40014000 	.word	0x40014000

08001798 <HAL_TIM_Base_Init>:
{
 8001798:	b510      	push	{r4, lr}
  if (htim == NULL)
 800179a:	4604      	mov	r4, r0
 800179c:	b1a0      	cbz	r0, 80017c8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800179e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017a6:	b91b      	cbnz	r3, 80017b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017ac:	f7ff fed6 	bl	800155c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b6:	6820      	ldr	r0, [r4, #0]
 80017b8:	1d21      	adds	r1, r4, #4
 80017ba:	f7ff ff87 	bl	80016cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80017be:	2301      	movs	r3, #1
 80017c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017c4:	2000      	movs	r0, #0
 80017c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
}
 80017ca:	bd10      	pop	{r4, pc}

080017cc <HAL_TIMEx_CommutCallback>:
 80017cc:	4770      	bx	lr

080017ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	4770      	bx	lr

080017d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017d0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80017d2:	f001 fa71 	bl	8002cb8 <vTaskStartScheduler>
  
  return osOK;
}
 80017d6:	2000      	movs	r0, #0
 80017d8:	bd08      	pop	{r3, pc}

080017da <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017da:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80017de:	b10b      	cbz	r3, 80017e4 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80017e0:	f001 baae 	b.w	8002d40 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80017e4:	f001 baa6 	b.w	8002d34 <xTaskGetTickCount>

080017e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017ec:	6946      	ldr	r6, [r0, #20]
 80017ee:	692a      	ldr	r2, [r5, #16]
 80017f0:	6840      	ldr	r0, [r0, #4]
 80017f2:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80017f6:	460b      	mov	r3, r1
 80017f8:	b086      	sub	sp, #24
 80017fa:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017fc:	b176      	cbz	r6, 800181c <osThreadCreate+0x34>
 80017fe:	69ad      	ldr	r5, [r5, #24]
 8001800:	b165      	cbz	r5, 800181c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001802:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001804:	bf14      	ite	ne
 8001806:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001808:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800180a:	9502      	str	r5, [sp, #8]
 800180c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001810:	f001 f9ee 	bl	8002bf0 <xTaskCreateStatic>
 8001814:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001816:	9805      	ldr	r0, [sp, #20]
}
 8001818:	b006      	add	sp, #24
 800181a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800181c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800181e:	bf14      	ite	ne
 8001820:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001822:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001824:	ad05      	add	r5, sp, #20
 8001826:	b292      	uxth	r2, r2
 8001828:	e88d 0030 	stmia.w	sp, {r4, r5}
 800182c:	f001 fa17 	bl	8002c5e <xTaskCreate>
 8001830:	2801      	cmp	r0, #1
 8001832:	d0f0      	beq.n	8001816 <osThreadCreate+0x2e>
      return NULL;
 8001834:	2000      	movs	r0, #0
 8001836:	e7ef      	b.n	8001818 <osThreadCreate+0x30>

08001838 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001838:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800183a:	2800      	cmp	r0, #0
 800183c:	bf08      	it	eq
 800183e:	2001      	moveq	r0, #1
 8001840:	f001 fb90 	bl	8002f64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001844:	2000      	movs	r0, #0
 8001846:	bd08      	pop	{r3, pc}

08001848 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001848:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800184a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 800184c:	b109      	cbz	r1, 8001852 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800184e:	f000 bdf4 	b.w	800243a <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001852:	f000 bde7 	b.w	8002424 <xQueueCreateMutex>
	...

08001858 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001858:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800185a:	2400      	movs	r4, #0
 800185c:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800185e:	b1e0      	cbz	r0, 800189a <osMutexWait+0x42>
 8001860:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001864:	b1a3      	cbz	r3, 8001890 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001866:	aa01      	add	r2, sp, #4
 8001868:	4621      	mov	r1, r4
 800186a:	f001 f80f 	bl	800288c <xQueueReceiveFromISR>
 800186e:	2801      	cmp	r0, #1
 8001870:	d002      	beq.n	8001878 <osMutexWait+0x20>
      return osErrorOS;
 8001872:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001874:	b002      	add	sp, #8
 8001876:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	b13b      	cbz	r3, 800188c <osMutexWait+0x34>
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <osMutexWait+0x48>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
  return osOK;
 800188c:	2000      	movs	r0, #0
 800188e:	e7f1      	b.n	8001874 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001890:	f000 ff3c 	bl	800270c <xQueueSemaphoreTake>
 8001894:	2801      	cmp	r0, #1
 8001896:	d1ec      	bne.n	8001872 <osMutexWait+0x1a>
 8001898:	e7f8      	b.n	800188c <osMutexWait+0x34>
    return osErrorParameter;
 800189a:	2080      	movs	r0, #128	; 0x80
 800189c:	e7ea      	b.n	8001874 <osMutexWait+0x1c>
 800189e:	bf00      	nop
 80018a0:	e000ed04 	.word	0xe000ed04

080018a4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80018a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80018a6:	6844      	ldr	r4, [r0, #4]
{ 
 80018a8:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 80018aa:	b16c      	cbz	r4, 80018c8 <osSemaphoreCreate+0x24>
    if (count == 1) {
 80018ac:	2901      	cmp	r1, #1
 80018ae:	d11b      	bne.n	80018e8 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80018b0:	2303      	movs	r3, #3
 80018b2:	2200      	movs	r2, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4628      	mov	r0, r5
 80018b8:	4623      	mov	r3, r4
 80018ba:	4611      	mov	r1, r2
 80018bc:	f000 fc84 	bl	80021c8 <xQueueGenericCreateStatic>
 80018c0:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 80018c2:	4628      	mov	r0, r5
 80018c4:	b003      	add	sp, #12
 80018c6:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 80018c8:	2901      	cmp	r1, #1
 80018ca:	d10f      	bne.n	80018ec <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 80018cc:	4628      	mov	r0, r5
 80018ce:	2203      	movs	r2, #3
 80018d0:	4621      	mov	r1, r4
 80018d2:	f000 fcc2 	bl	800225a <xQueueGenericCreate>
 80018d6:	4605      	mov	r5, r0
 80018d8:	2800      	cmp	r0, #0
 80018da:	d0f2      	beq.n	80018c2 <osSemaphoreCreate+0x1e>
 80018dc:	4623      	mov	r3, r4
 80018de:	4622      	mov	r2, r4
 80018e0:	4621      	mov	r1, r4
 80018e2:	f000 fcdf 	bl	80022a4 <xQueueGenericSend>
 80018e6:	e7ec      	b.n	80018c2 <osSemaphoreCreate+0x1e>
      return NULL;
 80018e8:	2500      	movs	r5, #0
 80018ea:	e7ea      	b.n	80018c2 <osSemaphoreCreate+0x1e>
 80018ec:	4625      	mov	r5, r4
 80018ee:	e7e8      	b.n	80018c2 <osSemaphoreCreate+0x1e>

080018f0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80018f0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80018f2:	2400      	movs	r4, #0
 80018f4:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80018f6:	b1e0      	cbz	r0, 8001932 <osSemaphoreWait+0x42>
 80018f8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80018fc:	b1a3      	cbz	r3, 8001928 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80018fe:	aa01      	add	r2, sp, #4
 8001900:	4621      	mov	r1, r4
 8001902:	f000 ffc3 	bl	800288c <xQueueReceiveFromISR>
 8001906:	2801      	cmp	r0, #1
 8001908:	d002      	beq.n	8001910 <osSemaphoreWait+0x20>
      return osErrorOS;
 800190a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800190c:	b002      	add	sp, #8
 800190e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	b13b      	cbz	r3, 8001924 <osSemaphoreWait+0x34>
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <osSemaphoreWait+0x48>)
 8001916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	f3bf 8f6f 	isb	sy
  return osOK;
 8001924:	2000      	movs	r0, #0
 8001926:	e7f1      	b.n	800190c <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001928:	f000 fef0 	bl	800270c <xQueueSemaphoreTake>
 800192c:	2801      	cmp	r0, #1
 800192e:	d1ec      	bne.n	800190a <osSemaphoreWait+0x1a>
 8001930:	e7f8      	b.n	8001924 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001932:	2080      	movs	r0, #128	; 0x80
 8001934:	e7ea      	b.n	800190c <osSemaphoreWait+0x1c>
 8001936:	bf00      	nop
 8001938:	e000ed04 	.word	0xe000ed04

0800193c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800193c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800193e:	2400      	movs	r4, #0
 8001940:	9401      	str	r4, [sp, #4]
 8001942:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001946:	b193      	cbz	r3, 800196e <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001948:	a901      	add	r1, sp, #4
 800194a:	f000 fde6 	bl	800251a <xQueueGiveFromISR>
 800194e:	2801      	cmp	r0, #1
 8001950:	d113      	bne.n	800197a <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	b913      	cbnz	r3, 800195c <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001956:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001958:	b002      	add	sp, #8
 800195a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <osSemaphoreRelease+0x44>)
 800195e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	e7f3      	b.n	8001956 <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800196e:	461a      	mov	r2, r3
 8001970:	4619      	mov	r1, r3
 8001972:	f000 fc97 	bl	80022a4 <xQueueGenericSend>
 8001976:	2801      	cmp	r0, #1
 8001978:	d0ed      	beq.n	8001956 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800197a:	20ff      	movs	r0, #255	; 0xff
 800197c:	e7ec      	b.n	8001958 <osSemaphoreRelease+0x1c>
 800197e:	bf00      	nop
 8001980:	e000ed04 	.word	0xe000ed04

08001984 <osMutexRelease>:
 8001984:	f7ff bfda 	b.w	800193c <osSemaphoreRelease>

08001988 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001988:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800198a:	6882      	ldr	r2, [r0, #8]
 800198c:	b14a      	cbz	r2, 80019a2 <osMessageCreate+0x1a>
 800198e:	68c3      	ldr	r3, [r0, #12]
 8001990:	b13b      	cbz	r3, 80019a2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001992:	2100      	movs	r1, #0
 8001994:	9100      	str	r1, [sp, #0]
 8001996:	c803      	ldmia	r0, {r0, r1}
 8001998:	f000 fc16 	bl	80021c8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800199c:	b003      	add	sp, #12
 800199e:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80019a2:	c803      	ldmia	r0, {r0, r1}
 80019a4:	2200      	movs	r2, #0
}
 80019a6:	b003      	add	sp, #12
 80019a8:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80019ac:	f000 bc55 	b.w	800225a <xQueueGenericCreate>

080019b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80019b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80019b2:	2400      	movs	r4, #0
{
 80019b4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80019b6:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80019b8:	42a2      	cmp	r2, r4
 80019ba:	bf08      	it	eq
 80019bc:	2201      	moveq	r2, #1
 80019be:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80019c2:	b1ab      	cbz	r3, 80019f0 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80019c4:	4623      	mov	r3, r4
 80019c6:	aa03      	add	r2, sp, #12
 80019c8:	a901      	add	r1, sp, #4
 80019ca:	f000 fd44 	bl	8002456 <xQueueGenericSendFromISR>
 80019ce:	2801      	cmp	r0, #1
 80019d0:	d002      	beq.n	80019d8 <osMessagePut+0x28>
      return osErrorOS;
 80019d2:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80019d4:	b004      	add	sp, #16
 80019d6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	b13b      	cbz	r3, 80019ec <osMessagePut+0x3c>
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <osMessagePut+0x4c>)
 80019de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	f3bf 8f6f 	isb	sy
  return osOK;
 80019ec:	2000      	movs	r0, #0
 80019ee:	e7f1      	b.n	80019d4 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80019f0:	a901      	add	r1, sp, #4
 80019f2:	f000 fc57 	bl	80022a4 <xQueueGenericSend>
 80019f6:	2801      	cmp	r0, #1
 80019f8:	d1eb      	bne.n	80019d2 <osMessagePut+0x22>
 80019fa:	e7f7      	b.n	80019ec <osMessagePut+0x3c>
 80019fc:	e000ed04 	.word	0xe000ed04

08001a00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001a04:	2600      	movs	r6, #0
{
 8001a06:	4604      	mov	r4, r0
 8001a08:	4617      	mov	r7, r2
 8001a0a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001a0c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001a0e:	9602      	str	r6, [sp, #8]
 8001a10:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8001a12:	b911      	cbnz	r1, 8001a1a <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8001a14:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	e017      	b.n	8001a4a <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001a1a:	9600      	str	r6, [sp, #0]
 8001a1c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001a20:	b1d3      	cbz	r3, 8001a58 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001a22:	466a      	mov	r2, sp
 8001a24:	a902      	add	r1, sp, #8
 8001a26:	f000 ff31 	bl	800288c <xQueueReceiveFromISR>
 8001a2a:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8001a2c:	bf04      	itt	eq
 8001a2e:	2310      	moveq	r3, #16
 8001a30:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001a32:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8001a34:	bf18      	it	ne
 8001a36:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001a38:	b13b      	cbz	r3, 8001a4a <osMessageGet+0x4a>
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <osMessageGet+0x70>)
 8001a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8001a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a52:	4620      	mov	r0, r4
 8001a54:	b005      	add	sp, #20
 8001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001a58:	a902      	add	r1, sp, #8
 8001a5a:	f000 fdb3 	bl	80025c4 <xQueueReceive>
 8001a5e:	2801      	cmp	r0, #1
 8001a60:	d101      	bne.n	8001a66 <osMessageGet+0x66>
      event.status = osEventMessage;
 8001a62:	2310      	movs	r3, #16
 8001a64:	e7d7      	b.n	8001a16 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001a66:	2f00      	cmp	r7, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	2340      	movne	r3, #64	; 0x40
 8001a6e:	e7d2      	b.n	8001a16 <osMessageGet+0x16>
 8001a70:	e000ed04 	.word	0xe000ed04

08001a74 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a74:	f100 0308 	add.w	r3, r0, #8
 8001a78:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a7a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a7e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a80:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a82:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a84:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a86:	6003      	str	r3, [r0, #0]
 8001a88:	4770      	bx	lr

08001a8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6103      	str	r3, [r0, #16]
 8001a8e:	4770      	bx	lr

08001a90 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a90:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a92:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a9c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001a9e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001aa0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	6003      	str	r3, [r0, #0]
 8001aa6:	4770      	bx	lr

08001aa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001aa8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001aaa:	1c53      	adds	r3, r2, #1
{
 8001aac:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001aae:	d10a      	bne.n	8001ac6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ab0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ab6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001aba:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001abc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001abe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	6003      	str	r3, [r0, #0]
 8001ac4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac6:	f100 0308 	add.w	r3, r0, #8
 8001aca:	685c      	ldr	r4, [r3, #4]
 8001acc:	6825      	ldr	r5, [r4, #0]
 8001ace:	42aa      	cmp	r2, r5
 8001ad0:	d3ef      	bcc.n	8001ab2 <vListInsert+0xa>
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	e7f9      	b.n	8001aca <vListInsert+0x22>

08001ad6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ad6:	6841      	ldr	r1, [r0, #4]
 8001ad8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ada:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001adc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ade:	6882      	ldr	r2, [r0, #8]
 8001ae0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ae6:	bf08      	it	eq
 8001ae8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001aea:	2200      	movs	r2, #0
 8001aec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	3a01      	subs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001af4:	6818      	ldr	r0, [r3, #0]
}
 8001af6:	4770      	bx	lr

08001af8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001af8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <prvTaskExitError+0x3c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	d008      	beq.n	8001b18 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	e7fe      	b.n	8001b16 <prvTaskExitError+0x1e>
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001b28:	9b01      	ldr	r3, [sp, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0fc      	beq.n	8001b28 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001b2e:	b002      	add	sp, #8
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <prvPortStartFirstTask+0x24>)
 8001b3a:	6800      	ldr	r0, [r0, #0]
 8001b3c:	6800      	ldr	r0, [r0, #0]
 8001b3e:	f380 8808 	msr	MSP, r0
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f380 8814 	msr	CONTROL, r0
 8001b4a:	b662      	cpsie	i
 8001b4c:	b661      	cpsie	f
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	df00      	svc	0
 8001b58:	bf00      	nop
 8001b5a:	0000      	.short	0x0000
 8001b5c:	e000ed08 	.word	0xe000ed08

08001b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b70 <vPortEnableVFP+0x10>
 8001b64:	6801      	ldr	r1, [r0, #0]
 8001b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b6a:	6001      	str	r1, [r0, #0]
 8001b6c:	4770      	bx	lr
 8001b6e:	0000      	.short	0x0000
 8001b70:	e000ed88 	.word	0xe000ed88

08001b74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <pxPortInitialiseStack+0x28>)
 8001b7e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001b82:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001b86:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001b8a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001b8e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001b92:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001b96:	3844      	subs	r0, #68	; 0x44
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	08001af9 	.word	0x08001af9

08001ba0 <SVC_Handler>:
	__asm volatile (
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <pxCurrentTCBConst2>)
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	6808      	ldr	r0, [r1, #0]
 8001ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001baa:	f380 8809 	msr	PSP, r0
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f04f 0000 	mov.w	r0, #0
 8001bb6:	f380 8811 	msr	BASEPRI, r0
 8001bba:	4770      	bx	lr
 8001bbc:	f3af 8000 	nop.w

08001bc0 <pxCurrentTCBConst2>:
 8001bc0:	20003cb8 	.word	0x20003cb8

08001bc4 <vPortEnterCritical>:
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <vPortEnterCritical+0x3c>)
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001bda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001bdc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001bde:	d10d      	bne.n	8001bfc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <vPortEnterCritical+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001be8:	d008      	beq.n	8001bfc <vPortEnterCritical+0x38>
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	e7fe      	b.n	8001bfa <vPortEnterCritical+0x36>
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008
 8001c04:	e000ed04 	.word	0xe000ed04

08001c08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <vPortExitCritical+0x24>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	b943      	cbnz	r3, 8001c20 <vPortExitCritical+0x18>
 8001c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	e7fe      	b.n	8001c1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001c20:	3b01      	subs	r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001c24:	b90b      	cbnz	r3, 8001c2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	4770      	bx	lr
 8001c2c:	20000008 	.word	0x20000008

08001c30 <PendSV_Handler>:
	__asm volatile
 8001c30:	f3ef 8009 	mrs	r0, PSP
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <pxCurrentTCBConst>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	f01e 0f10 	tst.w	lr, #16
 8001c40:	bf08      	it	eq
 8001c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c4a:	6010      	str	r0, [r2, #0]
 8001c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001c54:	f380 8811 	msr	BASEPRI, r0
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f001 f9a4 	bl	8002fac <vTaskSwitchContext>
 8001c64:	f04f 0000 	mov.w	r0, #0
 8001c68:	f380 8811 	msr	BASEPRI, r0
 8001c6c:	bc09      	pop	{r0, r3}
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	6808      	ldr	r0, [r1, #0]
 8001c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c76:	f01e 0f10 	tst.w	lr, #16
 8001c7a:	bf08      	it	eq
 8001c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001c80:	f380 8809 	msr	PSP, r0
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w

08001c90 <pxCurrentTCBConst>:
 8001c90:	20003cb8 	.word	0x20003cb8

08001c94 <SysTick_Handler>:
{
 8001c94:	b508      	push	{r3, lr}
	__asm volatile
 8001c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9a:	f383 8811 	msr	BASEPRI, r3
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001ca6:	f001 f853 	bl	8002d50 <xTaskIncrementTick>
 8001caa:	b118      	cbz	r0, 8001cb4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <SysTick_Handler+0x28>)
 8001cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	bd08      	pop	{r3, pc}
 8001cbc:	e000ed04 	.word	0xe000ed04

08001cc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001cc2:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001cc8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <vPortSetupTimerInterrupt+0x2c>)
 8001ccc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <vPortSetupTimerInterrupt+0x30>)
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001cdc:	2307      	movs	r3, #7
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010
 8001ce8:	e000e018 	.word	0xe000e018
 8001cec:	20000014 	.word	0x20000014
 8001cf0:	e000e014 	.word	0xe000e014

08001cf4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001cf4:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <xPortStartScheduler+0xe8>)
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <xPortStartScheduler+0xec>)
{
 8001cf8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	4291      	cmp	r1, r2
 8001cfe:	d108      	bne.n	8001d12 <xPortStartScheduler+0x1e>
	__asm volatile
 8001d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	e7fe      	b.n	8001d10 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <xPortStartScheduler+0xf0>)
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d108      	bne.n	8001d2c <xPortStartScheduler+0x38>
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	e7fe      	b.n	8001d2a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <xPortStartScheduler+0xf4>)
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d34:	22ff      	movs	r2, #255	; 0xff
 8001d36:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d38:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001d46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d4a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <xPortStartScheduler+0xfc>)
 8001d4e:	2207      	movs	r2, #7
 8001d50:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d52:	2100      	movs	r1, #0
 8001d54:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001d58:	0600      	lsls	r0, r0, #24
 8001d5a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001d5e:	d40d      	bmi.n	8001d7c <xPortStartScheduler+0x88>
 8001d60:	b101      	cbz	r1, 8001d64 <xPortStartScheduler+0x70>
 8001d62:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2a03      	cmp	r2, #3
 8001d68:	d011      	beq.n	8001d8e <xPortStartScheduler+0x9a>
 8001d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	e7fe      	b.n	8001d7a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001d7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001d80:	0052      	lsls	r2, r2, #1
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f88d 2003 	strb.w	r2, [sp, #3]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	e7e2      	b.n	8001d54 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d8e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001d94:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001d96:	9b01      	ldr	r3, [sp, #4]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <xPortStartScheduler+0xf4>)
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <xPortStartScheduler+0x100>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001da6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001dae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001db0:	f7ff ff86 	bl	8001cc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <xPortStartScheduler+0x104>)
 8001db6:	2400      	movs	r4, #0
 8001db8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001dba:	f7ff fed1 	bl	8001b60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <xPortStartScheduler+0x108>)
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001dc6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001dc8:	f7ff feb6 	bl	8001b38 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001dcc:	f001 f8ee 	bl	8002fac <vTaskSwitchContext>
	prvTaskExitError();
 8001dd0:	f7ff fe92 	bl	8001af8 <prvTaskExitError>
}
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd10      	pop	{r4, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00
 8001de0:	410fc271 	.word	0x410fc271
 8001de4:	410fc270 	.word	0x410fc270
 8001de8:	e000e400 	.word	0xe000e400
 8001dec:	20000098 	.word	0x20000098
 8001df0:	2000009c 	.word	0x2000009c
 8001df4:	e000ed20 	.word	0xe000ed20
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	e000ef34 	.word	0xe000ef34

08001e00 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001e00:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d90e      	bls.n	8001e26 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <vPortValidateInterruptPriority+0x4c>)
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001e0c:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <vPortValidateInterruptPriority+0x50>)
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <vPortValidateInterruptPriority+0x26>
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	e7fe      	b.n	8001e24 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <vPortValidateInterruptPriority+0x54>)
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <vPortValidateInterruptPriority+0x58>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d908      	bls.n	8001e48 <vPortValidateInterruptPriority+0x48>
 8001e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	e7fe      	b.n	8001e46 <vPortValidateInterruptPriority+0x46>
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e3f0 	.word	0xe000e3f0
 8001e50:	20000098 	.word	0x20000098
 8001e54:	e000ed0c 	.word	0xe000ed0c
 8001e58:	2000009c 	.word	0x2000009c

08001e5c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e5c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <prvInsertBlockIntoFreeList+0x40>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4282      	cmp	r2, r0
 8001e64:	d318      	bcc.n	8001e98 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e66:	685c      	ldr	r4, [r3, #4]
 8001e68:	1919      	adds	r1, r3, r4
 8001e6a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e6c:	bf01      	itttt	eq
 8001e6e:	6841      	ldreq	r1, [r0, #4]
 8001e70:	4618      	moveq	r0, r3
 8001e72:	1909      	addeq	r1, r1, r4
 8001e74:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e76:	6844      	ldr	r4, [r0, #4]
 8001e78:	1901      	adds	r1, r0, r4
 8001e7a:	428a      	cmp	r2, r1
 8001e7c:	d107      	bne.n	8001e8e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <prvInsertBlockIntoFreeList+0x44>)
 8001e80:	6809      	ldr	r1, [r1, #0]
 8001e82:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e84:	bf1f      	itttt	ne
 8001e86:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e88:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e8a:	1909      	addne	r1, r1, r4
 8001e8c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001e8e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e90:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e92:	bf18      	it	ne
 8001e94:	6018      	strne	r0, [r3, #0]
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	4613      	mov	r3, r2
 8001e9a:	e7e1      	b.n	8001e60 <prvInsertBlockIntoFreeList+0x4>
 8001e9c:	20003cb0 	.word	0x20003cb0
 8001ea0:	200000a0 	.word	0x200000a0

08001ea4 <pvPortMalloc>:
{
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001eaa:	f000 ff3b 	bl	8002d24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001eae:	493e      	ldr	r1, [pc, #248]	; (8001fa8 <pvPortMalloc+0x104>)
 8001eb0:	4d3e      	ldr	r5, [pc, #248]	; (8001fac <pvPortMalloc+0x108>)
 8001eb2:	680b      	ldr	r3, [r1, #0]
 8001eb4:	bb0b      	cbnz	r3, 8001efa <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001eb8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001eba:	bf1f      	itttt	ne
 8001ebc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ebe:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ec2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001ec6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ec8:	bf14      	ite	ne
 8001eca:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ecc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ed0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001ed2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ed4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ed8:	4e36      	ldr	r6, [pc, #216]	; (8001fb4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001eda:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001edc:	2000      	movs	r0, #0
 8001ede:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ee0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001ee2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ee4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ee6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ee8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eec:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001eee:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <pvPortMalloc+0x118>)
 8001ef2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ef8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001efa:	682f      	ldr	r7, [r5, #0]
 8001efc:	4227      	tst	r7, r4
 8001efe:	d116      	bne.n	8001f2e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d041      	beq.n	8001f88 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001f04:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f08:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f0a:	bf1c      	itt	ne
 8001f0c:	f023 0307 	bicne.w	r3, r3, #7
 8001f10:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f12:	b163      	cbz	r3, 8001f2e <pvPortMalloc+0x8a>
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <pvPortMalloc+0x118>)
 8001f16:	6816      	ldr	r6, [r2, #0]
 8001f18:	42b3      	cmp	r3, r6
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	d807      	bhi.n	8001f2e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001f1e:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <pvPortMalloc+0x110>)
 8001f20:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f22:	6868      	ldr	r0, [r5, #4]
 8001f24:	4283      	cmp	r3, r0
 8001f26:	d804      	bhi.n	8001f32 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001f28:	6809      	ldr	r1, [r1, #0]
 8001f2a:	428d      	cmp	r5, r1
 8001f2c:	d107      	bne.n	8001f3e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001f2e:	2400      	movs	r4, #0
 8001f30:	e02a      	b.n	8001f88 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f32:	682c      	ldr	r4, [r5, #0]
 8001f34:	2c00      	cmp	r4, #0
 8001f36:	d0f7      	beq.n	8001f28 <pvPortMalloc+0x84>
 8001f38:	462a      	mov	r2, r5
 8001f3a:	4625      	mov	r5, r4
 8001f3c:	e7f1      	b.n	8001f22 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f3e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f40:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f42:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f44:	1ac2      	subs	r2, r0, r3
 8001f46:	2a10      	cmp	r2, #16
 8001f48:	d90f      	bls.n	8001f6a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f4a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f4c:	0741      	lsls	r1, r0, #29
 8001f4e:	d008      	beq.n	8001f62 <pvPortMalloc+0xbe>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	e7fe      	b.n	8001f60 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f62:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f64:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f66:	f7ff ff79 	bl	8001e5c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f6a:	4913      	ldr	r1, [pc, #76]	; (8001fb8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f6c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f6e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f70:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f72:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f74:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001f76:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f7a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f7e:	bf38      	it	cc
 8001f80:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f82:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f84:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f86:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001f88:	f000 ff74 	bl	8002e74 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	d008      	beq.n	8001fa2 <pvPortMalloc+0xfe>
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	e7fe      	b.n	8001fa0 <pvPortMalloc+0xfc>
}
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa8:	200000a0 	.word	0x200000a0
 8001fac:	20003ca4 	.word	0x20003ca4
 8001fb0:	200000a4 	.word	0x200000a4
 8001fb4:	20003cb0 	.word	0x20003cb0
 8001fb8:	20003cac 	.word	0x20003cac
 8001fbc:	20003ca8 	.word	0x20003ca8

08001fc0 <vPortFree>:
{
 8001fc0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	b370      	cbz	r0, 8002024 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <vPortFree+0x68>)
 8001fc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4213      	tst	r3, r2
 8001fd0:	d108      	bne.n	8001fe4 <vPortFree+0x24>
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	e7fe      	b.n	8001fe2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fe4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001fe8:	b141      	cbz	r1, 8001ffc <vPortFree+0x3c>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	e7fe      	b.n	8001ffa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ffc:	ea23 0302 	bic.w	r3, r3, r2
 8002000:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002004:	f000 fe8e 	bl	8002d24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002008:	4a08      	ldr	r2, [pc, #32]	; (800202c <vPortFree+0x6c>)
 800200a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800200e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002010:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002014:	440b      	add	r3, r1
 8002016:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002018:	f7ff ff20 	bl	8001e5c <prvInsertBlockIntoFreeList>
}
 800201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002020:	f000 bf28 	b.w	8002e74 <xTaskResumeAll>
 8002024:	bd10      	pop	{r4, pc}
 8002026:	bf00      	nop
 8002028:	20003ca4 	.word	0x20003ca4
 800202c:	20003ca8 	.word	0x20003ca8

08002030 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002030:	b510      	push	{r4, lr}
 8002032:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002034:	f7ff fdc6 	bl	8001bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002038:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800203a:	f7ff fde5 	bl	8001c08 <vPortExitCritical>

	return xReturn;
}
 800203e:	fab4 f084 	clz	r0, r4
 8002042:	0940      	lsrs	r0, r0, #5
 8002044:	bd10      	pop	{r4, pc}

08002046 <prvCopyDataToQueue>:
{
 8002046:	b570      	push	{r4, r5, r6, lr}
 8002048:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800204a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800204c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800204e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002050:	b942      	cbnz	r2, 8002064 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002052:	6805      	ldr	r5, [r0, #0]
 8002054:	b99d      	cbnz	r5, 800207e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002056:	6840      	ldr	r0, [r0, #4]
 8002058:	f001 f8f0 	bl	800323c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800205c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800205e:	3601      	adds	r6, #1
 8002060:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002062:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002064:	b96d      	cbnz	r5, 8002082 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002066:	6880      	ldr	r0, [r0, #8]
 8002068:	f007 fe93 	bl	8009d92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800206c:	68a3      	ldr	r3, [r4, #8]
 800206e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002070:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002072:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002074:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002076:	4293      	cmp	r3, r2
 8002078:	d301      	bcc.n	800207e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800207e:	2000      	movs	r0, #0
 8002080:	e7ed      	b.n	800205e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002082:	68c0      	ldr	r0, [r0, #12]
 8002084:	f007 fe85 	bl	8009d92 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800208a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800208c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800208e:	425b      	negs	r3, r3
 8002090:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002092:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002094:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002096:	bf3e      	ittt	cc
 8002098:	6862      	ldrcc	r2, [r4, #4]
 800209a:	189b      	addcc	r3, r3, r2
 800209c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800209e:	2d02      	cmp	r5, #2
 80020a0:	d1ed      	bne.n	800207e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020a2:	b10e      	cbz	r6, 80020a8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80020a4:	3e01      	subs	r6, #1
 80020a6:	e7ea      	b.n	800207e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80020a8:	4630      	mov	r0, r6
 80020aa:	e7d8      	b.n	800205e <prvCopyDataToQueue+0x18>

080020ac <prvCopyDataFromQueue>:
{
 80020ac:	4603      	mov	r3, r0
 80020ae:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80020b2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020b4:	b162      	cbz	r2, 80020d0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80020b6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020b8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80020ba:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020bc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80020be:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80020c0:	bf24      	itt	cs
 80020c2:	6819      	ldrcs	r1, [r3, #0]
 80020c4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80020c6:	68d9      	ldr	r1, [r3, #12]
}
 80020c8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80020cc:	f007 be61 	b.w	8009d92 <memcpy>
}
 80020d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <prvUnlockQueue>:
{
 80020d6:	b570      	push	{r4, r5, r6, lr}
 80020d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80020da:	f7ff fd73 	bl	8001bc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80020de:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020e2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80020e6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020e8:	2d00      	cmp	r5, #0
 80020ea:	dc14      	bgt.n	8002116 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80020ec:	23ff      	movs	r3, #255	; 0xff
 80020ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80020f2:	f7ff fd89 	bl	8001c08 <vPortExitCritical>
	taskENTER_CRITICAL();
 80020f6:	f7ff fd65 	bl	8001bc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80020fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020fe:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002102:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002104:	2d00      	cmp	r5, #0
 8002106:	dc12      	bgt.n	800212e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800210e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002112:	f7ff bd79 	b.w	8001c08 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0e7      	beq.n	80020ec <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800211c:	4630      	mov	r0, r6
 800211e:	f000 ff99 	bl	8003054 <xTaskRemoveFromEventList>
 8002122:	b108      	cbz	r0, 8002128 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002124:	f001 f820 	bl	8003168 <vTaskMissedYield>
 8002128:	3d01      	subs	r5, #1
 800212a:	b26d      	sxtb	r5, r5
 800212c:	e7dc      	b.n	80020e8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800212e:	6923      	ldr	r3, [r4, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0e9      	beq.n	8002108 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002134:	4630      	mov	r0, r6
 8002136:	f000 ff8d 	bl	8003054 <xTaskRemoveFromEventList>
 800213a:	b108      	cbz	r0, 8002140 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800213c:	f001 f814 	bl	8003168 <vTaskMissedYield>
 8002140:	3d01      	subs	r5, #1
 8002142:	b26d      	sxtb	r5, r5
 8002144:	e7de      	b.n	8002104 <prvUnlockQueue+0x2e>
	...

08002148 <xQueueGenericReset>:
{
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800214c:	4604      	mov	r4, r0
 800214e:	b940      	cbnz	r0, 8002162 <xQueueGenericReset+0x1a>
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	e7fe      	b.n	8002160 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002162:	f7ff fd2f 	bl	8001bc4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002166:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800216a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800216c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800216e:	4343      	muls	r3, r0
 8002170:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002172:	1a1b      	subs	r3, r3, r0
 8002174:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002176:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002178:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800217a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800217c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800217e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002180:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002188:	b995      	cbnz	r5, 80021b0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	b163      	cbz	r3, 80021a8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800218e:	f104 0010 	add.w	r0, r4, #16
 8002192:	f000 ff5f 	bl	8003054 <xTaskRemoveFromEventList>
 8002196:	b138      	cbz	r0, 80021a8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <xQueueGenericReset+0x7c>)
 800219a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80021a8:	f7ff fd2e 	bl	8001c08 <vPortExitCritical>
}
 80021ac:	2001      	movs	r0, #1
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021b0:	f104 0010 	add.w	r0, r4, #16
 80021b4:	f7ff fc5e 	bl	8001a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021bc:	f7ff fc5a 	bl	8001a74 <vListInitialise>
 80021c0:	e7f2      	b.n	80021a8 <xQueueGenericReset+0x60>
 80021c2:	bf00      	nop
 80021c4:	e000ed04 	.word	0xe000ed04

080021c8 <xQueueGenericCreateStatic>:
	{
 80021c8:	b513      	push	{r0, r1, r4, lr}
 80021ca:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021cc:	b940      	cbnz	r0, 80021e0 <xQueueGenericCreateStatic+0x18>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	e7fe      	b.n	80021de <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80021e0:	b943      	cbnz	r3, 80021f4 <xQueueGenericCreateStatic+0x2c>
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	e7fe      	b.n	80021f2 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021f4:	b14a      	cbz	r2, 800220a <xQueueGenericCreateStatic+0x42>
 80021f6:	b9d9      	cbnz	r1, 8002230 <xQueueGenericCreateStatic+0x68>
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	e7fe      	b.n	8002208 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800220a:	b189      	cbz	r1, 8002230 <xQueueGenericCreateStatic+0x68>
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	e7fe      	b.n	800221c <xQueueGenericCreateStatic+0x54>
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	e7fe      	b.n	800222e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002230:	2348      	movs	r3, #72	; 0x48
 8002232:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002234:	9b01      	ldr	r3, [sp, #4]
 8002236:	2b48      	cmp	r3, #72	; 0x48
 8002238:	d1f1      	bne.n	800221e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800223a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800223c:	2900      	cmp	r1, #0
 800223e:	bf08      	it	eq
 8002240:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8002242:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002244:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002246:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800224a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800224c:	4619      	mov	r1, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff7a 	bl	8002148 <xQueueGenericReset>
	}
 8002254:	4620      	mov	r0, r4
 8002256:	b002      	add	sp, #8
 8002258:	bd10      	pop	{r4, pc}

0800225a <xQueueGenericCreate>:
	{
 800225a:	b570      	push	{r4, r5, r6, lr}
 800225c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800225e:	4606      	mov	r6, r0
 8002260:	b940      	cbnz	r0, 8002274 <xQueueGenericCreate+0x1a>
 8002262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	e7fe      	b.n	8002272 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002274:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002276:	3048      	adds	r0, #72	; 0x48
 8002278:	f7ff fe14 	bl	8001ea4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800227c:	4604      	mov	r4, r0
 800227e:	b150      	cbz	r0, 8002296 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002280:	2300      	movs	r3, #0
 8002282:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002286:	b945      	cbnz	r5, 800229a <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002288:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800228a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800228c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800228e:	2101      	movs	r1, #1
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff59 	bl	8002148 <xQueueGenericReset>
	}
 8002296:	4620      	mov	r0, r4
 8002298:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800229a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800229e:	6003      	str	r3, [r0, #0]
 80022a0:	e7f3      	b.n	800228a <xQueueGenericCreate+0x30>
	...

080022a4 <xQueueGenericSend>:
{
 80022a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022a8:	4689      	mov	r9, r1
 80022aa:	9201      	str	r2, [sp, #4]
 80022ac:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80022ae:	4604      	mov	r4, r0
 80022b0:	b940      	cbnz	r0, 80022c4 <xQueueGenericSend+0x20>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	e7fe      	b.n	80022c2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022c4:	2900      	cmp	r1, #0
 80022c6:	f040 8088 	bne.w	80023da <xQueueGenericSend+0x136>
 80022ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8084 	beq.w	80023da <xQueueGenericSend+0x136>
 80022d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	e7fe      	b.n	80022e2 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022e4:	9e01      	ldr	r6, [sp, #4]
 80022e6:	2e00      	cmp	r6, #0
 80022e8:	f000 8082 	beq.w	80023f0 <xQueueGenericSend+0x14c>
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022fe:	9d01      	ldr	r5, [sp, #4]
 8002300:	b91d      	cbnz	r5, 800230a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002302:	f7ff fc81 	bl	8001c08 <vPortExitCritical>
			return errQUEUE_FULL;
 8002306:	2000      	movs	r0, #0
 8002308:	e058      	b.n	80023bc <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800230a:	b916      	cbnz	r6, 8002312 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800230c:	a802      	add	r0, sp, #8
 800230e:	f000 fee3 	bl	80030d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002312:	f7ff fc79 	bl	8001c08 <vPortExitCritical>
		vTaskSuspendAll();
 8002316:	f000 fd05 	bl	8002d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800231a:	f7ff fc53 	bl	8001bc4 <vPortEnterCritical>
 800231e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	bf08      	it	eq
 8002326:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800232a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800232e:	2bff      	cmp	r3, #255	; 0xff
 8002330:	bf08      	it	eq
 8002332:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002336:	f7ff fc67 	bl	8001c08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800233a:	a901      	add	r1, sp, #4
 800233c:	a802      	add	r0, sp, #8
 800233e:	f000 fed7 	bl	80030f0 <xTaskCheckForTimeOut>
 8002342:	2800      	cmp	r0, #0
 8002344:	d143      	bne.n	80023ce <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002346:	f7ff fc3d 	bl	8001bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800234a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800234c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800234e:	f7ff fc5b 	bl	8001c08 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002352:	42ae      	cmp	r6, r5
 8002354:	d135      	bne.n	80023c2 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002356:	9901      	ldr	r1, [sp, #4]
 8002358:	f104 0010 	add.w	r0, r4, #16
 800235c:	f000 fe60 	bl	8003020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff feb8 	bl	80020d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002366:	f000 fd85 	bl	8002e74 <xTaskResumeAll>
 800236a:	b938      	cbnz	r0, 800237c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 800236c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002370:	f8ca 3000 	str.w	r3, [sl]
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800237e:	f7ff fc21 	bl	8001bc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002382:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002386:	429a      	cmp	r2, r3
 8002388:	d301      	bcc.n	800238e <xQueueGenericSend+0xea>
 800238a:	2f02      	cmp	r7, #2
 800238c:	d1b7      	bne.n	80022fe <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800238e:	463a      	mov	r2, r7
 8002390:	4649      	mov	r1, r9
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fe57 	bl	8002046 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800239a:	b11b      	cbz	r3, 80023a4 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800239c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023a0:	f000 fe58 	bl	8003054 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80023a4:	b138      	cbz	r0, 80023b6 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <xQueueGenericSend+0x168>)
 80023a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80023b6:	f7ff fc27 	bl	8001c08 <vPortExitCritical>
				return pdPASS;
 80023ba:	2001      	movs	r0, #1
}
 80023bc:	b004      	add	sp, #16
 80023be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fe87 	bl	80020d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023c8:	f000 fd54 	bl	8002e74 <xTaskResumeAll>
 80023cc:	e7d6      	b.n	800237c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fe81 	bl	80020d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023d4:	f000 fd4e 	bl	8002e74 <xTaskResumeAll>
 80023d8:	e795      	b.n	8002306 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023da:	2f02      	cmp	r7, #2
 80023dc:	d102      	bne.n	80023e4 <xQueueGenericSend+0x140>
 80023de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023e4:	f000 fec6 	bl	8003174 <xTaskGetSchedulerState>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	f43f af7b 	beq.w	80022e4 <xQueueGenericSend+0x40>
 80023ee:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80023f0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80023f4:	f8df a014 	ldr.w	sl, [pc, #20]	; 800240c <xQueueGenericSend+0x168>
 80023f8:	e7c1      	b.n	800237e <xQueueGenericSend+0xda>
 80023fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	e7fe      	b.n	800240a <xQueueGenericSend+0x166>
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002410:	b138      	cbz	r0, 8002422 <prvInitialiseMutex+0x12>
			pxNewQueue->pxMutexHolder = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002416:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002418:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800241a:	461a      	mov	r2, r3
 800241c:	4619      	mov	r1, r3
 800241e:	f7ff bf41 	b.w	80022a4 <xQueueGenericSend>
 8002422:	4770      	bx	lr

08002424 <xQueueCreateMutex>:
	{
 8002424:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002426:	4602      	mov	r2, r0
 8002428:	2100      	movs	r1, #0
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff ff15 	bl	800225a <xQueueGenericCreate>
 8002430:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8002432:	f7ff ffed 	bl	8002410 <prvInitialiseMutex>
	}
 8002436:	4620      	mov	r0, r4
 8002438:	bd10      	pop	{r4, pc}

0800243a <xQueueCreateMutexStatic>:
	{
 800243a:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800243c:	2200      	movs	r2, #0
 800243e:	460b      	mov	r3, r1
 8002440:	9000      	str	r0, [sp, #0]
 8002442:	4611      	mov	r1, r2
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff febf 	bl	80021c8 <xQueueGenericCreateStatic>
 800244a:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800244c:	f7ff ffe0 	bl	8002410 <prvInitialiseMutex>
	}
 8002450:	4620      	mov	r0, r4
 8002452:	b002      	add	sp, #8
 8002454:	bd10      	pop	{r4, pc}

08002456 <xQueueGenericSendFromISR>:
{
 8002456:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800245a:	4688      	mov	r8, r1
 800245c:	4691      	mov	r9, r2
 800245e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002460:	4604      	mov	r4, r0
 8002462:	b940      	cbnz	r0, 8002476 <xQueueGenericSendFromISR+0x20>
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	e7fe      	b.n	8002474 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002476:	bb09      	cbnz	r1, 80024bc <xQueueGenericSendFromISR+0x66>
 8002478:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800247a:	b1fb      	cbz	r3, 80024bc <xQueueGenericSendFromISR+0x66>
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	e7fe      	b.n	800248c <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002492:	f000 fddf 	bl	8003054 <xTaskRemoveFromEventList>
 8002496:	2800      	cmp	r0, #0
 8002498:	d034      	beq.n	8002504 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 800249a:	f1b9 0f00 	cmp.w	r9, #0
 800249e:	d031      	beq.n	8002504 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024a0:	2001      	movs	r0, #1
 80024a2:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80024a6:	f386 8811 	msr	BASEPRI, r6
}
 80024aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024ae:	3501      	adds	r5, #1
 80024b0:	b26d      	sxtb	r5, r5
 80024b2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80024b6:	e025      	b.n	8002504 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80024b8:	2000      	movs	r0, #0
 80024ba:	e7f4      	b.n	80024a6 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024bc:	2f02      	cmp	r7, #2
 80024be:	d102      	bne.n	80024c6 <xQueueGenericSendFromISR+0x70>
 80024c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d120      	bne.n	8002508 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024c6:	f7ff fc9b 	bl	8001e00 <vPortValidateInterruptPriority>
	__asm volatile
 80024ca:	f3ef 8611 	mrs	r6, BASEPRI
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d301      	bcc.n	80024ea <xQueueGenericSendFromISR+0x94>
 80024e6:	2f02      	cmp	r7, #2
 80024e8:	d1e6      	bne.n	80024b8 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80024ea:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ee:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80024f0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024f2:	4641      	mov	r1, r8
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff fda6 	bl	8002046 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80024fa:	1c6b      	adds	r3, r5, #1
 80024fc:	d1d7      	bne.n	80024ae <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1c4      	bne.n	800248e <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002504:	2001      	movs	r0, #1
 8002506:	e7ce      	b.n	80024a6 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSendFromISR+0xc2>

0800251a <xQueueGiveFromISR>:
{
 800251a:	b570      	push	{r4, r5, r6, lr}
 800251c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800251e:	4604      	mov	r4, r0
 8002520:	b940      	cbnz	r0, 8002534 <xQueueGiveFromISR+0x1a>
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	e7fe      	b.n	8002532 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002534:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002536:	b143      	cbz	r3, 800254a <xQueueGiveFromISR+0x30>
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	e7fe      	b.n	8002548 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	b90b      	cbnz	r3, 8002552 <xQueueGiveFromISR+0x38>
 800254e:	6843      	ldr	r3, [r0, #4]
 8002550:	bb73      	cbnz	r3, 80025b0 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002552:	f7ff fc55 	bl	8001e00 <vPortValidateInterruptPriority>
	__asm volatile
 8002556:	f3ef 8611 	mrs	r6, BASEPRI
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800256a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800256c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800256e:	429a      	cmp	r2, r3
 8002570:	d301      	bcc.n	8002576 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002572:	2000      	movs	r0, #0
 8002574:	e014      	b.n	80025a0 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002576:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800257a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800257c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800257e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	d110      	bne.n	80025a6 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002586:	b90b      	cbnz	r3, 800258c <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002588:	2001      	movs	r0, #1
 800258a:	e009      	b.n	80025a0 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002590:	f000 fd60 	bl	8003054 <xTaskRemoveFromEventList>
 8002594:	2800      	cmp	r0, #0
 8002596:	d0f7      	beq.n	8002588 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002598:	2d00      	cmp	r5, #0
 800259a:	d0f5      	beq.n	8002588 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800259c:	2001      	movs	r0, #1
 800259e:	6028      	str	r0, [r5, #0]
	__asm volatile
 80025a0:	f386 8811 	msr	BASEPRI, r6
}
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025a6:	3301      	adds	r3, #1
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025ae:	e7eb      	b.n	8002588 <xQueueGiveFromISR+0x6e>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	e7fe      	b.n	80025c0 <xQueueGiveFromISR+0xa6>
	...

080025c4 <xQueueReceive>:
{
 80025c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025c8:	b085      	sub	sp, #20
 80025ca:	4688      	mov	r8, r1
 80025cc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80025ce:	4604      	mov	r4, r0
 80025d0:	b940      	cbnz	r0, 80025e4 <xQueueReceive+0x20>
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	e7fe      	b.n	80025e2 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025e4:	2900      	cmp	r1, #0
 80025e6:	f040 8086 	bne.w	80026f6 <xQueueReceive+0x132>
 80025ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8082 	beq.w	80026f6 <xQueueReceive+0x132>
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	e7fe      	b.n	8002602 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002604:	9e01      	ldr	r6, [sp, #4]
 8002606:	2e00      	cmp	r6, #0
 8002608:	d07a      	beq.n	8002700 <xQueueReceive+0x13c>
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	e7fe      	b.n	800261a <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 800261c:	9d01      	ldr	r5, [sp, #4]
 800261e:	b91d      	cbnz	r5, 8002628 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8002620:	f7ff faf2 	bl	8001c08 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002624:	2000      	movs	r0, #0
 8002626:	e052      	b.n	80026ce <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8002628:	b916      	cbnz	r6, 8002630 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800262a:	a802      	add	r0, sp, #8
 800262c:	f000 fd54 	bl	80030d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002630:	f7ff faea 	bl	8001c08 <vPortExitCritical>
		vTaskSuspendAll();
 8002634:	f000 fb76 	bl	8002d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002638:	f7ff fac4 	bl	8001bc4 <vPortEnterCritical>
 800263c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002640:	2bff      	cmp	r3, #255	; 0xff
 8002642:	bf08      	it	eq
 8002644:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002648:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800264c:	2bff      	cmp	r3, #255	; 0xff
 800264e:	bf08      	it	eq
 8002650:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002654:	f7ff fad8 	bl	8001c08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002658:	a901      	add	r1, sp, #4
 800265a:	a802      	add	r0, sp, #8
 800265c:	f000 fd48 	bl	80030f0 <xTaskCheckForTimeOut>
 8002660:	2800      	cmp	r0, #0
 8002662:	d13d      	bne.n	80026e0 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fce3 	bl	8002030 <prvIsQueueEmpty>
 800266a:	b398      	cbz	r0, 80026d4 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800266c:	9901      	ldr	r1, [sp, #4]
 800266e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002672:	f000 fcd5 	bl	8003020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff fd2d 	bl	80020d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800267c:	f000 fbfa 	bl	8002e74 <xTaskResumeAll>
 8002680:	b938      	cbnz	r0, 8002692 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8002682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002686:	f8c9 3000 	str.w	r3, [r9]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002694:	f7ff fa96 	bl	8001bc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002698:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800269a:	2d00      	cmp	r5, #0
 800269c:	d0be      	beq.n	800261c <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800269e:	4641      	mov	r1, r8
 80026a0:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026a2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026a4:	f7ff fd02 	bl	80020ac <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026a8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	b163      	cbz	r3, 80026c8 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ae:	f104 0010 	add.w	r0, r4, #16
 80026b2:	f000 fccf 	bl	8003054 <xTaskRemoveFromEventList>
 80026b6:	b138      	cbz	r0, 80026c8 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <xQueueReceive+0x144>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80026c8:	f7ff fa9e 	bl	8001c08 <vPortExitCritical>
				return pdPASS;
 80026cc:	2001      	movs	r0, #1
}
 80026ce:	b005      	add	sp, #20
 80026d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7ff fcfe 	bl	80020d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026da:	f000 fbcb 	bl	8002e74 <xTaskResumeAll>
 80026de:	e7d8      	b.n	8002692 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff fcf8 	bl	80020d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e6:	f000 fbc5 	bl	8002e74 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fca0 	bl	8002030 <prvIsQueueEmpty>
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d0ce      	beq.n	8002692 <xQueueReceive+0xce>
 80026f4:	e796      	b.n	8002624 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026f6:	f000 fd3d 	bl	8003174 <xTaskGetSchedulerState>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d082      	beq.n	8002604 <xQueueReceive+0x40>
 80026fe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002700:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002702:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002708 <xQueueReceive+0x144>
 8002706:	e7c5      	b.n	8002694 <xQueueReceive+0xd0>
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <xQueueSemaphoreTake>:
{
 800270c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002710:	4604      	mov	r4, r0
{
 8002712:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002714:	b940      	cbnz	r0, 8002728 <xQueueSemaphoreTake+0x1c>
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	e7fe      	b.n	8002726 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002728:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800272a:	b145      	cbz	r5, 800273e <xQueueSemaphoreTake+0x32>
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	e7fe      	b.n	800273c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273e:	f000 fd19 	bl	8003174 <xTaskGetSchedulerState>
 8002742:	b918      	cbnz	r0, 800274c <xQueueSemaphoreTake+0x40>
 8002744:	9d01      	ldr	r5, [sp, #4]
 8002746:	2d00      	cmp	r5, #0
 8002748:	f040 8095 	bne.w	8002876 <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 800274c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002888 <xQueueSemaphoreTake+0x17c>
 8002750:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002752:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8002754:	f7ff fa36 	bl	8001bc4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800275a:	b1e3      	cbz	r3, 8002796 <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800275c:	3b01      	subs	r3, #1
 800275e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	b913      	cbnz	r3, 800276a <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002764:	f000 fe14 	bl	8003390 <pvTaskIncrementMutexHeldCount>
 8002768:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	b163      	cbz	r3, 8002788 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276e:	f104 0010 	add.w	r0, r4, #16
 8002772:	f000 fc6f 	bl	8003054 <xTaskRemoveFromEventList>
 8002776:	b138      	cbz	r0, 8002788 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <xQueueSemaphoreTake+0x17c>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002788:	f7ff fa3e 	bl	8001c08 <vPortExitCritical>
				return pdPASS;
 800278c:	2501      	movs	r5, #1
}
 800278e:	4628      	mov	r0, r5
 8002790:	b004      	add	sp, #16
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	b963      	cbnz	r3, 80027b4 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800279a:	b145      	cbz	r5, 80027ae <xQueueSemaphoreTake+0xa2>
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	e7fe      	b.n	80027ac <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 80027ae:	f7ff fa2b 	bl	8001c08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80027b2:	e7ec      	b.n	800278e <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 80027b4:	b916      	cbnz	r6, 80027bc <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027b6:	a802      	add	r0, sp, #8
 80027b8:	f000 fc8e 	bl	80030d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80027bc:	f7ff fa24 	bl	8001c08 <vPortExitCritical>
		vTaskSuspendAll();
 80027c0:	f000 fab0 	bl	8002d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027c4:	f7ff f9fe 	bl	8001bc4 <vPortEnterCritical>
 80027c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	bf08      	it	eq
 80027d0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80027d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027d8:	2bff      	cmp	r3, #255	; 0xff
 80027da:	bf08      	it	eq
 80027dc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80027e0:	f7ff fa12 	bl	8001c08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e4:	a901      	add	r1, sp, #4
 80027e6:	a802      	add	r0, sp, #8
 80027e8:	f000 fc82 	bl	80030f0 <xTaskCheckForTimeOut>
 80027ec:	bb40      	cbnz	r0, 8002840 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fc1e 	bl	8002030 <prvIsQueueEmpty>
 80027f4:	b1f0      	cbz	r0, 8002834 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	b93b      	cbnz	r3, 800280a <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 80027fa:	f7ff f9e3 	bl	8001bc4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80027fe:	6860      	ldr	r0, [r4, #4]
 8002800:	f000 fcc8 	bl	8003194 <xTaskPriorityInherit>
 8002804:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002806:	f7ff f9ff 	bl	8001c08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800280a:	9901      	ldr	r1, [sp, #4]
 800280c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002810:	f000 fc06 	bl	8003020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff fc5e 	bl	80020d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800281a:	f000 fb2b 	bl	8002e74 <xTaskResumeAll>
 800281e:	b938      	cbnz	r0, 8002830 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8002820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002824:	f8c8 3000 	str.w	r3, [r8]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	2601      	movs	r6, #1
 8002832:	e78f      	b.n	8002754 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff fc4e 	bl	80020d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800283a:	f000 fb1b 	bl	8002e74 <xTaskResumeAll>
 800283e:	e7f7      	b.n	8002830 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff fc48 	bl	80020d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002846:	f000 fb15 	bl	8002e74 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fbf0 	bl	8002030 <prvIsQueueEmpty>
 8002850:	2800      	cmp	r0, #0
 8002852:	d0ed      	beq.n	8002830 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8002854:	2d00      	cmp	r5, #0
 8002856:	d09a      	beq.n	800278e <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8002858:	f7ff f9b4 	bl	8001bc4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800285c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800285e:	b119      	cbz	r1, 8002868 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002860:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002868:	6860      	ldr	r0, [r4, #4]
 800286a:	f000 fd37 	bl	80032dc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800286e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002870:	f7ff f9ca 	bl	8001c08 <vPortExitCritical>
 8002874:	e78b      	b.n	800278e <xQueueSemaphoreTake+0x82>
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	e7fe      	b.n	8002886 <xQueueSemaphoreTake+0x17a>
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xQueueReceiveFromISR>:
{
 800288c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002890:	4689      	mov	r9, r1
 8002892:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002894:	4605      	mov	r5, r0
 8002896:	b940      	cbnz	r0, 80028aa <xQueueReceiveFromISR+0x1e>
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	e7fe      	b.n	80028a8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028aa:	bb71      	cbnz	r1, 800290a <xQueueReceiveFromISR+0x7e>
 80028ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028ae:	b363      	cbz	r3, 800290a <xQueueReceiveFromISR+0x7e>
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	e7fe      	b.n	80028c0 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 80028c2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80028c8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ca:	4628      	mov	r0, r5
 80028cc:	f7ff fbee 	bl	80020ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028d0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80028d2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028d4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80028d6:	d113      	bne.n	8002900 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d8:	692b      	ldr	r3, [r5, #16]
 80028da:	b90b      	cbnz	r3, 80028e0 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 80028dc:	2001      	movs	r0, #1
 80028de:	e00b      	b.n	80028f8 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e0:	f105 0010 	add.w	r0, r5, #16
 80028e4:	f000 fbb6 	bl	8003054 <xTaskRemoveFromEventList>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d0f7      	beq.n	80028dc <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 80028ec:	f1b8 0f00 	cmp.w	r8, #0
 80028f0:	d0f4      	beq.n	80028dc <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80028f2:	2001      	movs	r0, #1
 80028f4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80028f8:	f387 8811 	msr	BASEPRI, r7
}
 80028fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002900:	3601      	adds	r6, #1
 8002902:	b276      	sxtb	r6, r6
 8002904:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002908:	e7e8      	b.n	80028dc <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290a:	f7ff fa79 	bl	8001e00 <vPortValidateInterruptPriority>
	__asm volatile
 800290e:	f3ef 8711 	mrs	r7, BASEPRI
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002922:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002924:	2c00      	cmp	r4, #0
 8002926:	d1cc      	bne.n	80028c2 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002928:	4620      	mov	r0, r4
 800292a:	e7e5      	b.n	80028f8 <xQueueReceiveFromISR+0x6c>

0800292c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002930:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002932:	f7ff f947 	bl	8001bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002938:	4c2d      	ldr	r4, [pc, #180]	; (80029f0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4f2d      	ldr	r7, [pc, #180]	; (80029f4 <prvAddNewTaskToReadyList+0xc8>)
 800293e:	3201      	adds	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002942:	6825      	ldr	r5, [r4, #0]
 8002944:	2d00      	cmp	r5, #0
 8002946:	d145      	bne.n	80029d4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002948:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d11c      	bne.n	800298a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002950:	1978      	adds	r0, r7, r5
 8002952:	3514      	adds	r5, #20
 8002954:	f7ff f88e 	bl	8001a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002958:	2d8c      	cmp	r5, #140	; 0x8c
 800295a:	d1f9      	bne.n	8002950 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800295c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002a20 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002960:	4d25      	ldr	r5, [pc, #148]	; (80029f8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002962:	4640      	mov	r0, r8
 8002964:	f7ff f886 	bl	8001a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002968:	4628      	mov	r0, r5
 800296a:	f7ff f883 	bl	8001a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800296e:	4823      	ldr	r0, [pc, #140]	; (80029fc <prvAddNewTaskToReadyList+0xd0>)
 8002970:	f7ff f880 	bl	8001a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <prvAddNewTaskToReadyList+0xd4>)
 8002976:	f7ff f87d 	bl	8001a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800297a:	4822      	ldr	r0, [pc, #136]	; (8002a04 <prvAddNewTaskToReadyList+0xd8>)
 800297c:	f7ff f87a 	bl	8001a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <prvAddNewTaskToReadyList+0xdc>)
 8002982:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <prvAddNewTaskToReadyList+0xe0>)
 8002988:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800298c:	4921      	ldr	r1, [pc, #132]	; (8002a14 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800298e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002990:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002992:	3301      	adds	r3, #1
 8002994:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002996:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002998:	2301      	movs	r3, #1
 800299a:	4093      	lsls	r3, r2
 800299c:	4303      	orrs	r3, r0
 800299e:	2014      	movs	r0, #20
 80029a0:	600b      	str	r3, [r1, #0]
 80029a2:	fb00 7002 	mla	r0, r0, r2, r7
 80029a6:	1d31      	adds	r1, r6, #4
 80029a8:	f7ff f872 	bl	8001a90 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80029ac:	f7ff f92c 	bl	8001c08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <prvAddNewTaskToReadyList+0xec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b163      	cbz	r3, 80029d0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <prvAddNewTaskToReadyList+0xf0>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <prvAddNewTaskToReadyList+0xec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1d6      	bne.n	800298a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80029e2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80029e4:	bf98      	it	ls
 80029e6:	6026      	strls	r6, [r4, #0]
 80029e8:	e7cf      	b.n	800298a <prvAddNewTaskToReadyList+0x5e>
 80029ea:	bf00      	nop
 80029ec:	20003d50 	.word	0x20003d50
 80029f0:	20003cb8 	.word	0x20003cb8
 80029f4:	20003cc4 	.word	0x20003cc4
 80029f8:	20003d7c 	.word	0x20003d7c
 80029fc:	20003d98 	.word	0x20003d98
 8002a00:	20003dc4 	.word	0x20003dc4
 8002a04:	20003db0 	.word	0x20003db0
 8002a08:	20003cbc 	.word	0x20003cbc
 8002a0c:	20003cc0 	.word	0x20003cc0
 8002a10:	20003d60 	.word	0x20003d60
 8002a14:	20003d64 	.word	0x20003d64
 8002a18:	20003dac 	.word	0x20003dac
 8002a1c:	e000ed04 	.word	0xe000ed04
 8002a20:	20003d68 	.word	0x20003d68

08002a24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <prvResetNextTaskUnblockTime+0x1c>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <prvResetNextTaskUnblockTime+0x20>)
 8002a2c:	b919      	cbnz	r1, 8002a36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a3a:	68d2      	ldr	r2, [r2, #12]
 8002a3c:	6852      	ldr	r2, [r2, #4]
 8002a3e:	e7f8      	b.n	8002a32 <prvResetNextTaskUnblockTime+0xe>
 8002a40:	20003cbc 	.word	0x20003cbc
 8002a44:	20003d90 	.word	0x20003d90

08002a48 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a4e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a52:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002a54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a5e:	469a      	mov	sl, r3
 8002a60:	4681      	mov	r9, r0
 8002a62:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a64:	f026 0607 	bic.w	r6, r6, #7
 8002a68:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002a6c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a6e:	7858      	ldrb	r0, [r3, #1]
 8002a70:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002a74:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002a78:	b108      	cbz	r0, 8002a7e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a7a:	428b      	cmp	r3, r1
 8002a7c:	d1f7      	bne.n	8002a6e <prvInitialiseNewTask.isra.2+0x26>
 8002a7e:	9d08      	ldr	r5, [sp, #32]
 8002a80:	2d06      	cmp	r5, #6
 8002a82:	bf28      	it	cs
 8002a84:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a86:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002a88:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002a8a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a8c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a8e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002a92:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a94:	f7fe fff9 	bl	8001a8a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a98:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a9c:	f104 0018 	add.w	r0, r4, #24
 8002aa0:	f7fe fff3 	bl	8001a8a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002aa4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aa6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aaa:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aac:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ab0:	4652      	mov	r2, sl
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f7ff f85d 	bl	8001b74 <pxPortInitialiseStack>
 8002aba:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002abc:	f1b8 0f00 	cmp.w	r8, #0
 8002ac0:	d001      	beq.n	8002ac6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ac2:	f8c8 4000 	str.w	r4, [r8]
 8002ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002aca <prvDeleteTCB>:
	{
 8002aca:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002acc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002ad0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ad2:	b93b      	cbnz	r3, 8002ae4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002ad4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002ad6:	f7ff fa73 	bl	8001fc0 <vPortFree>
				vPortFree( pxTCB );
 8002ada:	4620      	mov	r0, r4
	}
 8002adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002ae0:	f7ff ba6e 	b.w	8001fc0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d0f9      	beq.n	8002adc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <prvDeleteTCB+0x34>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	e7fe      	b.n	8002afc <prvDeleteTCB+0x32>
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <prvIdleTask>:
{
 8002b00:	b580      	push	{r7, lr}
				taskYIELD();
 8002b02:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002b60 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b06:	4f12      	ldr	r7, [pc, #72]	; (8002b50 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b08:	4c12      	ldr	r4, [pc, #72]	; (8002b54 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002b0a:	4d13      	ldr	r5, [pc, #76]	; (8002b58 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	b963      	cbnz	r3, 8002b2a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <prvIdleTask+0x5c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d9f8      	bls.n	8002b0a <prvIdleTask+0xa>
				taskYIELD();
 8002b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b1c:	f8c8 3000 	str.w	r3, [r8]
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	e7ee      	b.n	8002b08 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002b2a:	f7ff f84b 	bl	8001bc4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b32:	1d30      	adds	r0, r6, #4
 8002b34:	f7fe ffcf 	bl	8001ad6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002b44:	f7ff f860 	bl	8001c08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f7ff ffbe 	bl	8002aca <prvDeleteTCB>
 8002b4e:	e7dd      	b.n	8002b0c <prvIdleTask+0xc>
 8002b50:	20003dc4 	.word	0x20003dc4
 8002b54:	20003d54 	.word	0x20003d54
 8002b58:	20003d50 	.word	0x20003d50
 8002b5c:	20003cc4 	.word	0x20003cc4
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b68:	4e1b      	ldr	r6, [pc, #108]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002b6a:	681d      	ldr	r5, [r3, #0]
{
 8002b6c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b6e:	6830      	ldr	r0, [r6, #0]
 8002b70:	3004      	adds	r0, #4
{
 8002b72:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b74:	f7fe ffaf 	bl	8001ad6 <uxListRemove>
 8002b78:	4633      	mov	r3, r6
 8002b7a:	b940      	cbnz	r0, 8002b8e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002b7c:	6831      	ldr	r1, [r6, #0]
 8002b7e:	4e17      	ldr	r6, [pc, #92]	; (8002bdc <prvAddCurrentTaskToDelayedList+0x78>)
 8002b80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002b82:	6832      	ldr	r2, [r6, #0]
 8002b84:	2001      	movs	r0, #1
 8002b86:	4088      	lsls	r0, r1
 8002b88:	ea22 0200 	bic.w	r2, r2, r0
 8002b8c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b8e:	1c62      	adds	r2, r4, #1
 8002b90:	d107      	bne.n	8002ba2 <prvAddCurrentTaskToDelayedList+0x3e>
 8002b92:	b137      	cbz	r7, 8002ba2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	4812      	ldr	r0, [pc, #72]	; (8002be0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002b98:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b9e:	f7fe bf77 	b.w	8001a90 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ba2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ba4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002ba6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ba8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002baa:	d907      	bls.n	8002bbc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002bae:	6810      	ldr	r0, [r2, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
}
 8002bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb6:	3104      	adds	r1, #4
 8002bb8:	f7fe bf76 	b.w	8001aa8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <prvAddCurrentTaskToDelayedList+0x84>)
 8002bbe:	6810      	ldr	r0, [r2, #0]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	3104      	adds	r1, #4
 8002bc4:	f7fe ff70 	bl	8001aa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <prvAddCurrentTaskToDelayedList+0x88>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002bce:	bf38      	it	cc
 8002bd0:	601c      	strcc	r4, [r3, #0]
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd4:	20003dd8 	.word	0x20003dd8
 8002bd8:	20003cb8 	.word	0x20003cb8
 8002bdc:	20003d64 	.word	0x20003d64
 8002be0:	20003db0 	.word	0x20003db0
 8002be4:	20003cc0 	.word	0x20003cc0
 8002be8:	20003cbc 	.word	0x20003cbc
 8002bec:	20003d90 	.word	0x20003d90

08002bf0 <xTaskCreateStatic>:
	{
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002bf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002bf8:	b945      	cbnz	r5, 8002c0c <xTaskCreateStatic+0x1c>
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	e7fe      	b.n	8002c0a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002c0c:	b944      	cbnz	r4, 8002c20 <xTaskCreateStatic+0x30>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	e7fe      	b.n	8002c1e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c20:	2654      	movs	r6, #84	; 0x54
 8002c22:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c24:	9e04      	ldr	r6, [sp, #16]
 8002c26:	2e54      	cmp	r6, #84	; 0x54
 8002c28:	d008      	beq.n	8002c3c <xTaskCreateStatic+0x4c>
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	e7fe      	b.n	8002c3a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c3c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c3e:	2502      	movs	r5, #2
 8002c40:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c44:	ad05      	add	r5, sp, #20
 8002c46:	9501      	str	r5, [sp, #4]
 8002c48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c4a:	9402      	str	r4, [sp, #8]
 8002c4c:	9500      	str	r5, [sp, #0]
 8002c4e:	f7ff fefb 	bl	8002a48 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff fe6a 	bl	800292c <prvAddNewTaskToReadyList>
	}
 8002c58:	9805      	ldr	r0, [sp, #20]
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}

08002c5e <xTaskCreate>:
	{
 8002c5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c62:	4607      	mov	r7, r0
 8002c64:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c66:	0090      	lsls	r0, r2, #2
	{
 8002c68:	4688      	mov	r8, r1
 8002c6a:	4616      	mov	r6, r2
 8002c6c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6e:	f7ff f919 	bl	8001ea4 <pvPortMalloc>
			if( pxStack != NULL )
 8002c72:	4605      	mov	r5, r0
 8002c74:	b1e8      	cbz	r0, 8002cb2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c76:	2054      	movs	r0, #84	; 0x54
 8002c78:	f7ff f914 	bl	8001ea4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	b1a8      	cbz	r0, 8002cac <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002c88:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c8e:	9002      	str	r0, [sp, #8]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4632      	mov	r2, r6
 8002c94:	464b      	mov	r3, r9
 8002c96:	4641      	mov	r1, r8
 8002c98:	4638      	mov	r0, r7
 8002c9a:	f7ff fed5 	bl	8002a48 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff fe44 	bl	800292c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ca4:	2001      	movs	r0, #1
	}
 8002ca6:	b005      	add	sp, #20
 8002ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7ff f987 	bl	8001fc0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002cb6:	e7f6      	b.n	8002ca6 <xTaskCreate+0x48>

08002cb8 <vTaskStartScheduler>:
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cbc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cbe:	aa07      	add	r2, sp, #28
 8002cc0:	a906      	add	r1, sp, #24
 8002cc2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cc4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cc6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cc8:	f006 fdfe 	bl	80098c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ccc:	9b05      	ldr	r3, [sp, #20]
 8002cce:	9302      	str	r3, [sp, #8]
 8002cd0:	9b06      	ldr	r3, [sp, #24]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	9400      	str	r4, [sp, #0]
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	9a07      	ldr	r2, [sp, #28]
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <vTaskStartScheduler+0x58>)
 8002cdc:	480d      	ldr	r0, [pc, #52]	; (8002d14 <vTaskStartScheduler+0x5c>)
 8002cde:	f7ff ff87 	bl	8002bf0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002ce2:	b190      	cbz	r0, 8002d0a <vTaskStartScheduler+0x52>
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <vTaskStartScheduler+0x60>)
 8002cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <vTaskStartScheduler+0x64>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <vTaskStartScheduler+0x68>)
 8002d04:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002d06:	f7fe fff5 	bl	8001cf4 <xPortStartScheduler>
}
 8002d0a:	b008      	add	sp, #32
 8002d0c:	bd10      	pop	{r4, pc}
 8002d0e:	bf00      	nop
 8002d10:	0800ac38 	.word	0x0800ac38
 8002d14:	08002b01 	.word	0x08002b01
 8002d18:	20003d90 	.word	0x20003d90
 8002d1c:	20003dac 	.word	0x20003dac
 8002d20:	20003dd8 	.word	0x20003dd8

08002d24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002d24:	4a02      	ldr	r2, [pc, #8]	; (8002d30 <vTaskSuspendAll+0xc>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20003d5c 	.word	0x20003d5c

08002d34 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002d34:	4b01      	ldr	r3, [pc, #4]	; (8002d3c <xTaskGetTickCount+0x8>)
 8002d36:	6818      	ldr	r0, [r3, #0]
}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20003dd8 	.word	0x20003dd8

08002d40 <xTaskGetTickCountFromISR>:
{
 8002d40:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f7ff f85d 	bl	8001e00 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8002d46:	4b01      	ldr	r3, [pc, #4]	; (8002d4c <xTaskGetTickCountFromISR+0xc>)
 8002d48:	6818      	ldr	r0, [r3, #0]
}
 8002d4a:	bd08      	pop	{r3, pc}
 8002d4c:	20003dd8 	.word	0x20003dd8

08002d50 <xTaskIncrementTick>:
{
 8002d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <xTaskIncrementTick+0xf8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d153      	bne.n	8002e04 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <xTaskIncrementTick+0xfc>)
 8002d5e:	681c      	ldr	r4, [r3, #0]
 8002d60:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002d62:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d64:	b9bc      	cbnz	r4, 8002d96 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002d66:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <xTaskIncrementTick+0x100>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	b142      	cbz	r2, 8002d80 <xTaskIncrementTick+0x30>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	e7fe      	b.n	8002d7e <xTaskIncrementTick+0x2e>
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <xTaskIncrementTick+0x104>)
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	6810      	ldr	r0, [r2, #0]
 8002d86:	6018      	str	r0, [r3, #0]
 8002d88:	6011      	str	r1, [r2, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <xTaskIncrementTick+0x108>)
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	f7ff fe47 	bl	8002a24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d96:	4d31      	ldr	r5, [pc, #196]	; (8002e5c <xTaskIncrementTick+0x10c>)
 8002d98:	4f31      	ldr	r7, [pc, #196]	; (8002e60 <xTaskIncrementTick+0x110>)
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	f04f 0b00 	mov.w	fp, #0
 8002da2:	d33e      	bcc.n	8002e22 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002e50 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002da8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002e70 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dac:	f8d8 2000 	ldr.w	r2, [r8]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	bb72      	cbnz	r2, 8002e12 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	602a      	str	r2, [r5, #0]
					break;
 8002dba:	e032      	b.n	8002e22 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dbc:	f106 0a04 	add.w	sl, r6, #4
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	f7fe fe88 	bl	8001ad6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002dc8:	b119      	cbz	r1, 8002dd2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dca:	f106 0018 	add.w	r0, r6, #24
 8002dce:	f7fe fe82 	bl	8001ad6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dd2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	fa02 f100 	lsl.w	r1, r2, r0
 8002dde:	4319      	orrs	r1, r3
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <xTaskIncrementTick+0x114>)
 8002de2:	f8c9 1000 	str.w	r1, [r9]
 8002de6:	f04f 0e14 	mov.w	lr, #20
 8002dea:	4651      	mov	r1, sl
 8002dec:	fb0e 3000 	mla	r0, lr, r0, r3
 8002df0:	f7fe fe4e 	bl	8001a90 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002df8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002dfa:	4291      	cmp	r1, r2
 8002dfc:	bf28      	it	cs
 8002dfe:	f04f 0b01 	movcs.w	fp, #1
 8002e02:	e7d3      	b.n	8002dac <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <xTaskIncrementTick+0x118>)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002e0c:	f04f 0b00 	mov.w	fp, #0
 8002e10:	e011      	b.n	8002e36 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e12:	f8d8 2000 	ldr.w	r2, [r8]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e1a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002e1c:	428c      	cmp	r4, r1
 8002e1e:	d2cd      	bcs.n	8002dbc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002e20:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <xTaskIncrementTick+0x114>)
 8002e26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e28:	2214      	movs	r2, #20
 8002e2a:	434a      	muls	r2, r1
 8002e2c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002e2e:	2a02      	cmp	r2, #2
 8002e30:	bf28      	it	cs
 8002e32:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002e36:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <xTaskIncrementTick+0x11c>)
 8002e38:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002e3a:	2a00      	cmp	r2, #0
 8002e3c:	bf18      	it	ne
 8002e3e:	f04f 0b01 	movne.w	fp, #1
}
 8002e42:	4658      	mov	r0, fp
 8002e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e48:	20003d5c 	.word	0x20003d5c
 8002e4c:	20003dd8 	.word	0x20003dd8
 8002e50:	20003cbc 	.word	0x20003cbc
 8002e54:	20003cc0 	.word	0x20003cc0
 8002e58:	20003d94 	.word	0x20003d94
 8002e5c:	20003d90 	.word	0x20003d90
 8002e60:	20003cb8 	.word	0x20003cb8
 8002e64:	20003cc4 	.word	0x20003cc4
 8002e68:	20003d58 	.word	0x20003d58
 8002e6c:	20003ddc 	.word	0x20003ddc
 8002e70:	20003d64 	.word	0x20003d64

08002e74 <xTaskResumeAll>:
{
 8002e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002e78:	4c31      	ldr	r4, [pc, #196]	; (8002f40 <xTaskResumeAll+0xcc>)
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	b943      	cbnz	r3, 8002e90 <xTaskResumeAll+0x1c>
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	e7fe      	b.n	8002e8e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002e90:	f7fe fe98 	bl	8001bc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9a:	6824      	ldr	r4, [r4, #0]
 8002e9c:	b12c      	cbz	r4, 8002eaa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002e9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ea0:	f7fe feb2 	bl	8001c08 <vPortExitCritical>
}
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <xTaskResumeAll+0xd0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f5      	beq.n	8002e9e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002f5c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002eb6:	4f24      	ldr	r7, [pc, #144]	; (8002f48 <xTaskResumeAll+0xd4>)
 8002eb8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002f60 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8002ec0:	b9e3      	cbnz	r3, 8002efc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002ec2:	b10c      	cbz	r4, 8002ec8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002ec4:	f7ff fdae 	bl	8002a24 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ec8:	4d20      	ldr	r5, [pc, #128]	; (8002f4c <xTaskResumeAll+0xd8>)
 8002eca:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ecc:	b144      	cbz	r4, 8002ee0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002ece:	4e20      	ldr	r6, [pc, #128]	; (8002f50 <xTaskResumeAll+0xdc>)
 8002ed0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002ed2:	f7ff ff3d 	bl	8002d50 <xTaskIncrementTick>
 8002ed6:	b100      	cbz	r0, 8002eda <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002ed8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002eda:	3c01      	subs	r4, #1
 8002edc:	d1f9      	bne.n	8002ed2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002ede:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <xTaskResumeAll+0xdc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0da      	beq.n	8002e9e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <xTaskResumeAll+0xe0>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002ef8:	2401      	movs	r4, #1
 8002efa:	e7d1      	b.n	8002ea0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002efc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002f00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f02:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f04:	f104 0018 	add.w	r0, r4, #24
 8002f08:	f7fe fde5 	bl	8001ad6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7fe fde2 	bl	8001ad6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	2501      	movs	r5, #1
 8002f18:	fa05 f302 	lsl.w	r3, r5, r2
 8002f1c:	2014      	movs	r0, #20
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	fb00 8002 	mla	r0, r0, r2, r8
 8002f24:	4631      	mov	r1, r6
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	f7fe fdb2 	bl	8001a90 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <xTaskResumeAll+0xe4>)
 8002f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002f36:	bf24      	itt	cs
 8002f38:	4b05      	ldrcs	r3, [pc, #20]	; (8002f50 <xTaskResumeAll+0xdc>)
 8002f3a:	601d      	strcs	r5, [r3, #0]
 8002f3c:	e7be      	b.n	8002ebc <xTaskResumeAll+0x48>
 8002f3e:	bf00      	nop
 8002f40:	20003d5c 	.word	0x20003d5c
 8002f44:	20003d50 	.word	0x20003d50
 8002f48:	20003d64 	.word	0x20003d64
 8002f4c:	20003d58 	.word	0x20003d58
 8002f50:	20003ddc 	.word	0x20003ddc
 8002f54:	e000ed04 	.word	0xe000ed04
 8002f58:	20003cb8 	.word	0x20003cb8
 8002f5c:	20003d98 	.word	0x20003d98
 8002f60:	20003cc4 	.word	0x20003cc4

08002f64 <vTaskDelay>:
	{
 8002f64:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f66:	b940      	cbnz	r0, 8002f7a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <vTaskDelay+0x40>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <vTaskDelay+0x44>)
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	b141      	cbz	r1, 8002f92 <vTaskDelay+0x2e>
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	e7fe      	b.n	8002f90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f92:	f7ff fec7 	bl	8002d24 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f96:	f7ff fde5 	bl	8002b64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002f9a:	f7ff ff6b 	bl	8002e74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d0e2      	beq.n	8002f68 <vTaskDelay+0x4>
 8002fa2:	bd08      	pop	{r3, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04
 8002fa8:	20003d5c 	.word	0x20003d5c

08002fac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <vTaskSwitchContext+0x60>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <vTaskSwitchContext+0x64>)
{
 8002fb2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fb4:	b112      	cbz	r2, 8002fbc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002fb6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002fbc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <vTaskSwitchContext+0x68>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f1c3 031f 	rsb	r3, r3, #31
 8002fcc:	2214      	movs	r2, #20
 8002fce:	4912      	ldr	r1, [pc, #72]	; (8003018 <vTaskSwitchContext+0x6c>)
 8002fd0:	435a      	muls	r2, r3
 8002fd2:	1888      	adds	r0, r1, r2
 8002fd4:	588c      	ldr	r4, [r1, r2]
 8002fd6:	b944      	cbnz	r4, 8002fea <vTaskSwitchContext+0x3e>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	e7fe      	b.n	8002fe8 <vTaskSwitchContext+0x3c>
 8002fea:	6844      	ldr	r4, [r0, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	6864      	ldr	r4, [r4, #4]
 8002ff0:	6044      	str	r4, [r0, #4]
 8002ff2:	440a      	add	r2, r1
 8002ff4:	4294      	cmp	r4, r2
 8002ff6:	bf04      	itt	eq
 8002ff8:	6862      	ldreq	r2, [r4, #4]
 8002ffa:	6042      	streq	r2, [r0, #4]
 8002ffc:	2214      	movs	r2, #20
 8002ffe:	fb02 1303 	mla	r3, r2, r3, r1
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <vTaskSwitchContext+0x70>)
 8003008:	e7d6      	b.n	8002fb8 <vTaskSwitchContext+0xc>
 800300a:	bf00      	nop
 800300c:	20003d5c 	.word	0x20003d5c
 8003010:	20003ddc 	.word	0x20003ddc
 8003014:	20003d64 	.word	0x20003d64
 8003018:	20003cc4 	.word	0x20003cc4
 800301c:	20003cb8 	.word	0x20003cb8

08003020 <vTaskPlaceOnEventList>:
{
 8003020:	b510      	push	{r4, lr}
 8003022:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003024:	b940      	cbnz	r0, 8003038 <vTaskPlaceOnEventList+0x18>
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	e7fe      	b.n	8003036 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <vTaskPlaceOnEventList+0x30>)
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	3118      	adds	r1, #24
 800303e:	f7fe fd33 	bl	8001aa8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003042:	4620      	mov	r0, r4
 8003044:	2101      	movs	r1, #1
}
 8003046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800304a:	f7ff bd8b 	b.w	8002b64 <prvAddCurrentTaskToDelayedList>
 800304e:	bf00      	nop
 8003050:	20003cb8 	.word	0x20003cb8

08003054 <xTaskRemoveFromEventList>:
{
 8003054:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003056:	68c3      	ldr	r3, [r0, #12]
 8003058:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800305a:	b944      	cbnz	r4, 800306e <xTaskRemoveFromEventList+0x1a>
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	e7fe      	b.n	800306c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800306e:	f104 0518 	add.w	r5, r4, #24
 8003072:	4628      	mov	r0, r5
 8003074:	f7fe fd2f 	bl	8001ad6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <xTaskRemoveFromEventList+0x6c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b9e3      	cbnz	r3, 80030b8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800307e:	1d25      	adds	r5, r4, #4
 8003080:	4628      	mov	r0, r5
 8003082:	f7fe fd28 	bl	8001ad6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003086:	490f      	ldr	r1, [pc, #60]	; (80030c4 <xTaskRemoveFromEventList+0x70>)
 8003088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800308a:	6808      	ldr	r0, [r1, #0]
 800308c:	2301      	movs	r3, #1
 800308e:	4093      	lsls	r3, r2
 8003090:	4303      	orrs	r3, r0
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <xTaskRemoveFromEventList+0x74>)
 8003096:	2014      	movs	r0, #20
 8003098:	4629      	mov	r1, r5
 800309a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800309e:	f7fe fcf7 	bl	8001a90 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <xTaskRemoveFromEventList+0x78>)
 80030a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80030ac:	bf83      	ittte	hi
 80030ae:	4b08      	ldrhi	r3, [pc, #32]	; (80030d0 <xTaskRemoveFromEventList+0x7c>)
 80030b0:	2001      	movhi	r0, #1
 80030b2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80030b4:	2000      	movls	r0, #0
}
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030b8:	4629      	mov	r1, r5
 80030ba:	4806      	ldr	r0, [pc, #24]	; (80030d4 <xTaskRemoveFromEventList+0x80>)
 80030bc:	e7ef      	b.n	800309e <xTaskRemoveFromEventList+0x4a>
 80030be:	bf00      	nop
 80030c0:	20003d5c 	.word	0x20003d5c
 80030c4:	20003d64 	.word	0x20003d64
 80030c8:	20003cc4 	.word	0x20003cc4
 80030cc:	20003cb8 	.word	0x20003cb8
 80030d0:	20003ddc 	.word	0x20003ddc
 80030d4:	20003d98 	.word	0x20003d98

080030d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <vTaskInternalSetTimeOutState+0x10>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <vTaskInternalSetTimeOutState+0x14>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6043      	str	r3, [r0, #4]
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20003d94 	.word	0x20003d94
 80030ec:	20003dd8 	.word	0x20003dd8

080030f0 <xTaskCheckForTimeOut>:
{
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80030f4:	4605      	mov	r5, r0
 80030f6:	b940      	cbnz	r0, 800310a <xTaskCheckForTimeOut+0x1a>
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	e7fe      	b.n	8003108 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800310a:	b941      	cbnz	r1, 800311e <xTaskCheckForTimeOut+0x2e>
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	e7fe      	b.n	800311c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800311e:	f7fe fd51 	bl	8001bc4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003124:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003126:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	1c58      	adds	r0, r3, #1
 800312c:	d00e      	beq.n	800314c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800312e:	480d      	ldr	r0, [pc, #52]	; (8003164 <xTaskCheckForTimeOut+0x74>)
 8003130:	682e      	ldr	r6, [r5, #0]
 8003132:	6800      	ldr	r0, [r0, #0]
 8003134:	4286      	cmp	r6, r0
 8003136:	d001      	beq.n	800313c <xTaskCheckForTimeOut+0x4c>
 8003138:	428a      	cmp	r2, r1
 800313a:	d20e      	bcs.n	800315a <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800313c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800313e:	429a      	cmp	r2, r3
 8003140:	d209      	bcs.n	8003156 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003146:	4628      	mov	r0, r5
 8003148:	f7ff ffc6 	bl	80030d8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800314c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800314e:	f7fe fd5b 	bl	8001c08 <vPortExitCritical>
}
 8003152:	4620      	mov	r0, r4
 8003154:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800315a:	2401      	movs	r4, #1
 800315c:	e7f7      	b.n	800314e <xTaskCheckForTimeOut+0x5e>
 800315e:	bf00      	nop
 8003160:	20003dd8 	.word	0x20003dd8
 8003164:	20003d94 	.word	0x20003d94

08003168 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <vTaskMissedYield+0x8>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4770      	bx	lr
 8003170:	20003ddc 	.word	0x20003ddc

08003174 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <xTaskGetSchedulerState+0x18>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	b133      	cbz	r3, 8003188 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <xTaskGetSchedulerState+0x1c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003180:	bf0c      	ite	eq
 8003182:	2002      	moveq	r0, #2
 8003184:	2000      	movne	r0, #0
 8003186:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003188:	2001      	movs	r0, #1
	}
 800318a:	4770      	bx	lr
 800318c:	20003dac 	.word	0x20003dac
 8003190:	20003d5c 	.word	0x20003d5c

08003194 <xTaskPriorityInherit>:
	{
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003198:	4604      	mov	r4, r0
 800319a:	2800      	cmp	r0, #0
 800319c:	d041      	beq.n	8003222 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800319e:	4a24      	ldr	r2, [pc, #144]	; (8003230 <xTaskPriorityInherit+0x9c>)
 80031a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031a2:	6811      	ldr	r1, [r2, #0]
 80031a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80031a6:	428b      	cmp	r3, r1
 80031a8:	4617      	mov	r7, r2
 80031aa:	d231      	bcs.n	8003210 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80031ac:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80031ae:	4d21      	ldr	r5, [pc, #132]	; (8003234 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80031b0:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b2:	bfa1      	itttt	ge
 80031b4:	683a      	ldrge	r2, [r7, #0]
 80031b6:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80031b8:	f1c2 0207 	rsbge	r2, r2, #7
 80031bc:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80031be:	2614      	movs	r6, #20
 80031c0:	6942      	ldr	r2, [r0, #20]
 80031c2:	fb06 5303 	mla	r3, r6, r3, r5
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d12d      	bne.n	8003226 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031ca:	f100 0804 	add.w	r8, r0, #4
 80031ce:	4640      	mov	r0, r8
 80031d0:	f7fe fc81 	bl	8001ad6 <uxListRemove>
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <xTaskPriorityInherit+0xa4>)
 80031d6:	b948      	cbnz	r0, 80031ec <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80031d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80031da:	4346      	muls	r6, r0
 80031dc:	59aa      	ldr	r2, [r5, r6]
 80031de:	b92a      	cbnz	r2, 80031ec <xTaskPriorityInherit+0x58>
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	4081      	lsls	r1, r0
 80031e6:	ea22 0201 	bic.w	r2, r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80031ec:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80031ee:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80031f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031f2:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80031f4:	2401      	movs	r4, #1
 80031f6:	fa04 f002 	lsl.w	r0, r4, r2
 80031fa:	4308      	orrs	r0, r1
 80031fc:	6018      	str	r0, [r3, #0]
 80031fe:	2014      	movs	r0, #20
 8003200:	4641      	mov	r1, r8
 8003202:	fb00 5002 	mla	r0, r0, r2, r5
 8003206:	f7fe fc43 	bl	8001a90 <vListInsertEnd>
				xReturn = pdTRUE;
 800320a:	2001      	movs	r0, #1
	}
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003214:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003216:	42a0      	cmp	r0, r4
 8003218:	bf2c      	ite	cs
 800321a:	2000      	movcs	r0, #0
 800321c:	2001      	movcc	r0, #1
 800321e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800322c:	e7ed      	b.n	800320a <xTaskPriorityInherit+0x76>
 800322e:	bf00      	nop
 8003230:	20003cb8 	.word	0x20003cb8
 8003234:	20003cc4 	.word	0x20003cc4
 8003238:	20003d64 	.word	0x20003d64

0800323c <xTaskPriorityDisinherit>:
	{
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800323e:	4604      	mov	r4, r0
 8003240:	b908      	cbnz	r0, 8003246 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003242:	2000      	movs	r0, #0
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <xTaskPriorityDisinherit+0x94>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4298      	cmp	r0, r3
 800324c:	d008      	beq.n	8003260 <xTaskPriorityDisinherit+0x24>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	e7fe      	b.n	800325e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003260:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003262:	b943      	cbnz	r3, 8003276 <xTaskPriorityDisinherit+0x3a>
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	e7fe      	b.n	8003274 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003276:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003278:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800327a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800327c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800327e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003280:	d0df      	beq.n	8003242 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1dd      	bne.n	8003242 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003286:	1d05      	adds	r5, r0, #4
 8003288:	4628      	mov	r0, r5
 800328a:	f7fe fc24 	bl	8001ad6 <uxListRemove>
 800328e:	4e11      	ldr	r6, [pc, #68]	; (80032d4 <xTaskPriorityDisinherit+0x98>)
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <xTaskPriorityDisinherit+0x9c>)
 8003292:	b950      	cbnz	r0, 80032aa <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003294:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003296:	2114      	movs	r1, #20
 8003298:	4379      	muls	r1, r7
 800329a:	5873      	ldr	r3, [r6, r1]
 800329c:	b92b      	cbnz	r3, 80032aa <xTaskPriorityDisinherit+0x6e>
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	2001      	movs	r0, #1
 80032a2:	40b8      	lsls	r0, r7
 80032a4:	ea23 0300 	bic.w	r3, r3, r0
 80032a8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032ac:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ae:	f1c3 0107 	rsb	r1, r3, #7
 80032b2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	2401      	movs	r4, #1
 80032b8:	fa04 f003 	lsl.w	r0, r4, r3
 80032bc:	4308      	orrs	r0, r1
 80032be:	6010      	str	r0, [r2, #0]
 80032c0:	2014      	movs	r0, #20
 80032c2:	fb00 6003 	mla	r0, r0, r3, r6
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fe fbe2 	bl	8001a90 <vListInsertEnd>
					xReturn = pdTRUE;
 80032cc:	4620      	mov	r0, r4
	}
 80032ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d0:	20003cb8 	.word	0x20003cb8
 80032d4:	20003cc4 	.word	0x20003cc4
 80032d8:	20003d64 	.word	0x20003d64

080032dc <vTaskPriorityDisinheritAfterTimeout>:
	{
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80032de:	4604      	mov	r4, r0
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d04d      	beq.n	8003380 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80032e4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80032e6:	b942      	cbnz	r2, 80032fa <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	e7fe      	b.n	80032f8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80032fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032fc:	4299      	cmp	r1, r3
 80032fe:	bf38      	it	cc
 8003300:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003302:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003304:	428b      	cmp	r3, r1
 8003306:	d03b      	beq.n	8003380 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003308:	2a01      	cmp	r2, #1
 800330a:	d139      	bne.n	8003380 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4290      	cmp	r0, r2
 8003312:	d108      	bne.n	8003326 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	e7fe      	b.n	8003324 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003326:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003328:	4d17      	ldr	r5, [pc, #92]	; (8003388 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800332a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800332c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800332e:	f04f 0614 	mov.w	r6, #20
 8003332:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003334:	bfa8      	it	ge
 8003336:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800333a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333e:	bfa8      	it	ge
 8003340:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003342:	429a      	cmp	r2, r3
 8003344:	d11c      	bne.n	8003380 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003346:	1d07      	adds	r7, r0, #4
 8003348:	4638      	mov	r0, r7
 800334a:	f7fe fbc4 	bl	8001ad6 <uxListRemove>
 800334e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003350:	4c0e      	ldr	r4, [pc, #56]	; (800338c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8003352:	b940      	cbnz	r0, 8003366 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003354:	4356      	muls	r6, r2
 8003356:	59ab      	ldr	r3, [r5, r6]
 8003358:	b92b      	cbnz	r3, 8003366 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	4091      	lsls	r1, r2
 8003360:	ea23 0301 	bic.w	r3, r3, r1
 8003364:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8003366:	6821      	ldr	r1, [r4, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	4093      	lsls	r3, r2
 800336c:	430b      	orrs	r3, r1
 800336e:	2014      	movs	r0, #20
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	4639      	mov	r1, r7
 8003374:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800337c:	f7fe bb88 	b.w	8001a90 <vListInsertEnd>
 8003380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003382:	bf00      	nop
 8003384:	20003cb8 	.word	0x20003cb8
 8003388:	20003cc4 	.word	0x20003cc4
 800338c:	20003d64 	.word	0x20003d64

08003390 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <pvTaskIncrementMutexHeldCount+0x14>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	b11a      	cbz	r2, 800339e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800339a:	3201      	adds	r2, #1
 800339c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800339e:	6818      	ldr	r0, [r3, #0]
	}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20003cb8 	.word	0x20003cb8

080033a8 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <tcpip_thread+0x78>)
 80033aa:	681b      	ldr	r3, [r3, #0]
{
 80033ac:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 80033ae:	b113      	cbz	r3, 80033b6 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <tcpip_thread+0x7c>)
 80033b2:	6810      	ldr	r0, [r2, #0]
 80033b4:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80033b6:	481c      	ldr	r0, [pc, #112]	; (8003428 <tcpip_thread+0x80>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80033b8:	4d1b      	ldr	r5, [pc, #108]	; (8003428 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80033ba:	4e1c      	ldr	r6, [pc, #112]	; (800342c <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80033bc:	4c1c      	ldr	r4, [pc, #112]	; (8003430 <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 80033be:	f006 f84e 	bl	800945e <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 80033c2:	4628      	mov	r0, r5
 80033c4:	f006 f850 	bl	8009468 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80033c8:	a901      	add	r1, sp, #4
 80033ca:	4630      	mov	r0, r6
 80033cc:	f005 fe56 	bl	800907c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80033d0:	4628      	mov	r0, r5
 80033d2:	f006 f844 	bl	800945e <sys_mutex_lock>
    if (msg == NULL) {
 80033d6:	9b01      	ldr	r3, [sp, #4]
 80033d8:	b933      	cbnz	r3, 80033e8 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80033da:	4623      	mov	r3, r4
 80033dc:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80033de:	4915      	ldr	r1, [pc, #84]	; (8003434 <tcpip_thread+0x8c>)
 80033e0:	4815      	ldr	r0, [pc, #84]	; (8003438 <tcpip_thread+0x90>)
 80033e2:	f006 fce9 	bl	8009db8 <iprintf>
      break;
 80033e6:	e7ec      	b.n	80033c2 <tcpip_thread+0x1a>
    switch (msg->type) {
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	2a03      	cmp	r2, #3
 80033ec:	d00b      	beq.n	8003406 <tcpip_thread+0x5e>
 80033ee:	2a04      	cmp	r2, #4
 80033f0:	d00f      	beq.n	8003412 <tcpip_thread+0x6a>
 80033f2:	2a02      	cmp	r2, #2
 80033f4:	d111      	bne.n	800341a <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80033f6:	1d18      	adds	r0, r3, #4
 80033f8:	c807      	ldmia	r0, {r0, r1, r2}
 80033fa:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80033fc:	9901      	ldr	r1, [sp, #4]
 80033fe:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003400:	f002 f840 	bl	8005484 <memp_free>
      break;
 8003404:	e7dd      	b.n	80033c2 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003406:	6898      	ldr	r0, [r3, #8]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800340c:	9901      	ldr	r1, [sp, #4]
 800340e:	2008      	movs	r0, #8
 8003410:	e7f6      	b.n	8003400 <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	6898      	ldr	r0, [r3, #8]
 8003416:	4790      	blx	r2
      break;
 8003418:	e7d3      	b.n	80033c2 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800341a:	4623      	mov	r3, r4
 800341c:	229b      	movs	r2, #155	; 0x9b
 800341e:	e7de      	b.n	80033de <tcpip_thread+0x36>
 8003420:	20003de4 	.word	0x20003de4
 8003424:	20003de8 	.word	0x20003de8
 8003428:	20004620 	.word	0x20004620
 800342c:	20003de0 	.word	0x20003de0
 8003430:	0800ac9b 	.word	0x0800ac9b
 8003434:	0800accb 	.word	0x0800accb
 8003438:	0800ace9 	.word	0x0800ace9

0800343c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003440:	4810      	ldr	r0, [pc, #64]	; (8003484 <tcpip_inpkt+0x48>)
{
 8003442:	460e      	mov	r6, r1
 8003444:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003446:	f005 ffe9 	bl	800941c <sys_mbox_valid>
 800344a:	b928      	cbnz	r0, 8003458 <tcpip_inpkt+0x1c>
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <tcpip_inpkt+0x4c>)
 800344e:	490f      	ldr	r1, [pc, #60]	; (800348c <tcpip_inpkt+0x50>)
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <tcpip_inpkt+0x54>)
 8003452:	22b5      	movs	r2, #181	; 0xb5
 8003454:	f006 fcb0 	bl	8009db8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003458:	2009      	movs	r0, #9
 800345a:	f001 fff7 	bl	800544c <memp_malloc>
  if (msg == NULL) {
 800345e:	4604      	mov	r4, r0
 8003460:	b168      	cbz	r0, 800347e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003462:	2302      	movs	r3, #2
 8003464:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8003466:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8003468:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800346a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800346c:	4601      	mov	r1, r0
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <tcpip_inpkt+0x48>)
 8003470:	f005 ffa8 	bl	80093c4 <sys_mbox_trypost>
 8003474:	b128      	cbz	r0, 8003482 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003476:	4621      	mov	r1, r4
 8003478:	2009      	movs	r0, #9
 800347a:	f002 f803 	bl	8005484 <memp_free>
    return ERR_MEM;
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	20003de0 	.word	0x20003de0
 8003488:	0800ac9b 	.word	0x0800ac9b
 800348c:	0800ac8e 	.word	0x0800ac8e
 8003490:	0800ace9 	.word	0x0800ace9

08003494 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003494:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8003498:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800349c:	bf14      	ite	ne
 800349e:	4a02      	ldrne	r2, [pc, #8]	; (80034a8 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80034a0:	4a02      	ldreq	r2, [pc, #8]	; (80034ac <tcpip_input+0x18>)
 80034a2:	f7ff bfcb 	b.w	800343c <tcpip_inpkt>
 80034a6:	bf00      	nop
 80034a8:	08009281 	.word	0x08009281
 80034ac:	08004569 	.word	0x08004569

080034b0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80034b4:	4812      	ldr	r0, [pc, #72]	; (8003500 <tcpip_callback_with_block+0x50>)
{
 80034b6:	460e      	mov	r6, r1
 80034b8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80034ba:	f005 ffaf 	bl	800941c <sys_mbox_valid>
 80034be:	b928      	cbnz	r0, 80034cc <tcpip_callback_with_block+0x1c>
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <tcpip_callback_with_block+0x54>)
 80034c2:	4911      	ldr	r1, [pc, #68]	; (8003508 <tcpip_callback_with_block+0x58>)
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <tcpip_callback_with_block+0x5c>)
 80034c6:	22ee      	movs	r2, #238	; 0xee
 80034c8:	f006 fc76 	bl	8009db8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80034cc:	2008      	movs	r0, #8
 80034ce:	f001 ffbd 	bl	800544c <memp_malloc>
  if (msg == NULL) {
 80034d2:	4604      	mov	r4, r0
 80034d4:	b188      	cbz	r0, 80034fa <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80034d6:	2303      	movs	r3, #3
 80034d8:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80034da:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80034dc:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 80034de:	4601      	mov	r1, r0
 80034e0:	4807      	ldr	r0, [pc, #28]	; (8003500 <tcpip_callback_with_block+0x50>)
  if (block) {
 80034e2:	b11d      	cbz	r5, 80034ec <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 80034e4:	f005 ff62 	bl	80093ac <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 80034e8:	2000      	movs	r0, #0
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80034ec:	f005 ff6a 	bl	80093c4 <sys_mbox_trypost>
 80034f0:	b128      	cbz	r0, 80034fe <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80034f2:	4621      	mov	r1, r4
 80034f4:	2008      	movs	r0, #8
 80034f6:	f001 ffc5 	bl	8005484 <memp_free>
    return ERR_MEM;
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003500:	20003de0 	.word	0x20003de0
 8003504:	0800ac9b 	.word	0x0800ac9b
 8003508:	0800ac8e 	.word	0x0800ac8e
 800350c:	0800ace9 	.word	0x0800ace9

08003510 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8003510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003512:	4605      	mov	r5, r0
 8003514:	460c      	mov	r4, r1
  lwip_init();
 8003516:	f000 fb6a 	bl	8003bee <lwip_init>

  tcpip_init_done = initfunc;
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800351c:	4812      	ldr	r0, [pc, #72]	; (8003568 <tcpip_init+0x58>)
  tcpip_init_done = initfunc;
 800351e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <tcpip_init+0x5c>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003522:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8003524:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003526:	f005 ff2f 	bl	8009388 <sys_mbox_new>
 800352a:	b130      	cbz	r0, 800353a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <tcpip_init+0x60>)
 800352e:	4911      	ldr	r1, [pc, #68]	; (8003574 <tcpip_init+0x64>)
 8003530:	4811      	ldr	r0, [pc, #68]	; (8003578 <tcpip_init+0x68>)
 8003532:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003536:	f006 fc3f 	bl	8009db8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800353a:	4810      	ldr	r0, [pc, #64]	; (800357c <tcpip_init+0x6c>)
 800353c:	f005 ff80 	bl	8009440 <sys_mutex_new>
 8003540:	b130      	cbz	r0, 8003550 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <tcpip_init+0x60>)
 8003544:	490e      	ldr	r1, [pc, #56]	; (8003580 <tcpip_init+0x70>)
 8003546:	480c      	ldr	r0, [pc, #48]	; (8003578 <tcpip_init+0x68>)
 8003548:	f240 12d9 	movw	r2, #473	; 0x1d9
 800354c:	f006 fc34 	bl	8009db8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003550:	2200      	movs	r2, #0
 8003552:	9200      	str	r2, [sp, #0]
 8003554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003558:	490a      	ldr	r1, [pc, #40]	; (8003584 <tcpip_init+0x74>)
 800355a:	480b      	ldr	r0, [pc, #44]	; (8003588 <tcpip_init+0x78>)
 800355c:	f005 ff87 	bl	800946e <sys_thread_new>
}
 8003560:	b003      	add	sp, #12
 8003562:	bd30      	pop	{r4, r5, pc}
 8003564:	20003de4 	.word	0x20003de4
 8003568:	20003de0 	.word	0x20003de0
 800356c:	20003de8 	.word	0x20003de8
 8003570:	0800ac9b 	.word	0x0800ac9b
 8003574:	0800ac3d 	.word	0x0800ac3d
 8003578:	0800ace9 	.word	0x0800ace9
 800357c:	20004620 	.word	0x20004620
 8003580:	0800ac60 	.word	0x0800ac60
 8003584:	080033a9 	.word	0x080033a9
 8003588:	0800ac81 	.word	0x0800ac81

0800358c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003590:	4605      	mov	r5, r0
 8003592:	b1a8      	cbz	r0, 80035c0 <fs_open+0x34>
 8003594:	b1a1      	cbz	r1, 80035c0 <fs_open+0x34>
 8003596:	4c0c      	ldr	r4, [pc, #48]	; (80035c8 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 8003598:	6861      	ldr	r1, [r4, #4]
 800359a:	4630      	mov	r0, r6
 800359c:	f7fc fe18 	bl	80001d0 <strcmp>
 80035a0:	b940      	cbnz	r0, 80035b4 <fs_open+0x28>
      file->data = (const char *)f->data;
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 80035aa:	60ab      	str	r3, [r5, #8]
      file->pextension = NULL;
 80035ac:	60e8      	str	r0, [r5, #12]
      file->flags = f->flags;
 80035ae:	7c23      	ldrb	r3, [r4, #16]
 80035b0:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80035b4:	6824      	ldr	r4, [r4, #0]
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d1ee      	bne.n	8003598 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 80035ba:	f06f 0005 	mvn.w	r0, #5
 80035be:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 80035c0:	f06f 000f 	mvn.w	r0, #15
}
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
 80035c6:	bf00      	nop
 80035c8:	0800ba90 	.word	0x0800ba90

080035cc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80035cc:	4770      	bx	lr

080035ce <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80035ce:	6842      	ldr	r2, [r0, #4]
 80035d0:	6880      	ldr	r0, [r0, #8]
}
 80035d2:	1a10      	subs	r0, r2, r0
 80035d4:	4770      	bx	lr

080035d6 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80035d6:	b510      	push	{r4, lr}
 80035d8:	4604      	mov	r4, r0
  if(hs->handle) {
 80035da:	6940      	ldr	r0, [r0, #20]
 80035dc:	b118      	cbz	r0, 80035e6 <http_state_eof+0x10>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80035de:	f7ff fff5 	bl	80035cc <fs_close>
    hs->handle = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	6163      	str	r3, [r4, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80035e6:	6a20      	ldr	r0, [r4, #32]
 80035e8:	b118      	cbz	r0, 80035f2 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 80035ea:	f002 f8d1 	bl	8005790 <pbuf_free>
    hs->req = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	6223      	str	r3, [r4, #32]
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 80035f8:	490a      	ldr	r1, [pc, #40]	; (8003624 <http_get_404_file+0x30>)
 80035fa:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80035fc:	4604      	mov	r4, r0
 80035fe:	f7ff ffc5 	bl	800358c <fs_open>
  if (err != ERR_OK) {
 8003602:	b168      	cbz	r0, 8003620 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003604:	4908      	ldr	r1, [pc, #32]	; (8003628 <http_get_404_file+0x34>)
 8003606:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003608:	4620      	mov	r0, r4
 800360a:	f7ff ffbf 	bl	800358c <fs_open>
    if (err != ERR_OK) {
 800360e:	b138      	cbz	r0, 8003620 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <http_get_404_file+0x38>)
 8003612:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ffb9 	bl	800358c <fs_open>
      if (err != ERR_OK) {
 800361a:	b108      	cbz	r0, 8003620 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800361c:	2400      	movs	r4, #0
 800361e:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8003620:	4620      	mov	r0, r4
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	0800bacc 	.word	0x0800bacc
 8003628:	0800bad6 	.word	0x0800bad6
 800362c:	0800badf 	.word	0x0800badf

08003630 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8003634:	4615      	mov	r5, r2
 8003636:	bb2a      	cbnz	r2, 8003684 <http_accept+0x54>
 8003638:	b321      	cbz	r1, 8003684 <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800363a:	2101      	movs	r1, #1
 800363c:	4620      	mov	r0, r4
 800363e:	f002 fd0b 	bl	8006058 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003642:	202c      	movs	r0, #44	; 0x2c
 8003644:	f001 fe08 	bl	8005258 <mem_malloc>
  if (ret != NULL) {
 8003648:	4606      	mov	r6, r0
 800364a:	b1f0      	cbz	r0, 800368a <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 800364c:	222c      	movs	r2, #44	; 0x2c
 800364e:	4629      	mov	r1, r5
 8003650:	f006 fbaa 	bl	8009da8 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8003654:	4631      	mov	r1, r6
 8003656:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8003658:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 800365a:	f002 fd15 	bl	8006088 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800365e:	490c      	ldr	r1, [pc, #48]	; (8003690 <http_accept+0x60>)
 8003660:	4620      	mov	r0, r4
 8003662:	f002 fd15 	bl	8006090 <tcp_recv>
  tcp_err(pcb, http_err);
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <http_accept+0x64>)
 8003668:	4620      	mov	r0, r4
 800366a:	f002 fd3f 	bl	80060ec <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <http_accept+0x68>)
 8003670:	4620      	mov	r0, r4
 8003672:	2204      	movs	r2, #4
 8003674:	f002 fd58 	bl	8006128 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8003678:	4908      	ldr	r1, [pc, #32]	; (800369c <http_accept+0x6c>)
 800367a:	4620      	mov	r0, r4
 800367c:	f002 fd20 	bl	80060c0 <tcp_sent>

  return ERR_OK;
}
 8003680:	4628      	mov	r0, r5
 8003682:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8003684:	f06f 0505 	mvn.w	r5, #5
 8003688:	e7fa      	b.n	8003680 <http_accept+0x50>
    return ERR_MEM;
 800368a:	f04f 35ff 	mov.w	r5, #4294967295
 800368e:	e7f7      	b.n	8003680 <http_accept+0x50>
 8003690:	0800382d 	.word	0x0800382d
 8003694:	08003b11 	.word	0x08003b11
 8003698:	080037f1 	.word	0x080037f1
 800369c:	080037d9 	.word	0x080037d9

080036a0 <http_close_conn>:
{
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4604      	mov	r4, r0
 80036a4:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f002 fcee 	bl	8006088 <tcp_arg>
  tcp_recv(pcb, NULL);
 80036ac:	2100      	movs	r1, #0
 80036ae:	4620      	mov	r0, r4
 80036b0:	f002 fcee 	bl	8006090 <tcp_recv>
  tcp_err(pcb, NULL);
 80036b4:	2100      	movs	r1, #0
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 fd18 	bl	80060ec <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80036bc:	2200      	movs	r2, #0
 80036be:	4611      	mov	r1, r2
 80036c0:	4620      	mov	r0, r4
 80036c2:	f002 fd31 	bl	8006128 <tcp_poll>
  tcp_sent(pcb, NULL);
 80036c6:	2100      	movs	r1, #0
 80036c8:	4620      	mov	r0, r4
 80036ca:	f002 fcf9 	bl	80060c0 <tcp_sent>
  if (hs != NULL) {
 80036ce:	b12d      	cbz	r5, 80036dc <http_close_conn+0x3c>
    http_state_eof(hs);
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff ff80 	bl	80035d6 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80036d6:	4628      	mov	r0, r5
 80036d8:	f001 fc7a 	bl	8004fd0 <mem_free>
  err = tcp_close(pcb);
 80036dc:	4620      	mov	r0, r4
 80036de:	f003 f833 	bl	8006748 <tcp_close>
  if (err != ERR_OK) {
 80036e2:	4605      	mov	r5, r0
 80036e4:	b120      	cbz	r0, 80036f0 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80036e6:	2204      	movs	r2, #4
 80036e8:	4902      	ldr	r1, [pc, #8]	; (80036f4 <http_close_conn+0x54>)
 80036ea:	4620      	mov	r0, r4
 80036ec:	f002 fd1c 	bl	8006128 <tcp_poll>
}
 80036f0:	4628      	mov	r0, r5
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	080037f1 	.word	0x080037f1

080036f8 <http_send>:
{
 80036f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036fc:	4607      	mov	r7, r0
  if (hs == NULL) {
 80036fe:	460d      	mov	r5, r1
 8003700:	b139      	cbz	r1, 8003712 <http_send+0x1a>
  if (hs->left == 0) {
 8003702:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003704:	b9a3      	cbnz	r3, 8003730 <http_send+0x38>
  if (hs->handle == NULL) {
 8003706:	6948      	ldr	r0, [r1, #20]
 8003708:	b938      	cbnz	r0, 800371a <http_send+0x22>
    http_close_conn(pcb, hs);
 800370a:	4629      	mov	r1, r5
 800370c:	4638      	mov	r0, r7
 800370e:	f7ff ffc7 	bl	80036a0 <http_close_conn>
      return 0;
 8003712:	2400      	movs	r4, #0
}
 8003714:	4620      	mov	r0, r4
 8003716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bytes_left = fs_bytes_left(hs->handle);
 800371a:	f7ff ff58 	bl	80035ce <fs_bytes_left>
  if (bytes_left <= 0) {
 800371e:	2800      	cmp	r0, #0
 8003720:	ddf3      	ble.n	800370a <http_send+0x12>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003722:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <http_send+0xd4>)
 8003724:	492a      	ldr	r1, [pc, #168]	; (80037d0 <http_send+0xd8>)
 8003726:	482b      	ldr	r0, [pc, #172]	; (80037d4 <http_send+0xdc>)
 8003728:	f240 4283 	movw	r2, #1155	; 0x483
 800372c:	f006 fb44 	bl	8009db8 <iprintf>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003730:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003732:	f8d5 8018 	ldr.w	r8, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003736:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800373a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800373e:	429a      	cmp	r2, r3
 8003740:	bf98      	it	ls
 8003742:	4614      	movls	r4, r2
 8003744:	b2a1      	uxth	r1, r4
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003746:	f1b8 0f00 	cmp.w	r8, #0
 800374a:	d032      	beq.n	80037b2 <http_send+0xba>
 800374c:	6968      	ldr	r0, [r5, #20]
 800374e:	b380      	cbz	r0, 80037b2 <http_send+0xba>
 8003750:	6843      	ldr	r3, [r0, #4]
 8003752:	1a9a      	subs	r2, r3, r2
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	4413      	add	r3, r2
 8003758:	ebb8 0303 	subs.w	r3, r8, r3
 800375c:	bf18      	it	ne
 800375e:	2301      	movne	r3, #1
  if (len == 0) {
 8003760:	b35c      	cbz	r4, 80037ba <http_send+0xc2>
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003762:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8003764:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8003768:	0064      	lsls	r4, r4, #1
 800376a:	b2a4      	uxth	r4, r4
 800376c:	4294      	cmp	r4, r2
 800376e:	bf28      	it	cs
 8003770:	4614      	movcs	r4, r2
 8003772:	428c      	cmp	r4, r1
 8003774:	bf28      	it	cs
 8003776:	460c      	movcs	r4, r1
    err = tcp_write(pcb, ptr, len, apiflags);
 8003778:	b2de      	uxtb	r6, r3
 800377a:	4633      	mov	r3, r6
 800377c:	4622      	mov	r2, r4
 800377e:	4641      	mov	r1, r8
 8003780:	4638      	mov	r0, r7
 8003782:	f004 fd75 	bl	8008270 <tcp_write>
    if (err == ERR_MEM) {
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d115      	bne.n	80037b6 <http_send+0xbe>
      if ((tcp_sndbuf(pcb) == 0) ||
 800378a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800378e:	b133      	cbz	r3, 800379e <http_send+0xa6>
 8003790:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003794:	2b08      	cmp	r3, #8
 8003796:	d802      	bhi.n	800379e <http_send+0xa6>
        len /= 2;
 8003798:	0864      	lsrs	r4, r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 800379a:	2c01      	cmp	r4, #1
 800379c:	d8ed      	bhi.n	800377a <http_send+0x82>
  u8_t data_to_send = 0;
 800379e:	2400      	movs	r4, #0
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80037a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1b6      	bne.n	8003714 <http_send+0x1c>
 80037a6:	6968      	ldr	r0, [r5, #20]
 80037a8:	f7ff ff11 	bl	80035ce <fs_bytes_left>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	dcb1      	bgt.n	8003714 <http_send+0x1c>
 80037b0:	e7ab      	b.n	800370a <http_send+0x12>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80037b2:	2301      	movs	r3, #1
 80037b4:	e7d4      	b.n	8003760 <http_send+0x68>
  if (err == ERR_OK) {
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1f1      	bne.n	800379e <http_send+0xa6>
    hs->file += len;
 80037ba:	69ab      	ldr	r3, [r5, #24]
 80037bc:	4423      	add	r3, r4
 80037be:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 80037c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037c2:	1b1c      	subs	r4, r3, r4
 80037c4:	626c      	str	r4, [r5, #36]	; 0x24
    data_to_send = 1;
 80037c6:	2401      	movs	r4, #1
 80037c8:	e7ea      	b.n	80037a0 <http_send+0xa8>
 80037ca:	bf00      	nop
 80037cc:	0800bb3b 	.word	0x0800bb3b
 80037d0:	0800bb71 	.word	0x0800bb71
 80037d4:	0800ace9 	.word	0x0800ace9

080037d8 <http_sent>:
{
 80037d8:	b508      	push	{r3, lr}
 80037da:	460b      	mov	r3, r1
  if (hs == NULL) {
 80037dc:	4601      	mov	r1, r0
 80037de:	b128      	cbz	r0, 80037ec <http_sent+0x14>
  hs->retries = 0;
 80037e0:	2200      	movs	r2, #0
 80037e2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff86 	bl	80036f8 <http_send>
}
 80037ec:	2000      	movs	r0, #0
 80037ee:	bd08      	pop	{r3, pc}

080037f0 <http_poll>:
{
 80037f0:	b510      	push	{r4, lr}
 80037f2:	460c      	mov	r4, r1
  if (hs == NULL) {
 80037f4:	4601      	mov	r1, r0
 80037f6:	b920      	cbnz	r0, 8003802 <http_poll+0x12>
      http_close_conn(pcb, hs);
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ff51 	bl	80036a0 <http_close_conn>
}
 80037fe:	2000      	movs	r0, #0
 8003800:	bd10      	pop	{r4, pc}
    hs->retries++;
 8003802:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003806:	3301      	adds	r3, #1
 8003808:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800380a:	2b04      	cmp	r3, #4
    hs->retries++;
 800380c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003810:	d0f2      	beq.n	80037f8 <http_poll+0x8>
    if(hs && (hs->handle)) {
 8003812:	6943      	ldr	r3, [r0, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f2      	beq.n	80037fe <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff ff6d 	bl	80036f8 <http_send>
 800381e:	2800      	cmp	r0, #0
 8003820:	d0ed      	beq.n	80037fe <http_poll+0xe>
        tcp_output(pcb);
 8003822:	4620      	mov	r0, r4
 8003824:	f005 f8aa 	bl	800897c <tcp_output>
 8003828:	e7e9      	b.n	80037fe <http_poll+0xe>
	...

0800382c <http_recv>:
{
 800382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003830:	b087      	sub	sp, #28
 8003832:	4604      	mov	r4, r0
 8003834:	9102      	str	r1, [sp, #8]
 8003836:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003838:	469a      	mov	sl, r3
 800383a:	b94b      	cbnz	r3, 8003850 <http_recv+0x24>
 800383c:	b152      	cbz	r2, 8003854 <http_recv+0x28>
 800383e:	b988      	cbnz	r0, 8003864 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8003840:	9802      	ldr	r0, [sp, #8]
 8003842:	8929      	ldrh	r1, [r5, #8]
 8003844:	f002 fbb4 	bl	8005fb0 <tcp_recved>
      pbuf_free(p);
 8003848:	4628      	mov	r0, r5
 800384a:	f001 ffa1 	bl	8005790 <pbuf_free>
 800384e:	e001      	b.n	8003854 <http_recv+0x28>
    if (p != NULL) {
 8003850:	2a00      	cmp	r2, #0
 8003852:	d1f5      	bne.n	8003840 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8003854:	4621      	mov	r1, r4
 8003856:	9802      	ldr	r0, [sp, #8]
 8003858:	f7ff ff22 	bl	80036a0 <http_close_conn>
}
 800385c:	2000      	movs	r0, #0
 800385e:	b007      	add	sp, #28
 8003860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8003864:	8911      	ldrh	r1, [r2, #8]
 8003866:	9802      	ldr	r0, [sp, #8]
 8003868:	f002 fba2 	bl	8005fb0 <tcp_recved>
    if (hs->handle == NULL) {
 800386c:	6963      	ldr	r3, [r4, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 812d 	bne.w	8003ace <http_recv+0x2a2>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003874:	69a3      	ldr	r3, [r4, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8131 	bne.w	8003ade <http_recv+0x2b2>
  if (hs->req == NULL) {
 800387c:	6a20      	ldr	r0, [r4, #32]
 800387e:	2800      	cmp	r0, #0
 8003880:	f040 808f 	bne.w	80039a2 <http_recv+0x176>
    hs->req = p;
 8003884:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8003886:	4628      	mov	r0, r5
 8003888:	f002 f940 	bl	8005b0c <pbuf_ref>
  if (hs->req->next != NULL) {
 800388c:	6a20      	ldr	r0, [r4, #32]
 800388e:	6803      	ldr	r3, [r0, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 808a 	beq.w	80039aa <http_recv+0x17e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003896:	f8b0 9008 	ldrh.w	r9, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800389a:	4992      	ldr	r1, [pc, #584]	; (8003ae4 <http_recv+0x2b8>)
    data = httpd_req_buf;
 800389c:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8003ae4 <http_recv+0x2b8>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80038a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80038a4:	4599      	cmp	r9, r3
 80038a6:	bf28      	it	cs
 80038a8:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80038aa:	464a      	mov	r2, r9
 80038ac:	2300      	movs	r3, #0
 80038ae:	f002 fa0d 	bl	8005ccc <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 80038b2:	f1b9 0f06 	cmp.w	r9, #6
 80038b6:	f240 80f7 	bls.w	8003aa8 <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80038ba:	464a      	mov	r2, r9
 80038bc:	498a      	ldr	r1, [pc, #552]	; (8003ae8 <http_recv+0x2bc>)
 80038be:	4640      	mov	r0, r8
 80038c0:	f000 f977 	bl	8003bb2 <lwip_strnstr>
    if (crlf != NULL) {
 80038c4:	2800      	cmp	r0, #0
 80038c6:	f000 80ef 	beq.w	8003aa8 <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 80038ca:	2204      	movs	r2, #4
 80038cc:	4987      	ldr	r1, [pc, #540]	; (8003aec <http_recv+0x2c0>)
 80038ce:	4640      	mov	r0, r8
 80038d0:	f006 fa98 	bl	8009e04 <strncmp>
 80038d4:	9001      	str	r0, [sp, #4]
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d16c      	bne.n	80039b4 <http_recv+0x188>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 80038da:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80038de:	b29b      	uxth	r3, r3
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 80038e0:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80038e4:	461a      	mov	r2, r3
 80038e6:	4982      	ldr	r1, [pc, #520]	; (8003af0 <http_recv+0x2c4>)
 80038e8:	9303      	str	r3, [sp, #12]
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 f961 	bl	8003bb2 <lwip_strnstr>
        sp1 = data + 3;
 80038f0:	f108 0b03 	add.w	fp, r8, #3
      if (sp2 == NULL) {
 80038f4:	4607      	mov	r7, r0
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	b950      	cbnz	r0, 8003910 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80038fa:	461a      	mov	r2, r3
 80038fc:	497a      	ldr	r1, [pc, #488]	; (8003ae8 <http_recv+0x2bc>)
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f957 	bl	8003bb2 <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003904:	4607      	mov	r7, r0
 8003906:	2800      	cmp	r0, #0
 8003908:	f000 80ce 	beq.w	8003aa8 <http_recv+0x27c>
        is_09 = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003910:	45bb      	cmp	fp, r7
 8003912:	f080 80c9 	bcs.w	8003aa8 <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003916:	464a      	mov	r2, r9
 8003918:	4976      	ldr	r1, [pc, #472]	; (8003af4 <http_recv+0x2c8>)
 800391a:	4640      	mov	r0, r8
 800391c:	f000 f949 	bl	8003bb2 <lwip_strnstr>
 8003920:	2800      	cmp	r0, #0
 8003922:	f000 80c1 	beq.w	8003aa8 <http_recv+0x27c>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003926:	1bbf      	subs	r7, r7, r6
          uri[uri_len] = 0;
 8003928:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	f888 3003 	strb.w	r3, [r8, #3]
  size_t uri_len = strlen(uri);
 8003930:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8003932:	55f3      	strb	r3, [r6, r7]
 8003934:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8003936:	f7fc fc55 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800393a:	2800      	cmp	r0, #0
 800393c:	f000 8092 	beq.w	8003a64 <http_recv+0x238>
 8003940:	1e47      	subs	r7, r0, #1
 8003942:	5df3      	ldrb	r3, [r6, r7]
 8003944:	2b2f      	cmp	r3, #47	; 0x2f
 8003946:	f040 808d 	bne.w	8003a64 <http_recv+0x238>
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <http_recv+0x2cc>)
 800394c:	429e      	cmp	r6, r3
 800394e:	469b      	mov	fp, r3
 8003950:	d102      	bne.n	8003958 <http_recv+0x12c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003952:	2801      	cmp	r0, #1
 8003954:	f040 8086 	bne.w	8003a64 <http_recv+0x238>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8003958:	2f3f      	cmp	r7, #63	; 0x3f
 800395a:	bf28      	it	cs
 800395c:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 800395e:	b13f      	cbz	r7, 8003970 <http_recv+0x144>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003960:	463a      	mov	r2, r7
 8003962:	4631      	mov	r1, r6
 8003964:	4864      	ldr	r0, [pc, #400]	; (8003af8 <http_recv+0x2cc>)
 8003966:	f006 fa14 	bl	8009d92 <memcpy>
      http_uri_buf[copy_len] = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	f80b 3007 	strb.w	r3, [fp, r7]
        file_name = g_psDefaultFilenames[loop].name;
 8003970:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8003b0c <http_recv+0x2e0>
        is_09 = 1;
 8003974:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8003978:	b317      	cbz	r7, 80039c0 <http_recv+0x194>
        if (len_left > 0) {
 800397a:	f1d7 023f 	rsbs	r2, r7, #63	; 0x3f
 800397e:	d00e      	beq.n	800399e <http_recv+0x172>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8003980:	f859 6038 	ldr.w	r6, [r9, r8, lsl #3]
 8003984:	9203      	str	r2, [sp, #12]
 8003986:	4630      	mov	r0, r6
 8003988:	f7fc fc2c 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800398c:	9a03      	ldr	r2, [sp, #12]
 800398e:	4282      	cmp	r2, r0
 8003990:	bf28      	it	cs
 8003992:	4602      	movcs	r2, r0
 8003994:	4631      	mov	r1, r6
 8003996:	eb0b 0007 	add.w	r0, fp, r7
 800399a:	f006 f9fa 	bl	8009d92 <memcpy>
        file_name = http_uri_buf;
 800399e:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <http_recv+0x2cc>)
 80039a0:	e010      	b.n	80039c4 <http_recv+0x198>
    pbuf_cat(hs->req, p);
 80039a2:	4629      	mov	r1, r5
 80039a4:	f002 f8ce 	bl	8005b44 <pbuf_cat>
 80039a8:	e76d      	b.n	8003886 <http_recv+0x5a>
    data = (char *)p->payload;
 80039aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 80039ae:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 80039b2:	e77e      	b.n	80038b2 <http_recv+0x86>
        data[4] = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f888 3004 	strb.w	r3, [r8, #4]
    return ERR_USE;
 80039ba:	f06f 0a0f 	mvn.w	sl, #15
 80039be:	e03b      	b.n	8003a38 <http_recv+0x20c>
        file_name = g_psDefaultFilenames[loop].name;
 80039c0:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80039c4:	9203      	str	r2, [sp, #12]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff fddf 	bl	800358c <fs_open>
 80039ce:	4626      	mov	r6, r4
      if(err == ERR_OK) {
 80039d0:	9a03      	ldr	r2, [sp, #12]
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d141      	bne.n	8003a5a <http_recv+0x22e>
        uri = file_name;
 80039d6:	9205      	str	r2, [sp, #20]
    hs->file = file->data;
 80039d8:	6833      	ldr	r3, [r6, #0]
 80039da:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80039dc:	6873      	ldr	r3, [r6, #4]
    hs->handle = file;
 80039de:	6166      	str	r6, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da06      	bge.n	80039f2 <http_recv+0x1c6>
 80039e4:	4b45      	ldr	r3, [pc, #276]	; (8003afc <http_recv+0x2d0>)
 80039e6:	4946      	ldr	r1, [pc, #280]	; (8003b00 <http_recv+0x2d4>)
 80039e8:	4846      	ldr	r0, [pc, #280]	; (8003b04 <http_recv+0x2d8>)
 80039ea:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80039ee:	f006 f9e3 	bl	8009db8 <iprintf>
      hs->left = file->len;
 80039f2:	6873      	ldr	r3, [r6, #4]
 80039f4:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80039fc:	6963      	ldr	r3, [r4, #20]
 80039fe:	7c1b      	ldrb	r3, [r3, #16]
 8003a00:	07da      	lsls	r2, r3, #31
 8003a02:	d468      	bmi.n	8003ad6 <http_recv+0x2aa>
 8003a04:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <http_recv+0x2d0>)
 8003a06:	4940      	ldr	r1, [pc, #256]	; (8003b08 <http_recv+0x2dc>)
 8003a08:	483e      	ldr	r0, [pc, #248]	; (8003b04 <http_recv+0x2d8>)
 8003a0a:	f640 02df 	movw	r2, #2271	; 0x8df
 8003a0e:	f006 f9d3 	bl	8009db8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003a12:	9b01      	ldr	r3, [sp, #4]
 8003a14:	b183      	cbz	r3, 8003a38 <http_recv+0x20c>
 8003a16:	6963      	ldr	r3, [r4, #20]
 8003a18:	7c1b      	ldrb	r3, [r3, #16]
 8003a1a:	07db      	lsls	r3, r3, #31
 8003a1c:	d50c      	bpl.n	8003a38 <http_recv+0x20c>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8003a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a20:	4934      	ldr	r1, [pc, #208]	; (8003af4 <http_recv+0x2c8>)
 8003a22:	69a0      	ldr	r0, [r4, #24]
 8003a24:	f000 f8c5 	bl	8003bb2 <lwip_strnstr>
      if (file_start != NULL) {
 8003a28:	b130      	cbz	r0, 8003a38 <http_recv+0x20c>
        size_t diff = file_start + 4 - hs->file;
 8003a2a:	69a3      	ldr	r3, [r4, #24]
 8003a2c:	3004      	adds	r0, #4
 8003a2e:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8003a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8003a32:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 8003a38:	6a20      	ldr	r0, [r4, #32]
 8003a3a:	b118      	cbz	r0, 8003a44 <http_recv+0x218>
          pbuf_free(hs->req);
 8003a3c:	f001 fea8 	bl	8005790 <pbuf_free>
          hs->req = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8003a44:	4628      	mov	r0, r5
 8003a46:	f001 fea3 	bl	8005790 <pbuf_free>
      if (parsed == ERR_OK) {
 8003a4a:	f1ba 0f00 	cmp.w	sl, #0
 8003a4e:	d139      	bne.n	8003ac4 <http_recv+0x298>
          http_send(pcb, hs);
 8003a50:	4621      	mov	r1, r4
 8003a52:	9802      	ldr	r0, [sp, #8]
 8003a54:	f7ff fe50 	bl	80036f8 <http_send>
 8003a58:	e700      	b.n	800385c <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003a5a:	f108 0801 	add.w	r8, r8, #1
 8003a5e:	f1b8 0f05 	cmp.w	r8, #5
 8003a62:	d189      	bne.n	8003978 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8003a64:	213f      	movs	r1, #63	; 0x3f
 8003a66:	9805      	ldr	r0, [sp, #20]
 8003a68:	f006 f9be 	bl	8009de8 <strchr>
    if (params != NULL) {
 8003a6c:	b108      	cbz	r0, 8003a72 <http_recv+0x246>
      *params = '\0';
 8003a6e:	2300      	movs	r3, #0
 8003a70:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8003a72:	9905      	ldr	r1, [sp, #20]
 8003a74:	4620      	mov	r0, r4
 8003a76:	4626      	mov	r6, r4
 8003a78:	f7ff fd88 	bl	800358c <fs_open>
    if (err == ERR_OK) {
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d0ab      	beq.n	80039d8 <http_recv+0x1ac>
      file = http_get_404_file(hs, &uri);
 8003a80:	a905      	add	r1, sp, #20
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff fdb6 	bl	80035f4 <http_get_404_file>
  if (file == NULL) {
 8003a88:	4606      	mov	r6, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d1a4      	bne.n	80039d8 <http_recv+0x1ac>
    file = http_get_404_file(hs, &uri);
 8003a8e:	a905      	add	r1, sp, #20
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff fdaf 	bl	80035f4 <http_get_404_file>
  if (file != NULL) {
 8003a96:	4606      	mov	r6, r0
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d19d      	bne.n	80039d8 <http_recv+0x1ac>
    hs->handle = NULL;
 8003a9c:	6160      	str	r0, [r4, #20]
    hs->file = NULL;
 8003a9e:	61a0      	str	r0, [r4, #24]
    hs->left = 0;
 8003aa0:	6260      	str	r0, [r4, #36]	; 0x24
    hs->retries = 0;
 8003aa2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8003aa6:	e7c7      	b.n	8003a38 <http_recv+0x20c>
  clen = pbuf_clen(hs->req);
 8003aa8:	6a20      	ldr	r0, [r4, #32]
 8003aaa:	f002 f827 	bl	8005afc <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003aae:	6a23      	ldr	r3, [r4, #32]
 8003ab0:	891b      	ldrh	r3, [r3, #8]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d280      	bcs.n	80039ba <http_recv+0x18e>
 8003ab8:	2805      	cmp	r0, #5
 8003aba:	f63f af7e 	bhi.w	80039ba <http_recv+0x18e>
 8003abe:	f06f 0a04 	mvn.w	sl, #4
 8003ac2:	e7bf      	b.n	8003a44 <http_recv+0x218>
      } else if (parsed == ERR_ARG) {
 8003ac4:	f11a 0f10 	cmn.w	sl, #16
 8003ac8:	f47f aec8 	bne.w	800385c <http_recv+0x30>
 8003acc:	e6c2      	b.n	8003854 <http_recv+0x28>
      pbuf_free(p);
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f001 fe5e 	bl	8005790 <pbuf_free>
 8003ad4:	e6c2      	b.n	800385c <http_recv+0x30>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003ad6:	9b01      	ldr	r3, [sp, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ad      	beq.n	8003a38 <http_recv+0x20c>
 8003adc:	e79f      	b.n	8003a1e <http_recv+0x1f2>
    return ERR_USE;
 8003ade:	f06f 0a07 	mvn.w	sl, #7
 8003ae2:	e7a9      	b.n	8003a38 <http_recv+0x20c>
 8003ae4:	20003e2c 	.word	0x20003e2c
 8003ae8:	0800baf1 	.word	0x0800baf1
 8003aec:	0800baea 	.word	0x0800baea
 8003af0:	0800d458 	.word	0x0800d458
 8003af4:	0800baef 	.word	0x0800baef
 8003af8:	20003dec 	.word	0x20003dec
 8003afc:	0800bb3b 	.word	0x0800bb3b
 8003b00:	0800baf4 	.word	0x0800baf4
 8003b04:	0800ace9 	.word	0x0800ace9
 8003b08:	0800bb12 	.word	0x0800bb12
 8003b0c:	0800baa4 	.word	0x0800baa4

08003b10 <http_err>:
{
 8003b10:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8003b12:	4604      	mov	r4, r0
 8003b14:	b130      	cbz	r0, 8003b24 <http_err+0x14>
    http_state_eof(hs);
 8003b16:	f7ff fd5e 	bl	80035d6 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8003b1a:	4620      	mov	r0, r4
}
 8003b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8003b20:	f001 ba56 	b.w	8004fd0 <mem_free>
 8003b24:	bd10      	pop	{r4, pc}
	...

08003b28 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8003b28:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8003b2a:	202e      	movs	r0, #46	; 0x2e
 8003b2c:	f002 fff4 	bl	8006b18 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8003b30:	4604      	mov	r4, r0
 8003b32:	b930      	cbnz	r0, 8003b42 <httpd_init+0x1a>
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <httpd_init+0x64>)
 8003b36:	4916      	ldr	r1, [pc, #88]	; (8003b90 <httpd_init+0x68>)
 8003b38:	4816      	ldr	r0, [pc, #88]	; (8003b94 <httpd_init+0x6c>)
 8003b3a:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003b3e:	f006 f93b 	bl	8009db8 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003b42:	2101      	movs	r1, #1
 8003b44:	4620      	mov	r0, r4
 8003b46:	f002 fa87 	bl	8006058 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8003b4a:	2250      	movs	r2, #80	; 0x50
 8003b4c:	4912      	ldr	r1, [pc, #72]	; (8003b98 <httpd_init+0x70>)
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f002 f95c 	bl	8005e0c <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8003b54:	b130      	cbz	r0, 8003b64 <httpd_init+0x3c>
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <httpd_init+0x64>)
 8003b58:	4910      	ldr	r1, [pc, #64]	; (8003b9c <httpd_init+0x74>)
 8003b5a:	480e      	ldr	r0, [pc, #56]	; (8003b94 <httpd_init+0x6c>)
 8003b5c:	f640 2215 	movw	r2, #2581	; 0xa15
 8003b60:	f006 f92a 	bl	8009db8 <iprintf>
  pcb = tcp_listen(pcb);
 8003b64:	4620      	mov	r0, r4
 8003b66:	21ff      	movs	r1, #255	; 0xff
 8003b68:	f002 f9f2 	bl	8005f50 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	b930      	cbnz	r0, 8003b7e <httpd_init+0x56>
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <httpd_init+0x64>)
 8003b72:	490b      	ldr	r1, [pc, #44]	; (8003ba0 <httpd_init+0x78>)
 8003b74:	4807      	ldr	r0, [pc, #28]	; (8003b94 <httpd_init+0x6c>)
 8003b76:	f640 2217 	movw	r2, #2583	; 0xa17
 8003b7a:	f006 f91d 	bl	8009db8 <iprintf>
  tcp_accept(pcb, http_accept);
 8003b7e:	4620      	mov	r0, r4
 8003b80:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <httpd_init+0x7c>)
}
 8003b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8003b86:	f002 bac9 	b.w	800611c <tcp_accept>
 8003b8a:	bf00      	nop
 8003b8c:	0800bb3b 	.word	0x0800bb3b
 8003b90:	0800bba8 	.word	0x0800bba8
 8003b94:	0800ace9 	.word	0x0800ace9
 8003b98:	0800bf1c 	.word	0x0800bf1c
 8003b9c:	0800bbc3 	.word	0x0800bbc3
 8003ba0:	0800bbdf 	.word	0x0800bbdf
 8003ba4:	08003631 	.word	0x08003631

08003ba8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003ba8:	ba40      	rev16	r0, r0
}
 8003baa:	b280      	uxth	r0, r0
 8003bac:	4770      	bx	lr

08003bae <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8003bae:	ba00      	rev	r0, r0
 8003bb0:	4770      	bx	lr

08003bb2 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8003bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb4:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8003bb6:	4608      	mov	r0, r1
{
 8003bb8:	460f      	mov	r7, r1
 8003bba:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8003bbc:	f7fc fb12 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	b190      	cbz	r0, 8003bea <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003bc4:	4425      	add	r5, r4
 8003bc6:	7820      	ldrb	r0, [r4, #0]
 8003bc8:	b180      	cbz	r0, 8003bec <lwip_strnstr+0x3a>
 8003bca:	19a3      	adds	r3, r4, r6
 8003bcc:	429d      	cmp	r5, r3
 8003bce:	d201      	bcs.n	8003bd4 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8003bd4:	783b      	ldrb	r3, [r7, #0]
 8003bd6:	4283      	cmp	r3, r0
 8003bd8:	d105      	bne.n	8003be6 <lwip_strnstr+0x34>
 8003bda:	4632      	mov	r2, r6
 8003bdc:	4639      	mov	r1, r7
 8003bde:	4620      	mov	r0, r4
 8003be0:	f006 f910 	bl	8009e04 <strncmp>
 8003be4:	b108      	cbz	r0, 8003bea <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003be6:	3401      	adds	r4, #1
 8003be8:	e7ed      	b.n	8003bc6 <lwip_strnstr+0x14>
 8003bea:	4620      	mov	r0, r4
}
 8003bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003bee:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8003bf0:	f005 fc1a 	bl	8009428 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8003bf4:	f001 f9b6 	bl	8004f64 <mem_init>
  memp_init();
 8003bf8:	f001 fc1a 	bl	8005430 <memp_init>
  pbuf_init();
  netif_init();
 8003bfc:	f001 fc65 	bl	80054ca <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003c00:	f005 fa8e 	bl	8009120 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003c04:	f002 f900 	bl	8005e08 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8003c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8003c0c:	f005 ba0c 	b.w	8009028 <sys_timeouts_init>

08003c10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8003c10:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8003c12:	2618      	movs	r6, #24
 8003c14:	4c07      	ldr	r4, [pc, #28]	; (8003c34 <etharp_free_entry+0x24>)
 8003c16:	4346      	muls	r6, r0
{
 8003c18:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8003c1a:	59a0      	ldr	r0, [r4, r6]
 8003c1c:	b118      	cbz	r0, 8003c26 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8003c1e:	f001 fdb7 	bl	8005790 <pbuf_free>
    arp_table[i].q = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8003c26:	2318      	movs	r3, #24
 8003c28:	fb03 4405 	mla	r4, r3, r5, r4
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	7523      	strb	r3, [r4, #20]
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	bf00      	nop
 8003c34:	2000422c 	.word	0x2000422c

08003c38 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8003c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003c3e:	4689      	mov	r9, r1
 8003c40:	4692      	mov	sl, r2
 8003c42:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8003c44:	4607      	mov	r7, r0
 8003c46:	b930      	cbnz	r0, 8003c56 <etharp_raw+0x1e>
 8003c48:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <etharp_raw+0xc4>)
 8003c4a:	492d      	ldr	r1, [pc, #180]	; (8003d00 <etharp_raw+0xc8>)
 8003c4c:	482d      	ldr	r0, [pc, #180]	; (8003d04 <etharp_raw+0xcc>)
 8003c4e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8003c52:	f006 f8b1 	bl	8009db8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8003c56:	2200      	movs	r2, #0
 8003c58:	211c      	movs	r1, #28
 8003c5a:	2002      	movs	r0, #2
 8003c5c:	f001 fe02 	bl	8005864 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8003c60:	4606      	mov	r6, r0
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d047      	beq.n	8003cf6 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8003c66:	8943      	ldrh	r3, [r0, #10]
 8003c68:	2b1b      	cmp	r3, #27
 8003c6a:	d806      	bhi.n	8003c7a <etharp_raw+0x42>
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <etharp_raw+0xc4>)
 8003c6e:	4926      	ldr	r1, [pc, #152]	; (8003d08 <etharp_raw+0xd0>)
 8003c70:	4824      	ldr	r0, [pc, #144]	; (8003d04 <etharp_raw+0xcc>)
 8003c72:	f240 4264 	movw	r2, #1124	; 0x464
 8003c76:	f006 f89f 	bl	8009db8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8003c7a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8003c7e:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8003c80:	f7ff ff92 	bl	8003ba8 <lwip_htons>
 8003c84:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8003c86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d006      	beq.n	8003c9c <etharp_raw+0x64>
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <etharp_raw+0xc4>)
 8003c90:	491e      	ldr	r1, [pc, #120]	; (8003d0c <etharp_raw+0xd4>)
 8003c92:	481c      	ldr	r0, [pc, #112]	; (8003d04 <etharp_raw+0xcc>)
 8003c94:	f240 426b 	movw	r2, #1131	; 0x46b
 8003c98:	f006 f88e 	bl	8009db8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8003c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003ca6:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	f8c4 3012 	str.w	r3, [r4, #18]
 8003cae:	88ab      	ldrh	r3, [r5, #4]
 8003cb0:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8003cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8003cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8003cc8:	2306      	movs	r3, #6
 8003cca:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8003ccc:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003cce:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8003cd0:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8003cd2:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8003cd6:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8003cd8:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8003cda:	464a      	mov	r2, r9
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4653      	mov	r3, sl
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	f005 fb18 	bl	8009318 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f001 fd51 	bl	8005790 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8003cee:	4628      	mov	r0, r5
}
 8003cf0:	b002      	add	sp, #8
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	e7f9      	b.n	8003cf0 <etharp_raw+0xb8>
 8003cfc:	0800bd2d 	.word	0x0800bd2d
 8003d00:	0800bd64 	.word	0x0800bd64
 8003d04:	0800ace9 	.word	0x0800ace9
 8003d08:	0800bd72 	.word	0x0800bd72
 8003d0c:	0800bda3 	.word	0x0800bda3

08003d10 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <etharp_find_entry.isra.0+0x100>)
 8003d16:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8003d18:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8003d1e:	4694      	mov	ip, r2
 8003d20:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8003d22:	4681      	mov	r9, r0
 8003d24:	4680      	mov	r8, r0
 8003d26:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8003d28:	4696      	mov	lr, r2
 8003d2a:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003d2c:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8003d30:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003d32:	d112      	bne.n	8003d5a <etharp_find_entry.isra.0+0x4a>
 8003d34:	b99f      	cbnz	r7, 8003d5e <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8003d36:	fa4f fe80 	sxtb.w	lr, r0
 8003d3a:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003d3c:	280a      	cmp	r0, #10
 8003d3e:	f103 0318 	add.w	r3, r3, #24
 8003d42:	d1f3      	bne.n	8003d2c <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8003d44:	9b01      	ldr	r3, [sp, #4]
 8003d46:	0799      	lsls	r1, r3, #30
 8003d48:	d404      	bmi.n	8003d54 <etharp_find_entry.isra.0+0x44>
 8003d4a:	f1be 0f0a 	cmp.w	lr, #10
 8003d4e:	d11c      	bne.n	8003d8a <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8003d50:	07db      	lsls	r3, r3, #31
 8003d52:	d435      	bmi.n	8003dc0 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e009      	b.n	8003d6e <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8003d5a:	2f00      	cmp	r7, #0
 8003d5c:	d0ed      	beq.n	8003d3a <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	d04a      	beq.n	8003df8 <etharp_find_entry.isra.0+0xe8>
 8003d62:	6829      	ldr	r1, [r5, #0]
 8003d64:	468a      	mov	sl, r1
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	458a      	cmp	sl, r1
 8003d6a:	d145      	bne.n	8003df8 <etharp_find_entry.isra.0+0xe8>
        return i;
 8003d6c:	b240      	sxtb	r0, r0
}
 8003d6e:	b003      	add	sp, #12
 8003d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8003d74:	45c2      	cmp	sl, r8
 8003d76:	d3e0      	bcc.n	8003d3a <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8003d78:	fa4f fc80 	sxtb.w	ip, r0
 8003d7c:	46d0      	mov	r8, sl
 8003d7e:	e7dc      	b.n	8003d3a <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8003d80:	45ca      	cmp	sl, r9
            old_stable = i;
 8003d82:	bf24      	itt	cs
 8003d84:	b244      	sxtbcs	r4, r0
 8003d86:	46d1      	movcs	r9, sl
 8003d88:	e7d7      	b.n	8003d3a <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8003d8a:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8003d8e:	2318      	movs	r3, #24
 8003d90:	fb03 6307 	mla	r3, r3, r7, r6
 8003d94:	7d1b      	ldrb	r3, [r3, #20]
 8003d96:	b133      	cbz	r3, 8003da6 <etharp_find_entry.isra.0+0x96>
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <etharp_find_entry.isra.0+0x104>)
 8003d9a:	491f      	ldr	r1, [pc, #124]	; (8003e18 <etharp_find_entry.isra.0+0x108>)
 8003d9c:	481f      	ldr	r0, [pc, #124]	; (8003e1c <etharp_find_entry.isra.0+0x10c>)
 8003d9e:	f240 1287 	movw	r2, #391	; 0x187
 8003da2:	f006 f809 	bl	8009db8 <iprintf>
  if (ipaddr != NULL) {
 8003da6:	b125      	cbz	r5, 8003db2 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8003da8:	2318      	movs	r3, #24
 8003daa:	fb03 6307 	mla	r3, r3, r7, r6
 8003dae:	682a      	ldr	r2, [r5, #0]
 8003db0:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8003db2:	2318      	movs	r3, #24
 8003db4:	fb03 6607 	mla	r6, r3, r7, r6
 8003db8:	2300      	movs	r3, #0
 8003dba:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 8003dbc:	b278      	sxtb	r0, r7
 8003dbe:	e7d6      	b.n	8003d6e <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 8003dc0:	2c0a      	cmp	r4, #10
 8003dc2:	d00f      	beq.n	8003de4 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003dc4:	2318      	movs	r3, #24
      i = old_stable;
 8003dc6:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003dc8:	435c      	muls	r4, r3
 8003dca:	5933      	ldr	r3, [r6, r4]
 8003dcc:	b133      	cbz	r3, 8003ddc <etharp_find_entry.isra.0+0xcc>
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <etharp_find_entry.isra.0+0x104>)
 8003dd0:	4913      	ldr	r1, [pc, #76]	; (8003e20 <etharp_find_entry.isra.0+0x110>)
 8003dd2:	4812      	ldr	r0, [pc, #72]	; (8003e1c <etharp_find_entry.isra.0+0x10c>)
 8003dd4:	f240 126f 	movw	r2, #367	; 0x16f
 8003dd8:	f005 ffee 	bl	8009db8 <iprintf>
    etharp_free_entry(i);
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f7ff ff17 	bl	8003c10 <etharp_free_entry>
 8003de2:	e7d4      	b.n	8003d8e <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8003de4:	f1bc 0f0a 	cmp.w	ip, #10
 8003de8:	d002      	beq.n	8003df0 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 8003dea:	fa5f f78c 	uxtb.w	r7, ip
 8003dee:	e7f5      	b.n	8003ddc <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8003df0:	2a0a      	cmp	r2, #10
 8003df2:	d0af      	beq.n	8003d54 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8003df4:	b2d7      	uxtb	r7, r2
 8003df6:	e7f1      	b.n	8003ddc <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8003df8:	2f01      	cmp	r7, #1
 8003dfa:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8003dfe:	d1bf      	bne.n	8003d80 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8003e00:	681f      	ldr	r7, [r3, #0]
 8003e02:	2f00      	cmp	r7, #0
 8003e04:	d0b6      	beq.n	8003d74 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8003e06:	45da      	cmp	sl, fp
 8003e08:	d397      	bcc.n	8003d3a <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8003e0a:	b242      	sxtb	r2, r0
 8003e0c:	46d3      	mov	fp, sl
 8003e0e:	e794      	b.n	8003d3a <etharp_find_entry.isra.0+0x2a>
 8003e10:	2000422c 	.word	0x2000422c
 8003e14:	0800bd2d 	.word	0x0800bd2d
 8003e18:	0800bc4f 	.word	0x0800bc4f
 8003e1c:	0800ace9 	.word	0x0800ace9
 8003e20:	0800bc38 	.word	0x0800bc38

08003e24 <etharp_cleanup_netif>:
{
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4d08      	ldr	r5, [pc, #32]	; (8003e48 <etharp_cleanup_netif+0x24>)
 8003e28:	4606      	mov	r6, r0
 8003e2a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8003e2c:	7d2b      	ldrb	r3, [r5, #20]
 8003e2e:	b12b      	cbz	r3, 8003e3c <etharp_cleanup_netif+0x18>
 8003e30:	68ab      	ldr	r3, [r5, #8]
 8003e32:	42b3      	cmp	r3, r6
 8003e34:	d102      	bne.n	8003e3c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff feea 	bl	8003c10 <etharp_free_entry>
 8003e3c:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003e3e:	2c0a      	cmp	r4, #10
 8003e40:	f105 0518 	add.w	r5, r5, #24
 8003e44:	d1f2      	bne.n	8003e2c <etharp_cleanup_netif+0x8>
}
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	2000422c 	.word	0x2000422c

08003e4c <etharp_input>:
{
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	4680      	mov	r8, r0
 8003e52:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003e54:	460c      	mov	r4, r1
 8003e56:	b949      	cbnz	r1, 8003e6c <etharp_input+0x20>
 8003e58:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <etharp_input+0x128>)
 8003e5a:	4947      	ldr	r1, [pc, #284]	; (8003f78 <etharp_input+0x12c>)
 8003e5c:	4847      	ldr	r0, [pc, #284]	; (8003f7c <etharp_input+0x130>)
 8003e5e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003e62:	f005 ffa9 	bl	8009db8 <iprintf>
}
 8003e66:	b006      	add	sp, #24
 8003e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8003e6c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8003e6e:	882b      	ldrh	r3, [r5, #0]
 8003e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e74:	d108      	bne.n	8003e88 <etharp_input+0x3c>
 8003e76:	792b      	ldrb	r3, [r5, #4]
 8003e78:	2b06      	cmp	r3, #6
 8003e7a:	d105      	bne.n	8003e88 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8003e7c:	796b      	ldrb	r3, [r5, #5]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d102      	bne.n	8003e88 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8003e82:	886b      	ldrh	r3, [r5, #2]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d003      	beq.n	8003e90 <etharp_input+0x44>
  pbuf_free(p);
 8003e88:	4640      	mov	r0, r8
 8003e8a:	f001 fc81 	bl	8005790 <pbuf_free>
 8003e8e:	e7ea      	b.n	8003e66 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003e90:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8003e92:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8003e96:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8003e98:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003e9a:	b116      	cbz	r6, 8003ea2 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8003e9c:	1b9b      	subs	r3, r3, r6
 8003e9e:	425e      	negs	r6, r3
 8003ea0:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003ea2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003ea6:	2e00      	cmp	r6, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	f04f 0901 	movne.w	r9, #1
 8003eae:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003eb2:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003eb4:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003eb8:	d006      	beq.n	8003ec8 <etharp_input+0x7c>
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <etharp_input+0x128>)
 8003ebc:	4930      	ldr	r1, [pc, #192]	; (8003f80 <etharp_input+0x134>)
 8003ebe:	482f      	ldr	r0, [pc, #188]	; (8003f7c <etharp_input+0x130>)
 8003ec0:	f240 12ab 	movw	r2, #427	; 0x1ab
 8003ec4:	f005 ff78 	bl	8009db8 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8003ec8:	9805      	ldr	r0, [sp, #20]
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d03c      	beq.n	8003f48 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003ece:	4621      	mov	r1, r4
 8003ed0:	f000 fc95 	bl	80047fe <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8003ed4:	4682      	mov	sl, r0
 8003ed6:	bbb8      	cbnz	r0, 8003f48 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8003ed8:	9b05      	ldr	r3, [sp, #20]
 8003eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003ede:	2be0      	cmp	r3, #224	; 0xe0
 8003ee0:	d032      	beq.n	8003f48 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	a805      	add	r0, sp, #20
 8003ee6:	f7ff ff13 	bl	8003d10 <etharp_find_entry.isra.0>
  if (i < 0) {
 8003eea:	2800      	cmp	r0, #0
 8003eec:	db2c      	blt.n	8003f48 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <etharp_input+0x138>)
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	fb02 f100 	mul.w	r1, r2, r0
 8003ef6:	eb03 0e01 	add.w	lr, r3, r1
 8003efa:	f04f 0c02 	mov.w	ip, #2
 8003efe:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003f02:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8003f06:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003f0a:	fb12 c200 	smlabb	r2, r2, r0, ip
 8003f0e:	6838      	ldr	r0, [r7, #0]
 8003f10:	5098      	str	r0, [r3, r2]
 8003f12:	eb03 0c02 	add.w	ip, r3, r2
 8003f16:	88ba      	ldrh	r2, [r7, #4]
 8003f18:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8003f1c:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8003f20:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8003f24:	f1b9 0f00 	cmp.w	r9, #0
 8003f28:	d00e      	beq.n	8003f48 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8003f2a:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8003f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8003f38:	463b      	mov	r3, r7
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f005 f9eb 	bl	8009318 <ethernet_output>
    pbuf_free(p);
 8003f42:	4648      	mov	r0, r9
 8003f44:	f001 fc24 	bl	8005790 <pbuf_free>
  switch (hdr->opcode) {
 8003f48:	88eb      	ldrh	r3, [r5, #6]
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d19b      	bne.n	8003e88 <etharp_input+0x3c>
    if (for_us) {
 8003f50:	2e00      	cmp	r6, #0
 8003f52:	d099      	beq.n	8003e88 <etharp_input+0x3c>
      etharp_raw(netif,
 8003f54:	2202      	movs	r2, #2
 8003f56:	9203      	str	r2, [sp, #12]
 8003f58:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8003f5a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8003f5e:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8003f60:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8003f62:	9200      	str	r2, [sp, #0]
 8003f64:	9701      	str	r7, [sp, #4]
 8003f66:	463a      	mov	r2, r7
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7ff fe64 	bl	8003c38 <etharp_raw>
 8003f70:	e78a      	b.n	8003e88 <etharp_input+0x3c>
 8003f72:	bf00      	nop
 8003f74:	0800bd2d 	.word	0x0800bd2d
 8003f78:	0800bd64 	.word	0x0800bd64
 8003f7c:	0800ace9 	.word	0x0800ace9
 8003f80:	0800bc97 	.word	0x0800bc97
 8003f84:	2000422c 	.word	0x2000422c

08003f88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f8a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003f8c:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8003f90:	9102      	str	r1, [sp, #8]
 8003f92:	2401      	movs	r4, #1
 8003f94:	4905      	ldr	r1, [pc, #20]	; (8003fac <etharp_request+0x24>)
 8003f96:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8003f98:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003f9a:	9200      	str	r2, [sp, #0]
 8003f9c:	9403      	str	r4, [sp, #12]
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <etharp_request+0x28>)
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7ff fe49 	bl	8003c38 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	bf00      	nop
 8003fac:	0800d3a0 	.word	0x0800d3a0
 8003fb0:	0800d334 	.word	0x0800d334

08003fb4 <etharp_tmr>:
{
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	4c13      	ldr	r4, [pc, #76]	; (8004004 <etharp_tmr+0x50>)
 8003fb8:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003fba:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003fbc:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8003fbe:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8003fc0:	b16a      	cbz	r2, 8003fde <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8003fc2:	89e3      	ldrh	r3, [r4, #14]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003fc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8003fcc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003fce:	d203      	bcs.n	8003fd8 <etharp_tmr+0x24>
 8003fd0:	2a01      	cmp	r2, #1
 8003fd2:	d10a      	bne.n	8003fea <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d90c      	bls.n	8003ff2 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff fe19 	bl	8003c10 <etharp_free_entry>
 8003fde:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003fe0:	2d0a      	cmp	r5, #10
 8003fe2:	f104 0418 	add.w	r4, r4, #24
 8003fe6:	d1ea      	bne.n	8003fbe <etharp_tmr+0xa>
 8003fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8003fea:	2a03      	cmp	r2, #3
 8003fec:	d106      	bne.n	8003ffc <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003fee:	7427      	strb	r7, [r4, #16]
 8003ff0:	e7f5      	b.n	8003fde <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	6860      	ldr	r0, [r4, #4]
 8003ff6:	f7ff ffc7 	bl	8003f88 <etharp_request>
 8003ffa:	e7f0      	b.n	8003fde <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8003ffc:	2a04      	cmp	r2, #4
 8003ffe:	d1ee      	bne.n	8003fde <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004000:	7426      	strb	r6, [r4, #16]
 8004002:	e7ec      	b.n	8003fde <etharp_tmr+0x2a>
 8004004:	20004230 	.word	0x20004230

08004008 <etharp_output_to_arp_index>:
{
 8004008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800400c:	4d27      	ldr	r5, [pc, #156]	; (80040ac <etharp_output_to_arp_index+0xa4>)
{
 800400e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004010:	2218      	movs	r2, #24
 8004012:	fb02 5204 	mla	r2, r2, r4, r5
{
 8004016:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004018:	7d12      	ldrb	r2, [r2, #20]
 800401a:	2a01      	cmp	r2, #1
{
 800401c:	4606      	mov	r6, r0
 800401e:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004020:	d806      	bhi.n	8004030 <etharp_output_to_arp_index+0x28>
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <etharp_output_to_arp_index+0xa8>)
 8004024:	4923      	ldr	r1, [pc, #140]	; (80040b4 <etharp_output_to_arp_index+0xac>)
 8004026:	4824      	ldr	r0, [pc, #144]	; (80040b8 <etharp_output_to_arp_index+0xb0>)
 8004028:	f240 22ed 	movw	r2, #749	; 0x2ed
 800402c:	f005 fec4 	bl	8009db8 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004030:	2118      	movs	r1, #24
 8004032:	fb01 5904 	mla	r9, r1, r4, r5
 8004036:	f106 0725 	add.w	r7, r6, #37	; 0x25
 800403a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d10d      	bne.n	800405e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8004042:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8004046:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800404a:	d917      	bls.n	800407c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800404c:	4649      	mov	r1, r9
 800404e:	3104      	adds	r1, #4
 8004050:	4630      	mov	r0, r6
 8004052:	f7ff ff99 	bl	8003f88 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004056:	b910      	cbnz	r0, 800405e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004058:	2303      	movs	r3, #3
 800405a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800405e:	2318      	movs	r3, #24
 8004060:	fb03 5304 	mla	r3, r3, r4, r5
 8004064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004068:	9200      	str	r2, [sp, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	463a      	mov	r2, r7
 800406e:	4641      	mov	r1, r8
 8004070:	4630      	mov	r0, r6
 8004072:	f005 f951 	bl	8009318 <ethernet_output>
}
 8004076:	b005      	add	sp, #20
 8004078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800407c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004080:	d3ed      	bcc.n	800405e <etharp_output_to_arp_index+0x56>
 8004082:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004086:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004088:	f103 020c 	add.w	r2, r3, #12
 800408c:	3304      	adds	r3, #4
 800408e:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004090:	9302      	str	r3, [sp, #8]
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <etharp_output_to_arp_index+0xb4>)
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004098:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800409a:	9103      	str	r1, [sp, #12]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	442a      	add	r2, r5
 80040a0:	463b      	mov	r3, r7
 80040a2:	4639      	mov	r1, r7
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff fdc7 	bl	8003c38 <etharp_raw>
 80040aa:	e7d4      	b.n	8004056 <etharp_output_to_arp_index+0x4e>
 80040ac:	2000422c 	.word	0x2000422c
 80040b0:	0800bd2d 	.word	0x0800bd2d
 80040b4:	0800bcbb 	.word	0x0800bcbb
 80040b8:	0800ace9 	.word	0x0800ace9
 80040bc:	0800d3a0 	.word	0x0800d3a0

080040c0 <etharp_query>:
{
 80040c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	4689      	mov	r9, r1
 80040c6:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80040c8:	4601      	mov	r1, r0
 80040ca:	f8d9 0000 	ldr.w	r0, [r9]
{
 80040ce:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80040d0:	f000 fb95 	bl	80047fe <ip4_addr_isbroadcast_u32>
 80040d4:	4604      	mov	r4, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d15e      	bne.n	8004198 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80040da:	f8d9 3000 	ldr.w	r3, [r9]
 80040de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80040e2:	2ae0      	cmp	r2, #224	; 0xe0
 80040e4:	d058      	beq.n	8004198 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d056      	beq.n	8004198 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80040ea:	2101      	movs	r1, #1
 80040ec:	4648      	mov	r0, r9
 80040ee:	f7ff fe0f 	bl	8003d10 <etharp_find_entry.isra.0>
  if (i < 0) {
 80040f2:	1e05      	subs	r5, r0, #0
 80040f4:	db53      	blt.n	800419e <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80040f6:	4f40      	ldr	r7, [pc, #256]	; (80041f8 <etharp_query+0x138>)
 80040f8:	2318      	movs	r3, #24
 80040fa:	fb03 7305 	mla	r3, r3, r5, r7
 80040fe:	7d1a      	ldrb	r2, [r3, #20]
 8004100:	b91a      	cbnz	r2, 800410a <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004102:	2401      	movs	r4, #1
 8004104:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8004106:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800410a:	2318      	movs	r3, #24
 800410c:	fb03 7305 	mla	r3, r3, r5, r7
 8004110:	7d1b      	ldrb	r3, [r3, #20]
 8004112:	b933      	cbnz	r3, 8004122 <etharp_query+0x62>
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <etharp_query+0x13c>)
 8004116:	493a      	ldr	r1, [pc, #232]	; (8004200 <etharp_query+0x140>)
 8004118:	483a      	ldr	r0, [pc, #232]	; (8004204 <etharp_query+0x144>)
 800411a:	f240 32c9 	movw	r2, #969	; 0x3c9
 800411e:	f005 fe4b 	bl	8009db8 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8004122:	b90c      	cbnz	r4, 8004128 <etharp_query+0x68>
 8004124:	2e00      	cmp	r6, #0
 8004126:	d13c      	bne.n	80041a2 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8004128:	4649      	mov	r1, r9
 800412a:	4640      	mov	r0, r8
 800412c:	f7ff ff2c 	bl	8003f88 <etharp_request>
    if (q == NULL) {
 8004130:	2e00      	cmp	r6, #0
 8004132:	d138      	bne.n	80041a6 <etharp_query+0xe6>
}
 8004134:	b002      	add	sp, #8
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800413a:	d1fb      	bne.n	8004134 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800413c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80041fc <etharp_query+0x13c>
 8004140:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800420c <etharp_query+0x14c>
 8004144:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004204 <etharp_query+0x144>
 8004148:	4634      	mov	r4, r6
    while (p) {
 800414a:	b99c      	cbnz	r4, 8004174 <etharp_query+0xb4>
      pbuf_ref(p);
 800414c:	4630      	mov	r0, r6
 800414e:	f001 fcdd 	bl	8005b0c <pbuf_ref>
    if (p != NULL) {
 8004152:	2e00      	cmp	r6, #0
 8004154:	d04c      	beq.n	80041f0 <etharp_query+0x130>
 8004156:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8004158:	2318      	movs	r3, #24
 800415a:	fb03 f205 	mul.w	r2, r3, r5
 800415e:	461c      	mov	r4, r3
 8004160:	58b8      	ldr	r0, [r7, r2]
 8004162:	b108      	cbz	r0, 8004168 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8004164:	f001 fb14 	bl	8005790 <pbuf_free>
      arp_table[i].q = p;
 8004168:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 800416c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800416e:	f847 8003 	str.w	r8, [r7, r3]
 8004172:	e7df      	b.n	8004134 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004174:	8962      	ldrh	r2, [r4, #10]
 8004176:	8923      	ldrh	r3, [r4, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d108      	bne.n	800418e <etharp_query+0xce>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	b133      	cbz	r3, 800418e <etharp_query+0xce>
 8004180:	4643      	mov	r3, r8
 8004182:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8004186:	4649      	mov	r1, r9
 8004188:	4650      	mov	r0, sl
 800418a:	f005 fe15 	bl	8009db8 <iprintf>
      if (p->type != PBUF_ROM) {
 800418e:	7b23      	ldrb	r3, [r4, #12]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d11e      	bne.n	80041d2 <etharp_query+0x112>
      p = p->next;
 8004194:	6824      	ldr	r4, [r4, #0]
 8004196:	e7d8      	b.n	800414a <etharp_query+0x8a>
    return ERR_ARG;
 8004198:	f06f 000f 	mvn.w	r0, #15
 800419c:	e7ca      	b.n	8004134 <etharp_query+0x74>
 800419e:	4628      	mov	r0, r5
 80041a0:	e7c8      	b.n	8004134 <etharp_query+0x74>
  err_t result = ERR_MEM;
 80041a2:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80041a6:	2318      	movs	r3, #24
 80041a8:	fb03 7205 	mla	r2, r3, r5, r7
 80041ac:	7d12      	ldrb	r2, [r2, #20]
 80041ae:	2a01      	cmp	r2, #1
 80041b0:	d9c3      	bls.n	800413a <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <etharp_query+0x148>)
 80041b4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80041b6:	220c      	movs	r2, #12
 80041b8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80041bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	443b      	add	r3, r7
 80041c4:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80041c8:	4631      	mov	r1, r6
 80041ca:	4640      	mov	r0, r8
 80041cc:	f005 f8a4 	bl	8009318 <ethernet_output>
 80041d0:	e7b0      	b.n	8004134 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80041d2:	2200      	movs	r2, #0
 80041d4:	8921      	ldrh	r1, [r4, #8]
 80041d6:	2002      	movs	r0, #2
 80041d8:	f001 fb44 	bl	8005864 <pbuf_alloc>
      if (p != NULL) {
 80041dc:	4680      	mov	r8, r0
 80041de:	b138      	cbz	r0, 80041f0 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80041e0:	4631      	mov	r1, r6
 80041e2:	f001 fce9 	bl	8005bb8 <pbuf_copy>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d0b6      	beq.n	8004158 <etharp_query+0x98>
          pbuf_free(p);
 80041ea:	4640      	mov	r0, r8
 80041ec:	f001 fad0 	bl	8005790 <pbuf_free>
      result = ERR_MEM;
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e79e      	b.n	8004134 <etharp_query+0x74>
 80041f6:	bf00      	nop
 80041f8:	2000422c 	.word	0x2000422c
 80041fc:	0800bd2d 	.word	0x0800bd2d
 8004200:	0800bceb 	.word	0x0800bceb
 8004204:	0800ace9 	.word	0x0800ace9
 8004208:	2000431c 	.word	0x2000431c
 800420c:	0800bd13 	.word	0x0800bd13

08004210 <etharp_output>:
{
 8004210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004212:	460e      	mov	r6, r1
 8004214:	b085      	sub	sp, #20
 8004216:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004218:	4604      	mov	r4, r0
 800421a:	b930      	cbnz	r0, 800422a <etharp_output+0x1a>
 800421c:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <etharp_output+0x108>)
 800421e:	493f      	ldr	r1, [pc, #252]	; (800431c <etharp_output+0x10c>)
 8004220:	483f      	ldr	r0, [pc, #252]	; (8004320 <etharp_output+0x110>)
 8004222:	f240 321b 	movw	r2, #795	; 0x31b
 8004226:	f005 fdc7 	bl	8009db8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800422a:	b936      	cbnz	r6, 800423a <etharp_output+0x2a>
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <etharp_output+0x108>)
 800422e:	493d      	ldr	r1, [pc, #244]	; (8004324 <etharp_output+0x114>)
 8004230:	483b      	ldr	r0, [pc, #236]	; (8004320 <etharp_output+0x110>)
 8004232:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004236:	f005 fdbf 	bl	8009db8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800423a:	b935      	cbnz	r5, 800424a <etharp_output+0x3a>
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <etharp_output+0x108>)
 800423e:	493a      	ldr	r1, [pc, #232]	; (8004328 <etharp_output+0x118>)
 8004240:	4837      	ldr	r0, [pc, #220]	; (8004320 <etharp_output+0x110>)
 8004242:	f240 321d 	movw	r2, #797	; 0x31d
 8004246:	f005 fdb7 	bl	8009db8 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800424a:	4621      	mov	r1, r4
 800424c:	6828      	ldr	r0, [r5, #0]
 800424e:	f000 fad6 	bl	80047fe <ip4_addr_isbroadcast_u32>
 8004252:	2800      	cmp	r0, #0
 8004254:	d15b      	bne.n	800430e <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004256:	682b      	ldr	r3, [r5, #0]
 8004258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800425c:	2ae0      	cmp	r2, #224	; 0xe0
 800425e:	d11d      	bne.n	800429c <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004260:	2301      	movs	r3, #1
 8004262:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004266:	235e      	movs	r3, #94	; 0x5e
 8004268:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800426c:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800426e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004276:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800427a:	78ab      	ldrb	r3, [r5, #2]
 800427c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004280:	78eb      	ldrb	r3, [r5, #3]
 8004282:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004286:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8004288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800428c:	9200      	str	r2, [sp, #0]
 800428e:	4631      	mov	r1, r6
 8004290:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004294:	4620      	mov	r0, r4
 8004296:	f005 f83f 	bl	8009318 <ethernet_output>
 800429a:	e01f      	b.n	80042dc <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	68a1      	ldr	r1, [r4, #8]
 80042a0:	405a      	eors	r2, r3
 80042a2:	420a      	tst	r2, r1
 80042a4:	d008      	beq.n	80042b8 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80042a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80042a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80042b0:	68e3      	ldr	r3, [r4, #12]
 80042b2:	b373      	cbz	r3, 8004312 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80042b4:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <etharp_output+0x11c>)
 80042ba:	491d      	ldr	r1, [pc, #116]	; (8004330 <etharp_output+0x120>)
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	2018      	movs	r0, #24
 80042c0:	fb00 1002 	mla	r0, r0, r2, r1
 80042c4:	7d01      	ldrb	r1, [r0, #20]
 80042c6:	2901      	cmp	r1, #1
 80042c8:	4619      	mov	r1, r3
 80042ca:	d909      	bls.n	80042e0 <etharp_output+0xd0>
 80042cc:	682f      	ldr	r7, [r5, #0]
 80042ce:	6843      	ldr	r3, [r0, #4]
 80042d0:	429f      	cmp	r7, r3
 80042d2:	d105      	bne.n	80042e0 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80042d4:	4631      	mov	r1, r6
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff fe96 	bl	8004008 <etharp_output_to_arp_index>
}
 80042dc:	b005      	add	sp, #20
 80042de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <etharp_output+0x120>)
{
 80042e2:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80042e4:	7d18      	ldrb	r0, [r3, #20]
 80042e6:	2801      	cmp	r0, #1
 80042e8:	d906      	bls.n	80042f8 <etharp_output+0xe8>
 80042ea:	682f      	ldr	r7, [r5, #0]
 80042ec:	6858      	ldr	r0, [r3, #4]
 80042ee:	4287      	cmp	r7, r0
 80042f0:	d102      	bne.n	80042f8 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	700a      	strb	r2, [r1, #0]
 80042f6:	e7ed      	b.n	80042d4 <etharp_output+0xc4>
 80042f8:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80042fa:	2a0a      	cmp	r2, #10
 80042fc:	f103 0318 	add.w	r3, r3, #24
 8004300:	d1f0      	bne.n	80042e4 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8004302:	4632      	mov	r2, r6
 8004304:	4629      	mov	r1, r5
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff feda 	bl	80040c0 <etharp_query>
 800430c:	e7e6      	b.n	80042dc <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <etharp_output+0x124>)
 8004310:	e7ba      	b.n	8004288 <etharp_output+0x78>
            return ERR_RTE;
 8004312:	f06f 0003 	mvn.w	r0, #3
 8004316:	e7e1      	b.n	80042dc <etharp_output+0xcc>
 8004318:	0800bd2d 	.word	0x0800bd2d
 800431c:	0800bd64 	.word	0x0800bd64
 8004320:	0800ace9 	.word	0x0800ace9
 8004324:	0800c76f 	.word	0x0800c76f
 8004328:	0800bc78 	.word	0x0800bc78
 800432c:	2000431c 	.word	0x2000431c
 8004330:	2000422c 	.word	0x2000422c
 8004334:	0800d334 	.word	0x0800d334

08004338 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	4604      	mov	r4, r0
 800433c:	b087      	sub	sp, #28
 800433e:	460f      	mov	r7, r1
 8004340:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004342:	2124      	movs	r1, #36	; 0x24
 8004344:	2200      	movs	r2, #0
 8004346:	2001      	movs	r0, #1
 8004348:	f001 fa8c 	bl	8005864 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800434c:	4605      	mov	r5, r0
 800434e:	b3a0      	cbz	r0, 80043ba <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004350:	8943      	ldrh	r3, [r0, #10]
 8004352:	2b23      	cmp	r3, #35	; 0x23
 8004354:	d806      	bhi.n	8004364 <icmp_send_response.isra.0+0x2c>
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <icmp_send_response.isra.0+0x88>)
 8004358:	491a      	ldr	r1, [pc, #104]	; (80043c4 <icmp_send_response.isra.0+0x8c>)
 800435a:	481b      	ldr	r0, [pc, #108]	; (80043c8 <icmp_send_response.isra.0+0x90>)
 800435c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004360:	f005 fd2a 	bl	8009db8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004364:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004366:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	7123      	strb	r3, [r4, #4]
 800436c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800436e:	71a3      	strb	r3, [r4, #6]
 8004370:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8004372:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004374:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004376:	4613      	mov	r3, r2
 8004378:	f104 0108 	add.w	r1, r4, #8
 800437c:	f102 001c 	add.w	r0, r2, #28
 8004380:	f853 6b04 	ldr.w	r6, [r3], #4
 8004384:	f841 6b04 	str.w	r6, [r1], #4
 8004388:	4283      	cmp	r3, r0
 800438a:	d1f9      	bne.n	8004380 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800438c:	ae06      	add	r6, sp, #24
 800438e:	68d3      	ldr	r3, [r2, #12]
 8004390:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f8bb 	bl	8004510 <ip4_route>
#endif
  if (netif != NULL) {
 800439a:	b158      	cbz	r0, 80043b4 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800439c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800439e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80043a0:	70a1      	strb	r1, [r4, #2]
 80043a2:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80043a4:	4632      	mov	r2, r6
 80043a6:	9002      	str	r0, [sp, #8]
 80043a8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80043ac:	4628      	mov	r0, r5
 80043ae:	23ff      	movs	r3, #255	; 0xff
 80043b0:	f000 fa14 	bl	80047dc <ip4_output_if>
  }
  pbuf_free(q);
 80043b4:	4628      	mov	r0, r5
 80043b6:	f001 f9eb 	bl	8005790 <pbuf_free>
}
 80043ba:	b007      	add	sp, #28
 80043bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043be:	bf00      	nop
 80043c0:	0800be4b 	.word	0x0800be4b
 80043c4:	0800be80 	.word	0x0800be80
 80043c8:	0800ace9 	.word	0x0800ace9

080043cc <icmp_input>:
{
 80043cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80043d0:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <icmp_input+0x118>)
 80043d2:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80043d6:	f899 5000 	ldrb.w	r5, [r9]
 80043da:	f005 050f 	and.w	r5, r5, #15
 80043de:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80043e0:	2d13      	cmp	r5, #19
{
 80043e2:	b085      	sub	sp, #20
 80043e4:	4604      	mov	r4, r0
 80043e6:	4688      	mov	r8, r1
 80043e8:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 80043ea:	d92a      	bls.n	8004442 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80043ec:	8942      	ldrh	r2, [r0, #10]
 80043ee:	2a03      	cmp	r2, #3
 80043f0:	d927      	bls.n	8004442 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80043f2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	2a08      	cmp	r2, #8
 80043f8:	d123      	bne.n	8004442 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80043fa:	6958      	ldr	r0, [r3, #20]
 80043fc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004400:	2ae0      	cmp	r2, #224	; 0xe0
 8004402:	d01e      	beq.n	8004442 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	f000 f9fa 	bl	80047fe <ip4_addr_isbroadcast_u32>
 800440a:	4606      	mov	r6, r0
 800440c:	b9c8      	cbnz	r0, 8004442 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800440e:	8923      	ldrh	r3, [r4, #8]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d916      	bls.n	8004442 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004414:	f105 010e 	add.w	r1, r5, #14
 8004418:	4620      	mov	r0, r4
 800441a:	f001 f9b3 	bl	8005784 <pbuf_header>
 800441e:	2800      	cmp	r0, #0
 8004420:	d04f      	beq.n	80044c2 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8004422:	8921      	ldrh	r1, [r4, #8]
 8004424:	4429      	add	r1, r5
 8004426:	4632      	mov	r2, r6
 8004428:	b289      	uxth	r1, r1
 800442a:	2002      	movs	r0, #2
 800442c:	f001 fa1a 	bl	8005864 <pbuf_alloc>
      if (r == NULL) {
 8004430:	4606      	mov	r6, r0
 8004432:	b130      	cbz	r0, 8004442 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004434:	8942      	ldrh	r2, [r0, #10]
 8004436:	f105 0308 	add.w	r3, r5, #8
 800443a:	429a      	cmp	r2, r3
 800443c:	d207      	bcs.n	800444e <icmp_input+0x82>
        pbuf_free(r);
 800443e:	f001 f9a7 	bl	8005790 <pbuf_free>
  pbuf_free(p);
 8004442:	4620      	mov	r0, r4
}
 8004444:	b005      	add	sp, #20
 8004446:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800444a:	f001 b9a1 	b.w	8005790 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800444e:	4649      	mov	r1, r9
 8004450:	462a      	mov	r2, r5
 8004452:	6840      	ldr	r0, [r0, #4]
 8004454:	f005 fc9d 	bl	8009d92 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004458:	4269      	negs	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f001 f992 	bl	8005784 <pbuf_header>
 8004460:	b138      	cbz	r0, 8004472 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <icmp_input+0x11c>)
 8004464:	4921      	ldr	r1, [pc, #132]	; (80044ec <icmp_input+0x120>)
 8004466:	4822      	ldr	r0, [pc, #136]	; (80044f0 <icmp_input+0x124>)
 8004468:	22af      	movs	r2, #175	; 0xaf
 800446a:	f005 fca5 	bl	8009db8 <iprintf>
        pbuf_free(r);
 800446e:	4630      	mov	r0, r6
 8004470:	e7e5      	b.n	800443e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8004472:	4621      	mov	r1, r4
 8004474:	4630      	mov	r0, r6
 8004476:	f001 fb9f 	bl	8005bb8 <pbuf_copy>
 800447a:	2800      	cmp	r0, #0
 800447c:	d1f7      	bne.n	800446e <icmp_input+0xa2>
      pbuf_free(p);
 800447e:	4620      	mov	r0, r4
 8004480:	f001 f986 	bl	8005790 <pbuf_free>
 8004484:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8004486:	4629      	mov	r1, r5
 8004488:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800448a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800448c:	f001 f97a 	bl	8005784 <pbuf_header>
 8004490:	4602      	mov	r2, r0
 8004492:	2800      	cmp	r0, #0
 8004494:	d1d5      	bne.n	8004442 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8004496:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80044a0:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80044a2:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80044a4:	70b0      	strb	r0, [r6, #2]
 80044a6:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80044a8:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80044aa:	7288      	strb	r0, [r1, #10]
 80044ac:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80044ae:	2101      	movs	r1, #1
 80044b0:	9101      	str	r1, [sp, #4]
 80044b2:	9000      	str	r0, [sp, #0]
 80044b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80044b8:	490e      	ldr	r1, [pc, #56]	; (80044f4 <icmp_input+0x128>)
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f98e 	bl	80047dc <ip4_output_if>
 80044c0:	e7bf      	b.n	8004442 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80044c2:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80044c6:	31f2      	adds	r1, #242	; 0xf2
 80044c8:	b209      	sxth	r1, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	f001 f95a 	bl	8005784 <pbuf_header>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d0d8      	beq.n	8004486 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <icmp_input+0x11c>)
 80044d6:	4908      	ldr	r1, [pc, #32]	; (80044f8 <icmp_input+0x12c>)
 80044d8:	4805      	ldr	r0, [pc, #20]	; (80044f0 <icmp_input+0x124>)
 80044da:	22c0      	movs	r2, #192	; 0xc0
 80044dc:	f005 fc6c 	bl	8009db8 <iprintf>
        goto icmperr;
 80044e0:	e7af      	b.n	8004442 <icmp_input+0x76>
 80044e2:	bf00      	nop
 80044e4:	20004624 	.word	0x20004624
 80044e8:	0800be4b 	.word	0x0800be4b
 80044ec:	0800bde4 	.word	0x0800bde4
 80044f0:	0800ace9 	.word	0x0800ace9
 80044f4:	20004638 	.word	0x20004638
 80044f8:	0800be19 	.word	0x0800be19

080044fc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80044fc:	460a      	mov	r2, r1
 80044fe:	3004      	adds	r0, #4
 8004500:	2103      	movs	r1, #3
 8004502:	f7ff bf19 	b.w	8004338 <icmp_send_response.isra.0>

08004506 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004506:	460a      	mov	r2, r1
 8004508:	3004      	adds	r0, #4
 800450a:	210b      	movs	r1, #11
 800450c:	f7ff bf14 	b.w	8004338 <icmp_send_response.isra.0>

08004510 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004510:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <ip4_route+0x50>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b96b      	cbnz	r3, 8004534 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004518:	4a12      	ldr	r2, [pc, #72]	; (8004564 <ip4_route+0x54>)
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	b1ea      	cbz	r2, 800455a <ip4_route+0x4a>
 800451e:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8004522:	f001 0105 	and.w	r1, r1, #5
 8004526:	2905      	cmp	r1, #5
 8004528:	d117      	bne.n	800455a <ip4_route+0x4a>
 800452a:	6851      	ldr	r1, [r2, #4]
 800452c:	2900      	cmp	r1, #0
 800452e:	bf18      	it	ne
 8004530:	4613      	movne	r3, r2
 8004532:	e012      	b.n	800455a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004534:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004538:	f004 0205 	and.w	r2, r4, #5
 800453c:	2a05      	cmp	r2, #5
 800453e:	d1e9      	bne.n	8004514 <ip4_route+0x4>
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	2a00      	cmp	r2, #0
 8004544:	d0e6      	beq.n	8004514 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004546:	6801      	ldr	r1, [r0, #0]
 8004548:	689d      	ldr	r5, [r3, #8]
 800454a:	404a      	eors	r2, r1
 800454c:	422a      	tst	r2, r5
 800454e:	d004      	beq.n	800455a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8004550:	07a2      	lsls	r2, r4, #30
 8004552:	d4df      	bmi.n	8004514 <ip4_route+0x4>
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4291      	cmp	r1, r2
 8004558:	d1dc      	bne.n	8004514 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800455a:	4618      	mov	r0, r3
 800455c:	bd30      	pop	{r4, r5, pc}
 800455e:	bf00      	nop
 8004560:	20007d18 	.word	0x20007d18
 8004564:	20007d1c 	.word	0x20007d1c

08004568 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800456c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800456e:	f897 9000 	ldrb.w	r9, [r7]
 8004572:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8004576:	2b04      	cmp	r3, #4
{
 8004578:	4605      	mov	r5, r0
 800457a:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800457c:	d005      	beq.n	800458a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800457e:	4628      	mov	r0, r5
 8004580:	f001 f906 	bl	8005790 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8004584:	2000      	movs	r0, #0
 8004586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800458a:	8878      	ldrh	r0, [r7, #2]
 800458c:	f7ff fb0c 	bl	8003ba8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8004590:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8004592:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8004596:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8004598:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800459c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800459e:	d903      	bls.n	80045a8 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80045a0:	4601      	mov	r1, r0
 80045a2:	4628      	mov	r0, r5
 80045a4:	f001 fa3a 	bl	8005a1c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80045a8:	896b      	ldrh	r3, [r5, #10]
 80045aa:	454b      	cmp	r3, r9
 80045ac:	d3e7      	bcc.n	800457e <ip4_input+0x16>
 80045ae:	892b      	ldrh	r3, [r5, #8]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	d3e4      	bcc.n	800457e <ip4_input+0x16>
 80045b4:	f1b9 0f13 	cmp.w	r9, #19
 80045b8:	d9e1      	bls.n	800457e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4c49      	ldr	r4, [pc, #292]	; (80046e4 <ip4_input+0x17c>)
 80045be:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80045c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80045c8:	2be0      	cmp	r3, #224	; 0xe0
 80045ca:	d139      	bne.n	8004640 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80045cc:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 80045d0:	07da      	lsls	r2, r3, #31
 80045d2:	d503      	bpl.n	80045dc <ip4_input+0x74>
 80045d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d158      	bne.n	800468e <ip4_input+0x126>
      netif = NULL;
 80045dc:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80045de:	4641      	mov	r1, r8
 80045e0:	6920      	ldr	r0, [r4, #16]
 80045e2:	f000 f90c 	bl	80047fe <ip4_addr_isbroadcast_u32>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1c9      	bne.n	800457e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80045ea:	6923      	ldr	r3, [r4, #16]
 80045ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80045f0:	2be0      	cmp	r3, #224	; 0xe0
 80045f2:	d0c4      	beq.n	800457e <ip4_input+0x16>
  if (netif == NULL) {
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	d0c2      	beq.n	800457e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045fe:	b133      	cbz	r3, 800460e <ip4_input+0xa6>
    p = ip4_reass(p);
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fa2b 	bl	8004a5c <ip4_reass>
    if (p == NULL) {
 8004606:	4605      	mov	r5, r0
 8004608:	2800      	cmp	r0, #0
 800460a:	d0bb      	beq.n	8004584 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800460c:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800460e:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8004610:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004614:	783b      	ldrb	r3, [r7, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800461c:	f1c9 0100 	rsb	r1, r9, #0
 8004620:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004622:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004624:	f001 f8ae 	bl	8005784 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8004628:	7a7b      	ldrb	r3, [r7, #9]
 800462a:	2b06      	cmp	r3, #6
 800462c:	d03d      	beq.n	80046aa <ip4_input+0x142>
 800462e:	2b11      	cmp	r3, #17
 8004630:	d02f      	beq.n	8004692 <ip4_input+0x12a>
 8004632:	2b01      	cmp	r3, #1
 8004634:	d13e      	bne.n	80046b4 <ip4_input+0x14c>
      icmp_input(p, inp);
 8004636:	4641      	mov	r1, r8
 8004638:	4628      	mov	r0, r5
 800463a:	f7ff fec7 	bl	80043cc <icmp_input>
      break;
 800463e:	e02c      	b.n	800469a <ip4_input+0x132>
        netif = netif_list;
 8004640:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80046e8 <ip4_input+0x180>
 8004644:	4646      	mov	r6, r8
 8004646:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800464a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800464e:	07db      	lsls	r3, r3, #31
 8004650:	d404      	bmi.n	800465c <ip4_input+0xf4>
      if (first) {
 8004652:	f1ba 0f00 	cmp.w	sl, #0
 8004656:	d10d      	bne.n	8004674 <ip4_input+0x10c>
        netif = netif->next;
 8004658:	6836      	ldr	r6, [r6, #0]
 800465a:	e010      	b.n	800467e <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800465c:	6873      	ldr	r3, [r6, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f7      	beq.n	8004652 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004662:	6960      	ldr	r0, [r4, #20]
 8004664:	4283      	cmp	r3, r0
 8004666:	d0ba      	beq.n	80045de <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004668:	4631      	mov	r1, r6
 800466a:	f000 f8c8 	bl	80047fe <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800466e:	2800      	cmp	r0, #0
 8004670:	d0ef      	beq.n	8004652 <ip4_input+0xea>
 8004672:	e7b4      	b.n	80045de <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8004674:	7d23      	ldrb	r3, [r4, #20]
 8004676:	2b7f      	cmp	r3, #127	; 0x7f
 8004678:	d0b0      	beq.n	80045dc <ip4_input+0x74>
        netif = netif_list;
 800467a:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800467e:	4546      	cmp	r6, r8
        netif = netif->next;
 8004680:	bf08      	it	eq
 8004682:	6836      	ldreq	r6, [r6, #0]
 8004684:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8004688:	2e00      	cmp	r6, #0
 800468a:	d1de      	bne.n	800464a <ip4_input+0xe2>
 800468c:	e7a6      	b.n	80045dc <ip4_input+0x74>
 800468e:	4646      	mov	r6, r8
 8004690:	e7a5      	b.n	80045de <ip4_input+0x76>
      udp_input(p, inp);
 8004692:	4641      	mov	r1, r8
 8004694:	4628      	mov	r0, r5
 8004696:	f004 fd45 	bl	8009124 <udp_input>
  ip_data.current_netif = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800469e:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 80046a0:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 80046a2:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80046a4:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80046a6:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 80046a8:	e76c      	b.n	8004584 <ip4_input+0x1c>
      tcp_input(p, inp);
 80046aa:	4641      	mov	r1, r8
 80046ac:	4628      	mov	r0, r5
 80046ae:	f002 fffb 	bl	80076a8 <tcp_input>
      break;
 80046b2:	e7f2      	b.n	800469a <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80046b4:	4631      	mov	r1, r6
 80046b6:	6960      	ldr	r0, [r4, #20]
 80046b8:	f000 f8a1 	bl	80047fe <ip4_addr_isbroadcast_u32>
 80046bc:	b968      	cbnz	r0, 80046da <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80046c4:	2be0      	cmp	r3, #224	; 0xe0
 80046c6:	d008      	beq.n	80046da <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80046c8:	4649      	mov	r1, r9
 80046ca:	4628      	mov	r0, r5
 80046cc:	f001 f85d 	bl	800578a <pbuf_header_force>
        p->payload = iphdr;
 80046d0:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80046d2:	2102      	movs	r1, #2
 80046d4:	4628      	mov	r0, r5
 80046d6:	f7ff ff11 	bl	80044fc <icmp_dest_unreach>
      pbuf_free(p);
 80046da:	4628      	mov	r0, r5
 80046dc:	f001 f858 	bl	8005790 <pbuf_free>
 80046e0:	e7db      	b.n	800469a <ip4_input+0x132>
 80046e2:	bf00      	nop
 80046e4:	20004624 	.word	0x20004624
 80046e8:	20007d18 	.word	0x20007d18

080046ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80046ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80046f2:	89c3      	ldrh	r3, [r0, #14]
{
 80046f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80046f8:	2b01      	cmp	r3, #1
{
 80046fa:	4605      	mov	r5, r0
 80046fc:	468a      	mov	sl, r1
 80046fe:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004700:	d006      	beq.n	8004710 <ip4_output_if_src+0x24>
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <ip4_output_if_src+0xd8>)
 8004704:	4930      	ldr	r1, [pc, #192]	; (80047c8 <ip4_output_if_src+0xdc>)
 8004706:	4831      	ldr	r0, [pc, #196]	; (80047cc <ip4_output_if_src+0xe0>)
 8004708:	f240 3233 	movw	r2, #819	; 0x333
 800470c:	f005 fb54 	bl	8009db8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004710:	2e00      	cmp	r6, #0
 8004712:	d047      	beq.n	80047a4 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8004714:	2114      	movs	r1, #20
 8004716:	4628      	mov	r0, r5
 8004718:	f001 f834 	bl	8005784 <pbuf_header>
 800471c:	2800      	cmp	r0, #0
 800471e:	d14e      	bne.n	80047be <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004720:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8004722:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004724:	2b13      	cmp	r3, #19
 8004726:	d806      	bhi.n	8004736 <ip4_output_if_src+0x4a>
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <ip4_output_if_src+0xd8>)
 800472a:	4929      	ldr	r1, [pc, #164]	; (80047d0 <ip4_output_if_src+0xe4>)
 800472c:	4827      	ldr	r0, [pc, #156]	; (80047cc <ip4_output_if_src+0xe0>)
 800472e:	f240 3261 	movw	r2, #865	; 0x361
 8004732:	f005 fb41 	bl	8009db8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8004736:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800473a:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800473c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004742:	2345      	movs	r3, #69	; 0x45
 8004744:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8004746:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800474a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800474c:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800474e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80047d8 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004752:	f7ff fa29 	bl	8003ba8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8004756:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004758:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800475a:	71a7      	strb	r7, [r4, #6]
 800475c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800475e:	f8b9 0000 	ldrh.w	r0, [r9]
 8004762:	f7ff fa21 	bl	8003ba8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004766:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800476a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800476c:	3301      	adds	r3, #1
 800476e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8004772:	f1ba 0f00 	cmp.w	sl, #0
 8004776:	d112      	bne.n	800479e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <ip4_output_if_src+0xe8>)
 800477a:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800477c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800477e:	72a7      	strb	r7, [r4, #10]
 8004780:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8004782:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8004786:	b19b      	cbz	r3, 80047b0 <ip4_output_if_src+0xc4>
 8004788:	892a      	ldrh	r2, [r5, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d910      	bls.n	80047b0 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800478e:	4632      	mov	r2, r6
 8004790:	4641      	mov	r1, r8
 8004792:	4628      	mov	r0, r5
 8004794:	f000 fb0c 	bl	8004db0 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8004798:	b002      	add	sp, #8
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800479e:	f8da 3000 	ldr.w	r3, [sl]
 80047a2:	e7eb      	b.n	800477c <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80047a4:	686b      	ldr	r3, [r5, #4]
 80047a6:	ae02      	add	r6, sp, #8
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f846 3d04 	str.w	r3, [r6, #-4]!
 80047ae:	e7e8      	b.n	8004782 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 80047b0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80047b4:	4632      	mov	r2, r6
 80047b6:	4629      	mov	r1, r5
 80047b8:	4640      	mov	r0, r8
 80047ba:	4798      	blx	r3
 80047bc:	e7ec      	b.n	8004798 <ip4_output_if_src+0xac>
      return ERR_BUF;
 80047be:	f06f 0001 	mvn.w	r0, #1
 80047c2:	e7e9      	b.n	8004798 <ip4_output_if_src+0xac>
 80047c4:	0800beac 	.word	0x0800beac
 80047c8:	0800bee0 	.word	0x0800bee0
 80047cc:	0800ace9 	.word	0x0800ace9
 80047d0:	0800beec 	.word	0x0800beec
 80047d4:	0800bf1c 	.word	0x0800bf1c
 80047d8:	2000431e 	.word	0x2000431e

080047dc <ip4_output_if>:
{
 80047dc:	b4f0      	push	{r4, r5, r6, r7}
 80047de:	9c06      	ldr	r4, [sp, #24]
 80047e0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80047e4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80047e8:	b11a      	cbz	r2, 80047f2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80047ea:	b109      	cbz	r1, 80047f0 <ip4_output_if+0x14>
 80047ec:	680f      	ldr	r7, [r1, #0]
 80047ee:	b907      	cbnz	r7, 80047f2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80047f0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80047f2:	9406      	str	r4, [sp, #24]
 80047f4:	9605      	str	r6, [sp, #20]
 80047f6:	9504      	str	r5, [sp, #16]
}
 80047f8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80047fa:	f7ff bf77 	b.w	80046ec <ip4_output_if_src>

080047fe <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80047fe:	1e43      	subs	r3, r0, #1
 8004800:	3303      	adds	r3, #3
 8004802:	d811      	bhi.n	8004828 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004804:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8004808:	f013 0302 	ands.w	r3, r3, #2
 800480c:	d00e      	beq.n	800482c <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800480e:	684a      	ldr	r2, [r1, #4]
 8004810:	4290      	cmp	r0, r2
 8004812:	d00b      	beq.n	800482c <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004814:	688b      	ldr	r3, [r1, #8]
 8004816:	4042      	eors	r2, r0
 8004818:	421a      	tst	r2, r3
 800481a:	d107      	bne.n	800482c <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800481c:	43db      	mvns	r3, r3
 800481e:	4383      	bics	r3, r0
    return 1;
 8004820:	bf0c      	ite	eq
 8004822:	2001      	moveq	r0, #1
 8004824:	2000      	movne	r0, #0
 8004826:	4770      	bx	lr
 8004828:	2001      	movs	r0, #1
 800482a:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800482c:	2000      	movs	r0, #0
  }
}
 800482e:	4770      	bx	lr

08004830 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8004830:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <ip_reass_dequeue_datagram+0x34>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4282      	cmp	r2, r0
{
 8004838:	4604      	mov	r4, r0
 800483a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800483c:	d107      	bne.n	800484e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800483e:	6802      	ldr	r2, [r0, #0]
 8004840:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8004842:	4621      	mov	r1, r4
 8004844:	2004      	movs	r0, #4
}
 8004846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800484a:	f000 be1b 	b.w	8005484 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800484e:	b931      	cbnz	r1, 800485e <ip_reass_dequeue_datagram+0x2e>
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <ip_reass_dequeue_datagram+0x38>)
 8004852:	4906      	ldr	r1, [pc, #24]	; (800486c <ip_reass_dequeue_datagram+0x3c>)
 8004854:	4806      	ldr	r0, [pc, #24]	; (8004870 <ip_reass_dequeue_datagram+0x40>)
 8004856:	f240 1245 	movw	r2, #325	; 0x145
 800485a:	f005 faad 	bl	8009db8 <iprintf>
    prev->next = ipr->next;
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	e7ee      	b.n	8004842 <ip_reass_dequeue_datagram+0x12>
 8004864:	20004324 	.word	0x20004324
 8004868:	0800c005 	.word	0x0800c005
 800486c:	0800c03e 	.word	0x0800c03e
 8004870:	0800ace9 	.word	0x0800ace9

08004874 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004874:	4281      	cmp	r1, r0
{
 8004876:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	4605      	mov	r5, r0
 800487c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800487e:	d105      	bne.n	800488c <ip_reass_free_complete_datagram+0x18>
 8004880:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <ip_reass_free_complete_datagram+0xcc>)
 8004882:	4930      	ldr	r1, [pc, #192]	; (8004944 <ip_reass_free_complete_datagram+0xd0>)
 8004884:	4830      	ldr	r0, [pc, #192]	; (8004948 <ip_reass_free_complete_datagram+0xd4>)
 8004886:	22ab      	movs	r2, #171	; 0xab
 8004888:	f005 fa96 	bl	8009db8 <iprintf>
  if (prev != NULL) {
 800488c:	b147      	cbz	r7, 80048a0 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	429d      	cmp	r5, r3
 8004892:	d005      	beq.n	80048a0 <ip_reass_free_complete_datagram+0x2c>
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <ip_reass_free_complete_datagram+0xcc>)
 8004896:	492d      	ldr	r1, [pc, #180]	; (800494c <ip_reass_free_complete_datagram+0xd8>)
 8004898:	482b      	ldr	r0, [pc, #172]	; (8004948 <ip_reass_free_complete_datagram+0xd4>)
 800489a:	22ad      	movs	r2, #173	; 0xad
 800489c:	f005 fa8c 	bl	8009db8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80048a0:	686e      	ldr	r6, [r5, #4]
 80048a2:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 80048a4:	889a      	ldrh	r2, [r3, #4]
 80048a6:	bb92      	cbnz	r2, 800490e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80048ac:	f105 011c 	add.w	r1, r5, #28
 80048b0:	f105 0208 	add.w	r2, r5, #8
 80048b4:	f852 0b04 	ldr.w	r0, [r2], #4
 80048b8:	f843 0b04 	str.w	r0, [r3], #4
 80048bc:	428a      	cmp	r2, r1
 80048be:	d1f9      	bne.n	80048b4 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80048c0:	2101      	movs	r1, #1
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff fe1f 	bl	8004506 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80048c8:	4630      	mov	r0, r6
 80048ca:	f001 f917 	bl	8005afc <pbuf_clen>
 80048ce:	4604      	mov	r4, r0
    pbuf_free(p);
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 ff5d 	bl	8005790 <pbuf_free>
  p = ipr->p;
 80048d6:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80048d8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004940 <ip_reass_free_complete_datagram+0xcc>
 80048dc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004958 <ip_reass_free_complete_datagram+0xe4>
 80048e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004948 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 80048e4:	b9ae      	cbnz	r6, 8004912 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 80048e6:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80048e8:	4d19      	ldr	r5, [pc, #100]	; (8004950 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7ff ffa0 	bl	8004830 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80048f0:	882b      	ldrh	r3, [r5, #0]
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d205      	bcs.n	8004902 <ip_reass_free_complete_datagram+0x8e>
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <ip_reass_free_complete_datagram+0xcc>)
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <ip_reass_free_complete_datagram+0xe0>)
 80048fa:	4813      	ldr	r0, [pc, #76]	; (8004948 <ip_reass_free_complete_datagram+0xd4>)
 80048fc:	22d2      	movs	r2, #210	; 0xd2
 80048fe:	f005 fa5b 	bl	8009db8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8004902:	882b      	ldrh	r3, [r5, #0]
 8004904:	1b1b      	subs	r3, r3, r4
 8004906:	802b      	strh	r3, [r5, #0]
}
 8004908:	4620      	mov	r0, r4
 800490a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800490e:	2400      	movs	r4, #0
 8004910:	e7e1      	b.n	80048d6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8004912:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8004914:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8004916:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800491a:	f001 f8ef 	bl	8005afc <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800491e:	4404      	add	r4, r0
 8004920:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004924:	db05      	blt.n	8004932 <ip_reass_free_complete_datagram+0xbe>
 8004926:	4643      	mov	r3, r8
 8004928:	22cc      	movs	r2, #204	; 0xcc
 800492a:	4649      	mov	r1, r9
 800492c:	4650      	mov	r0, sl
 800492e:	f005 fa43 	bl	8009db8 <iprintf>
    pbuf_free(pcur);
 8004932:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8004934:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8004936:	f000 ff2b 	bl	8005790 <pbuf_free>
    p = iprh->next_pbuf;
 800493a:	465e      	mov	r6, fp
 800493c:	e7d2      	b.n	80048e4 <ip_reass_free_complete_datagram+0x70>
 800493e:	bf00      	nop
 8004940:	0800c005 	.word	0x0800c005
 8004944:	0800c057 	.word	0x0800c057
 8004948:	0800ace9 	.word	0x0800ace9
 800494c:	0800c063 	.word	0x0800c063
 8004950:	20004320 	.word	0x20004320
 8004954:	0800c092 	.word	0x0800c092
 8004958:	0800c075 	.word	0x0800c075

0800495c <ip_reass_remove_oldest_datagram>:
{
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8004960:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80049d0 <ip_reass_remove_oldest_datagram+0x74>
{
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8004968:	2500      	movs	r5, #0
    other_datagrams = 0;
 800496a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800496c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8004970:	4621      	mov	r1, r4
    prev = NULL;
 8004972:	46a6      	mov	lr, r4
    oldest = NULL;
 8004974:	4620      	mov	r0, r4
    while (r != NULL) {
 8004976:	b953      	cbnz	r3, 800498e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8004978:	b110      	cbz	r0, 8004980 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800497a:	f7ff ff7b 	bl	8004874 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800497e:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8004980:	42bd      	cmp	r5, r7
 8004982:	da01      	bge.n	8004988 <ip_reass_remove_oldest_datagram+0x2c>
 8004984:	2c01      	cmp	r4, #1
 8004986:	dcf0      	bgt.n	800496a <ip_reass_remove_oldest_datagram+0xe>
}
 8004988:	4628      	mov	r0, r5
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800498e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	4562      	cmp	r2, ip
 8004996:	d109      	bne.n	80049ac <ip_reass_remove_oldest_datagram+0x50>
 8004998:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	4562      	cmp	r2, ip
 80049a0:	d104      	bne.n	80049ac <ip_reass_remove_oldest_datagram+0x50>
 80049a2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80049a6:	88b2      	ldrh	r2, [r6, #4]
 80049a8:	4594      	cmp	ip, r2
 80049aa:	d008      	beq.n	80049be <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80049ac:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80049ae:	b160      	cbz	r0, 80049ca <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80049b0:	7fc2      	ldrb	r2, [r0, #31]
 80049b2:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 80049b6:	4594      	cmp	ip, r2
 80049b8:	bf9c      	itt	ls
 80049ba:	4671      	movls	r1, lr
 80049bc:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	bf18      	it	ne
 80049c4:	469e      	movne	lr, r3
 80049c6:	4613      	mov	r3, r2
 80049c8:	e7d5      	b.n	8004976 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80049ca:	4671      	mov	r1, lr
 80049cc:	4618      	mov	r0, r3
 80049ce:	e7f6      	b.n	80049be <ip_reass_remove_oldest_datagram+0x62>
 80049d0:	20004324 	.word	0x20004324

080049d4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80049d4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80049d6:	4604      	mov	r4, r0
 80049d8:	b930      	cbnz	r0, 80049e8 <ip_frag_free_pbuf_custom_ref+0x14>
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <ip_frag_free_pbuf_custom_ref+0x20>)
 80049dc:	4906      	ldr	r1, [pc, #24]	; (80049f8 <ip_frag_free_pbuf_custom_ref+0x24>)
 80049de:	4807      	ldr	r0, [pc, #28]	; (80049fc <ip_frag_free_pbuf_custom_ref+0x28>)
 80049e0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80049e4:	f005 f9e8 	bl	8009db8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80049e8:	4621      	mov	r1, r4
 80049ea:	2005      	movs	r0, #5
}
 80049ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80049f0:	f000 bd48 	b.w	8005484 <memp_free>
 80049f4:	0800c005 	.word	0x0800c005
 80049f8:	0800c72b 	.word	0x0800c72b
 80049fc:	0800ace9 	.word	0x0800ace9

08004a00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8004a00:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8004a02:	4604      	mov	r4, r0
 8004a04:	b930      	cbnz	r0, 8004a14 <ipfrag_free_pbuf_custom+0x14>
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <ipfrag_free_pbuf_custom+0x28>)
 8004a08:	4908      	ldr	r1, [pc, #32]	; (8004a2c <ipfrag_free_pbuf_custom+0x2c>)
 8004a0a:	4809      	ldr	r0, [pc, #36]	; (8004a30 <ipfrag_free_pbuf_custom+0x30>)
 8004a0c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8004a10:	f005 f9d2 	bl	8009db8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8004a14:	6960      	ldr	r0, [r4, #20]
 8004a16:	b108      	cbz	r0, 8004a1c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8004a18:	f000 feba 	bl	8005790 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8004a1c:	4620      	mov	r0, r4
}
 8004a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8004a22:	f7ff bfd7 	b.w	80049d4 <ip_frag_free_pbuf_custom_ref>
 8004a26:	bf00      	nop
 8004a28:	0800c005 	.word	0x0800c005
 8004a2c:	0800c0ad 	.word	0x0800c0ad
 8004a30:	0800ace9 	.word	0x0800ace9

08004a34 <ip_reass_tmr>:
{
 8004a34:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <ip_reass_tmr+0x24>)
 8004a38:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8004a3a:	2400      	movs	r4, #0
  while (r != NULL) {
 8004a3c:	b900      	cbnz	r0, 8004a40 <ip_reass_tmr+0xc>
}
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8004a40:	7fc3      	ldrb	r3, [r0, #31]
 8004a42:	6805      	ldr	r5, [r0, #0]
 8004a44:	b123      	cbz	r3, 8004a50 <ip_reass_tmr+0x1c>
      r->timer--;
 8004a46:	3b01      	subs	r3, #1
 8004a48:	77c3      	strb	r3, [r0, #31]
 8004a4a:	4604      	mov	r4, r0
      r = r->next;
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	e7f5      	b.n	8004a3c <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff0f 	bl	8004874 <ip_reass_free_complete_datagram>
 8004a56:	e7f9      	b.n	8004a4c <ip_reass_tmr+0x18>
 8004a58:	20004324 	.word	0x20004324

08004a5c <ip4_reass>:
{
 8004a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8004a60:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004a62:	782b      	ldrb	r3, [r5, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2b05      	cmp	r3, #5
{
 8004a6a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004a6c:	f040 808c 	bne.w	8004b88 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004a70:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004a72:	4cb4      	ldr	r4, [pc, #720]	; (8004d44 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004a74:	f7ff f898 	bl	8003ba8 <lwip_htons>
 8004a78:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004a7c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004a80:	8868      	ldrh	r0, [r5, #2]
 8004a82:	f7ff f891 	bl	8003ba8 <lwip_htons>
 8004a86:	782b      	ldrb	r3, [r5, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8004a90:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8004a92:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004a94:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8004a96:	f001 f831 	bl	8005afc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004a9a:	8823      	ldrh	r3, [r4, #0]
 8004a9c:	4403      	add	r3, r0
 8004a9e:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8004aa0:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004aa2:	dc68      	bgt.n	8004b76 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004aa4:	4ea8      	ldr	r6, [pc, #672]	; (8004d48 <ip4_reass+0x2ec>)
 8004aa6:	6834      	ldr	r4, [r6, #0]
 8004aa8:	2c00      	cmp	r4, #0
 8004aaa:	d172      	bne.n	8004b92 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004aac:	2004      	movs	r0, #4
 8004aae:	f000 fccd 	bl	800544c <memp_malloc>
  if (ipr == NULL) {
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	b958      	cbnz	r0, 8004ace <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f7ff ff4f 	bl	800495c <ip_reass_remove_oldest_datagram>
 8004abe:	4582      	cmp	sl, r0
 8004ac0:	dc62      	bgt.n	8004b88 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004ac2:	2004      	movs	r0, #4
 8004ac4:	f000 fcc2 	bl	800544c <memp_malloc>
    if (ipr == NULL)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d05c      	beq.n	8004b88 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8004ace:	2220      	movs	r2, #32
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f005 f968 	bl	8009da8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8004ae0:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f104 0208 	add.w	r2, r4, #8
 8004ae8:	f105 0114 	add.w	r1, r5, #20
 8004aec:	f853 0b04 	ldr.w	r0, [r3], #4
 8004af0:	f842 0b04 	str.w	r0, [r2], #4
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d1f9      	bne.n	8004aec <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8004af8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8004afc:	f01b 0b20 	ands.w	fp, fp, #32
 8004b00:	d108      	bne.n	8004b14 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	444b      	add	r3, r9
 8004b06:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8004b08:	4599      	cmp	r9, r3
 8004b0a:	d83d      	bhi.n	8004b88 <ip4_reass+0x12c>
 8004b0c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d839      	bhi.n	8004b88 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8004b14:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004b16:	8868      	ldrh	r0, [r5, #2]
 8004b18:	f7ff f846 	bl	8003ba8 <lwip_htons>
 8004b1c:	f895 8000 	ldrb.w	r8, [r5]
 8004b20:	f008 080f 	and.w	r8, r8, #15
 8004b24:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004b28:	88e8      	ldrh	r0, [r5, #6]
 8004b2a:	f7ff f83d 	bl	8003ba8 <lwip_htons>
 8004b2e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004b32:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004b36:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8004b38:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8004b3a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8004b3e:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8004b40:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8004b44:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8004b46:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8004b48:	7035      	strb	r5, [r6, #0]
 8004b4a:	7075      	strb	r5, [r6, #1]
 8004b4c:	70b5      	strb	r5, [r6, #2]
 8004b4e:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8004b50:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8004b52:	4672      	mov	r2, lr
  int valid = 1;
 8004b54:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8004b58:	bb52      	cbnz	r2, 8004bb0 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	f040 8092 	bne.w	8004c84 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8004b60:	f1be 0f00 	cmp.w	lr, #0
 8004b64:	d07d      	beq.n	8004c62 <ip4_reass+0x206>
 8004b66:	4b79      	ldr	r3, [pc, #484]	; (8004d4c <ip4_reass+0x2f0>)
 8004b68:	4979      	ldr	r1, [pc, #484]	; (8004d50 <ip4_reass+0x2f4>)
 8004b6a:	487a      	ldr	r0, [pc, #488]	; (8004d54 <ip4_reass+0x2f8>)
 8004b6c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8004b70:	f005 f922 	bl	8009db8 <iprintf>
 8004b74:	e075      	b.n	8004c62 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004b76:	4601      	mov	r1, r0
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f7ff feef 	bl	800495c <ip_reass_remove_oldest_datagram>
 8004b7e:	b118      	cbz	r0, 8004b88 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8004b80:	8823      	ldrh	r3, [r4, #0]
 8004b82:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004b84:	2b0a      	cmp	r3, #10
 8004b86:	dd8d      	ble.n	8004aa4 <ip4_reass+0x48>
  pbuf_free(p);
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f000 fe01 	bl	8005790 <pbuf_free>
  return NULL;
 8004b8e:	2500      	movs	r5, #0
 8004b90:	e0d4      	b.n	8004d3c <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8004b92:	68eb      	ldr	r3, [r5, #12]
 8004b94:	6962      	ldr	r2, [r4, #20]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d108      	bne.n	8004bac <ip4_reass+0x150>
 8004b9a:	692b      	ldr	r3, [r5, #16]
 8004b9c:	69a2      	ldr	r2, [r4, #24]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d104      	bne.n	8004bac <ip4_reass+0x150>
 8004ba2:	89a2      	ldrh	r2, [r4, #12]
 8004ba4:	88ab      	ldrh	r3, [r5, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	f000 80dc 	beq.w	8004d64 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004bac:	6824      	ldr	r4, [r4, #0]
 8004bae:	e77b      	b.n	8004aa8 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8004bb0:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8004bb4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8004bb8:	4288      	cmp	r0, r1
 8004bba:	d254      	bcs.n	8004c66 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8004bbc:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	d04d      	beq.n	8004c5e <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8004bc2:	88ea      	ldrh	r2, [r5, #6]
 8004bc4:	4290      	cmp	r0, r2
 8004bc6:	f0c0 8091 	bcc.w	8004cec <ip4_reass+0x290>
 8004bca:	428b      	cmp	r3, r1
 8004bcc:	f200 808e 	bhi.w	8004cec <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8004bd0:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8004bd2:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8004bd4:	f040 80e4 	bne.w	8004da0 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8004bd8:	f1bb 0f00 	cmp.w	fp, #0
 8004bdc:	d004      	beq.n	8004be8 <ip4_reass+0x18c>
 8004bde:	7fa3      	ldrb	r3, [r4, #30]
 8004be0:	f013 0301 	ands.w	r3, r3, #1
 8004be4:	f000 80da 	beq.w	8004d9c <ip4_reass+0x340>
    if (valid) {
 8004be8:	f1b8 0f00 	cmp.w	r8, #0
 8004bec:	d159      	bne.n	8004ca2 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8004bee:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8004bf2:	4e54      	ldr	r6, [pc, #336]	; (8004d44 <ip4_reass+0x2e8>)
 8004bf4:	8833      	ldrh	r3, [r6, #0]
 8004bf6:	449a      	add	sl, r3
 8004bf8:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8004bfc:	f1bb 0f00 	cmp.w	fp, #0
 8004c00:	d107      	bne.n	8004c12 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004c06:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8004c08:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8004c12:	f1b8 0f01 	cmp.w	r8, #1
 8004c16:	d1ba      	bne.n	8004b8e <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8004c18:	8ba3      	ldrh	r3, [r4, #28]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	685d      	ldr	r5, [r3, #4]
 8004c22:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004c24:	f104 0308 	add.w	r3, r4, #8
 8004c28:	462a      	mov	r2, r5
 8004c2a:	f104 011c 	add.w	r1, r4, #28
 8004c2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004c32:	f842 0b04 	str.w	r0, [r2], #4
 8004c36:	428b      	cmp	r3, r1
 8004c38:	d1f9      	bne.n	8004c2e <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004c3a:	8ba0      	ldrh	r0, [r4, #28]
 8004c3c:	f7fe ffb4 	bl	8003ba8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8004c40:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004c42:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8004c44:	71ab      	strb	r3, [r5, #6]
 8004c46:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8004c48:	72ab      	strb	r3, [r5, #10]
 8004c4a:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8004c4c:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d157      	bne.n	8004d02 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8004c52:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <ip4_reass+0x2ec>)
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	428c      	cmp	r4, r1
 8004c58:	d165      	bne.n	8004d26 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	e065      	b.n	8004d2a <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8004c5e:	428b      	cmp	r3, r1
 8004c60:	d844      	bhi.n	8004cec <ip4_reass+0x290>
      ipr->p = new_p;
 8004c62:	6067      	str	r7, [r4, #4]
 8004c64:	e7b8      	b.n	8004bd8 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8004c66:	d041      	beq.n	8004cec <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8004c68:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8004c6c:	4282      	cmp	r2, r0
 8004c6e:	d83d      	bhi.n	8004cec <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8004c70:	b125      	cbz	r5, 8004c7c <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8004c72:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8004c74:	428a      	cmp	r2, r1
 8004c76:	bf18      	it	ne
 8004c78:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8004c7c:	f8dc 2000 	ldr.w	r2, [ip]
 8004c80:	4665      	mov	r5, ip
 8004c82:	e769      	b.n	8004b58 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8004c84:	88eb      	ldrh	r3, [r5, #6]
 8004c86:	4283      	cmp	r3, r0
 8004c88:	d906      	bls.n	8004c98 <ip4_reass+0x23c>
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <ip4_reass+0x2f0>)
 8004c8c:	4932      	ldr	r1, [pc, #200]	; (8004d58 <ip4_reass+0x2fc>)
 8004c8e:	4831      	ldr	r0, [pc, #196]	; (8004d54 <ip4_reass+0x2f8>)
 8004c90:	f240 12ab 	movw	r2, #427	; 0x1ab
 8004c94:	f005 f890 	bl	8009db8 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8004c98:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8004c9a:	88ea      	ldrh	r2, [r5, #6]
 8004c9c:	88b3      	ldrh	r3, [r6, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	e798      	b.n	8004bd4 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8004ca2:	6863      	ldr	r3, [r4, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0a2      	beq.n	8004bee <ip4_reass+0x192>
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	888b      	ldrh	r3, [r1, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d19e      	bne.n	8004bee <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8004cb0:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8004cb2:	b99b      	cbnz	r3, 8004cdc <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8004cb4:	42b1      	cmp	r1, r6
 8004cb6:	d106      	bne.n	8004cc6 <ip4_reass+0x26a>
 8004cb8:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <ip4_reass+0x2f0>)
 8004cba:	4928      	ldr	r1, [pc, #160]	; (8004d5c <ip4_reass+0x300>)
 8004cbc:	4825      	ldr	r0, [pc, #148]	; (8004d54 <ip4_reass+0x2f8>)
 8004cbe:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8004cc2:	f005 f879 	bl	8009db8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8004cc6:	6833      	ldr	r3, [r6, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d092      	beq.n	8004bf2 <ip4_reass+0x196>
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <ip4_reass+0x2f0>)
 8004cce:	4924      	ldr	r1, [pc, #144]	; (8004d60 <ip4_reass+0x304>)
 8004cd0:	4820      	ldr	r0, [pc, #128]	; (8004d54 <ip4_reass+0x2f8>)
 8004cd2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004cd6:	f005 f86f 	bl	8009db8 <iprintf>
 8004cda:	e78a      	b.n	8004bf2 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8004cdc:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8004cde:	88f0      	ldrh	r0, [r6, #6]
 8004ce0:	8893      	ldrh	r3, [r2, #4]
 8004ce2:	4298      	cmp	r0, r3
 8004ce4:	d183      	bne.n	8004bee <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8004ce6:	6813      	ldr	r3, [r2, #0]
 8004ce8:	4616      	mov	r6, r2
 8004cea:	e7e2      	b.n	8004cb2 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8004cec:	4638      	mov	r0, r7
 8004cee:	f000 ff05 	bl	8005afc <pbuf_clen>
 8004cf2:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <ip4_reass+0x2e8>)
 8004cf4:	8813      	ldrh	r3, [r2, #0]
 8004cf6:	1a18      	subs	r0, r3, r0
 8004cf8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 fd48 	bl	8005790 <pbuf_free>
 8004d00:	e742      	b.n	8004b88 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 8004d02:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8004d06:	f06f 0113 	mvn.w	r1, #19
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 fd3a 	bl	8005784 <pbuf_header>
      pbuf_cat(p, r);
 8004d10:	4639      	mov	r1, r7
 8004d12:	4628      	mov	r0, r5
 8004d14:	f000 ff16 	bl	8005b44 <pbuf_cat>
      r = iprh->next_pbuf;
 8004d18:	f8d8 7000 	ldr.w	r7, [r8]
 8004d1c:	e797      	b.n	8004c4e <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8004d1e:	680b      	ldr	r3, [r1, #0]
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d002      	beq.n	8004d2a <ip4_reass+0x2ce>
 8004d24:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8004d26:	2900      	cmp	r1, #0
 8004d28:	d1f9      	bne.n	8004d1e <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fd80 	bl	8004830 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 fee3 	bl	8005afc <pbuf_clen>
 8004d36:	8833      	ldrh	r3, [r6, #0]
 8004d38:	1a18      	subs	r0, r3, r0
 8004d3a:	8030      	strh	r0, [r6, #0]
}
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	b003      	add	sp, #12
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	20004320 	.word	0x20004320
 8004d48:	20004324 	.word	0x20004324
 8004d4c:	0800c005 	.word	0x0800c005
 8004d50:	0800bf9f 	.word	0x0800bf9f
 8004d54:	0800ace9 	.word	0x0800ace9
 8004d58:	0800bf81 	.word	0x0800bf81
 8004d5c:	0800bfd6 	.word	0x0800bfd6
 8004d60:	0800bfe3 	.word	0x0800bfe3
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004d64:	88e8      	ldrh	r0, [r5, #6]
 8004d66:	f7fe ff1f 	bl	8003ba8 <lwip_htons>
 8004d6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f47f aec2 	bne.w	8004af8 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8004d74:	89e0      	ldrh	r0, [r4, #14]
 8004d76:	f7fe ff17 	bl	8003ba8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004d7a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f43f aeba 	beq.w	8004af8 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8004d84:	462b      	mov	r3, r5
 8004d86:	f104 0208 	add.w	r2, r4, #8
 8004d8a:	f105 0114 	add.w	r1, r5, #20
 8004d8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004d92:	f842 0b04 	str.w	r0, [r2], #4
 8004d96:	428b      	cmp	r3, r1
 8004d98:	d1f9      	bne.n	8004d8e <ip4_reass+0x332>
 8004d9a:	e6ad      	b.n	8004af8 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8004d9c:	4698      	mov	r8, r3
 8004d9e:	e728      	b.n	8004bf2 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8004da0:	f1bb 0f00 	cmp.w	fp, #0
 8004da4:	f43f af23 	beq.w	8004bee <ip4_reass+0x192>
 8004da8:	f04f 0800 	mov.w	r8, #0
 8004dac:	e717      	b.n	8004bde <ip4_reass+0x182>
 8004dae:	bf00      	nop

08004db0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004db4:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8004db8:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004dba:	2308      	movs	r3, #8
 8004dbc:	f1a8 0814 	sub.w	r8, r8, #20
 8004dc0:	fb98 f8f3 	sdiv	r8, r8, r3
 8004dc4:	fa1f f388 	uxth.w	r3, r8
 8004dc8:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8004dca:	6843      	ldr	r3, [r0, #4]
{
 8004dcc:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004dce:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8004dd0:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004dd2:	f006 060f 	and.w	r6, r6, #15
 8004dd6:	00b6      	lsls	r6, r6, #2
 8004dd8:	2e14      	cmp	r6, #20
{
 8004dda:	4607      	mov	r7, r0
 8004ddc:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004dde:	d00b      	beq.n	8004df8 <ip4_frag+0x48>
 8004de0:	4b5a      	ldr	r3, [pc, #360]	; (8004f4c <ip4_frag+0x19c>)
 8004de2:	495b      	ldr	r1, [pc, #364]	; (8004f50 <ip4_frag+0x1a0>)
 8004de4:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004de8:	485a      	ldr	r0, [pc, #360]	; (8004f54 <ip4_frag+0x1a4>)
 8004dea:	f004 ffe5 	bl	8009db8 <iprintf>
 8004dee:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8004df2:	b00b      	add	sp, #44	; 0x2c
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	88d8      	ldrh	r0, [r3, #6]
 8004dfc:	f7fe fed4 	bl	8003ba8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8004e00:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004e04:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8004e08:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004e0a:	d004      	beq.n	8004e16 <ip4_frag+0x66>
 8004e0c:	4b4f      	ldr	r3, [pc, #316]	; (8004f4c <ip4_frag+0x19c>)
 8004e0e:	4952      	ldr	r1, [pc, #328]	; (8004f58 <ip4_frag+0x1a8>)
 8004e10:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004e14:	e7e8      	b.n	8004de8 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8004e16:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8004e18:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8004e1c:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8004e1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8004e22:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8004e24:	9307      	str	r3, [sp, #28]
  while (left) {
 8004e26:	b90d      	cbnz	r5, 8004e2c <ip4_frag+0x7c>
  return ERR_OK;
 8004e28:	4628      	mov	r0, r5
 8004e2a:	e7e2      	b.n	8004df2 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8004e2c:	9b07      	ldr	r3, [sp, #28]
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	bfa8      	it	ge
 8004e32:	462b      	movge	r3, r5
 8004e34:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2114      	movs	r1, #20
 8004e3a:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8004e3c:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004e3e:	f000 fd11 	bl	8005864 <pbuf_alloc>
    if (rambuf == NULL) {
 8004e42:	4680      	mov	r8, r0
 8004e44:	b370      	cbz	r0, 8004ea4 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8004e46:	897b      	ldrh	r3, [r7, #10]
 8004e48:	2b13      	cmp	r3, #19
 8004e4a:	d806      	bhi.n	8004e5a <ip4_frag+0xaa>
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <ip4_frag+0x19c>)
 8004e4e:	4943      	ldr	r1, [pc, #268]	; (8004f5c <ip4_frag+0x1ac>)
 8004e50:	4840      	ldr	r0, [pc, #256]	; (8004f54 <ip4_frag+0x1a4>)
 8004e52:	f240 3209 	movw	r2, #777	; 0x309
 8004e56:	f004 ffaf 	bl	8009db8 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8004e5a:	9b02      	ldr	r3, [sp, #8]
 8004e5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	3114      	adds	r1, #20
 8004e64:	f853 0b04 	ldr.w	r0, [r3], #4
 8004e68:	f842 0b04 	str.w	r0, [r2], #4
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	d1f9      	bne.n	8004e64 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004e70:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8004e74:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004e78:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8004e7a:	f1b9 0f00 	cmp.w	r9, #0
 8004e7e:	d037      	beq.n	8004ef0 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8004e80:	897c      	ldrh	r4, [r7, #10]
 8004e82:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8004e84:	b2a4      	uxth	r4, r4
 8004e86:	454c      	cmp	r4, r9
 8004e88:	bf28      	it	cs
 8004e8a:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8004e8c:	b914      	cbnz	r4, 8004e94 <ip4_frag+0xe4>
        p = p->next;
 8004e8e:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8004e90:	2600      	movs	r6, #0
 8004e92:	e7f2      	b.n	8004e7a <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8004e94:	2005      	movs	r0, #5
 8004e96:	f000 fad9 	bl	800544c <memp_malloc>
      if (pcr == NULL) {
 8004e9a:	4682      	mov	sl, r0
 8004e9c:	b928      	cbnz	r0, 8004eaa <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f000 fc76 	bl	8005790 <pbuf_free>
  return ERR_MEM;
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	e7a3      	b.n	8004df2 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8004eaa:	9401      	str	r4, [sp, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4433      	add	r3, r6
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	2004      	movs	r0, #4
 8004eba:	f000 fc2b 	bl	8005714 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8004ebe:	b918      	cbnz	r0, 8004ec8 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	f7ff fd87 	bl	80049d4 <ip_frag_free_pbuf_custom_ref>
 8004ec6:	e7ea      	b.n	8004e9e <ip4_frag+0xee>
 8004ec8:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f000 fe1e 	bl	8005b0c <pbuf_ref>
      left_to_copy -= newpbuflen;
 8004ed0:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <ip4_frag+0x1b0>)
      pcr->original = p;
 8004ed6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004eda:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8004ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ee0:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8004ee2:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8004ee6:	f000 fe2d 	bl	8005b44 <pbuf_cat>
      if (left_to_copy) {
 8004eea:	f1b9 0f00 	cmp.w	r9, #0
 8004eee:	d1ce      	bne.n	8004e8e <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8004ef0:	9b04      	ldr	r3, [sp, #16]
 8004ef2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8004ef6:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8004efa:	3b13      	subs	r3, #19
    if (!last) {
 8004efc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8004efe:	bfa8      	it	ge
 8004f00:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8004f04:	f7fe fe50 	bl	8003ba8 <lwip_htons>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004f0c:	9b05      	ldr	r3, [sp, #20]
 8004f0e:	f103 0014 	add.w	r0, r3, #20
 8004f12:	b280      	uxth	r0, r0
 8004f14:	f7fe fe48 	bl	8003ba8 <lwip_htons>
 8004f18:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8004f1a:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004f1c:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	7293      	strb	r3, [r2, #10]
 8004f22:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8004f24:	4641      	mov	r1, r8
 8004f26:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004f2a:	9a08      	ldr	r2, [sp, #32]
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	4798      	blx	r3
    pbuf_free(rambuf);
 8004f30:	4640      	mov	r0, r8
 8004f32:	f000 fc2d 	bl	8005790 <pbuf_free>
    left -= fragsize;
 8004f36:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8004f38:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8004f3a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8004f3c:	9b04      	ldr	r3, [sp, #16]
 8004f3e:	4413      	add	r3, r2
    poff += newpbuflen;
 8004f40:	4426      	add	r6, r4
    ofo += nfb;
 8004f42:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8004f44:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8004f46:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	e76c      	b.n	8004e26 <ip4_frag+0x76>
 8004f4c:	0800c005 	.word	0x0800c005
 8004f50:	0800bf20 	.word	0x0800bf20
 8004f54:	0800ace9 	.word	0x0800ace9
 8004f58:	0800bf47 	.word	0x0800bf47
 8004f5c:	0800bf61 	.word	0x0800bf61
 8004f60:	08004a01 	.word	0x08004a01

08004f64 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004f64:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <mem_init+0x4c>)
 8004f66:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <mem_init+0x50>)
 8004f68:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8004f6c:	2100      	movs	r1, #0
{
 8004f6e:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004f70:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8004f72:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 8004f74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8004f78:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004f7a:	490f      	ldr	r1, [pc, #60]	; (8004fb8 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8004f7c:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004f7e:	1898      	adds	r0, r3, r2
 8004f80:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8004f82:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->used = 1;
 8004f86:	2101      	movs	r1, #1
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004f88:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <mem_init+0x58>)
  ram_end->used = 1;
 8004f8e:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004f92:	480b      	ldr	r0, [pc, #44]	; (8004fc0 <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 8004f94:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004f96:	f004 fa53 	bl	8009440 <sys_mutex_new>
 8004f9a:	b140      	cbz	r0, 8004fae <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <mem_init+0x60>)
 8004f9e:	490a      	ldr	r1, [pc, #40]	; (8004fc8 <mem_init+0x64>)
 8004fa0:	480a      	ldr	r0, [pc, #40]	; (8004fcc <mem_init+0x68>)
 8004fa2:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8004fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004faa:	f004 bf05 	b.w	8009db8 <iprintf>
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	2000463f 	.word	0x2000463f
 8004fb4:	20004330 	.word	0x20004330
 8004fb8:	20004334 	.word	0x20004334
 8004fbc:	20004328 	.word	0x20004328
 8004fc0:	2000432c 	.word	0x2000432c
 8004fc4:	0800c17b 	.word	0x0800c17b
 8004fc8:	0800c1aa 	.word	0x0800c1aa
 8004fcc:	0800ace9 	.word	0x0800ace9

08004fd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f000 8096 	beq.w	8005108 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004fdc:	0783      	lsls	r3, r0, #30
 8004fde:	d006      	beq.n	8004fee <mem_free+0x1e>
 8004fe0:	4b4a      	ldr	r3, [pc, #296]	; (800510c <mem_free+0x13c>)
 8004fe2:	494b      	ldr	r1, [pc, #300]	; (8005110 <mem_free+0x140>)
 8004fe4:	484b      	ldr	r0, [pc, #300]	; (8005114 <mem_free+0x144>)
 8004fe6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004fea:	f004 fee5 	bl	8009db8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004fee:	4f4a      	ldr	r7, [pc, #296]	; (8005118 <mem_free+0x148>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d303      	bcc.n	8004ffe <mem_free+0x2e>
 8004ff6:	4b49      	ldr	r3, [pc, #292]	; (800511c <mem_free+0x14c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429c      	cmp	r4, r3
 8004ffc:	d306      	bcc.n	800500c <mem_free+0x3c>
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <mem_free+0x13c>)
 8005000:	4947      	ldr	r1, [pc, #284]	; (8005120 <mem_free+0x150>)
 8005002:	4844      	ldr	r0, [pc, #272]	; (8005114 <mem_free+0x144>)
 8005004:	f240 12af 	movw	r2, #431	; 0x1af
 8005008:	f004 fed6 	bl	8009db8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	429c      	cmp	r4, r3
 8005010:	d304      	bcc.n	800501c <mem_free+0x4c>
 8005012:	4b42      	ldr	r3, [pc, #264]	; (800511c <mem_free+0x14c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4294      	cmp	r4, r2
 8005018:	4698      	mov	r8, r3
 800501a:	d305      	bcc.n	8005028 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800501c:	f004 fa3e 	bl	800949c <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8005024:	f004 ba46 	b.w	80094b4 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8005028:	483e      	ldr	r0, [pc, #248]	; (8005124 <mem_free+0x154>)
 800502a:	f004 fa18 	bl	800945e <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800502e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005032:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005036:	b933      	cbnz	r3, 8005046 <mem_free+0x76>
 8005038:	4b34      	ldr	r3, [pc, #208]	; (800510c <mem_free+0x13c>)
 800503a:	493b      	ldr	r1, [pc, #236]	; (8005128 <mem_free+0x158>)
 800503c:	4835      	ldr	r0, [pc, #212]	; (8005114 <mem_free+0x144>)
 800503e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005042:	f004 feb9 	bl	8009db8 <iprintf>
  if (mem < lfree) {
 8005046:	4e39      	ldr	r6, [pc, #228]	; (800512c <mem_free+0x15c>)
  mem->used = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800504e:	6833      	ldr	r3, [r6, #0]
 8005050:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005052:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8005054:	bf38      	it	cc
 8005056:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005058:	429d      	cmp	r5, r3
 800505a:	d206      	bcs.n	800506a <mem_free+0x9a>
 800505c:	4b2b      	ldr	r3, [pc, #172]	; (800510c <mem_free+0x13c>)
 800505e:	4934      	ldr	r1, [pc, #208]	; (8005130 <mem_free+0x160>)
 8005060:	482c      	ldr	r0, [pc, #176]	; (8005114 <mem_free+0x144>)
 8005062:	f240 125d 	movw	r2, #349	; 0x15d
 8005066:	f004 fea7 	bl	8009db8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800506a:	f8d8 3000 	ldr.w	r3, [r8]
 800506e:	429d      	cmp	r5, r3
 8005070:	d306      	bcc.n	8005080 <mem_free+0xb0>
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <mem_free+0x13c>)
 8005074:	492f      	ldr	r1, [pc, #188]	; (8005134 <mem_free+0x164>)
 8005076:	4827      	ldr	r0, [pc, #156]	; (8005114 <mem_free+0x144>)
 8005078:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800507c:	f004 fe9c 	bl	8009db8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005080:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005084:	b133      	cbz	r3, 8005094 <mem_free+0xc4>
 8005086:	4b21      	ldr	r3, [pc, #132]	; (800510c <mem_free+0x13c>)
 8005088:	492b      	ldr	r1, [pc, #172]	; (8005138 <mem_free+0x168>)
 800508a:	4822      	ldr	r0, [pc, #136]	; (8005114 <mem_free+0x144>)
 800508c:	f240 125f 	movw	r2, #351	; 0x15f
 8005090:	f004 fe92 	bl	8009db8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005094:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8005098:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800509c:	d906      	bls.n	80050ac <mem_free+0xdc>
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <mem_free+0x13c>)
 80050a0:	4926      	ldr	r1, [pc, #152]	; (800513c <mem_free+0x16c>)
 80050a2:	481c      	ldr	r0, [pc, #112]	; (8005114 <mem_free+0x144>)
 80050a4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80050a8:	f004 fe86 	bl	8009db8 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80050b2:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80050b4:	4295      	cmp	r5, r2
 80050b6:	d010      	beq.n	80050da <mem_free+0x10a>
 80050b8:	7910      	ldrb	r0, [r2, #4]
 80050ba:	b970      	cbnz	r0, 80050da <mem_free+0x10a>
 80050bc:	f8d8 0000 	ldr.w	r0, [r8]
 80050c0:	4282      	cmp	r2, r0
 80050c2:	d00a      	beq.n	80050da <mem_free+0x10a>
    if (lfree == nmem) {
 80050c4:	6830      	ldr	r0, [r6, #0]
 80050c6:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80050c8:	5a5a      	ldrh	r2, [r3, r1]
 80050ca:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80050ce:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80050d0:	bf08      	it	eq
 80050d2:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80050d4:	441a      	add	r2, r3
 80050d6:	1ae9      	subs	r1, r5, r3
 80050d8:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80050da:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80050de:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80050e0:	428d      	cmp	r5, r1
 80050e2:	d00c      	beq.n	80050fe <mem_free+0x12e>
 80050e4:	7908      	ldrb	r0, [r1, #4]
 80050e6:	b950      	cbnz	r0, 80050fe <mem_free+0x12e>
    if (lfree == mem) {
 80050e8:	6830      	ldr	r0, [r6, #0]
 80050ea:	4285      	cmp	r5, r0
      lfree = pmem;
 80050ec:	bf08      	it	eq
 80050ee:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80050f0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80050f4:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80050f6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80050fa:	440b      	add	r3, r1
 80050fc:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80050fe:	4809      	ldr	r0, [pc, #36]	; (8005124 <mem_free+0x154>)
}
 8005100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8005104:	f004 b9b0 	b.w	8009468 <sys_mutex_unlock>
 8005108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800510c:	0800c17b 	.word	0x0800c17b
 8005110:	0800c0b9 	.word	0x0800c0b9
 8005114:	0800ace9 	.word	0x0800ace9
 8005118:	20004330 	.word	0x20004330
 800511c:	20004334 	.word	0x20004334
 8005120:	0800c0da 	.word	0x0800c0da
 8005124:	2000432c 	.word	0x2000432c
 8005128:	0800c0f1 	.word	0x0800c0f1
 800512c:	20004328 	.word	0x20004328
 8005130:	0800c105 	.word	0x0800c105
 8005134:	0800c11c 	.word	0x0800c11c
 8005138:	0800c136 	.word	0x0800c136
 800513c:	0800c151 	.word	0x0800c151

08005140 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005144:	3103      	adds	r1, #3
 8005146:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800514a:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800514c:	2d0b      	cmp	r5, #11
{
 800514e:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8005150:	d904      	bls.n	800515c <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005152:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005156:	d902      	bls.n	800515e <mem_trim+0x1e>
    return NULL;
 8005158:	2400      	movs	r4, #0
 800515a:	e01c      	b.n	8005196 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 800515c:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <mem_trim+0xf8>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	42a2      	cmp	r2, r4
 8005164:	4698      	mov	r8, r3
 8005166:	d803      	bhi.n	8005170 <mem_trim+0x30>
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <mem_trim+0xfc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429c      	cmp	r4, r3
 800516e:	d306      	bcc.n	800517e <mem_trim+0x3e>
 8005170:	4b33      	ldr	r3, [pc, #204]	; (8005240 <mem_trim+0x100>)
 8005172:	4934      	ldr	r1, [pc, #208]	; (8005244 <mem_trim+0x104>)
 8005174:	4834      	ldr	r0, [pc, #208]	; (8005248 <mem_trim+0x108>)
 8005176:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800517a:	f004 fe1d 	bl	8009db8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800517e:	f8d8 3000 	ldr.w	r3, [r8]
 8005182:	429c      	cmp	r4, r3
 8005184:	d303      	bcc.n	800518e <mem_trim+0x4e>
 8005186:	4a2d      	ldr	r2, [pc, #180]	; (800523c <mem_trim+0xfc>)
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	4294      	cmp	r4, r2
 800518c:	d306      	bcc.n	800519c <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800518e:	f004 f985 	bl	800949c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8005192:	f004 f98f 	bl	80094b4 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005196:	4620      	mov	r0, r4
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800519c:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80051a0:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80051a4:	1af6      	subs	r6, r6, r3
 80051a6:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80051a8:	3f08      	subs	r7, #8
 80051aa:	1bbf      	subs	r7, r7, r6
 80051ac:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80051ae:	42af      	cmp	r7, r5
 80051b0:	d219      	bcs.n	80051e6 <mem_trim+0xa6>
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <mem_trim+0x100>)
 80051b4:	4925      	ldr	r1, [pc, #148]	; (800524c <mem_trim+0x10c>)
 80051b6:	4824      	ldr	r0, [pc, #144]	; (8005248 <mem_trim+0x108>)
 80051b8:	f240 2206 	movw	r2, #518	; 0x206
 80051bc:	f004 fdfc 	bl	8009db8 <iprintf>
 80051c0:	e7ca      	b.n	8005158 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80051c2:	f105 0214 	add.w	r2, r5, #20
 80051c6:	42ba      	cmp	r2, r7
 80051c8:	d831      	bhi.n	800522e <mem_trim+0xee>
    if (mem2 < lfree) {
 80051ca:	4821      	ldr	r0, [pc, #132]	; (8005250 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80051cc:	f106 0208 	add.w	r2, r6, #8
 80051d0:	4415      	add	r5, r2
    if (mem2 < lfree) {
 80051d2:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80051d4:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80051d6:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 80051d8:	42ba      	cmp	r2, r7
      lfree = mem2;
 80051da:	bf38      	it	cc
 80051dc:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 80051de:	2000      	movs	r0, #0
 80051e0:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 80051e2:	5359      	strh	r1, [r3, r5]
 80051e4:	e01a      	b.n	800521c <mem_trim+0xdc>
  if (newsize == size) {
 80051e6:	d0d6      	beq.n	8005196 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 80051e8:	481a      	ldr	r0, [pc, #104]	; (8005254 <mem_trim+0x114>)
 80051ea:	f004 f938 	bl	800945e <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80051ee:	f8d8 3000 	ldr.w	r3, [r8]
 80051f2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80051f6:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 80051f8:	7902      	ldrb	r2, [r0, #4]
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d1e1      	bne.n	80051c2 <mem_trim+0x82>
    next = mem2->next;
 80051fe:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8005200:	4913      	ldr	r1, [pc, #76]	; (8005250 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005202:	f106 0208 	add.w	r2, r6, #8
 8005206:	4415      	add	r5, r2
    if (lfree == mem2) {
 8005208:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800520a:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800520c:	4290      	cmp	r0, r2
 800520e:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005212:	bf08      	it	eq
 8005214:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8005216:	2100      	movs	r1, #0
 8005218:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 800521a:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 800521c:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800521e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005222:	5b5a      	ldrh	r2, [r3, r5]
 8005224:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005228:	bf1c      	itt	ne
 800522a:	189b      	addne	r3, r3, r2
 800522c:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800522e:	4809      	ldr	r0, [pc, #36]	; (8005254 <mem_trim+0x114>)
 8005230:	f004 f91a 	bl	8009468 <sys_mutex_unlock>
  return rmem;
 8005234:	e7af      	b.n	8005196 <mem_trim+0x56>
 8005236:	bf00      	nop
 8005238:	20004330 	.word	0x20004330
 800523c:	20004334 	.word	0x20004334
 8005240:	0800c17b 	.word	0x0800c17b
 8005244:	0800c260 	.word	0x0800c260
 8005248:	0800ace9 	.word	0x0800ace9
 800524c:	0800c277 	.word	0x0800c277
 8005250:	20004328 	.word	0x20004328
 8005254:	2000432c 	.word	0x2000432c

08005258 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800525c:	b148      	cbz	r0, 8005272 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800525e:	3003      	adds	r0, #3
 8005260:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005264:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8005266:	2d0b      	cmp	r5, #11
 8005268:	d905      	bls.n	8005276 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800526a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800526e:	d903      	bls.n	8005278 <mem_malloc+0x20>
    return NULL;
 8005270:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8005272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8005276:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 8005278:	483c      	ldr	r0, [pc, #240]	; (800536c <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800527a:	4e3d      	ldr	r6, [pc, #244]	; (8005370 <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 800527c:	f004 f8ef 	bl	800945e <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005280:	483c      	ldr	r0, [pc, #240]	; (8005374 <mem_malloc+0x11c>)
 8005282:	6831      	ldr	r1, [r6, #0]
 8005284:	6807      	ldr	r7, [r0, #0]
 8005286:	1a7b      	subs	r3, r7, r1
 8005288:	b29b      	uxth	r3, r3
 800528a:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800528e:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005292:	4543      	cmp	r3, r8
 8005294:	d303      	bcc.n	800529e <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 8005296:	4835      	ldr	r0, [pc, #212]	; (800536c <mem_malloc+0x114>)
 8005298:	f004 f8e6 	bl	8009468 <sys_mutex_unlock>
 800529c:	e7e8      	b.n	8005270 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800529e:	18cc      	adds	r4, r1, r3
 80052a0:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 80052a4:	f894 c004 	ldrb.w	ip, [r4, #4]
 80052a8:	f1bc 0f00 	cmp.w	ip, #0
 80052ac:	d15b      	bne.n	8005366 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80052ae:	eba9 0203 	sub.w	r2, r9, r3
 80052b2:	4472      	add	r2, lr
      if ((!mem->used) &&
 80052b4:	4295      	cmp	r5, r2
 80052b6:	d856      	bhi.n	8005366 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80052b8:	f105 0814 	add.w	r8, r5, #20
 80052bc:	4542      	cmp	r2, r8
 80052be:	d34c      	bcc.n	800535a <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80052c0:	f105 0208 	add.w	r2, r5, #8
 80052c4:	441a      	add	r2, r3
 80052c6:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80052c8:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 80052cc:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 80052d0:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 80052d4:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 80052d8:	2301      	movs	r3, #1
          mem->next = ptr2;
 80052da:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 80052dc:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80052de:	5a8b      	ldrh	r3, [r1, r2]
 80052e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052e4:	d001      	beq.n	80052ea <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80052e6:	4419      	add	r1, r3
 80052e8:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 80052ea:	42a7      	cmp	r7, r4
 80052ec:	4f22      	ldr	r7, [pc, #136]	; (8005378 <mem_malloc+0x120>)
 80052ee:	d111      	bne.n	8005314 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 80052f0:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80052f2:	6836      	ldr	r6, [r6, #0]
 80052f4:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80052f6:	791a      	ldrb	r2, [r3, #4]
 80052f8:	b10a      	cbz	r2, 80052fe <mem_malloc+0xa6>
 80052fa:	428b      	cmp	r3, r1
 80052fc:	d130      	bne.n	8005360 <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80052fe:	428b      	cmp	r3, r1
          lfree = cur;
 8005300:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005302:	d007      	beq.n	8005314 <mem_malloc+0xbc>
 8005304:	b132      	cbz	r2, 8005314 <mem_malloc+0xbc>
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <mem_malloc+0x124>)
 8005308:	491d      	ldr	r1, [pc, #116]	; (8005380 <mem_malloc+0x128>)
 800530a:	481e      	ldr	r0, [pc, #120]	; (8005384 <mem_malloc+0x12c>)
 800530c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005310:	f004 fd52 	bl	8009db8 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8005314:	4815      	ldr	r0, [pc, #84]	; (800536c <mem_malloc+0x114>)
 8005316:	f004 f8a7 	bl	8009468 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800531a:	3508      	adds	r5, #8
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4425      	add	r5, r4
 8005320:	42ab      	cmp	r3, r5
 8005322:	d206      	bcs.n	8005332 <mem_malloc+0xda>
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <mem_malloc+0x124>)
 8005326:	4918      	ldr	r1, [pc, #96]	; (8005388 <mem_malloc+0x130>)
 8005328:	4816      	ldr	r0, [pc, #88]	; (8005384 <mem_malloc+0x12c>)
 800532a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800532e:	f004 fd43 	bl	8009db8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005332:	07a3      	lsls	r3, r4, #30
 8005334:	d00d      	beq.n	8005352 <mem_malloc+0xfa>
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <mem_malloc+0x124>)
 8005338:	4914      	ldr	r1, [pc, #80]	; (800538c <mem_malloc+0x134>)
 800533a:	4812      	ldr	r0, [pc, #72]	; (8005384 <mem_malloc+0x12c>)
 800533c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005340:	f004 fd3a 	bl	8009db8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <mem_malloc+0x124>)
 8005346:	4912      	ldr	r1, [pc, #72]	; (8005390 <mem_malloc+0x138>)
 8005348:	480e      	ldr	r0, [pc, #56]	; (8005384 <mem_malloc+0x12c>)
 800534a:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800534e:	f004 fd33 	bl	8009db8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005352:	f104 0008 	add.w	r0, r4, #8
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	7123      	strb	r3, [r4, #4]
 800535e:	e7c4      	b.n	80052ea <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	4433      	add	r3, r6
 8005364:	e7c7      	b.n	80052f6 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005366:	4673      	mov	r3, lr
 8005368:	e793      	b.n	8005292 <mem_malloc+0x3a>
 800536a:	bf00      	nop
 800536c:	2000432c 	.word	0x2000432c
 8005370:	20004330 	.word	0x20004330
 8005374:	20004328 	.word	0x20004328
 8005378:	20004334 	.word	0x20004334
 800537c:	0800c17b 	.word	0x0800c17b
 8005380:	0800c1c5 	.word	0x0800c1c5
 8005384:	0800ace9 	.word	0x0800ace9
 8005388:	0800c1de 	.word	0x0800c1de
 800538c:	0800c20e 	.word	0x0800c20e
 8005390:	0800c23d 	.word	0x0800c23d

08005394 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8005398:	f004 f880 	bl	800949c <sys_arch_protect>

  memp = *desc->tab;
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 80053a0:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80053a2:	b15c      	cbz	r4, 80053bc <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80053a8:	07a3      	lsls	r3, r4, #30
 80053aa:	d006      	beq.n	80053ba <do_memp_malloc_pool.isra.0+0x26>
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <do_memp_malloc_pool.isra.0+0x30>)
 80053ae:	4906      	ldr	r1, [pc, #24]	; (80053c8 <do_memp_malloc_pool.isra.0+0x34>)
 80053b0:	4806      	ldr	r0, [pc, #24]	; (80053cc <do_memp_malloc_pool.isra.0+0x38>)
 80053b2:	f240 1249 	movw	r2, #329	; 0x149
 80053b6:	f004 fcff 	bl	8009db8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80053ba:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80053bc:	f004 f87a 	bl	80094b4 <sys_arch_unprotect>
  return NULL;
}
 80053c0:	4620      	mov	r0, r4
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	0800c2b7 	.word	0x0800c2b7
 80053c8:	0800c2e7 	.word	0x0800c2e7
 80053cc:	0800ace9 	.word	0x0800ace9

080053d0 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80053d0:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80053d2:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80053d4:	4605      	mov	r5, r0
 80053d6:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80053d8:	d006      	beq.n	80053e8 <do_memp_free_pool.isra.1+0x18>
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <do_memp_free_pool.isra.1+0x2c>)
 80053dc:	4908      	ldr	r1, [pc, #32]	; (8005400 <do_memp_free_pool.isra.1+0x30>)
 80053de:	4809      	ldr	r0, [pc, #36]	; (8005404 <do_memp_free_pool.isra.1+0x34>)
 80053e0:	f240 129d 	movw	r2, #413	; 0x19d
 80053e4:	f004 fce8 	bl	8009db8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80053e8:	f004 f858 	bl	800949c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80053f2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80053f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80053f8:	f004 b85c 	b.w	80094b4 <sys_arch_unprotect>
 80053fc:	0800c2b7 	.word	0x0800c2b7
 8005400:	0800c297 	.word	0x0800c297
 8005404:	0800ace9 	.word	0x0800ace9

08005408 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005408:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800540a:	6881      	ldr	r1, [r0, #8]
{
 800540c:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 800540e:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005410:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005412:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005414:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005416:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800541a:	42a2      	cmp	r2, r4
 800541c:	db00      	blt.n	8005420 <memp_init_pool+0x18>
}
 800541e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005420:	680d      	ldr	r5, [r1, #0]
 8005422:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005424:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005426:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005428:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800542a:	442b      	add	r3, r5
 800542c:	e7f5      	b.n	800541a <memp_init_pool+0x12>
	...

08005430 <memp_init>:
{
 8005430:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8005432:	4d05      	ldr	r5, [pc, #20]	; (8005448 <memp_init+0x18>)
{
 8005434:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005436:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800543a:	3401      	adds	r4, #1
 800543c:	f7ff ffe4 	bl	8005408 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005440:	2c0d      	cmp	r4, #13
 8005442:	d1f8      	bne.n	8005436 <memp_init+0x6>
}
 8005444:	bd38      	pop	{r3, r4, r5, pc}
 8005446:	bf00      	nop
 8005448:	0800c3e0 	.word	0x0800c3e0

0800544c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800544c:	280c      	cmp	r0, #12
{
 800544e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005450:	d807      	bhi.n	8005462 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <memp_malloc+0x28>)
 8005454:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8005458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800545c:	3008      	adds	r0, #8
 800545e:	f7ff bf99 	b.w	8005394 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <memp_malloc+0x2c>)
 8005464:	4905      	ldr	r1, [pc, #20]	; (800547c <memp_malloc+0x30>)
 8005466:	4806      	ldr	r0, [pc, #24]	; (8005480 <memp_malloc+0x34>)
 8005468:	f240 1287 	movw	r2, #391	; 0x187
 800546c:	f004 fca4 	bl	8009db8 <iprintf>
}
 8005470:	2000      	movs	r0, #0
 8005472:	bd08      	pop	{r3, pc}
 8005474:	0800c3e0 	.word	0x0800c3e0
 8005478:	0800c2b7 	.word	0x0800c2b7
 800547c:	0800c3c3 	.word	0x0800c3c3
 8005480:	0800ace9 	.word	0x0800ace9

08005484 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005484:	280c      	cmp	r0, #12
 8005486:	d906      	bls.n	8005496 <memp_free+0x12>
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <memp_free+0x24>)
 800548a:	4908      	ldr	r1, [pc, #32]	; (80054ac <memp_free+0x28>)
 800548c:	4808      	ldr	r0, [pc, #32]	; (80054b0 <memp_free+0x2c>)
 800548e:	f240 12db 	movw	r2, #475	; 0x1db
 8005492:	f004 bc91 	b.w	8009db8 <iprintf>

  if (mem == NULL) {
 8005496:	b129      	cbz	r1, 80054a4 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <memp_free+0x30>)
 800549a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800549e:	3008      	adds	r0, #8
 80054a0:	f7ff bf96 	b.w	80053d0 <do_memp_free_pool.isra.1>
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	0800c2b7 	.word	0x0800c2b7
 80054ac:	0800c3a8 	.word	0x0800c3a8
 80054b0:	0800ace9 	.word	0x0800ace9
 80054b4:	0800c3e0 	.word	0x0800c3e0

080054b8 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80054b8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80054bc:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 80054be:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80054c0:	d502      	bpl.n	80054c8 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 80054c2:	3104      	adds	r1, #4
 80054c4:	f7fe bd60 	b.w	8003f88 <etharp_request>
 80054c8:	4770      	bx	lr

080054ca <netif_init>:
{
 80054ca:	4770      	bx	lr

080054cc <netif_set_ipaddr>:
{
 80054cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054ce:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80054d0:	460c      	mov	r4, r1
 80054d2:	b1b9      	cbz	r1, 8005504 <netif_set_ipaddr+0x38>
 80054d4:	680b      	ldr	r3, [r1, #0]
 80054d6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80054d8:	9a01      	ldr	r2, [sp, #4]
 80054da:	686b      	ldr	r3, [r5, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d00f      	beq.n	8005500 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80054e0:	1d2e      	adds	r6, r5, #4
 80054e2:	a901      	add	r1, sp, #4
 80054e4:	4630      	mov	r0, r6
 80054e6:	f001 fb37 	bl	8006b58 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80054ea:	a901      	add	r1, sp, #4
 80054ec:	4630      	mov	r0, r6
 80054ee:	f003 feb1 	bl	8009254 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80054f2:	b104      	cbz	r4, 80054f6 <netif_set_ipaddr+0x2a>
 80054f4:	6824      	ldr	r4, [r4, #0]
 80054f6:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80054f8:	b114      	cbz	r4, 8005500 <netif_set_ipaddr+0x34>
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff ffdc 	bl	80054b8 <netif_issue_reports.part.0>
}
 8005500:	b002      	add	sp, #8
 8005502:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005504:	4b01      	ldr	r3, [pc, #4]	; (800550c <netif_set_ipaddr+0x40>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	e7e5      	b.n	80054d6 <netif_set_ipaddr+0xa>
 800550a:	bf00      	nop
 800550c:	0800bf1c 	.word	0x0800bf1c

08005510 <netif_set_addr>:
{
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4606      	mov	r6, r0
 8005514:	4615      	mov	r5, r2
 8005516:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005518:	b109      	cbz	r1, 800551e <netif_set_addr+0xe>
 800551a:	680b      	ldr	r3, [r1, #0]
 800551c:	b94b      	cbnz	r3, 8005532 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff ffd4 	bl	80054cc <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005524:	b105      	cbz	r5, 8005528 <netif_set_addr+0x18>
 8005526:	682d      	ldr	r5, [r5, #0]
 8005528:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800552a:	b104      	cbz	r4, 800552e <netif_set_addr+0x1e>
 800552c:	6824      	ldr	r4, [r4, #0]
 800552e:	60f4      	str	r4, [r6, #12]
 8005530:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005532:	b102      	cbz	r2, 8005536 <netif_set_addr+0x26>
 8005534:	6815      	ldr	r5, [r2, #0]
 8005536:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005538:	b104      	cbz	r4, 800553c <netif_set_addr+0x2c>
 800553a:	6824      	ldr	r4, [r4, #0]
 800553c:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800553e:	4630      	mov	r0, r6
}
 8005540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8005544:	f7ff bfc2 	b.w	80054cc <netif_set_ipaddr>

08005548 <netif_add>:
{
 8005548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800554c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800554e:	4604      	mov	r4, r0
 8005550:	460f      	mov	r7, r1
 8005552:	4690      	mov	r8, r2
 8005554:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8005556:	b92e      	cbnz	r6, 8005564 <netif_add+0x1c>
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <netif_add+0x68>)
 800555a:	4916      	ldr	r1, [pc, #88]	; (80055b4 <netif_add+0x6c>)
 800555c:	4816      	ldr	r0, [pc, #88]	; (80055b8 <netif_add+0x70>)
 800555e:	22fb      	movs	r2, #251	; 0xfb
 8005560:	f004 fc2a 	bl	8009db8 <iprintf>
  netif->num = netif_num++;
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005566:	2303      	movs	r3, #3
 8005568:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005570:	7813      	ldrb	r3, [r2, #0]
 8005572:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005576:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8005578:	1c59      	adds	r1, r3, #1
  netif->input = input;
 800557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 800557c:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 800557e:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005580:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005582:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005584:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005586:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8005588:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 800558c:	464b      	mov	r3, r9
 800558e:	4642      	mov	r2, r8
 8005590:	4639      	mov	r1, r7
 8005592:	f7ff ffbd 	bl	8005510 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005596:	4620      	mov	r0, r4
 8005598:	47b0      	blx	r6
 800559a:	b930      	cbnz	r0, 80055aa <netif_add+0x62>
  netif->next = netif_list;
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <netif_add+0x78>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80055a2:	601c      	str	r4, [r3, #0]
}
 80055a4:	4620      	mov	r0, r4
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 80055aa:	462c      	mov	r4, r5
 80055ac:	e7fa      	b.n	80055a4 <netif_add+0x5c>
 80055ae:	bf00      	nop
 80055b0:	0800c414 	.word	0x0800c414
 80055b4:	0800c445 	.word	0x0800c445
 80055b8:	0800ace9 	.word	0x0800ace9
 80055bc:	2000436c 	.word	0x2000436c
 80055c0:	20007d18 	.word	0x20007d18

080055c4 <netif_set_default>:
  netif_default = netif;
 80055c4:	4b01      	ldr	r3, [pc, #4]	; (80055cc <netif_set_default+0x8>)
 80055c6:	6018      	str	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20007d1c 	.word	0x20007d1c

080055d0 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80055d0:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 80055d4:	07d1      	lsls	r1, r2, #31
 80055d6:	d409      	bmi.n	80055ec <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 80055d8:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80055dc:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 80055de:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80055e2:	d503      	bpl.n	80055ec <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80055e4:	6843      	ldr	r3, [r0, #4]
 80055e6:	b10b      	cbz	r3, 80055ec <netif_set_up+0x1c>
 80055e8:	f7ff bf66 	b.w	80054b8 <netif_issue_reports.part.0>
 80055ec:	4770      	bx	lr

080055ee <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80055ee:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80055f2:	07d9      	lsls	r1, r3, #31
 80055f4:	d507      	bpl.n	8005606 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 80055f6:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80055fa:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80055fc:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005600:	d501      	bpl.n	8005606 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8005602:	f7fe bc0f 	b.w	8003e24 <etharp_cleanup_netif>
 8005606:	4770      	bx	lr

08005608 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005608:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800560a:	f003 ff47 	bl	800949c <sys_arch_protect>
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <pbuf_free_ooseq_callback+0x2c>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	f003 ff4e 	bl	80094b4 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <pbuf_free_ooseq_callback+0x30>)
 800561a:	681c      	ldr	r4, [r3, #0]
 800561c:	b904      	cbnz	r4, 8005620 <pbuf_free_ooseq_callback+0x18>
 800561e:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8005620:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005622:	b120      	cbz	r0, 800562e <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8005624:	f000 fd10 	bl	8006048 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	6723      	str	r3, [r4, #112]	; 0x70
 800562c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800562e:	68e4      	ldr	r4, [r4, #12]
 8005630:	e7f4      	b.n	800561c <pbuf_free_ooseq_callback+0x14>
 8005632:	bf00      	nop
 8005634:	20007d20 	.word	0x20007d20
 8005638:	20007d28 	.word	0x20007d28

0800563c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800563c:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800563e:	4604      	mov	r4, r0
 8005640:	2800      	cmp	r0, #0
 8005642:	d12f      	bne.n	80056a4 <pbuf_header_impl+0x68>
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <pbuf_header_impl+0x88>)
 8005646:	4920      	ldr	r1, [pc, #128]	; (80056c8 <pbuf_header_impl+0x8c>)
 8005648:	4820      	ldr	r0, [pc, #128]	; (80056cc <pbuf_header_impl+0x90>)
 800564a:	f240 223f 	movw	r2, #575	; 0x23f
 800564e:	f004 fbb3 	bl	8009db8 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005652:	2000      	movs	r0, #0
 8005654:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8005656:	b288      	uxth	r0, r1
  type = p->type;
 8005658:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800565a:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800565c:	b10d      	cbz	r5, 8005662 <pbuf_header_impl+0x26>
 800565e:	2d03      	cmp	r5, #3
 8005660:	d106      	bne.n	8005670 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005662:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005664:	f104 0210 	add.w	r2, r4, #16
 8005668:	4293      	cmp	r3, r2
 800566a:	d20a      	bcs.n	8005682 <pbuf_header_impl+0x46>
      return 1;
 800566c:	2001      	movs	r0, #1
 800566e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005670:	3d01      	subs	r5, #1
 8005672:	2d01      	cmp	r5, #1
 8005674:	d811      	bhi.n	800569a <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005676:	2900      	cmp	r1, #0
 8005678:	da0c      	bge.n	8005694 <pbuf_header_impl+0x58>
 800567a:	8962      	ldrh	r2, [r4, #10]
 800567c:	4282      	cmp	r2, r0
 800567e:	d3f5      	bcc.n	800566c <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005680:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8005682:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005684:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8005686:	8963      	ldrh	r3, [r4, #10]
 8005688:	b289      	uxth	r1, r1
 800568a:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 800568c:	4401      	add	r1, r0
  p->len += header_size_increment;
 800568e:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8005690:	8121      	strh	r1, [r4, #8]
 8005692:	e7de      	b.n	8005652 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8005694:	2a00      	cmp	r2, #0
 8005696:	d1f3      	bne.n	8005680 <pbuf_header_impl+0x44>
 8005698:	e7e8      	b.n	800566c <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <pbuf_header_impl+0x88>)
 800569c:	490c      	ldr	r1, [pc, #48]	; (80056d0 <pbuf_header_impl+0x94>)
 800569e:	f240 2277 	movw	r2, #631	; 0x277
 80056a2:	e00b      	b.n	80056bc <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d0d4      	beq.n	8005652 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 80056a8:	dad5      	bge.n	8005656 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 80056aa:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056ac:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80056ae:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056b0:	4283      	cmp	r3, r0
 80056b2:	d2d1      	bcs.n	8005658 <pbuf_header_impl+0x1c>
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <pbuf_header_impl+0x88>)
 80056b6:	4907      	ldr	r1, [pc, #28]	; (80056d4 <pbuf_header_impl+0x98>)
 80056b8:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 80056bc:	4803      	ldr	r0, [pc, #12]	; (80056cc <pbuf_header_impl+0x90>)
 80056be:	f004 fb7b 	bl	8009db8 <iprintf>
 80056c2:	e7d3      	b.n	800566c <pbuf_header_impl+0x30>
 80056c4:	0800c6c1 	.word	0x0800c6c1
 80056c8:	0800c72b 	.word	0x0800c72b
 80056cc:	0800ace9 	.word	0x0800ace9
 80056d0:	0800c70f 	.word	0x0800c70f
 80056d4:	0800c6f1 	.word	0x0800c6f1

080056d8 <pbuf_pool_is_empty>:
{
 80056d8:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 80056da:	4d0c      	ldr	r5, [pc, #48]	; (800570c <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 80056dc:	f003 fede 	bl	800949c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80056e0:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 80056e2:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 80056e4:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 80056e6:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80056e8:	f003 fee4 	bl	80094b4 <sys_arch_unprotect>
  if (!queued) {
 80056ec:	b964      	cbnz	r4, 8005708 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80056ee:	4622      	mov	r2, r4
 80056f0:	4621      	mov	r1, r4
 80056f2:	4807      	ldr	r0, [pc, #28]	; (8005710 <pbuf_pool_is_empty+0x38>)
 80056f4:	f7fd fedc 	bl	80034b0 <tcpip_callback_with_block>
 80056f8:	b130      	cbz	r0, 8005708 <pbuf_pool_is_empty+0x30>
 80056fa:	f003 fecf 	bl	800949c <sys_arch_protect>
 80056fe:	702c      	strb	r4, [r5, #0]
}
 8005700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005704:	f003 bed6 	b.w	80094b4 <sys_arch_unprotect>
 8005708:	bd38      	pop	{r3, r4, r5, pc}
 800570a:	bf00      	nop
 800570c:	20007d20 	.word	0x20007d20
 8005710:	08005609 	.word	0x08005609

08005714 <pbuf_alloced_custom>:
{
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005718:	2804      	cmp	r0, #4
 800571a:	d81e      	bhi.n	800575a <pbuf_alloced_custom+0x46>
 800571c:	e8df f000 	tbb	[pc, r0]
 8005720:	1b280326 	.word	0x1b280326
 8005724:	1b          	.byte	0x1b
 8005725:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005726:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005728:	3403      	adds	r4, #3
 800572a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800572e:	f024 0403 	bic.w	r4, r4, #3
 8005732:	190e      	adds	r6, r1, r4
 8005734:	4286      	cmp	r6, r0
 8005736:	f04f 0000 	mov.w	r0, #0
 800573a:	d80b      	bhi.n	8005754 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 800573c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800573e:	b1cd      	cbz	r5, 8005774 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005740:	442c      	add	r4, r5
 8005742:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005744:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8005746:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005748:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800574a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800574c:	8119      	strh	r1, [r3, #8]
 800574e:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8005750:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005752:	4618      	mov	r0, r3
}
 8005754:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8005756:	2400      	movs	r4, #0
    break;
 8005758:	e7e6      	b.n	8005728 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <pbuf_alloced_custom+0x64>)
 800575c:	4907      	ldr	r1, [pc, #28]	; (800577c <pbuf_alloced_custom+0x68>)
 800575e:	4808      	ldr	r0, [pc, #32]	; (8005780 <pbuf_alloced_custom+0x6c>)
 8005760:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005764:	f004 fb28 	bl	8009db8 <iprintf>
    return NULL;
 8005768:	2000      	movs	r0, #0
 800576a:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800576c:	2436      	movs	r4, #54	; 0x36
 800576e:	e7db      	b.n	8005728 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005770:	240e      	movs	r4, #14
 8005772:	e7d9      	b.n	8005728 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8005774:	605d      	str	r5, [r3, #4]
 8005776:	e7e5      	b.n	8005744 <pbuf_alloced_custom+0x30>
 8005778:	0800c6c1 	.word	0x0800c6c1
 800577c:	0800c504 	.word	0x0800c504
 8005780:	0800ace9 	.word	0x0800ace9

08005784 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8005784:	2200      	movs	r2, #0
 8005786:	f7ff bf59 	b.w	800563c <pbuf_header_impl>

0800578a <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800578a:	2201      	movs	r2, #1
 800578c:	f7ff bf56 	b.w	800563c <pbuf_header_impl>

08005790 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005794:	4604      	mov	r4, r0
 8005796:	b950      	cbnz	r0, 80057ae <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005798:	4b2c      	ldr	r3, [pc, #176]	; (800584c <pbuf_free+0xbc>)
 800579a:	492d      	ldr	r1, [pc, #180]	; (8005850 <pbuf_free+0xc0>)
 800579c:	482d      	ldr	r0, [pc, #180]	; (8005854 <pbuf_free+0xc4>)
 800579e:	f240 22d2 	movw	r2, #722	; 0x2d2
 80057a2:	f004 fb09 	bl	8009db8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80057a6:	4627      	mov	r7, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80057a8:	4638      	mov	r0, r7
 80057aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80057ae:	7b03      	ldrb	r3, [r0, #12]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d906      	bls.n	80057c2 <pbuf_free+0x32>
 80057b4:	4b25      	ldr	r3, [pc, #148]	; (800584c <pbuf_free+0xbc>)
 80057b6:	4928      	ldr	r1, [pc, #160]	; (8005858 <pbuf_free+0xc8>)
 80057b8:	4826      	ldr	r0, [pc, #152]	; (8005854 <pbuf_free+0xc4>)
 80057ba:	f240 22de 	movw	r2, #734	; 0x2de
 80057be:	f004 fafb 	bl	8009db8 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80057c2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800584c <pbuf_free+0xbc>
 80057c6:	f8df a098 	ldr.w	sl, [pc, #152]	; 8005860 <pbuf_free+0xd0>
 80057ca:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005854 <pbuf_free+0xc4>
{
 80057ce:	2600      	movs	r6, #0
 80057d0:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	d0e8      	beq.n	80057a8 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 80057d6:	f003 fe61 	bl	800949c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80057da:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 80057dc:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80057de:	b933      	cbnz	r3, 80057ee <pbuf_free+0x5e>
 80057e0:	4643      	mov	r3, r8
 80057e2:	f240 22eb 	movw	r2, #747	; 0x2eb
 80057e6:	4651      	mov	r1, sl
 80057e8:	4648      	mov	r0, r9
 80057ea:	f004 fae5 	bl	8009db8 <iprintf>
    ref = --(p->ref);
 80057ee:	89e5      	ldrh	r5, [r4, #14]
 80057f0:	3d01      	subs	r5, #1
 80057f2:	b2ad      	uxth	r5, r5
 80057f4:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80057f6:	4658      	mov	r0, fp
 80057f8:	f003 fe5c 	bl	80094b4 <sys_arch_unprotect>
    if (ref == 0) {
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	d1d3      	bne.n	80057a8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005800:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8005802:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005804:	079b      	lsls	r3, r3, #30
 8005806:	d50e      	bpl.n	8005826 <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	b933      	cbnz	r3, 800581a <pbuf_free+0x8a>
 800580c:	4643      	mov	r3, r8
 800580e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005812:	4912      	ldr	r1, [pc, #72]	; (800585c <pbuf_free+0xcc>)
 8005814:	4648      	mov	r0, r9
 8005816:	f004 facf 	bl	8009db8 <iprintf>
        pc->custom_free_function(p);
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	4620      	mov	r0, r4
 800581e:	4798      	blx	r3
 8005820:	3601      	adds	r6, #1
      p = q;
 8005822:	462c      	mov	r4, r5
 8005824:	e7d4      	b.n	80057d0 <pbuf_free+0x40>
      type = p->type;
 8005826:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8005828:	2b03      	cmp	r3, #3
 800582a:	d104      	bne.n	8005836 <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 800582c:	4621      	mov	r1, r4
 800582e:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8005830:	f7ff fe28 	bl	8005484 <memp_free>
 8005834:	e7f4      	b.n	8005820 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005836:	3b01      	subs	r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d802      	bhi.n	8005842 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 800583c:	4621      	mov	r1, r4
 800583e:	200b      	movs	r0, #11
 8005840:	e7f6      	b.n	8005830 <pbuf_free+0xa0>
          mem_free(p);
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fbc4 	bl	8004fd0 <mem_free>
 8005848:	e7ea      	b.n	8005820 <pbuf_free+0x90>
 800584a:	bf00      	nop
 800584c:	0800c6c1 	.word	0x0800c6c1
 8005850:	0800c72b 	.word	0x0800c72b
 8005854:	0800ace9 	.word	0x0800ace9
 8005858:	0800c675 	.word	0x0800c675
 800585c:	0800c6a0 	.word	0x0800c6a0
 8005860:	0800c68a 	.word	0x0800c68a

08005864 <pbuf_alloc>:
{
 8005864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	460e      	mov	r6, r1
 800586a:	4617      	mov	r7, r2
  switch (layer) {
 800586c:	2804      	cmp	r0, #4
 800586e:	d80e      	bhi.n	800588e <pbuf_alloc+0x2a>
 8005870:	e8df f000 	tbb	[pc, r0]
 8005874:	0b170315 	.word	0x0b170315
 8005878:	0b          	.byte	0x0b
 8005879:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800587a:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800587c:	2f03      	cmp	r7, #3
 800587e:	f200 80ba 	bhi.w	80059f6 <pbuf_alloc+0x192>
 8005882:	e8df f007 	tbb	[pc, r7]
 8005886:	ab90      	.short	0xab90
 8005888:	10ab      	.short	0x10ab
    offset = 0;
 800588a:	2500      	movs	r5, #0
    break;
 800588c:	e7f6      	b.n	800587c <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800588e:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <pbuf_alloc+0x19c>)
 8005890:	495c      	ldr	r1, [pc, #368]	; (8005a04 <pbuf_alloc+0x1a0>)
 8005892:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005896:	485c      	ldr	r0, [pc, #368]	; (8005a08 <pbuf_alloc+0x1a4>)
 8005898:	f004 fa8e 	bl	8009db8 <iprintf>
 800589c:	e04a      	b.n	8005934 <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800589e:	2536      	movs	r5, #54	; 0x36
 80058a0:	e7ec      	b.n	800587c <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80058a2:	250e      	movs	r5, #14
 80058a4:	e7ea      	b.n	800587c <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80058a6:	200c      	movs	r0, #12
 80058a8:	f7ff fdd0 	bl	800544c <memp_malloc>
    if (p == NULL) {
 80058ac:	4604      	mov	r4, r0
 80058ae:	b920      	cbnz	r0, 80058ba <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 80058b0:	f7ff ff12 	bl	80056d8 <pbuf_pool_is_empty>
}
 80058b4:	4620      	mov	r0, r4
 80058b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 80058ba:	2303      	movs	r3, #3
 80058bc:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80058c2:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80058c4:	3503      	adds	r5, #3
 80058c6:	f025 0503 	bic.w	r5, r5, #3
 80058ca:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 80058ce:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80058d0:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80058d4:	bf28      	it	cs
 80058d6:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80058d8:	f023 0303 	bic.w	r3, r3, #3
 80058dc:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80058de:	f500 7718 	add.w	r7, r0, #608	; 0x260
 80058e2:	442b      	add	r3, r5
 80058e4:	429f      	cmp	r7, r3
    p->tot_len = length;
 80058e6:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80058e8:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80058ea:	d206      	bcs.n	80058fa <pbuf_alloc+0x96>
 80058ec:	4b44      	ldr	r3, [pc, #272]	; (8005a00 <pbuf_alloc+0x19c>)
 80058ee:	4947      	ldr	r1, [pc, #284]	; (8005a0c <pbuf_alloc+0x1a8>)
 80058f0:	4845      	ldr	r0, [pc, #276]	; (8005a08 <pbuf_alloc+0x1a4>)
 80058f2:	f44f 7298 	mov.w	r2, #304	; 0x130
 80058f6:	f004 fa5f 	bl	8009db8 <iprintf>
    p->ref = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 80058fe:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005900:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005a00 <pbuf_alloc+0x19c>
 8005904:	f8df a110 	ldr.w	sl, [pc, #272]	; 8005a18 <pbuf_alloc+0x1b4>
 8005908:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005a08 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 800590c:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 800590e:	46a3      	mov	fp, r4
 8005910:	2e00      	cmp	r6, #0
 8005912:	dc04      	bgt.n	800591e <pbuf_alloc+0xba>
  p->ref = 1;
 8005914:	2301      	movs	r3, #1
 8005916:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	7363      	strb	r3, [r4, #13]
  return p;
 800591c:	e7ca      	b.n	80058b4 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800591e:	200c      	movs	r0, #12
 8005920:	f7ff fd94 	bl	800544c <memp_malloc>
 8005924:	2300      	movs	r3, #0
      if (q == NULL) {
 8005926:	4605      	mov	r5, r0
 8005928:	b930      	cbnz	r0, 8005938 <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 800592a:	f7ff fed5 	bl	80056d8 <pbuf_pool_is_empty>
        pbuf_free(p);
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff ff2e 	bl	8005790 <pbuf_free>
    return NULL;
 8005934:	2400      	movs	r4, #0
 8005936:	e7bd      	b.n	80058b4 <pbuf_alloc+0x50>
      q->flags = 0;
 8005938:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800593a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800593c:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8005940:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005942:	429e      	cmp	r6, r3
      q->type = type;
 8005944:	7302      	strb	r2, [r0, #12]
      r->next = q;
 8005946:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800594a:	d106      	bne.n	800595a <pbuf_alloc+0xf6>
 800594c:	4643      	mov	r3, r8
 800594e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005952:	4651      	mov	r1, sl
 8005954:	4648      	mov	r0, r9
 8005956:	f004 fa2f 	bl	8009db8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800595a:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800595c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8005960:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005962:	bf28      	it	cs
 8005964:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005968:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800596a:	f105 0310 	add.w	r3, r5, #16
 800596e:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005970:	079b      	lsls	r3, r3, #30
 8005972:	d006      	beq.n	8005982 <pbuf_alloc+0x11e>
 8005974:	4643      	mov	r3, r8
 8005976:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800597a:	4925      	ldr	r1, [pc, #148]	; (8005a10 <pbuf_alloc+0x1ac>)
 800597c:	4648      	mov	r0, r9
 800597e:	f004 fa1b 	bl	8009db8 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005982:	8962      	ldrh	r2, [r4, #10]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	4413      	add	r3, r2
 8005988:	429f      	cmp	r7, r3
 800598a:	d206      	bcs.n	800599a <pbuf_alloc+0x136>
 800598c:	4643      	mov	r3, r8
 800598e:	f240 1255 	movw	r2, #341	; 0x155
 8005992:	491e      	ldr	r1, [pc, #120]	; (8005a0c <pbuf_alloc+0x1a8>)
 8005994:	4648      	mov	r0, r9
 8005996:	f004 fa0f 	bl	8009db8 <iprintf>
      q->ref = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800599e:	896b      	ldrh	r3, [r5, #10]
 80059a0:	46ab      	mov	fp, r5
 80059a2:	1af6      	subs	r6, r6, r3
 80059a4:	e7b4      	b.n	8005910 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80059a6:	f105 0013 	add.w	r0, r5, #19
 80059aa:	1cf3      	adds	r3, r6, #3
 80059ac:	f023 0303 	bic.w	r3, r3, #3
 80059b0:	f020 0003 	bic.w	r0, r0, #3
 80059b4:	4418      	add	r0, r3
 80059b6:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80059b8:	4298      	cmp	r0, r3
 80059ba:	d3bb      	bcc.n	8005934 <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80059bc:	f7ff fc4c 	bl	8005258 <mem_malloc>
    if (p == NULL) {
 80059c0:	4604      	mov	r4, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0b6      	beq.n	8005934 <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80059c6:	4405      	add	r5, r0
 80059c8:	3513      	adds	r5, #19
    p->next = NULL;
 80059ca:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80059cc:	f025 0503 	bic.w	r5, r5, #3
 80059d0:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 80059d2:	8106      	strh	r6, [r0, #8]
 80059d4:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80059d6:	6003      	str	r3, [r0, #0]
    p->type = type;
 80059d8:	7303      	strb	r3, [r0, #12]
 80059da:	e79b      	b.n	8005914 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80059dc:	200b      	movs	r0, #11
 80059de:	f7ff fd35 	bl	800544c <memp_malloc>
    if (p == NULL) {
 80059e2:	4604      	mov	r4, r0
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d0a5      	beq.n	8005934 <pbuf_alloc+0xd0>
    p->payload = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80059ec:	8106      	strh	r6, [r0, #8]
 80059ee:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80059f0:	6003      	str	r3, [r0, #0]
    p->type = type;
 80059f2:	7307      	strb	r7, [r0, #12]
    break;
 80059f4:	e78e      	b.n	8005914 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80059f6:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <pbuf_alloc+0x19c>)
 80059f8:	4906      	ldr	r1, [pc, #24]	; (8005a14 <pbuf_alloc+0x1b0>)
 80059fa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80059fe:	e74a      	b.n	8005896 <pbuf_alloc+0x32>
 8005a00:	0800c6c1 	.word	0x0800c6c1
 8005a04:	0800c45c 	.word	0x0800c45c
 8005a08:	0800ace9 	.word	0x0800ace9
 8005a0c:	0800c477 	.word	0x0800c477
 8005a10:	0800c4bc 	.word	0x0800c4bc
 8005a14:	0800c4e9 	.word	0x0800c4e9
 8005a18:	0800c4a8 	.word	0x0800c4a8

08005a1c <pbuf_realloc>:
{
 8005a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a20:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005a22:	4604      	mov	r4, r0
 8005a24:	b930      	cbnz	r0, 8005a34 <pbuf_realloc+0x18>
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <pbuf_realloc+0xc4>)
 8005a28:	492e      	ldr	r1, [pc, #184]	; (8005ae4 <pbuf_realloc+0xc8>)
 8005a2a:	482f      	ldr	r0, [pc, #188]	; (8005ae8 <pbuf_realloc+0xcc>)
 8005a2c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005a30:	f004 f9c2 	bl	8009db8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005a34:	7b23      	ldrb	r3, [r4, #12]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d906      	bls.n	8005a48 <pbuf_realloc+0x2c>
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <pbuf_realloc+0xc4>)
 8005a3c:	492b      	ldr	r1, [pc, #172]	; (8005aec <pbuf_realloc+0xd0>)
 8005a3e:	482a      	ldr	r0, [pc, #168]	; (8005ae8 <pbuf_realloc+0xcc>)
 8005a40:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005a44:	f004 f9b8 	bl	8009db8 <iprintf>
  if (new_len >= p->tot_len) {
 8005a48:	8926      	ldrh	r6, [r4, #8]
 8005a4a:	42ae      	cmp	r6, r5
 8005a4c:	d945      	bls.n	8005ada <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005a4e:	4f24      	ldr	r7, [pc, #144]	; (8005ae0 <pbuf_realloc+0xc4>)
 8005a50:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005af8 <pbuf_realloc+0xdc>
 8005a54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005ae8 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8005a58:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8005a5a:	8963      	ldrh	r3, [r4, #10]
 8005a5c:	429d      	cmp	r5, r3
 8005a5e:	d819      	bhi.n	8005a94 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005a60:	7b22      	ldrb	r2, [r4, #12]
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	d131      	bne.n	8005aca <pbuf_realloc+0xae>
 8005a66:	429d      	cmp	r5, r3
 8005a68:	d02f      	beq.n	8005aca <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005a6a:	7b63      	ldrb	r3, [r4, #13]
 8005a6c:	079b      	lsls	r3, r3, #30
 8005a6e:	d42c      	bmi.n	8005aca <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	1b09      	subs	r1, r1, r4
 8005a74:	4429      	add	r1, r5
 8005a76:	4620      	mov	r0, r4
 8005a78:	b289      	uxth	r1, r1
 8005a7a:	f7ff fb61 	bl	8005140 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005a7e:	4604      	mov	r4, r0
 8005a80:	bb18      	cbnz	r0, 8005aca <pbuf_realloc+0xae>
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <pbuf_realloc+0xc4>)
 8005a84:	491a      	ldr	r1, [pc, #104]	; (8005af0 <pbuf_realloc+0xd4>)
 8005a86:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <pbuf_realloc+0xcc>)
 8005a88:	f240 221d 	movw	r2, #541	; 0x21d
 8005a8c:	f004 f994 	bl	8009db8 <iprintf>
  q->len = rem_len;
 8005a90:	8164      	strh	r4, [r4, #10]
 8005a92:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8005a94:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005a96:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a9a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8005a9c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005a9e:	dd06      	ble.n	8005aae <pbuf_realloc+0x92>
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	f240 220b 	movw	r2, #523	; 0x20b
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	f004 f985 	bl	8009db8 <iprintf>
    q->tot_len += (u16_t)grow;
 8005aae:	8923      	ldrh	r3, [r4, #8]
 8005ab0:	4433      	add	r3, r6
 8005ab2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8005ab4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	d1cf      	bne.n	8005a5a <pbuf_realloc+0x3e>
 8005aba:	463b      	mov	r3, r7
 8005abc:	f240 220f 	movw	r2, #527	; 0x20f
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <pbuf_realloc+0xd8>)
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f004 f978 	bl	8009db8 <iprintf>
 8005ac8:	e7c7      	b.n	8005a5a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8005aca:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8005acc:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8005ace:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8005ad0:	b108      	cbz	r0, 8005ad6 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8005ad2:	f7ff fe5d 	bl	8005790 <pbuf_free>
  q->next = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	bf00      	nop
 8005ae0:	0800c6c1 	.word	0x0800c6c1
 8005ae4:	0800c71d 	.word	0x0800c71d
 8005ae8:	0800ace9 	.word	0x0800ace9
 8005aec:	0800c735 	.word	0x0800c735
 8005af0:	0800c779 	.word	0x0800c779
 8005af4:	0800c761 	.word	0x0800c761
 8005af8:	0800c750 	.word	0x0800c750

08005afc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005afc:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8005afe:	2200      	movs	r2, #0
 8005b00:	b290      	uxth	r0, r2
 8005b02:	3201      	adds	r2, #1
 8005b04:	b903      	cbnz	r3, 8005b08 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8005b06:	4770      	bx	lr
    p = p->next;
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	e7f9      	b.n	8005b00 <pbuf_clen+0x4>

08005b0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005b0c:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8005b0e:	4604      	mov	r4, r0
 8005b10:	b188      	cbz	r0, 8005b36 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 8005b12:	f003 fcc3 	bl	800949c <sys_arch_protect>
 8005b16:	89e3      	ldrh	r3, [r4, #14]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	81e3      	strh	r3, [r4, #14]
 8005b1c:	f003 fcca 	bl	80094b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005b20:	89e3      	ldrh	r3, [r4, #14]
 8005b22:	b943      	cbnz	r3, 8005b36 <pbuf_ref+0x2a>
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <pbuf_ref+0x2c>)
 8005b26:	4905      	ldr	r1, [pc, #20]	; (8005b3c <pbuf_ref+0x30>)
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <pbuf_ref+0x34>)
 8005b2a:	f240 3239 	movw	r2, #825	; 0x339
  }
}
 8005b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005b32:	f004 b941 	b.w	8009db8 <iprintf>
 8005b36:	bd10      	pop	{r4, pc}
 8005b38:	0800c6c1 	.word	0x0800c6c1
 8005b3c:	0800c795 	.word	0x0800c795
 8005b40:	0800ace9 	.word	0x0800ace9

08005b44 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005b48:	4604      	mov	r4, r0
 8005b4a:	b100      	cbz	r0, 8005b4e <pbuf_cat+0xa>
 8005b4c:	b969      	cbnz	r1, 8005b6a <pbuf_cat+0x26>
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <pbuf_cat+0x60>)
 8005b50:	4915      	ldr	r1, [pc, #84]	; (8005ba8 <pbuf_cat+0x64>)
 8005b52:	4816      	ldr	r0, [pc, #88]	; (8005bac <pbuf_cat+0x68>)
 8005b54:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005b5c:	f004 b92c 	b.w	8009db8 <iprintf>
    p->tot_len += t->tot_len;
 8005b60:	8923      	ldrh	r3, [r4, #8]
 8005b62:	8929      	ldrh	r1, [r5, #8]
 8005b64:	440b      	add	r3, r1
 8005b66:	8123      	strh	r3, [r4, #8]
 8005b68:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	d1f7      	bne.n	8005b60 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005b70:	8922      	ldrh	r2, [r4, #8]
 8005b72:	8963      	ldrh	r3, [r4, #10]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d006      	beq.n	8005b86 <pbuf_cat+0x42>
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <pbuf_cat+0x60>)
 8005b7a:	490d      	ldr	r1, [pc, #52]	; (8005bb0 <pbuf_cat+0x6c>)
 8005b7c:	480b      	ldr	r0, [pc, #44]	; (8005bac <pbuf_cat+0x68>)
 8005b7e:	f240 3255 	movw	r2, #853	; 0x355
 8005b82:	f004 f919 	bl	8009db8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	b133      	cbz	r3, 8005b98 <pbuf_cat+0x54>
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <pbuf_cat+0x60>)
 8005b8c:	4909      	ldr	r1, [pc, #36]	; (8005bb4 <pbuf_cat+0x70>)
 8005b8e:	4807      	ldr	r0, [pc, #28]	; (8005bac <pbuf_cat+0x68>)
 8005b90:	f240 3256 	movw	r2, #854	; 0x356
 8005b94:	f004 f910 	bl	8009db8 <iprintf>
  p->tot_len += t->tot_len;
 8005b98:	892a      	ldrh	r2, [r5, #8]
 8005b9a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8005b9c:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8005b9e:	4413      	add	r3, r2
 8005ba0:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	0800c6c1 	.word	0x0800c6c1
 8005ba8:	0800c528 	.word	0x0800c528
 8005bac:	0800ace9 	.word	0x0800ace9
 8005bb0:	0800c55d 	.word	0x0800c55d
 8005bb4:	0800c58a 	.word	0x0800c58a

08005bb8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	b120      	cbz	r0, 8005bcc <pbuf_copy+0x14>
 8005bc2:	b119      	cbz	r1, 8005bcc <pbuf_copy+0x14>
 8005bc4:	8902      	ldrh	r2, [r0, #8]
 8005bc6:	890b      	ldrh	r3, [r1, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d20a      	bcs.n	8005be2 <pbuf_copy+0x2a>
 8005bcc:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <pbuf_copy+0xf8>)
 8005bce:	4939      	ldr	r1, [pc, #228]	; (8005cb4 <pbuf_copy+0xfc>)
 8005bd0:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005bd4:	4838      	ldr	r0, [pc, #224]	; (8005cb8 <pbuf_copy+0x100>)
 8005bd6:	f004 f8ef 	bl	8009db8 <iprintf>
 8005bda:	f06f 000f 	mvn.w	r0, #15
 8005bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005be6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005cb0 <pbuf_copy+0xf8>
 8005bea:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8005cc8 <pbuf_copy+0x110>
 8005bee:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005cb8 <pbuf_copy+0x100>
 8005bf2:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005bf4:	896e      	ldrh	r6, [r5, #10]
 8005bf6:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005bf8:	6868      	ldr	r0, [r5, #4]
 8005bfa:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005bfc:	1bf6      	subs	r6, r6, r7
 8005bfe:	eba3 030b 	sub.w	r3, r3, fp
 8005c02:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8005c04:	bfac      	ite	ge
 8005c06:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8005c08:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	4459      	add	r1, fp
 8005c0e:	4438      	add	r0, r7
 8005c10:	f004 f8bf 	bl	8009d92 <memcpy>
    offset_to += len;
 8005c14:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c16:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8005c18:	b2bf      	uxth	r7, r7
    offset_from += len;
 8005c1a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c1c:	42bb      	cmp	r3, r7
    offset_from += len;
 8005c1e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c22:	d206      	bcs.n	8005c32 <pbuf_copy+0x7a>
 8005c24:	4643      	mov	r3, r8
 8005c26:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f004 f8c3 	bl	8009db8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005c32:	8963      	ldrh	r3, [r4, #10]
 8005c34:	455b      	cmp	r3, fp
 8005c36:	d206      	bcs.n	8005c46 <pbuf_copy+0x8e>
 8005c38:	4643      	mov	r3, r8
 8005c3a:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005c3e:	491f      	ldr	r1, [pc, #124]	; (8005cbc <pbuf_copy+0x104>)
 8005c40:	4648      	mov	r0, r9
 8005c42:	f004 f8b9 	bl	8009db8 <iprintf>
    if (offset_from >= p_from->len) {
 8005c46:	8963      	ldrh	r3, [r4, #10]
 8005c48:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8005c4a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8005c4c:	bf9c      	itt	ls
 8005c4e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8005c50:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8005c54:	42bb      	cmp	r3, r7
 8005c56:	d11e      	bne.n	8005c96 <pbuf_copy+0xde>
      p_to = p_to->next;
 8005c58:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005c5a:	b9dd      	cbnz	r5, 8005c94 <pbuf_copy+0xdc>
 8005c5c:	b1bc      	cbz	r4, 8005c8e <pbuf_copy+0xd6>
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <pbuf_copy+0xf8>)
 8005c60:	4917      	ldr	r1, [pc, #92]	; (8005cc0 <pbuf_copy+0x108>)
 8005c62:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005c66:	e7b5      	b.n	8005bd4 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c68:	8962      	ldrh	r2, [r4, #10]
 8005c6a:	8923      	ldrh	r3, [r4, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d114      	bne.n	8005c9a <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	b193      	cbz	r3, 8005c9a <pbuf_copy+0xe2>
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <pbuf_copy+0xf8>)
 8005c76:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c7a:	4912      	ldr	r1, [pc, #72]	; (8005cc4 <pbuf_copy+0x10c>)
 8005c7c:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <pbuf_copy+0x100>)
 8005c7e:	f004 f89b 	bl	8009db8 <iprintf>
 8005c82:	f06f 0005 	mvn.w	r0, #5
 8005c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d1b2      	bne.n	8005bf4 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005c8e:	4620      	mov	r0, r4
 8005c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8005c94:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	d1e6      	bne.n	8005c68 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005c9a:	896a      	ldrh	r2, [r5, #10]
 8005c9c:	892b      	ldrh	r3, [r5, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d1f3      	bne.n	8005c8a <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <pbuf_copy+0xd2>
 8005ca8:	4b01      	ldr	r3, [pc, #4]	; (8005cb0 <pbuf_copy+0xf8>)
 8005caa:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005cae:	e7e4      	b.n	8005c7a <pbuf_copy+0xc2>
 8005cb0:	0800c6c1 	.word	0x0800c6c1
 8005cb4:	0800c59a 	.word	0x0800c59a
 8005cb8:	0800ace9 	.word	0x0800ace9
 8005cbc:	0800c5e1 	.word	0x0800c5e1
 8005cc0:	0800c5fc 	.word	0x0800c5fc
 8005cc4:	0800c609 	.word	0x0800c609
 8005cc8:	0800c5ca 	.word	0x0800c5ca

08005ccc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	b950      	cbnz	r0, 8005cee <pbuf_copy_partial+0x22>
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <pbuf_copy_partial+0x7c>)
 8005cda:	491c      	ldr	r1, [pc, #112]	; (8005d4c <pbuf_copy_partial+0x80>)
 8005cdc:	481c      	ldr	r0, [pc, #112]	; (8005d50 <pbuf_copy_partial+0x84>)
 8005cde:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005ce2:	f004 f869 	bl	8009db8 <iprintf>
 8005ce6:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8005ce8:	4628      	mov	r0, r5
 8005cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005cee:	b169      	cbz	r1, 8005d0c <pbuf_copy_partial+0x40>
 8005cf0:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005cf2:	f1b8 0f00 	cmp.w	r8, #0
 8005cf6:	d0f7      	beq.n	8005ce8 <pbuf_copy_partial+0x1c>
 8005cf8:	2e00      	cmp	r6, #0
 8005cfa:	d0f5      	beq.n	8005ce8 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8005cfc:	b17b      	cbz	r3, 8005d1e <pbuf_copy_partial+0x52>
 8005cfe:	8971      	ldrh	r1, [r6, #10]
 8005d00:	428b      	cmp	r3, r1
 8005d02:	d30c      	bcc.n	8005d1e <pbuf_copy_partial+0x52>
      offset -= p->len;
 8005d04:	1a5b      	subs	r3, r3, r1
 8005d06:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d08:	6836      	ldr	r6, [r6, #0]
 8005d0a:	e7f2      	b.n	8005cf2 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <pbuf_copy_partial+0x7c>)
 8005d0e:	4911      	ldr	r1, [pc, #68]	; (8005d54 <pbuf_copy_partial+0x88>)
 8005d10:	480f      	ldr	r0, [pc, #60]	; (8005d50 <pbuf_copy_partial+0x84>)
 8005d12:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005d16:	f004 f84f 	bl	8009db8 <iprintf>
 8005d1a:	463d      	mov	r5, r7
 8005d1c:	e7e4      	b.n	8005ce8 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8005d1e:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005d20:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8005d22:	1ae4      	subs	r4, r4, r3
 8005d24:	b2a4      	uxth	r4, r4
 8005d26:	4544      	cmp	r4, r8
 8005d28:	bf28      	it	cs
 8005d2a:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4419      	add	r1, r3
 8005d30:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8005d32:	4425      	add	r5, r4
      len -= buf_copy_len;
 8005d34:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005d38:	f004 f82b 	bl	8009d92 <memcpy>
      copied_total += buf_copy_len;
 8005d3c:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8005d3e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e7e0      	b.n	8005d08 <pbuf_copy_partial+0x3c>
 8005d46:	bf00      	nop
 8005d48:	0800c6c1 	.word	0x0800c6c1
 8005d4c:	0800c633 	.word	0x0800c633
 8005d50:	0800ace9 	.word	0x0800ace9
 8005d54:	0800c652 	.word	0x0800c652

08005d58 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005d58:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <tcp_new_port+0x48>)
 8005d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5c:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005d5e:	4e11      	ldr	r6, [pc, #68]	; (8005da4 <tcp_new_port+0x4c>)
{
 8005d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8005d64:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005d68:	42a8      	cmp	r0, r5
 8005d6a:	bf1a      	itte	ne
 8005d6c:	3001      	addne	r0, #1
 8005d6e:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005d70:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8005d74:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005d76:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8005d7a:	6824      	ldr	r4, [r4, #0]
 8005d7c:	b924      	cbnz	r4, 8005d88 <tcp_new_port+0x30>
 8005d7e:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005d80:	2904      	cmp	r1, #4
 8005d82:	d1f8      	bne.n	8005d76 <tcp_new_port+0x1e>
 8005d84:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8005d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8005d88:	8ae7      	ldrh	r7, [r4, #22]
 8005d8a:	4287      	cmp	r7, r0
 8005d8c:	d106      	bne.n	8005d9c <tcp_new_port+0x44>
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e8      	bne.n	8005d68 <tcp_new_port+0x10>
 8005d96:	8010      	strh	r0, [r2, #0]
          return 0;
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005d9c:	68e4      	ldr	r4, [r4, #12]
 8005d9e:	e7ed      	b.n	8005d7c <tcp_new_port+0x24>
 8005da0:	20000010 	.word	0x20000010
 8005da4:	0800c8b8 	.word	0x0800c8b8

08005da8 <tcp_close_shutdown_fin>:
{
 8005da8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005daa:	4604      	mov	r4, r0
 8005dac:	b930      	cbnz	r0, 8005dbc <tcp_close_shutdown_fin+0x14>
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <tcp_close_shutdown_fin+0x54>)
 8005db0:	4913      	ldr	r1, [pc, #76]	; (8005e00 <tcp_close_shutdown_fin+0x58>)
 8005db2:	4814      	ldr	r0, [pc, #80]	; (8005e04 <tcp_close_shutdown_fin+0x5c>)
 8005db4:	f240 124d 	movw	r2, #333	; 0x14d
 8005db8:	f003 fffe 	bl	8009db8 <iprintf>
  switch (pcb->state) {
 8005dbc:	7d23      	ldrb	r3, [r4, #20]
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d003      	beq.n	8005dca <tcp_close_shutdown_fin+0x22>
 8005dc2:	2b07      	cmp	r3, #7
 8005dc4:	d00c      	beq.n	8005de0 <tcp_close_shutdown_fin+0x38>
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d108      	bne.n	8005ddc <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f002 fd7e 	bl	80088cc <tcp_send_fin>
    if (err == ERR_OK) {
 8005dd0:	b988      	cbnz	r0, 8005df6 <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 8005dd2:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 8005dd4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f002 fdd0 	bl	800897c <tcp_output>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f002 fd73 	bl	80088cc <tcp_send_fin>
    if (err == ERR_OK) {
 8005de6:	b930      	cbnz	r0, 8005df6 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8005de8:	2309      	movs	r3, #9
 8005dea:	e7f3      	b.n	8005dd4 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8005dec:	7ea3      	ldrb	r3, [r4, #26]
 8005dee:	f043 0308 	orr.w	r3, r3, #8
 8005df2:	76a3      	strb	r3, [r4, #26]
 8005df4:	e7f2      	b.n	8005ddc <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d0f8      	beq.n	8005dec <tcp_close_shutdown_fin+0x44>
}
 8005dfa:	bd10      	pop	{r4, pc}
 8005dfc:	0800c826 	.word	0x0800c826
 8005e00:	0800c855 	.word	0x0800c855
 8005e04:	0800ace9 	.word	0x0800ace9

08005e08 <tcp_init>:
{
 8005e08:	4770      	bx	lr
	...

08005e0c <tcp_bind>:
{
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8005e0e:	4d1e      	ldr	r5, [pc, #120]	; (8005e88 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005e10:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8005e12:	2900      	cmp	r1, #0
 8005e14:	bf18      	it	ne
 8005e16:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005e18:	b140      	cbz	r0, 8005e2c <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005e1a:	7d03      	ldrb	r3, [r0, #20]
 8005e1c:	b14b      	cbz	r3, 8005e32 <tcp_bind+0x26>
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <tcp_bind+0x80>)
 8005e20:	491b      	ldr	r1, [pc, #108]	; (8005e90 <tcp_bind+0x84>)
 8005e22:	481c      	ldr	r0, [pc, #112]	; (8005e94 <tcp_bind+0x88>)
 8005e24:	f44f 7211 	mov.w	r2, #580	; 0x244
 8005e28:	f003 ffc6 	bl	8009db8 <iprintf>
    return ERR_VAL;
 8005e2c:	f06f 0005 	mvn.w	r0, #5
}
 8005e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8005e32:	b932      	cbnz	r2, 8005e42 <tcp_bind+0x36>
    port = tcp_new_port();
 8005e34:	f7ff ff90 	bl	8005d58 <tcp_new_port>
    if (port == 0) {
 8005e38:	4602      	mov	r2, r0
 8005e3a:	b950      	cbnz	r0, 8005e52 <tcp_bind+0x46>
      return ERR_BUF;
 8005e3c:	f06f 0001 	mvn.w	r0, #1
 8005e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005e42:	4f15      	ldr	r7, [pc, #84]	; (8005e98 <tcp_bind+0x8c>)
 8005e44:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8005e48:	6808      	ldr	r0, [r1, #0]
 8005e4a:	b970      	cbnz	r0, 8005e6a <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d1f8      	bne.n	8005e44 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	b103      	cbz	r3, 8005e58 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005e56:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005e58:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <tcp_bind+0x90>)
  pcb->local_port = port;
 8005e5a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	60e2      	str	r2, [r4, #12]
 8005e60:	601c      	str	r4, [r3, #0]
 8005e62:	f003 f8ab 	bl	8008fbc <tcp_timer_needed>
  return ERR_OK;
 8005e66:	2000      	movs	r0, #0
 8005e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8005e6a:	8ac1      	ldrh	r1, [r0, #22]
 8005e6c:	4291      	cmp	r1, r2
 8005e6e:	d105      	bne.n	8005e7c <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005e70:	6806      	ldr	r6, [r0, #0]
 8005e72:	b12e      	cbz	r6, 8005e80 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8005e74:	6829      	ldr	r1, [r5, #0]
 8005e76:	b119      	cbz	r1, 8005e80 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005e78:	428e      	cmp	r6, r1
 8005e7a:	d001      	beq.n	8005e80 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005e7c:	68c0      	ldr	r0, [r0, #12]
 8005e7e:	e7e4      	b.n	8005e4a <tcp_bind+0x3e>
              return ERR_USE;
 8005e80:	f06f 0007 	mvn.w	r0, #7
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	bf00      	nop
 8005e88:	0800bf1c 	.word	0x0800bf1c
 8005e8c:	0800c826 	.word	0x0800c826
 8005e90:	0800c7e5 	.word	0x0800c7e5
 8005e94:	0800ace9 	.word	0x0800ace9
 8005e98:	0800c8b8 	.word	0x0800c8b8
 8005e9c:	20007d34 	.word	0x20007d34

08005ea0 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005ea0:	7d03      	ldrb	r3, [r0, #20]
{
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005ea8:	b16b      	cbz	r3, 8005ec6 <tcp_listen_with_backlog_and_err+0x26>
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <tcp_listen_with_backlog_and_err+0x98>)
 8005eac:	4923      	ldr	r1, [pc, #140]	; (8005f3c <tcp_listen_with_backlog_and_err+0x9c>)
 8005eae:	4824      	ldr	r0, [pc, #144]	; (8005f40 <tcp_listen_with_backlog_and_err+0xa0>)
 8005eb0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8005eb4:	f003 ff80 	bl	8009db8 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8005eb8:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005eba:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8005ebe:	b106      	cbz	r6, 8005ec2 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8005ec0:	7033      	strb	r3, [r6, #0]
}
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005ec6:	2002      	movs	r0, #2
 8005ec8:	f7ff fac0 	bl	800544c <memp_malloc>
  if (lpcb == NULL) {
 8005ecc:	4604      	mov	r4, r0
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d02f      	beq.n	8005f32 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 8005ed2:	692b      	ldr	r3, [r5, #16]
 8005ed4:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 8005ed6:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8005ed8:	8aeb      	ldrh	r3, [r5, #22]
 8005eda:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8005edc:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8005ede:	7d6a      	ldrb	r2, [r5, #21]
 8005ee0:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8005ee2:	7a2a      	ldrb	r2, [r5, #8]
 8005ee4:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8005ee6:	7aaa      	ldrb	r2, [r5, #10]
 8005ee8:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8005eea:	7a6a      	ldrb	r2, [r5, #9]
 8005eec:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005eee:	682a      	ldr	r2, [r5, #0]
 8005ef0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8005ef2:	b13b      	cbz	r3, 8005f04 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ef4:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <tcp_listen_with_backlog_and_err+0xa4>)
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	429d      	cmp	r5, r3
 8005efa:	d112      	bne.n	8005f22 <tcp_listen_with_backlog_and_err+0x82>
 8005efc:	68eb      	ldr	r3, [r5, #12]
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8005f04:	4629      	mov	r1, r5
 8005f06:	2001      	movs	r0, #1
 8005f08:	f7ff fabc 	bl	8005484 <memp_free>
  lpcb->accept = tcp_accept_null;
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <tcp_listen_with_backlog_and_err+0xa8>)
 8005f0e:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <tcp_listen_with_backlog_and_err+0xac>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	60e2      	str	r2, [r4, #12]
 8005f16:	601c      	str	r4, [r3, #0]
 8005f18:	f003 f850 	bl	8008fbc <tcp_timer_needed>
  res = ERR_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e7ce      	b.n	8005ebe <tcp_listen_with_backlog_and_err+0x1e>
 8005f20:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0ec      	beq.n	8005f00 <tcp_listen_with_backlog_and_err+0x60>
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	4295      	cmp	r5, r2
 8005f2a:	d1f9      	bne.n	8005f20 <tcp_listen_with_backlog_and_err+0x80>
 8005f2c:	68ea      	ldr	r2, [r5, #12]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	e7e6      	b.n	8005f00 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e7c2      	b.n	8005ebe <tcp_listen_with_backlog_and_err+0x1e>
 8005f38:	0800c826 	.word	0x0800c826
 8005f3c:	0800c895 	.word	0x0800c895
 8005f40:	0800ace9 	.word	0x0800ace9
 8005f44:	20007d34 	.word	0x20007d34
 8005f48:	0800697f 	.word	0x0800697f
 8005f4c:	20007d30 	.word	0x20007d30

08005f50 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005f50:	2200      	movs	r2, #0
 8005f52:	f7ff bfa5 	b.w	8005ea0 <tcp_listen_with_backlog_and_err>
	...

08005f58 <tcp_update_rcv_ann_wnd>:
{
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005f5c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005f60:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f64:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005f66:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005f6a:	4428      	add	r0, r5
 8005f6c:	bf94      	ite	ls
 8005f6e:	1a82      	subls	r2, r0, r2
 8005f70:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8005f74:	2a00      	cmp	r2, #0
 8005f76:	db01      	blt.n	8005f7c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005f78:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005f7c:	1aea      	subs	r2, r5, r3
 8005f7e:	2a00      	cmp	r2, #0
 8005f80:	dd02      	ble.n	8005f88 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8005f82:	2000      	movs	r0, #0
 8005f84:	8560      	strh	r0, [r4, #42]	; 0x2a
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005f88:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005f8a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005f8e:	d306      	bcc.n	8005f9e <tcp_update_rcv_ann_wnd+0x46>
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <tcp_update_rcv_ann_wnd+0x4c>)
 8005f92:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <tcp_update_rcv_ann_wnd+0x50>)
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <tcp_update_rcv_ann_wnd+0x54>)
 8005f96:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005f9a:	f003 ff0d 	bl	8009db8 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005f9e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8005fa0:	2000      	movs	r0, #0
}
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	0800c826 	.word	0x0800c826
 8005fa8:	0800cb1c 	.word	0x0800cb1c
 8005fac:	0800ace9 	.word	0x0800ace9

08005fb0 <tcp_recved>:
{
 8005fb0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005fb2:	7d03      	ldrb	r3, [r0, #20]
 8005fb4:	2b01      	cmp	r3, #1
{
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005fba:	d106      	bne.n	8005fca <tcp_recved+0x1a>
 8005fbc:	4b17      	ldr	r3, [pc, #92]	; (800601c <tcp_recved+0x6c>)
 8005fbe:	4918      	ldr	r1, [pc, #96]	; (8006020 <tcp_recved+0x70>)
 8005fc0:	4818      	ldr	r0, [pc, #96]	; (8006024 <tcp_recved+0x74>)
 8005fc2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005fc6:	f003 fef7 	bl	8009db8 <iprintf>
  pcb->rcv_wnd += len;
 8005fca:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005fcc:	4429      	add	r1, r5
 8005fce:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005fd0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8005fd4:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005fd6:	d911      	bls.n	8005ffc <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005fd8:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005fdc:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff ffba 	bl	8005f58 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005fe4:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005fe8:	db17      	blt.n	800601a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8005fea:	7ea3      	ldrb	r3, [r4, #26]
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005ff2:	4620      	mov	r0, r4
}
 8005ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8005ff8:	f002 bcc0 	b.w	800897c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d1ee      	bne.n	8005fde <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006000:	7d23      	ldrb	r3, [r4, #20]
 8006002:	2b07      	cmp	r3, #7
 8006004:	d0e8      	beq.n	8005fd8 <tcp_recved+0x28>
 8006006:	2b09      	cmp	r3, #9
 8006008:	d0e6      	beq.n	8005fd8 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <tcp_recved+0x6c>)
 800600c:	4906      	ldr	r1, [pc, #24]	; (8006028 <tcp_recved+0x78>)
 800600e:	4805      	ldr	r0, [pc, #20]	; (8006024 <tcp_recved+0x74>)
 8006010:	f240 322d 	movw	r2, #813	; 0x32d
 8006014:	f003 fed0 	bl	8009db8 <iprintf>
 8006018:	e7e1      	b.n	8005fde <tcp_recved+0x2e>
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	0800c826 	.word	0x0800c826
 8006020:	0800c95c 	.word	0x0800c95c
 8006024:	0800ace9 	.word	0x0800ace9
 8006028:	0800c982 	.word	0x0800c982

0800602c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800602c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800602e:	4604      	mov	r4, r0
 8006030:	b148      	cbz	r0, 8006046 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8006032:	6840      	ldr	r0, [r0, #4]
 8006034:	b108      	cbz	r0, 800603a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006036:	f7ff fbab 	bl	8005790 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800603a:	4621      	mov	r1, r4
 800603c:	2003      	movs	r0, #3
  }
}
 800603e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8006042:	f7ff ba1f 	b.w	8005484 <memp_free>
 8006046:	bd10      	pop	{r4, pc}

08006048 <tcp_segs_free>:
{
 8006048:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800604a:	b900      	cbnz	r0, 800604e <tcp_segs_free+0x6>
}
 800604c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800604e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006050:	f7ff ffec 	bl	800602c <tcp_seg_free>
    seg = next;
 8006054:	4620      	mov	r0, r4
 8006056:	e7f8      	b.n	800604a <tcp_segs_free+0x2>

08006058 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8006058:	7541      	strb	r1, [r0, #21]
 800605a:	4770      	bx	lr

0800605c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006060:	2003      	movs	r0, #3
 8006062:	f7ff f9f3 	bl	800544c <memp_malloc>
  if (cseg == NULL) {
 8006066:	4605      	mov	r5, r0
 8006068:	b160      	cbz	r0, 8006084 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800606a:	4620      	mov	r0, r4
 800606c:	462b      	mov	r3, r5
 800606e:	f104 0210 	add.w	r2, r4, #16
 8006072:	f850 1b04 	ldr.w	r1, [r0], #4
 8006076:	f843 1b04 	str.w	r1, [r3], #4
 800607a:	4290      	cmp	r0, r2
 800607c:	d1f9      	bne.n	8006072 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800607e:	6868      	ldr	r0, [r5, #4]
 8006080:	f7ff fd44 	bl	8005b0c <pbuf_ref>
  return cseg;
}
 8006084:	4628      	mov	r0, r5
 8006086:	bd38      	pop	{r3, r4, r5, pc}

08006088 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006088:	b100      	cbz	r0, 800608c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800608a:	6101      	str	r1, [r0, #16]
 800608c:	4770      	bx	lr
	...

08006090 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006094:	4604      	mov	r4, r0
 8006096:	b158      	cbz	r0, 80060b0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006098:	7d03      	ldrb	r3, [r0, #20]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d106      	bne.n	80060ac <tcp_recv+0x1c>
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <tcp_recv+0x24>)
 80060a0:	4905      	ldr	r1, [pc, #20]	; (80060b8 <tcp_recv+0x28>)
 80060a2:	4806      	ldr	r0, [pc, #24]	; (80060bc <tcp_recv+0x2c>)
 80060a4:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80060a8:	f003 fe86 	bl	8009db8 <iprintf>
    pcb->recv = recv;
 80060ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	bf00      	nop
 80060b4:	0800c826 	.word	0x0800c826
 80060b8:	0800c935 	.word	0x0800c935
 80060bc:	0800ace9 	.word	0x0800ace9

080060c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80060c4:	4604      	mov	r4, r0
 80060c6:	b150      	cbz	r0, 80060de <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80060c8:	7d03      	ldrb	r3, [r0, #20]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d106      	bne.n	80060dc <tcp_sent+0x1c>
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <tcp_sent+0x20>)
 80060d0:	4904      	ldr	r1, [pc, #16]	; (80060e4 <tcp_sent+0x24>)
 80060d2:	4805      	ldr	r0, [pc, #20]	; (80060e8 <tcp_sent+0x28>)
 80060d4:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80060d8:	f003 fe6e 	bl	8009db8 <iprintf>
    pcb->sent = sent;
 80060dc:	67e5      	str	r5, [r4, #124]	; 0x7c
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	0800c826 	.word	0x0800c826
 80060e4:	0800c9a3 	.word	0x0800c9a3
 80060e8:	0800ace9 	.word	0x0800ace9

080060ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80060f0:	4604      	mov	r4, r0
 80060f2:	b158      	cbz	r0, 800610c <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80060f4:	7d03      	ldrb	r3, [r0, #20]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d106      	bne.n	8006108 <tcp_err+0x1c>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <tcp_err+0x24>)
 80060fc:	4905      	ldr	r1, [pc, #20]	; (8006114 <tcp_err+0x28>)
 80060fe:	4806      	ldr	r0, [pc, #24]	; (8006118 <tcp_err+0x2c>)
 8006100:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006104:	f003 fe58 	bl	8009db8 <iprintf>
    pcb->errf = err;
 8006108:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	0800c826 	.word	0x0800c826
 8006114:	0800c861 	.word	0x0800c861
 8006118:	0800ace9 	.word	0x0800ace9

0800611c <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800611c:	b118      	cbz	r0, 8006126 <tcp_accept+0xa>
 800611e:	7d03      	ldrb	r3, [r0, #20]
 8006120:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8006122:	bf08      	it	eq
 8006124:	6181      	streq	r1, [r0, #24]
 8006126:	4770      	bx	lr

08006128 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006128:	7d03      	ldrb	r3, [r0, #20]
 800612a:	2b01      	cmp	r3, #1
{
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4604      	mov	r4, r0
 8006130:	460e      	mov	r6, r1
 8006132:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006134:	d106      	bne.n	8006144 <tcp_poll+0x1c>
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <tcp_poll+0x24>)
 8006138:	4905      	ldr	r1, [pc, #20]	; (8006150 <tcp_poll+0x28>)
 800613a:	4806      	ldr	r0, [pc, #24]	; (8006154 <tcp_poll+0x2c>)
 800613c:	f240 7203 	movw	r2, #1795	; 0x703
 8006140:	f003 fe3a 	bl	8009db8 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006144:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8006146:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	0800c826 	.word	0x0800c826
 8006150:	0800c917 	.word	0x0800c917
 8006154:	0800ace9 	.word	0x0800ace9

08006158 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006158:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800615a:	7d03      	ldrb	r3, [r0, #20]
 800615c:	2b01      	cmp	r3, #1
{
 800615e:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8006160:	d919      	bls.n	8006196 <tcp_pcb_purge+0x3e>
 8006162:	2b0a      	cmp	r3, #10
 8006164:	d017      	beq.n	8006196 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006166:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006168:	b118      	cbz	r0, 8006172 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800616a:	f7ff fb11 	bl	8005790 <pbuf_free>
      pcb->refused_data = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006172:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006174:	f7ff ff68 	bl	8006048 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006178:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800617a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800617e:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006180:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8006182:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8006184:	f7ff ff60 	bl	8006048 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006188:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800618a:	f7ff ff5d 	bl	8006048 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800618e:	66a5      	str	r5, [r4, #104]	; 0x68
 8006190:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006192:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8006196:	bd38      	pop	{r3, r4, r5, pc}

08006198 <tcp_slowtmr>:
{
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800619c:	4eb0      	ldr	r6, [pc, #704]	; (8006460 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 800619e:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8006494 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 80061a2:	6833      	ldr	r3, [r6, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80061a8:	4bae      	ldr	r3, [pc, #696]	; (8006464 <tcp_slowtmr+0x2cc>)
 80061aa:	781a      	ldrb	r2, [r3, #0]
{
 80061ac:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 80061ae:	3201      	adds	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 80061b4:	4fac      	ldr	r7, [pc, #688]	; (8006468 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80061b6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8006498 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 80061ba:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 80061bc:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80061c0:	b96c      	cbnz	r4, 80061de <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80061c2:	4faa      	ldr	r7, [pc, #680]	; (800646c <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80061c4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006498 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80061c8:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80061ca:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 800649c <tcp_slowtmr+0x304>
 80061ce:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006474 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	f040 8185 	bne.w	80064e2 <tcp_slowtmr+0x34a>
}
 80061d8:	b005      	add	sp, #20
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80061de:	7d23      	ldrb	r3, [r4, #20]
 80061e0:	b933      	cbnz	r3, 80061f0 <tcp_slowtmr+0x58>
 80061e2:	464b      	mov	r3, r9
 80061e4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80061e8:	49a1      	ldr	r1, [pc, #644]	; (8006470 <tcp_slowtmr+0x2d8>)
 80061ea:	48a2      	ldr	r0, [pc, #648]	; (8006474 <tcp_slowtmr+0x2dc>)
 80061ec:	f003 fde4 	bl	8009db8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80061f0:	7d23      	ldrb	r3, [r4, #20]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d106      	bne.n	8006204 <tcp_slowtmr+0x6c>
 80061f6:	464b      	mov	r3, r9
 80061f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80061fc:	499e      	ldr	r1, [pc, #632]	; (8006478 <tcp_slowtmr+0x2e0>)
 80061fe:	489d      	ldr	r0, [pc, #628]	; (8006474 <tcp_slowtmr+0x2dc>)
 8006200:	f003 fdda 	bl	8009db8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006204:	7d23      	ldrb	r3, [r4, #20]
 8006206:	2b0a      	cmp	r3, #10
 8006208:	d106      	bne.n	8006218 <tcp_slowtmr+0x80>
 800620a:	464b      	mov	r3, r9
 800620c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006210:	499a      	ldr	r1, [pc, #616]	; (800647c <tcp_slowtmr+0x2e4>)
 8006212:	4898      	ldr	r0, [pc, #608]	; (8006474 <tcp_slowtmr+0x2dc>)
 8006214:	f003 fdd0 	bl	8009db8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	7f62      	ldrb	r2, [r4, #29]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d104      	bne.n	800622c <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006222:	68e5      	ldr	r5, [r4, #12]
 8006224:	4644      	mov	r4, r8
      continue;
 8006226:	46a0      	mov	r8, r4
 8006228:	462c      	mov	r4, r5
 800622a:	e7c9      	b.n	80061c0 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800622c:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800622e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006230:	2902      	cmp	r1, #2
 8006232:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006236:	d102      	bne.n	800623e <tcp_slowtmr+0xa6>
 8006238:	2a05      	cmp	r2, #5
 800623a:	f200 80e6 	bhi.w	800640a <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800623e:	2a0b      	cmp	r2, #11
 8006240:	f200 80e3 	bhi.w	800640a <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8006244:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006248:	f1bb 0f00 	cmp.w	fp, #0
 800624c:	f000 80a6 	beq.w	800639c <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006250:	488b      	ldr	r0, [pc, #556]	; (8006480 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8006252:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006256:	4483      	add	fp, r0
 8006258:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800625c:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800625e:	bf84      	itt	hi
 8006260:	3301      	addhi	r3, #1
 8006262:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006266:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800626a:	4293      	cmp	r3, r2
 800626c:	f080 8085 	bcs.w	800637a <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8006270:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006274:	7d23      	ldrb	r3, [r4, #20]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d10b      	bne.n	8006292 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 800627a:	7ea2      	ldrb	r2, [r4, #26]
 800627c:	06d2      	lsls	r2, r2, #27
 800627e:	d508      	bpl.n	8006292 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006280:	6832      	ldr	r2, [r6, #0]
 8006282:	6a21      	ldr	r1, [r4, #32]
 8006284:	1a52      	subs	r2, r2, r1
 8006286:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006288:	bf84      	itt	hi
 800628a:	f10b 0b01 	addhi.w	fp, fp, #1
 800628e:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006292:	7a25      	ldrb	r5, [r4, #8]
 8006294:	f015 0508 	ands.w	r5, r5, #8
 8006298:	d019      	beq.n	80062ce <tcp_slowtmr+0x136>
 800629a:	2b04      	cmp	r3, #4
 800629c:	d002      	beq.n	80062a4 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 800629e:	2b07      	cmp	r3, #7
 80062a0:	f040 80c8 	bne.w	8006434 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062a4:	6831      	ldr	r1, [r6, #0]
 80062a6:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80062a8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062ac:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80062ae:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80062b2:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80062b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062ba:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062be:	4291      	cmp	r1, r2
 80062c0:	f240 80a6 	bls.w	8006410 <tcp_slowtmr+0x278>
        ++pcb_remove;
 80062c4:	f10b 0b01 	add.w	fp, fp, #1
 80062c8:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80062cc:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80062ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80062d0:	b168      	cbz	r0, 80062ee <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	6a22      	ldr	r2, [r4, #32]
 80062d6:	1a9a      	subs	r2, r3, r2
 80062d8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80062dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80062e0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80062e4:	d303      	bcc.n	80062ee <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 80062e6:	f7ff feaf 	bl	8006048 <tcp_segs_free>
      pcb->ooseq = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80062ee:	7d23      	ldrb	r3, [r4, #20]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	f040 80a1 	bne.w	8006438 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062f6:	6833      	ldr	r3, [r6, #0]
 80062f8:	6a22      	ldr	r2, [r4, #32]
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80062fe:	d803      	bhi.n	8006308 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8006300:	f1bb 0f00 	cmp.w	fp, #0
 8006304:	f000 80cc 	beq.w	80064a0 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8006308:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800630a:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800630e:	f7ff ff23 	bl	8006158 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006312:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006314:	f1b8 0f00 	cmp.w	r8, #0
 8006318:	f000 8096 	beq.w	8006448 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800631c:	429c      	cmp	r4, r3
 800631e:	d106      	bne.n	800632e <tcp_slowtmr+0x196>
 8006320:	464b      	mov	r3, r9
 8006322:	f240 4289 	movw	r2, #1161	; 0x489
 8006326:	4957      	ldr	r1, [pc, #348]	; (8006484 <tcp_slowtmr+0x2ec>)
 8006328:	4852      	ldr	r0, [pc, #328]	; (8006474 <tcp_slowtmr+0x2dc>)
 800632a:	f003 fd45 	bl	8009db8 <iprintf>
        prev->next = pcb->next;
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006334:	b14d      	cbz	r5, 800634a <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006336:	8b23      	ldrh	r3, [r4, #24]
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	8ae3      	ldrh	r3, [r4, #22]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4622      	mov	r2, r4
 8006340:	1d23      	adds	r3, r4, #4
 8006342:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006344:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006346:	f002 fc97 	bl	8008c78 <tcp_rst>
      err_arg = pcb->callback_arg;
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800634e:	4621      	mov	r1, r4
 8006350:	2001      	movs	r0, #1
      pcb = pcb->next;
 8006352:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006354:	f7ff f896 	bl	8005484 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006358:	2200      	movs	r2, #0
 800635a:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800635e:	f1bb 0f00 	cmp.w	fp, #0
 8006362:	d004      	beq.n	800636e <tcp_slowtmr+0x1d6>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	f06f 010c 	mvn.w	r1, #12
 800636a:	4618      	mov	r0, r3
 800636c:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800636e:	f89a 3000 	ldrb.w	r3, [sl]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f43f af56 	beq.w	8006224 <tcp_slowtmr+0x8c>
 8006378:	e71c      	b.n	80061b4 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800637a:	4620      	mov	r0, r4
 800637c:	f002 fd6c 	bl	8008e58 <tcp_zero_window_probe>
 8006380:	2800      	cmp	r0, #0
 8006382:	f47f af75 	bne.w	8006270 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006386:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800638a:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800638e:	2b06      	cmp	r3, #6
 8006390:	f63f af6e 	bhi.w	8006270 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8006394:	3301      	adds	r3, #1
 8006396:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800639a:	e769      	b.n	8006270 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 800639c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80063a0:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80063a2:	bfa4      	itt	ge
 80063a4:	3301      	addge	r3, #1
 80063a6:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80063a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f43f af60 	beq.w	8006270 <tcp_slowtmr+0xd8>
 80063b0:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80063b4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80063b8:	4298      	cmp	r0, r3
 80063ba:	f6ff af59 	blt.w	8006270 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80063be:	2902      	cmp	r1, #2
 80063c0:	d00a      	beq.n	80063d8 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80063c2:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80063c6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80063ca:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80063ce:	492e      	ldr	r1, [pc, #184]	; (8006488 <tcp_slowtmr+0x2f0>)
 80063d0:	5c8a      	ldrb	r2, [r1, r2]
 80063d2:	4093      	lsls	r3, r2
 80063d4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80063d8:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80063da:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80063de:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80063e0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80063e4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80063e6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bf28      	it	cs
 80063ee:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80063f0:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80063f2:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80063f4:	b292      	uxth	r2, r2
 80063f6:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80063f8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80063fc:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 80063fe:	bf38      	it	cc
 8006400:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006404:	f002 fc92 	bl	8008d2c <tcp_rexmit_rto>
 8006408:	e734      	b.n	8006274 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800640a:	f04f 0b01 	mov.w	fp, #1
 800640e:	e731      	b.n	8006274 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006410:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <tcp_slowtmr+0x2f4>)
 8006416:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800641a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800641e:	4299      	cmp	r1, r3
 8006420:	d908      	bls.n	8006434 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8006422:	4620      	mov	r0, r4
 8006424:	f002 fcee 	bl	8008e04 <tcp_keepalive>
        if (err == ERR_OK) {
 8006428:	b920      	cbnz	r0, 8006434 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 800642a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800642e:	3301      	adds	r3, #1
 8006430:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006434:	2500      	movs	r5, #0
 8006436:	e74a      	b.n	80062ce <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8006438:	2b09      	cmp	r3, #9
 800643a:	f47f af61 	bne.w	8006300 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800643e:	6833      	ldr	r3, [r6, #0]
 8006440:	6a22      	ldr	r2, [r4, #32]
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	2bf0      	cmp	r3, #240	; 0xf0
 8006446:	e75a      	b.n	80062fe <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006448:	429c      	cmp	r4, r3
 800644a:	d006      	beq.n	800645a <tcp_slowtmr+0x2c2>
 800644c:	464b      	mov	r3, r9
 800644e:	f240 428d 	movw	r2, #1165	; 0x48d
 8006452:	490f      	ldr	r1, [pc, #60]	; (8006490 <tcp_slowtmr+0x2f8>)
 8006454:	4807      	ldr	r0, [pc, #28]	; (8006474 <tcp_slowtmr+0x2dc>)
 8006456:	f003 fcaf 	bl	8009db8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800645a:	68e3      	ldr	r3, [r4, #12]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	e769      	b.n	8006334 <tcp_slowtmr+0x19c>
 8006460:	20007d2c 	.word	0x20007d2c
 8006464:	2000436e 	.word	0x2000436e
 8006468:	20007d28 	.word	0x20007d28
 800646c:	20007d38 	.word	0x20007d38
 8006470:	0800c9ca 	.word	0x0800c9ca
 8006474:	0800ace9 	.word	0x0800ace9
 8006478:	0800c9f4 	.word	0x0800c9f4
 800647c:	0800ca1e 	.word	0x0800ca1e
 8006480:	0800c910 	.word	0x0800c910
 8006484:	0800ca4b 	.word	0x0800ca4b
 8006488:	0800c7d8 	.word	0x0800c7d8
 800648c:	000124f8 	.word	0x000124f8
 8006490:	0800ca76 	.word	0x0800ca76
 8006494:	20007d24 	.word	0x20007d24
 8006498:	0800c826 	.word	0x0800c826
 800649c:	0800caa0 	.word	0x0800caa0
      ++prev->polltmr;
 80064a0:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80064a2:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 80064a4:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80064a6:	3301      	adds	r3, #1
 80064a8:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80064aa:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80064ac:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80064ae:	f63f aeba 	bhi.w	8006226 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80064b2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80064b6:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80064ba:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80064be:	b173      	cbz	r3, 80064de <tcp_slowtmr+0x346>
 80064c0:	4621      	mov	r1, r4
 80064c2:	6920      	ldr	r0, [r4, #16]
 80064c4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80064c6:	f89a 3000 	ldrb.w	r3, [sl]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f47f ae72 	bne.w	80061b4 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f47f aea8 	bne.w	8006226 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 80064d6:	4620      	mov	r0, r4
 80064d8:	f002 fa50 	bl	800897c <tcp_output>
 80064dc:	e6a3      	b.n	8006226 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80064de:	4658      	mov	r0, fp
 80064e0:	e7f1      	b.n	80064c6 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064e2:	7d2b      	ldrb	r3, [r5, #20]
 80064e4:	2b0a      	cmp	r3, #10
 80064e6:	d006      	beq.n	80064f6 <tcp_slowtmr+0x35e>
 80064e8:	4643      	mov	r3, r8
 80064ea:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80064ee:	4651      	mov	r1, sl
 80064f0:	4648      	mov	r0, r9
 80064f2:	f003 fc61 	bl	8009db8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80064f6:	6833      	ldr	r3, [r6, #0]
 80064f8:	6a2a      	ldr	r2, [r5, #32]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	2bf0      	cmp	r3, #240	; 0xf0
 80064fe:	d816      	bhi.n	800652e <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8006500:	462c      	mov	r4, r5
 8006502:	68ed      	ldr	r5, [r5, #12]
 8006504:	e665      	b.n	80061d2 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	429d      	cmp	r5, r3
 800650a:	d106      	bne.n	800651a <tcp_slowtmr+0x382>
 800650c:	4643      	mov	r3, r8
 800650e:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006512:	4910      	ldr	r1, [pc, #64]	; (8006554 <tcp_slowtmr+0x3bc>)
 8006514:	4648      	mov	r0, r9
 8006516:	f003 fc4f 	bl	8009db8 <iprintf>
        prev->next = pcb->next;
 800651a:	68eb      	ldr	r3, [r5, #12]
 800651c:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800651e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006522:	4629      	mov	r1, r5
 8006524:	2001      	movs	r0, #1
 8006526:	f7fe ffad 	bl	8005484 <memp_free>
      pcb = pcb->next;
 800652a:	465d      	mov	r5, fp
 800652c:	e651      	b.n	80061d2 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800652e:	4628      	mov	r0, r5
 8006530:	f7ff fe12 	bl	8006158 <tcp_pcb_purge>
      if (prev != NULL) {
 8006534:	2c00      	cmp	r4, #0
 8006536:	d1e6      	bne.n	8006506 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	429d      	cmp	r5, r3
 800653c:	d006      	beq.n	800654c <tcp_slowtmr+0x3b4>
 800653e:	4643      	mov	r3, r8
 8006540:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006544:	4904      	ldr	r1, [pc, #16]	; (8006558 <tcp_slowtmr+0x3c0>)
 8006546:	4648      	mov	r0, r9
 8006548:	f003 fc36 	bl	8009db8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800654c:	68eb      	ldr	r3, [r5, #12]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	e7e5      	b.n	800651e <tcp_slowtmr+0x386>
 8006552:	bf00      	nop
 8006554:	0800cacf 	.word	0x0800cacf
 8006558:	0800caf6 	.word	0x0800caf6

0800655c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800655c:	6803      	ldr	r3, [r0, #0]
 800655e:	428b      	cmp	r3, r1
{
 8006560:	b510      	push	{r4, lr}
 8006562:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006564:	d137      	bne.n	80065d6 <tcp_pcb_remove+0x7a>
 8006566:	68cb      	ldr	r3, [r1, #12]
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	2300      	movs	r3, #0
 800656c:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff fdf2 	bl	8006158 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006574:	7d23      	ldrb	r3, [r4, #20]
 8006576:	2b0a      	cmp	r3, #10
 8006578:	d00a      	beq.n	8006590 <tcp_pcb_remove+0x34>
 800657a:	2b01      	cmp	r3, #1
 800657c:	d008      	beq.n	8006590 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800657e:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8006580:	07da      	lsls	r2, r3, #31
 8006582:	d505      	bpl.n	8006590 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006584:	f043 0302 	orr.w	r3, r3, #2
 8006588:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800658a:	4620      	mov	r0, r4
 800658c:	f002 f9f6 	bl	800897c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006590:	7d23      	ldrb	r3, [r4, #20]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d01a      	beq.n	80065cc <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006596:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006598:	b133      	cbz	r3, 80065a8 <tcp_pcb_remove+0x4c>
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <tcp_pcb_remove+0x8c>)
 800659c:	4913      	ldr	r1, [pc, #76]	; (80065ec <tcp_pcb_remove+0x90>)
 800659e:	4814      	ldr	r0, [pc, #80]	; (80065f0 <tcp_pcb_remove+0x94>)
 80065a0:	f240 7253 	movw	r2, #1875	; 0x753
 80065a4:	f003 fc08 	bl	8009db8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80065a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80065aa:	b133      	cbz	r3, 80065ba <tcp_pcb_remove+0x5e>
 80065ac:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <tcp_pcb_remove+0x8c>)
 80065ae:	4911      	ldr	r1, [pc, #68]	; (80065f4 <tcp_pcb_remove+0x98>)
 80065b0:	480f      	ldr	r0, [pc, #60]	; (80065f0 <tcp_pcb_remove+0x94>)
 80065b2:	f240 7254 	movw	r2, #1876	; 0x754
 80065b6:	f003 fbff 	bl	8009db8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80065ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80065bc:	b133      	cbz	r3, 80065cc <tcp_pcb_remove+0x70>
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <tcp_pcb_remove+0x8c>)
 80065c0:	490d      	ldr	r1, [pc, #52]	; (80065f8 <tcp_pcb_remove+0x9c>)
 80065c2:	480b      	ldr	r0, [pc, #44]	; (80065f0 <tcp_pcb_remove+0x94>)
 80065c4:	f240 7256 	movw	r2, #1878	; 0x756
 80065c8:	f003 fbf6 	bl	8009db8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80065cc:	2300      	movs	r3, #0
 80065ce:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80065d0:	82e3      	strh	r3, [r4, #22]
 80065d2:	bd10      	pop	{r4, pc}
 80065d4:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0c7      	beq.n	800656a <tcp_pcb_remove+0xe>
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	4294      	cmp	r4, r2
 80065de:	d1f9      	bne.n	80065d4 <tcp_pcb_remove+0x78>
 80065e0:	68e2      	ldr	r2, [r4, #12]
 80065e2:	60da      	str	r2, [r3, #12]
 80065e4:	e7c1      	b.n	800656a <tcp_pcb_remove+0xe>
 80065e6:	bf00      	nop
 80065e8:	0800c826 	.word	0x0800c826
 80065ec:	0800c8c8 	.word	0x0800c8c8
 80065f0:	0800ace9 	.word	0x0800ace9
 80065f4:	0800c8e0 	.word	0x0800c8e0
 80065f8:	0800c8f9 	.word	0x0800c8f9

080065fc <tcp_close_shutdown>:
{
 80065fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065fe:	7d03      	ldrb	r3, [r0, #20]
 8006600:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006602:	2900      	cmp	r1, #0
 8006604:	d049      	beq.n	800669a <tcp_close_shutdown+0x9e>
 8006606:	2b04      	cmp	r3, #4
 8006608:	d001      	beq.n	800660e <tcp_close_shutdown+0x12>
 800660a:	2b07      	cmp	r3, #7
 800660c:	d145      	bne.n	800669a <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800660e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006610:	b91a      	cbnz	r2, 800661a <tcp_close_shutdown+0x1e>
 8006612:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006614:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8006618:	d03f      	beq.n	800669a <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800661a:	7ea3      	ldrb	r3, [r4, #26]
 800661c:	06db      	lsls	r3, r3, #27
 800661e:	d406      	bmi.n	800662e <tcp_close_shutdown+0x32>
 8006620:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <tcp_close_shutdown+0x124>)
 8006622:	4940      	ldr	r1, [pc, #256]	; (8006724 <tcp_close_shutdown+0x128>)
 8006624:	4840      	ldr	r0, [pc, #256]	; (8006728 <tcp_close_shutdown+0x12c>)
 8006626:	f240 120f 	movw	r2, #271	; 0x10f
 800662a:	f003 fbc5 	bl	8009db8 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800662e:	8b23      	ldrh	r3, [r4, #24]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	8ae3      	ldrh	r3, [r4, #22]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4622      	mov	r2, r4
 8006638:	1d23      	adds	r3, r4, #4
 800663a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800663c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800663e:	f002 fb1b 	bl	8008c78 <tcp_rst>
      tcp_pcb_purge(pcb);
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fd88 	bl	8006158 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006648:	4a38      	ldr	r2, [pc, #224]	; (800672c <tcp_close_shutdown+0x130>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	429c      	cmp	r4, r3
 800664e:	d115      	bne.n	800667c <tcp_close_shutdown+0x80>
 8006650:	68e3      	ldr	r3, [r4, #12]
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	60e3      	str	r3, [r4, #12]
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <tcp_close_shutdown+0x134>)
 800665a:	2201      	movs	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800665e:	7d23      	ldrb	r3, [r4, #20]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d113      	bne.n	800668c <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8006664:	230a      	movs	r3, #10
 8006666:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006668:	4b32      	ldr	r3, [pc, #200]	; (8006734 <tcp_close_shutdown+0x138>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	60e2      	str	r2, [r4, #12]
 800666e:	601c      	str	r4, [r3, #0]
 8006670:	f002 fca4 	bl	8008fbc <tcp_timer_needed>
}
 8006674:	2000      	movs	r0, #0
 8006676:	b003      	add	sp, #12
 8006678:	bd30      	pop	{r4, r5, pc}
 800667a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0e9      	beq.n	8006654 <tcp_close_shutdown+0x58>
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	4294      	cmp	r4, r2
 8006684:	d1f9      	bne.n	800667a <tcp_close_shutdown+0x7e>
 8006686:	68e2      	ldr	r2, [r4, #12]
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	e7e3      	b.n	8006654 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 800668c:	4b2a      	ldr	r3, [pc, #168]	; (8006738 <tcp_close_shutdown+0x13c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	429c      	cmp	r4, r3
 8006692:	d117      	bne.n	80066c4 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8006694:	f001 fd06 	bl	80080a4 <tcp_trigger_input_pcb_close>
 8006698:	e7ec      	b.n	8006674 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 800669a:	2b01      	cmp	r3, #1
 800669c:	d020      	beq.n	80066e0 <tcp_close_shutdown+0xe4>
 800669e:	d307      	bcc.n	80066b0 <tcp_close_shutdown+0xb4>
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d033      	beq.n	800670c <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 80066a4:	4620      	mov	r0, r4
}
 80066a6:	b003      	add	sp, #12
 80066a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 80066ac:	f7ff bb7c 	b.w	8005da8 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 80066b0:	8ae3      	ldrh	r3, [r4, #22]
 80066b2:	b13b      	cbz	r3, 80066c4 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80066b4:	4a21      	ldr	r2, [pc, #132]	; (800673c <tcp_close_shutdown+0x140>)
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	429c      	cmp	r4, r3
 80066ba:	d109      	bne.n	80066d0 <tcp_close_shutdown+0xd4>
 80066bc:	68e3      	ldr	r3, [r4, #12]
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	2300      	movs	r3, #0
 80066c2:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80066c4:	4621      	mov	r1, r4
 80066c6:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80066c8:	f7fe fedc 	bl	8005484 <memp_free>
    break;
 80066cc:	e7d2      	b.n	8006674 <tcp_close_shutdown+0x78>
 80066ce:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0f5      	beq.n	80066c0 <tcp_close_shutdown+0xc4>
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	4294      	cmp	r4, r2
 80066d8:	d1f9      	bne.n	80066ce <tcp_close_shutdown+0xd2>
 80066da:	68e2      	ldr	r2, [r4, #12]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	e7ef      	b.n	80066c0 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80066e0:	4917      	ldr	r1, [pc, #92]	; (8006740 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 80066e2:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80066e4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80066e8:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80066ea:	b94a      	cbnz	r2, 8006700 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80066ec:	3301      	adds	r3, #1
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d1f8      	bne.n	80066e4 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80066f2:	4621      	mov	r1, r4
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <tcp_close_shutdown+0x148>)
 80066f6:	f7ff ff31 	bl	800655c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80066fa:	4621      	mov	r1, r4
 80066fc:	2002      	movs	r0, #2
 80066fe:	e7e3      	b.n	80066c8 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8006700:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8006702:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8006704:	bf08      	it	eq
 8006706:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006708:	68d2      	ldr	r2, [r2, #12]
 800670a:	e7ee      	b.n	80066ea <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800670c:	4621      	mov	r1, r4
 800670e:	4807      	ldr	r0, [pc, #28]	; (800672c <tcp_close_shutdown+0x130>)
 8006710:	f7ff ff24 	bl	800655c <tcp_pcb_remove>
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <tcp_close_shutdown+0x134>)
 8006716:	2001      	movs	r0, #1
 8006718:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800671a:	4621      	mov	r1, r4
 800671c:	e7d4      	b.n	80066c8 <tcp_close_shutdown+0xcc>
 800671e:	bf00      	nop
 8006720:	0800c826 	.word	0x0800c826
 8006724:	0800c80d 	.word	0x0800c80d
 8006728:	0800ace9 	.word	0x0800ace9
 800672c:	20007d28 	.word	0x20007d28
 8006730:	20007d24 	.word	0x20007d24
 8006734:	20007d38 	.word	0x20007d38
 8006738:	20007d3c 	.word	0x20007d3c
 800673c:	20007d34 	.word	0x20007d34
 8006740:	0800c8b8 	.word	0x0800c8b8
 8006744:	20007d30 	.word	0x20007d30

08006748 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006748:	7d03      	ldrb	r3, [r0, #20]
 800674a:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800674c:	bf1e      	ittt	ne
 800674e:	7e83      	ldrbne	r3, [r0, #26]
 8006750:	f043 0310 	orrne.w	r3, r3, #16
 8006754:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006756:	2101      	movs	r1, #1
 8006758:	f7ff bf50 	b.w	80065fc <tcp_close_shutdown>

0800675c <tcp_recv_null>:
{
 800675c:	b510      	push	{r4, lr}
 800675e:	4608      	mov	r0, r1
  if (p != NULL) {
 8006760:	4614      	mov	r4, r2
 8006762:	b13a      	cbz	r2, 8006774 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8006764:	8911      	ldrh	r1, [r2, #8]
 8006766:	f7ff fc23 	bl	8005fb0 <tcp_recved>
    pbuf_free(p);
 800676a:	4620      	mov	r0, r4
 800676c:	f7ff f810 	bl	8005790 <pbuf_free>
}
 8006770:	2000      	movs	r0, #0
 8006772:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1fb      	bne.n	8006770 <tcp_recv_null+0x14>
}
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800677c:	f7ff bfe4 	b.w	8006748 <tcp_close>

08006780 <tcp_process_refused_data>:
{
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8006782:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006784:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8006788:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800678a:	2300      	movs	r3, #0
{
 800678c:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 800678e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006790:	b1dd      	cbz	r5, 80067ca <tcp_process_refused_data+0x4a>
 8006792:	4601      	mov	r1, r0
 8006794:	4632      	mov	r2, r6
 8006796:	6900      	ldr	r0, [r0, #16]
 8006798:	47a8      	blx	r5
 800679a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800679c:	b9e0      	cbnz	r0, 80067d8 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800679e:	06bb      	lsls	r3, r7, #26
 80067a0:	d511      	bpl.n	80067c6 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80067a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80067a4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80067a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80067ac:	bf1c      	itt	ne
 80067ae:	3301      	addne	r3, #1
 80067b0:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80067b2:	b146      	cbz	r6, 80067c6 <tcp_process_refused_data+0x46>
 80067b4:	2300      	movs	r3, #0
 80067b6:	461a      	mov	r2, r3
 80067b8:	4621      	mov	r1, r4
 80067ba:	6920      	ldr	r0, [r4, #16]
 80067bc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80067be:	300d      	adds	r0, #13
 80067c0:	d101      	bne.n	80067c6 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80067c2:	f06f 050c 	mvn.w	r5, #12
}
 80067c6:	4628      	mov	r0, r5
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80067ca:	4601      	mov	r1, r0
 80067cc:	462b      	mov	r3, r5
 80067ce:	4632      	mov	r2, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff ffc3 	bl	800675c <tcp_recv_null>
 80067d6:	e7e0      	b.n	800679a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 80067d8:	f110 050d 	adds.w	r5, r0, #13
 80067dc:	d0f1      	beq.n	80067c2 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 80067de:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80067e0:	f06f 0504 	mvn.w	r5, #4
 80067e4:	e7ef      	b.n	80067c6 <tcp_process_refused_data+0x46>
	...

080067e8 <tcp_fasttmr>:
{
 80067e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80067ec:	4d1b      	ldr	r5, [pc, #108]	; (800685c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80067ee:	4f1c      	ldr	r7, [pc, #112]	; (8006860 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80067f0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80067f2:	4e1c      	ldr	r6, [pc, #112]	; (8006864 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80067f4:	3301      	adds	r3, #1
 80067f6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80067f8:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80067fa:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80067fe:	b90c      	cbnz	r4, 8006804 <tcp_fasttmr+0x1c>
}
 8006800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8006804:	782b      	ldrb	r3, [r5, #0]
 8006806:	7f62      	ldrb	r2, [r4, #29]
 8006808:	429a      	cmp	r2, r3
 800680a:	d024      	beq.n	8006856 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800680c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800680e:	7ea3      	ldrb	r3, [r4, #26]
 8006810:	07d9      	lsls	r1, r3, #31
 8006812:	d509      	bpl.n	8006828 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800681a:	4620      	mov	r0, r4
 800681c:	f002 f8ae 	bl	800897c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006820:	7ea3      	ldrb	r3, [r4, #26]
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8006828:	7ea3      	ldrb	r3, [r4, #26]
 800682a:	071a      	lsls	r2, r3, #28
 800682c:	d505      	bpl.n	800683a <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800682e:	f023 0308 	bic.w	r3, r3, #8
 8006832:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8006834:	4620      	mov	r0, r4
 8006836:	f7ff fab7 	bl	8005da8 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800683a:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800683c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8006840:	b13b      	cbz	r3, 8006852 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8006842:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8006844:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8006848:	f7ff ff9a 	bl	8006780 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800684c:	7833      	ldrb	r3, [r6, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1d2      	bne.n	80067f8 <tcp_fasttmr+0x10>
{
 8006852:	464c      	mov	r4, r9
 8006854:	e7d3      	b.n	80067fe <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8006856:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800685a:	e7fa      	b.n	8006852 <tcp_fasttmr+0x6a>
 800685c:	2000436e 	.word	0x2000436e
 8006860:	20007d28 	.word	0x20007d28
 8006864:	20007d24 	.word	0x20007d24

08006868 <tcp_tmr>:
{
 8006868:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800686a:	f7ff ffbd 	bl	80067e8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800686e:	4a06      	ldr	r2, [pc, #24]	; (8006888 <tcp_tmr+0x20>)
 8006870:	7813      	ldrb	r3, [r2, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	7013      	strb	r3, [r2, #0]
 8006878:	07db      	lsls	r3, r3, #31
 800687a:	d503      	bpl.n	8006884 <tcp_tmr+0x1c>
}
 800687c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8006880:	f7ff bc8a 	b.w	8006198 <tcp_slowtmr>
 8006884:	bd08      	pop	{r3, pc}
 8006886:	bf00      	nop
 8006888:	2000436d 	.word	0x2000436d

0800688c <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800688c:	7d03      	ldrb	r3, [r0, #20]
 800688e:	2b01      	cmp	r3, #1
{
 8006890:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4604      	mov	r4, r0
 8006896:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006898:	d106      	bne.n	80068a8 <tcp_abandon+0x1c>
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <tcp_abandon+0xd0>)
 800689c:	4930      	ldr	r1, [pc, #192]	; (8006960 <tcp_abandon+0xd4>)
 800689e:	4831      	ldr	r0, [pc, #196]	; (8006964 <tcp_abandon+0xd8>)
 80068a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80068a4:	f003 fa88 	bl	8009db8 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80068a8:	7d23      	ldrb	r3, [r4, #20]
 80068aa:	2b0a      	cmp	r3, #10
 80068ac:	d10a      	bne.n	80068c4 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80068ae:	4621      	mov	r1, r4
 80068b0:	482d      	ldr	r0, [pc, #180]	; (8006968 <tcp_abandon+0xdc>)
 80068b2:	f7ff fe53 	bl	800655c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80068b6:	4621      	mov	r1, r4
 80068b8:	2001      	movs	r0, #1
}
 80068ba:	b002      	add	sp, #8
 80068bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80068c0:	f7fe bde0 	b.w	8005484 <memp_free>
    seqno = pcb->snd_nxt;
 80068c4:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80068c8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80068cc:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80068d0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80068d4:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80068d6:	b99b      	cbnz	r3, 8006900 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80068d8:	b13d      	cbz	r5, 80068ea <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <tcp_abandon+0xe0>)
 80068dc:	6813      	ldr	r3, [r2, #0]
 80068de:	429c      	cmp	r4, r3
 80068e0:	d106      	bne.n	80068f0 <tcp_abandon+0x64>
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	2500      	movs	r5, #0
 80068e8:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80068ea:	462e      	mov	r6, r5
 80068ec:	e00f      	b.n	800690e <tcp_abandon+0x82>
 80068ee:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f8      	beq.n	80068e6 <tcp_abandon+0x5a>
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	4294      	cmp	r4, r2
 80068f8:	d1f9      	bne.n	80068ee <tcp_abandon+0x62>
 80068fa:	68e2      	ldr	r2, [r4, #12]
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	e7f2      	b.n	80068e6 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006900:	4621      	mov	r1, r4
 8006902:	481b      	ldr	r0, [pc, #108]	; (8006970 <tcp_abandon+0xe4>)
 8006904:	f7ff fe2a 	bl	800655c <tcp_pcb_remove>
 8006908:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <tcp_abandon+0xe8>)
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800690e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006910:	b108      	cbz	r0, 8006916 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8006912:	f7ff fb99 	bl	8006048 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006916:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006918:	b108      	cbz	r0, 800691e <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800691a:	f7ff fb95 	bl	8006048 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800691e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006920:	b108      	cbz	r0, 8006926 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8006922:	f7ff fb91 	bl	8006048 <tcp_segs_free>
    if (send_rst) {
 8006926:	b146      	cbz	r6, 800693a <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006928:	8b23      	ldrh	r3, [r4, #24]
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	9500      	str	r5, [sp, #0]
 800692e:	1d23      	adds	r3, r4, #4
 8006930:	4622      	mov	r2, r4
 8006932:	4651      	mov	r1, sl
 8006934:	4648      	mov	r0, r9
 8006936:	f002 f99f 	bl	8008c78 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800693a:	4621      	mov	r1, r4
 800693c:	2001      	movs	r0, #1
 800693e:	f7fe fda1 	bl	8005484 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006942:	b13f      	cbz	r7, 8006954 <tcp_abandon+0xc8>
 8006944:	f06f 010c 	mvn.w	r1, #12
 8006948:	4640      	mov	r0, r8
 800694a:	463b      	mov	r3, r7
}
 800694c:	b002      	add	sp, #8
 800694e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006952:	4718      	bx	r3
}
 8006954:	b002      	add	sp, #8
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	bf00      	nop
 800695c:	0800c826 	.word	0x0800c826
 8006960:	0800c7a7 	.word	0x0800c7a7
 8006964:	0800ace9 	.word	0x0800ace9
 8006968:	20007d38 	.word	0x20007d38
 800696c:	20007d34 	.word	0x20007d34
 8006970:	20007d28 	.word	0x20007d28
 8006974:	20007d24 	.word	0x20007d24

08006978 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8006978:	2101      	movs	r1, #1
 800697a:	f7ff bf87 	b.w	800688c <tcp_abandon>

0800697e <tcp_accept_null>:
{
 800697e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8006980:	4608      	mov	r0, r1
 8006982:	f7ff fff9 	bl	8006978 <tcp_abort>
}
 8006986:	f06f 000c 	mvn.w	r0, #12
 800698a:	bd08      	pop	{r3, pc}

0800698c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8006990:	b901      	cbnz	r1, 8006994 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8006992:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006994:	680a      	ldr	r2, [r1, #0]
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	68cc      	ldr	r4, [r1, #12]
 800699a:	429a      	cmp	r2, r3
 800699c:	d102      	bne.n	80069a4 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800699e:	4608      	mov	r0, r1
 80069a0:	f7ff ffea 	bl	8006978 <tcp_abort>
      pcb = pcb->next;
 80069a4:	4621      	mov	r1, r4
 80069a6:	e7f3      	b.n	8006990 <tcp_netif_ip_addr_changed_pcblist+0x4>

080069a8 <tcp_kill_state>:
{
 80069a8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80069aa:	f1a0 0308 	sub.w	r3, r0, #8
 80069ae:	2b01      	cmp	r3, #1
{
 80069b0:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80069b2:	d906      	bls.n	80069c2 <tcp_kill_state+0x1a>
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <tcp_kill_state+0x4c>)
 80069b6:	4910      	ldr	r1, [pc, #64]	; (80069f8 <tcp_kill_state+0x50>)
 80069b8:	4810      	ldr	r0, [pc, #64]	; (80069fc <tcp_kill_state+0x54>)
 80069ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069be:	f003 f9fb 	bl	8009db8 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <tcp_kill_state+0x58>)
 80069c4:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069c6:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <tcp_kill_state+0x5c>)
  inactivity = 0;
 80069c8:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069ca:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80069cc:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069ce:	b921      	cbnz	r1, 80069da <tcp_kill_state+0x32>
  if (inactive != NULL) {
 80069d0:	b170      	cbz	r0, 80069f0 <tcp_kill_state+0x48>
}
 80069d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 80069d6:	f7ff bf59 	b.w	800688c <tcp_abandon>
    if (pcb->state == state) {
 80069da:	7d0b      	ldrb	r3, [r1, #20]
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d105      	bne.n	80069ec <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069e0:	6a0b      	ldr	r3, [r1, #32]
 80069e2:	1aeb      	subs	r3, r5, r3
 80069e4:	429a      	cmp	r2, r3
 80069e6:	bf9c      	itt	ls
 80069e8:	461a      	movls	r2, r3
 80069ea:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069ec:	68c9      	ldr	r1, [r1, #12]
 80069ee:	e7ee      	b.n	80069ce <tcp_kill_state+0x26>
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	bf00      	nop
 80069f4:	0800c826 	.word	0x0800c826
 80069f8:	0800c887 	.word	0x0800c887
 80069fc:	0800ace9 	.word	0x0800ace9
 8006a00:	20007d28 	.word	0x20007d28
 8006a04:	20007d2c 	.word	0x20007d2c

08006a08 <tcp_alloc>:
{
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f7fe fd1d 	bl	800544c <memp_malloc>
 8006a12:	4d3b      	ldr	r5, [pc, #236]	; (8006b00 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8006a14:	4604      	mov	r4, r0
 8006a16:	bb90      	cbnz	r0, 8006a7e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a18:	4b3a      	ldr	r3, [pc, #232]	; (8006b04 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a1a:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a1c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8006a1e:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d158      	bne.n	8006ad6 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8006a24:	b114      	cbz	r4, 8006a2c <tcp_alloc+0x24>
    tcp_abort(inactive);
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff ffa6 	bl	8006978 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	f7fe fd0d 	bl	800544c <memp_malloc>
    if (pcb == NULL) {
 8006a32:	4604      	mov	r4, r0
 8006a34:	bb18      	cbnz	r0, 8006a7e <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8006a36:	2009      	movs	r0, #9
 8006a38:	f7ff ffb6 	bl	80069a8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f7fe fd05 	bl	800544c <memp_malloc>
      if (pcb == NULL) {
 8006a42:	4604      	mov	r4, r0
 8006a44:	b9d8      	cbnz	r0, 8006a7e <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8006a46:	2008      	movs	r0, #8
 8006a48:	f7ff ffae 	bl	80069a8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f7fe fcfd 	bl	800544c <memp_malloc>
        if (pcb == NULL) {
 8006a52:	4604      	mov	r4, r0
 8006a54:	b998      	cbnz	r0, 8006a7e <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a56:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a58:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a5c:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006a5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8006a62:	bf0c      	ite	eq
 8006a64:	4631      	moveq	r1, r6
 8006a66:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d13c      	bne.n	8006ae6 <tcp_alloc+0xde>
  if (inactive != NULL) {
 8006a6c:	b114      	cbz	r4, 8006a74 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f7ff ff82 	bl	8006978 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a74:	2001      	movs	r0, #1
 8006a76:	f7fe fce9 	bl	800544c <memp_malloc>
  if (pcb != NULL) {
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b348      	cbz	r0, 8006ad2 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006a7e:	2298      	movs	r2, #152	; 0x98
 8006a80:	2100      	movs	r1, #0
 8006a82:	4620      	mov	r0, r4
 8006a84:	f003 f990 	bl	8009da8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006a88:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a8c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8006a8e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8006a94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006a98:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006a9a:	2206      	movs	r2, #6
 8006a9c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006aa0:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8006aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aa6:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006aae:	682a      	ldr	r2, [r5, #0]
 8006ab0:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8006ab2:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 8006ab6:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8006ab8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8006abc:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8006ac0:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 8006ac2:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 8006ac4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006ac8:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8006aca:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8006acc:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006ace:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ad6:	6a1a      	ldr	r2, [r3, #32]
 8006ad8:	1a82      	subs	r2, r0, r2
 8006ada:	428a      	cmp	r2, r1
 8006adc:	bf24      	itt	cs
 8006ade:	461c      	movcs	r4, r3
 8006ae0:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	e79c      	b.n	8006a20 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8006ae6:	7d5f      	ldrb	r7, [r3, #21]
 8006ae8:	428f      	cmp	r7, r1
 8006aea:	d807      	bhi.n	8006afc <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8006af2:	4282      	cmp	r2, r0
 8006af4:	bf22      	ittt	cs
 8006af6:	4639      	movcs	r1, r7
 8006af8:	4610      	movcs	r0, r2
 8006afa:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	e7b3      	b.n	8006a68 <tcp_alloc+0x60>
 8006b00:	20007d2c 	.word	0x20007d2c
 8006b04:	20007d38 	.word	0x20007d38
 8006b08:	20007d28 	.word	0x20007d28
 8006b0c:	2000436e 	.word	0x2000436e
 8006b10:	0800675d 	.word	0x0800675d
 8006b14:	006ddd00 	.word	0x006ddd00

08006b18 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8006b18:	2040      	movs	r0, #64	; 0x40
 8006b1a:	f7ff bf75 	b.w	8006a08 <tcp_alloc>
	...

08006b20 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <tcp_next_iss+0x10>)
 8006b22:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <tcp_next_iss+0x14>)
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	4410      	add	r0, r2
 8006b2a:	6018      	str	r0, [r3, #0]
}
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	2000000c 	.word	0x2000000c
 8006b34:	20007d2c 	.word	0x20007d2c

08006b38 <tcp_eff_send_mss_impl>:
{
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	f7fd fce7 	bl	8004510 <ip4_route>
    if (outif == NULL) {
 8006b42:	b130      	cbz	r0, 8006b52 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8006b44:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8006b46:	b123      	cbz	r3, 8006b52 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006b48:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	bf28      	it	cs
 8006b50:	461c      	movcs	r4, r3
}
 8006b52:	4620      	mov	r0, r4
 8006b54:	bd10      	pop	{r4, pc}
	...

08006b58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	b180      	cbz	r0, 8006b82 <tcp_netif_ip_addr_changed+0x2a>
 8006b60:	6803      	ldr	r3, [r0, #0]
 8006b62:	b173      	cbz	r3, 8006b82 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <tcp_netif_ip_addr_changed+0x40>)
 8006b66:	6819      	ldr	r1, [r3, #0]
 8006b68:	f7ff ff10 	bl	800698c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <tcp_netif_ip_addr_changed+0x44>)
 8006b6e:	4620      	mov	r0, r4
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	f7ff ff0b 	bl	800698c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006b76:	b125      	cbz	r5, 8006b82 <tcp_netif_ip_addr_changed+0x2a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b113      	cbz	r3, 8006b82 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <tcp_netif_ip_addr_changed+0x48>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	b903      	cbnz	r3, 8006b84 <tcp_netif_ip_addr_changed+0x2c>
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8006b88:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006b8a:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006b8c:	bf04      	itt	eq
 8006b8e:	6829      	ldreq	r1, [r5, #0]
 8006b90:	6019      	streq	r1, [r3, #0]
{
 8006b92:	4613      	mov	r3, r2
 8006b94:	e7f4      	b.n	8006b80 <tcp_netif_ip_addr_changed+0x28>
 8006b96:	bf00      	nop
 8006b98:	20007d28 	.word	0x20007d28
 8006b9c:	20007d34 	.word	0x20007d34
 8006ba0:	20007d30 	.word	0x20007d30

08006ba4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006ba8:	68c3      	ldr	r3, [r0, #12]
{
 8006baa:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006bac:	8998      	ldrh	r0, [r3, #12]
{
 8006bae:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006bb0:	f7fc fffa 	bl	8003ba8 <lwip_htons>
 8006bb4:	07c2      	lsls	r2, r0, #31
 8006bb6:	d415      	bmi.n	8006be4 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006bb8:	4e18      	ldr	r6, [pc, #96]	; (8006c1c <tcp_oos_insert_segment+0x78>)
    while (next &&
 8006bba:	b1bc      	cbz	r4, 8006bec <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006bbc:	68e7      	ldr	r7, [r4, #12]
 8006bbe:	6830      	ldr	r0, [r6, #0]
 8006bc0:	892b      	ldrh	r3, [r5, #8]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	8922      	ldrh	r2, [r4, #8]
 8006bc6:	4403      	add	r3, r0
 8006bc8:	440a      	add	r2, r1
 8006bca:	1a9a      	subs	r2, r3, r2
    while (next &&
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	da10      	bge.n	8006bf2 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006bd0:	1a5b      	subs	r3, r3, r1
    if (next &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dd0a      	ble.n	8006bec <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006bd6:	1a09      	subs	r1, r1, r0
 8006bd8:	b289      	uxth	r1, r1
 8006bda:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006bdc:	6868      	ldr	r0, [r5, #4]
 8006bde:	f7fe ff1d 	bl	8005a1c <pbuf_realloc>
 8006be2:	e003      	b.n	8006bec <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7ff fa2f 	bl	8006048 <tcp_segs_free>
    next = NULL;
 8006bea:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8006bec:	602c      	str	r4, [r5, #0]
}
 8006bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006bf2:	89b8      	ldrh	r0, [r7, #12]
 8006bf4:	f7fc ffd8 	bl	8003ba8 <lwip_htons>
 8006bf8:	07c3      	lsls	r3, r0, #31
 8006bfa:	d509      	bpl.n	8006c10 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006bfc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006c00:	2001      	movs	r0, #1
 8006c02:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8006c06:	f7fc ffcf 	bl	8003ba8 <lwip_htons>
 8006c0a:	4338      	orrs	r0, r7
 8006c0c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8006c10:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fa0a 	bl	800602c <tcp_seg_free>
      next = next->next;
 8006c18:	463c      	mov	r4, r7
 8006c1a:	e7ce      	b.n	8006bba <tcp_oos_insert_segment+0x16>
 8006c1c:	20004394 	.word	0x20004394

08006c20 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006c20:	7d03      	ldrb	r3, [r0, #20]
 8006c22:	2b03      	cmp	r3, #3
{
 8006c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006c2a:	d806      	bhi.n	8006c3a <tcp_receive+0x1a>
 8006c2c:	4b87      	ldr	r3, [pc, #540]	; (8006e4c <tcp_receive+0x22c>)
 8006c2e:	4988      	ldr	r1, [pc, #544]	; (8006e50 <tcp_receive+0x230>)
 8006c30:	4888      	ldr	r0, [pc, #544]	; (8006e54 <tcp_receive+0x234>)
 8006c32:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006c36:	f003 f8bf 	bl	8009db8 <iprintf>

  if (flags & TCP_ACK) {
 8006c3a:	4b87      	ldr	r3, [pc, #540]	; (8006e58 <tcp_receive+0x238>)
 8006c3c:	4e87      	ldr	r6, [pc, #540]	; (8006e5c <tcp_receive+0x23c>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f013 0f10 	tst.w	r3, #16
 8006c44:	f000 817c 	beq.w	8006f40 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006c4a:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006c4c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006c50:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006c52:	1a1d      	subs	r5, r3, r0
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	4d82      	ldr	r5, [pc, #520]	; (8006e60 <tcp_receive+0x240>)
 8006c58:	db0d      	blt.n	8006c76 <tcp_receive+0x56>
 8006c5a:	4283      	cmp	r3, r0
 8006c5c:	d103      	bne.n	8006c66 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	1acb      	subs	r3, r1, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	db07      	blt.n	8006c76 <tcp_receive+0x56>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d11c      	bne.n	8006ca6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006c6c:	4b7d      	ldr	r3, [pc, #500]	; (8006e64 <tcp_receive+0x244>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	89db      	ldrh	r3, [r3, #14]
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d917      	bls.n	8006ca6 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006c76:	4b7b      	ldr	r3, [pc, #492]	; (8006e64 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006c78:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8006c80:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006c82:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8006c84:	6828      	ldr	r0, [r5, #0]
 8006c86:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006c88:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006c8c:	bf38      	it	cc
 8006c8e:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8006c92:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	d13c      	bne.n	8006d14 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8006c9a:	b920      	cbnz	r0, 8006ca6 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8006c9c:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006ca0:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8006ca2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8006cac:	4f6e      	ldr	r7, [pc, #440]	; (8006e68 <tcp_receive+0x248>)
 8006cae:	eba3 000e 	sub.w	r0, r3, lr
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	dc37      	bgt.n	8006d26 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8006cb6:	486d      	ldr	r0, [pc, #436]	; (8006e6c <tcp_receive+0x24c>)
 8006cb8:	8800      	ldrh	r0, [r0, #0]
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f040 846f 	bne.w	800759e <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006cc0:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cc4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006cc8:	4401      	add	r1, r0
 8006cca:	428a      	cmp	r2, r1
 8006ccc:	f040 8467 	bne.w	800759e <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006cd0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	f2c0 8462 	blt.w	800759e <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006cda:	4573      	cmp	r3, lr
 8006cdc:	f040 845f 	bne.w	800759e <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce4:	1c53      	adds	r3, r2, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8006cea:	bf38      	it	cc
 8006cec:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8006cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d911      	bls.n	8006d1c <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006cf8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006cfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d201      	bcs.n	8006d0a <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8006d06:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006d0a:	f8df a140 	ldr.w	sl, [pc, #320]	; 8006e4c <tcp_receive+0x22c>
 8006d0e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006e54 <tcp_receive+0x234>
 8006d12:	e108      	b.n	8006f26 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d0c6      	beq.n	8006ca6 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e7c2      	b.n	8006ca2 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8006d1c:	d1f5      	bne.n	8006d0a <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f002 f849 	bl	8008db6 <tcp_rexmit_fast>
 8006d24:	e7f1      	b.n	8006d0a <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006d26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006d28:	1a9a      	subs	r2, r3, r2
 8006d2a:	2a00      	cmp	r2, #0
 8006d2c:	f300 808a 	bgt.w	8006e44 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8006d30:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d32:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8006d36:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8006d38:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8006d3a:	bf41      	itttt	mi
 8006d3c:	f022 0204 	bicmi.w	r2, r2, #4
 8006d40:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006d42:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8006d46:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8006d4a:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d4c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8006d4e:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d50:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8006d54:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8006d56:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006d5a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8006d62:	d90f      	bls.n	8006d84 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8006d64:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006d68:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8006d6c:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006d6e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8006d70:	bf9c      	itt	ls
 8006d72:	435b      	mulls	r3, r3
 8006d74:	fb93 f3f2 	sdivls	r3, r3, r2
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8006d7c:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8006d7e:	bf38      	it	cc
 8006d80:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006d84:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006e4c <tcp_receive+0x22c>
 8006d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e54 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8006d8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d8e:	b943      	cbnz	r3, 8006da2 <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8006d90:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006d92:	2300      	movs	r3, #0
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	d153      	bne.n	8006e40 <tcp_receive+0x220>
        pcb->rtime = -1;
 8006d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d9c:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006d9e:	76e3      	strb	r3, [r4, #27]
 8006da0:	e7b3      	b.n	8006d0a <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	6858      	ldr	r0, [r3, #4]
 8006da6:	f7fc ff02 	bl	8003bae <lwip_htonl>
 8006daa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006dac:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	4683      	mov	fp, r0
 8006db4:	8998      	ldrh	r0, [r3, #12]
 8006db6:	f7fc fef7 	bl	8003ba8 <lwip_htons>
 8006dba:	682b      	ldr	r3, [r5, #0]
 8006dbc:	f010 0003 	ands.w	r0, r0, #3
 8006dc0:	eba8 0803 	sub.w	r8, r8, r3
 8006dc4:	bf18      	it	ne
 8006dc6:	2001      	movne	r0, #1
 8006dc8:	44d8      	add	r8, fp
 8006dca:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8006dcc:	f1b8 0f00 	cmp.w	r8, #0
 8006dd0:	dcde      	bgt.n	8006d90 <tcp_receive+0x170>
        next = pcb->unacked;
 8006dd2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006dd6:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8006dda:	f8d8 3000 	ldr.w	r3, [r8]
 8006dde:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006de0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006de4:	f7fe fe8a 	bl	8005afc <pbuf_clen>
 8006de8:	4583      	cmp	fp, r0
 8006dea:	d206      	bcs.n	8006dfa <tcp_receive+0x1da>
 8006dec:	464b      	mov	r3, r9
 8006dee:	f240 429e 	movw	r2, #1182	; 0x49e
 8006df2:	491f      	ldr	r1, [pc, #124]	; (8006e70 <tcp_receive+0x250>)
 8006df4:	4650      	mov	r0, sl
 8006df6:	f002 ffdf 	bl	8009db8 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006dfa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006dfe:	f7fe fe7d 	bl	8005afc <pbuf_clen>
 8006e02:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006e06:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006e08:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8006e0a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006e0e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006e12:	4413      	add	r3, r2
        tcp_seg_free(next);
 8006e14:	4640      	mov	r0, r8
        recv_acked += next->len;
 8006e16:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8006e18:	f7ff f908 	bl	800602c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8006e1c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0b3      	beq.n	8006d8c <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8006e24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1b0      	bne.n	8006d8c <tcp_receive+0x16c>
 8006e2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ad      	bne.n	8006d8c <tcp_receive+0x16c>
 8006e30:	464b      	mov	r3, r9
 8006e32:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8006e36:	490f      	ldr	r1, [pc, #60]	; (8006e74 <tcp_receive+0x254>)
 8006e38:	4650      	mov	r0, sl
 8006e3a:	f002 ffbd 	bl	8009db8 <iprintf>
 8006e3e:	e7a5      	b.n	8006d8c <tcp_receive+0x16c>
        pcb->rtime = 0;
 8006e40:	8623      	strh	r3, [r4, #48]	; 0x30
 8006e42:	e7ac      	b.n	8006d9e <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8006e44:	4620      	mov	r0, r4
 8006e46:	f001 fd63 	bl	8008910 <tcp_send_empty_ack>
 8006e4a:	e75e      	b.n	8006d0a <tcp_receive+0xea>
 8006e4c:	0800ccec 	.word	0x0800ccec
 8006e50:	0800cd1e 	.word	0x0800cd1e
 8006e54:	0800ace9 	.word	0x0800ace9
 8006e58:	20004374 	.word	0x20004374
 8006e5c:	20004394 	.word	0x20004394
 8006e60:	20004370 	.word	0x20004370
 8006e64:	2000439c 	.word	0x2000439c
 8006e68:	20004388 	.word	0x20004388
 8006e6c:	200043aa 	.word	0x200043aa
 8006e70:	0800cd37 	.word	0x0800cd37
 8006e74:	0800cd5f 	.word	0x0800cd5f
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006e78:	682a      	ldr	r2, [r5, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	9201      	str	r2, [sp, #4]
 8006e7e:	6858      	ldr	r0, [r3, #4]
 8006e80:	f7fc fe95 	bl	8003bae <lwip_htonl>
 8006e84:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006e86:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4683      	mov	fp, r0
 8006e8e:	8998      	ldrh	r0, [r3, #12]
 8006e90:	f7fc fe8a 	bl	8003ba8 <lwip_htons>
 8006e94:	9a01      	ldr	r2, [sp, #4]
 8006e96:	f010 0003 	ands.w	r0, r0, #3
 8006e9a:	eba2 0808 	sub.w	r8, r2, r8
 8006e9e:	bf18      	it	ne
 8006ea0:	2001      	movne	r0, #1
 8006ea2:	eba8 080b 	sub.w	r8, r8, fp
 8006ea6:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8006eaa:	f1b8 0f00 	cmp.w	r8, #0
 8006eae:	db3d      	blt.n	8006f2c <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dc38      	bgt.n	8006f2c <tcp_receive+0x30c>
      next = pcb->unsent;
 8006eba:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8006ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec2:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8006ec4:	b90b      	cbnz	r3, 8006eca <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 8006ec6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006eca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ece:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8006ed2:	f7fe fe13 	bl	8005afc <pbuf_clen>
 8006ed6:	4583      	cmp	fp, r0
 8006ed8:	d206      	bcs.n	8006ee8 <tcp_receive+0x2c8>
 8006eda:	4653      	mov	r3, sl
 8006edc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006ee0:	49ba      	ldr	r1, [pc, #744]	; (80071cc <tcp_receive+0x5ac>)
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	f002 ff68 	bl	8009db8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ee8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006eec:	f7fe fe06 	bl	8005afc <pbuf_clen>
 8006ef0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006ef4:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006ef6:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8006ef8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006efc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8006f00:	4413      	add	r3, r2
      tcp_seg_free(next);
 8006f02:	4640      	mov	r0, r8
      recv_acked += next->len;
 8006f04:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8006f06:	f7ff f891 	bl	800602c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8006f0a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006f0e:	b153      	cbz	r3, 8006f26 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8006f10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f12:	b943      	cbnz	r3, 8006f26 <tcp_receive+0x306>
 8006f14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006f16:	b933      	cbnz	r3, 8006f26 <tcp_receive+0x306>
 8006f18:	4653      	mov	r3, sl
 8006f1a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8006f1e:	49ac      	ldr	r1, [pc, #688]	; (80071d0 <tcp_receive+0x5b0>)
 8006f20:	4648      	mov	r0, r9
 8006f22:	f002 ff49 	bl	8009db8 <iprintf>
    while (pcb->unsent != NULL &&
 8006f26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1a5      	bne.n	8006e78 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006f2c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006f30:	883a      	ldrh	r2, [r7, #0]
 8006f32:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006f34:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8006f36:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	f040 8119 	bne.w	8007172 <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006f40:	4fa4      	ldr	r7, [pc, #656]	; (80071d4 <tcp_receive+0x5b4>)
 8006f42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f44:	8838      	ldrh	r0, [r7, #0]
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f000 831c 	beq.w	8007584 <tcp_receive+0x964>
 8006f4c:	7d23      	ldrb	r3, [r4, #20]
 8006f4e:	2b06      	cmp	r3, #6
 8006f50:	f200 8318 	bhi.w	8007584 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006f54:	6833      	ldr	r3, [r6, #0]
 8006f56:	1ad5      	subs	r5, r2, r3
 8006f58:	2d01      	cmp	r5, #1
 8006f5a:	f100 815c 	bmi.w	8007216 <tcp_receive+0x5f6>
 8006f5e:	f1c3 0101 	rsb	r1, r3, #1
 8006f62:	1a09      	subs	r1, r1, r0
 8006f64:	4411      	add	r1, r2
 8006f66:	2900      	cmp	r1, #0
 8006f68:	f300 8155 	bgt.w	8007216 <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8006f6c:	4b9a      	ldr	r3, [pc, #616]	; (80071d8 <tcp_receive+0x5b8>)
 8006f6e:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8006f72:	46aa      	mov	sl, r5
 8006f74:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006f76:	f1b9 0f00 	cmp.w	r9, #0
 8006f7a:	d106      	bne.n	8006f8a <tcp_receive+0x36a>
 8006f7c:	4b97      	ldr	r3, [pc, #604]	; (80071dc <tcp_receive+0x5bc>)
 8006f7e:	4998      	ldr	r1, [pc, #608]	; (80071e0 <tcp_receive+0x5c0>)
 8006f80:	4898      	ldr	r0, [pc, #608]	; (80071e4 <tcp_receive+0x5c4>)
 8006f82:	f240 523c 	movw	r2, #1340	; 0x53c
 8006f86:	f002 ff17 	bl	8009db8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8006f8a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	dd06      	ble.n	8006fa0 <tcp_receive+0x380>
 8006f92:	4b92      	ldr	r3, [pc, #584]	; (80071dc <tcp_receive+0x5bc>)
 8006f94:	4994      	ldr	r1, [pc, #592]	; (80071e8 <tcp_receive+0x5c8>)
 8006f96:	4893      	ldr	r0, [pc, #588]	; (80071e4 <tcp_receive+0x5c4>)
 8006f98:	f240 523d 	movw	r2, #1341	; 0x53d
 8006f9c:	f002 ff0c 	bl	8009db8 <iprintf>
      if (inseg.p->len < off) {
 8006fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006fa4:	8943      	ldrh	r3, [r0, #10]
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	f340 812a 	ble.w	8007200 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006fac:	8903      	ldrh	r3, [r0, #8]
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	dd06      	ble.n	8006fc0 <tcp_receive+0x3a0>
 8006fb2:	4b8a      	ldr	r3, [pc, #552]	; (80071dc <tcp_receive+0x5bc>)
 8006fb4:	498d      	ldr	r1, [pc, #564]	; (80071ec <tcp_receive+0x5cc>)
 8006fb6:	488b      	ldr	r0, [pc, #556]	; (80071e4 <tcp_receive+0x5c4>)
 8006fb8:	f240 523f 	movw	r2, #1343	; 0x53f
 8006fbc:	f002 fefc 	bl	8009db8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006fc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fc4:	8919      	ldrh	r1, [r3, #8]
 8006fc6:	1b4d      	subs	r5, r1, r5
 8006fc8:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8006fca:	2200      	movs	r2, #0
        while (p->len < off) {
 8006fcc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8006fd0:	459a      	cmp	sl, r3
 8006fd2:	f300 80f2 	bgt.w	80071ba <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8006fd6:	f1ca 0100 	rsb	r1, sl, #0
 8006fda:	b209      	sxth	r1, r1
 8006fdc:	4648      	mov	r0, r9
 8006fde:	f7fe fbd1 	bl	8005784 <pbuf_header>
 8006fe2:	b130      	cbz	r0, 8006ff2 <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006fe4:	4b7d      	ldr	r3, [pc, #500]	; (80071dc <tcp_receive+0x5bc>)
 8006fe6:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8006fea:	4981      	ldr	r1, [pc, #516]	; (80071f0 <tcp_receive+0x5d0>)
 8006fec:	487d      	ldr	r0, [pc, #500]	; (80071e4 <tcp_receive+0x5c4>)
 8006fee:	f002 fee3 	bl	8009db8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006ff2:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8006ff6:	6833      	ldr	r3, [r6, #0]
 8006ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006ffa:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8006ffc:	440b      	add	r3, r1
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007004:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007008:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800700a:	6831      	ldr	r1, [r6, #0]
 800700c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800700e:	1a8b      	subs	r3, r1, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	f2c0 82b1 	blt.w	8007578 <tcp_receive+0x958>
 8007016:	1c4b      	adds	r3, r1, #1
 8007018:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	1a1b      	subs	r3, r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f300 82aa 	bgt.w	8007578 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007024:	4291      	cmp	r1, r2
 8007026:	f040 81c9 	bne.w	80073bc <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800702a:	4d6b      	ldr	r5, [pc, #428]	; (80071d8 <tcp_receive+0x5b8>)
 800702c:	68eb      	ldr	r3, [r5, #12]
 800702e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007032:	8998      	ldrh	r0, [r3, #12]
 8007034:	f7fc fdb8 	bl	8003ba8 <lwip_htons>
 8007038:	f010 0003 	ands.w	r0, r0, #3
 800703c:	bf18      	it	ne
 800703e:	2001      	movne	r0, #1
 8007040:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8007042:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8007044:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8007046:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8007048:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800704a:	d242      	bcs.n	80070d2 <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800704c:	68eb      	ldr	r3, [r5, #12]
 800704e:	8998      	ldrh	r0, [r3, #12]
 8007050:	f7fc fdaa 	bl	8003ba8 <lwip_htons>
 8007054:	07c2      	lsls	r2, r0, #31
 8007056:	d510      	bpl.n	800707a <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007058:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800705c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8007060:	4640      	mov	r0, r8
 8007062:	f7fc fda1 	bl	8003ba8 <lwip_htons>
 8007066:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800706a:	f7fc fd9d 	bl	8003ba8 <lwip_htons>
 800706e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007072:	ea40 0808 	orr.w	r8, r0, r8
 8007076:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800707a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800707c:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800707e:	68eb      	ldr	r3, [r5, #12]
 8007080:	8998      	ldrh	r0, [r3, #12]
 8007082:	f7fc fd91 	bl	8003ba8 <lwip_htons>
 8007086:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8007088:	bf48      	it	mi
 800708a:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800708c:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800708e:	bf44      	itt	mi
 8007090:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007094:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8007096:	8929      	ldrh	r1, [r5, #8]
 8007098:	f7fe fcc0 	bl	8005a1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800709c:	68eb      	ldr	r3, [r5, #12]
 800709e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80070a2:	8998      	ldrh	r0, [r3, #12]
 80070a4:	f7fc fd80 	bl	8003ba8 <lwip_htons>
 80070a8:	f010 0003 	ands.w	r0, r0, #3
 80070ac:	bf18      	it	ne
 80070ae:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80070b0:	6833      	ldr	r3, [r6, #0]
 80070b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80070b4:	4440      	add	r0, r8
 80070b6:	b280      	uxth	r0, r0
 80070b8:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80070ba:	4418      	add	r0, r3
 80070bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80070be:	4413      	add	r3, r2
 80070c0:	4298      	cmp	r0, r3
 80070c2:	d006      	beq.n	80070d2 <tcp_receive+0x4b2>
 80070c4:	4b45      	ldr	r3, [pc, #276]	; (80071dc <tcp_receive+0x5bc>)
 80070c6:	494b      	ldr	r1, [pc, #300]	; (80071f4 <tcp_receive+0x5d4>)
 80070c8:	4846      	ldr	r0, [pc, #280]	; (80071e4 <tcp_receive+0x5c4>)
 80070ca:	f240 527f 	movw	r2, #1407	; 0x57f
 80070ce:	f002 fe73 	bl	8009db8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80070d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80ad 	beq.w	8007234 <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80070da:	68eb      	ldr	r3, [r5, #12]
 80070dc:	8998      	ldrh	r0, [r3, #12]
 80070de:	f7fc fd63 	bl	8003ba8 <lwip_htons>
 80070e2:	07c0      	lsls	r0, r0, #31
 80070e4:	f100 80a3 	bmi.w	800722e <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 80070e8:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80070ec:	f1b8 0f00 	cmp.w	r8, #0
 80070f0:	d03c      	beq.n	800716c <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80070f2:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80070f6:	6830      	ldr	r0, [r6, #0]
 80070f8:	883b      	ldrh	r3, [r7, #0]
 80070fa:	f8de 2004 	ldr.w	r2, [lr, #4]
 80070fe:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007102:	4403      	add	r3, r0
 8007104:	4411      	add	r1, r2
 8007106:	1a59      	subs	r1, r3, r1
            while (next &&
 8007108:	2900      	cmp	r1, #0
 800710a:	f280 80cf 	bge.w	80072ac <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800710e:	1a9b      	subs	r3, r3, r2
            if (next &&
 8007110:	2b00      	cmp	r3, #0
 8007112:	dd2b      	ble.n	800716c <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007114:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007116:	1a12      	subs	r2, r2, r0
 8007118:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800711a:	8998      	ldrh	r0, [r3, #12]
 800711c:	f7fc fd44 	bl	8003ba8 <lwip_htons>
 8007120:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8007122:	bf48      	it	mi
 8007124:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007126:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8007128:	bf44      	itt	mi
 800712a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800712e:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8007130:	8929      	ldrh	r1, [r5, #8]
 8007132:	f7fe fc73 	bl	8005a1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007136:	68eb      	ldr	r3, [r5, #12]
 8007138:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800713c:	8998      	ldrh	r0, [r3, #12]
 800713e:	f7fc fd33 	bl	8003ba8 <lwip_htons>
 8007142:	f010 0003 	ands.w	r0, r0, #3
 8007146:	bf18      	it	ne
 8007148:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800714a:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800714c:	4448      	add	r0, r9
 800714e:	b280      	uxth	r0, r0
 8007150:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007152:	4418      	add	r0, r3
 8007154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4298      	cmp	r0, r3
 800715c:	d006      	beq.n	800716c <tcp_receive+0x54c>
 800715e:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <tcp_receive+0x5bc>)
 8007160:	4925      	ldr	r1, [pc, #148]	; (80071f8 <tcp_receive+0x5d8>)
 8007162:	4820      	ldr	r0, [pc, #128]	; (80071e4 <tcp_receive+0x5c4>)
 8007164:	f240 52af 	movw	r2, #1455	; 0x5af
 8007168:	f002 fe26 	bl	8009db8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800716c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8007170:	e060      	b.n	8007234 <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007174:	6829      	ldr	r1, [r5, #0]
 8007176:	1a5b      	subs	r3, r3, r1
 8007178:	2b00      	cmp	r3, #0
 800717a:	f6bf aee1 	bge.w	8006f40 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800717e:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 8007180:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8007188:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 800718c:	b289      	uxth	r1, r1
 800718e:	b20b      	sxth	r3, r1
      if (m < 0) {
 8007190:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8007192:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8007196:	4408      	add	r0, r1
        m = -m;
 8007198:	bfbc      	itt	lt
 800719a:	4249      	neglt	r1, r1
 800719c:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 800719e:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80071a2:	4413      	add	r3, r2
      pcb->sa += m;
 80071a4:	b200      	sxth	r0, r0
      pcb->sv += m;
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80071aa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80071ae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80071b2:	2300      	movs	r3, #0
      pcb->sa += m;
 80071b4:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80071b6:	6363      	str	r3, [r4, #52]	; 0x34
 80071b8:	e6c2      	b.n	8006f40 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 80071ba:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 80071be:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 80071c2:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 80071c6:	f8d9 9000 	ldr.w	r9, [r9]
 80071ca:	e6ff      	b.n	8006fcc <tcp_receive+0x3ac>
 80071cc:	0800cd37 	.word	0x0800cd37
 80071d0:	0800cd5f 	.word	0x0800cd5f
 80071d4:	200043aa 	.word	0x200043aa
 80071d8:	20004378 	.word	0x20004378
 80071dc:	0800ccec 	.word	0x0800ccec
 80071e0:	0800cd7f 	.word	0x0800cd7f
 80071e4:	0800ace9 	.word	0x0800ace9
 80071e8:	0800cd8f 	.word	0x0800cd8f
 80071ec:	0800cd9e 	.word	0x0800cd9e
 80071f0:	0800cdae 	.word	0x0800cdae
 80071f4:	0800cdc1 	.word	0x0800cdc1
 80071f8:	0800cdf8 	.word	0x0800cdf8
 80071fc:	20007d2c 	.word	0x20007d2c
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007200:	4269      	negs	r1, r5
 8007202:	b209      	sxth	r1, r1
 8007204:	f7fe fabe 	bl	8005784 <pbuf_header>
 8007208:	2800      	cmp	r0, #0
 800720a:	f43f aef2 	beq.w	8006ff2 <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 800720e:	4b9c      	ldr	r3, [pc, #624]	; (8007480 <tcp_receive+0x860>)
 8007210:	f240 5251 	movw	r2, #1361	; 0x551
 8007214:	e6e9      	b.n	8006fea <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800721a:	bfbe      	ittt	lt
 800721c:	7ea3      	ldrblt	r3, [r4, #26]
 800721e:	f043 0302 	orrlt.w	r3, r3, #2
 8007222:	76a3      	strblt	r3, [r4, #26]
 8007224:	e6f1      	b.n	800700a <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8007226:	6803      	ldr	r3, [r0, #0]
 8007228:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800722a:	f7fe feff 	bl	800602c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800722e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007230:	2800      	cmp	r0, #0
 8007232:	d1f8      	bne.n	8007226 <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007234:	883a      	ldrh	r2, [r7, #0]
 8007236:	6833      	ldr	r3, [r6, #0]
 8007238:	4413      	add	r3, r2
 800723a:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800723c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800723e:	4293      	cmp	r3, r2
 8007240:	d206      	bcs.n	8007250 <tcp_receive+0x630>
 8007242:	4b8f      	ldr	r3, [pc, #572]	; (8007480 <tcp_receive+0x860>)
 8007244:	498f      	ldr	r1, [pc, #572]	; (8007484 <tcp_receive+0x864>)
 8007246:	4890      	ldr	r0, [pc, #576]	; (8007488 <tcp_receive+0x868>)
 8007248:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800724c:	f002 fdb4 	bl	8009db8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007250:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007252:	883a      	ldrh	r2, [r7, #0]
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007258:	4620      	mov	r0, r4
 800725a:	f7fe fe7d 	bl	8005f58 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800725e:	686b      	ldr	r3, [r5, #4]
 8007260:	891a      	ldrh	r2, [r3, #8]
 8007262:	b11a      	cbz	r2, 800726c <tcp_receive+0x64c>
          recv_data = inseg.p;
 8007264:	4a89      	ldr	r2, [pc, #548]	; (800748c <tcp_receive+0x86c>)
 8007266:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007268:	2300      	movs	r3, #0
 800726a:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800726c:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800726e:	4f84      	ldr	r7, [pc, #528]	; (8007480 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007270:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007272:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8007498 <tcp_receive+0x878>
 8007276:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007488 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800727a:	f7fc fc95 	bl	8003ba8 <lwip_htons>
 800727e:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 8007280:	bf41      	itttt	mi
 8007282:	4a83      	ldrmi	r2, [pc, #524]	; (8007490 <tcp_receive+0x870>)
 8007284:	7813      	ldrbmi	r3, [r2, #0]
 8007286:	f043 0320 	orrmi.w	r3, r3, #32
 800728a:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800728c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800728e:	b125      	cbz	r5, 800729a <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007290:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8007292:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007294:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8007296:	428b      	cmp	r3, r1
 8007298:	d033      	beq.n	8007302 <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800729a:	7ea3      	ldrb	r3, [r4, #26]
 800729c:	07d9      	lsls	r1, r3, #31
 800729e:	f140 8087 	bpl.w	80073b0 <tcp_receive+0x790>
 80072a2:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	e083      	b.n	80073b4 <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80072ac:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80072b0:	f7fc fc7a 	bl	8003ba8 <lwip_htons>
 80072b4:	07c1      	lsls	r1, r0, #31
 80072b6:	d51d      	bpl.n	80072f4 <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80072b8:	68eb      	ldr	r3, [r5, #12]
 80072ba:	8998      	ldrh	r0, [r3, #12]
 80072bc:	f7fc fc74 	bl	8003ba8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80072c0:	0782      	lsls	r2, r0, #30
 80072c2:	d417      	bmi.n	80072f4 <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80072c4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80072c8:	2001      	movs	r0, #1
 80072ca:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80072ce:	f7fc fc6b 	bl	8003ba8 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 80072d2:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80072d4:	ea49 0000 	orr.w	r0, r9, r0
 80072d8:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80072dc:	8998      	ldrh	r0, [r3, #12]
 80072de:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80072e2:	f7fc fc61 	bl	8003ba8 <lwip_htons>
 80072e6:	f010 0003 	ands.w	r0, r0, #3
 80072ea:	bf18      	it	ne
 80072ec:	2001      	movne	r0, #1
 80072ee:	4481      	add	r9, r0
 80072f0:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80072f4:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80072f8:	4640      	mov	r0, r8
 80072fa:	f7fe fe97 	bl	800602c <tcp_seg_free>
              next = next->next;
 80072fe:	46c8      	mov	r8, r9
 8007300:	e6f4      	b.n	80070ec <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8007302:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007304:	8990      	ldrh	r0, [r2, #12]
 8007306:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800730a:	f7fc fc4d 	bl	8003ba8 <lwip_htons>
 800730e:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007310:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007314:	f010 0003 	ands.w	r0, r0, #3
 8007318:	bf18      	it	ne
 800731a:	2001      	movne	r0, #1
 800731c:	449a      	add	sl, r3
 800731e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007320:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007322:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007324:	8998      	ldrh	r0, [r3, #12]
 8007326:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 800732a:	f7fc fc3d 	bl	8003ba8 <lwip_htons>
 800732e:	f010 0003 	ands.w	r0, r0, #3
 8007332:	bf18      	it	ne
 8007334:	2001      	movne	r0, #1
 8007336:	4458      	add	r0, fp
 8007338:	4582      	cmp	sl, r0
 800733a:	d206      	bcs.n	800734a <tcp_receive+0x72a>
 800733c:	463b      	mov	r3, r7
 800733e:	f240 52de 	movw	r2, #1502	; 0x5de
 8007342:	4641      	mov	r1, r8
 8007344:	4648      	mov	r0, r9
 8007346:	f002 fd37 	bl	8009db8 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800734a:	68eb      	ldr	r3, [r5, #12]
 800734c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007350:	8998      	ldrh	r0, [r3, #12]
 8007352:	f7fc fc29 	bl	8003ba8 <lwip_htons>
 8007356:	f010 0003 	ands.w	r0, r0, #3
 800735a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800735c:	bf18      	it	ne
 800735e:	2001      	movne	r0, #1
 8007360:	4450      	add	r0, sl
 8007362:	1a18      	subs	r0, r3, r0
 8007364:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8007366:	4620      	mov	r0, r4
 8007368:	f7fe fdf6 	bl	8005f58 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800736c:	6869      	ldr	r1, [r5, #4]
 800736e:	890b      	ldrh	r3, [r1, #8]
 8007370:	b133      	cbz	r3, 8007380 <tcp_receive+0x760>
            if (recv_data) {
 8007372:	4b46      	ldr	r3, [pc, #280]	; (800748c <tcp_receive+0x86c>)
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	b1c8      	cbz	r0, 80073ac <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 8007378:	f7fe fbe4 	bl	8005b44 <pbuf_cat>
            cseg->p = NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007380:	68eb      	ldr	r3, [r5, #12]
 8007382:	8998      	ldrh	r0, [r3, #12]
 8007384:	f7fc fc10 	bl	8003ba8 <lwip_htons>
 8007388:	07c0      	lsls	r0, r0, #31
 800738a:	d509      	bpl.n	80073a0 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 800738c:	4a40      	ldr	r2, [pc, #256]	; (8007490 <tcp_receive+0x870>)
 800738e:	7813      	ldrb	r3, [r2, #0]
 8007390:	f043 0320 	orr.w	r3, r3, #32
 8007394:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007396:	7d23      	ldrb	r3, [r4, #20]
 8007398:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800739a:	bf04      	itt	eq
 800739c:	2307      	moveq	r3, #7
 800739e:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80073a4:	4628      	mov	r0, r5
 80073a6:	f7fe fe41 	bl	800602c <tcp_seg_free>
 80073aa:	e76f      	b.n	800728c <tcp_receive+0x66c>
              recv_data = cseg->p;
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e7e5      	b.n	800737c <tcp_receive+0x75c>
        tcp_ack(pcb);
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80073b6:	b003      	add	sp, #12
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 80073bc:	4620      	mov	r0, r4
 80073be:	f001 faa7 	bl	8008910 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80073c2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80073c4:	b925      	cbnz	r5, 80073d0 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80073c6:	4833      	ldr	r0, [pc, #204]	; (8007494 <tcp_receive+0x874>)
 80073c8:	f7fe fe48 	bl	800605c <tcp_seg_copy>
 80073cc:	6720      	str	r0, [r4, #112]	; 0x70
 80073ce:	e7f2      	b.n	80073b6 <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 80073d0:	6833      	ldr	r3, [r6, #0]
 80073d2:	f04f 0800 	mov.w	r8, #0
 80073d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80073da:	f103 0c01 	add.w	ip, r3, #1
 80073de:	68e8      	ldr	r0, [r5, #12]
 80073e0:	6842      	ldr	r2, [r0, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d117      	bne.n	8007416 <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 80073e6:	482b      	ldr	r0, [pc, #172]	; (8007494 <tcp_receive+0x874>)
 80073e8:	892b      	ldrh	r3, [r5, #8]
 80073ea:	8902      	ldrh	r2, [r0, #8]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d9e2      	bls.n	80073b6 <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 80073f0:	f7fe fe34 	bl	800605c <tcp_seg_copy>
                if (cseg != NULL) {
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d0de      	beq.n	80073b6 <tcp_receive+0x796>
                  if (prev != NULL) {
 80073f8:	f1b8 0f00 	cmp.w	r8, #0
 80073fc:	d009      	beq.n	8007412 <tcp_receive+0x7f2>
                    prev->next = cseg;
 80073fe:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007402:	4629      	mov	r1, r5
}
 8007404:	b003      	add	sp, #12
 8007406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800740a:	f7ff bbcb 	b.w	8006ba4 <tcp_oos_insert_segment>
 800740e:	460d      	mov	r5, r1
 8007410:	e7e5      	b.n	80073de <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8007412:	6720      	str	r0, [r4, #112]	; 0x70
 8007414:	e7f5      	b.n	8007402 <tcp_receive+0x7e2>
              if (prev == NULL) {
 8007416:	f1b8 0f00 	cmp.w	r8, #0
 800741a:	d109      	bne.n	8007430 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800741c:	1a99      	subs	r1, r3, r2
 800741e:	2900      	cmp	r1, #0
 8007420:	da3c      	bge.n	800749c <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8007422:	481c      	ldr	r0, [pc, #112]	; (8007494 <tcp_receive+0x874>)
 8007424:	f7fe fe1a 	bl	800605c <tcp_seg_copy>
                  if (cseg != NULL) {
 8007428:	2800      	cmp	r0, #0
 800742a:	d0c4      	beq.n	80073b6 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 800742c:	6720      	str	r0, [r4, #112]	; 0x70
 800742e:	e7e8      	b.n	8007402 <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007430:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007434:	6849      	ldr	r1, [r1, #4]
 8007436:	ebae 0101 	sub.w	r1, lr, r1
 800743a:	2900      	cmp	r1, #0
 800743c:	db2e      	blt.n	800749c <tcp_receive+0x87c>
 800743e:	ebac 0102 	sub.w	r1, ip, r2
 8007442:	2900      	cmp	r1, #0
 8007444:	dc2a      	bgt.n	800749c <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8007446:	4813      	ldr	r0, [pc, #76]	; (8007494 <tcp_receive+0x874>)
 8007448:	f7fe fe08 	bl	800605c <tcp_seg_copy>
                  if (cseg != NULL) {
 800744c:	4604      	mov	r4, r0
 800744e:	2800      	cmp	r0, #0
 8007450:	d0b1      	beq.n	80073b6 <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007456:	6831      	ldr	r1, [r6, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800745e:	4413      	add	r3, r2
 8007460:	1a5b      	subs	r3, r3, r1
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd07      	ble.n	8007476 <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007466:	1a89      	subs	r1, r1, r2
 8007468:	b289      	uxth	r1, r1
 800746a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800746e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007472:	f7fe fad3 	bl	8005a1c <pbuf_realloc>
                    prev->next = cseg;
 8007476:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	e7c1      	b.n	8007404 <tcp_receive+0x7e4>
 8007480:	0800ccec 	.word	0x0800ccec
 8007484:	0800ce33 	.word	0x0800ce33
 8007488:	0800ace9 	.word	0x0800ace9
 800748c:	2000438c 	.word	0x2000438c
 8007490:	20004390 	.word	0x20004390
 8007494:	20004378 	.word	0x20004378
 8007498:	0800ce52 	.word	0x0800ce52
              if (next->next == NULL &&
 800749c:	6829      	ldr	r1, [r5, #0]
 800749e:	46a8      	mov	r8, r5
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d1b4      	bne.n	800740e <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80074a4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd85      	ble.n	80073b6 <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80074aa:	8980      	ldrh	r0, [r0, #12]
 80074ac:	f7fc fb7c 	bl	8003ba8 <lwip_htons>
 80074b0:	07c2      	lsls	r2, r0, #31
 80074b2:	d480      	bmi.n	80073b6 <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 80074b4:	483c      	ldr	r0, [pc, #240]	; (80075a8 <tcp_receive+0x988>)
 80074b6:	f7fe fdd1 	bl	800605c <tcp_seg_copy>
 80074ba:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f af7a 	beq.w	80073b6 <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80074c2:	68eb      	ldr	r3, [r5, #12]
 80074c4:	6831      	ldr	r1, [r6, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	892b      	ldrh	r3, [r5, #8]
 80074ca:	4413      	add	r3, r2
 80074cc:	1a5b      	subs	r3, r3, r1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd05      	ble.n	80074de <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80074d2:	1a89      	subs	r1, r1, r2
 80074d4:	b289      	uxth	r1, r1
 80074d6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80074d8:	6868      	ldr	r0, [r5, #4]
 80074da:	f7fe fa9f 	bl	8005a1c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80074de:	6832      	ldr	r2, [r6, #0]
 80074e0:	883b      	ldrh	r3, [r7, #0]
 80074e2:	4413      	add	r3, r2
 80074e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f77f af62 	ble.w	80073b6 <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	8998      	ldrh	r0, [r3, #12]
 80074f8:	f7fc fb56 	bl	8003ba8 <lwip_htons>
 80074fc:	07c3      	lsls	r3, r0, #31
 80074fe:	d511      	bpl.n	8007524 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8007506:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800750a:	4640      	mov	r0, r8
 800750c:	f7fc fb4c 	bl	8003ba8 <lwip_htons>
 8007510:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007514:	f7fc fb48 	bl	8003ba8 <lwip_htons>
 8007518:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800751c:	ea40 0808 	orr.w	r8, r0, r8
 8007520:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007524:	6832      	ldr	r2, [r6, #0]
 8007526:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	1a89      	subs	r1, r1, r2
 800752c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800752e:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007530:	4411      	add	r1, r2
 8007532:	b289      	uxth	r1, r1
 8007534:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007536:	f7fe fa71 	bl	8005a1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	891d      	ldrh	r5, [r3, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	8998      	ldrh	r0, [r3, #12]
 8007542:	f7fc fb31 	bl	8003ba8 <lwip_htons>
 8007546:	f010 0003 	ands.w	r0, r0, #3
 800754a:	bf18      	it	ne
 800754c:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800754e:	6833      	ldr	r3, [r6, #0]
 8007550:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8007552:	4428      	add	r0, r5
 8007554:	b280      	uxth	r0, r0
 8007556:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007558:	4418      	add	r0, r3
 800755a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800755c:	4413      	add	r3, r2
 800755e:	4298      	cmp	r0, r3
 8007560:	f43f af29 	beq.w	80073b6 <tcp_receive+0x796>
 8007564:	4b11      	ldr	r3, [pc, #68]	; (80075ac <tcp_receive+0x98c>)
 8007566:	4912      	ldr	r1, [pc, #72]	; (80075b0 <tcp_receive+0x990>)
 8007568:	4812      	ldr	r0, [pc, #72]	; (80075b4 <tcp_receive+0x994>)
 800756a:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800756e:	b003      	add	sp, #12
 8007570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007574:	f002 bc20 	b.w	8009db8 <iprintf>
      tcp_send_empty_ack(pcb);
 8007578:	4620      	mov	r0, r4
}
 800757a:	b003      	add	sp, #12
 800757c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8007580:	f001 b9c6 	b.w	8008910 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007584:	6833      	ldr	r3, [r6, #0]
 8007586:	1a99      	subs	r1, r3, r2
 8007588:	2900      	cmp	r1, #0
 800758a:	db06      	blt.n	800759a <tcp_receive+0x97a>
 800758c:	3301      	adds	r3, #1
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f77f af0e 	ble.w	80073b6 <tcp_receive+0x796>
      tcp_ack_now(pcb);
 800759a:	7ea3      	ldrb	r3, [r4, #26]
 800759c:	e683      	b.n	80072a6 <tcp_receive+0x686>
        pcb->dupacks = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a4:	f7ff bbb1 	b.w	8006d0a <tcp_receive+0xea>
 80075a8:	20004378 	.word	0x20004378
 80075ac:	0800ccec 	.word	0x0800ccec
 80075b0:	0800cdc1 	.word	0x0800cdc1
 80075b4:	0800ace9 	.word	0x0800ace9

080075b8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <tcp_getoptbyte+0x30>)
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <tcp_getoptbyte+0x34>)
 80075bc:	6819      	ldr	r1, [r3, #0]
{
 80075be:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80075c0:	b121      	cbz	r1, 80075cc <tcp_getoptbyte+0x14>
 80075c2:	480b      	ldr	r0, [pc, #44]	; (80075f0 <tcp_getoptbyte+0x38>)
 80075c4:	8813      	ldrh	r3, [r2, #0]
 80075c6:	8800      	ldrh	r0, [r0, #0]
 80075c8:	4283      	cmp	r3, r0
 80075ca:	d207      	bcs.n	80075dc <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80075ce:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80075d0:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80075d2:	440b      	add	r3, r1
 80075d4:	1c48      	adds	r0, r1, #1
 80075d6:	8010      	strh	r0, [r2, #0]
 80075d8:	7d18      	ldrb	r0, [r3, #20]
 80075da:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80075dc:	1c5c      	adds	r4, r3, #1
 80075de:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 80075e0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80075e2:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 80075e4:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 80075e6:	bd10      	pop	{r4, pc}
 80075e8:	200043a4 	.word	0x200043a4
 80075ec:	20004398 	.word	0x20004398
 80075f0:	200043a0 	.word	0x200043a0
 80075f4:	2000439c 	.word	0x2000439c

080075f8 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80075fa:	4d19      	ldr	r5, [pc, #100]	; (8007660 <tcp_parseopt.isra.1.part.2+0x68>)
 80075fc:	4e19      	ldr	r6, [pc, #100]	; (8007664 <tcp_parseopt.isra.1.part.2+0x6c>)
 80075fe:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8007600:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007602:	802b      	strh	r3, [r5, #0]
 8007604:	8834      	ldrh	r4, [r6, #0]
 8007606:	882b      	ldrh	r3, [r5, #0]
 8007608:	42a3      	cmp	r3, r4
 800760a:	d300      	bcc.n	800760e <tcp_parseopt.isra.1.part.2+0x16>
 800760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800760e:	f7ff ffd3 	bl	80075b8 <tcp_getoptbyte>
      switch (opt) {
 8007612:	2801      	cmp	r0, #1
 8007614:	d0f6      	beq.n	8007604 <tcp_parseopt.isra.1.part.2+0xc>
 8007616:	d3f9      	bcc.n	800760c <tcp_parseopt.isra.1.part.2+0x14>
 8007618:	2802      	cmp	r0, #2
 800761a:	d117      	bne.n	800764c <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800761c:	f7ff ffcc 	bl	80075b8 <tcp_getoptbyte>
 8007620:	2804      	cmp	r0, #4
 8007622:	d1f3      	bne.n	800760c <tcp_parseopt.isra.1.part.2+0x14>
 8007624:	882b      	ldrh	r3, [r5, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	42a3      	cmp	r3, r4
 800762a:	daef      	bge.n	800760c <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800762c:	f7ff ffc4 	bl	80075b8 <tcp_getoptbyte>
 8007630:	0200      	lsls	r0, r0, #8
 8007632:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007634:	f7ff ffc0 	bl	80075b8 <tcp_getoptbyte>
 8007638:	4320      	orrs	r0, r4
 800763a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800763c:	1e43      	subs	r3, r0, #1
 800763e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007642:	bf28      	it	cs
 8007644:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8007648:	8038      	strh	r0, [r7, #0]
 800764a:	e7db      	b.n	8007604 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800764c:	f7ff ffb4 	bl	80075b8 <tcp_getoptbyte>
        if (data < 2) {
 8007650:	2801      	cmp	r0, #1
 8007652:	d9db      	bls.n	800760c <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007654:	882b      	ldrh	r3, [r5, #0]
 8007656:	3b02      	subs	r3, #2
 8007658:	4418      	add	r0, r3
 800765a:	8028      	strh	r0, [r5, #0]
 800765c:	e7d2      	b.n	8007604 <tcp_parseopt.isra.1.part.2+0xc>
 800765e:	bf00      	nop
 8007660:	20004398 	.word	0x20004398
 8007664:	200043a8 	.word	0x200043a8

08007668 <tcp_input_delayed_close>:
{
 8007668:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <tcp_input_delayed_close+0x38>)
{
 800766c:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800766e:	7818      	ldrb	r0, [r3, #0]
 8007670:	f010 0010 	ands.w	r0, r0, #16
 8007674:	d012      	beq.n	800769c <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007676:	7ea3      	ldrb	r3, [r4, #26]
 8007678:	06db      	lsls	r3, r3, #27
 800767a:	d406      	bmi.n	800768a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800767c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007680:	b11b      	cbz	r3, 800768a <tcp_input_delayed_close+0x22>
 8007682:	f06f 010e 	mvn.w	r1, #14
 8007686:	6920      	ldr	r0, [r4, #16]
 8007688:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800768a:	4621      	mov	r1, r4
 800768c:	4805      	ldr	r0, [pc, #20]	; (80076a4 <tcp_input_delayed_close+0x3c>)
 800768e:	f7fe ff65 	bl	800655c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007692:	2001      	movs	r0, #1
 8007694:	4621      	mov	r1, r4
 8007696:	f7fd fef5 	bl	8005484 <memp_free>
 800769a:	2001      	movs	r0, #1
}
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	20004390 	.word	0x20004390
 80076a4:	20007d28 	.word	0x20007d28

080076a8 <tcp_input>:
{
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80076ac:	4e9f      	ldr	r6, [pc, #636]	; (800792c <tcp_input+0x284>)
 80076ae:	6843      	ldr	r3, [r0, #4]
 80076b0:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 80076b2:	8943      	ldrh	r3, [r0, #10]
 80076b4:	2b13      	cmp	r3, #19
{
 80076b6:	b089      	sub	sp, #36	; 0x24
 80076b8:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 80076ba:	f240 81b2 	bls.w	8007a22 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80076be:	4f9c      	ldr	r7, [pc, #624]	; (8007930 <tcp_input+0x288>)
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6978      	ldr	r0, [r7, #20]
 80076c4:	f7fd f89b 	bl	80047fe <ip4_addr_isbroadcast_u32>
 80076c8:	46b8      	mov	r8, r7
 80076ca:	4604      	mov	r4, r0
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 81a8 	bne.w	8007a22 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80076d8:	2be0      	cmp	r3, #224	; 0xe0
 80076da:	f000 81a2 	beq.w	8007a22 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80076de:	6833      	ldr	r3, [r6, #0]
 80076e0:	8998      	ldrh	r0, [r3, #12]
 80076e2:	f7fc fa61 	bl	8003ba8 <lwip_htons>
 80076e6:	0a81      	lsrs	r1, r0, #10
 80076e8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80076ec:	2913      	cmp	r1, #19
 80076ee:	f240 8198 	bls.w	8007a22 <tcp_input+0x37a>
 80076f2:	892b      	ldrh	r3, [r5, #8]
 80076f4:	b289      	uxth	r1, r1
 80076f6:	428b      	cmp	r3, r1
 80076f8:	f0c0 8193 	bcc.w	8007a22 <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 80076fc:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80076fe:	4a8d      	ldr	r2, [pc, #564]	; (8007934 <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8007700:	4f8d      	ldr	r7, [pc, #564]	; (8007938 <tcp_input+0x290>)
 8007702:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007704:	f1a1 0314 	sub.w	r3, r1, #20
 8007708:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800770a:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 800770c:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800770e:	8013      	strh	r3, [r2, #0]
 8007710:	4c8a      	ldr	r4, [pc, #552]	; (800793c <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8007712:	d344      	bcc.n	800779e <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007714:	4249      	negs	r1, r1
 8007716:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8007718:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800771a:	f7fe f833 	bl	8005784 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800771e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007720:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007990 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007724:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007726:	4f86      	ldr	r7, [pc, #536]	; (8007940 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007728:	f7fc fa3e 	bl	8003ba8 <lwip_htons>
 800772c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800772e:	6834      	ldr	r4, [r6, #0]
 8007730:	8860      	ldrh	r0, [r4, #2]
 8007732:	f7fc fa39 	bl	8003ba8 <lwip_htons>
 8007736:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007738:	6834      	ldr	r4, [r6, #0]
 800773a:	6860      	ldr	r0, [r4, #4]
 800773c:	f7fc fa37 	bl	8003bae <lwip_htonl>
 8007740:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007742:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007744:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007748:	68a0      	ldr	r0, [r4, #8]
 800774a:	f7fc fa30 	bl	8003bae <lwip_htonl>
 800774e:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007750:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007752:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007754:	89e0      	ldrh	r0, [r4, #14]
 8007756:	f7fc fa27 	bl	8003ba8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800775a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800775c:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800775e:	8998      	ldrh	r0, [r3, #12]
 8007760:	f7fc fa22 	bl	8003ba8 <lwip_htons>
 8007764:	b2c0      	uxtb	r0, r0
 8007766:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800776a:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 800776c:	4a75      	ldr	r2, [pc, #468]	; (8007944 <tcp_input+0x29c>)
 800776e:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007770:	f010 0003 	ands.w	r0, r0, #3
 8007774:	bf18      	it	ne
 8007776:	2001      	movne	r0, #1
 8007778:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800777a:	4973      	ldr	r1, [pc, #460]	; (8007948 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 800777c:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800777e:	4b73      	ldr	r3, [pc, #460]	; (800794c <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007780:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007782:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8007784:	f04f 0a00 	mov.w	sl, #0
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800778c:	2c00      	cmp	r4, #0
 800778e:	d140      	bne.n	8007812 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007790:	4b6f      	ldr	r3, [pc, #444]	; (8007950 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007792:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8007954 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007796:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007798:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007994 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800779c:	e148      	b.n	8007a30 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800779e:	682b      	ldr	r3, [r5, #0]
 80077a0:	b92b      	cbnz	r3, 80077ae <tcp_input+0x106>
 80077a2:	4b6c      	ldr	r3, [pc, #432]	; (8007954 <tcp_input+0x2ac>)
 80077a4:	496c      	ldr	r1, [pc, #432]	; (8007958 <tcp_input+0x2b0>)
 80077a6:	486d      	ldr	r0, [pc, #436]	; (800795c <tcp_input+0x2b4>)
 80077a8:	22b2      	movs	r2, #178	; 0xb2
 80077aa:	f002 fb05 	bl	8009db8 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 80077ae:	f06f 0113 	mvn.w	r1, #19
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7fd ffe6 	bl	8005784 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80077b8:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 80077ba:	8969      	ldrh	r1, [r5, #10]
 80077bc:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80077be:	881c      	ldrh	r4, [r3, #0]
 80077c0:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80077c2:	4249      	negs	r1, r1
 80077c4:	b209      	sxth	r1, r1
 80077c6:	4628      	mov	r0, r5
 80077c8:	f7fd ffdc 	bl	8005784 <pbuf_header>
    if (opt2len > p->next->len) {
 80077cc:	6828      	ldr	r0, [r5, #0]
 80077ce:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80077d0:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	f0c0 8125 	bcc.w	8007a22 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 80077d8:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80077da:	6843      	ldr	r3, [r0, #4]
 80077dc:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80077de:	b209      	sxth	r1, r1
 80077e0:	f7fd ffd0 	bl	8005784 <pbuf_header>
    p->tot_len -= opt2len;
 80077e4:	892b      	ldrh	r3, [r5, #8]
 80077e6:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80077e8:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80077ea:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80077ec:	b12b      	cbz	r3, 80077fa <tcp_input+0x152>
 80077ee:	4b59      	ldr	r3, [pc, #356]	; (8007954 <tcp_input+0x2ac>)
 80077f0:	495b      	ldr	r1, [pc, #364]	; (8007960 <tcp_input+0x2b8>)
 80077f2:	485a      	ldr	r0, [pc, #360]	; (800795c <tcp_input+0x2b4>)
 80077f4:	22cf      	movs	r2, #207	; 0xcf
 80077f6:	f002 fadf 	bl	8009db8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	892a      	ldrh	r2, [r5, #8]
 80077fe:	891b      	ldrh	r3, [r3, #8]
 8007800:	429a      	cmp	r2, r3
 8007802:	d08c      	beq.n	800771e <tcp_input+0x76>
 8007804:	4b53      	ldr	r3, [pc, #332]	; (8007954 <tcp_input+0x2ac>)
 8007806:	4957      	ldr	r1, [pc, #348]	; (8007964 <tcp_input+0x2bc>)
 8007808:	4854      	ldr	r0, [pc, #336]	; (800795c <tcp_input+0x2b4>)
 800780a:	22d0      	movs	r2, #208	; 0xd0
 800780c:	f002 fad4 	bl	8009db8 <iprintf>
 8007810:	e785      	b.n	800771e <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007812:	7d23      	ldrb	r3, [r4, #20]
 8007814:	b92b      	cbnz	r3, 8007822 <tcp_input+0x17a>
 8007816:	4b4f      	ldr	r3, [pc, #316]	; (8007954 <tcp_input+0x2ac>)
 8007818:	4953      	ldr	r1, [pc, #332]	; (8007968 <tcp_input+0x2c0>)
 800781a:	4850      	ldr	r0, [pc, #320]	; (800795c <tcp_input+0x2b4>)
 800781c:	22e2      	movs	r2, #226	; 0xe2
 800781e:	f002 facb 	bl	8009db8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007822:	7d23      	ldrb	r3, [r4, #20]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d105      	bne.n	8007834 <tcp_input+0x18c>
 8007828:	4b4a      	ldr	r3, [pc, #296]	; (8007954 <tcp_input+0x2ac>)
 800782a:	4950      	ldr	r1, [pc, #320]	; (800796c <tcp_input+0x2c4>)
 800782c:	484b      	ldr	r0, [pc, #300]	; (800795c <tcp_input+0x2b4>)
 800782e:	22e3      	movs	r2, #227	; 0xe3
 8007830:	f002 fac2 	bl	8009db8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007834:	7d23      	ldrb	r3, [r4, #20]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d105      	bne.n	8007846 <tcp_input+0x19e>
 800783a:	4b46      	ldr	r3, [pc, #280]	; (8007954 <tcp_input+0x2ac>)
 800783c:	494c      	ldr	r1, [pc, #304]	; (8007970 <tcp_input+0x2c8>)
 800783e:	4847      	ldr	r0, [pc, #284]	; (800795c <tcp_input+0x2b4>)
 8007840:	22e4      	movs	r2, #228	; 0xe4
 8007842:	f002 fab9 	bl	8009db8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007846:	6832      	ldr	r2, [r6, #0]
 8007848:	8b21      	ldrh	r1, [r4, #24]
 800784a:	8813      	ldrh	r3, [r2, #0]
 800784c:	4299      	cmp	r1, r3
 800784e:	68e3      	ldr	r3, [r4, #12]
 8007850:	d169      	bne.n	8007926 <tcp_input+0x27e>
 8007852:	8ae1      	ldrh	r1, [r4, #22]
 8007854:	8852      	ldrh	r2, [r2, #2]
 8007856:	4291      	cmp	r1, r2
 8007858:	d165      	bne.n	8007926 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007860:	4291      	cmp	r1, r2
 8007862:	d160      	bne.n	8007926 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007864:	6821      	ldr	r1, [r4, #0]
 8007866:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800786a:	4291      	cmp	r1, r2
 800786c:	d15b      	bne.n	8007926 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800786e:	429c      	cmp	r4, r3
 8007870:	f040 8406 	bne.w	8008080 <tcp_input+0x9d8>
 8007874:	4b37      	ldr	r3, [pc, #220]	; (8007954 <tcp_input+0x2ac>)
 8007876:	493f      	ldr	r1, [pc, #252]	; (8007974 <tcp_input+0x2cc>)
 8007878:	4838      	ldr	r0, [pc, #224]	; (800795c <tcp_input+0x2b4>)
 800787a:	22ec      	movs	r2, #236	; 0xec
 800787c:	f002 fa9c 	bl	8009db8 <iprintf>
      if (prev != NULL) {
 8007880:	f1ba 0f00 	cmp.w	sl, #0
 8007884:	d007      	beq.n	8007896 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8007886:	68e3      	ldr	r3, [r4, #12]
 8007888:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 800788c:	f8d9 3000 	ldr.w	r3, [r9]
 8007890:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007892:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007896:	68e3      	ldr	r3, [r4, #12]
 8007898:	429c      	cmp	r4, r3
 800789a:	d105      	bne.n	80078a8 <tcp_input+0x200>
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <tcp_input+0x2ac>)
 800789e:	4936      	ldr	r1, [pc, #216]	; (8007978 <tcp_input+0x2d0>)
 80078a0:	482e      	ldr	r0, [pc, #184]	; (800795c <tcp_input+0x2b4>)
 80078a2:	22f4      	movs	r2, #244	; 0xf4
 80078a4:	f002 fa88 	bl	8009db8 <iprintf>
    inseg.next = NULL;
 80078a8:	4b34      	ldr	r3, [pc, #208]	; (800797c <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 80078aa:	8929      	ldrh	r1, [r5, #8]
 80078ac:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 80078ae:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 80078b0:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 80078b2:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 80078b4:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 80078b6:	4832      	ldr	r0, [pc, #200]	; (8007980 <tcp_input+0x2d8>)
    recv_acked = 0;
 80078b8:	4932      	ldr	r1, [pc, #200]	; (8007984 <tcp_input+0x2dc>)
    inseg.p = p;
 80078ba:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 80078bc:	4b32      	ldr	r3, [pc, #200]	; (8007988 <tcp_input+0x2e0>)
    recv_flags = 0;
 80078be:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 80078c0:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 80078c2:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 80078c4:	9a03      	ldr	r2, [sp, #12]
 80078c6:	9105      	str	r1, [sp, #20]
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	f012 0f08 	tst.w	r2, #8
 80078ce:	4680      	mov	r8, r0
 80078d0:	469a      	mov	sl, r3
 80078d2:	d003      	beq.n	80078dc <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 80078d4:	7b6b      	ldrb	r3, [r5, #13]
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80078dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80078de:	4d2b      	ldr	r5, [pc, #172]	; (800798c <tcp_input+0x2e4>)
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 8137 	beq.w	8007b54 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7fe ff4a 	bl	8006780 <tcp_process_refused_data>
 80078ec:	300d      	adds	r0, #13
 80078ee:	d008      	beq.n	8007902 <tcp_input+0x25a>
 80078f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 812e 	beq.w	8007b54 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80078f8:	9b04      	ldr	r3, [sp, #16]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8129 	beq.w	8007b54 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8007902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007904:	b913      	cbnz	r3, 800790c <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8007906:	4620      	mov	r0, r4
 8007908:	f001 f802 	bl	8008910 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800790c:	2400      	movs	r4, #0
 800790e:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8007910:	4d1a      	ldr	r5, [pc, #104]	; (800797c <tcp_input+0x2d4>)
    recv_data = NULL;
 8007912:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8007916:	6868      	ldr	r0, [r5, #4]
 8007918:	b110      	cbz	r0, 8007920 <tcp_input+0x278>
      pbuf_free(inseg.p);
 800791a:	f7fd ff39 	bl	8005790 <pbuf_free>
      inseg.p = NULL;
 800791e:	606c      	str	r4, [r5, #4]
}
 8007920:	b009      	add	sp, #36	; 0x24
 8007922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007926:	46a2      	mov	sl, r4
 8007928:	461c      	mov	r4, r3
 800792a:	e72f      	b.n	800778c <tcp_input+0xe4>
 800792c:	2000439c 	.word	0x2000439c
 8007930:	20004624 	.word	0x20004624
 8007934:	200043a8 	.word	0x200043a8
 8007938:	200043a4 	.word	0x200043a4
 800793c:	200043a0 	.word	0x200043a0
 8007940:	20004370 	.word	0x20004370
 8007944:	20004374 	.word	0x20004374
 8007948:	20007d28 	.word	0x20007d28
 800794c:	200043aa 	.word	0x200043aa
 8007950:	20007d38 	.word	0x20007d38
 8007954:	0800ccec 	.word	0x0800ccec
 8007958:	0800cb36 	.word	0x0800cb36
 800795c:	0800ace9 	.word	0x0800ace9
 8007960:	0800cb46 	.word	0x0800cb46
 8007964:	0800cb52 	.word	0x0800cb52
 8007968:	0800cb71 	.word	0x0800cb71
 800796c:	0800cb98 	.word	0x0800cb98
 8007970:	0800cbc2 	.word	0x0800cbc2
 8007974:	0800cbe9 	.word	0x0800cbe9
 8007978:	0800cc14 	.word	0x0800cc14
 800797c:	20004378 	.word	0x20004378
 8007980:	20004390 	.word	0x20004390
 8007984:	20004388 	.word	0x20004388
 8007988:	2000438c 	.word	0x2000438c
 800798c:	20007d3c 	.word	0x20007d3c
 8007990:	20004394 	.word	0x20004394
 8007994:	0800cc3e 	.word	0x0800cc3e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007998:	7d23      	ldrb	r3, [r4, #20]
 800799a:	2b0a      	cmp	r3, #10
 800799c:	d005      	beq.n	80079aa <tcp_input+0x302>
 800799e:	4653      	mov	r3, sl
 80079a0:	22fe      	movs	r2, #254	; 0xfe
 80079a2:	4649      	mov	r1, r9
 80079a4:	489d      	ldr	r0, [pc, #628]	; (8007c1c <tcp_input+0x574>)
 80079a6:	f002 fa07 	bl	8009db8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80079aa:	6833      	ldr	r3, [r6, #0]
 80079ac:	8b22      	ldrh	r2, [r4, #24]
 80079ae:	8818      	ldrh	r0, [r3, #0]
 80079b0:	4290      	cmp	r0, r2
 80079b2:	d13c      	bne.n	8007a2e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80079b4:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80079b6:	885a      	ldrh	r2, [r3, #2]
 80079b8:	428a      	cmp	r2, r1
 80079ba:	d138      	bne.n	8007a2e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80079bc:	6861      	ldr	r1, [r4, #4]
 80079be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d133      	bne.n	8007a2e <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80079c6:	6821      	ldr	r1, [r4, #0]
 80079c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d12e      	bne.n	8007a2e <tcp_input+0x386>
  if (flags & TCP_RST) {
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	0759      	lsls	r1, r3, #29
 80079d6:	d424      	bmi.n	8007a22 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 80079d8:	079e      	lsls	r6, r3, #30
 80079da:	d513      	bpl.n	8007a04 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80079dc:	f8db 1000 	ldr.w	r1, [fp]
 80079e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e2:	1acb      	subs	r3, r1, r3
 80079e4:	d413      	bmi.n	8007a0e <tcp_input+0x366>
 80079e6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80079e8:	1b9b      	subs	r3, r3, r6
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dc0f      	bgt.n	8007a0e <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	881c      	ldrh	r4, [r3, #0]
 80079f2:	9001      	str	r0, [sp, #4]
 80079f4:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079f6:	4b8a      	ldr	r3, [pc, #552]	; (8007c20 <tcp_input+0x578>)
 80079f8:	4421      	add	r1, r4
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	6838      	ldr	r0, [r7, #0]
 80079fe:	f001 f93b 	bl	8008c78 <tcp_rst>
 8007a02:	e00e      	b.n	8007a22 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8007a04:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8007a06:	bf42      	ittt	mi
 8007a08:	4b86      	ldrmi	r3, [pc, #536]	; (8007c24 <tcp_input+0x57c>)
 8007a0a:	681b      	ldrmi	r3, [r3, #0]
 8007a0c:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007a0e:	9b04      	ldr	r3, [sp, #16]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b133      	cbz	r3, 8007a22 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8007a14:	7ea3      	ldrb	r3, [r4, #26]
 8007a16:	f043 0302 	orr.w	r3, r3, #2
 8007a1a:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 ffad 	bl	800897c <tcp_output>
  pbuf_free(p);
 8007a22:	4628      	mov	r0, r5
}
 8007a24:	b009      	add	sp, #36	; 0x24
 8007a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007a2a:	f7fd beb1 	b.w	8005790 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a2e:	68e4      	ldr	r4, [r4, #12]
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	d1b1      	bne.n	8007998 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a34:	4b7c      	ldr	r3, [pc, #496]	; (8007c28 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8007a36:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a38:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007a3a:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a3e:	4689      	mov	r9, r1
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	d111      	bne.n	8007a6a <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007a46:	8990      	ldrh	r0, [r2, #12]
 8007a48:	f7fc f8ae 	bl	8003ba8 <lwip_htons>
 8007a4c:	0743      	lsls	r3, r0, #29
 8007a4e:	d4e8      	bmi.n	8007a22 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a50:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a52:	9a04      	ldr	r2, [sp, #16]
 8007a54:	f8db 1000 	ldr.w	r1, [fp]
 8007a58:	8810      	ldrh	r0, [r2, #0]
 8007a5a:	881a      	ldrh	r2, [r3, #0]
 8007a5c:	9201      	str	r2, [sp, #4]
 8007a5e:	885b      	ldrh	r3, [r3, #2]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4b6f      	ldr	r3, [pc, #444]	; (8007c20 <tcp_input+0x578>)
 8007a64:	4401      	add	r1, r0
 8007a66:	1d1a      	adds	r2, r3, #4
 8007a68:	e7c8      	b.n	80079fc <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8007a6a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8007a6e:	8853      	ldrh	r3, [r2, #2]
 8007a70:	4283      	cmp	r3, r0
 8007a72:	d107      	bne.n	8007a84 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007a74:	f8d9 3000 	ldr.w	r3, [r9]
 8007a78:	4573      	cmp	r3, lr
 8007a7a:	f000 82dd 	beq.w	8008038 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 82da 	beq.w	8008038 <tcp_input+0x990>
 8007a84:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a86:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8007a8a:	e7d9      	b.n	8007a40 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8007a8c:	0798      	lsls	r0, r3, #30
 8007a8e:	d5c8      	bpl.n	8007a22 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8007a90:	f899 0015 	ldrb.w	r0, [r9, #21]
 8007a94:	f7fe ffb8 	bl	8006a08 <tcp_alloc>
    if (npcb == NULL) {
 8007a98:	4604      	mov	r4, r0
 8007a9a:	b950      	cbnz	r0, 8007ab2 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a9c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0be      	beq.n	8007a22 <tcp_input+0x37a>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007aae:	4798      	blx	r3
 8007ab0:	e7b7      	b.n	8007a22 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007ab2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8007ab6:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007ab8:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007aba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007abe:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007ac0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8007ac4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8007ac6:	7813      	ldrb	r3, [r2, #0]
 8007ac8:	7852      	ldrb	r2, [r2, #1]
 8007aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ace:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007ad4:	f8db 3000 	ldr.w	r3, [fp]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007adc:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007ade:	f7ff f81f 	bl	8006b20 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ae2:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8007ae6:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8007af0:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8007af2:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007af4:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8007af6:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8007af8:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007afc:	f899 3008 	ldrb.w	r3, [r9, #8]
 8007b00:	f003 030c 	and.w	r3, r3, #12
 8007b04:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8007b06:	4b49      	ldr	r3, [pc, #292]	; (8007c2c <tcp_input+0x584>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	60e2      	str	r2, [r4, #12]
 8007b0c:	601c      	str	r4, [r3, #0]
 8007b0e:	f001 fa55 	bl	8008fbc <tcp_timer_needed>
 8007b12:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <tcp_input+0x588>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8007b18:	9b06      	ldr	r3, [sp, #24]
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b11b      	cbz	r3, 8007b26 <tcp_input+0x47e>
 8007b1e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007b22:	f7ff fd69 	bl	80075f8 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8007b26:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b28:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007b2a:	89db      	ldrh	r3, [r3, #14]
 8007b2c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b30:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007b32:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b36:	f7fe ffff 	bl	8006b38 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b3a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b3c:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fe2c 	bl	800879c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f43f af69 	beq.w	8007a1c <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7fe fe9d 	bl	800688c <tcp_abandon>
 8007b52:	e766      	b.n	8007a22 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8007b54:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8007b56:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	0759      	lsls	r1, r3, #29
 8007b5c:	d535      	bpl.n	8007bca <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8007b5e:	7d21      	ldrb	r1, [r4, #20]
 8007b60:	2902      	cmp	r1, #2
 8007b62:	d122      	bne.n	8007baa <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8007b64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d109      	bne.n	8007b80 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8007b6c:	f898 3000 	ldrb.w	r3, [r8]
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8007b78:	7ea3      	ldrb	r3, [r4, #26]
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8007b80:	f898 3000 	ldrb.w	r3, [r8]
 8007b84:	0719      	lsls	r1, r3, #28
 8007b86:	f140 81ed 	bpl.w	8007f64 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007b8a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b8e:	b11b      	cbz	r3, 8007b98 <tcp_input+0x4f0>
 8007b90:	f06f 010d 	mvn.w	r1, #13
 8007b94:	6920      	ldr	r0, [r4, #16]
 8007b96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4824      	ldr	r0, [pc, #144]	; (8007c2c <tcp_input+0x584>)
 8007b9c:	f7fe fcde 	bl	800655c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f7fd fc6e 	bl	8005484 <memp_free>
 8007ba8:	e6b0      	b.n	800790c <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8007baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007bac:	f8db 3000 	ldr.w	r3, [fp]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	f000 825a 	beq.w	800806a <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	d4e2      	bmi.n	8007b80 <tcp_input+0x4d8>
 8007bba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dcde      	bgt.n	8007b80 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007bc2:	7ea3      	ldrb	r3, [r4, #26]
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	e7d9      	b.n	8007b7e <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007bca:	f013 0102 	ands.w	r1, r3, #2
 8007bce:	d003      	beq.n	8007bd8 <tcp_input+0x530>
 8007bd0:	7d22      	ldrb	r2, [r4, #20]
 8007bd2:	3a02      	subs	r2, #2
 8007bd4:	2a01      	cmp	r2, #1
 8007bd6:	d8f4      	bhi.n	8007bc2 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007bd8:	7ea2      	ldrb	r2, [r4, #26]
 8007bda:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8007bdc:	bf5e      	ittt	pl
 8007bde:	4a11      	ldrpl	r2, [pc, #68]	; (8007c24 <tcp_input+0x57c>)
 8007be0:	6812      	ldrpl	r2, [r2, #0]
 8007be2:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8007be4:	2200      	movs	r2, #0
 8007be6:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8007bea:	9a06      	ldr	r2, [sp, #24]
 8007bec:	8812      	ldrh	r2, [r2, #0]
 8007bee:	b13a      	cbz	r2, 8007c00 <tcp_input+0x558>
 8007bf0:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007bf4:	9107      	str	r1, [sp, #28]
 8007bf6:	9306      	str	r3, [sp, #24]
 8007bf8:	f7ff fcfe 	bl	80075f8 <tcp_parseopt.isra.1.part.2>
 8007bfc:	9907      	ldr	r1, [sp, #28]
 8007bfe:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8007c00:	7d22      	ldrb	r2, [r4, #20]
 8007c02:	3a02      	subs	r2, #2
 8007c04:	2a07      	cmp	r2, #7
 8007c06:	d8bb      	bhi.n	8007b80 <tcp_input+0x4d8>
 8007c08:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007c0c:	00940014 	.word	0x00940014
 8007c10:	010000fc 	.word	0x010000fc
 8007c14:	00fc014a 	.word	0x00fc014a
 8007c18:	01830164 	.word	0x01830164
 8007c1c:	0800ace9 	.word	0x0800ace9
 8007c20:	20004634 	.word	0x20004634
 8007c24:	20007d2c 	.word	0x20007d2c
 8007c28:	20007d30 	.word	0x20007d30
 8007c2c:	20007d28 	.word	0x20007d28
 8007c30:	20007d24 	.word	0x20007d24
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007c34:	f003 0212 	and.w	r2, r3, #18
 8007c38:	2a12      	cmp	r2, #18
 8007c3a:	d15e      	bne.n	8007cfa <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8007c3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	3201      	adds	r2, #1
 8007c42:	428a      	cmp	r2, r1
 8007c44:	d159      	bne.n	8007cfa <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8007c46:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8007c4a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8007c4c:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8007c4e:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8007c50:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007c52:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007c54:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8007c56:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007c58:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007c5a:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8007c5c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007c60:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8007c64:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007c66:	18e1      	adds	r1, r4, r3
 8007c68:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8007c6a:	f7fe ff65 	bl	8006b38 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007c6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007c72:	0043      	lsls	r3, r0, #1
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bf38      	it	cc
 8007c78:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007c7a:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007c7c:	0080      	lsls	r0, r0, #2
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	bf28      	it	cs
 8007c82:	4603      	movcs	r3, r0
 8007c84:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007c88:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007c8c:	b933      	cbnz	r3, 8007c9c <tcp_input+0x5f4>
 8007c8e:	4bad      	ldr	r3, [pc, #692]	; (8007f44 <tcp_input+0x89c>)
 8007c90:	49ad      	ldr	r1, [pc, #692]	; (8007f48 <tcp_input+0x8a0>)
 8007c92:	48ae      	ldr	r0, [pc, #696]	; (8007f4c <tcp_input+0x8a4>)
 8007c94:	f240 321a 	movw	r2, #794	; 0x31a
 8007c98:	f002 f88e 	bl	8009db8 <iprintf>
      --pcb->snd_queuelen;
 8007c9c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8007ca0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8007ca8:	b9fe      	cbnz	r6, 8007cea <tcp_input+0x642>
        rseg = pcb->unsent;
 8007caa:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007cac:	b936      	cbnz	r6, 8007cbc <tcp_input+0x614>
 8007cae:	4ba5      	ldr	r3, [pc, #660]	; (8007f44 <tcp_input+0x89c>)
 8007cb0:	49a7      	ldr	r1, [pc, #668]	; (8007f50 <tcp_input+0x8a8>)
 8007cb2:	48a6      	ldr	r0, [pc, #664]	; (8007f4c <tcp_input+0x8a4>)
 8007cb4:	f240 3222 	movw	r2, #802	; 0x322
 8007cb8:	f002 f87e 	bl	8009db8 <iprintf>
        pcb->unsent = rseg->next;
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7fe f9b3 	bl	800602c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8007cc6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007cc8:	b993      	cbnz	r3, 8007cf0 <tcp_input+0x648>
        pcb->rtime = -1;
 8007cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cce:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007cd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f43f af74 	beq.w	8007bc2 <tcp_input+0x51a>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4621      	mov	r1, r4
 8007cde:	6920      	ldr	r0, [r4, #16]
 8007ce0:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8007ce2:	300d      	adds	r0, #13
 8007ce4:	f47f af6d 	bne.w	8007bc2 <tcp_input+0x51a>
 8007ce8:	e610      	b.n	800790c <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8007cea:	6833      	ldr	r3, [r6, #0]
 8007cec:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007cee:	e7e7      	b.n	8007cc0 <tcp_input+0x618>
        pcb->rtime = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8007cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cf8:	e7ea      	b.n	8007cd0 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8007cfa:	06db      	lsls	r3, r3, #27
 8007cfc:	f57f af40 	bpl.w	8007b80 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d00:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d02:	9a04      	ldr	r2, [sp, #16]
 8007d04:	f8db 1000 	ldr.w	r1, [fp]
 8007d08:	8810      	ldrh	r0, [r2, #0]
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	885b      	ldrh	r3, [r3, #2]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4b90      	ldr	r3, [pc, #576]	; (8007f54 <tcp_input+0x8ac>)
 8007d14:	4401      	add	r1, r0
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	6838      	ldr	r0, [r7, #0]
 8007d1a:	f000 ffad 	bl	8008c78 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007d1e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	f63f af2c 	bhi.w	8007b80 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fffd 	bl	8008d2c <tcp_rexmit_rto>
 8007d32:	e725      	b.n	8007b80 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8007d34:	06d8      	lsls	r0, r3, #27
 8007d36:	d557      	bpl.n	8007de8 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007d38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d3a:	6838      	ldr	r0, [r7, #0]
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	42c3      	cmn	r3, r0
 8007d40:	d443      	bmi.n	8007dca <tcp_input+0x722>
 8007d42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007d44:	1ac3      	subs	r3, r0, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dc3f      	bgt.n	8007dca <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007d4e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007d50:	b143      	cbz	r3, 8007d64 <tcp_input+0x6bc>
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	b933      	cbnz	r3, 8007d64 <tcp_input+0x6bc>
 8007d56:	4b7b      	ldr	r3, [pc, #492]	; (8007f44 <tcp_input+0x89c>)
 8007d58:	497f      	ldr	r1, [pc, #508]	; (8007f58 <tcp_input+0x8b0>)
 8007d5a:	487c      	ldr	r0, [pc, #496]	; (8007f4c <tcp_input+0x8a4>)
 8007d5c:	f240 3251 	movw	r2, #849	; 0x351
 8007d60:	f002 f82a 	bl	8009db8 <iprintf>
        if (pcb->listener == NULL) {
 8007d64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007d66:	b91b      	cbnz	r3, 8007d70 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7fe fe05 	bl	8006978 <tcp_abort>
            goto aborted;
 8007d6e:	e5cd      	b.n	800790c <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f8      	beq.n	8007d68 <tcp_input+0x6c0>
 8007d76:	2200      	movs	r2, #0
 8007d78:	4621      	mov	r1, r4
 8007d7a:	6920      	ldr	r0, [r4, #16]
 8007d7c:	4798      	blx	r3
        if (err != ERR_OK) {
 8007d7e:	b110      	cbz	r0, 8007d86 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8007d80:	300d      	adds	r0, #13
 8007d82:	d1f1      	bne.n	8007d68 <tcp_input+0x6c0>
 8007d84:	e5c2      	b.n	800790c <tcp_input+0x264>
        tcp_receive(pcb);
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7fe ff4a 	bl	8006c20 <tcp_receive>
        if (recv_acked != 0) {
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b113      	cbz	r3, 8007d98 <tcp_input+0x6f0>
          recv_acked--;
 8007d92:	9a05      	ldr	r2, [sp, #20]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d98:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007d9a:	f241 111c 	movw	r1, #4380	; 0x111c
 8007d9e:	0053      	lsls	r3, r2, #1
 8007da0:	428b      	cmp	r3, r1
 8007da2:	bf38      	it	cc
 8007da4:	460b      	movcc	r3, r1
 8007da6:	0092      	lsls	r2, r2, #2
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bf28      	it	cs
 8007dac:	4613      	movcs	r3, r2
 8007dae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007db2:	f898 3000 	ldrb.w	r3, [r8]
 8007db6:	069a      	lsls	r2, r3, #26
 8007db8:	f57f aee2 	bpl.w	8007b80 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007dbc:	7ea3      	ldrb	r3, [r4, #26]
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8007dc4:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8007dc6:	7523      	strb	r3, [r4, #20]
 8007dc8:	e6da      	b.n	8007b80 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dca:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dcc:	9a04      	ldr	r2, [sp, #16]
 8007dce:	f8db 1000 	ldr.w	r1, [fp]
 8007dd2:	8816      	ldrh	r6, [r2, #0]
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	9201      	str	r2, [sp, #4]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	4b5d      	ldr	r3, [pc, #372]	; (8007f54 <tcp_input+0x8ac>)
 8007dde:	4431      	add	r1, r6
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	f000 ff49 	bl	8008c78 <tcp_rst>
 8007de6:	e6cb      	b.n	8007b80 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007de8:	2900      	cmp	r1, #0
 8007dea:	f43f aec9 	beq.w	8007b80 <tcp_input+0x4d8>
 8007dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df0:	f8db 2000 	ldr.w	r2, [fp]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4293      	cmp	r3, r2
 8007df8:	f47f aec2 	bne.w	8007b80 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 ffb1 	bl	8008d64 <tcp_rexmit>
 8007e02:	e6bd      	b.n	8007b80 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7fe ff0b 	bl	8006c20 <tcp_receive>
 8007e0a:	e7d2      	b.n	8007db2 <tcp_input+0x70a>
    tcp_receive(pcb);
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f7fe ff07 	bl	8006c20 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007e12:	f898 3000 	ldrb.w	r3, [r8]
 8007e16:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8007e1e:	d031      	beq.n	8007e84 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e20:	f013 0f10 	tst.w	r3, #16
 8007e24:	7ea3      	ldrb	r3, [r4, #26]
 8007e26:	d028      	beq.n	8007e7a <tcp_input+0x7d2>
 8007e28:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4291      	cmp	r1, r2
 8007e2e:	d124      	bne.n	8007e7a <tcp_input+0x7d2>
 8007e30:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007e32:	bb12      	cbnz	r2, 8007e7a <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8007e34:	f043 0302 	orr.w	r3, r3, #2
 8007e38:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7fe f98c 	bl	8006158 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007e40:	f8d9 3000 	ldr.w	r3, [r9]
 8007e44:	429c      	cmp	r4, r3
 8007e46:	d10a      	bne.n	8007e5e <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8007e48:	68e3      	ldr	r3, [r4, #12]
 8007e4a:	f8c9 3000 	str.w	r3, [r9]
 8007e4e:	e008      	b.n	8007e62 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	4294      	cmp	r4, r2
 8007e54:	d102      	bne.n	8007e5c <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8007e56:	68e2      	ldr	r2, [r4, #12]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	e002      	b.n	8007e62 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f6      	bne.n	8007e50 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8007e62:	4b3e      	ldr	r3, [pc, #248]	; (8007f5c <tcp_input+0x8b4>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007e68:	230a      	movs	r3, #10
 8007e6a:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007e6c:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <tcp_input+0x8b8>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	60e2      	str	r2, [r4, #12]
 8007e72:	601c      	str	r4, [r3, #0]
 8007e74:	f001 f8a2 	bl	8008fbc <tcp_timer_needed>
 8007e78:	e682      	b.n	8007b80 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8007e7a:	f043 0302 	orr.w	r3, r3, #2
 8007e7e:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8007e80:	2308      	movs	r3, #8
 8007e82:	e7a0      	b.n	8007dc6 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e84:	06db      	lsls	r3, r3, #27
 8007e86:	f57f ae7b 	bpl.w	8007b80 <tcp_input+0x4d8>
 8007e8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	f47f ae76 	bne.w	8007b80 <tcp_input+0x4d8>
 8007e94:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f47f ae72 	bne.w	8007b80 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8007e9c:	2306      	movs	r3, #6
 8007e9e:	e792      	b.n	8007dc6 <tcp_input+0x71e>
    tcp_receive(pcb);
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7fe febd 	bl	8006c20 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007ea6:	f898 3000 	ldrb.w	r3, [r8]
 8007eaa:	069f      	lsls	r7, r3, #26
 8007eac:	f57f ae68 	bpl.w	8007b80 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007eb0:	7ea3      	ldrb	r3, [r4, #26]
 8007eb2:	f043 0302 	orr.w	r3, r3, #2
 8007eb6:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7fe f94d 	bl	8006158 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d0c0      	beq.n	8007e48 <tcp_input+0x7a0>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0cb      	beq.n	8007e62 <tcp_input+0x7ba>
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	4294      	cmp	r4, r2
 8007ece:	d0c2      	beq.n	8007e56 <tcp_input+0x7ae>
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	e7f8      	b.n	8007ec6 <tcp_input+0x81e>
    tcp_receive(pcb);
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7fe fea3 	bl	8006c20 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	06de      	lsls	r6, r3, #27
 8007ee0:	f57f ae4e 	bpl.w	8007b80 <tcp_input+0x4d8>
 8007ee4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	f47f ae49 	bne.w	8007b80 <tcp_input+0x4d8>
 8007eee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f47f ae45 	bne.w	8007b80 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7fe f92e 	bl	8006158 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007efc:	f8d9 3000 	ldr.w	r3, [r9]
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d0a1      	beq.n	8007e48 <tcp_input+0x7a0>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0ac      	beq.n	8007e62 <tcp_input+0x7ba>
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	4294      	cmp	r4, r2
 8007f0c:	d0a3      	beq.n	8007e56 <tcp_input+0x7ae>
 8007f0e:	4613      	mov	r3, r2
 8007f10:	e7f8      	b.n	8007f04 <tcp_input+0x85c>
    tcp_receive(pcb);
 8007f12:	4620      	mov	r0, r4
 8007f14:	f7fe fe84 	bl	8006c20 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	06d8      	lsls	r0, r3, #27
 8007f1e:	f57f ae2f 	bpl.w	8007b80 <tcp_input+0x4d8>
 8007f22:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f47f ae2a 	bne.w	8007b80 <tcp_input+0x4d8>
 8007f2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f47f ae26 	bne.w	8007b80 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8007f34:	f898 3000 	ldrb.w	r3, [r8]
 8007f38:	f043 0310 	orr.w	r3, r3, #16
 8007f3c:	f888 3000 	strb.w	r3, [r8]
 8007f40:	e61e      	b.n	8007b80 <tcp_input+0x4d8>
 8007f42:	bf00      	nop
 8007f44:	0800ccec 	.word	0x0800ccec
 8007f48:	0800cc8b 	.word	0x0800cc8b
 8007f4c:	0800ace9 	.word	0x0800ace9
 8007f50:	0800cca1 	.word	0x0800cca1
 8007f54:	20004634 	.word	0x20004634
 8007f58:	0800ccb4 	.word	0x0800ccb4
 8007f5c:	20007d24 	.word	0x20007d24
 8007f60:	20007d38 	.word	0x20007d38
        if (recv_acked > 0) {
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	881a      	ldrh	r2, [r3, #0]
 8007f68:	b122      	cbz	r2, 8007f74 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007f6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007f6c:	b9eb      	cbnz	r3, 8007faa <tcp_input+0x902>
          recv_acked = 0;
 8007f6e:	9a05      	ldr	r2, [sp, #20]
 8007f70:	2300      	movs	r3, #0
 8007f72:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7ff fb77 	bl	8007668 <tcp_input_delayed_close>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f47f acc6 	bne.w	800790c <tcp_input+0x264>
        if (recv_data != NULL) {
 8007f80:	f8da 3000 	ldr.w	r3, [sl]
 8007f84:	b33b      	cbz	r3, 8007fd6 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007f86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007f88:	b133      	cbz	r3, 8007f98 <tcp_input+0x8f0>
 8007f8a:	4b40      	ldr	r3, [pc, #256]	; (800808c <tcp_input+0x9e4>)
 8007f8c:	4940      	ldr	r1, [pc, #256]	; (8008090 <tcp_input+0x9e8>)
 8007f8e:	4841      	ldr	r0, [pc, #260]	; (8008094 <tcp_input+0x9ec>)
 8007f90:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007f94:	f001 ff10 	bl	8009db8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007f98:	7ea3      	ldrb	r3, [r4, #26]
 8007f9a:	f013 0310 	ands.w	r3, r3, #16
 8007f9e:	d00a      	beq.n	8007fb6 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8007fa0:	f8da 0000 	ldr.w	r0, [sl]
 8007fa4:	f7fd fbf4 	bl	8005790 <pbuf_free>
 8007fa8:	e6de      	b.n	8007d68 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007faa:	4621      	mov	r1, r4
 8007fac:	6920      	ldr	r0, [r4, #16]
 8007fae:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007fb0:	300d      	adds	r0, #13
 8007fb2:	d1dc      	bne.n	8007f6e <tcp_input+0x8c6>
 8007fb4:	e4aa      	b.n	800790c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007fb6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8007fba:	b31e      	cbz	r6, 8008004 <tcp_input+0x95c>
 8007fbc:	f8da 2000 	ldr.w	r2, [sl]
 8007fc0:	6920      	ldr	r0, [r4, #16]
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8007fc6:	f110 0f0d 	cmn.w	r0, #13
 8007fca:	f43f ac9f 	beq.w	800790c <tcp_input+0x264>
          if (err != ERR_OK) {
 8007fce:	b110      	cbz	r0, 8007fd6 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8007fd0:	f8da 3000 	ldr.w	r3, [sl]
 8007fd4:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8007fd6:	f898 3000 	ldrb.w	r3, [r8]
 8007fda:	069a      	lsls	r2, r3, #26
 8007fdc:	d505      	bpl.n	8007fea <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8007fde:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007fe0:	b1c3      	cbz	r3, 8008014 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007fe2:	7b5a      	ldrb	r2, [r3, #13]
 8007fe4:	f042 0220 	orr.w	r2, r2, #32
 8007fe8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8007fea:	4b2b      	ldr	r3, [pc, #172]	; (8008098 <tcp_input+0x9f0>)
 8007fec:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8007fee:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8007ff0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007ff2:	f7ff fb39 	bl	8007668 <tcp_input_delayed_close>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f47f ac88 	bne.w	800790c <tcp_input+0x264>
        tcp_output(pcb);
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fcbd 	bl	800897c <tcp_output>
 8008002:	e483      	b.n	800790c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008004:	4633      	mov	r3, r6
 8008006:	f8da 2000 	ldr.w	r2, [sl]
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f7fe fba5 	bl	800675c <tcp_recv_null>
 8008012:	e7d8      	b.n	8007fc6 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008014:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008016:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800801a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800801e:	bf1c      	itt	ne
 8008020:	3301      	addne	r3, #1
 8008022:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008024:	2e00      	cmp	r6, #0
 8008026:	d0e0      	beq.n	8007fea <tcp_input+0x942>
 8008028:	2300      	movs	r3, #0
 800802a:	461a      	mov	r2, r3
 800802c:	4621      	mov	r1, r4
 800802e:	6920      	ldr	r0, [r4, #16]
 8008030:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8008032:	300d      	adds	r0, #13
 8008034:	d1d9      	bne.n	8007fea <tcp_input+0x942>
 8008036:	e469      	b.n	800790c <tcp_input+0x264>
      if (prev != NULL) {
 8008038:	b13c      	cbz	r4, 800804a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800803a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800803e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008040:	4b16      	ldr	r3, [pc, #88]	; (800809c <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008042:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008046:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	0759      	lsls	r1, r3, #29
 8008050:	f53f ace7 	bmi.w	8007a22 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8008054:	06dc      	lsls	r4, r3, #27
 8008056:	f57f ad19 	bpl.w	8007a8c <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	f8db 1000 	ldr.w	r1, [fp]
 8008060:	881c      	ldrh	r4, [r3, #0]
 8008062:	8813      	ldrh	r3, [r2, #0]
 8008064:	e88d 0009 	stmia.w	sp, {r0, r3}
 8008068:	e4c5      	b.n	80079f6 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800806a:	2900      	cmp	r1, #0
 800806c:	f47f ad7e 	bne.w	8007b6c <tcp_input+0x4c4>
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <tcp_input+0x9e4>)
 8008072:	490b      	ldr	r1, [pc, #44]	; (80080a0 <tcp_input+0x9f8>)
 8008074:	4807      	ldr	r0, [pc, #28]	; (8008094 <tcp_input+0x9ec>)
 8008076:	f240 22e7 	movw	r2, #743	; 0x2e7
 800807a:	f001 fe9d 	bl	8009db8 <iprintf>
 800807e:	e575      	b.n	8007b6c <tcp_input+0x4c4>
      if (prev != NULL) {
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	f47f abff 	bne.w	8007886 <tcp_input+0x1de>
 8008088:	e40e      	b.n	80078a8 <tcp_input+0x200>
 800808a:	bf00      	nop
 800808c:	0800ccec 	.word	0x0800ccec
 8008090:	0800ccd2 	.word	0x0800ccd2
 8008094:	0800ace9 	.word	0x0800ace9
 8008098:	20007d3c 	.word	0x20007d3c
 800809c:	20007d30 	.word	0x20007d30
 80080a0:	0800cc6b 	.word	0x0800cc6b

080080a4 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80080a4:	4a02      	ldr	r2, [pc, #8]	; (80080b0 <tcp_trigger_input_pcb_close+0xc>)
 80080a6:	7813      	ldrb	r3, [r2, #0]
 80080a8:	f043 0310 	orr.w	r3, r3, #16
 80080ac:	7013      	strb	r3, [r2, #0]
 80080ae:	4770      	bx	lr
 80080b0:	20004390 	.word	0x20004390

080080b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80080b8:	4294      	cmp	r4, r2
{
 80080ba:	461e      	mov	r6, r3
 80080bc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80080c0:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 80080c2:	d228      	bcs.n	8008116 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80080c4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80080c8:	07ad      	lsls	r5, r5, #30
 80080ca:	d407      	bmi.n	80080dc <tcp_pbuf_prealloc+0x28>
 80080cc:	7e9d      	ldrb	r5, [r3, #26]
 80080ce:	066d      	lsls	r5, r5, #25
 80080d0:	d421      	bmi.n	8008116 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 80080d2:	b119      	cbz	r1, 80080dc <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 80080d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80080d6:	b909      	cbnz	r1, 80080dc <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 80080d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080da:	b1e3      	cbz	r3, 8008116 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80080dc:	f204 231b 	addw	r3, r4, #539	; 0x21b
 80080e0:	f023 0103 	bic.w	r1, r3, #3
 80080e4:	428a      	cmp	r2, r1
 80080e6:	bf28      	it	cs
 80080e8:	460a      	movcs	r2, r1
 80080ea:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80080ec:	2200      	movs	r2, #0
 80080ee:	f7fd fbb9 	bl	8005864 <pbuf_alloc>
  if (p == NULL) {
 80080f2:	4605      	mov	r5, r0
 80080f4:	b168      	cbz	r0, 8008112 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80080f6:	6803      	ldr	r3, [r0, #0]
 80080f8:	b133      	cbz	r3, 8008108 <tcp_pbuf_prealloc+0x54>
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <tcp_pbuf_prealloc+0x68>)
 80080fc:	4908      	ldr	r1, [pc, #32]	; (8008120 <tcp_pbuf_prealloc+0x6c>)
 80080fe:	4809      	ldr	r0, [pc, #36]	; (8008124 <tcp_pbuf_prealloc+0x70>)
 8008100:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008104:	f001 fe58 	bl	8009db8 <iprintf>
  *oversize = p->len - length;
 8008108:	896b      	ldrh	r3, [r5, #10]
 800810a:	1b1b      	subs	r3, r3, r4
 800810c:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800810e:	812c      	strh	r4, [r5, #8]
 8008110:	816c      	strh	r4, [r5, #10]
  return p;
}
 8008112:	4628      	mov	r0, r5
 8008114:	bd70      	pop	{r4, r5, r6, pc}
 8008116:	4621      	mov	r1, r4
 8008118:	e7e8      	b.n	80080ec <tcp_pbuf_prealloc+0x38>
 800811a:	bf00      	nop
 800811c:	0800cfef 	.word	0x0800cfef
 8008120:	0800d022 	.word	0x0800d022
 8008124:	0800ace9 	.word	0x0800ace9

08008128 <tcp_create_segment>:
{
 8008128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	f89d a020 	ldrb.w	sl, [sp, #32]
 8008130:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008132:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008136:	f04f 0003 	mov.w	r0, #3
{
 800813a:	460f      	mov	r7, r1
 800813c:	4616      	mov	r6, r2
 800813e:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008140:	bf14      	ite	ne
 8008142:	2504      	movne	r5, #4
 8008144:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008146:	f7fd f981 	bl	800544c <memp_malloc>
 800814a:	4604      	mov	r4, r0
 800814c:	b928      	cbnz	r0, 800815a <tcp_create_segment+0x32>
    pbuf_free(p);
 800814e:	4638      	mov	r0, r7
 8008150:	f7fd fb1e 	bl	8005790 <pbuf_free>
}
 8008154:	4620      	mov	r0, r4
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800815a:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800815e:	2300      	movs	r3, #0
  seg->p = p;
 8008160:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008164:	893b      	ldrh	r3, [r7, #8]
 8008166:	fa1f fa85 	uxth.w	sl, r5
 800816a:	4553      	cmp	r3, sl
 800816c:	d205      	bcs.n	800817a <tcp_create_segment+0x52>
 800816e:	4b1f      	ldr	r3, [pc, #124]	; (80081ec <tcp_create_segment+0xc4>)
 8008170:	491f      	ldr	r1, [pc, #124]	; (80081f0 <tcp_create_segment+0xc8>)
 8008172:	4820      	ldr	r0, [pc, #128]	; (80081f4 <tcp_create_segment+0xcc>)
 8008174:	22ba      	movs	r2, #186	; 0xba
 8008176:	f001 fe1f 	bl	8009db8 <iprintf>
  seg->len = p->tot_len - optlen;
 800817a:	893b      	ldrh	r3, [r7, #8]
 800817c:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8008180:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8008182:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8008184:	2114      	movs	r1, #20
 8008186:	f7fd fafd 	bl	8005784 <pbuf_header>
 800818a:	4607      	mov	r7, r0
 800818c:	b120      	cbz	r0, 8008198 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 800818e:	4620      	mov	r0, r4
 8008190:	f7fd ff4c 	bl	800602c <tcp_seg_free>
    return NULL;
 8008194:	2400      	movs	r4, #0
 8008196:	e7dd      	b.n	8008154 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008198:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800819a:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800819e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80081a2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80081a6:	f7fb fcff 	bl	8003ba8 <lwip_htons>
 80081aa:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80081ae:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80081b2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80081b6:	f7fb fcf7 	bl	8003ba8 <lwip_htons>
 80081ba:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80081be:	4648      	mov	r0, r9
 80081c0:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80081c4:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80081c6:	f7fb fcf2 	bl	8003bae <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80081ca:	3505      	adds	r5, #5
 80081cc:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80081d0:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80081d4:	b2a8      	uxth	r0, r5
 80081d6:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80081da:	f7fb fce5 	bl	8003ba8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80081de:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80081e0:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 80081e4:	749f      	strb	r7, [r3, #18]
 80081e6:	74df      	strb	r7, [r3, #19]
  return seg;
 80081e8:	e7b4      	b.n	8008154 <tcp_create_segment+0x2c>
 80081ea:	bf00      	nop
 80081ec:	0800cfef 	.word	0x0800cfef
 80081f0:	0800ce77 	.word	0x0800ce77
 80081f4:	0800ace9 	.word	0x0800ace9

080081f8 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80081f8:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80081fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80081fc:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80081fe:	4605      	mov	r5, r0
 8008200:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008202:	2001      	movs	r0, #1
 8008204:	2200      	movs	r2, #0
 8008206:	f7fd fb2d 	bl	8005864 <pbuf_alloc>
  if (p != NULL) {
 800820a:	4606      	mov	r6, r0
 800820c:	b340      	cbz	r0, 8008260 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800820e:	8943      	ldrh	r3, [r0, #10]
 8008210:	2b13      	cmp	r3, #19
 8008212:	dc05      	bgt.n	8008220 <tcp_output_alloc_header.constprop.0+0x28>
 8008214:	4b13      	ldr	r3, [pc, #76]	; (8008264 <tcp_output_alloc_header.constprop.0+0x6c>)
 8008216:	4914      	ldr	r1, [pc, #80]	; (8008268 <tcp_output_alloc_header.constprop.0+0x70>)
 8008218:	4814      	ldr	r0, [pc, #80]	; (800826c <tcp_output_alloc_header.constprop.0+0x74>)
 800821a:	2273      	movs	r2, #115	; 0x73
 800821c:	f001 fdcc 	bl	8009db8 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8008220:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8008222:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008224:	f7fb fcc0 	bl	8003ba8 <lwip_htons>
 8008228:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800822a:	8b28      	ldrh	r0, [r5, #24]
 800822c:	f7fb fcbc 	bl	8003ba8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8008230:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008232:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008234:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008236:	f7fb fcba 	bl	8003bae <lwip_htonl>
 800823a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800823c:	f245 0010 	movw	r0, #20496	; 0x5010
 8008240:	f7fb fcb2 	bl	8003ba8 <lwip_htons>
 8008244:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008246:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8008248:	f7fb fcae 	bl	8003ba8 <lwip_htons>
    tcphdr->chksum = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	7423      	strb	r3, [r4, #16]
 8008250:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008252:	74a3      	strb	r3, [r4, #18]
 8008254:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008256:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8008258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800825a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800825c:	4413      	add	r3, r2
 800825e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8008260:	4630      	mov	r0, r6
 8008262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008264:	0800cfef 	.word	0x0800cfef
 8008268:	0800cfc1 	.word	0x0800cfc1
 800826c:	0800ace9 	.word	0x0800ace9

08008270 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	b091      	sub	sp, #68	; 0x44
 8008276:	4605      	mov	r5, r0
 8008278:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008280:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 8008284:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008286:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008288:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	4293      	cmp	r3, r2
 800828e:	bf28      	it	cs
 8008290:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf08      	it	eq
 8008296:	4613      	moveq	r3, r2
 8008298:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800829a:	b959      	cbnz	r1, 80082b4 <tcp_write+0x44>
 800829c:	4ba1      	ldr	r3, [pc, #644]	; (8008524 <tcp_write+0x2b4>)
 800829e:	49a2      	ldr	r1, [pc, #648]	; (8008528 <tcp_write+0x2b8>)
 80082a0:	48a2      	ldr	r0, [pc, #648]	; (800852c <tcp_write+0x2bc>)
 80082a2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80082a6:	f001 fd87 	bl	8009db8 <iprintf>
 80082aa:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80082ae:	b011      	add	sp, #68	; 0x44
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80082b4:	7d2b      	ldrb	r3, [r5, #20]
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d003      	beq.n	80082c2 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 80082ba:	3b02      	subs	r3, #2
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f200 8254 	bhi.w	800876a <tcp_write+0x4fa>
  } else if (len == 0) {
 80082c2:	9b05      	ldr	r3, [sp, #20]
 80082c4:	b1db      	cbz	r3, 80082fe <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 80082c6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80082ca:	9a05      	ldr	r2, [sp, #20]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d206      	bcs.n	80082de <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 80082d0:	7eab      	ldrb	r3, [r5, #26]
 80082d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082d6:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	e7e7      	b.n	80082ae <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80082de:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 80082e2:	2a08      	cmp	r2, #8
 80082e4:	d8f4      	bhi.n	80082d0 <tcp_write+0x60>
 80082e6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 80082e8:	b30a      	cbz	r2, 800832e <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80082ea:	b943      	cbnz	r3, 80082fe <tcp_write+0x8e>
 80082ec:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80082ee:	b933      	cbnz	r3, 80082fe <tcp_write+0x8e>
 80082f0:	4b8c      	ldr	r3, [pc, #560]	; (8008524 <tcp_write+0x2b4>)
 80082f2:	498f      	ldr	r1, [pc, #572]	; (8008530 <tcp_write+0x2c0>)
 80082f4:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80082f8:	488c      	ldr	r0, [pc, #560]	; (800852c <tcp_write+0x2bc>)
 80082fa:	f001 fd5d 	bl	8009db8 <iprintf>
  if (pcb->unsent != NULL) {
 80082fe:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8008300:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008304:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8008306:	b9dc      	cbnz	r4, 8008340 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008308:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 800830c:	f1b8 0f00 	cmp.w	r8, #0
 8008310:	f000 8103 	beq.w	800851a <tcp_write+0x2aa>
 8008314:	4b83      	ldr	r3, [pc, #524]	; (8008524 <tcp_write+0x2b4>)
 8008316:	4987      	ldr	r1, [pc, #540]	; (8008534 <tcp_write+0x2c4>)
 8008318:	4884      	ldr	r0, [pc, #528]	; (800852c <tcp_write+0x2bc>)
 800831a:	f240 2225 	movw	r2, #549	; 0x225
 800831e:	f001 fd4b 	bl	8009db8 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008322:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 8008324:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 8008326:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8008328:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800832a:	46a1      	mov	r9, r4
 800832c:	e094      	b.n	8008458 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800832e:	b913      	cbnz	r3, 8008336 <tcp_write+0xc6>
 8008330:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0e3      	beq.n	80082fe <tcp_write+0x8e>
 8008336:	4b7b      	ldr	r3, [pc, #492]	; (8008524 <tcp_write+0x2b4>)
 8008338:	497f      	ldr	r1, [pc, #508]	; (8008538 <tcp_write+0x2c8>)
 800833a:	f240 1259 	movw	r2, #345	; 0x159
 800833e:	e7db      	b.n	80082f8 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8008340:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008342:	f8d7 b000 	ldr.w	fp, [r7]
 8008346:	f1bb 0f00 	cmp.w	fp, #0
 800834a:	f040 80b6 	bne.w	80084ba <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800834e:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008350:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008352:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008356:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008358:	bf14      	ite	ne
 800835a:	2404      	movne	r4, #4
 800835c:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800835e:	4423      	add	r3, r4
 8008360:	429a      	cmp	r2, r3
 8008362:	da06      	bge.n	8008372 <tcp_write+0x102>
 8008364:	4b6f      	ldr	r3, [pc, #444]	; (8008524 <tcp_write+0x2b4>)
 8008366:	4975      	ldr	r1, [pc, #468]	; (800853c <tcp_write+0x2cc>)
 8008368:	4870      	ldr	r0, [pc, #448]	; (800852c <tcp_write+0x2bc>)
 800836a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800836e:	f001 fd23 	bl	8009db8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008372:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8008376:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8008378:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 800837c:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008380:	eba3 0909 	sub.w	r9, r3, r9
 8008384:	eba9 0904 	sub.w	r9, r9, r4
 8008388:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800838c:	2e00      	cmp	r6, #0
 800838e:	f000 8096 	beq.w	80084be <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008392:	45b1      	cmp	r9, r6
 8008394:	d206      	bcs.n	80083a4 <tcp_write+0x134>
 8008396:	4b63      	ldr	r3, [pc, #396]	; (8008524 <tcp_write+0x2b4>)
 8008398:	4969      	ldr	r1, [pc, #420]	; (8008540 <tcp_write+0x2d0>)
 800839a:	4864      	ldr	r0, [pc, #400]	; (800852c <tcp_write+0x2bc>)
 800839c:	f240 12d9 	movw	r2, #473	; 0x1d9
 80083a0:	f001 fd0a 	bl	8009db8 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80083a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80083a8:	9a05      	ldr	r2, [sp, #20]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	bf28      	it	cs
 80083ae:	461a      	movcs	r2, r3
 80083b0:	454a      	cmp	r2, r9
 80083b2:	4616      	mov	r6, r2
 80083b4:	bfa8      	it	ge
 80083b6:	464e      	movge	r6, r9
      oversize -= oversize_used;
 80083b8:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 80083ba:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 80083be:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80083c2:	fa1f f989 	uxth.w	r9, r9
 80083c6:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80083c8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80083cc:	b153      	cbz	r3, 80083e4 <tcp_write+0x174>
 80083ce:	9b05      	ldr	r3, [sp, #20]
 80083d0:	429e      	cmp	r6, r3
 80083d2:	f000 81cd 	beq.w	8008770 <tcp_write+0x500>
 80083d6:	4b53      	ldr	r3, [pc, #332]	; (8008524 <tcp_write+0x2b4>)
 80083d8:	495a      	ldr	r1, [pc, #360]	; (8008544 <tcp_write+0x2d4>)
 80083da:	4854      	ldr	r0, [pc, #336]	; (800852c <tcp_write+0x2bc>)
 80083dc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80083e0:	f001 fcea 	bl	8009db8 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	429e      	cmp	r6, r3
 80083e8:	f080 81c2 	bcs.w	8008770 <tcp_write+0x500>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	f000 808f 	beq.w	8008512 <tcp_write+0x2a2>
 80083f4:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	f000 808a 	beq.w	8008514 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008400:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008404:	454c      	cmp	r4, r9
 8008406:	bfa8      	it	ge
 8008408:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800840a:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800840c:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008410:	d557      	bpl.n	80084c2 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008412:	2301      	movs	r3, #1
 8008414:	9302      	str	r3, [sp, #8]
 8008416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	464a      	mov	r2, r9
 800841c:	9500      	str	r5, [sp, #0]
 800841e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008422:	4641      	mov	r1, r8
 8008424:	2004      	movs	r0, #4
 8008426:	f7ff fe45 	bl	80080b4 <tcp_pbuf_prealloc>
 800842a:	4681      	mov	r9, r0
 800842c:	2800      	cmp	r0, #0
 800842e:	f000 8199 	beq.w	8008764 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	6840      	ldr	r0, [r0, #4]
 8008436:	4642      	mov	r2, r8
 8008438:	1999      	adds	r1, r3, r6
 800843a:	f001 fcaa 	bl	8009d92 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800843e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008440:	f7fd fb5c 	bl	8005afc <pbuf_clen>
 8008444:	9b06      	ldr	r3, [sp, #24]
 8008446:	4403      	add	r3, r0
 8008448:	b29b      	uxth	r3, r3
 800844a:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 800844c:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8008450:	44b0      	add	r8, r6
 8008452:	fa1f f888 	uxth.w	r8, r8
 8008456:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	f04f 0b00 	mov.w	fp, #0
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008466:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8008468:	9b05      	ldr	r3, [sp, #20]
 800846a:	4598      	cmp	r8, r3
 800846c:	d370      	bcc.n	8008550 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 800846e:	b146      	cbz	r6, 8008482 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8008470:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8008474:	f1b8 0f00 	cmp.w	r8, #0
 8008478:	f040 8110 	bne.w	800869c <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 800847c:	893b      	ldrh	r3, [r7, #8]
 800847e:	441e      	add	r6, r3
 8008480:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8008482:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008486:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	f000 811e 	beq.w	80086ce <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008492:	b937      	cbnz	r7, 80084a2 <tcp_write+0x232>
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <tcp_write+0x2b4>)
 8008496:	492c      	ldr	r1, [pc, #176]	; (8008548 <tcp_write+0x2d8>)
 8008498:	4824      	ldr	r0, [pc, #144]	; (800852c <tcp_write+0x2bc>)
 800849a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800849e:	f001 fc8b 	bl	8009db8 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 80084a2:	4649      	mov	r1, r9
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fd fb4d 	bl	8005b44 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 80084b4:	f8c7 b000 	str.w	fp, [r7]
 80084b8:	e12b      	b.n	8008712 <tcp_write+0x4a2>
 80084ba:	465f      	mov	r7, fp
 80084bc:	e741      	b.n	8008342 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80084be:	4634      	mov	r4, r6
 80084c0:	e782      	b.n	80083c8 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 9000 	ldr.w	r9, [r3]
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	d112      	bne.n	80084f4 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80084ce:	7b1a      	ldrb	r2, [r3, #12]
 80084d0:	2a01      	cmp	r2, #1
 80084d2:	d111      	bne.n	80084f8 <tcp_write+0x288>
 80084d4:	895a      	ldrh	r2, [r3, #10]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	4413      	add	r3, r2
 80084da:	9a08      	ldr	r2, [sp, #32]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d10b      	bne.n	80084f8 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80084e0:	b136      	cbz	r6, 80084f0 <tcp_write+0x280>
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <tcp_write+0x2b4>)
 80084e4:	4919      	ldr	r1, [pc, #100]	; (800854c <tcp_write+0x2dc>)
 80084e6:	4811      	ldr	r0, [pc, #68]	; (800852c <tcp_write+0x2bc>)
 80084e8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80084ec:	f001 fc64 	bl	8009db8 <iprintf>
          extendlen = seglen;
 80084f0:	46c2      	mov	sl, r8
 80084f2:	e7ad      	b.n	8008450 <tcp_write+0x1e0>
 80084f4:	464b      	mov	r3, r9
 80084f6:	e7e5      	b.n	80084c4 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80084f8:	2201      	movs	r2, #1
 80084fa:	4641      	mov	r1, r8
 80084fc:	2004      	movs	r0, #4
 80084fe:	f7fd f9b1 	bl	8005864 <pbuf_alloc>
 8008502:	4681      	mov	r9, r0
 8008504:	2800      	cmp	r0, #0
 8008506:	f000 812d 	beq.w	8008764 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	4433      	add	r3, r6
 800850e:	6043      	str	r3, [r0, #4]
 8008510:	e796      	b.n	8008440 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8008512:	46ca      	mov	sl, r9
 8008514:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8008516:	46d1      	mov	r9, sl
 8008518:	e79e      	b.n	8008458 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800851a:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800851c:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800851e:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8008520:	46c1      	mov	r9, r8
 8008522:	e799      	b.n	8008458 <tcp_write+0x1e8>
 8008524:	0800cfef 	.word	0x0800cfef
 8008528:	0800d036 	.word	0x0800d036
 800852c:	0800ace9 	.word	0x0800ace9
 8008530:	0800d067 	.word	0x0800d067
 8008534:	0800d151 	.word	0x0800d151
 8008538:	0800d0a1 	.word	0x0800d0a1
 800853c:	0800d0d3 	.word	0x0800d0d3
 8008540:	0800d0ea 	.word	0x0800d0ea
 8008544:	0800d10a 	.word	0x0800d10a
 8008548:	0800d1dd 	.word	0x0800d1dd
 800854c:	0800d128 	.word	0x0800d128
    u16_t left = len - pos;
 8008550:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008552:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008554:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8008558:	b29b      	uxth	r3, r3
 800855a:	4293      	cmp	r3, r2
 800855c:	bf28      	it	cs
 800855e:	4613      	movcs	r3, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008566:	b363      	cbz	r3, 80085c2 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008568:	fabb f38b 	clz	r3, fp
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	9302      	str	r3, [sp, #8]
 8008570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	9500      	str	r5, [sp, #0]
 8008576:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800857a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800857c:	2000      	movs	r0, #0
 800857e:	f7ff fd99 	bl	80080b4 <tcp_pbuf_prealloc>
 8008582:	4604      	mov	r4, r0
 8008584:	2800      	cmp	r0, #0
 8008586:	d03b      	beq.n	8008600 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008588:	8943      	ldrh	r3, [r0, #10]
 800858a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858c:	4293      	cmp	r3, r2
 800858e:	d206      	bcs.n	800859e <tcp_write+0x32e>
 8008590:	4b7b      	ldr	r3, [pc, #492]	; (8008780 <tcp_write+0x510>)
 8008592:	497c      	ldr	r1, [pc, #496]	; (8008784 <tcp_write+0x514>)
 8008594:	487c      	ldr	r0, [pc, #496]	; (8008788 <tcp_write+0x518>)
 8008596:	f240 2241 	movw	r2, #577	; 0x241
 800859a:	f001 fc0d 	bl	8009db8 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a2:	6860      	ldr	r0, [r4, #4]
 80085a4:	eb03 0108 	add.w	r1, r3, r8
 80085a8:	f001 fbf3 	bl	8009d92 <memcpy>
    queuelen += pbuf_clen(p);
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7fd faa5 	bl	8005afc <pbuf_clen>
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	4403      	add	r3, r0
 80085b6:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80085b8:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 80085ba:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80085bc:	d949      	bls.n	8008652 <tcp_write+0x3e2>
      pbuf_free(p);
 80085be:	4620      	mov	r0, r4
 80085c0:	e01c      	b.n	80085fc <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80085c2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80085c6:	b133      	cbz	r3, 80085d6 <tcp_write+0x366>
 80085c8:	4b6d      	ldr	r3, [pc, #436]	; (8008780 <tcp_write+0x510>)
 80085ca:	4970      	ldr	r1, [pc, #448]	; (800878c <tcp_write+0x51c>)
 80085cc:	486e      	ldr	r0, [pc, #440]	; (8008788 <tcp_write+0x518>)
 80085ce:	f240 224b 	movw	r2, #587	; 0x24b
 80085d2:	f001 fbf1 	bl	8009db8 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80085d6:	2201      	movs	r2, #1
 80085d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085da:	2000      	movs	r0, #0
 80085dc:	f7fd f942 	bl	8005864 <pbuf_alloc>
 80085e0:	b170      	cbz	r0, 8008600 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80085e2:	9a08      	ldr	r2, [sp, #32]
 80085e4:	900d      	str	r0, [sp, #52]	; 0x34
 80085e6:	4442      	add	r2, r8
 80085e8:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80085ea:	2200      	movs	r2, #0
 80085ec:	4611      	mov	r1, r2
 80085ee:	4610      	mov	r0, r2
 80085f0:	f7fd f938 	bl	8005864 <pbuf_alloc>
 80085f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f6:	4604      	mov	r4, r0
 80085f8:	bb38      	cbnz	r0, 800864a <tcp_write+0x3da>
        pbuf_free(p2);
 80085fa:	4618      	mov	r0, r3
      pbuf_free(p);
 80085fc:	f7fd f8c8 	bl	8005790 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8008600:	7eab      	ldrb	r3, [r5, #26]
 8008602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008606:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8008608:	f1b9 0f00 	cmp.w	r9, #0
 800860c:	d002      	beq.n	8008614 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 800860e:	4648      	mov	r0, r9
 8008610:	f7fd f8be 	bl	8005790 <pbuf_free>
  if (queue != NULL) {
 8008614:	f1bb 0f00 	cmp.w	fp, #0
 8008618:	d002      	beq.n	8008620 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 800861a:	4658      	mov	r0, fp
 800861c:	f7fd fd14 	bl	8006048 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008620:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008624:	2b00      	cmp	r3, #0
 8008626:	f43f ae57 	beq.w	80082d8 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800862a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f ae53 	bne.w	80082d8 <tcp_write+0x68>
 8008632:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008634:	2b00      	cmp	r3, #0
 8008636:	f47f ae4f 	bne.w	80082d8 <tcp_write+0x68>
 800863a:	4b51      	ldr	r3, [pc, #324]	; (8008780 <tcp_write+0x510>)
 800863c:	4954      	ldr	r1, [pc, #336]	; (8008790 <tcp_write+0x520>)
 800863e:	4852      	ldr	r0, [pc, #328]	; (8008788 <tcp_write+0x518>)
 8008640:	f240 3202 	movw	r2, #770	; 0x302
 8008644:	f001 fbb8 	bl	8009db8 <iprintf>
 8008648:	e646      	b.n	80082d8 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 800864a:	4619      	mov	r1, r3
 800864c:	f7fd fa7a 	bl	8005b44 <pbuf_cat>
 8008650:	e7ac      	b.n	80085ac <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008652:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008654:	2200      	movs	r2, #0
 8008656:	4621      	mov	r1, r4
 8008658:	9200      	str	r2, [sp, #0]
 800865a:	4443      	add	r3, r8
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fd63 	bl	8008128 <tcp_create_segment>
 8008662:	4604      	mov	r4, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d0cb      	beq.n	8008600 <tcp_write+0x390>
    if (queue == NULL) {
 8008668:	f1bb 0f00 	cmp.w	fp, #0
 800866c:	d010      	beq.n	8008690 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800866e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008670:	b933      	cbnz	r3, 8008680 <tcp_write+0x410>
 8008672:	4b43      	ldr	r3, [pc, #268]	; (8008780 <tcp_write+0x510>)
 8008674:	4947      	ldr	r1, [pc, #284]	; (8008794 <tcp_write+0x524>)
 8008676:	4844      	ldr	r0, [pc, #272]	; (8008788 <tcp_write+0x518>)
 8008678:	f240 2285 	movw	r2, #645	; 0x285
 800867c:	f001 fb9c 	bl	8009db8 <iprintf>
      prev_seg->next = seg;
 8008680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008682:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8008684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008686:	940b      	str	r4, [sp, #44]	; 0x2c
 8008688:	4498      	add	r8, r3
 800868a:	fa1f f888 	uxth.w	r8, r8
 800868e:	e6eb      	b.n	8008468 <tcp_write+0x1f8>
 8008690:	4683      	mov	fp, r0
 8008692:	e7f7      	b.n	8008684 <tcp_write+0x414>
  if (oversize_used > 0) {
 8008694:	f04f 0a00 	mov.w	sl, #0
 8008698:	46d1      	mov	r9, sl
 800869a:	e6e9      	b.n	8008470 <tcp_write+0x200>
      p->tot_len += oversize_used;
 800869c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80086a0:	4433      	add	r3, r6
 80086a2:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	b96b      	cbnz	r3, 80086c8 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80086ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086b0:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 80086b4:	9908      	ldr	r1, [sp, #32]
 80086b6:	4418      	add	r0, r3
 80086b8:	4632      	mov	r2, r6
 80086ba:	f001 fb6a 	bl	8009d92 <memcpy>
        p->len += oversize_used;
 80086be:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80086c2:	4433      	add	r3, r6
 80086c4:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80086c8:	f8d8 8000 	ldr.w	r8, [r8]
 80086cc:	e6d2      	b.n	8008474 <tcp_write+0x204>
  } else if (extendlen > 0) {
 80086ce:	f1ba 0f00 	cmp.w	sl, #0
 80086d2:	d019      	beq.n	8008708 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80086d4:	b10f      	cbz	r7, 80086da <tcp_write+0x46a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	b933      	cbnz	r3, 80086e8 <tcp_write+0x478>
 80086da:	4b29      	ldr	r3, [pc, #164]	; (8008780 <tcp_write+0x510>)
 80086dc:	492e      	ldr	r1, [pc, #184]	; (8008798 <tcp_write+0x528>)
 80086de:	482a      	ldr	r0, [pc, #168]	; (8008788 <tcp_write+0x518>)
 80086e0:	f240 22c1 	movw	r2, #705	; 0x2c1
 80086e4:	f001 fb68 	bl	8009db8 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	891a      	ldrh	r2, [r3, #8]
 80086ec:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 80086ee:	4452      	add	r2, sl
 80086f0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80086f2:	b939      	cbnz	r1, 8008704 <tcp_write+0x494>
    p->len += extendlen;
 80086f4:	895a      	ldrh	r2, [r3, #10]
 80086f6:	4452      	add	r2, sl
 80086f8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80086fa:	893b      	ldrh	r3, [r7, #8]
 80086fc:	449a      	add	sl, r3
 80086fe:	f8a7 a008 	strh.w	sl, [r7, #8]
 8008702:	e6d7      	b.n	80084b4 <tcp_write+0x244>
      p->tot_len += extendlen;
 8008704:	460b      	mov	r3, r1
 8008706:	e7f0      	b.n	80086ea <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8008708:	2f00      	cmp	r7, #0
 800870a:	f47f aed3 	bne.w	80084b4 <tcp_write+0x244>
    pcb->unsent = queue;
 800870e:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8008712:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008714:	9a05      	ldr	r2, [sp, #20]
 8008716:	4413      	add	r3, r2
 8008718:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 800871a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8008724:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008728:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	b153      	cbz	r3, 8008746 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008730:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008732:	b943      	cbnz	r3, 8008746 <tcp_write+0x4d6>
 8008734:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008736:	b933      	cbnz	r3, 8008746 <tcp_write+0x4d6>
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <tcp_write+0x510>)
 800873a:	4915      	ldr	r1, [pc, #84]	; (8008790 <tcp_write+0x520>)
 800873c:	4812      	ldr	r0, [pc, #72]	; (8008788 <tcp_write+0x518>)
 800873e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008742:	f001 fb39 	bl	8009db8 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008746:	b15c      	cbz	r4, 8008760 <tcp_write+0x4f0>
 8008748:	68e4      	ldr	r4, [r4, #12]
 800874a:	b14c      	cbz	r4, 8008760 <tcp_write+0x4f0>
 800874c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800874e:	f013 0602 	ands.w	r6, r3, #2
 8008752:	d105      	bne.n	8008760 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008754:	2008      	movs	r0, #8
 8008756:	89a5      	ldrh	r5, [r4, #12]
 8008758:	f7fb fa26 	bl	8003ba8 <lwip_htons>
 800875c:	4328      	orrs	r0, r5
 800875e:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8008760:	2000      	movs	r0, #0
 8008762:	e5a4      	b.n	80082ae <tcp_write+0x3e>
      p->tot_len += extendlen;
 8008764:	f04f 0900 	mov.w	r9, #0
 8008768:	e74a      	b.n	8008600 <tcp_write+0x390>
    return ERR_CONN;
 800876a:	f06f 000a 	mvn.w	r0, #10
 800876e:	e59e      	b.n	80082ae <tcp_write+0x3e>
  if (oversize_used > 0) {
 8008770:	2e00      	cmp	r6, #0
 8008772:	d18f      	bne.n	8008694 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8008774:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008778:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800877c:	e69a      	b.n	80084b4 <tcp_write+0x244>
 800877e:	bf00      	nop
 8008780:	0800cfef 	.word	0x0800cfef
 8008784:	0800d180 	.word	0x0800d180
 8008788:	0800ace9 	.word	0x0800ace9
 800878c:	0800d1be 	.word	0x0800d1be
 8008790:	0800d24a 	.word	0x0800d24a
 8008794:	0800d1cc 	.word	0x0800d1cc
 8008798:	0800d215 	.word	0x0800d215

0800879c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800879c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80087a0:	f011 0803 	ands.w	r8, r1, #3
{
 80087a4:	4604      	mov	r4, r0
 80087a6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80087a8:	d106      	bne.n	80087b8 <tcp_enqueue_flags+0x1c>
 80087aa:	4b41      	ldr	r3, [pc, #260]	; (80088b0 <tcp_enqueue_flags+0x114>)
 80087ac:	4941      	ldr	r1, [pc, #260]	; (80088b4 <tcp_enqueue_flags+0x118>)
 80087ae:	4842      	ldr	r0, [pc, #264]	; (80088b8 <tcp_enqueue_flags+0x11c>)
 80087b0:	f240 321b 	movw	r2, #795	; 0x31b
 80087b4:	f001 fb00 	bl	8009db8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80087b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d90a      	bls.n	80087d6 <tcp_enqueue_flags+0x3a>
 80087c0:	07f1      	lsls	r1, r6, #31
 80087c2:	d408      	bmi.n	80087d6 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 80087c4:	7ea3      	ldrb	r3, [r4, #26]
 80087c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087ca:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80087d0:	b003      	add	sp, #12
 80087d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d6:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 80087da:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80087dc:	bf14      	ite	ne
 80087de:	2704      	movne	r7, #4
 80087e0:	2700      	moveq	r7, #0
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	4639      	mov	r1, r7
 80087e8:	4610      	mov	r0, r2
  u8_t optflags = 0;
 80087ea:	bf14      	ite	ne
 80087ec:	f04f 0901 	movne.w	r9, #1
 80087f0:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80087f4:	f7fd f836 	bl	8005864 <pbuf_alloc>
 80087f8:	4605      	mov	r5, r0
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d0e2      	beq.n	80087c4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80087fe:	8943      	ldrh	r3, [r0, #10]
 8008800:	42bb      	cmp	r3, r7
 8008802:	d206      	bcs.n	8008812 <tcp_enqueue_flags+0x76>
 8008804:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <tcp_enqueue_flags+0x114>)
 8008806:	492d      	ldr	r1, [pc, #180]	; (80088bc <tcp_enqueue_flags+0x120>)
 8008808:	482b      	ldr	r0, [pc, #172]	; (80088b8 <tcp_enqueue_flags+0x11c>)
 800880a:	f240 3241 	movw	r2, #833	; 0x341
 800880e:	f001 fad3 	bl	8009db8 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008812:	f8cd 9000 	str.w	r9, [sp]
 8008816:	4629      	mov	r1, r5
 8008818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800881a:	4632      	mov	r2, r6
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff fc83 	bl	8008128 <tcp_create_segment>
 8008822:	4605      	mov	r5, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d0cd      	beq.n	80087c4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008828:	68c3      	ldr	r3, [r0, #12]
 800882a:	079a      	lsls	r2, r3, #30
 800882c:	d006      	beq.n	800883c <tcp_enqueue_flags+0xa0>
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <tcp_enqueue_flags+0x114>)
 8008830:	4923      	ldr	r1, [pc, #140]	; (80088c0 <tcp_enqueue_flags+0x124>)
 8008832:	4821      	ldr	r0, [pc, #132]	; (80088b8 <tcp_enqueue_flags+0x11c>)
 8008834:	f240 3249 	movw	r2, #841	; 0x349
 8008838:	f001 fabe 	bl	8009db8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800883c:	892b      	ldrh	r3, [r5, #8]
 800883e:	b133      	cbz	r3, 800884e <tcp_enqueue_flags+0xb2>
 8008840:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <tcp_enqueue_flags+0x114>)
 8008842:	4920      	ldr	r1, [pc, #128]	; (80088c4 <tcp_enqueue_flags+0x128>)
 8008844:	481c      	ldr	r0, [pc, #112]	; (80088b8 <tcp_enqueue_flags+0x11c>)
 8008846:	f240 324a 	movw	r2, #842	; 0x34a
 800884a:	f001 fab5 	bl	8009db8 <iprintf>
  if (pcb->unsent == NULL) {
 800884e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008850:	bb4b      	cbnz	r3, 80088a6 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8008852:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800885a:	f1b8 0f00 	cmp.w	r8, #0
 800885e:	d002      	beq.n	8008866 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8008860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008862:	3301      	adds	r3, #1
 8008864:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008866:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8008868:	bf42      	ittt	mi
 800886a:	7ea3      	ldrbmi	r3, [r4, #26]
 800886c:	f043 0320 	orrmi.w	r3, r3, #32
 8008870:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008872:	6868      	ldr	r0, [r5, #4]
 8008874:	f7fd f942 	bl	8005afc <pbuf_clen>
 8008878:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800887c:	4418      	add	r0, r3
 800887e:	b280      	uxth	r0, r0
 8008880:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008884:	2800      	cmp	r0, #0
 8008886:	d0a3      	beq.n	80087d0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008888:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800888a:	b948      	cbnz	r0, 80088a0 <tcp_enqueue_flags+0x104>
 800888c:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800888e:	2c00      	cmp	r4, #0
 8008890:	d19e      	bne.n	80087d0 <tcp_enqueue_flags+0x34>
 8008892:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <tcp_enqueue_flags+0x114>)
 8008894:	490c      	ldr	r1, [pc, #48]	; (80088c8 <tcp_enqueue_flags+0x12c>)
 8008896:	4808      	ldr	r0, [pc, #32]	; (80088b8 <tcp_enqueue_flags+0x11c>)
 8008898:	f240 326d 	movw	r2, #877	; 0x36d
 800889c:	f001 fa8c 	bl	8009db8 <iprintf>
  return ERR_OK;
 80088a0:	2000      	movs	r0, #0
 80088a2:	e795      	b.n	80087d0 <tcp_enqueue_flags+0x34>
 80088a4:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	d1fb      	bne.n	80088a4 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 80088ac:	601d      	str	r5, [r3, #0]
 80088ae:	e7d1      	b.n	8008854 <tcp_enqueue_flags+0xb8>
 80088b0:	0800cfef 	.word	0x0800cfef
 80088b4:	0800ce8c 	.word	0x0800ce8c
 80088b8:	0800ace9 	.word	0x0800ace9
 80088bc:	0800cee1 	.word	0x0800cee1
 80088c0:	0800cf1a 	.word	0x0800cf1a
 80088c4:	0800cf32 	.word	0x0800cf32
 80088c8:	0800cf5c 	.word	0x0800cf5c

080088cc <tcp_send_fin>:
{
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 80088ce:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 80088d0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 80088d2:	b934      	cbnz	r4, 80088e2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80088d4:	4628      	mov	r0, r5
 80088d6:	2101      	movs	r1, #1
}
 80088d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80088dc:	f7ff bf5e 	b.w	800879c <tcp_enqueue_flags>
 80088e0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1fb      	bne.n	80088e0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80088e8:	68e3      	ldr	r3, [r4, #12]
 80088ea:	8998      	ldrh	r0, [r3, #12]
 80088ec:	f7fb f95c 	bl	8003ba8 <lwip_htons>
 80088f0:	f010 0707 	ands.w	r7, r0, #7
 80088f4:	d1ee      	bne.n	80088d4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80088f6:	68e6      	ldr	r6, [r4, #12]
 80088f8:	2001      	movs	r0, #1
 80088fa:	89b4      	ldrh	r4, [r6, #12]
 80088fc:	f7fb f954 	bl	8003ba8 <lwip_htons>
 8008900:	4320      	orrs	r0, r4
 8008902:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8008904:	7eab      	ldrb	r3, [r5, #26]
 8008906:	f043 0320 	orr.w	r3, r3, #32
 800890a:	76ab      	strb	r3, [r5, #26]
}
 800890c:	4638      	mov	r0, r7
 800890e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008910 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008912:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008914:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008916:	f7fb f94a 	bl	8003bae <lwip_htonl>
 800891a:	2100      	movs	r1, #0
 800891c:	4602      	mov	r2, r0
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff fc6a 	bl	80081f8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008924:	4606      	mov	r6, r0
 8008926:	b940      	cbnz	r0, 800893a <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008928:	7ea3      	ldrb	r3, [r4, #26]
 800892a:	f043 0303 	orr.w	r3, r3, #3
 800892e:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008930:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008934:	4628      	mov	r0, r5
 8008936:	b004      	add	sp, #16
 8008938:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800893a:	1d25      	adds	r5, r4, #4
 800893c:	4628      	mov	r0, r5
 800893e:	f7fb fde7 	bl	8004510 <ip4_route>
  if (netif == NULL) {
 8008942:	b1a0      	cbz	r0, 800896e <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008944:	2206      	movs	r2, #6
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	7a62      	ldrb	r2, [r4, #9]
 800894a:	9002      	str	r0, [sp, #8]
 800894c:	9200      	str	r2, [sp, #0]
 800894e:	7aa3      	ldrb	r3, [r4, #10]
 8008950:	462a      	mov	r2, r5
 8008952:	4621      	mov	r1, r4
 8008954:	4630      	mov	r0, r6
 8008956:	f7fb ff41 	bl	80047dc <ip4_output_if>
 800895a:	4605      	mov	r5, r0
  pbuf_free(p);
 800895c:	4630      	mov	r0, r6
 800895e:	f7fc ff17 	bl	8005790 <pbuf_free>
 8008962:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008964:	b135      	cbz	r5, 8008974 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008966:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800896a:	76a3      	strb	r3, [r4, #26]
 800896c:	e7e2      	b.n	8008934 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800896e:	f06f 0503 	mvn.w	r5, #3
 8008972:	e7f3      	b.n	800895c <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	e7f7      	b.n	800896a <tcp_send_empty_ack+0x5a>
	...

0800897c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008980:	7d03      	ldrb	r3, [r0, #20]
 8008982:	2b01      	cmp	r3, #1
{
 8008984:	b087      	sub	sp, #28
 8008986:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008988:	d106      	bne.n	8008998 <tcp_output+0x1c>
 800898a:	4ba5      	ldr	r3, [pc, #660]	; (8008c20 <tcp_output+0x2a4>)
 800898c:	49a5      	ldr	r1, [pc, #660]	; (8008c24 <tcp_output+0x2a8>)
 800898e:	48a6      	ldr	r0, [pc, #664]	; (8008c28 <tcp_output+0x2ac>)
 8008990:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008994:	f001 fa10 	bl	8009db8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008998:	4ba4      	ldr	r3, [pc, #656]	; (8008c2c <tcp_output+0x2b0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	429c      	cmp	r4, r3
 800899e:	d052      	beq.n	8008a46 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80089a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80089a4:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 80089a8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80089aa:	429f      	cmp	r7, r3
 80089ac:	bf28      	it	cs
 80089ae:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80089b0:	7ea3      	ldrb	r3, [r4, #26]
 80089b2:	0799      	lsls	r1, r3, #30
 80089b4:	d510      	bpl.n	80089d8 <tcp_output+0x5c>
 80089b6:	b92d      	cbnz	r5, 80089c4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 80089b8:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 80089ba:	b007      	add	sp, #28
 80089bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 80089c0:	f7ff bfa6 	b.w	8008910 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80089c4:	68eb      	ldr	r3, [r5, #12]
 80089c6:	6858      	ldr	r0, [r3, #4]
 80089c8:	f7fb f8f1 	bl	8003bae <lwip_htonl>
 80089cc:	892b      	ldrh	r3, [r5, #8]
 80089ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	4418      	add	r0, r3
     (seg == NULL ||
 80089d4:	4287      	cmp	r7, r0
 80089d6:	d3ef      	bcc.n	80089b8 <tcp_output+0x3c>
  useg = pcb->unacked;
 80089d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d136      	bne.n	8008a4c <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80089de:	f104 0804 	add.w	r8, r4, #4
 80089e2:	4640      	mov	r0, r8
 80089e4:	f7fb fd94 	bl	8004510 <ip4_route>
  if (netif == NULL) {
 80089e8:	4681      	mov	r9, r0
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f000 813c 	beq.w	8008c68 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 80089f0:	b10c      	cbz	r4, 80089f6 <tcp_output+0x7a>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	b913      	cbnz	r3, 80089fc <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80089f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80089fa:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 80089fc:	b1d5      	cbz	r5, 8008a34 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80089fe:	68eb      	ldr	r3, [r5, #12]
 8008a00:	6858      	ldr	r0, [r3, #4]
 8008a02:	f7fb f8d4 	bl	8003bae <lwip_htonl>
 8008a06:	892b      	ldrh	r3, [r5, #8]
 8008a08:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	4418      	add	r0, r3
  if (seg != NULL &&
 8008a0e:	4287      	cmp	r7, r0
 8008a10:	d26f      	bcs.n	8008af2 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d06d      	beq.n	8008af2 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008a16:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008a1a:	429f      	cmp	r7, r3
 8008a1c:	d169      	bne.n	8008af2 <tcp_output+0x176>
 8008a1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d166      	bne.n	8008af2 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8008a24:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008a28:	b923      	cbnz	r3, 8008a34 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8008a2a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8008a34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008a36:	b913      	cbnz	r3, 8008a3e <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008a3e:	7ea3      	ldrb	r3, [r4, #26]
 8008a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a44:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e0e6      	b.n	8008c18 <tcp_output+0x29c>
 8008a4a:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1fb      	bne.n	8008a4a <tcp_output+0xce>
 8008a52:	e7c4      	b.n	80089de <tcp_output+0x62>
    pcb->unsent = seg->next;
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008a58:	7d23      	ldrb	r3, [r4, #20]
 8008a5a:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008a5c:	bf1e      	ittt	ne
 8008a5e:	7ea3      	ldrbne	r3, [r4, #26]
 8008a60:	f023 0303 	bicne.w	r3, r3, #3
 8008a64:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008a66:	68eb      	ldr	r3, [r5, #12]
 8008a68:	6858      	ldr	r0, [r3, #4]
 8008a6a:	f7fb f8a0 	bl	8003bae <lwip_htonl>
 8008a6e:	68e9      	ldr	r1, [r5, #12]
 8008a70:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008a74:	4683      	mov	fp, r0
 8008a76:	8988      	ldrh	r0, [r1, #12]
 8008a78:	f7fb f896 	bl	8003ba8 <lwip_htons>
 8008a7c:	f010 0003 	ands.w	r0, r0, #3
 8008a80:	eb0b 030a 	add.w	r3, fp, sl
 8008a84:	bf18      	it	ne
 8008a86:	2001      	movne	r0, #1
 8008a88:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008a8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008a8c:	68ea      	ldr	r2, [r5, #12]
 8008a8e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008a92:	1a1b      	subs	r3, r3, r0
 8008a94:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8008a96:	bfb8      	it	lt
 8008a98:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008a9a:	8990      	ldrh	r0, [r2, #12]
 8008a9c:	f7fb f884 	bl	8003ba8 <lwip_htons>
 8008aa0:	f010 0003 	ands.w	r0, r0, #3
 8008aa4:	bf18      	it	ne
 8008aa6:	2001      	movne	r0, #1
 8008aa8:	eb10 0f0a 	cmn.w	r0, sl
 8008aac:	f000 80d8 	beq.w	8008c60 <tcp_output+0x2e4>
      seg->next = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8008ab4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008ab6:	b913      	cbnz	r3, 8008abe <tcp_output+0x142>
        pcb->unacked = seg;
 8008ab8:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8008aba:	462e      	mov	r6, r5
 8008abc:	e016      	b.n	8008aec <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008abe:	68eb      	ldr	r3, [r5, #12]
 8008ac0:	6858      	ldr	r0, [r3, #4]
 8008ac2:	f7fb f874 	bl	8003bae <lwip_htonl>
 8008ac6:	68f2      	ldr	r2, [r6, #12]
 8008ac8:	4682      	mov	sl, r0
 8008aca:	6850      	ldr	r0, [r2, #4]
 8008acc:	f7fb f86f 	bl	8003bae <lwip_htonl>
 8008ad0:	ebaa 0000 	sub.w	r0, sl, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f280 80c1 	bge.w	8008c5c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008ada:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	f040 80a9 	bne.w	8008c38 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8008aea:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8008aec:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	d0a2      	beq.n	8008a38 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008af2:	68eb      	ldr	r3, [r5, #12]
 8008af4:	6858      	ldr	r0, [r3, #4]
 8008af6:	f7fb f85a 	bl	8003bae <lwip_htonl>
 8008afa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008afc:	1ac0      	subs	r0, r0, r3
 8008afe:	892b      	ldrh	r3, [r5, #8]
 8008b00:	4418      	add	r0, r3
  while (seg != NULL &&
 8008b02:	4287      	cmp	r7, r0
 8008b04:	d396      	bcc.n	8008a34 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 8008b06:	68eb      	ldr	r3, [r5, #12]
 8008b08:	8998      	ldrh	r0, [r3, #12]
 8008b0a:	f7fb f84d 	bl	8003ba8 <lwip_htons>
 8008b0e:	0742      	lsls	r2, r0, #29
 8008b10:	d506      	bpl.n	8008b20 <tcp_output+0x1a4>
 8008b12:	4b43      	ldr	r3, [pc, #268]	; (8008c20 <tcp_output+0x2a4>)
 8008b14:	4946      	ldr	r1, [pc, #280]	; (8008c30 <tcp_output+0x2b4>)
 8008b16:	4844      	ldr	r0, [pc, #272]	; (8008c28 <tcp_output+0x2ac>)
 8008b18:	f240 4246 	movw	r2, #1094	; 0x446
 8008b1c:	f001 f94c 	bl	8009db8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008b20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b22:	b19b      	cbz	r3, 8008b4c <tcp_output+0x1d0>
 8008b24:	7ea2      	ldrb	r2, [r4, #26]
 8008b26:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008b2a:	d10f      	bne.n	8008b4c <tcp_output+0x1d0>
 8008b2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008b2e:	b12b      	cbz	r3, 8008b3c <tcp_output+0x1c0>
 8008b30:	6819      	ldr	r1, [r3, #0]
 8008b32:	b959      	cbnz	r1, 8008b4c <tcp_output+0x1d0>
 8008b34:	8919      	ldrh	r1, [r3, #8]
 8008b36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	d207      	bcs.n	8008b4c <tcp_output+0x1d0>
 8008b3c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008b40:	b123      	cbz	r3, 8008b4c <tcp_output+0x1d0>
 8008b42:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	f240 8091 	bls.w	8008c6e <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8008b4c:	7d23      	ldrb	r3, [r4, #20]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d00a      	beq.n	8008b68 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008b52:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008b56:	2010      	movs	r0, #16
 8008b58:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8008b5c:	f7fb f824 	bl	8003ba8 <lwip_htons>
 8008b60:	ea4b 0000 	orr.w	r0, fp, r0
 8008b64:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008b68:	686b      	ldr	r3, [r5, #4]
 8008b6a:	89db      	ldrh	r3, [r3, #14]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	f47f af71 	bne.w	8008a54 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b74:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008b78:	f7fb f819 	bl	8003bae <lwip_htonl>
 8008b7c:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008b80:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008b82:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008b86:	f7fb f80f 	bl	8003ba8 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008b8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008b8e:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008b92:	4413      	add	r3, r2
 8008b94:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008b96:	7aab      	ldrb	r3, [r5, #10]
 8008b98:	07db      	lsls	r3, r3, #31
 8008b9a:	d50c      	bpl.n	8008bb6 <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008ba2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008ba6:	f7fd ffc7 	bl	8006b38 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008baa:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8008bae:	f7fa fffe 	bl	8003bae <lwip_htonl>
 8008bb2:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008bb6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008bba:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8008bbc:	bfbc      	itt	lt
 8008bbe:	2300      	movlt	r3, #0
 8008bc0:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bc4:	b93b      	cbnz	r3, 8008bd6 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8008bc6:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <tcp_output+0x2b8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008bcc:	68eb      	ldr	r3, [r5, #12]
 8008bce:	6858      	ldr	r0, [r3, #4]
 8008bd0:	f7fa ffed 	bl	8003bae <lwip_htonl>
 8008bd4:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008bd6:	6868      	ldr	r0, [r5, #4]
 8008bd8:	68ea      	ldr	r2, [r5, #12]
 8008bda:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008bdc:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8008bde:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8008be4:	1ac9      	subs	r1, r1, r3
 8008be6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8008be8:	8901      	ldrh	r1, [r0, #8]
 8008bea:	1acb      	subs	r3, r1, r3
 8008bec:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	7413      	strb	r3, [r2, #16]
 8008bf2:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008bf4:	2206      	movs	r2, #6
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	7a62      	ldrb	r2, [r4, #9]
 8008bfa:	9200      	str	r2, [sp, #0]
 8008bfc:	7aa3      	ldrb	r3, [r4, #10]
 8008bfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c02:	4642      	mov	r2, r8
 8008c04:	4621      	mov	r1, r4
 8008c06:	f7fb fde9 	bl	80047dc <ip4_output_if>
    if (err != ERR_OK) {
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f af22 	beq.w	8008a54 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8008c10:	7ea3      	ldrb	r3, [r4, #26]
 8008c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c16:	76a3      	strb	r3, [r4, #26]
}
 8008c18:	b007      	add	sp, #28
 8008c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	bf00      	nop
 8008c20:	0800cfef 	.word	0x0800cfef
 8008c24:	0800cf84 	.word	0x0800cf84
 8008c28:	0800ace9 	.word	0x0800ace9
 8008c2c:	20007d3c 	.word	0x20007d3c
 8008c30:	0800cfaa 	.word	0x0800cfaa
 8008c34:	20007d2c 	.word	0x20007d2c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008c38:	68d2      	ldr	r2, [r2, #12]
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	6850      	ldr	r0, [r2, #4]
 8008c3e:	f7fa ffb6 	bl	8003bae <lwip_htonl>
 8008c42:	68e9      	ldr	r1, [r5, #12]
 8008c44:	4682      	mov	sl, r0
 8008c46:	6848      	ldr	r0, [r1, #4]
 8008c48:	f7fa ffb1 	bl	8003bae <lwip_htonl>
 8008c4c:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8008c50:	2800      	cmp	r0, #0
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	f6bf af47 	bge.w	8008ae6 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	e740      	b.n	8008ade <tcp_output+0x162>
          useg->next = seg;
 8008c5c:	6035      	str	r5, [r6, #0]
 8008c5e:	e72c      	b.n	8008aba <tcp_output+0x13e>
      tcp_seg_free(seg);
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7fd f9e3 	bl	800602c <tcp_seg_free>
 8008c66:	e741      	b.n	8008aec <tcp_output+0x170>
    return ERR_RTE;
 8008c68:	f06f 0003 	mvn.w	r0, #3
 8008c6c:	e7d4      	b.n	8008c18 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008c6e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008c72:	f47f af6b 	bne.w	8008b4c <tcp_output+0x1d0>
 8008c76:	e6dd      	b.n	8008a34 <tcp_output+0xb8>

08008c78 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	4681      	mov	r9, r0
 8008c80:	460e      	mov	r6, r1
 8008c82:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008c84:	2114      	movs	r1, #20
 8008c86:	2200      	movs	r2, #0
 8008c88:	2001      	movs	r0, #1
{
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8008c90:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008c94:	f7fc fde6 	bl	8005864 <pbuf_alloc>
  if (p == NULL) {
 8008c98:	4605      	mov	r5, r0
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d03c      	beq.n	8008d18 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008c9e:	8943      	ldrh	r3, [r0, #10]
 8008ca0:	2b13      	cmp	r3, #19
 8008ca2:	d806      	bhi.n	8008cb2 <tcp_rst+0x3a>
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <tcp_rst+0xa8>)
 8008ca6:	491f      	ldr	r1, [pc, #124]	; (8008d24 <tcp_rst+0xac>)
 8008ca8:	481f      	ldr	r0, [pc, #124]	; (8008d28 <tcp_rst+0xb0>)
 8008caa:	f240 524d 	movw	r2, #1357	; 0x54d
 8008cae:	f001 f883 	bl	8009db8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8008cb2:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8008cb4:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8008cb6:	f7fa ff77 	bl	8003ba8 <lwip_htons>
 8008cba:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	f7fa ff73 	bl	8003ba8 <lwip_htons>
 8008cc2:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008cc4:	4648      	mov	r0, r9
 8008cc6:	f7fa ff72 	bl	8003bae <lwip_htonl>
 8008cca:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7fa ff6e 	bl	8003bae <lwip_htonl>
 8008cd2:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008cd4:	f245 0014 	movw	r0, #20500	; 0x5014
 8008cd8:	f7fa ff66 	bl	8003ba8 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008cdc:	2308      	movs	r3, #8
 8008cde:	2600      	movs	r6, #0
 8008ce0:	73a3      	strb	r3, [r4, #14]
 8008ce2:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008ce4:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008ce6:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8008ce8:	7426      	strb	r6, [r4, #16]
 8008cea:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8008cec:	74a6      	strb	r6, [r4, #18]
 8008cee:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7fb fc0d 	bl	8004510 <ip4_route>
  if (netif != NULL) {
 8008cf6:	b148      	cbz	r0, 8008d0c <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008cf8:	2306      	movs	r3, #6
 8008cfa:	9002      	str	r0, [sp, #8]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	9600      	str	r6, [sp, #0]
 8008d00:	23ff      	movs	r3, #255	; 0xff
 8008d02:	463a      	mov	r2, r7
 8008d04:	4641      	mov	r1, r8
 8008d06:	4628      	mov	r0, r5
 8008d08:	f7fb fd68 	bl	80047dc <ip4_output_if>
  }
  pbuf_free(p);
 8008d0c:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008d0e:	b005      	add	sp, #20
 8008d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008d14:	f7fc bd3c 	b.w	8005790 <pbuf_free>
}
 8008d18:	b005      	add	sp, #20
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	bf00      	nop
 8008d20:	0800cfef 	.word	0x0800cfef
 8008d24:	0800cfc1 	.word	0x0800cfc1
 8008d28:	0800ace9 	.word	0x0800ace9

08008d2c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008d2c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8008d2e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8008d30:	b1aa      	cbz	r2, 8008d5e <tcp_rexmit_rto+0x32>
 8008d32:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	b983      	cbnz	r3, 8008d5a <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008d38:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8008d3a:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008d3c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008d3e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8008d42:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8008d44:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8008d46:	bf1c      	itt	ne
 8008d48:	3301      	addne	r3, #1
 8008d4a:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8008d52:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8008d56:	f7ff be11 	b.w	800897c <tcp_output>
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	e7ea      	b.n	8008d34 <tcp_rexmit_rto+0x8>
}
 8008d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008d66:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8008d68:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8008d6a:	b1ad      	cbz	r5, 8008d98 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008d70:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8008d74:	6833      	ldr	r3, [r6, #0]
 8008d76:	b983      	cbnz	r3, 8008d9a <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8008d7c:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b90b      	cbnz	r3, 8008d86 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008d82:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008d86:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008d8a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8008d8c:	bf1c      	itt	ne
 8008d8e:	3301      	addne	r3, #1
 8008d90:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	6363      	str	r3, [r4, #52]	; 0x34
 8008d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	6858      	ldr	r0, [r3, #4]
 8008d9e:	f7fa ff06 	bl	8003bae <lwip_htonl>
 8008da2:	68eb      	ldr	r3, [r5, #12]
 8008da4:	4607      	mov	r7, r0
 8008da6:	6858      	ldr	r0, [r3, #4]
 8008da8:	f7fa ff01 	bl	8003bae <lwip_htonl>
 8008dac:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8008dae:	2800      	cmp	r0, #0
 8008db0:	dae2      	bge.n	8008d78 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8008db2:	6836      	ldr	r6, [r6, #0]
 8008db4:	e7de      	b.n	8008d74 <tcp_rexmit+0x10>

08008db6 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008db6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8008db8:	b510      	push	{r4, lr}
 8008dba:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008dbc:	b30b      	cbz	r3, 8008e02 <tcp_rexmit_fast+0x4c>
 8008dbe:	7e83      	ldrb	r3, [r0, #26]
 8008dc0:	075b      	lsls	r3, r3, #29
 8008dc2:	d41e      	bmi.n	8008e02 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8008dc4:	f7ff ffce 	bl	8008d64 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008dc8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008dcc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	bf38      	it	cc
 8008dd4:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008dd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008dd8:	bf28      	it	cs
 8008dda:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008ddc:	0059      	lsls	r1, r3, #1
 8008dde:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008de0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008de4:	bf38      	it	cc
 8008de6:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008dea:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008dee:	440b      	add	r3, r1
 8008df0:	4413      	add	r3, r2
 8008df2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8008df6:	7ea3      	ldrb	r3, [r4, #26]
 8008df8:	f043 0304 	orr.w	r3, r3, #4
 8008dfc:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	8623      	strh	r3, [r4, #48]	; 0x30
 8008e02:	bd10      	pop	{r4, pc}

08008e04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008e04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008e06:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008e08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008e0a:	3801      	subs	r0, #1
 8008e0c:	f7fa fecf 	bl	8003bae <lwip_htonl>
 8008e10:	2100      	movs	r1, #0
 8008e12:	4602      	mov	r2, r0
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7ff f9ef 	bl	80081f8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b1c8      	cbz	r0, 8008e52 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008e1e:	1d26      	adds	r6, r4, #4
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7fb fb75 	bl	8004510 <ip4_route>
  if (netif == NULL) {
 8008e26:	b188      	cbz	r0, 8008e4c <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008e28:	2100      	movs	r1, #0
 8008e2a:	2206      	movs	r2, #6
 8008e2c:	7aa3      	ldrb	r3, [r4, #10]
 8008e2e:	9002      	str	r0, [sp, #8]
 8008e30:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008e34:	4628      	mov	r0, r5
 8008e36:	4621      	mov	r1, r4
 8008e38:	4632      	mov	r2, r6
 8008e3a:	f7fb fccf 	bl	80047dc <ip4_output_if>
 8008e3e:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7fc fca5 	bl	8005790 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008e46:	4620      	mov	r0, r4
 8008e48:	b004      	add	sp, #16
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8008e4c:	f06f 0403 	mvn.w	r4, #3
 8008e50:	e7f6      	b.n	8008e40 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8008e52:	f04f 34ff 	mov.w	r4, #4294967295
 8008e56:	e7f6      	b.n	8008e46 <tcp_keepalive+0x42>

08008e58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008e58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008e5c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8008e5e:	4606      	mov	r6, r0

  if (seg == NULL) {
 8008e60:	b914      	cbnz	r4, 8008e68 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8008e62:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8008e64:	2c00      	cmp	r4, #0
 8008e66:	d042      	beq.n	8008eee <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008e68:	68e3      	ldr	r3, [r4, #12]
 8008e6a:	8998      	ldrh	r0, [r3, #12]
 8008e6c:	f7fa fe9c 	bl	8003ba8 <lwip_htons>
 8008e70:	f010 0501 	ands.w	r5, r0, #1
 8008e74:	bf18      	it	ne
 8008e76:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008e78:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008e7a:	bf1c      	itt	ne
 8008e7c:	fab5 f585 	clzne	r5, r5
 8008e80:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	f085 0101 	eor.w	r1, r5, #1
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff f9b5 	bl	80081f8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008e8e:	4607      	mov	r7, r0
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d03e      	beq.n	8008f12 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008e94:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8008e98:	b36d      	cbz	r5, 8008ef6 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008e9a:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8008e9e:	2011      	movs	r0, #17
 8008ea0:	f7fa fe82 	bl	8003ba8 <lwip_htons>
 8008ea4:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8008ea8:	b2ad      	uxth	r5, r5
 8008eaa:	4328      	orrs	r0, r5
 8008eac:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	6858      	ldr	r0, [r3, #4]
 8008eb4:	f7fa fe7b 	bl	8003bae <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008eb8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008eba:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008ebc:	1a1b      	subs	r3, r3, r0
 8008ebe:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008ec0:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 8008ec4:	bfb8      	it	lt
 8008ec6:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7fb fb21 	bl	8004510 <ip4_route>
  if (netif == NULL) {
 8008ece:	b1e8      	cbz	r0, 8008f0c <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008ed8:	9002      	str	r0, [sp, #8]
 8008eda:	4622      	mov	r2, r4
 8008edc:	7ab3      	ldrb	r3, [r6, #10]
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7fb fc7b 	bl	80047dc <ip4_output_if>
 8008ee6:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7fc fc51 	bl	8005790 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008eee:	4620      	mov	r0, r4
 8008ef0:	b004      	add	sp, #16
 8008ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008ef6:	6860      	ldr	r0, [r4, #4]
 8008ef8:	8922      	ldrh	r2, [r4, #8]
 8008efa:	8903      	ldrh	r3, [r0, #8]
 8008efc:	1a9b      	subs	r3, r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2201      	movs	r2, #1
 8008f02:	f108 0114 	add.w	r1, r8, #20
 8008f06:	f7fc fee1 	bl	8005ccc <pbuf_copy_partial>
 8008f0a:	e7d1      	b.n	8008eb0 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8008f0c:	f06f 0403 	mvn.w	r4, #3
 8008f10:	e7ea      	b.n	8008ee8 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 8008f12:	f04f 34ff 	mov.w	r4, #4294967295
 8008f16:	e7ea      	b.n	8008eee <tcp_zero_window_probe+0x96>

08008f18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008f1e:	200a      	movs	r0, #10
{
 8008f20:	460f      	mov	r7, r1
 8008f22:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008f24:	f7fc fa92 	bl	800544c <memp_malloc>
  if (timeout == NULL) {
 8008f28:	4604      	mov	r4, r0
 8008f2a:	b938      	cbnz	r0, 8008f3c <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008f2c:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <sys_timeout+0x90>)
 8008f2e:	491f      	ldr	r1, [pc, #124]	; (8008fac <sys_timeout+0x94>)
 8008f30:	481f      	ldr	r0, [pc, #124]	; (8008fb0 <sys_timeout+0x98>)
 8008f32:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8008f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008f38:	f000 bf3e 	b.w	8009db8 <iprintf>
  now = sys_now();
 8008f3c:	f000 fcc2 	bl	80098c4 <sys_now>
  if (next_timeout == NULL) {
 8008f40:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <sys_timeout+0x9c>)
 8008f42:	491d      	ldr	r1, [pc, #116]	; (8008fb8 <sys_timeout+0xa0>)
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	b95b      	cbnz	r3, 8008f60 <sys_timeout+0x48>
    timeouts_last_time = now;
 8008f48:	6008      	str	r0, [r1, #0]
    diff = 0;
 8008f4a:	4618      	mov	r0, r3
  timeout->next = NULL;
 8008f4c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8008f4e:	4428      	add	r0, r5
  timeout->next = NULL;
 8008f50:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 8008f52:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 8008f54:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8008f56:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8008f58:	b92b      	cbnz	r3, 8008f66 <sys_timeout+0x4e>
    next_timeout = timeout;
 8008f5a:	6014      	str	r4, [r2, #0]
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8008f60:	6809      	ldr	r1, [r1, #0]
 8008f62:	1a40      	subs	r0, r0, r1
 8008f64:	e7f2      	b.n	8008f4c <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8008f66:	6859      	ldr	r1, [r3, #4]
 8008f68:	428d      	cmp	r5, r1
 8008f6a:	d217      	bcs.n	8008f9c <sys_timeout+0x84>
    next_timeout->time -= msecs;
 8008f6c:	1b4d      	subs	r5, r1, r5
 8008f6e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	e7f2      	b.n	8008f5a <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8008f74:	684e      	ldr	r6, [r1, #4]
 8008f76:	42b2      	cmp	r2, r6
 8008f78:	d312      	bcc.n	8008fa0 <sys_timeout+0x88>
 8008f7a:	4608      	mov	r0, r1
      timeout->time -= t->time;
 8008f7c:	6841      	ldr	r1, [r0, #4]
 8008f7e:	6862      	ldr	r2, [r4, #4]
 8008f80:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8008f82:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8008f84:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d1f4      	bne.n	8008f74 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 8008f8a:	4295      	cmp	r5, r2
 8008f8c:	d202      	bcs.n	8008f94 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	441d      	add	r5, r3
 8008f92:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8008f94:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8008f96:	6004      	str	r4, [r0, #0]
        break;
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	e7ed      	b.n	8008f7c <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8008fa0:	1ab2      	subs	r2, r6, r2
 8008fa2:	604a      	str	r2, [r1, #4]
 8008fa4:	e7f6      	b.n	8008f94 <sys_timeout+0x7c>
 8008fa6:	bf00      	nop
 8008fa8:	0800d280 	.word	0x0800d280
 8008fac:	0800d2b4 	.word	0x0800d2b4
 8008fb0:	0800ace9 	.word	0x0800ace9
 8008fb4:	200043ac 	.word	0x200043ac
 8008fb8:	200043b4 	.word	0x200043b4

08008fbc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <tcp_timer_needed+0x24>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	b962      	cbnz	r2, 8008fdc <tcp_timer_needed+0x20>
 8008fc2:	4a08      	ldr	r2, [pc, #32]	; (8008fe4 <tcp_timer_needed+0x28>)
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	b912      	cbnz	r2, 8008fce <tcp_timer_needed+0x12>
 8008fc8:	4a07      	ldr	r2, [pc, #28]	; (8008fe8 <tcp_timer_needed+0x2c>)
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	b132      	cbz	r2, 8008fdc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008fd2:	4906      	ldr	r1, [pc, #24]	; (8008fec <tcp_timer_needed+0x30>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	20fa      	movs	r0, #250	; 0xfa
 8008fd8:	f7ff bf9e 	b.w	8008f18 <sys_timeout>
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	200043b0 	.word	0x200043b0
 8008fe4:	20007d28 	.word	0x20007d28
 8008fe8:	20007d38 	.word	0x20007d38
 8008fec:	08008ff1 	.word	0x08008ff1

08008ff0 <tcpip_tcp_timer>:
{
 8008ff0:	b508      	push	{r3, lr}
  tcp_tmr();
 8008ff2:	f7fd fc39 	bl	8006868 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008ff6:	4b08      	ldr	r3, [pc, #32]	; (8009018 <tcpip_tcp_timer+0x28>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	b913      	cbnz	r3, 8009002 <tcpip_tcp_timer+0x12>
 8008ffc:	4b07      	ldr	r3, [pc, #28]	; (800901c <tcpip_tcp_timer+0x2c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	b133      	cbz	r3, 8009010 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009002:	2200      	movs	r2, #0
 8009004:	4906      	ldr	r1, [pc, #24]	; (8009020 <tcpip_tcp_timer+0x30>)
 8009006:	20fa      	movs	r0, #250	; 0xfa
}
 8009008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800900c:	f7ff bf84 	b.w	8008f18 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8009010:	4a04      	ldr	r2, [pc, #16]	; (8009024 <tcpip_tcp_timer+0x34>)
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	bd08      	pop	{r3, pc}
 8009016:	bf00      	nop
 8009018:	20007d28 	.word	0x20007d28
 800901c:	20007d38 	.word	0x20007d38
 8009020:	08008ff1 	.word	0x08008ff1
 8009024:	200043b0 	.word	0x200043b0

08009028 <sys_timeouts_init>:
{
 8009028:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800902a:	4d0a      	ldr	r5, [pc, #40]	; (8009054 <sys_timeouts_init+0x2c>)
 800902c:	4c0a      	ldr	r4, [pc, #40]	; (8009058 <sys_timeouts_init+0x30>)
 800902e:	f105 0208 	add.w	r2, r5, #8
 8009032:	4621      	mov	r1, r4
 8009034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009038:	f7ff ff6e 	bl	8008f18 <sys_timeout>
 800903c:	f105 0210 	add.w	r2, r5, #16
 8009040:	4621      	mov	r1, r4
 8009042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009046:	f7ff ff67 	bl	8008f18 <sys_timeout>
  timeouts_last_time = sys_now();
 800904a:	f000 fc3b 	bl	80098c4 <sys_now>
 800904e:	4b03      	ldr	r3, [pc, #12]	; (800905c <sys_timeouts_init+0x34>)
 8009050:	6018      	str	r0, [r3, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	0800d268 	.word	0x0800d268
 8009058:	08009061 	.word	0x08009061
 800905c:	200043b4 	.word	0x200043b4

08009060 <cyclic_timer>:
{
 8009060:	b510      	push	{r4, lr}
 8009062:	4604      	mov	r4, r0
  cyclic->handler();
 8009064:	6843      	ldr	r3, [r0, #4]
 8009066:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009068:	4622      	mov	r2, r4
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	4902      	ldr	r1, [pc, #8]	; (8009078 <cyclic_timer+0x18>)
}
 800906e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009072:	f7ff bf51 	b.w	8008f18 <sys_timeout>
 8009076:	bf00      	nop
 8009078:	08009061 	.word	0x08009061

0800907c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800907c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8009080:	4d24      	ldr	r5, [pc, #144]	; (8009114 <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 8009082:	4c25      	ldr	r4, [pc, #148]	; (8009118 <sys_timeouts_mbox_fetch+0x9c>)
{
 8009084:	4681      	mov	r9, r0
 8009086:	468a      	mov	sl, r1
 8009088:	462e      	mov	r6, r5
  if (!next_timeout) {
 800908a:	682a      	ldr	r2, [r5, #0]
 800908c:	b932      	cbnz	r2, 800909c <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800908e:	4651      	mov	r1, sl
 8009090:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8009092:	b003      	add	sp, #12
 8009094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009098:	f000 b99e 	b.w	80093d8 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800909c:	f000 fc12 	bl	80098c4 <sys_now>
 80090a0:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 80090a2:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 80090a4:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	4290      	cmp	r0, r2
 80090aa:	d928      	bls.n	80090fe <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0eb      	beq.n	800908a <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 80090b2:	f000 fc07 	bl	80098c4 <sys_now>
    diff = now - timeouts_last_time;
 80090b6:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 80090b8:	4f18      	ldr	r7, [pc, #96]	; (800911c <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 80090ba:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 80090be:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80090c0:	2900      	cmp	r1, #0
 80090c2:	d0e2      	beq.n	800908a <sys_timeouts_mbox_fetch+0xe>
 80090c4:	684a      	ldr	r2, [r1, #4]
 80090c6:	455a      	cmp	r2, fp
 80090c8:	d8df      	bhi.n	800908a <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 80090ca:	6820      	ldr	r0, [r4, #0]
        handler = tmptimeout->h;
 80090cc:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 80090d0:	68cb      	ldr	r3, [r1, #12]
 80090d2:	9301      	str	r3, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 80090d4:	4410      	add	r0, r2
 80090d6:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 80090d8:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80090dc:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 80090de:	680a      	ldr	r2, [r1, #0]
 80090e0:	6032      	str	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80090e2:	f7fc f9cf 	bl	8005484 <memp_free>
        if (handler != NULL) {
 80090e6:	f1b8 0f00 	cmp.w	r8, #0
 80090ea:	d0e8      	beq.n	80090be <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 80090ec:	4638      	mov	r0, r7
 80090ee:	f000 f9b6 	bl	800945e <sys_mutex_lock>
          handler(arg);
 80090f2:	9801      	ldr	r0, [sp, #4]
 80090f4:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 80090f6:	4638      	mov	r0, r7
 80090f8:	f000 f9b6 	bl	8009468 <sys_mutex_unlock>
 80090fc:	e7df      	b.n	80090be <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80090fe:	1a12      	subs	r2, r2, r0
 8009100:	d0d4      	beq.n	80090ac <sys_timeouts_mbox_fetch+0x30>
 8009102:	4651      	mov	r1, sl
 8009104:	4648      	mov	r0, r9
 8009106:	f000 f967 	bl	80093d8 <sys_arch_mbox_fetch>
 800910a:	3001      	adds	r0, #1
 800910c:	d0ce      	beq.n	80090ac <sys_timeouts_mbox_fetch+0x30>
}
 800910e:	b003      	add	sp, #12
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	200043ac 	.word	0x200043ac
 8009118:	200043b4 	.word	0x200043b4
 800911c:	20004620 	.word	0x20004620

08009120 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009120:	4770      	bx	lr
	...

08009124 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009128:	8943      	ldrh	r3, [r0, #10]
 800912a:	2b07      	cmp	r3, #7
{
 800912c:	b085      	sub	sp, #20
 800912e:	4605      	mov	r5, r0
 8009130:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8009132:	d805      	bhi.n	8009140 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009134:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009136:	b005      	add	sp, #20
 8009138:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800913c:	f7fc bb28 	b.w	8005790 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009140:	4e3e      	ldr	r6, [pc, #248]	; (800923c <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8009142:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009144:	6831      	ldr	r1, [r6, #0]
 8009146:	6970      	ldr	r0, [r6, #20]
 8009148:	f7fb fb59 	bl	80047fe <ip4_addr_isbroadcast_u32>
 800914c:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800914e:	8820      	ldrh	r0, [r4, #0]
 8009150:	f7fa fd2a 	bl	8003ba8 <lwip_htons>
 8009154:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8009156:	8860      	ldrh	r0, [r4, #2]
 8009158:	f7fa fd26 	bl	8003ba8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800915c:	4a38      	ldr	r2, [pc, #224]	; (8009240 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800915e:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009160:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8009164:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8009166:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009168:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 800916a:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800916c:	4603      	mov	r3, r0
  prev = NULL;
 800916e:	46a4      	mov	ip, r4
 8009170:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009172:	b92b      	cbnz	r3, 8009180 <udp_input+0x5c>
  if (pcb != NULL) {
 8009174:	bb0c      	cbnz	r4, 80091ba <udp_input+0x96>
  if (for_us) {
 8009176:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800917a:	428b      	cmp	r3, r1
 800917c:	d1da      	bne.n	8009134 <udp_input+0x10>
 800917e:	e01c      	b.n	80091ba <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 8009180:	8a5a      	ldrh	r2, [r3, #18]
 8009182:	4552      	cmp	r2, sl
 8009184:	d12b      	bne.n	80091de <udp_input+0xba>
 8009186:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009188:	b32f      	cbz	r7, 80091d6 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800918a:	b13a      	cbz	r2, 800919c <udp_input+0x78>
 800918c:	1c4e      	adds	r6, r1, #1
 800918e:	d005      	beq.n	800919c <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009190:	404a      	eors	r2, r1
 8009192:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009194:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009198:	4216      	tst	r6, r2
 800919a:	d120      	bne.n	80091de <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800919c:	7c1a      	ldrb	r2, [r3, #16]
 800919e:	0752      	lsls	r2, r2, #29
 80091a0:	d402      	bmi.n	80091a8 <udp_input+0x84>
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	bf08      	it	eq
 80091a6:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 80091a8:	8a9a      	ldrh	r2, [r3, #20]
 80091aa:	4542      	cmp	r2, r8
 80091ac:	d117      	bne.n	80091de <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80091ae:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 80091b0:	b9c2      	cbnz	r2, 80091e4 <udp_input+0xc0>
        if (prev != NULL) {
 80091b2:	f1bc 0f00 	cmp.w	ip, #0
 80091b6:	d118      	bne.n	80091ea <udp_input+0xc6>
 80091b8:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 80091ba:	f06f 0107 	mvn.w	r1, #7
 80091be:	4628      	mov	r0, r5
 80091c0:	f7fc fae0 	bl	8005784 <pbuf_header>
 80091c4:	b1c0      	cbz	r0, 80091f8 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80091c6:	4b1f      	ldr	r3, [pc, #124]	; (8009244 <udp_input+0x120>)
 80091c8:	491f      	ldr	r1, [pc, #124]	; (8009248 <udp_input+0x124>)
 80091ca:	4820      	ldr	r0, [pc, #128]	; (800924c <udp_input+0x128>)
 80091cc:	f240 1255 	movw	r2, #341	; 0x155
 80091d0:	f000 fdf2 	bl	8009db8 <iprintf>
 80091d4:	e7ae      	b.n	8009134 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d0e0      	beq.n	800919c <udp_input+0x78>
 80091da:	428a      	cmp	r2, r1
 80091dc:	d0de      	beq.n	800919c <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80091de:	469c      	mov	ip, r3
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	e7c6      	b.n	8009172 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80091e4:	4572      	cmp	r2, lr
 80091e6:	d1fa      	bne.n	80091de <udp_input+0xba>
 80091e8:	e7e3      	b.n	80091b2 <udp_input+0x8e>
          prev->next = pcb->next;
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 80091f0:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 80091f4:	60d8      	str	r0, [r3, #12]
 80091f6:	e7df      	b.n	80091b8 <udp_input+0x94>
    if (pcb != NULL) {
 80091f8:	b164      	cbz	r4, 8009214 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 80091fa:	69a6      	ldr	r6, [r4, #24]
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	d099      	beq.n	8009134 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009200:	f8cd 8000 	str.w	r8, [sp]
 8009204:	4b12      	ldr	r3, [pc, #72]	; (8009250 <udp_input+0x12c>)
 8009206:	69e0      	ldr	r0, [r4, #28]
 8009208:	462a      	mov	r2, r5
 800920a:	4621      	mov	r1, r4
 800920c:	47b0      	blx	r6
}
 800920e:	b005      	add	sp, #20
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009214:	2f00      	cmp	r7, #0
 8009216:	d18d      	bne.n	8009134 <udp_input+0x10>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009220:	2be0      	cmp	r3, #224	; 0xe0
 8009222:	d087      	beq.n	8009134 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009224:	9b03      	ldr	r3, [sp, #12]
 8009226:	8999      	ldrh	r1, [r3, #12]
 8009228:	3108      	adds	r1, #8
 800922a:	b209      	sxth	r1, r1
 800922c:	4628      	mov	r0, r5
 800922e:	f7fc faac 	bl	800578a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009232:	2103      	movs	r1, #3
 8009234:	4628      	mov	r0, r5
 8009236:	f7fb f961 	bl	80044fc <icmp_dest_unreach>
 800923a:	e77b      	b.n	8009134 <udp_input+0x10>
 800923c:	20004624 	.word	0x20004624
 8009240:	20007d40 	.word	0x20007d40
 8009244:	0800d2f1 	.word	0x0800d2f1
 8009248:	0800d320 	.word	0x0800d320
 800924c:	0800ace9 	.word	0x0800ace9
 8009250:	20004634 	.word	0x20004634

08009254 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009254:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009256:	b138      	cbz	r0, 8009268 <udp_netif_ip_addr_changed+0x14>
 8009258:	6803      	ldr	r3, [r0, #0]
 800925a:	b12b      	cbz	r3, 8009268 <udp_netif_ip_addr_changed+0x14>
 800925c:	b121      	cbz	r1, 8009268 <udp_netif_ip_addr_changed+0x14>
 800925e:	680b      	ldr	r3, [r1, #0]
 8009260:	b113      	cbz	r3, 8009268 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <udp_netif_ip_addr_changed+0x28>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	b903      	cbnz	r3, 800926a <udp_netif_ip_addr_changed+0x16>
 8009268:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800926a:	681c      	ldr	r4, [r3, #0]
 800926c:	6802      	ldr	r2, [r0, #0]
 800926e:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009270:	bf04      	itt	eq
 8009272:	680a      	ldreq	r2, [r1, #0]
 8009274:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	e7f5      	b.n	8009266 <udp_netif_ip_addr_changed+0x12>
 800927a:	bf00      	nop
 800927c:	20007d40 	.word	0x20007d40

08009280 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8009280:	8943      	ldrh	r3, [r0, #10]
 8009282:	2b0e      	cmp	r3, #14
{
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800928a:	d914      	bls.n	80092b6 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800928c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800928e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8009290:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8009292:	07d9      	lsls	r1, r3, #31
 8009294:	d50a      	bpl.n	80092ac <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009296:	2b01      	cmp	r3, #1
 8009298:	d111      	bne.n	80092be <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800929a:	7843      	ldrb	r3, [r0, #1]
 800929c:	b933      	cbnz	r3, 80092ac <ethernet_input+0x2c>
 800929e:	7883      	ldrb	r3, [r0, #2]
 80092a0:	2b5e      	cmp	r3, #94	; 0x5e
 80092a2:	d103      	bne.n	80092ac <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80092a4:	7b63      	ldrb	r3, [r4, #13]
 80092a6:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80092aa:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80092ac:	2e08      	cmp	r6, #8
 80092ae:	d010      	beq.n	80092d2 <ethernet_input+0x52>
 80092b0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80092b4:	d01e      	beq.n	80092f4 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7fc fa6a 	bl	8005790 <pbuf_free>
  return ERR_OK;
 80092bc:	e018      	b.n	80092f0 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80092be:	2206      	movs	r2, #6
 80092c0:	4914      	ldr	r1, [pc, #80]	; (8009314 <ethernet_input+0x94>)
 80092c2:	f000 fd57 	bl	8009d74 <memcmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1f0      	bne.n	80092ac <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 80092ca:	7b63      	ldrb	r3, [r4, #13]
 80092cc:	f043 0308 	orr.w	r3, r3, #8
 80092d0:	e7eb      	b.n	80092aa <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80092d2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80092d6:	071a      	lsls	r2, r3, #28
 80092d8:	d5ed      	bpl.n	80092b6 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80092da:	f06f 010d 	mvn.w	r1, #13
 80092de:	4620      	mov	r0, r4
 80092e0:	f7fc fa50 	bl	8005784 <pbuf_header>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d1e6      	bne.n	80092b6 <ethernet_input+0x36>
        ip4_input(p, netif);
 80092e8:	4629      	mov	r1, r5
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fb f93c 	bl	8004568 <ip4_input>
}
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80092f4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80092f8:	071b      	lsls	r3, r3, #28
 80092fa:	d5dc      	bpl.n	80092b6 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80092fc:	f06f 010d 	mvn.w	r1, #13
 8009300:	4620      	mov	r0, r4
 8009302:	f7fc fa3f 	bl	8005784 <pbuf_header>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1d5      	bne.n	80092b6 <ethernet_input+0x36>
        etharp_input(p, netif);
 800930a:	4629      	mov	r1, r5
 800930c:	4620      	mov	r0, r4
 800930e:	f7fa fd9d 	bl	8003e4c <etharp_input>
      break;
 8009312:	e7ed      	b.n	80092f0 <ethernet_input+0x70>
 8009314:	0800d334 	.word	0x0800d334

08009318 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8009318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931c:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800931e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8009322:	460d      	mov	r5, r1
 8009324:	4616      	mov	r6, r2
 8009326:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8009328:	f7fa fc3e 	bl	8003ba8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800932c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800932e:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009330:	4628      	mov	r0, r5
 8009332:	f7fc fa27 	bl	8005784 <pbuf_header>
 8009336:	b9e0      	cbnz	r0, 8009372 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8009338:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800933a:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	600b      	str	r3, [r1, #0]
 8009342:	88bb      	ldrh	r3, [r7, #4]
 8009344:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8009346:	6833      	ldr	r3, [r6, #0]
 8009348:	f8c1 3006 	str.w	r3, [r1, #6]
 800934c:	88b3      	ldrh	r3, [r6, #4]
 800934e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009350:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009354:	2b06      	cmp	r3, #6
 8009356:	d006      	beq.n	8009366 <ethernet_output+0x4e>
 8009358:	4b08      	ldr	r3, [pc, #32]	; (800937c <ethernet_output+0x64>)
 800935a:	4909      	ldr	r1, [pc, #36]	; (8009380 <ethernet_output+0x68>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <ethernet_output+0x6c>)
 800935e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009362:	f000 fd29 	bl	8009db8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009366:	69a3      	ldr	r3, [r4, #24]
 8009368:	4629      	mov	r1, r5
 800936a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800936c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8009370:	4718      	bx	r3
}
 8009372:	f06f 0001 	mvn.w	r0, #1
 8009376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937a:	bf00      	nop
 800937c:	0800d33a 	.word	0x0800d33a
 8009380:	0800d36f 	.word	0x0800d36f
 8009384:	0800ace9 	.word	0x0800ace9

08009388 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8009388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800938a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800938c:	9100      	str	r1, [sp, #0]
 800938e:	2304      	movs	r3, #4
 8009390:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8009392:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	9102      	str	r1, [sp, #8]
 8009398:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800939a:	f7f8 faf5 	bl	8001988 <osMessageCreate>
 800939e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80093a0:	fab0 f080 	clz	r0, r0
 80093a4:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 80093a6:	4240      	negs	r0, r0
 80093a8:	b004      	add	sp, #16
 80093aa:	bd10      	pop	{r4, pc}

080093ac <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4604      	mov	r4, r0
 80093b0:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	4629      	mov	r1, r5
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	f7f8 faf9 	bl	80019b0 <osMessagePut>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1f7      	bne.n	80093b2 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80093c2:	bd38      	pop	{r3, r4, r5, pc}

080093c4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80093c4:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80093c6:	2200      	movs	r2, #0
 80093c8:	6800      	ldr	r0, [r0, #0]
 80093ca:	f7f8 faf1 	bl	80019b0 <osMessagePut>
 80093ce:	3000      	adds	r0, #0
 80093d0:	bf18      	it	ne
 80093d2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80093d4:	4240      	negs	r0, r0
 80093d6:	bd08      	pop	{r3, pc}

080093d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80093d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093da:	b085      	sub	sp, #20
 80093dc:	4606      	mov	r6, r0
 80093de:	460d      	mov	r5, r1
 80093e0:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80093e2:	f7f8 f9fa 	bl	80017da <osKernelSysTick>
 80093e6:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80093e8:	b177      	cbz	r7, 8009408 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80093ea:	463a      	mov	r2, r7
 80093ec:	6831      	ldr	r1, [r6, #0]
 80093ee:	a801      	add	r0, sp, #4
 80093f0:	f7f8 fb06 	bl	8001a00 <osMessageGet>

    if(event.status == osEventMessage)
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d10d      	bne.n	8009416 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 80093fe:	f7f8 f9ec 	bl	80017da <osKernelSysTick>
 8009402:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8009404:	b005      	add	sp, #20
 8009406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	6831      	ldr	r1, [r6, #0]
 800940e:	a801      	add	r0, sp, #4
 8009410:	f7f8 faf6 	bl	8001a00 <osMessageGet>
 8009414:	e7f1      	b.n	80093fa <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	e7f3      	b.n	8009404 <sys_arch_mbox_fetch+0x2c>

0800941c <sys_mbox_valid>:
 800941c:	6800      	ldr	r0, [r0, #0]
 800941e:	3000      	adds	r0, #0
 8009420:	bf18      	it	ne
 8009422:	2001      	movne	r0, #1
 8009424:	4770      	bx	lr
	...

08009428 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8009428:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800942a:	4803      	ldr	r0, [pc, #12]	; (8009438 <sys_init+0x10>)
 800942c:	f7f8 fa0c 	bl	8001848 <osMutexCreate>
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <sys_init+0x14>)
 8009432:	6018      	str	r0, [r3, #0]
 8009434:	bd08      	pop	{r3, pc}
 8009436:	bf00      	nop
 8009438:	0800d3a8 	.word	0x0800d3a8
 800943c:	20007d48 	.word	0x20007d48

08009440 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8009440:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8009442:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8009444:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8009446:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800944c:	f7f8 f9fc 	bl	8001848 <osMutexCreate>
 8009450:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8009452:	fab0 f080 	clz	r0, r0
 8009456:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8009458:	4240      	negs	r0, r0
 800945a:	b002      	add	sp, #8
 800945c:	bd10      	pop	{r4, pc}

0800945e <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800945e:	f04f 31ff 	mov.w	r1, #4294967295
 8009462:	6800      	ldr	r0, [r0, #0]
 8009464:	f7f8 b9f8 	b.w	8001858 <osMutexWait>

08009468 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8009468:	6800      	ldr	r0, [r0, #0]
 800946a:	f7f8 ba8b 	b.w	8001984 <osMutexRelease>

0800946e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800946e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009470:	b089      	sub	sp, #36	; 0x24
 8009472:	4607      	mov	r7, r0
 8009474:	460e      	mov	r6, r1
 8009476:	4614      	mov	r4, r2
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8009478:	2100      	movs	r1, #0
 800947a:	221c      	movs	r2, #28
 800947c:	a801      	add	r0, sp, #4
{
 800947e:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8009480:	f000 fc92 	bl	8009da8 <memset>
 8009484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009486:	9701      	str	r7, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 8009488:	4621      	mov	r1, r4
 800948a:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800948c:	9602      	str	r6, [sp, #8]
 800948e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009492:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8009494:	f7f8 f9a8 	bl	80017e8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8009498:	b009      	add	sp, #36	; 0x24
 800949a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800949c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800949c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800949e:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <sys_arch_protect+0x14>)
 80094a0:	f04f 31ff 	mov.w	r1, #4294967295
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	f7f8 f9d7 	bl	8001858 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 80094aa:	2001      	movs	r0, #1
 80094ac:	bd08      	pop	{r3, pc}
 80094ae:	bf00      	nop
 80094b0:	20007d48 	.word	0x20007d48

080094b4 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80094b4:	4b01      	ldr	r3, [pc, #4]	; (80094bc <sys_arch_unprotect+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	f7f8 ba64 	b.w	8001984 <osMutexRelease>
 80094bc:	20007d48 	.word	0x20007d48

080094c0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80094c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80094c4:	4a25      	ldr	r2, [pc, #148]	; (800955c <low_level_output+0x9c>)
 80094c6:	9200      	str	r2, [sp, #0]
 80094c8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 80094ca:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80094ce:	68ab      	ldr	r3, [r5, #8]
{
 80094d0:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 80094d2:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80094d4:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 80094d8:	b92c      	cbnz	r4, 80094e6 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80094da:	4639      	mov	r1, r7
 80094dc:	481f      	ldr	r0, [pc, #124]	; (800955c <low_level_output+0x9c>)
 80094de:	f7f7 fa17 	bl	8000910 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80094e2:	4620      	mov	r0, r4
 80094e4:	e004      	b.n	80094f0 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80094e6:	682a      	ldr	r2, [r5, #0]
 80094e8:	2a00      	cmp	r2, #0
 80094ea:	da11      	bge.n	8009510 <low_level_output+0x50>
        errval = ERR_USE;
 80094ec:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80094f0:	9b00      	ldr	r3, [sp, #0]
 80094f2:	f241 0214 	movw	r2, #4116	; 0x1014
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	5899      	ldr	r1, [r3, r2]
 80094fa:	0689      	lsls	r1, r1, #26
 80094fc:	d505      	bpl.n	800950a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80094fe:	2120      	movs	r1, #32
 8009500:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009502:	f241 0204 	movw	r2, #4100	; 0x1004
 8009506:	2100      	movs	r1, #0
 8009508:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8009510:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009514:	4646      	mov	r6, r8
      payloadoffset = 0;
 8009516:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800951a:	eb06 0809 	add.w	r8, r6, r9
 800951e:	45d8      	cmp	r8, fp
 8009520:	eb03 0006 	add.w	r0, r3, r6
 8009524:	6861      	ldr	r1, [r4, #4]
 8009526:	d808      	bhi.n	800953a <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009528:	464a      	mov	r2, r9
 800952a:	4451      	add	r1, sl
 800952c:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800952e:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009530:	f000 fc2f 	bl	8009d92 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8009534:	6824      	ldr	r4, [r4, #0]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	e7ce      	b.n	80094d8 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800953a:	ebab 0606 	sub.w	r6, fp, r6
 800953e:	4632      	mov	r2, r6
 8009540:	4451      	add	r1, sl
 8009542:	f000 fc26 	bl	8009d92 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009546:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	dbce      	blt.n	80094ec <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800954e:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009550:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009552:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009554:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8009558:	2600      	movs	r6, #0
 800955a:	e7de      	b.n	800951a <low_level_output+0x5a>
 800955c:	2000961c 	.word	0x2000961c

08009560 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009566:	4c3b      	ldr	r4, [pc, #236]	; (8009654 <ethernetif_input+0xf4>)
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	f04f 31ff 	mov.w	r1, #4294967295
 800956e:	f7f8 f9bf 	bl	80018f0 <osSemaphoreWait>
 8009572:	2800      	cmp	r0, #0
 8009574:	d1f8      	bne.n	8009568 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009576:	4d38      	ldr	r5, [pc, #224]	; (8009658 <ethernetif_input+0xf8>)
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8009578:	4838      	ldr	r0, [pc, #224]	; (800965c <ethernetif_input+0xfc>)
 800957a:	f7ff ff70 	bl	800945e <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800957e:	4628      	mov	r0, r5
 8009580:	f7f7 fa3a 	bl	80009f8 <HAL_ETH_GetReceivedFrame_IT>
 8009584:	4606      	mov	r6, r0
 8009586:	b130      	cbz	r0, 8009596 <ethernetif_input+0x36>
    return NULL;
 8009588:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800958a:	4834      	ldr	r0, [pc, #208]	; (800965c <ethernetif_input+0xfc>)
 800958c:	f7ff ff6c 	bl	8009468 <sys_mutex_unlock>
      } while(p!=NULL);
 8009590:	2c00      	cmp	r4, #0
 8009592:	d1f0      	bne.n	8009576 <ethernetif_input+0x16>
 8009594:	e7e7      	b.n	8009566 <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 8009596:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009598:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800959a:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800959c:	bb01      	cbnz	r1, 80095e0 <ethernetif_input+0x80>
  struct pbuf *p = NULL;
 800959e:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80095a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80095a2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80095a4:	2200      	movs	r2, #0
 80095a6:	4282      	cmp	r2, r0
 80095a8:	d14d      	bne.n	8009646 <ethernetif_input+0xe6>
    heth.RxFrameInfos.SegCount =0;  
 80095aa:	2300      	movs	r3, #0
 80095ac:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80095ae:	f241 0214 	movw	r2, #4116	; 0x1014
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	5899      	ldr	r1, [r3, r2]
 80095b6:	0609      	lsls	r1, r1, #24
 80095b8:	d505      	bpl.n	80095c6 <ethernetif_input+0x66>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80095ba:	2180      	movs	r1, #128	; 0x80
 80095bc:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 80095be:	f241 0208 	movw	r2, #4104	; 0x1008
 80095c2:	2100      	movs	r1, #0
 80095c4:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 80095c6:	2c00      	cmp	r4, #0
 80095c8:	d0de      	beq.n	8009588 <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 80095ca:	f8da 3010 	ldr.w	r3, [sl, #16]
 80095ce:	4651      	mov	r1, sl
 80095d0:	4620      	mov	r0, r4
 80095d2:	4798      	blx	r3
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d0d8      	beq.n	800958a <ethernetif_input+0x2a>
            pbuf_free(p);
 80095d8:	4620      	mov	r0, r4
 80095da:	f7fc f8d9 	bl	8005790 <pbuf_free>
 80095de:	e7d4      	b.n	800958a <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80095e0:	2203      	movs	r2, #3
 80095e2:	2004      	movs	r0, #4
 80095e4:	f7fc f93e 	bl	8005864 <pbuf_alloc>
  if (p != NULL)
 80095e8:	4604      	mov	r4, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0d7      	beq.n	800959e <ethernetif_input+0x3e>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80095ee:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80095f2:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 80095f4:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 80095f8:	4637      	mov	r7, r6
      payloadoffset = 0;
 80095fa:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80095fe:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009602:	18be      	adds	r6, r7, r2
 8009604:	429e      	cmp	r6, r3
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800960c:	eb03 0107 	add.w	r1, r3, r7
 8009610:	d808      	bhi.n	8009624 <ethernetif_input+0xc4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009612:	4448      	add	r0, r9
 8009614:	f000 fbbd 	bl	8009d92 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8009618:	f8d8 8000 	ldr.w	r8, [r8]
 800961c:	f1b8 0f00 	cmp.w	r8, #0
 8009620:	d1e8      	bne.n	80095f4 <ethernetif_input+0x94>
 8009622:	e7bd      	b.n	80095a0 <ethernetif_input+0x40>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009624:	f5c7 67be 	rsb	r7, r7, #1520	; 0x5f0
 8009628:	3704      	adds	r7, #4
 800962a:	463a      	mov	r2, r7
 800962c:	4448      	add	r0, r9
 800962e:	f000 fbb0 	bl	8009d92 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009632:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009636:	f8db 3008 	ldr.w	r3, [fp, #8]
 800963a:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800963c:	44b9      	add	r9, r7
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800963e:	f2a6 52f4 	subw	r2, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8009642:	2700      	movs	r7, #0
 8009644:	e7db      	b.n	80095fe <ethernetif_input+0x9e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009646:	6819      	ldr	r1, [r3, #0]
 8009648:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800964c:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800964e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009650:	3201      	adds	r2, #1
 8009652:	e7a8      	b.n	80095a6 <ethernetif_input+0x46>
 8009654:	200043b8 	.word	0x200043b8
 8009658:	2000961c 	.word	0x2000961c
 800965c:	20004620 	.word	0x20004620

08009660 <HAL_ETH_MspInit>:
{
 8009660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009662:	4604      	mov	r4, r0
 8009664:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009666:	2214      	movs	r2, #20
 8009668:	2100      	movs	r1, #0
 800966a:	a807      	add	r0, sp, #28
 800966c:	f000 fb9c 	bl	8009da8 <memset>
  if(ethHandle->Instance==ETH)
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	4b36      	ldr	r3, [pc, #216]	; (800974c <HAL_ETH_MspInit+0xec>)
 8009674:	429a      	cmp	r2, r3
 8009676:	d167      	bne.n	8009748 <HAL_ETH_MspInit+0xe8>
    __HAL_RCC_ETH_CLK_ENABLE();
 8009678:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800967c:	2400      	movs	r4, #0
 800967e:	9401      	str	r4, [sp, #4]
 8009680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009682:	4833      	ldr	r0, [pc, #204]	; (8009750 <HAL_ETH_MspInit+0xf0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8009684:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009688:	631a      	str	r2, [r3, #48]	; 0x30
 800968a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009690:	9201      	str	r2, [sp, #4]
 8009692:	9a01      	ldr	r2, [sp, #4]
 8009694:	9402      	str	r4, [sp, #8]
 8009696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009698:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
 800969e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80096a4:	9202      	str	r2, [sp, #8]
 80096a6:	9a02      	ldr	r2, [sp, #8]
 80096a8:	9403      	str	r4, [sp, #12]
 80096aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
 80096b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80096b8:	9203      	str	r2, [sp, #12]
 80096ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096bc:	9404      	str	r4, [sp, #16]
 80096be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c0:	f042 0204 	orr.w	r2, r2, #4
 80096c4:	631a      	str	r2, [r3, #48]	; 0x30
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	f002 0204 	and.w	r2, r2, #4
 80096cc:	9204      	str	r2, [sp, #16]
 80096ce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d0:	9405      	str	r4, [sp, #20]
 80096d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096d4:	f042 0201 	orr.w	r2, r2, #1
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30
 80096da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096dc:	f002 0201 	and.w	r2, r2, #1
 80096e0:	9205      	str	r2, [sp, #20]
 80096e2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096e4:	9406      	str	r4, [sp, #24]
 80096e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e8:	f042 0202 	orr.w	r2, r2, #2
 80096ec:	631a      	str	r2, [r3, #48]	; 0x30
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096f8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096fa:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096fc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009700:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009702:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009704:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009706:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009708:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800970a:	f7f7 fb9d 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800970e:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009710:	a907      	add	r1, sp, #28
 8009712:	4810      	ldr	r0, [pc, #64]	; (8009754 <HAL_ETH_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009714:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009716:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800971a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800971c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800971e:	f7f7 fb93 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009726:	a907      	add	r1, sp, #28
 8009728:	480b      	ldr	r0, [pc, #44]	; (8009758 <HAL_ETH_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800972a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009730:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009732:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009734:	f7f7 fb88 	bl	8000e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009738:	203d      	movs	r0, #61	; 0x3d
 800973a:	4622      	mov	r2, r4
 800973c:	2105      	movs	r1, #5
 800973e:	f7f6 ff89 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009742:	203d      	movs	r0, #61	; 0x3d
 8009744:	f7f6 ffba 	bl	80006bc <HAL_NVIC_EnableIRQ>
}
 8009748:	b00d      	add	sp, #52	; 0x34
 800974a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974c:	40028000 	.word	0x40028000
 8009750:	40020800 	.word	0x40020800
 8009754:	40020000 	.word	0x40020000
 8009758:	40020400 	.word	0x40020400

0800975c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800975c:	4b01      	ldr	r3, [pc, #4]	; (8009764 <HAL_ETH_RxCpltCallback+0x8>)
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	f7f8 b8ec 	b.w	800193c <osSemaphoreRelease>
 8009764:	200043b8 	.word	0x200043b8

08009768 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800976a:	4604      	mov	r4, r0
{
 800976c:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800976e:	b930      	cbnz	r0, 800977e <ethernetif_init+0x16>
 8009770:	4b47      	ldr	r3, [pc, #284]	; (8009890 <ethernetif_init+0x128>)
 8009772:	4948      	ldr	r1, [pc, #288]	; (8009894 <ethernetif_init+0x12c>)
 8009774:	4848      	ldr	r0, [pc, #288]	; (8009898 <ethernetif_init+0x130>)
 8009776:	f240 222b 	movw	r2, #555	; 0x22b
 800977a:	f000 fb1d 	bl	8009db8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800977e:	2373      	movs	r3, #115	; 0x73
 8009780:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8009784:	2374      	movs	r3, #116	; 0x74
 8009786:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800978a:	4b44      	ldr	r3, [pc, #272]	; (800989c <ethernetif_init+0x134>)
  heth.Instance = ETH;
 800978c:	4d44      	ldr	r5, [pc, #272]	; (80098a0 <ethernetif_init+0x138>)
  netif->output = etharp_output;
 800978e:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 8009790:	2180      	movs	r1, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009792:	4b44      	ldr	r3, [pc, #272]	; (80098a4 <ethernetif_init+0x13c>)
 8009794:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 8009796:	4a44      	ldr	r2, [pc, #272]	; (80098a8 <ethernetif_init+0x140>)
  MACAddr[1] = 0x80;
 8009798:	f88d 1005 	strb.w	r1, [sp, #5]
  uint32_t regvalue = 0;
 800979c:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800979e:	21e1      	movs	r1, #225	; 0xe1
  uint32_t regvalue = 0;
 80097a0:	9300      	str	r3, [sp, #0]
  heth.Instance = ETH;
 80097a2:	602a      	str	r2, [r5, #0]
  MACAddr[0] = 0x00;
 80097a4:	f88d 3004 	strb.w	r3, [sp, #4]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80097a8:	2201      	movs	r2, #1
  MACAddr[2] = 0xE1;
 80097aa:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x00;
 80097ae:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 80097b2:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 80097b6:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 80097ba:	a901      	add	r1, sp, #4
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80097bc:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80097be:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80097c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80097c4:	606a      	str	r2, [r5, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80097c6:	822a      	strh	r2, [r5, #16]
  heth.Init.MACAddr = &MACAddr[0];
 80097c8:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80097ca:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80097cc:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80097ce:	f7f7 fa03 	bl	8000bd8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80097d2:	b928      	cbnz	r0, 80097e0 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80097d4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80097d8:	f043 0304 	orr.w	r3, r3, #4
 80097dc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80097e0:	2304      	movs	r3, #4
 80097e2:	4a32      	ldr	r2, [pc, #200]	; (80098ac <ethernetif_init+0x144>)
 80097e4:	4932      	ldr	r1, [pc, #200]	; (80098b0 <ethernetif_init+0x148>)
 80097e6:	482e      	ldr	r0, [pc, #184]	; (80098a0 <ethernetif_init+0x138>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80097e8:	4e32      	ldr	r6, [pc, #200]	; (80098b4 <ethernetif_init+0x14c>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80097ea:	f7f7 f817 	bl	800081c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80097ee:	2304      	movs	r3, #4
 80097f0:	4a31      	ldr	r2, [pc, #196]	; (80098b8 <ethernetif_init+0x150>)
 80097f2:	4932      	ldr	r1, [pc, #200]	; (80098bc <ethernetif_init+0x154>)
 80097f4:	482a      	ldr	r0, [pc, #168]	; (80098a0 <ethernetif_init+0x138>)
 80097f6:	f7f7 f84e 	bl	8000896 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80097fa:	2306      	movs	r3, #6
 80097fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009800:	696b      	ldr	r3, [r5, #20]
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009808:	785a      	ldrb	r2, [r3, #1]
 800980a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800980e:	789a      	ldrb	r2, [r3, #2]
 8009810:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009814:	78da      	ldrb	r2, [r3, #3]
 8009816:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800981a:	791a      	ldrb	r2, [r3, #4]
 800981c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009820:	795b      	ldrb	r3, [r3, #5]
 8009822:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8009826:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800982a:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800982c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009830:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 8009834:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009836:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800983a:	2101      	movs	r1, #1
 800983c:	a803      	add	r0, sp, #12
  osSemaphoreDef(SEM);
 800983e:	9703      	str	r7, [sp, #12]
 8009840:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009842:	f7f8 f82f 	bl	80018a4 <osSemaphoreCreate>
 8009846:	4b1e      	ldr	r3, [pc, #120]	; (80098c0 <ethernetif_init+0x158>)
 8009848:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800984a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800984c:	ad05      	add	r5, sp, #20
 800984e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009850:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009854:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009858:	4621      	mov	r1, r4
 800985a:	a805      	add	r0, sp, #20
 800985c:	f7f7 ffc4 	bl	80017e8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8009860:	480f      	ldr	r0, [pc, #60]	; (80098a0 <ethernetif_init+0x138>)
 8009862:	f7f7 fab5 	bl	8000dd0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009866:	466a      	mov	r2, sp
 8009868:	211d      	movs	r1, #29
 800986a:	480d      	ldr	r0, [pc, #52]	; (80098a0 <ethernetif_init+0x138>)
 800986c:	f7f7 f943 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009870:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009872:	480b      	ldr	r0, [pc, #44]	; (80098a0 <ethernetif_init+0x138>)
  regvalue |= (PHY_ISFR_INT4);
 8009874:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009878:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 800987a:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800987c:	f7f7 f975 	bl	8000b6a <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009880:	466a      	mov	r2, sp
 8009882:	211d      	movs	r1, #29
 8009884:	4806      	ldr	r0, [pc, #24]	; (80098a0 <ethernetif_init+0x138>)
 8009886:	f7f7 f936 	bl	8000af6 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800988a:	4638      	mov	r0, r7
 800988c:	b00d      	add	sp, #52	; 0x34
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	0800d3b0 	.word	0x0800d3b0
 8009894:	0800bd64 	.word	0x0800bd64
 8009898:	0800ace9 	.word	0x0800ace9
 800989c:	08004211 	.word	0x08004211
 80098a0:	2000961c 	.word	0x2000961c
 80098a4:	080094c1 	.word	0x080094c1
 80098a8:	40028000 	.word	0x40028000
 80098ac:	20009664 	.word	0x20009664
 80098b0:	20007d4c 	.word	0x20007d4c
 80098b4:	0800ac00 	.word	0x0800ac00
 80098b8:	20007dcc 	.word	0x20007dcc
 80098bc:	2000959c 	.word	0x2000959c
 80098c0:	200043b8 	.word	0x200043b8

080098c4 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 80098c4:	f7f6 be9a 	b.w	80005fc <HAL_GetTick>

080098c8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80098c8:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <vApplicationGetIdleTaskMemory+0x10>)
 80098ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80098cc:	4b03      	ldr	r3, [pc, #12]	; (80098dc <vApplicationGetIdleTaskMemory+0x14>)
 80098ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80098d0:	2380      	movs	r3, #128	; 0x80
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	200045bc 	.word	0x200045bc
 80098dc:	200043bc 	.word	0x200043bc

080098e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80098e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80098e2:	4f2e      	ldr	r7, [pc, #184]	; (800999c <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[3] = 138;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 0;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 80098e4:	4d2e      	ldr	r5, [pc, #184]	; (80099a0 <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[0] = 255;
 80098e6:	4e2f      	ldr	r6, [pc, #188]	; (80099a4 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 169;
 80098e8:	23a9      	movs	r3, #169	; 0xa9
 80098ea:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 254;
 80098ec:	23fe      	movs	r3, #254	; 0xfe
 80098ee:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 193;
 80098f0:	23c1      	movs	r3, #193	; 0xc1
  NETMASK_ADDRESS[2] = 0;
 80098f2:	2400      	movs	r4, #0
  IP_ADDRESS[2] = 193;
 80098f4:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 138;
 80098f6:	238a      	movs	r3, #138	; 0x8a
{
 80098f8:	b085      	sub	sp, #20
  IP_ADDRESS[3] = 138;
 80098fa:	70fb      	strb	r3, [r7, #3]
  GATEWAY_ADDRESS[1] = 0;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 0;
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80098fc:	4621      	mov	r1, r4
  NETMASK_ADDRESS[0] = 255;
 80098fe:	23ff      	movs	r3, #255	; 0xff
  tcpip_init( NULL, NULL );
 8009900:	4620      	mov	r0, r4
  NETMASK_ADDRESS[0] = 255;
 8009902:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8009904:	7073      	strb	r3, [r6, #1]
  GATEWAY_ADDRESS[0] = 0;
 8009906:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009908:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 800990a:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 800990c:	70ec      	strb	r4, [r5, #3]
  NETMASK_ADDRESS[2] = 0;
 800990e:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8009910:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 8009912:	f7f9 fdfd 	bl	8003510 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009916:	787b      	ldrb	r3, [r7, #1]
 8009918:	783a      	ldrb	r2, [r7, #0]
 800991a:	4923      	ldr	r1, [pc, #140]	; (80099a8 <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800991c:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800991e:	041b      	lsls	r3, r3, #16
 8009920:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009924:	78fa      	ldrb	r2, [r7, #3]
 8009926:	4313      	orrs	r3, r2
 8009928:	78ba      	ldrb	r2, [r7, #2]
 800992a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800992e:	ba1b      	rev	r3, r3
 8009930:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009932:	7873      	ldrb	r3, [r6, #1]
 8009934:	7832      	ldrb	r2, [r6, #0]
 8009936:	041b      	lsls	r3, r3, #16
 8009938:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800993c:	78f2      	ldrb	r2, [r6, #3]
 800993e:	4313      	orrs	r3, r2
 8009940:	78b2      	ldrb	r2, [r6, #2]
 8009942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009946:	4a19      	ldr	r2, [pc, #100]	; (80099ac <MX_LWIP_Init+0xcc>)
 8009948:	ba1b      	rev	r3, r3
 800994a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800994c:	782b      	ldrb	r3, [r5, #0]
 800994e:	0400      	lsls	r0, r0, #16
 8009950:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009954:	78eb      	ldrb	r3, [r5, #3]
 8009956:	4318      	orrs	r0, r3
 8009958:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800995a:	4d15      	ldr	r5, [pc, #84]	; (80099b0 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800995c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009960:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <MX_LWIP_Init+0xd4>)
 8009962:	ba00      	rev	r0, r0
 8009964:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009966:	4814      	ldr	r0, [pc, #80]	; (80099b8 <MX_LWIP_Init+0xd8>)
 8009968:	9002      	str	r0, [sp, #8]
 800996a:	4814      	ldr	r0, [pc, #80]	; (80099bc <MX_LWIP_Init+0xdc>)
 800996c:	9001      	str	r0, [sp, #4]
 800996e:	9400      	str	r4, [sp, #0]
 8009970:	4628      	mov	r0, r5
 8009972:	f7fb fde9 	bl	8005548 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009976:	4628      	mov	r0, r5
 8009978:	f7fb fe24 	bl	80055c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800997c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009980:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009982:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8009984:	d504      	bpl.n	8009990 <MX_LWIP_Init+0xb0>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009986:	b005      	add	sp, #20
 8009988:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800998c:	f7fb be20 	b.w	80055d0 <netif_set_up>
}
 8009990:	b005      	add	sp, #20
 8009992:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 8009996:	f7fb be2a 	b.w	80055ee <netif_set_down>
 800999a:	bf00      	nop
 800999c:	2000ae70 	.word	0x2000ae70
 80099a0:	2000ae34 	.word	0x2000ae34
 80099a4:	2000ae6c 	.word	0x2000ae6c
 80099a8:	2000ae68 	.word	0x2000ae68
 80099ac:	2000ae74 	.word	0x2000ae74
 80099b0:	2000ae38 	.word	0x2000ae38
 80099b4:	2000ae78 	.word	0x2000ae78
 80099b8:	08003495 	.word	0x08003495
 80099bc:	08009769 	.word	0x08009769

080099c0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80099c0:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80099c2:	f7ff ff8d 	bl	80098e0 <MX_LWIP_Init>
  httpd_init();
 80099c6:	f7fa f8af 	bl	8003b28 <httpd_init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80099ca:	2001      	movs	r0, #1
 80099cc:	f7f7 ff34 	bl	8001838 <osDelay>
 80099d0:	e7fb      	b.n	80099ca <StartDefaultTask+0xa>
	...

080099d4 <SystemClock_Config>:
{
 80099d4:	b530      	push	{r4, r5, lr}
 80099d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80099d8:	2230      	movs	r2, #48	; 0x30
 80099da:	2100      	movs	r1, #0
 80099dc:	a808      	add	r0, sp, #32
 80099de:	f000 f9e3 	bl	8009da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099e2:	2100      	movs	r1, #0
 80099e4:	2214      	movs	r2, #20
 80099e6:	a803      	add	r0, sp, #12
 80099e8:	f000 f9de 	bl	8009da8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80099ec:	2400      	movs	r4, #0
 80099ee:	4b1d      	ldr	r3, [pc, #116]	; (8009a64 <SystemClock_Config+0x90>)
 80099f0:	9401      	str	r4, [sp, #4]
 80099f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a04:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <SystemClock_Config+0x94>)
 8009a06:	9402      	str	r4, [sp, #8]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a16:	9302      	str	r3, [sp, #8]
 8009a18:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a22:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009a24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a28:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009a2a:	2308      	movs	r3, #8
 8009a2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009a2e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009a32:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009a34:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a36:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009a38:	2307      	movs	r3, #7
 8009a3a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009a3c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009a3e:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a40:	f7f7 fae8 	bl	8001014 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a44:	230f      	movs	r3, #15
 8009a46:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009a4c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009a4e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009a54:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a56:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a58:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009a5a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009a5c:	f7f7 fcae 	bl	80013bc <HAL_RCC_ClockConfig>
}
 8009a60:	b015      	add	sp, #84	; 0x54
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	40023800 	.word	0x40023800
 8009a68:	40007000 	.word	0x40007000

08009a6c <main>:
{
 8009a6c:	b500      	push	{lr}
 8009a6e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8009a70:	f7f6 fd9e 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 8009a74:	f7ff ffae 	bl	80099d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a78:	2214      	movs	r2, #20
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	eb0d 0002 	add.w	r0, sp, r2
 8009a80:	f000 f992 	bl	8009da8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a84:	2400      	movs	r4, #0
 8009a86:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <main+0xc4>)
 8009a88:	9400      	str	r4, [sp, #0]
 8009a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8009a8c:	4829      	ldr	r0, [pc, #164]	; (8009b34 <main+0xc8>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8009a8e:	4e2a      	ldr	r6, [pc, #168]	; (8009b38 <main+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a90:	f042 0204 	orr.w	r2, r2, #4
 8009a94:	631a      	str	r2, [r3, #48]	; 0x30
 8009a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a98:	f002 0204 	and.w	r2, r2, #4
 8009a9c:	9200      	str	r2, [sp, #0]
 8009a9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009aa0:	9401      	str	r4, [sp, #4]
 8009aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8009aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009ab0:	9201      	str	r2, [sp, #4]
 8009ab2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab4:	9402      	str	r4, [sp, #8]
 8009ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab8:	f042 0201 	orr.w	r2, r2, #1
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30
 8009abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac0:	f002 0201 	and.w	r2, r2, #1
 8009ac4:	9202      	str	r2, [sp, #8]
 8009ac6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ac8:	9403      	str	r4, [sp, #12]
 8009aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009acc:	f042 0202 	orr.w	r2, r2, #2
 8009ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad4:	f002 0202 	and.w	r2, r2, #2
 8009ad8:	9203      	str	r2, [sp, #12]
 8009ada:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009adc:	9404      	str	r4, [sp, #16]
 8009ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae8:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8009aec:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009aee:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8009af0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009af4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8009af6:	f7f7 fa87 	bl	8001008 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009afa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009afe:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b00:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b02:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b04:	480b      	ldr	r0, [pc, #44]	; (8009b34 <main+0xc8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b06:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b08:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b0a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b0c:	f7f7 f99c 	bl	8000e48 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8009b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009b12:	ad05      	add	r5, sp, #20
 8009b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b16:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009b1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009b1e:	4621      	mov	r1, r4
 8009b20:	a805      	add	r0, sp, #20
 8009b22:	f7f7 fe61 	bl	80017e8 <osThreadCreate>
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <main+0xd0>)
 8009b28:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8009b2a:	f7f7 fe51 	bl	80017d0 <osKernelStart>
 8009b2e:	e7fe      	b.n	8009b2e <main+0xc2>
 8009b30:	40023800 	.word	0x40023800
 8009b34:	40020c00 	.word	0x40020c00
 8009b38:	0800ac1c 	.word	0x0800ac1c
 8009b3c:	2000ae7c 	.word	0x2000ae7c

08009b40 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8009b40:	6802      	ldr	r2, [r0, #0]
 8009b42:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d101      	bne.n	8009b4c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8009b48:	f7f6 bd4c 	b.w	80005e4 <HAL_IncTick>
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40000c00 	.word	0x40000c00

08009b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b54:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <HAL_MspInit+0x40>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	9200      	str	r2, [sp, #0]
 8009b5c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009b5e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8009b62:	6459      	str	r1, [r3, #68]	; 0x44
 8009b64:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009b66:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8009b6a:	9100      	str	r1, [sp, #0]
 8009b6c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009b72:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8009b76:	6419      	str	r1, [r3, #64]	; 0x40
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b7e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009b80:	210f      	movs	r1, #15
 8009b82:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009b88:	f7f6 fd64 	bl	8000654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b8c:	b003      	add	sp, #12
 8009b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b92:	bf00      	nop
 8009b94:	40023800 	.word	0x40023800

08009b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b98:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8009b9a:	4601      	mov	r1, r0
{
 8009b9c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2032      	movs	r0, #50	; 0x32
 8009ba2:	f7f6 fd57 	bl	8000654 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8009ba6:	2032      	movs	r0, #50	; 0x32
 8009ba8:	f7f6 fd88 	bl	80006bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8009bac:	2500      	movs	r5, #0
 8009bae:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <HAL_InitTick+0x6c>)
 8009bb0:	9502      	str	r5, [sp, #8]
 8009bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8009bb4:	4c14      	ldr	r4, [pc, #80]	; (8009c08 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM5_CLK_ENABLE();
 8009bb6:	f042 0208 	orr.w	r2, r2, #8
 8009bba:	641a      	str	r2, [r3, #64]	; 0x40
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	f003 0308 	and.w	r3, r3, #8
 8009bc2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009bc4:	a901      	add	r1, sp, #4
 8009bc6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM5_CLK_ENABLE();
 8009bc8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009bca:	f7f7 fca9 	bl	8001520 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009bce:	f7f7 fc97 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
  htim5.Instance = TIM5;
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <HAL_InitTick+0x74>)
 8009bd4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8009bd6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009bda:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009bdc:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009bde:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <HAL_InitTick+0x78>)
 8009be0:	fbb0 f0f3 	udiv	r0, r0, r3
 8009be4:	3801      	subs	r0, #1
  htim5.Init.Prescaler = uwPrescalerValue;
 8009be6:	6060      	str	r0, [r4, #4]
  htim5.Init.ClockDivision = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8009be8:	4620      	mov	r0, r4
  htim5.Init.ClockDivision = 0;
 8009bea:	6125      	str	r5, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bec:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8009bee:	f7f7 fdd3 	bl	8001798 <HAL_TIM_Base_Init>
 8009bf2:	b920      	cbnz	r0, 8009bfe <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7f7 fcb2 	bl	800155e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8009bfa:	b009      	add	sp, #36	; 0x24
 8009bfc:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8009bfe:	2001      	movs	r0, #1
 8009c00:	e7fb      	b.n	8009bfa <HAL_InitTick+0x62>
 8009c02:	bf00      	nop
 8009c04:	40023800 	.word	0x40023800
 8009c08:	2000ae80 	.word	0x2000ae80
 8009c0c:	40000c00 	.word	0x40000c00
 8009c10:	000f4240 	.word	0x000f4240

08009c14 <NMI_Handler>:
 8009c14:	4770      	bx	lr

08009c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c16:	e7fe      	b.n	8009c16 <HardFault_Handler>

08009c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c18:	e7fe      	b.n	8009c18 <MemManage_Handler>

08009c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c1a:	e7fe      	b.n	8009c1a <BusFault_Handler>

08009c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c1c:	e7fe      	b.n	8009c1c <UsageFault_Handler>

08009c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c1e:	4770      	bx	lr

08009c20 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <TIM5_IRQHandler+0x8>)
 8009c22:	f7f7 bcb0 	b.w	8001586 <HAL_TIM_IRQHandler>
 8009c26:	bf00      	nop
 8009c28:	2000ae80 	.word	0x2000ae80

08009c2c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <ETH_IRQHandler+0x8>)
 8009c2e:	f7f6 bf2a 	b.w	8000a86 <HAL_ETH_IRQHandler>
 8009c32:	bf00      	nop
 8009c34:	2000961c 	.word	0x2000961c

08009c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c3e:	460c      	mov	r4, r1
 8009c40:	1ba3      	subs	r3, r4, r6
 8009c42:	429d      	cmp	r5, r3
 8009c44:	dc01      	bgt.n	8009c4a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8009c46:	4628      	mov	r0, r5
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8009c4a:	f3af 8000 	nop.w
 8009c4e:	f804 0b01 	strb.w	r0, [r4], #1
 8009c52:	e7f5      	b.n	8009c40 <_read+0x8>

08009c54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	460e      	mov	r6, r1
 8009c58:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	1ba3      	subs	r3, r4, r6
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	dc01      	bgt.n	8009c66 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8009c62:	4628      	mov	r0, r5
 8009c64:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8009c66:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c6a:	f3af 8000 	nop.w
 8009c6e:	e7f5      	b.n	8009c5c <_write+0x8>

08009c70 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009c70:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <_sbrk+0x28>)
 8009c72:	6819      	ldr	r1, [r3, #0]
{
 8009c74:	4602      	mov	r2, r0
	if (heap_end == 0)
 8009c76:	b909      	cbnz	r1, 8009c7c <_sbrk+0xc>
		heap_end = &end;
 8009c78:	4908      	ldr	r1, [pc, #32]	; (8009c9c <_sbrk+0x2c>)
 8009c7a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8009c7c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8009c7e:	4669      	mov	r1, sp
 8009c80:	4402      	add	r2, r0
 8009c82:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8009c84:	bf89      	itett	hi
 8009c86:	4b06      	ldrhi	r3, [pc, #24]	; (8009ca0 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 8009c88:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8009c8a:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 8009c8c:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 8009c90:	bf88      	it	hi
 8009c92:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20004610 	.word	0x20004610
 8009c9c:	2000aec0 	.word	0x2000aec0
 8009ca0:	20007d44 	.word	0x20007d44

08009ca4 <_close>:

int _close(int file)
{
	return -1;
}
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	4770      	bx	lr

08009caa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8009caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cae:	604b      	str	r3, [r1, #4]
	return 0;
}
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4770      	bx	lr

08009cb4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	4770      	bx	lr

08009cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009cb8:	2000      	movs	r0, #0
 8009cba:	4770      	bx	lr

08009cbc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <SystemInit+0x18>)
 8009cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009cc2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cce:	609a      	str	r2, [r3, #8]
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	e000ed00 	.word	0xe000ed00

08009cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009cde:	e003      	b.n	8009ce8 <LoopCopyDataInit>

08009ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ce6:	3104      	adds	r1, #4

08009ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ce8:	480b      	ldr	r0, [pc, #44]	; (8009d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009cf0:	d3f6      	bcc.n	8009ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8009cf2:	4a0b      	ldr	r2, [pc, #44]	; (8009d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cf4:	e002      	b.n	8009cfc <LoopFillZerobss>

08009cf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cf8:	f842 3b04 	str.w	r3, [r2], #4

08009cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d00:	d3f9      	bcc.n	8009cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d02:	f7ff ffdb 	bl	8009cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d06:	f000 f811 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d0a:	f7ff feaf 	bl	8009a6c <main>
  bx  lr    
 8009d0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009d10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009d14:	0800d498 	.word	0x0800d498
  ldr  r0, =_sdata
 8009d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d1c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8009d20:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8009d24:	2000aec0 	.word	0x2000aec0

08009d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d28:	e7fe      	b.n	8009d28 <ADC_IRQHandler>
	...

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4e0d      	ldr	r6, [pc, #52]	; (8009d64 <__libc_init_array+0x38>)
 8009d30:	4c0d      	ldr	r4, [pc, #52]	; (8009d68 <__libc_init_array+0x3c>)
 8009d32:	1ba4      	subs	r4, r4, r6
 8009d34:	10a4      	asrs	r4, r4, #2
 8009d36:	2500      	movs	r5, #0
 8009d38:	42a5      	cmp	r5, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	4e0b      	ldr	r6, [pc, #44]	; (8009d6c <__libc_init_array+0x40>)
 8009d3e:	4c0c      	ldr	r4, [pc, #48]	; (8009d70 <__libc_init_array+0x44>)
 8009d40:	f000 ff52 	bl	800abe8 <_init>
 8009d44:	1ba4      	subs	r4, r4, r6
 8009d46:	10a4      	asrs	r4, r4, #2
 8009d48:	2500      	movs	r5, #0
 8009d4a:	42a5      	cmp	r5, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d54:	4798      	blx	r3
 8009d56:	3501      	adds	r5, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d5e:	4798      	blx	r3
 8009d60:	3501      	adds	r5, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	0800d490 	.word	0x0800d490
 8009d68:	0800d490 	.word	0x0800d490
 8009d6c:	0800d490 	.word	0x0800d490
 8009d70:	0800d494 	.word	0x0800d494

08009d74 <memcmp>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	3901      	subs	r1, #1
 8009d78:	4402      	add	r2, r0
 8009d7a:	4290      	cmp	r0, r2
 8009d7c:	d101      	bne.n	8009d82 <memcmp+0xe>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009d86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	d0f5      	beq.n	8009d7a <memcmp+0x6>
 8009d8e:	1b18      	subs	r0, r3, r4
 8009d90:	bd10      	pop	{r4, pc}

08009d92 <memcpy>:
 8009d92:	b510      	push	{r4, lr}
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	440a      	add	r2, r1
 8009d98:	4291      	cmp	r1, r2
 8009d9a:	d100      	bne.n	8009d9e <memcpy+0xc>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009da6:	e7f7      	b.n	8009d98 <memcpy+0x6>

08009da8 <memset>:
 8009da8:	4402      	add	r2, r0
 8009daa:	4603      	mov	r3, r0
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d100      	bne.n	8009db2 <memset+0xa>
 8009db0:	4770      	bx	lr
 8009db2:	f803 1b01 	strb.w	r1, [r3], #1
 8009db6:	e7f9      	b.n	8009dac <memset+0x4>

08009db8 <iprintf>:
 8009db8:	b40f      	push	{r0, r1, r2, r3}
 8009dba:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <iprintf+0x2c>)
 8009dbc:	b513      	push	{r0, r1, r4, lr}
 8009dbe:	681c      	ldr	r4, [r3, #0]
 8009dc0:	b124      	cbz	r4, 8009dcc <iprintf+0x14>
 8009dc2:	69a3      	ldr	r3, [r4, #24]
 8009dc4:	b913      	cbnz	r3, 8009dcc <iprintf+0x14>
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 f86e 	bl	8009ea8 <__sinit>
 8009dcc:	ab05      	add	r3, sp, #20
 8009dce:	9a04      	ldr	r2, [sp, #16]
 8009dd0:	68a1      	ldr	r1, [r4, #8]
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 f979 	bl	800a0cc <_vfiprintf_r>
 8009dda:	b002      	add	sp, #8
 8009ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de0:	b004      	add	sp, #16
 8009de2:	4770      	bx	lr
 8009de4:	20000018 	.word	0x20000018

08009de8 <strchr>:
 8009de8:	b2c9      	uxtb	r1, r1
 8009dea:	4603      	mov	r3, r0
 8009dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df0:	b11a      	cbz	r2, 8009dfa <strchr+0x12>
 8009df2:	4291      	cmp	r1, r2
 8009df4:	d1f9      	bne.n	8009dea <strchr+0x2>
 8009df6:	4618      	mov	r0, r3
 8009df8:	4770      	bx	lr
 8009dfa:	2900      	cmp	r1, #0
 8009dfc:	bf0c      	ite	eq
 8009dfe:	4618      	moveq	r0, r3
 8009e00:	2000      	movne	r0, #0
 8009e02:	4770      	bx	lr

08009e04 <strncmp>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	b16a      	cbz	r2, 8009e24 <strncmp+0x20>
 8009e08:	3901      	subs	r1, #1
 8009e0a:	1884      	adds	r4, r0, r2
 8009e0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d103      	bne.n	8009e20 <strncmp+0x1c>
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d001      	beq.n	8009e20 <strncmp+0x1c>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f5      	bne.n	8009e0c <strncmp+0x8>
 8009e20:	1a98      	subs	r0, r3, r2
 8009e22:	bd10      	pop	{r4, pc}
 8009e24:	4610      	mov	r0, r2
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <_cleanup_r>:
 8009e28:	4901      	ldr	r1, [pc, #4]	; (8009e30 <_cleanup_r+0x8>)
 8009e2a:	f000 b8a9 	b.w	8009f80 <_fwalk_reent>
 8009e2e:	bf00      	nop
 8009e30:	0800a9a1 	.word	0x0800a9a1

08009e34 <std.isra.0>:
 8009e34:	2300      	movs	r3, #0
 8009e36:	b510      	push	{r4, lr}
 8009e38:	4604      	mov	r4, r0
 8009e3a:	6003      	str	r3, [r0, #0]
 8009e3c:	6043      	str	r3, [r0, #4]
 8009e3e:	6083      	str	r3, [r0, #8]
 8009e40:	8181      	strh	r1, [r0, #12]
 8009e42:	6643      	str	r3, [r0, #100]	; 0x64
 8009e44:	81c2      	strh	r2, [r0, #14]
 8009e46:	6103      	str	r3, [r0, #16]
 8009e48:	6143      	str	r3, [r0, #20]
 8009e4a:	6183      	str	r3, [r0, #24]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	2208      	movs	r2, #8
 8009e50:	305c      	adds	r0, #92	; 0x5c
 8009e52:	f7ff ffa9 	bl	8009da8 <memset>
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <std.isra.0+0x38>)
 8009e58:	6263      	str	r3, [r4, #36]	; 0x24
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <std.isra.0+0x3c>)
 8009e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <std.isra.0+0x40>)
 8009e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e62:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <std.isra.0+0x44>)
 8009e64:	6224      	str	r4, [r4, #32]
 8009e66:	6323      	str	r3, [r4, #48]	; 0x30
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800a645 	.word	0x0800a645
 8009e70:	0800a667 	.word	0x0800a667
 8009e74:	0800a69f 	.word	0x0800a69f
 8009e78:	0800a6c3 	.word	0x0800a6c3

08009e7c <__sfmoreglue>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	1e4a      	subs	r2, r1, #1
 8009e80:	2568      	movs	r5, #104	; 0x68
 8009e82:	4355      	muls	r5, r2
 8009e84:	460e      	mov	r6, r1
 8009e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e8a:	f000 f897 	bl	8009fbc <_malloc_r>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	b140      	cbz	r0, 8009ea4 <__sfmoreglue+0x28>
 8009e92:	2100      	movs	r1, #0
 8009e94:	e880 0042 	stmia.w	r0, {r1, r6}
 8009e98:	300c      	adds	r0, #12
 8009e9a:	60a0      	str	r0, [r4, #8]
 8009e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ea0:	f7ff ff82 	bl	8009da8 <memset>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}

08009ea8 <__sinit>:
 8009ea8:	6983      	ldr	r3, [r0, #24]
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	bb33      	cbnz	r3, 8009efe <__sinit+0x56>
 8009eb0:	6483      	str	r3, [r0, #72]	; 0x48
 8009eb2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009eb4:	6503      	str	r3, [r0, #80]	; 0x50
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <__sinit+0x58>)
 8009eb8:	4a12      	ldr	r2, [pc, #72]	; (8009f04 <__sinit+0x5c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6282      	str	r2, [r0, #40]	; 0x28
 8009ebe:	4298      	cmp	r0, r3
 8009ec0:	bf04      	itt	eq
 8009ec2:	2301      	moveq	r3, #1
 8009ec4:	6183      	streq	r3, [r0, #24]
 8009ec6:	f000 f81f 	bl	8009f08 <__sfp>
 8009eca:	6060      	str	r0, [r4, #4]
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 f81b 	bl	8009f08 <__sfp>
 8009ed2:	60a0      	str	r0, [r4, #8]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f817 	bl	8009f08 <__sfp>
 8009eda:	2200      	movs	r2, #0
 8009edc:	60e0      	str	r0, [r4, #12]
 8009ede:	2104      	movs	r1, #4
 8009ee0:	6860      	ldr	r0, [r4, #4]
 8009ee2:	f7ff ffa7 	bl	8009e34 <std.isra.0>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	2109      	movs	r1, #9
 8009eea:	68a0      	ldr	r0, [r4, #8]
 8009eec:	f7ff ffa2 	bl	8009e34 <std.isra.0>
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	2112      	movs	r1, #18
 8009ef4:	68e0      	ldr	r0, [r4, #12]
 8009ef6:	f7ff ff9d 	bl	8009e34 <std.isra.0>
 8009efa:	2301      	movs	r3, #1
 8009efc:	61a3      	str	r3, [r4, #24]
 8009efe:	bd10      	pop	{r4, pc}
 8009f00:	0800d450 	.word	0x0800d450
 8009f04:	08009e29 	.word	0x08009e29

08009f08 <__sfp>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	4b1c      	ldr	r3, [pc, #112]	; (8009f7c <__sfp+0x74>)
 8009f0c:	681e      	ldr	r6, [r3, #0]
 8009f0e:	69b3      	ldr	r3, [r6, #24]
 8009f10:	4607      	mov	r7, r0
 8009f12:	b913      	cbnz	r3, 8009f1a <__sfp+0x12>
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7ff ffc7 	bl	8009ea8 <__sinit>
 8009f1a:	3648      	adds	r6, #72	; 0x48
 8009f1c:	68b4      	ldr	r4, [r6, #8]
 8009f1e:	6873      	ldr	r3, [r6, #4]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	d503      	bpl.n	8009f2c <__sfp+0x24>
 8009f24:	6833      	ldr	r3, [r6, #0]
 8009f26:	b133      	cbz	r3, 8009f36 <__sfp+0x2e>
 8009f28:	6836      	ldr	r6, [r6, #0]
 8009f2a:	e7f7      	b.n	8009f1c <__sfp+0x14>
 8009f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f30:	b16d      	cbz	r5, 8009f4e <__sfp+0x46>
 8009f32:	3468      	adds	r4, #104	; 0x68
 8009f34:	e7f4      	b.n	8009f20 <__sfp+0x18>
 8009f36:	2104      	movs	r1, #4
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7ff ff9f 	bl	8009e7c <__sfmoreglue>
 8009f3e:	6030      	str	r0, [r6, #0]
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d1f1      	bne.n	8009f28 <__sfp+0x20>
 8009f44:	230c      	movs	r3, #12
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f52:	81e3      	strh	r3, [r4, #14]
 8009f54:	2301      	movs	r3, #1
 8009f56:	81a3      	strh	r3, [r4, #12]
 8009f58:	6665      	str	r5, [r4, #100]	; 0x64
 8009f5a:	6025      	str	r5, [r4, #0]
 8009f5c:	60a5      	str	r5, [r4, #8]
 8009f5e:	6065      	str	r5, [r4, #4]
 8009f60:	6125      	str	r5, [r4, #16]
 8009f62:	6165      	str	r5, [r4, #20]
 8009f64:	61a5      	str	r5, [r4, #24]
 8009f66:	2208      	movs	r2, #8
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f6e:	f7ff ff1b 	bl	8009da8 <memset>
 8009f72:	6365      	str	r5, [r4, #52]	; 0x34
 8009f74:	63a5      	str	r5, [r4, #56]	; 0x38
 8009f76:	64a5      	str	r5, [r4, #72]	; 0x48
 8009f78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009f7a:	e7e6      	b.n	8009f4a <__sfp+0x42>
 8009f7c:	0800d450 	.word	0x0800d450

08009f80 <_fwalk_reent>:
 8009f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f8c:	2600      	movs	r6, #0
 8009f8e:	b914      	cbnz	r4, 8009f96 <_fwalk_reent+0x16>
 8009f90:	4630      	mov	r0, r6
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	68a5      	ldr	r5, [r4, #8]
 8009f98:	6867      	ldr	r7, [r4, #4]
 8009f9a:	3f01      	subs	r7, #1
 8009f9c:	d501      	bpl.n	8009fa2 <_fwalk_reent+0x22>
 8009f9e:	6824      	ldr	r4, [r4, #0]
 8009fa0:	e7f5      	b.n	8009f8e <_fwalk_reent+0xe>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d907      	bls.n	8009fb8 <_fwalk_reent+0x38>
 8009fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fac:	3301      	adds	r3, #1
 8009fae:	d003      	beq.n	8009fb8 <_fwalk_reent+0x38>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	47c8      	blx	r9
 8009fb6:	4306      	orrs	r6, r0
 8009fb8:	3568      	adds	r5, #104	; 0x68
 8009fba:	e7ee      	b.n	8009f9a <_fwalk_reent+0x1a>

08009fbc <_malloc_r>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	1ccd      	adds	r5, r1, #3
 8009fc0:	f025 0503 	bic.w	r5, r5, #3
 8009fc4:	3508      	adds	r5, #8
 8009fc6:	2d0c      	cmp	r5, #12
 8009fc8:	bf38      	it	cc
 8009fca:	250c      	movcc	r5, #12
 8009fcc:	2d00      	cmp	r5, #0
 8009fce:	4606      	mov	r6, r0
 8009fd0:	db01      	blt.n	8009fd6 <_malloc_r+0x1a>
 8009fd2:	42a9      	cmp	r1, r5
 8009fd4:	d903      	bls.n	8009fde <_malloc_r+0x22>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	6033      	str	r3, [r6, #0]
 8009fda:	2000      	movs	r0, #0
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	f000 fd7f 	bl	800aae0 <__malloc_lock>
 8009fe2:	4a23      	ldr	r2, [pc, #140]	; (800a070 <_malloc_r+0xb4>)
 8009fe4:	6814      	ldr	r4, [r2, #0]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	b991      	cbnz	r1, 800a010 <_malloc_r+0x54>
 8009fea:	4c22      	ldr	r4, [pc, #136]	; (800a074 <_malloc_r+0xb8>)
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	b91b      	cbnz	r3, 8009ff8 <_malloc_r+0x3c>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 fb17 	bl	800a624 <_sbrk_r>
 8009ff6:	6020      	str	r0, [r4, #0]
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 fb12 	bl	800a624 <_sbrk_r>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d126      	bne.n	800a052 <_malloc_r+0x96>
 800a004:	230c      	movs	r3, #12
 800a006:	6033      	str	r3, [r6, #0]
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 fd6a 	bl	800aae2 <__malloc_unlock>
 800a00e:	e7e4      	b.n	8009fda <_malloc_r+0x1e>
 800a010:	680b      	ldr	r3, [r1, #0]
 800a012:	1b5b      	subs	r3, r3, r5
 800a014:	d41a      	bmi.n	800a04c <_malloc_r+0x90>
 800a016:	2b0b      	cmp	r3, #11
 800a018:	d90f      	bls.n	800a03a <_malloc_r+0x7e>
 800a01a:	600b      	str	r3, [r1, #0]
 800a01c:	50cd      	str	r5, [r1, r3]
 800a01e:	18cc      	adds	r4, r1, r3
 800a020:	4630      	mov	r0, r6
 800a022:	f000 fd5e 	bl	800aae2 <__malloc_unlock>
 800a026:	f104 000b 	add.w	r0, r4, #11
 800a02a:	1d23      	adds	r3, r4, #4
 800a02c:	f020 0007 	bic.w	r0, r0, #7
 800a030:	1ac3      	subs	r3, r0, r3
 800a032:	d01b      	beq.n	800a06c <_malloc_r+0xb0>
 800a034:	425a      	negs	r2, r3
 800a036:	50e2      	str	r2, [r4, r3]
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	428c      	cmp	r4, r1
 800a03c:	bf0d      	iteet	eq
 800a03e:	6863      	ldreq	r3, [r4, #4]
 800a040:	684b      	ldrne	r3, [r1, #4]
 800a042:	6063      	strne	r3, [r4, #4]
 800a044:	6013      	streq	r3, [r2, #0]
 800a046:	bf18      	it	ne
 800a048:	460c      	movne	r4, r1
 800a04a:	e7e9      	b.n	800a020 <_malloc_r+0x64>
 800a04c:	460c      	mov	r4, r1
 800a04e:	6849      	ldr	r1, [r1, #4]
 800a050:	e7ca      	b.n	8009fe8 <_malloc_r+0x2c>
 800a052:	1cc4      	adds	r4, r0, #3
 800a054:	f024 0403 	bic.w	r4, r4, #3
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d005      	beq.n	800a068 <_malloc_r+0xac>
 800a05c:	1a21      	subs	r1, r4, r0
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 fae0 	bl	800a624 <_sbrk_r>
 800a064:	3001      	adds	r0, #1
 800a066:	d0cd      	beq.n	800a004 <_malloc_r+0x48>
 800a068:	6025      	str	r5, [r4, #0]
 800a06a:	e7d9      	b.n	800a020 <_malloc_r+0x64>
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	bf00      	nop
 800a070:	20004614 	.word	0x20004614
 800a074:	20004618 	.word	0x20004618

0800a078 <__sfputc_r>:
 800a078:	6893      	ldr	r3, [r2, #8]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	b410      	push	{r4}
 800a080:	6093      	str	r3, [r2, #8]
 800a082:	da09      	bge.n	800a098 <__sfputc_r+0x20>
 800a084:	6994      	ldr	r4, [r2, #24]
 800a086:	42a3      	cmp	r3, r4
 800a088:	db02      	blt.n	800a090 <__sfputc_r+0x18>
 800a08a:	b2cb      	uxtb	r3, r1
 800a08c:	2b0a      	cmp	r3, #10
 800a08e:	d103      	bne.n	800a098 <__sfputc_r+0x20>
 800a090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a094:	f000 bb1a 	b.w	800a6cc <__swbuf_r>
 800a098:	6813      	ldr	r3, [r2, #0]
 800a09a:	1c58      	adds	r0, r3, #1
 800a09c:	6010      	str	r0, [r2, #0]
 800a09e:	7019      	strb	r1, [r3, #0]
 800a0a0:	b2c8      	uxtb	r0, r1
 800a0a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <__sfputs_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	18d5      	adds	r5, r2, r3
 800a0b2:	42ac      	cmp	r4, r5
 800a0b4:	d101      	bne.n	800a0ba <__sfputs_r+0x12>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e007      	b.n	800a0ca <__sfputs_r+0x22>
 800a0ba:	463a      	mov	r2, r7
 800a0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f7ff ffd9 	bl	800a078 <__sfputc_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d1f3      	bne.n	800a0b2 <__sfputs_r+0xa>
 800a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0cc <_vfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	b09d      	sub	sp, #116	; 0x74
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	4617      	mov	r7, r2
 800a0d6:	9303      	str	r3, [sp, #12]
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b118      	cbz	r0, 800a0e4 <_vfiprintf_r+0x18>
 800a0dc:	6983      	ldr	r3, [r0, #24]
 800a0de:	b90b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x18>
 800a0e0:	f7ff fee2 	bl	8009ea8 <__sinit>
 800a0e4:	4b7c      	ldr	r3, [pc, #496]	; (800a2d8 <_vfiprintf_r+0x20c>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d157      	bne.n	800a19a <_vfiprintf_r+0xce>
 800a0ea:	6874      	ldr	r4, [r6, #4]
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	0718      	lsls	r0, r3, #28
 800a0f0:	d55d      	bpl.n	800a1ae <_vfiprintf_r+0xe2>
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d05a      	beq.n	800a1ae <_vfiprintf_r+0xe2>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a102:	2330      	movs	r3, #48	; 0x30
 800a104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a108:	f04f 0b01 	mov.w	fp, #1
 800a10c:	46b8      	mov	r8, r7
 800a10e:	4645      	mov	r5, r8
 800a110:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d155      	bne.n	800a1c4 <_vfiprintf_r+0xf8>
 800a118:	ebb8 0a07 	subs.w	sl, r8, r7
 800a11c:	d00b      	beq.n	800a136 <_vfiprintf_r+0x6a>
 800a11e:	4653      	mov	r3, sl
 800a120:	463a      	mov	r2, r7
 800a122:	4621      	mov	r1, r4
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff ffbf 	bl	800a0a8 <__sfputs_r>
 800a12a:	3001      	adds	r0, #1
 800a12c:	f000 80c4 	beq.w	800a2b8 <_vfiprintf_r+0x1ec>
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	4453      	add	r3, sl
 800a134:	9309      	str	r3, [sp, #36]	; 0x24
 800a136:	f898 3000 	ldrb.w	r3, [r8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80bc 	beq.w	800a2b8 <_vfiprintf_r+0x1ec>
 800a140:	2300      	movs	r3, #0
 800a142:	f04f 32ff 	mov.w	r2, #4294967295
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	9307      	str	r3, [sp, #28]
 800a14a:	9205      	str	r2, [sp, #20]
 800a14c:	9306      	str	r3, [sp, #24]
 800a14e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a152:	931a      	str	r3, [sp, #104]	; 0x68
 800a154:	2205      	movs	r2, #5
 800a156:	7829      	ldrb	r1, [r5, #0]
 800a158:	4860      	ldr	r0, [pc, #384]	; (800a2dc <_vfiprintf_r+0x210>)
 800a15a:	f7f6 f851 	bl	8000200 <memchr>
 800a15e:	f105 0801 	add.w	r8, r5, #1
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	2800      	cmp	r0, #0
 800a166:	d131      	bne.n	800a1cc <_vfiprintf_r+0x100>
 800a168:	06d9      	lsls	r1, r3, #27
 800a16a:	bf44      	itt	mi
 800a16c:	2220      	movmi	r2, #32
 800a16e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a172:	071a      	lsls	r2, r3, #28
 800a174:	bf44      	itt	mi
 800a176:	222b      	movmi	r2, #43	; 0x2b
 800a178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a17c:	782a      	ldrb	r2, [r5, #0]
 800a17e:	2a2a      	cmp	r2, #42	; 0x2a
 800a180:	d02c      	beq.n	800a1dc <_vfiprintf_r+0x110>
 800a182:	9a07      	ldr	r2, [sp, #28]
 800a184:	2100      	movs	r1, #0
 800a186:	200a      	movs	r0, #10
 800a188:	46a8      	mov	r8, r5
 800a18a:	3501      	adds	r5, #1
 800a18c:	f898 3000 	ldrb.w	r3, [r8]
 800a190:	3b30      	subs	r3, #48	; 0x30
 800a192:	2b09      	cmp	r3, #9
 800a194:	d96d      	bls.n	800a272 <_vfiprintf_r+0x1a6>
 800a196:	b371      	cbz	r1, 800a1f6 <_vfiprintf_r+0x12a>
 800a198:	e026      	b.n	800a1e8 <_vfiprintf_r+0x11c>
 800a19a:	4b51      	ldr	r3, [pc, #324]	; (800a2e0 <_vfiprintf_r+0x214>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	d101      	bne.n	800a1a4 <_vfiprintf_r+0xd8>
 800a1a0:	68b4      	ldr	r4, [r6, #8]
 800a1a2:	e7a3      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a1a4:	4b4f      	ldr	r3, [pc, #316]	; (800a2e4 <_vfiprintf_r+0x218>)
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	bf08      	it	eq
 800a1aa:	68f4      	ldreq	r4, [r6, #12]
 800a1ac:	e79e      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 faef 	bl	800a794 <__swsetup_r>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d09e      	beq.n	800a0f8 <_vfiprintf_r+0x2c>
 800a1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a1be:	b01d      	add	sp, #116	; 0x74
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	2b25      	cmp	r3, #37	; 0x25
 800a1c6:	d0a7      	beq.n	800a118 <_vfiprintf_r+0x4c>
 800a1c8:	46a8      	mov	r8, r5
 800a1ca:	e7a0      	b.n	800a10e <_vfiprintf_r+0x42>
 800a1cc:	4a43      	ldr	r2, [pc, #268]	; (800a2dc <_vfiprintf_r+0x210>)
 800a1ce:	1a80      	subs	r0, r0, r2
 800a1d0:	fa0b f000 	lsl.w	r0, fp, r0
 800a1d4:	4318      	orrs	r0, r3
 800a1d6:	9004      	str	r0, [sp, #16]
 800a1d8:	4645      	mov	r5, r8
 800a1da:	e7bb      	b.n	800a154 <_vfiprintf_r+0x88>
 800a1dc:	9a03      	ldr	r2, [sp, #12]
 800a1de:	1d11      	adds	r1, r2, #4
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	9103      	str	r1, [sp, #12]
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	db01      	blt.n	800a1ec <_vfiprintf_r+0x120>
 800a1e8:	9207      	str	r2, [sp, #28]
 800a1ea:	e004      	b.n	800a1f6 <_vfiprintf_r+0x12a>
 800a1ec:	4252      	negs	r2, r2
 800a1ee:	f043 0302 	orr.w	r3, r3, #2
 800a1f2:	9207      	str	r2, [sp, #28]
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	f898 3000 	ldrb.w	r3, [r8]
 800a1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a1fc:	d110      	bne.n	800a220 <_vfiprintf_r+0x154>
 800a1fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	f108 0101 	add.w	r1, r8, #1
 800a208:	d137      	bne.n	800a27a <_vfiprintf_r+0x1ae>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	1d1a      	adds	r2, r3, #4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	9203      	str	r2, [sp, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfb8      	it	lt
 800a216:	f04f 33ff 	movlt.w	r3, #4294967295
 800a21a:	f108 0802 	add.w	r8, r8, #2
 800a21e:	9305      	str	r3, [sp, #20]
 800a220:	4d31      	ldr	r5, [pc, #196]	; (800a2e8 <_vfiprintf_r+0x21c>)
 800a222:	f898 1000 	ldrb.w	r1, [r8]
 800a226:	2203      	movs	r2, #3
 800a228:	4628      	mov	r0, r5
 800a22a:	f7f5 ffe9 	bl	8000200 <memchr>
 800a22e:	b140      	cbz	r0, 800a242 <_vfiprintf_r+0x176>
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	1b40      	subs	r0, r0, r5
 800a234:	fa03 f000 	lsl.w	r0, r3, r0
 800a238:	9b04      	ldr	r3, [sp, #16]
 800a23a:	4303      	orrs	r3, r0
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	f108 0801 	add.w	r8, r8, #1
 800a242:	f898 1000 	ldrb.w	r1, [r8]
 800a246:	4829      	ldr	r0, [pc, #164]	; (800a2ec <_vfiprintf_r+0x220>)
 800a248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a24c:	2206      	movs	r2, #6
 800a24e:	f108 0701 	add.w	r7, r8, #1
 800a252:	f7f5 ffd5 	bl	8000200 <memchr>
 800a256:	2800      	cmp	r0, #0
 800a258:	d034      	beq.n	800a2c4 <_vfiprintf_r+0x1f8>
 800a25a:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <_vfiprintf_r+0x224>)
 800a25c:	bb03      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x1d4>
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	3307      	adds	r3, #7
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	3308      	adds	r3, #8
 800a268:	9303      	str	r3, [sp, #12]
 800a26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26c:	444b      	add	r3, r9
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	e74c      	b.n	800a10c <_vfiprintf_r+0x40>
 800a272:	fb00 3202 	mla	r2, r0, r2, r3
 800a276:	2101      	movs	r1, #1
 800a278:	e786      	b.n	800a188 <_vfiprintf_r+0xbc>
 800a27a:	2300      	movs	r3, #0
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	4618      	mov	r0, r3
 800a280:	250a      	movs	r5, #10
 800a282:	4688      	mov	r8, r1
 800a284:	3101      	adds	r1, #1
 800a286:	f898 2000 	ldrb.w	r2, [r8]
 800a28a:	3a30      	subs	r2, #48	; 0x30
 800a28c:	2a09      	cmp	r2, #9
 800a28e:	d903      	bls.n	800a298 <_vfiprintf_r+0x1cc>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0c5      	beq.n	800a220 <_vfiprintf_r+0x154>
 800a294:	9005      	str	r0, [sp, #20]
 800a296:	e7c3      	b.n	800a220 <_vfiprintf_r+0x154>
 800a298:	fb05 2000 	mla	r0, r5, r0, r2
 800a29c:	2301      	movs	r3, #1
 800a29e:	e7f0      	b.n	800a282 <_vfiprintf_r+0x1b6>
 800a2a0:	ab03      	add	r3, sp, #12
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4b13      	ldr	r3, [pc, #76]	; (800a2f4 <_vfiprintf_r+0x228>)
 800a2a8:	a904      	add	r1, sp, #16
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	d1d8      	bne.n	800a26a <_vfiprintf_r+0x19e>
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	065b      	lsls	r3, r3, #25
 800a2bc:	f53f af7d 	bmi.w	800a1ba <_vfiprintf_r+0xee>
 800a2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c2:	e77c      	b.n	800a1be <_vfiprintf_r+0xf2>
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <_vfiprintf_r+0x228>)
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f888 	bl	800a3e4 <_printf_i>
 800a2d4:	e7ec      	b.n	800a2b0 <_vfiprintf_r+0x1e4>
 800a2d6:	bf00      	nop
 800a2d8:	0800d410 	.word	0x0800d410
 800a2dc:	0800d454 	.word	0x0800d454
 800a2e0:	0800d430 	.word	0x0800d430
 800a2e4:	0800d3f0 	.word	0x0800d3f0
 800a2e8:	0800d45a 	.word	0x0800d45a
 800a2ec:	0800d45e 	.word	0x0800d45e
 800a2f0:	00000000 	.word	0x00000000
 800a2f4:	0800a0a9 	.word	0x0800a0a9

0800a2f8 <_printf_common>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	4691      	mov	r9, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	688a      	ldr	r2, [r1, #8]
 800a302:	690b      	ldr	r3, [r1, #16]
 800a304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a308:	4293      	cmp	r3, r2
 800a30a:	bfb8      	it	lt
 800a30c:	4613      	movlt	r3, r2
 800a30e:	f8c9 3000 	str.w	r3, [r9]
 800a312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a316:	4606      	mov	r6, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	b112      	cbz	r2, 800a322 <_printf_common+0x2a>
 800a31c:	3301      	adds	r3, #1
 800a31e:	f8c9 3000 	str.w	r3, [r9]
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	0699      	lsls	r1, r3, #26
 800a326:	bf42      	ittt	mi
 800a328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a32c:	3302      	addmi	r3, #2
 800a32e:	f8c9 3000 	strmi.w	r3, [r9]
 800a332:	6825      	ldr	r5, [r4, #0]
 800a334:	f015 0506 	ands.w	r5, r5, #6
 800a338:	d107      	bne.n	800a34a <_printf_common+0x52>
 800a33a:	f104 0a19 	add.w	sl, r4, #25
 800a33e:	68e3      	ldr	r3, [r4, #12]
 800a340:	f8d9 2000 	ldr.w	r2, [r9]
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	429d      	cmp	r5, r3
 800a348:	db29      	blt.n	800a39e <_printf_common+0xa6>
 800a34a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	3300      	adds	r3, #0
 800a352:	bf18      	it	ne
 800a354:	2301      	movne	r3, #1
 800a356:	0692      	lsls	r2, r2, #26
 800a358:	d42e      	bmi.n	800a3b8 <_printf_common+0xc0>
 800a35a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a35e:	4639      	mov	r1, r7
 800a360:	4630      	mov	r0, r6
 800a362:	47c0      	blx	r8
 800a364:	3001      	adds	r0, #1
 800a366:	d021      	beq.n	800a3ac <_printf_common+0xb4>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	68e5      	ldr	r5, [r4, #12]
 800a36c:	f8d9 2000 	ldr.w	r2, [r9]
 800a370:	f003 0306 	and.w	r3, r3, #6
 800a374:	2b04      	cmp	r3, #4
 800a376:	bf08      	it	eq
 800a378:	1aad      	subeq	r5, r5, r2
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	6922      	ldr	r2, [r4, #16]
 800a37e:	bf0c      	ite	eq
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	2500      	movne	r5, #0
 800a386:	4293      	cmp	r3, r2
 800a388:	bfc4      	itt	gt
 800a38a:	1a9b      	subgt	r3, r3, r2
 800a38c:	18ed      	addgt	r5, r5, r3
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	341a      	adds	r4, #26
 800a394:	454d      	cmp	r5, r9
 800a396:	d11b      	bne.n	800a3d0 <_printf_common+0xd8>
 800a398:	2000      	movs	r0, #0
 800a39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	47c0      	blx	r8
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d103      	bne.n	800a3b4 <_printf_common+0xbc>
 800a3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	e7c2      	b.n	800a33e <_printf_common+0x46>
 800a3b8:	18e1      	adds	r1, r4, r3
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	2030      	movs	r0, #48	; 0x30
 800a3be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c2:	4422      	add	r2, r4
 800a3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3cc:	3302      	adds	r3, #2
 800a3ce:	e7c4      	b.n	800a35a <_printf_common+0x62>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	47c0      	blx	r8
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d0e6      	beq.n	800a3ac <_printf_common+0xb4>
 800a3de:	f109 0901 	add.w	r9, r9, #1
 800a3e2:	e7d7      	b.n	800a394 <_printf_common+0x9c>

0800a3e4 <_printf_i>:
 800a3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	4617      	mov	r7, r2
 800a3ea:	7e0a      	ldrb	r2, [r1, #24]
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	2a6e      	cmp	r2, #110	; 0x6e
 800a3f0:	4698      	mov	r8, r3
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a3fc:	f000 80bc 	beq.w	800a578 <_printf_i+0x194>
 800a400:	d81a      	bhi.n	800a438 <_printf_i+0x54>
 800a402:	2a63      	cmp	r2, #99	; 0x63
 800a404:	d02e      	beq.n	800a464 <_printf_i+0x80>
 800a406:	d80a      	bhi.n	800a41e <_printf_i+0x3a>
 800a408:	2a00      	cmp	r2, #0
 800a40a:	f000 80c8 	beq.w	800a59e <_printf_i+0x1ba>
 800a40e:	2a58      	cmp	r2, #88	; 0x58
 800a410:	f000 808a 	beq.w	800a528 <_printf_i+0x144>
 800a414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a418:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a41c:	e02a      	b.n	800a474 <_printf_i+0x90>
 800a41e:	2a64      	cmp	r2, #100	; 0x64
 800a420:	d001      	beq.n	800a426 <_printf_i+0x42>
 800a422:	2a69      	cmp	r2, #105	; 0x69
 800a424:	d1f6      	bne.n	800a414 <_printf_i+0x30>
 800a426:	6821      	ldr	r1, [r4, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a42e:	d023      	beq.n	800a478 <_printf_i+0x94>
 800a430:	1d11      	adds	r1, r2, #4
 800a432:	6019      	str	r1, [r3, #0]
 800a434:	6813      	ldr	r3, [r2, #0]
 800a436:	e027      	b.n	800a488 <_printf_i+0xa4>
 800a438:	2a73      	cmp	r2, #115	; 0x73
 800a43a:	f000 80b4 	beq.w	800a5a6 <_printf_i+0x1c2>
 800a43e:	d808      	bhi.n	800a452 <_printf_i+0x6e>
 800a440:	2a6f      	cmp	r2, #111	; 0x6f
 800a442:	d02a      	beq.n	800a49a <_printf_i+0xb6>
 800a444:	2a70      	cmp	r2, #112	; 0x70
 800a446:	d1e5      	bne.n	800a414 <_printf_i+0x30>
 800a448:	680a      	ldr	r2, [r1, #0]
 800a44a:	f042 0220 	orr.w	r2, r2, #32
 800a44e:	600a      	str	r2, [r1, #0]
 800a450:	e003      	b.n	800a45a <_printf_i+0x76>
 800a452:	2a75      	cmp	r2, #117	; 0x75
 800a454:	d021      	beq.n	800a49a <_printf_i+0xb6>
 800a456:	2a78      	cmp	r2, #120	; 0x78
 800a458:	d1dc      	bne.n	800a414 <_printf_i+0x30>
 800a45a:	2278      	movs	r2, #120	; 0x78
 800a45c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a460:	496e      	ldr	r1, [pc, #440]	; (800a61c <_printf_i+0x238>)
 800a462:	e064      	b.n	800a52e <_printf_i+0x14a>
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a46a:	1d11      	adds	r1, r2, #4
 800a46c:	6019      	str	r1, [r3, #0]
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a474:	2301      	movs	r3, #1
 800a476:	e0a3      	b.n	800a5c0 <_printf_i+0x1dc>
 800a478:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a47c:	f102 0104 	add.w	r1, r2, #4
 800a480:	6019      	str	r1, [r3, #0]
 800a482:	d0d7      	beq.n	800a434 <_printf_i+0x50>
 800a484:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	da03      	bge.n	800a494 <_printf_i+0xb0>
 800a48c:	222d      	movs	r2, #45	; 0x2d
 800a48e:	425b      	negs	r3, r3
 800a490:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a494:	4962      	ldr	r1, [pc, #392]	; (800a620 <_printf_i+0x23c>)
 800a496:	220a      	movs	r2, #10
 800a498:	e017      	b.n	800a4ca <_printf_i+0xe6>
 800a49a:	6820      	ldr	r0, [r4, #0]
 800a49c:	6819      	ldr	r1, [r3, #0]
 800a49e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a4a2:	d003      	beq.n	800a4ac <_printf_i+0xc8>
 800a4a4:	1d08      	adds	r0, r1, #4
 800a4a6:	6018      	str	r0, [r3, #0]
 800a4a8:	680b      	ldr	r3, [r1, #0]
 800a4aa:	e006      	b.n	800a4ba <_printf_i+0xd6>
 800a4ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4b0:	f101 0004 	add.w	r0, r1, #4
 800a4b4:	6018      	str	r0, [r3, #0]
 800a4b6:	d0f7      	beq.n	800a4a8 <_printf_i+0xc4>
 800a4b8:	880b      	ldrh	r3, [r1, #0]
 800a4ba:	4959      	ldr	r1, [pc, #356]	; (800a620 <_printf_i+0x23c>)
 800a4bc:	2a6f      	cmp	r2, #111	; 0x6f
 800a4be:	bf14      	ite	ne
 800a4c0:	220a      	movne	r2, #10
 800a4c2:	2208      	moveq	r2, #8
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a4ca:	6865      	ldr	r5, [r4, #4]
 800a4cc:	60a5      	str	r5, [r4, #8]
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	f2c0 809c 	blt.w	800a60c <_printf_i+0x228>
 800a4d4:	6820      	ldr	r0, [r4, #0]
 800a4d6:	f020 0004 	bic.w	r0, r0, #4
 800a4da:	6020      	str	r0, [r4, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d13f      	bne.n	800a560 <_printf_i+0x17c>
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	f040 8095 	bne.w	800a610 <_printf_i+0x22c>
 800a4e6:	4675      	mov	r5, lr
 800a4e8:	2a08      	cmp	r2, #8
 800a4ea:	d10b      	bne.n	800a504 <_printf_i+0x120>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	07da      	lsls	r2, r3, #31
 800a4f0:	d508      	bpl.n	800a504 <_printf_i+0x120>
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	6862      	ldr	r2, [r4, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	bfde      	ittt	le
 800a4fa:	2330      	movle	r3, #48	; 0x30
 800a4fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a500:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a504:	ebae 0305 	sub.w	r3, lr, r5
 800a508:	6123      	str	r3, [r4, #16]
 800a50a:	f8cd 8000 	str.w	r8, [sp]
 800a50e:	463b      	mov	r3, r7
 800a510:	aa03      	add	r2, sp, #12
 800a512:	4621      	mov	r1, r4
 800a514:	4630      	mov	r0, r6
 800a516:	f7ff feef 	bl	800a2f8 <_printf_common>
 800a51a:	3001      	adds	r0, #1
 800a51c:	d155      	bne.n	800a5ca <_printf_i+0x1e6>
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295
 800a522:	b005      	add	sp, #20
 800a524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a528:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a52c:	493c      	ldr	r1, [pc, #240]	; (800a620 <_printf_i+0x23c>)
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a536:	f100 0504 	add.w	r5, r0, #4
 800a53a:	601d      	str	r5, [r3, #0]
 800a53c:	d001      	beq.n	800a542 <_printf_i+0x15e>
 800a53e:	6803      	ldr	r3, [r0, #0]
 800a540:	e002      	b.n	800a548 <_printf_i+0x164>
 800a542:	0655      	lsls	r5, r2, #25
 800a544:	d5fb      	bpl.n	800a53e <_printf_i+0x15a>
 800a546:	8803      	ldrh	r3, [r0, #0]
 800a548:	07d0      	lsls	r0, r2, #31
 800a54a:	bf44      	itt	mi
 800a54c:	f042 0220 	orrmi.w	r2, r2, #32
 800a550:	6022      	strmi	r2, [r4, #0]
 800a552:	b91b      	cbnz	r3, 800a55c <_printf_i+0x178>
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	f022 0220 	bic.w	r2, r2, #32
 800a55a:	6022      	str	r2, [r4, #0]
 800a55c:	2210      	movs	r2, #16
 800a55e:	e7b1      	b.n	800a4c4 <_printf_i+0xe0>
 800a560:	4675      	mov	r5, lr
 800a562:	fbb3 f0f2 	udiv	r0, r3, r2
 800a566:	fb02 3310 	mls	r3, r2, r0, r3
 800a56a:	5ccb      	ldrb	r3, [r1, r3]
 800a56c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a570:	4603      	mov	r3, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	d1f5      	bne.n	800a562 <_printf_i+0x17e>
 800a576:	e7b7      	b.n	800a4e8 <_printf_i+0x104>
 800a578:	6808      	ldr	r0, [r1, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	6949      	ldr	r1, [r1, #20]
 800a57e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a582:	d004      	beq.n	800a58e <_printf_i+0x1aa>
 800a584:	1d10      	adds	r0, r2, #4
 800a586:	6018      	str	r0, [r3, #0]
 800a588:	6813      	ldr	r3, [r2, #0]
 800a58a:	6019      	str	r1, [r3, #0]
 800a58c:	e007      	b.n	800a59e <_printf_i+0x1ba>
 800a58e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a592:	f102 0004 	add.w	r0, r2, #4
 800a596:	6018      	str	r0, [r3, #0]
 800a598:	6813      	ldr	r3, [r2, #0]
 800a59a:	d0f6      	beq.n	800a58a <_printf_i+0x1a6>
 800a59c:	8019      	strh	r1, [r3, #0]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	4675      	mov	r5, lr
 800a5a4:	e7b1      	b.n	800a50a <_printf_i+0x126>
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	1d11      	adds	r1, r2, #4
 800a5aa:	6019      	str	r1, [r3, #0]
 800a5ac:	6815      	ldr	r5, [r2, #0]
 800a5ae:	6862      	ldr	r2, [r4, #4]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7f5 fe24 	bl	8000200 <memchr>
 800a5b8:	b108      	cbz	r0, 800a5be <_printf_i+0x1da>
 800a5ba:	1b40      	subs	r0, r0, r5
 800a5bc:	6060      	str	r0, [r4, #4]
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	6123      	str	r3, [r4, #16]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c8:	e79f      	b.n	800a50a <_printf_i+0x126>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	47c0      	blx	r8
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d0a2      	beq.n	800a51e <_printf_i+0x13a>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	079b      	lsls	r3, r3, #30
 800a5dc:	d507      	bpl.n	800a5ee <_printf_i+0x20a>
 800a5de:	2500      	movs	r5, #0
 800a5e0:	f104 0919 	add.w	r9, r4, #25
 800a5e4:	68e3      	ldr	r3, [r4, #12]
 800a5e6:	9a03      	ldr	r2, [sp, #12]
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	db05      	blt.n	800a5fa <_printf_i+0x216>
 800a5ee:	68e0      	ldr	r0, [r4, #12]
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	4298      	cmp	r0, r3
 800a5f4:	bfb8      	it	lt
 800a5f6:	4618      	movlt	r0, r3
 800a5f8:	e793      	b.n	800a522 <_printf_i+0x13e>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	464a      	mov	r2, r9
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	47c0      	blx	r8
 800a604:	3001      	adds	r0, #1
 800a606:	d08a      	beq.n	800a51e <_printf_i+0x13a>
 800a608:	3501      	adds	r5, #1
 800a60a:	e7eb      	b.n	800a5e4 <_printf_i+0x200>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1a7      	bne.n	800a560 <_printf_i+0x17c>
 800a610:	780b      	ldrb	r3, [r1, #0]
 800a612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a61a:	e765      	b.n	800a4e8 <_printf_i+0x104>
 800a61c:	0800d476 	.word	0x0800d476
 800a620:	0800d465 	.word	0x0800d465

0800a624 <_sbrk_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4c06      	ldr	r4, [pc, #24]	; (800a640 <_sbrk_r+0x1c>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4605      	mov	r5, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	f7ff fb1e 	bl	8009c70 <_sbrk>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_sbrk_r+0x1a>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_sbrk_r+0x1a>
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	20007d44 	.word	0x20007d44

0800a644 <__sread>:
 800a644:	b510      	push	{r4, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64c:	f000 fa98 	bl	800ab80 <_read_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	bfab      	itete	ge
 800a654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a656:	89a3      	ldrhlt	r3, [r4, #12]
 800a658:	181b      	addge	r3, r3, r0
 800a65a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a65e:	bfac      	ite	ge
 800a660:	6563      	strge	r3, [r4, #84]	; 0x54
 800a662:	81a3      	strhlt	r3, [r4, #12]
 800a664:	bd10      	pop	{r4, pc}

0800a666 <__swrite>:
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	461f      	mov	r7, r3
 800a66c:	898b      	ldrh	r3, [r1, #12]
 800a66e:	05db      	lsls	r3, r3, #23
 800a670:	4605      	mov	r5, r0
 800a672:	460c      	mov	r4, r1
 800a674:	4616      	mov	r6, r2
 800a676:	d505      	bpl.n	800a684 <__swrite+0x1e>
 800a678:	2302      	movs	r3, #2
 800a67a:	2200      	movs	r2, #0
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	f000 f9b8 	bl	800a9f4 <_lseek_r>
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	4628      	mov	r0, r5
 800a696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a69a:	f000 b869 	b.w	800a770 <_write_r>

0800a69e <__sseek>:
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a6:	f000 f9a5 	bl	800a9f4 <_lseek_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	bf15      	itete	ne
 800a6b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ba:	81a3      	strheq	r3, [r4, #12]
 800a6bc:	bf18      	it	ne
 800a6be:	81a3      	strhne	r3, [r4, #12]
 800a6c0:	bd10      	pop	{r4, pc}

0800a6c2 <__sclose>:
 800a6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c6:	f000 b8d3 	b.w	800a870 <_close_r>
	...

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6983      	ldr	r3, [r0, #24]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f7ff fbe5 	bl	8009ea8 <__sinit>
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <__swbuf_r+0x98>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d12a      	bne.n	800a73a <__swbuf_r+0x6e>
 800a6e4:	686c      	ldr	r4, [r5, #4]
 800a6e6:	69a3      	ldr	r3, [r4, #24]
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	071a      	lsls	r2, r3, #28
 800a6ee:	d52e      	bpl.n	800a74e <__swbuf_r+0x82>
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	b363      	cbz	r3, 800a74e <__swbuf_r+0x82>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1ac0      	subs	r0, r0, r3
 800a6fa:	6963      	ldr	r3, [r4, #20]
 800a6fc:	b2f6      	uxtb	r6, r6
 800a6fe:	4298      	cmp	r0, r3
 800a700:	4637      	mov	r7, r6
 800a702:	db04      	blt.n	800a70e <__swbuf_r+0x42>
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f94a 	bl	800a9a0 <_fflush_r>
 800a70c:	bb28      	cbnz	r0, 800a75a <__swbuf_r+0x8e>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	3b01      	subs	r3, #1
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	701e      	strb	r6, [r3, #0]
 800a71c:	6963      	ldr	r3, [r4, #20]
 800a71e:	3001      	adds	r0, #1
 800a720:	4298      	cmp	r0, r3
 800a722:	d004      	beq.n	800a72e <__swbuf_r+0x62>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d519      	bpl.n	800a75e <__swbuf_r+0x92>
 800a72a:	2e0a      	cmp	r6, #10
 800a72c:	d117      	bne.n	800a75e <__swbuf_r+0x92>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f935 	bl	800a9a0 <_fflush_r>
 800a736:	b190      	cbz	r0, 800a75e <__swbuf_r+0x92>
 800a738:	e00f      	b.n	800a75a <__swbuf_r+0x8e>
 800a73a:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <__swbuf_r+0x9c>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	d101      	bne.n	800a744 <__swbuf_r+0x78>
 800a740:	68ac      	ldr	r4, [r5, #8]
 800a742:	e7d0      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a744:	4b09      	ldr	r3, [pc, #36]	; (800a76c <__swbuf_r+0xa0>)
 800a746:	429c      	cmp	r4, r3
 800a748:	bf08      	it	eq
 800a74a:	68ec      	ldreq	r4, [r5, #12]
 800a74c:	e7cb      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f81f 	bl	800a794 <__swsetup_r>
 800a756:	2800      	cmp	r0, #0
 800a758:	d0cc      	beq.n	800a6f4 <__swbuf_r+0x28>
 800a75a:	f04f 37ff 	mov.w	r7, #4294967295
 800a75e:	4638      	mov	r0, r7
 800a760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a762:	bf00      	nop
 800a764:	0800d410 	.word	0x0800d410
 800a768:	0800d430 	.word	0x0800d430
 800a76c:	0800d3f0 	.word	0x0800d3f0

0800a770 <_write_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4c07      	ldr	r4, [pc, #28]	; (800a790 <_write_r+0x20>)
 800a774:	4605      	mov	r5, r0
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7ff fa68 	bl	8009c54 <_write>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_write_r+0x1e>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_write_r+0x1e>
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20007d44 	.word	0x20007d44

0800a794 <__swsetup_r>:
 800a794:	4b32      	ldr	r3, [pc, #200]	; (800a860 <__swsetup_r+0xcc>)
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	681d      	ldr	r5, [r3, #0]
 800a79a:	4606      	mov	r6, r0
 800a79c:	460c      	mov	r4, r1
 800a79e:	b125      	cbz	r5, 800a7aa <__swsetup_r+0x16>
 800a7a0:	69ab      	ldr	r3, [r5, #24]
 800a7a2:	b913      	cbnz	r3, 800a7aa <__swsetup_r+0x16>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f7ff fb7f 	bl	8009ea8 <__sinit>
 800a7aa:	4b2e      	ldr	r3, [pc, #184]	; (800a864 <__swsetup_r+0xd0>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	d10f      	bne.n	800a7d0 <__swsetup_r+0x3c>
 800a7b0:	686c      	ldr	r4, [r5, #4]
 800a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	0715      	lsls	r5, r2, #28
 800a7ba:	d42c      	bmi.n	800a816 <__swsetup_r+0x82>
 800a7bc:	06d0      	lsls	r0, r2, #27
 800a7be:	d411      	bmi.n	800a7e4 <__swsetup_r+0x50>
 800a7c0:	2209      	movs	r2, #9
 800a7c2:	6032      	str	r2, [r6, #0]
 800a7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	4b25      	ldr	r3, [pc, #148]	; (800a868 <__swsetup_r+0xd4>)
 800a7d2:	429c      	cmp	r4, r3
 800a7d4:	d101      	bne.n	800a7da <__swsetup_r+0x46>
 800a7d6:	68ac      	ldr	r4, [r5, #8]
 800a7d8:	e7eb      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <__swsetup_r+0xd8>)
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	bf08      	it	eq
 800a7e0:	68ec      	ldreq	r4, [r5, #12]
 800a7e2:	e7e6      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7e4:	0751      	lsls	r1, r2, #29
 800a7e6:	d512      	bpl.n	800a80e <__swsetup_r+0x7a>
 800a7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ea:	b141      	cbz	r1, 800a7fe <__swsetup_r+0x6a>
 800a7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d002      	beq.n	800a7fa <__swsetup_r+0x66>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 f975 	bl	800aae4 <_free_r>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	2300      	movs	r3, #0
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f043 0308 	orr.w	r3, r3, #8
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	b94b      	cbnz	r3, 800a82e <__swsetup_r+0x9a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a824:	d003      	beq.n	800a82e <__swsetup_r+0x9a>
 800a826:	4621      	mov	r1, r4
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f919 	bl	800aa60 <__smakebuf_r>
 800a82e:	89a2      	ldrh	r2, [r4, #12]
 800a830:	f012 0301 	ands.w	r3, r2, #1
 800a834:	d00c      	beq.n	800a850 <__swsetup_r+0xbc>
 800a836:	2300      	movs	r3, #0
 800a838:	60a3      	str	r3, [r4, #8]
 800a83a:	6963      	ldr	r3, [r4, #20]
 800a83c:	425b      	negs	r3, r3
 800a83e:	61a3      	str	r3, [r4, #24]
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	b953      	cbnz	r3, 800a85a <__swsetup_r+0xc6>
 800a844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a848:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a84c:	d1ba      	bne.n	800a7c4 <__swsetup_r+0x30>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	0792      	lsls	r2, r2, #30
 800a852:	bf58      	it	pl
 800a854:	6963      	ldrpl	r3, [r4, #20]
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	e7f2      	b.n	800a840 <__swsetup_r+0xac>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e7f7      	b.n	800a84e <__swsetup_r+0xba>
 800a85e:	bf00      	nop
 800a860:	20000018 	.word	0x20000018
 800a864:	0800d410 	.word	0x0800d410
 800a868:	0800d430 	.word	0x0800d430
 800a86c:	0800d3f0 	.word	0x0800d3f0

0800a870 <_close_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4c06      	ldr	r4, [pc, #24]	; (800a88c <_close_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4605      	mov	r5, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	f7ff fa12 	bl	8009ca4 <_close>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_close_r+0x1a>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	b103      	cbz	r3, 800a88a <_close_r+0x1a>
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20007d44 	.word	0x20007d44

0800a890 <__sflush_r>:
 800a890:	898a      	ldrh	r2, [r1, #12]
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	4605      	mov	r5, r0
 800a898:	0710      	lsls	r0, r2, #28
 800a89a:	460c      	mov	r4, r1
 800a89c:	d45a      	bmi.n	800a954 <__sflush_r+0xc4>
 800a89e:	684b      	ldr	r3, [r1, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc05      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc02      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d0f9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8bc:	682f      	ldr	r7, [r5, #0]
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	d033      	beq.n	800a92a <__sflush_r+0x9a>
 800a8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	075a      	lsls	r2, r3, #29
 800a8c8:	d505      	bpl.n	800a8d6 <__sflush_r+0x46>
 800a8ca:	6863      	ldr	r3, [r4, #4]
 800a8cc:	1ac0      	subs	r0, r0, r3
 800a8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d0:	b10b      	cbz	r3, 800a8d6 <__sflush_r+0x46>
 800a8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8d4:	1ac0      	subs	r0, r0, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8dc:	6a21      	ldr	r1, [r4, #32]
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b0      	blx	r6
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	d106      	bne.n	800a8f6 <__sflush_r+0x66>
 800a8e8:	6829      	ldr	r1, [r5, #0]
 800a8ea:	291d      	cmp	r1, #29
 800a8ec:	d84b      	bhi.n	800a986 <__sflush_r+0xf6>
 800a8ee:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <__sflush_r+0x10c>)
 800a8f0:	40ca      	lsrs	r2, r1
 800a8f2:	07d6      	lsls	r6, r2, #31
 800a8f4:	d547      	bpl.n	800a986 <__sflush_r+0xf6>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	6062      	str	r2, [r4, #4]
 800a8fa:	04d9      	lsls	r1, r3, #19
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	d504      	bpl.n	800a90c <__sflush_r+0x7c>
 800a902:	1c42      	adds	r2, r0, #1
 800a904:	d101      	bne.n	800a90a <__sflush_r+0x7a>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	b903      	cbnz	r3, 800a90c <__sflush_r+0x7c>
 800a90a:	6560      	str	r0, [r4, #84]	; 0x54
 800a90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a90e:	602f      	str	r7, [r5, #0]
 800a910:	2900      	cmp	r1, #0
 800a912:	d0ca      	beq.n	800a8aa <__sflush_r+0x1a>
 800a914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a918:	4299      	cmp	r1, r3
 800a91a:	d002      	beq.n	800a922 <__sflush_r+0x92>
 800a91c:	4628      	mov	r0, r5
 800a91e:	f000 f8e1 	bl	800aae4 <_free_r>
 800a922:	2000      	movs	r0, #0
 800a924:	6360      	str	r0, [r4, #52]	; 0x34
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92a:	6a21      	ldr	r1, [r4, #32]
 800a92c:	2301      	movs	r3, #1
 800a92e:	4628      	mov	r0, r5
 800a930:	47b0      	blx	r6
 800a932:	1c41      	adds	r1, r0, #1
 800a934:	d1c6      	bne.n	800a8c4 <__sflush_r+0x34>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0c3      	beq.n	800a8c4 <__sflush_r+0x34>
 800a93c:	2b1d      	cmp	r3, #29
 800a93e:	d001      	beq.n	800a944 <__sflush_r+0xb4>
 800a940:	2b16      	cmp	r3, #22
 800a942:	d101      	bne.n	800a948 <__sflush_r+0xb8>
 800a944:	602f      	str	r7, [r5, #0]
 800a946:	e7b0      	b.n	800a8aa <__sflush_r+0x1a>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	690f      	ldr	r7, [r1, #16]
 800a956:	2f00      	cmp	r7, #0
 800a958:	d0a7      	beq.n	800a8aa <__sflush_r+0x1a>
 800a95a:	0793      	lsls	r3, r2, #30
 800a95c:	680e      	ldr	r6, [r1, #0]
 800a95e:	bf08      	it	eq
 800a960:	694b      	ldreq	r3, [r1, #20]
 800a962:	600f      	str	r7, [r1, #0]
 800a964:	bf18      	it	ne
 800a966:	2300      	movne	r3, #0
 800a968:	eba6 0807 	sub.w	r8, r6, r7
 800a96c:	608b      	str	r3, [r1, #8]
 800a96e:	f1b8 0f00 	cmp.w	r8, #0
 800a972:	dd9a      	ble.n	800a8aa <__sflush_r+0x1a>
 800a974:	4643      	mov	r3, r8
 800a976:	463a      	mov	r2, r7
 800a978:	6a21      	ldr	r1, [r4, #32]
 800a97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a97c:	4628      	mov	r0, r5
 800a97e:	47b0      	blx	r6
 800a980:	2800      	cmp	r0, #0
 800a982:	dc07      	bgt.n	800a994 <__sflush_r+0x104>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a994:	4407      	add	r7, r0
 800a996:	eba8 0800 	sub.w	r8, r8, r0
 800a99a:	e7e8      	b.n	800a96e <__sflush_r+0xde>
 800a99c:	20400001 	.word	0x20400001

0800a9a0 <_fflush_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b1db      	cbz	r3, 800a9e2 <_fflush_r+0x42>
 800a9aa:	b118      	cbz	r0, 800a9b4 <_fflush_r+0x14>
 800a9ac:	6983      	ldr	r3, [r0, #24]
 800a9ae:	b90b      	cbnz	r3, 800a9b4 <_fflush_r+0x14>
 800a9b0:	f7ff fa7a 	bl	8009ea8 <__sinit>
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <_fflush_r+0x48>)
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d109      	bne.n	800a9ce <_fflush_r+0x2e>
 800a9ba:	686c      	ldr	r4, [r5, #4]
 800a9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c0:	b17b      	cbz	r3, 800a9e2 <_fflush_r+0x42>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ca:	f7ff bf61 	b.w	800a890 <__sflush_r>
 800a9ce:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <_fflush_r+0x4c>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d101      	bne.n	800a9d8 <_fflush_r+0x38>
 800a9d4:	68ac      	ldr	r4, [r5, #8]
 800a9d6:	e7f1      	b.n	800a9bc <_fflush_r+0x1c>
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <_fflush_r+0x50>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	bf08      	it	eq
 800a9de:	68ec      	ldreq	r4, [r5, #12]
 800a9e0:	e7ec      	b.n	800a9bc <_fflush_r+0x1c>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	bd38      	pop	{r3, r4, r5, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800d410 	.word	0x0800d410
 800a9ec:	0800d430 	.word	0x0800d430
 800a9f0:	0800d3f0 	.word	0x0800d3f0

0800a9f4 <_lseek_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4c07      	ldr	r4, [pc, #28]	; (800aa14 <_lseek_r+0x20>)
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	4608      	mov	r0, r1
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	6022      	str	r2, [r4, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f7ff f958 	bl	8009cb8 <_lseek>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_lseek_r+0x1e>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_lseek_r+0x1e>
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	20007d44 	.word	0x20007d44

0800aa18 <__swhatbuf_r>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	460e      	mov	r6, r1
 800aa1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa20:	2900      	cmp	r1, #0
 800aa22:	b090      	sub	sp, #64	; 0x40
 800aa24:	4614      	mov	r4, r2
 800aa26:	461d      	mov	r5, r3
 800aa28:	da07      	bge.n	800aa3a <__swhatbuf_r+0x22>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	602b      	str	r3, [r5, #0]
 800aa2e:	89b3      	ldrh	r3, [r6, #12]
 800aa30:	061a      	lsls	r2, r3, #24
 800aa32:	d410      	bmi.n	800aa56 <__swhatbuf_r+0x3e>
 800aa34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa38:	e00e      	b.n	800aa58 <__swhatbuf_r+0x40>
 800aa3a:	aa01      	add	r2, sp, #4
 800aa3c:	f000 f8b2 	bl	800aba4 <_fstat_r>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	dbf2      	blt.n	800aa2a <__swhatbuf_r+0x12>
 800aa44:	9a02      	ldr	r2, [sp, #8]
 800aa46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa4e:	425a      	negs	r2, r3
 800aa50:	415a      	adcs	r2, r3
 800aa52:	602a      	str	r2, [r5, #0]
 800aa54:	e7ee      	b.n	800aa34 <__swhatbuf_r+0x1c>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	2000      	movs	r0, #0
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	b010      	add	sp, #64	; 0x40
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}

0800aa60 <__smakebuf_r>:
 800aa60:	898b      	ldrh	r3, [r1, #12]
 800aa62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa64:	079d      	lsls	r5, r3, #30
 800aa66:	4606      	mov	r6, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	d507      	bpl.n	800aa7c <__smakebuf_r+0x1c>
 800aa6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	2301      	movs	r3, #1
 800aa76:	6163      	str	r3, [r4, #20]
 800aa78:	b002      	add	sp, #8
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	ab01      	add	r3, sp, #4
 800aa7e:	466a      	mov	r2, sp
 800aa80:	f7ff ffca 	bl	800aa18 <__swhatbuf_r>
 800aa84:	9900      	ldr	r1, [sp, #0]
 800aa86:	4605      	mov	r5, r0
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff fa97 	bl	8009fbc <_malloc_r>
 800aa8e:	b948      	cbnz	r0, 800aaa4 <__smakebuf_r+0x44>
 800aa90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa94:	059a      	lsls	r2, r3, #22
 800aa96:	d4ef      	bmi.n	800aa78 <__smakebuf_r+0x18>
 800aa98:	f023 0303 	bic.w	r3, r3, #3
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	e7e3      	b.n	800aa6c <__smakebuf_r+0xc>
 800aaa4:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <__smakebuf_r+0x7c>)
 800aaa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	6163      	str	r3, [r4, #20]
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	6120      	str	r0, [r4, #16]
 800aaba:	b15b      	cbz	r3, 800aad4 <__smakebuf_r+0x74>
 800aabc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aac0:	4630      	mov	r0, r6
 800aac2:	f000 f881 	bl	800abc8 <_isatty_r>
 800aac6:	b128      	cbz	r0, 800aad4 <__smakebuf_r+0x74>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	431d      	orrs	r5, r3
 800aad8:	81a5      	strh	r5, [r4, #12]
 800aada:	e7cd      	b.n	800aa78 <__smakebuf_r+0x18>
 800aadc:	08009e29 	.word	0x08009e29

0800aae0 <__malloc_lock>:
 800aae0:	4770      	bx	lr

0800aae2 <__malloc_unlock>:
 800aae2:	4770      	bx	lr

0800aae4 <_free_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4605      	mov	r5, r0
 800aae8:	2900      	cmp	r1, #0
 800aaea:	d045      	beq.n	800ab78 <_free_r+0x94>
 800aaec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf0:	1f0c      	subs	r4, r1, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bfb8      	it	lt
 800aaf6:	18e4      	addlt	r4, r4, r3
 800aaf8:	f7ff fff2 	bl	800aae0 <__malloc_lock>
 800aafc:	4a1f      	ldr	r2, [pc, #124]	; (800ab7c <_free_r+0x98>)
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	4610      	mov	r0, r2
 800ab02:	b933      	cbnz	r3, 800ab12 <_free_r+0x2e>
 800ab04:	6063      	str	r3, [r4, #4]
 800ab06:	6014      	str	r4, [r2, #0]
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0e:	f7ff bfe8 	b.w	800aae2 <__malloc_unlock>
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	d90c      	bls.n	800ab30 <_free_r+0x4c>
 800ab16:	6821      	ldr	r1, [r4, #0]
 800ab18:	1862      	adds	r2, r4, r1
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	bf04      	itt	eq
 800ab1e:	681a      	ldreq	r2, [r3, #0]
 800ab20:	685b      	ldreq	r3, [r3, #4]
 800ab22:	6063      	str	r3, [r4, #4]
 800ab24:	bf04      	itt	eq
 800ab26:	1852      	addeq	r2, r2, r1
 800ab28:	6022      	streq	r2, [r4, #0]
 800ab2a:	6004      	str	r4, [r0, #0]
 800ab2c:	e7ec      	b.n	800ab08 <_free_r+0x24>
 800ab2e:	4613      	mov	r3, r2
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	b10a      	cbz	r2, 800ab38 <_free_r+0x54>
 800ab34:	42a2      	cmp	r2, r4
 800ab36:	d9fa      	bls.n	800ab2e <_free_r+0x4a>
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	1858      	adds	r0, r3, r1
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	d10b      	bne.n	800ab58 <_free_r+0x74>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	4401      	add	r1, r0
 800ab44:	1858      	adds	r0, r3, r1
 800ab46:	4282      	cmp	r2, r0
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	d1dd      	bne.n	800ab08 <_free_r+0x24>
 800ab4c:	6810      	ldr	r0, [r2, #0]
 800ab4e:	6852      	ldr	r2, [r2, #4]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	4401      	add	r1, r0
 800ab54:	6019      	str	r1, [r3, #0]
 800ab56:	e7d7      	b.n	800ab08 <_free_r+0x24>
 800ab58:	d902      	bls.n	800ab60 <_free_r+0x7c>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	e7d3      	b.n	800ab08 <_free_r+0x24>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	1821      	adds	r1, r4, r0
 800ab64:	428a      	cmp	r2, r1
 800ab66:	bf04      	itt	eq
 800ab68:	6811      	ldreq	r1, [r2, #0]
 800ab6a:	6852      	ldreq	r2, [r2, #4]
 800ab6c:	6062      	str	r2, [r4, #4]
 800ab6e:	bf04      	itt	eq
 800ab70:	1809      	addeq	r1, r1, r0
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	605c      	str	r4, [r3, #4]
 800ab76:	e7c7      	b.n	800ab08 <_free_r+0x24>
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20004614 	.word	0x20004614

0800ab80 <_read_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4c07      	ldr	r4, [pc, #28]	; (800aba0 <_read_r+0x20>)
 800ab84:	4605      	mov	r5, r0
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7ff f852 	bl	8009c38 <_read>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_read_r+0x1e>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_read_r+0x1e>
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	20007d44 	.word	0x20007d44

0800aba4 <_fstat_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4c07      	ldr	r4, [pc, #28]	; (800abc4 <_fstat_r+0x20>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4605      	mov	r5, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	f7ff f87a 	bl	8009caa <_fstat>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d102      	bne.n	800abc0 <_fstat_r+0x1c>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	b103      	cbz	r3, 800abc0 <_fstat_r+0x1c>
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	20007d44 	.word	0x20007d44

0800abc8 <_isatty_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4c06      	ldr	r4, [pc, #24]	; (800abe4 <_isatty_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4605      	mov	r5, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	f7ff f86e 	bl	8009cb4 <_isatty>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_isatty_r+0x1a>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_isatty_r+0x1a>
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20007d44 	.word	0x20007d44

0800abe8 <_init>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr

0800abf4 <_fini>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	bf00      	nop
 800abf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfa:	bc08      	pop	{r3}
 800abfc:	469e      	mov	lr, r3
 800abfe:	4770      	bx	lr
